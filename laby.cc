#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <string>

#include <iostream>
template<typename T>
class Array {

  private:

    int size1, size2, size3;
    T *elems;
    const char *name;
    int warncount;

  public:

    Array() : size1(0), size2(0), size3(0), elems(0), name("unallocated"), warncount(0) {}
    ~Array() { deallocate_(); }

    void dim(const char *arrayname, int sz1, int sz2 = 1, int sz3 = 1) {
        deallocate_();
        elems = new T [sz1 * sz2 * sz3] ();
        size1 = sz1;
        size2 = sz2;
        size3 = sz3;
        name = arrayname;
    }

    T & operator() (const char *location, int i1) {
        if (i1 < 0 || i1 >= size1) {
            if (++warncount <= 3) {
                std::cerr << location << ": " << name << "(" << i1 << ") out of range\n";
            }
            if (!elems)
                dim("__auto__", 1);
            return elems[0];
        }
        return elems[i1];
    }

    T & operator() (const char *location, int i1, int i2) {
        if (i1 < 0 || i1 >= size1 || i2 < 0 || i2 >= size2) {
            if (++warncount <= 3) {
                std::cerr << location << ": " << name << "(" << i1 << "," << i2 << ") out of range\n";
            }
            if (!elems)
                dim("__auto__", 1);
            return elems[0];
        }
        return elems[i1 * size2 + i2];
    }

    T & operator() (const char *location, int i1, int i2, int i3) {
        if (i1 < 0 || i1 >= size1 || i2 < 0 || i2 >= size2 || i3 < 0 || i3 >= size3) {
            if (++warncount <= 3) {
                std::cerr << location << ": " << name << "(" << i1 << "," << i2 << "," << i3 << ") out of range\n";
            }
            if (!elems)
                dim("__auto__", 1);
            return elems[0];
        }
        return elems[(i1 * size2 + i2) * size3 + i3];
    }

  private:

    void deallocate_() {
      delete[] elems;
      elems = 0;
    }
};
#define LISTINDEX_INVALID -1000
struct ListElement {
    struct ListElement *next;
    struct ListElement *prev;
    /* element data starts here */
};
class LinkedList {
  public:
    struct ListElement *root;
    struct ListElement *current;
    struct ListElement *last;
    int length;
    int index;  /* must recalculate if LISTINDEX_INVALID */
    LinkedList() : root(0), current(0), last(0), length(0), index(-1) {};
    virtual struct ListElement *alloc_elem() = 0;
    virtual void del_elem(struct ListElement *elem) = 0;
};
template <typename T>
class TypedList : public LinkedList {
  public:
    struct ListElement *alloc_elem() {
        char *space = new char [sizeof(struct ListElement) + sizeof(T)];
        /* "placement new" to initialize the data part of the element */
        new (space + sizeof(struct ListElement)) T();
        return reinterpret_cast<struct ListElement *>(space);
    }
    void del_elem(struct ListElement *elem) {
        T *realelem = reinterpret_cast<T *> (elem + 1);
        realelem->~T();
        delete[] reinterpret_cast<char *>(elem);
    }
    ~TypedList() {
        struct ListElement *p;
        while (this->root) {
            p = this->root;
            this->root = p->next;
            this->del_elem(p);
        }
    }
};
#define LIST_CURRENT(list,type) (* (type *) ((list).current + 1))
/* The usual trick of basing offsetof on an offset from the NULL pointer
 * does not work in C++ with classes that have constructors. And because
 * of the use of std::string, the st_ types have constructors.
 * Workaround is to base offsetof on an instance of the class. */
template<typename T>
class empty_wrap {
    public:
    static T empty_T;
};
template <typename T>
T empty_wrap<T>::empty_T;
#define OFFSETOF(STRUCT, FIELD) (int32_t) (((char *) &(empty_wrap<STRUCT>::empty_T.FIELD)) - ((char *) &(empty_wrap<STRUCT>::empty_T)))
enum label { NOLABEL, Lv_again, Lv_geladen, Lv_nach_zauber};
struct st_ascii {
	uint8_t f_a;
	st_ascii() : f_a() {};
};
struct st_az {
	int16_t f_nr;
	int16_t f_staerke;
	int16_t f_dauer;
	int16_t f_source;
	st_az() : f_nr(), f_staerke(), f_dauer(), f_source() {};
};
struct st_byte {
	int8_t f_b;
	st_byte() : f_b() {};
};
struct st_carta {
	int16_t f_feld[151];
	st_carta() : f_feld() {};
};
struct st_char_tpl {
	std::string f_name;
	int16_t f_skills[145];
	st_char_tpl() : f_name(), f_skills() {};
};
struct st_character {
	uint8_t f_c;
	st_character() : f_c() {};
};
struct st_character_data {
	int8_t f_status;
	std::string f_verifikation;
	std::string f_name;
	int16_t f_skill_points;
	int16_t f_level;
	int16_t f_maxlevel;
	int16_t f_maennchen;
	int16_t f_mousepointer;
	int16_t f_lifepoints;
	int16_t f_maxlifepoints;
	int16_t f_lifegain;
	int16_t f_mana;
	int16_t f_maxmana;
	int16_t f_managain;
	int16_t f_attack;
	int16_t f_dexterity;
	int16_t f_strength;
	int16_t f_maxspeed;
	int16_t f_speed;
	int16_t f_perception;
	int16_t f_luck_score;
	int16_t f_power_score;
	int16_t f_circle;
	int32_t f_gold;
	int16_t f_magieresistenz;
	int16_t f_spellweaving;
	int16_t f_style;
	int16_t f_light;
	int16_t f_hunger;
	int16_t f_durst;
	int16_t f_weisheit;
	int16_t f_schleichen;
	int32_t f_mks;
	int16_t f_fluch;
	int16_t f_fluchdauer;
	int16_t f_krankheit;
	int16_t f_krankheitdauer;
	int16_t f_poison;
	int16_t f_verhungern;
	int16_t f_verdursten;
	int16_t f_betrunken;
	int16_t f_lifepointgegenstand;
	int16_t f_managegenstand;
	int16_t f_staerkegegenstand;
	int16_t f_zugweitegegenstand;
	int16_t f_dexteritygegenstand;
	int16_t f_gluecksgegenstand;
	int16_t f_bogentreffergegenstand;
	int16_t f_bogenschadengegenstand;
	int16_t f_powergegenstand;
	int16_t f_perceptiongegenstand;
	int16_t f_attackgegenstand;
	int16_t f_stealthgegenstand;
	int16_t f_damagegegenstand;
	int16_t f_lichtgegenstand;
	int16_t f_diebstahlgegenstand;
	int16_t f_goblinlehre;
	int16_t f_spinnenlehre;
	int16_t f_untotenlehre;
	int16_t f_pflanzenlehre;
	int16_t f_tierkunde;
	int16_t f_fallenlehre;
	int16_t f_giftlehre;
	int16_t f_pos_zaubermenue;
	int16_t f_dumm;
	int16_t f_face;
	int16_t f_hinterhalt;
	int16_t f_portal;
	int16_t f_teleport;
	int16_t f_nexus;
	int16_t f_stehlen;
	int16_t f_schriftrolle;
	int16_t f_zauberbuch;
	int16_t f_kessel;
	int16_t f_udjat_ben;
	int16_t f_armageddon;
	int16_t f_pestilence;
	int16_t f_drachenform;
	int16_t f_macht;
	int16_t f_magic_apple;
	int16_t f_refresh;
	int16_t f_heal;
	int16_t f_ease_pain;
	int16_t f_heal_others;
	int16_t f_full_healing;
	int16_t f_akt_zauber;
	int16_t f_sorting_style;
	int16_t f_schule;
	int16_t f_moves;
	int16_t f_anker_x;
	int16_t f_anker_y;
	int16_t f_anker_level;
	int16_t f_old_pos_x;
	int16_t f_old_pos_y;
	int16_t f_old_level;
	int16_t f_old_lp;
	int16_t f_old_max_lp;
	int16_t f_old_mp;
	int16_t f_old_max_mp;
	int16_t f_cause_of_death;
	int16_t f_cause_of_death_monster;
	int16_t f_character_x;
	int16_t f_character_y;
	int16_t f_staff_pieces[10];
	int8_t f_creature_typ;
	int16_t f_creature_lifepoints;
	int16_t f_creature_maxlifepoints;
	int16_t f_creature_attack;
	int16_t f_creature_schaden_min;
	int16_t f_creature_schaden_max;
	int16_t f_creature_speed;
	int16_t f_creature_maxspeed;
	int16_t f_creature_x;
	int16_t f_creature_y;
	int16_t f_creature_heading;
	int16_t f_creature_poison;
	int16_t f_in_water;
	st_character_data() : f_status(), f_verifikation(), f_name(), f_skill_points(), f_level(), f_maxlevel(), f_maennchen(), f_mousepointer(), f_lifepoints(), f_maxlifepoints(), f_lifegain(), f_mana(), f_maxmana(), f_managain(), f_attack(), f_dexterity(), f_strength(), f_maxspeed(), f_speed(), f_perception(), f_luck_score(), f_power_score(), f_circle(), f_gold(), f_magieresistenz(), f_spellweaving(), f_style(), f_light(), f_hunger(), f_durst(), f_weisheit(), f_schleichen(), f_mks(), f_fluch(), f_fluchdauer(), f_krankheit(), f_krankheitdauer(), f_poison(), f_verhungern(), f_verdursten(), f_betrunken(), f_lifepointgegenstand(), f_managegenstand(), f_staerkegegenstand(), f_zugweitegegenstand(), f_dexteritygegenstand(), f_gluecksgegenstand(), f_bogentreffergegenstand(), f_bogenschadengegenstand(), f_powergegenstand(), f_perceptiongegenstand(), f_attackgegenstand(), f_stealthgegenstand(), f_damagegegenstand(), f_lichtgegenstand(), f_diebstahlgegenstand(), f_goblinlehre(), f_spinnenlehre(), f_untotenlehre(), f_pflanzenlehre(), f_tierkunde(), f_fallenlehre(), f_giftlehre(), f_pos_zaubermenue(), f_dumm(), f_face(), f_hinterhalt(), f_portal(), f_teleport(), f_nexus(), f_stehlen(), f_schriftrolle(), f_zauberbuch(), f_kessel(), f_udjat_ben(), f_armageddon(), f_pestilence(), f_drachenform(), f_macht(), f_magic_apple(), f_refresh(), f_heal(), f_ease_pain(), f_heal_others(), f_full_healing(), f_akt_zauber(), f_sorting_style(), f_schule(), f_moves(), f_anker_x(), f_anker_y(), f_anker_level(), f_old_pos_x(), f_old_pos_y(), f_old_level(), f_old_lp(), f_old_max_lp(), f_old_mp(), f_old_max_mp(), f_cause_of_death(), f_cause_of_death_monster(), f_character_x(), f_character_y(), f_staff_pieces(), f_creature_typ(), f_creature_lifepoints(), f_creature_maxlifepoints(), f_creature_attack(), f_creature_schaden_min(), f_creature_schaden_max(), f_creature_speed(), f_creature_maxspeed(), f_creature_x(), f_creature_y(), f_creature_heading(), f_creature_poison(), f_in_water() {};
};
struct st_credit {
	std::string f_text;
	int32_t f_max;
	int32_t f_div;
	float f_sinstart;
	int32_t f_fade;
	int32_t f_y;
	st_credit() : f_text(), f_max(), f_div(), f_sinstart(), f_fade(), f_y() {};
};
struct st_double {
	double f_d;
	st_double() : f_d() {};
};
struct st_egal {
	std::string f_version;
	std::string f_name;
	int16_t f_level;
	int32_t f_gold;
	int16_t f_mks;
	int16_t f_punkte;
	int16_t f_maennchen;
	int16_t f_maxlifepoints;
	int16_t f_maxmana;
	int16_t f_attack;
	int16_t f_dexterity;
	int16_t f_strength;
	int16_t f_maxspeed;
	int16_t f_perception;
	int16_t f_luck_score;
	int16_t f_power_score;
	int16_t f_circle;
	std::string f_anfangszeit;
	std::string f_endezeit;
	int16_t f_stabteile;
	int16_t f_moves;
	int16_t f_cause_of_death;
	int16_t f_cause_of_death_monster;
	int16_t f_skills[31];
	st_egal() : f_version(), f_name(), f_level(), f_gold(), f_mks(), f_punkte(), f_maennchen(), f_maxlifepoints(), f_maxmana(), f_attack(), f_dexterity(), f_strength(), f_maxspeed(), f_perception(), f_luck_score(), f_power_score(), f_circle(), f_anfangszeit(), f_endezeit(), f_stabteile(), f_moves(), f_cause_of_death(), f_cause_of_death_monster(), f_skills() {};
};
struct st_field {
	std::string f_description[4];
	int16_t f_water;
	int16_t f_block_walk;
	int16_t f_block_los;
	int16_t f_block_item;
	int16_t f_block_spawn;
	int16_t f_attri_floor;
	st_field() : f_description(), f_water(), f_block_walk(), f_block_los(), f_block_item(), f_block_spawn(), f_attri_floor() {};
};
struct st_float {
	float f_f;
	st_float() : f_f() {};
};
struct st_gs {
	std::string f_name[4];
	std::string f_info[4];
	int16_t f_type;
	int16_t f_klasse;
	int16_t f_magisch;
	int16_t f_qualitaet;
	int16_t f_use_type;
	int16_t f_einkauf;
	int16_t f_verkauf;
	int16_t f_gewicht;
	int16_t f_unique;
	int16_t f_attri1;
	int16_t f_attri2;
	int16_t f_attri3;
	int16_t f_attri4;
	st_gs() : f_name(), f_info(), f_type(), f_klasse(), f_magisch(), f_qualitaet(), f_use_type(), f_einkauf(), f_verkauf(), f_gewicht(), f_unique(), f_attri1(), f_attri2(), f_attri3(), f_attri4() {};
};
struct st_integer {
	intptr_t f_i;
	st_integer() : f_i() {};
};
struct st_inv {
	int16_t f_name;
	int16_t f_benutzt;
	int16_t f_anzahl;
	int16_t f_status;
	int16_t f_attri5;
	st_inv() : f_name(), f_benutzt(), f_anzahl(), f_status(), f_attri5() {};
};
struct st_item2 {
	int16_t f_name[151];
	int16_t f_anzahl[151];
	int16_t f_status[151];
	st_item2() : f_name(), f_anzahl(), f_status() {};
};
struct st_item_pointer {
	char * f_p;
	st_item_pointer() : f_p() {};
};
struct st_item_type {
	int16_t f_item;
	int16_t f_status;
	int16_t f_quality;
	int16_t f_x;
	int16_t f_y;
	int16_t f_z;
	st_item_type() : f_item(), f_status(), f_quality(), f_x(), f_y(), f_z() {};
};
struct st_knot {
	int16_t f_x;
	int16_t f_y;
	int16_t f_parent_x;
	int16_t f_parent_y;
	int16_t f_cost;
	st_knot() : f_x(), f_y(), f_parent_x(), f_parent_y(), f_cost() {};
};
struct st_knot2 {
	int16_t f_x;
	int16_t f_y;
	st_knot2() : f_x(), f_y() {};
};
struct st_kriatura {
	int16_t f_creature_number;
	std::string f_creature_name[4];
	int16_t f_creature_graphic;
	int16_t f_creature_lifepoints;
	int16_t f_creature_maxlifepoints;
	int16_t f_creature_attack;
	int16_t f_creature_schaden_min;
	int16_t f_creature_schaden_max;
	int16_t f_creature_maxspeed;
	st_kriatura() : f_creature_number(), f_creature_name(), f_creature_graphic(), f_creature_lifepoints(), f_creature_maxlifepoints(), f_creature_attack(), f_creature_schaden_min(), f_creature_schaden_max(), f_creature_maxspeed() {};
};
struct st_laby {
	int16_t f_feld;
	int16_t f_stat1;
	int16_t f_stat2;
	st_laby() : f_feld(), f_stat1(), f_stat2() {};
};
struct st_language {
	int32_t f_id;
	int32_t f_buttonpos;
	st_language() : f_id(), f_buttonpos() {};
};
struct st_lock {
	int16_t f_name;
	int16_t f_locked;
	st_lock() : f_name(), f_locked() {};
};
struct st_long {
	int32_t f_l;
	st_long() : f_l() {};
};
struct st_merch_item {
	int16_t f_id;
	int16_t f_spell;
	int16_t f_power;
	st_merch_item() : f_id(), f_spell(), f_power() {};
};
struct st_merch_items {
	int16_t f_face;
	struct st_merch_item f_i[56];
	st_merch_items() : f_face(), f_i() {};
};
struct st_mes {
	int16_t f_farbe;
	std::string f_nachricht;
	st_mes() : f_farbe(), f_nachricht() {};
};
struct st_misch {
	int16_t f_result;
	int16_t f_learned;
	st_misch() : f_result(), f_learned() {};
};
struct st_monster_pointer {
	char * f_p;
	st_monster_pointer() : f_p() {};
};
struct st_monster_type {
	int16_t f_number;
	int16_t f_hp;
	int16_t f_status;
	int16_t f_duration;
	int16_t f_x;
	int16_t f_y;
	int16_t f_z;
	int16_t f_room;
	int16_t f_container;
	int16_t f_item;
	int16_t f_skilldrop;
	st_monster_type() : f_number(), f_hp(), f_status(), f_duration(), f_x(), f_y(), f_z(), f_room(), f_container(), f_item(), f_skilldrop() {};
};
struct st_monsterstruct {
	std::string f_name[4];
	int16_t f_nr;
	int8_t f_art;
	int16_t f_lebenspunkte;
	int8_t f_angriff;
	int8_t f_abwehr;
	int8_t f_staerke;
	int8_t f_ruestung;
	int8_t f_zauberkraft;
	int8_t f_zauber;
	int8_t f_reichweite;
	int16_t f_minlevel;
	int16_t f_sound;
	int8_t f_eigenschaft1;
	int8_t f_eigenschaft2;
	int8_t f_eigenschaft3;
	int8_t f_eigenschaft4;
	int8_t f_eigenschaft5;
	int8_t f_eigenschaft6;
	int8_t f_eigenschaft7;
	int8_t f_eigenschaft8;
	int8_t f_eigenschaft9;
	int8_t f_eigenschaft10;
	st_monsterstruct() : f_name(), f_nr(), f_art(), f_lebenspunkte(), f_angriff(), f_abwehr(), f_staerke(), f_ruestung(), f_zauberkraft(), f_zauber(), f_reichweite(), f_minlevel(), f_sound(), f_eigenschaft1(), f_eigenschaft2(), f_eigenschaft3(), f_eigenschaft4(), f_eigenschaft5(), f_eigenschaft6(), f_eigenschaft7(), f_eigenschaft8(), f_eigenschaft9(), f_eigenschaft10() {};
};
struct st_quad {
	int64_t f_q;
	st_quad() : f_q() {};
};
struct st_room_type {
	int16_t f_level;
	int16_t f_nr_in_level;
	int16_t f_type;
	int16_t f_visions;
	int16_t f_stat1;
	int16_t f_stat2;
	int16_t f_x;
	int16_t f_y;
	int16_t f_exit_x;
	int16_t f_exit_y;
	int16_t f_only_once[5];
	st_room_type() : f_level(), f_nr_in_level(), f_type(), f_visions(), f_stat1(), f_stat2(), f_x(), f_y(), f_exit_x(), f_exit_y(), f_only_once() {};
};
struct st_skill {
	std::string f_name[4];
	int16_t f_nummer;
	int16_t f_kosten;
	std::string f_beschreibung_1[4];
	std::string f_beschreibung_2[4];
	int16_t f_gruppe;
	int16_t f_gewaehlt;
	int16_t f_gelocked;
	int16_t f_unique;
	st_skill() : f_name(), f_nummer(), f_kosten(), f_beschreibung_1(), f_beschreibung_2(), f_gruppe(), f_gewaehlt(), f_gelocked(), f_unique() {};
};
struct st_spell {
	std::string f_name[4];
	int16_t f_level;
	int16_t f_cost;
	int16_t f_duration;
	int16_t f_school;
	int16_t f_weavable;
	int16_t f_shapechanging;
	int16_t f_summoning;
	std::string f_info_1[4];
	std::string f_info_2[4];
	st_spell() : f_name(), f_level(), f_cost(), f_duration(), f_school(), f_weavable(), f_shapechanging(), f_summoning(), f_info_1(), f_info_2() {};
};
struct st_unicode {
	uint16_t f_u;
	st_unicode() : f_u() {};
};
struct st_unique_item {
	int16_t f_name;
	st_unique_item() : f_name() {};
};
struct st_word {
	int16_t f_w;
	st_word() : f_w() {};
};
static Array<int32_t> a_addelay;
static Array<int32_t> a_addelaymax;
static Array<struct st_az> a_aktive;
static Array<int16_t> a_alch_buff;
static Array<int16_t> a_ausgangx;
static Array<int16_t> a_ausgangy;
static Array<struct st_carta> a_automap;
static Array<int16_t> a_boulder_buff;
static Array<int16_t> a_break_chance_buff;
static Array<struct st_kriatura> a_creature;
static Array<struct st_credit> a_credits;
static Array<int16_t> a_critical_chance_buff;
static Array<int16_t> a_crysolit_buff;
static Array<int16_t> a_damage_buff;
static Array<int16_t> a_damage_buff2;
static Array<int16_t> a_eingangx;
static Array<int16_t> a_eingangy;
static Array<std::string> a_entry;
static Array<int16_t> a_f_keys;
static Array<struct st_field> a_fields;
static Array<struct st_item_pointer> a_first_item;
static Array<struct st_monster_pointer> a_first_monster;
static Array<int16_t> a_fish_buff;
static Array<int16_t> a_fluss;
static Array<intptr_t> a_fsprites;
static Array<int16_t> a_general_percent_buff;
static Array<int16_t> a_goblinkoenig;
static Array<int16_t> a_god_bonus_buff;
static Array<int16_t> a_gold_buff;
static Array<int16_t> a_groesse;
static Array<int16_t> a_herb_buff;
static Array<int16_t> a_high_skill;
static Array<int16_t> a_hit_chance_buff;
static Array<struct st_egal> a_hscores;
static Array<int16_t> a_inhalt;
static Array<struct st_inv> a_inventory;
static Array<struct st_gs> a_item;
static Array<int16_t> a_jb;
static Array<struct st_item2> a_laby_item;
static Array<struct st_laby> a_labyrinth;
static Array<struct st_language> a_language;
static Array<int16_t> a_learned;
static Array<int16_t> a_level_curse;
static Array<int16_t> a_levelmod;
static Array<int16_t> a_lore_chance_buff;
static Array<int16_t> a_matrix;
static Array<int16_t> a_matrix2;
static Array<std::string> a_message_text;
static Array<struct st_misch> a_mischen;
static Array<int16_t> a_mit_was;
static Array<int16_t> a_mon_here;
static Array<struct st_monsterstruct> a_monster;
static Array<int16_t> a_mush_known;
static Array<struct st_inv> a_new_item;
static Array<int16_t> a_num_keys;
static Array<int16_t> a_numpad_keys;
static Array<struct st_mes> a_old_messages;
static Array<std::string> a_optionenliste;
static Array<std::string> a_outtext;
static Array<int32_t> a_position;
static Array<int16_t> a_quickspells;
static Array<int16_t> a_quickspells2;
static Array<intptr_t> a_rsprites;
static Array<std::string> a_savedatum;
static Array<std::string> a_savenames;
static Array<intptr_t> a_school_clip_icon_pos;
static Array<std::string> a_school_names;
static Array<int16_t> a_school_numbers;
static Array<int16_t> a_scroll_buff;
static Array<int16_t> a_skill_trader;
static Array<struct st_skill> a_skills;
static Array<int32_t> a_skilltyp_offset;
static Array<int32_t> a_skilltyp_range;
static Array<int16_t> a_small_trader;
static Array<int16_t> a_sonderlevel;
static Array<int16_t> a_sp;
static Array<int16_t> a_spell_chance_buff;
static Array<struct st_spell> a_spells;
static Array<struct st_character_data> a_spieler;
static Array<int16_t> a_spinnenkoenigin;
static Array<struct st_lock> a_unmoeglich;
static Array<int16_t> a_untotenherr;
static Array<int16_t> a_visionen;
static Array<int16_t> a_wand_buff;
static Array<intptr_t> a_xsprites;
static Array<intptr_t> a_ysprites;
static Array<int16_t> a_zauberliste;

static TypedList<struct st_knot> ll_closedlist;
static TypedList<struct st_item_type> ll_item_list;
static TypedList<struct st_merch_items> ll_merchants;
static TypedList<struct st_monster_type> ll_monster_list;
static TypedList<struct st_knot2> ll_movementlist;
static TypedList<struct st_knot> ll_openlist;
static TypedList<struct st_room_type> ll_room_list;
static TypedList<struct st_char_tpl> ll_template_list;
static TypedList<struct st_knot2> ll_testlist;
static TypedList<struct st_unique_item> ll_unique_items;

static int16_t g_abbrechen;
static int16_t v_act_field;
static intptr_t v_act_piece;
static int16_t v_act_room;
static int32_t g_adcount;
static int32_t g_admax;
static int16_t v_akt_level;
static int8_t g_akt_option;
static int8_t g_akt_spieler;
static int16_t v_akt_step;
static intptr_t v_akt_xmod;
static intptr_t v_akt_ymod;
static intptr_t g_akt_zauber;
static intptr_t g_akt_zauber_offset;
static intptr_t g_akt_zauber_offset2;
static intptr_t g_aktion;
static intptr_t g_aktive;
static int16_t g_aktuell;
static std::string g_altezeit;
static std::string g_anfangszeit;
static int16_t v_angreifen;
static int16_t g_anz_levels;
static int16_t g_anz_zauber;
static intptr_t g_anzz;
static int16_t g_autopickup;
static std::string g_autopickup_text;
static int16_t g_behinderung;
static int8_t g_benutzen;
static intptr_t g_bew_geg_pos;
static int16_t g_bewegen;
static int8_t g_bewegt;
static int16_t g_blocked;
static intptr_t g_character_x;
static intptr_t g_character_y;
static int16_t g_cinfo_menu;
static int32_t g_coin_toss;
static intptr_t g_combi;
static int32_t g_currentstyp;
static int16_t g_dead_monsters;
static int16_t g_do_it;
static int16_t g_do_it2;
static int16_t v_do_it3;
static int16_t v_do_it4;
static intptr_t v_elapsedtime;
static std::string g_environment;
static intptr_t v_eventid;
static int16_t g_feld;
static int8_t v_final;
static intptr_t g_first_empty;
static int16_t g_flaschen;
static std::string g_flaschen_text;
static int16_t v_force;
static int8_t g_frame;
static int8_t g_framestep;
static int16_t g_ganglaenge;
static intptr_t g_gb_callfromtitlescreen;
static intptr_t g_gegenstand;
static intptr_t g_goblinkoenig;
static intptr_t g_groesse;
static intptr_t g_hscores;
static intptr_t v_i;
static int16_t g_icon_pos;
static int16_t g_in_sight;
static intptr_t g_inhalt;
static int16_t g_inhalt_normal;
static int32_t g_item_break05;
static int32_t g_item_break10;
static int32_t g_item_break15;
static int32_t g_item_break20;
static intptr_t g_item_spell;
static int16_t g_itemmenue_aktiv;
static intptr_t v_j;
static int16_t g_jax;
static int16_t g_jay;
static int16_t g_joystick_used;
static intptr_t g_karten_typ;
static int16_t g_key_repeat_delay;
static intptr_t g_keydelay;
static intptr_t g_keydelay2;
static int16_t g_klicking;
static std::string g_klicking_text;
static int16_t g_knopf5;
static std::string g_knopf5_text;
static int8_t g_language;
static intptr_t g_learned;
static int8_t g_letzter_eintrag;
static intptr_t g_level;
static intptr_t g_levelmod;
static int16_t g_maennchen_menu;
static int16_t g_matrix_pos_x;
static int16_t g_matrix_pos_y;
static intptr_t g_mausbesch;
static int8_t g_mauszauber;
static int8_t g_mauszauber2;
static intptr_t g_max_icon;
static intptr_t g_message_text;
static std::string v_messages;
static int16_t g_min_icon_pos;
static int16_t g_mit_was_normal;
static int16_t g_mmouse_links;
static int16_t g_mmouse_rechts;
static int16_t g_mmouse_x;
static int16_t g_mmouse_y;
static intptr_t g_modules;
static intptr_t g_monster;
static int16_t g_monsterauge;
static int16_t g_mouse_matrix_x;
static int16_t g_mouse_matrix_x_old;
static int16_t g_mouse_matrix_y;
static int16_t g_mouse_matrix_y_old;
static intptr_t g_mouse_x_old;
static intptr_t g_mouse_y_old;
static int16_t v_moved;
static int16_t g_music;
static std::string g_music_text;
static intptr_t v_my_delay;
static int16_t g_mydelay;
static int16_t g_mydelay2;
static int16_t g_mydelay3;
static int16_t g_mydelay4;
static std::string g_myname;
static int8_t v_nach_kampf;
static int32_t g_next_qual;
static int16_t g_no_mouse;
static std::string g_no_mouse_text;
static int32_t g_no_room_intro;
static int16_t g_nr;
static int16_t v_nr_in_level;
static int8_t g_nr_of_players;
static intptr_t v_nr_of_rooms;
static int16_t g_nr_of_saves;
static int16_t v_nr_of_steps;
static intptr_t v_ok_button;
static intptr_t v_okay;
static intptr_t g_optionenliste;
static int16_t g_over_item;
static intptr_t g_pilz;
static int8_t v_pos;
static intptr_t g_posx;
static intptr_t g_posy;
static intptr_t g_punkte;
static intptr_t g_quickspells;
static int16_t g_raushier;
static int8_t v_rel_pos;
static int16_t v_release1;
static int16_t g_released;
static intptr_t v_result;
static int32_t v_room_cursprite_nr;
static std::string v_room_curtext;
static int32_t v_room_curtext_nr;
static intptr_t g_schongemalt;
static intptr_t g_school_clip_icon_pos;
static intptr_t g_school_names;
static intptr_t g_school_numbers;
static int16_t g_schutz_max;
static int16_t g_schutz_min;
static intptr_t v_screenopen;
static int16_t v_scroll_known;
static intptr_t g_selectdelay;
static int16_t v_setzen;
static intptr_t g_silent;
static int16_t v_skill_traders_req;
static int32_t g_skillrow_offset;
static int16_t g_skills_menu;
static int16_t g_sound;
static std::string g_sound_text;
static intptr_t g_spalte;
static int16_t g_spell_x;
static int16_t g_spell_y;
static intptr_t g_spells;
static intptr_t g_spieler;
static intptr_t g_spielerwechsel;
static intptr_t g_spinnenkoenigin;
static int16_t g_sprite_x;
static int16_t g_sprite_y;
static intptr_t v_starttime;
static intptr_t g_stehlen;
static int8_t g_test;
static int16_t v_testfeld;
static intptr_t g_untotenherr;
static int8_t g_von_ferne;
static intptr_t g_wait_release2;
static intptr_t g_wait_release3;
static int16_t g_warten;
static intptr_t v_weitere;
static int16_t g_win_mode;
static intptr_t g_windowsfenster;
static int16_t v_x_r;
static int16_t g_xmod;
static int16_t v_y_r;
static int16_t g_ymod;
static intptr_t g_yplus;
static intptr_t g_yplus2;
static intptr_t g_zauberliste;
static intptr_t g_zeile;
static std::string g_zeit;
static int8_t g_zw_bild;

#include <math.h>
#include <SDL.h>
#include <SDL_mixer.h>
#include <SDL_image.h>
#include <SDL_gfxPrimitives.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <SDL_ttf.h>
#include <sys/time.h>
#include <time.h>
#include <cctype>
#include <netdb.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <string.h>
#include <errno.h>

static void insertonly(LinkedList& list, struct ListElement *elem) {
    elem->next = 0;
    elem->prev = 0;
    list.root = elem;
    list.last = elem;
    list.current = elem;
    list.length = 1;
    list.index = 0;
}
static void insertfirst(LinkedList& list, struct ListElement *elem) {
    elem->next = list.root;
    elem->prev = 0;
    list.root->prev = elem;
    list.root = elem;
    list.current = elem;
    list.length += 1;
    list.index = 0;
}
static void insertlast(LinkedList& list, struct ListElement *elem) {
    elem->next = 0;
    elem->prev = list.last;
    list.last->next = elem;
    list.last = elem;
    list.current = elem;
    list.length += 1;
    list.index = list.length - 1;
}
static SDL_Surface *screen;
static unsigned char *packfile;
static int32_t packfilesize;
static int packfd = -1;
static void closepack() {
    if (packfd >= 0) {
        close(packfd);
        packfd = -1;
        delete[] packfile;
        packfile = 0;
        packfilesize = 0;
    }
}
#include <map>
static std::map<intptr_t, Mix_Chunk *> soundmap;
static intptr_t soundmap_last_dynamic;
struct spriteinfo {
    SDL_Surface *surface;
    SDL_Rect clip;
    spriteinfo() : surface(0) {}
    ~spriteinfo() {
        if (surface)
            SDL_FreeSurface(surface);
    }
};
static std::map<intptr_t, spriteinfo> spritemap;
static intptr_t spritemap_last_dynamic;
static std::map<intptr_t, FILE *> filemap;
static intptr_t filemap_last_dynamic;
/* Vera.ttf Release 1.10, included with permission:

Copyright (c) 2003 by Bitstream, Inc.
All Rights Reserved.
Bitstream Vera is a trademark of Bitstream, Inc.

Permission is hereby granted, free of charge, to any person obtaining
a copy of the fonts accompanying this license ("Fonts") and associated
documentation files (the "Font Software"), to reproduce and distribute
the Font Software, including without limitation the rights to use, copy,
merge, publish, distribute, and/or sell copies of the Font Software,
and to permit persons to whom the Font Software is furnished to do so,
subject to the following conditions:

The above copyright and trademark notices and this permission notice shall
be included in all copies of one or more of the Font Software typefaces.

The Font Software may be modified, altered, or added to, and in particular
the designs of glyphs or characters in the Fonts may be modified and
additional glyphs or characters may be added to the Fonts, only if the
fonts are renamed to names not containing either the words "Bitstream"
or the word "Vera".

This License becomes null and void to the extent applicable to Fonts
or Font Software that has been modified and is distributed under the
"Bitstream Vera" names.

The Font Software may be sold as part of a larger software package but no
copy of one or more of the Font Software typefaces may be sold by itself.

THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL
BITSTREAM OR THE GNOME FOUNDATION BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT
SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.

Except as contained in this notice, the names of Gnome, the Gnome
Foundation, and Bitstream Inc., shall not be used in advertising or
otherwise to promote the sale, use or other dealings in this Font
Software without prior written authorization from the Gnome Foundation
or Bitstream Inc., respectively. For further information, contact:
fonts at gnome dot org.http://www.bitstream.com

*/

static const char fontbits[] = {
0,1,0,0,0,17,1,0,0,4,0,16,79,83,47,50,
180,95,244,99,0,0,235,112,0,0,0,86,80,67,76,84,
209,138,94,151,0,0,235,200,0,0,0,54,99,109,97,112,
164,195,232,160,0,0,177,108,0,0,3,88,99,118,116,32,
255,211,29,57,0,0,30,252,0,0,1,252,102,112,103,109,
231,180,241,196,0,0,38,96,0,0,0,139,103,97,115,112,
0,7,0,7,0,1,1,72,0,0,0,12,103,108,121,102,
12,116,65,207,0,0,38,236,0,0,138,126,104,100,109,120,
52,240,33,14,0,0,236,0,0,0,21,72,104,101,97,100,
221,132,162,208,0,1,1,84,0,0,0,54,104,104,101,97,
16,69,8,111,0,0,235,76,0,0,0,36,104,109,116,120,
9,198,142,178,0,0,180,196,0,0,4,48,107,101,114,110,
220,82,213,153,0,0,189,160,0,0,45,138,108,111,99,97,
243,203,210,61,0,0,187,132,0,0,2,26,109,97,120,112,
5,71,6,58,0,0,235,44,0,0,0,32,110,97,109,101,
217,188,200,181,0,0,1,28,0,0,29,223,112,111,115,116,
180,90,47,187,0,0,184,244,0,0,2,142,112,114,101,112,
59,7,241,0,0,0,32,248,0,0,5,104,0,0,0,22,
1,14,0,1,0,0,0,0,0,0,0,58,0,0,0,1,
0,0,0,0,0,1,0,19,0,58,0,1,0,0,0,0,
0,2,0,5,0,95,0,1,0,0,0,0,0,3,0,19,
0,58,0,1,0,0,0,0,0,4,0,19,0,58,0,1,
0,0,0,0,0,5,0,12,0,100,0,1,0,0,0,0,
0,6,0,23,0,77,0,1,0,0,0,0,0,7,0,48,
0,173,0,1,0,0,0,0,0,8,0,14,8,108,0,1,
0,0,0,0,0,11,0,24,9,131,0,1,0,0,0,0,
0,13,9,19,0,112,0,3,0,1,4,9,0,0,0,116,
9,155,0,3,0,1,4,9,0,1,0,38,10,15,0,3,
0,1,4,9,0,2,0,10,10,89,0,3,0,1,4,9,
0,3,0,38,10,15,0,3,0,1,4,9,0,4,0,38,
10,15,0,3,0,1,4,9,0,5,0,24,10,99,0,3,
0,1,4,9,0,6,0,46,10,53,0,3,0,1,4,9,
0,7,0,96,10,245,0,3,0,1,4,9,0,8,0,28,
26,115,0,3,0,1,4,9,0,11,0,48,28,161,0,3,
0,1,4,9,0,13,18,38,10,123,67,111,112,121,114,105,
103,104,116,32,40,99,41,32,50,48,48,51,32,98,121,32,
66,105,116,115,116,114,101,97,109,44,32,73,110,99,46,32,
65,108,108,32,82,105,103,104,116,115,32,82,101,115,101,114,
118,101,100,46,66,105,116,115,116,114,101,97,109,32,86,101,
114,97,32,83,97,110,115,66,105,116,115,116,114,101,97,109,
86,101,114,97,83,97,110,115,45,82,111,109,97,110,82,101,
108,101,97,115,101,32,49,46,49,48,67,111,112,121,114,105,
103,104,116,32,40,99,41,32,50,48,48,51,32,98,121,32,
66,105,116,115,116,114,101,97,109,44,32,73,110,99,46,13,
10,65,108,108,32,82,105,103,104,116,115,32,82,101,115,101,
114,118,101,100,46,13,10,66,105,116,115,116,114,101,97,109,
32,86,101,114,97,32,105,115,32,97,32,116,114,97,100,101,
109,97,114,107,32,111,102,32,66,105,116,115,116,114,101,97,
109,44,32,73,110,99,46,13,10,13,10,80,101,114,109,105,
115,115,105,111,110,32,105,115,32,104,101,114,101,98,121,32,
103,114,97,110,116,101,100,44,32,102,114,101,101,32,111,102,
32,99,104,97,114,103,101,44,32,116,111,32,97,110,121,32,
112,101,114,115,111,110,32,111,98,116,97,105,110,105,110,103,
32,97,32,99,111,112,121,32,111,102,32,116,104,101,32,102,
111,110,116,115,32,97,99,99,111,109,112,97,110,121,105,110,
103,32,116,104,105,115,32,108,105,99,101,110,115,101,32,40,
34,70,111,110,116,115,34,41,32,97,110,100,32,97,115,115,
111,99,105,97,116,101,100,32,100,111,99,117,109,101,110,116,
97,116,105,111,110,32,102,105,108,101,115,32,40,116,104,101,
32,34,70,111,110,116,32,83,111,102,116,119,97,114,101,34,
41,44,32,116,111,32,114,101,112,114,111,100,117,99,101,32,
97,110,100,32,100,105,115,116,114,105,98,117,116,101,32,116,
104,101,32,70,111,110,116,32,83,111,102,116,119,97,114,101,
44,32,105,110,99,108,117,100,105,110,103,32,119,105,116,104,
111,117,116,32,108,105,109,105,116,97,116,105,111,110,32,116,
104,101,32,114,105,103,104,116,115,32,116,111,32,117,115,101,
44,32,99,111,112,121,44,32,109,101,114,103,101,44,32,112,
117,98,108,105,115,104,44,32,100,105,115,116,114,105,98,117,
116,101,44,32,97,110,100,47,111,114,32,115,101,108,108,32,
99,111,112,105,101,115,32,111,102,32,116,104,101,32,70,111,
110,116,32,83,111,102,116,119,97,114,101,44,32,97,110,100,
32,116,111,32,112,101,114,109,105,116,32,112,101,114,115,111,
110,115,32,116,111,32,119,104,111,109,32,116,104,101,32,70,
111,110,116,32,83,111,102,116,119,97,114,101,32,105,115,32,
102,117,114,110,105,115,104,101,100,32,116,111,32,100,111,32,
115,111,44,32,115,117,98,106,101,99,116,32,116,111,32,116,
104,101,32,102,111,108,108,111,119,105,110,103,32,99,111,110,
100,105,116,105,111,110,115,58,13,10,13,10,84,104,101,32,
97,98,111,118,101,32,99,111,112,121,114,105,103,104,116,32,
97,110,100,32,116,114,97,100,101,109,97,114,107,32,110,111,
116,105,99,101,115,32,97,110,100,32,116,104,105,115,32,112,
101,114,109,105,115,115,105,111,110,32,110,111,116,105,99,101,
32,115,104,97,108,108,32,98,101,32,105,110,99,108,117,100,
101,100,32,105,110,32,97,108,108,32,99,111,112,105,101,115,
32,111,102,32,111,110,101,32,111,114,32,109,111,114,101,32,
111,102,32,116,104,101,32,70,111,110,116,32,83,111,102,116,
119,97,114,101,32,116,121,112,101,102,97,99,101,115,46,13,
10,13,10,84,104,101,32,70,111,110,116,32,83,111,102,116,
119,97,114,101,32,109,97,121,32,98,101,32,109,111,100,105,
102,105,101,100,44,32,97,108,116,101,114,101,100,44,32,111,
114,32,97,100,100,101,100,32,116,111,44,32,97,110,100,32,
105,110,32,112,97,114,116,105,99,117,108,97,114,32,116,104,
101,32,100,101,115,105,103,110,115,32,111,102,32,103,108,121,
112,104,115,32,111,114,32,99,104,97,114,97,99,116,101,114,
115,32,105,110,32,116,104,101,32,70,111,110,116,115,32,109,
97,121,32,98,101,32,109,111,100,105,102,105,101,100,32,97,
110,100,32,97,100,100,105,116,105,111,110,97,108,32,103,108,
121,112,104,115,32,111,114,32,99,104,97,114,97,99,116,101,
114,115,32,109,97,121,32,98,101,32,97,100,100,101,100,32,
116,111,32,116,104,101,32,70,111,110,116,115,44,32,111,110,
108,121,32,105,102,32,116,104,101,32,102,111,110,116,115,32,
97,114,101,32,114,101,110,97,109,101,100,32,116,111,32,110,
97,109,101,115,32,110,111,116,32,99,111,110,116,97,105,110,
105,110,103,32,101,105,116,104,101,114,32,116,104,101,32,119,
111,114,100,115,32,34,66,105,116,115,116,114,101,97,109,34,
32,111,114,32,116,104,101,32,119,111,114,100,32,34,86,101,
114,97,34,46,13,10,13,10,84,104,105,115,32,76,105,99,
101,110,115,101,32,98,101,99,111,109,101,115,32,110,117,108,
108,32,97,110,100,32,118,111,105,100,32,116,111,32,116,104,
101,32,101,120,116,101,110,116,32,97,112,112,108,105,99,97,
98,108,101,32,116,111,32,70,111,110,116,115,32,111,114,32,
70,111,110,116,32,83,111,102,116,119,97,114,101,32,116,104,
97,116,32,104,97,115,32,98,101,101,110,32,109,111,100,105,
102,105,101,100,32,97,110,100,32,105,115,32,100,105,115,116,
114,105,98,117,116,101,100,32,117,110,100,101,114,32,116,104,
101,32,34,66,105,116,115,116,114,101,97,109,32,86,101,114,
97,34,32,110,97,109,101,115,46,13,10,13,10,84,104,101,
32,70,111,110,116,32,83,111,102,116,119,97,114,101,32,109,
97,121,32,98,101,32,115,111,108,100,32,97,115,32,112,97,
114,116,32,111,102,32,97,32,108,97,114,103,101,114,32,115,
111,102,116,119,97,114,101,32,112,97,99,107,97,103,101,32,
98,117,116,32,110,111,32,99,111,112,121,32,111,102,32,111,
110,101,32,111,114,32,109,111,114,101,32,111,102,32,116,104,
101,32,70,111,110,116,32,83,111,102,116,119,97,114,101,32,
116,121,112,101,102,97,99,101,115,32,109,97,121,32,98,101,
32,115,111,108,100,32,98,121,32,105,116,115,101,108,102,46,
13,10,13,10,84,72,69,32,70,79,78,84,32,83,79,70,
84,87,65,82,69,32,73,83,32,80,82,79,86,73,68,69,
68,32,34,65,83,32,73,83,34,44,32,87,73,84,72,79,
85,84,32,87,65,82,82,65,78,84,89,32,79,70,32,65,
78,89,32,75,73,78,68,44,32,69,88,80,82,69,83,83,
32,79,82,32,73,77,80,76,73,69,68,44,32,73,78,67,
76,85,68,73,78,71,32,66,85,84,32,78,79,84,32,76,
73,77,73,84,69,68,32,84,79,32,65,78,89,32,87,65,
82,82,65,78,84,73,69,83,32,79,70,32,77,69,82,67,
72,65,78,84,65,66,73,76,73,84,89,44,32,70,73,84,
78,69,83,83,32,70,79,82,32,65,32,80,65,82,84,73,
67,85,76,65,82,32,80,85,82,80,79,83,69,32,65,78,
68,32,78,79,78,73,78,70,82,73,78,71,69,77,69,78,
84,32,79,70,32,67,79,80,89,82,73,71,72,84,44,32,
80,65,84,69,78,84,44,32,84,82,65,68,69,77,65,82,
75,44,32,79,82,32,79,84,72,69,82,32,82,73,71,72,
84,46,32,73,78,32,78,79,32,69,86,69,78,84,32,83,
72,65,76,76,32,66,73,84,83,84,82,69,65,77,32,79,
82,32,84,72,69,32,71,78,79,77,69,32,70,79,85,78,
68,65,84,73,79,78,32,66,69,32,76,73,65,66,76,69,
32,70,79,82,32,65,78,89,32,67,76,65,73,77,44,32,
68,65,77,65,71,69,83,32,79,82,32,79,84,72,69,82,
32,76,73,65,66,73,76,73,84,89,44,32,73,78,67,76,
85,68,73,78,71,32,65,78,89,32,71,69,78,69,82,65,
76,44,32,83,80,69,67,73,65,76,44,32,73,78,68,73,
82,69,67,84,44,32,73,78,67,73,68,69,78,84,65,76,
44,32,79,82,32,67,79,78,83,69,81,85,69,78,84,73,
65,76,32,68,65,77,65,71,69,83,44,32,87,72,69,84,
72,69,82,32,73,78,32,65,78,32,65,67,84,73,79,78,
32,79,70,32,67,79,78,84,82,65,67,84,44,32,84,79,
82,84,32,79,82,32,79,84,72,69,82,87,73,83,69,44,
32,65,82,73,83,73,78,71,32,70,82,79,77,44,32,79,
85,84,32,79,70,32,84,72,69,32,85,83,69,32,79,82,
32,73,78,65,66,73,76,73,84,89,32,84,79,32,85,83,
69,32,84,72,69,32,70,79,78,84,32,83,79,70,84,87,
65,82,69,32,79,82,32,70,82,79,77,32,79,84,72,69,
82,32,68,69,65,76,73,78,71,83,32,73,78,32,84,72,
69,32,70,79,78,84,32,83,79,70,84,87,65,82,69,46,
13,10,13,10,69,120,99,101,112,116,32,97,115,32,99,111,
110,116,97,105,110,101,100,32,105,110,32,116,104,105,115,32,
110,111,116,105,99,101,44,32,116,104,101,32,110,97,109,101,
115,32,111,102,32,71,110,111,109,101,44,32,116,104,101,32,
71,110,111,109,101,32,70,111,117,110,100,97,116,105,111,110,
44,32,97,110,100,32,66,105,116,115,116,114,101,97,109,32,
73,110,99,46,44,32,115,104,97,108,108,32,110,111,116,32,
98,101,32,117,115,101,100,32,105,110,32,97,100,118,101,114,
116,105,115,105,110,103,32,111,114,32,111,116,104,101,114,119,
105,115,101,32,116,111,32,112,114,111,109,111,116,101,32,116,
104,101,32,115,97,108,101,44,32,117,115,101,32,111,114,32,
111,116,104,101,114,32,100,101,97,108,105,110,103,115,32,105,
110,32,116,104,105,115,32,70,111,110,116,32,83,111,102,116,
119,97,114,101,32,119,105,116,104,111,117,116,32,112,114,105,
111,114,32,119,114,105,116,116,101,110,32,97,117,116,104,111,
114,105,122,97,116,105,111,110,32,102,114,111,109,32,116,104,
101,32,71,110,111,109,101,32,70,111,117,110,100,97,116,105,
111,110,32,111,114,32,66,105,116,115,116,114,101,97,109,32,
73,110,99,46,44,32,114,101,115,112,101,99,116,105,118,101,
108,121,46,32,70,111,114,32,102,117,114,116,104,101,114,32,
105,110,102,111,114,109,97,116,105,111,110,44,32,99,111,110,
116,97,99,116,58,32,102,111,110,116,115,32,97,116,32,103,
110,111,109,101,32,100,111,116,32,111,114,103,46,104,116,116,
112,58,47,47,119,119,119,46,98,105,116,115,116,114,101,97,
109,46,99,111,109,0,67,0,111,0,112,0,121,0,114,0,
105,0,103,0,104,0,116,0,32,0,40,0,99,0,41,0,
32,0,50,0,48,0,48,0,51,0,32,0,98,0,121,0,
32,0,66,0,105,0,116,0,115,0,116,0,114,0,101,0,
97,0,109,0,44,0,32,0,73,0,110,0,99,0,46,0,
32,0,65,0,108,0,108,0,32,0,82,0,105,0,103,0,
104,0,116,0,115,0,32,0,82,0,101,0,115,0,101,0,
114,0,118,0,101,0,100,0,46,0,66,0,105,0,116,0,
115,0,116,0,114,0,101,0,97,0,109,0,32,0,86,0,
101,0,114,0,97,0,32,0,83,0,97,0,110,0,115,0,
66,0,105,0,116,0,115,0,116,0,114,0,101,0,97,0,
109,0,86,0,101,0,114,0,97,0,83,0,97,0,110,0,
115,0,45,0,82,0,111,0,109,0,97,0,110,0,82,0,
101,0,108,0,101,0,97,0,115,0,101,0,32,0,49,0,
46,0,49,0,48,0,67,0,111,0,112,0,121,0,114,0,
105,0,103,0,104,0,116,0,32,0,40,0,99,0,41,0,
32,0,50,0,48,0,48,0,51,0,32,0,98,0,121,0,
32,0,66,0,105,0,116,0,115,0,116,0,114,0,101,0,
97,0,109,0,44,0,32,0,73,0,110,0,99,0,46,0,
13,0,10,0,65,0,108,0,108,0,32,0,82,0,105,0,
103,0,104,0,116,0,115,0,32,0,82,0,101,0,115,0,
101,0,114,0,118,0,101,0,100,0,46,0,13,0,10,0,
66,0,105,0,116,0,115,0,116,0,114,0,101,0,97,0,
109,0,32,0,86,0,101,0,114,0,97,0,32,0,105,0,
115,0,32,0,97,0,32,0,116,0,114,0,97,0,100,0,
101,0,109,0,97,0,114,0,107,0,32,0,111,0,102,0,
32,0,66,0,105,0,116,0,115,0,116,0,114,0,101,0,
97,0,109,0,44,0,32,0,73,0,110,0,99,0,46,0,
13,0,10,0,13,0,10,0,80,0,101,0,114,0,109,0,
105,0,115,0,115,0,105,0,111,0,110,0,32,0,105,0,
115,0,32,0,104,0,101,0,114,0,101,0,98,0,121,0,
32,0,103,0,114,0,97,0,110,0,116,0,101,0,100,0,
44,0,32,0,102,0,114,0,101,0,101,0,32,0,111,0,
102,0,32,0,99,0,104,0,97,0,114,0,103,0,101,0,
44,0,32,0,116,0,111,0,32,0,97,0,110,0,121,0,
32,0,112,0,101,0,114,0,115,0,111,0,110,0,32,0,
111,0,98,0,116,0,97,0,105,0,110,0,105,0,110,0,
103,0,32,0,97,0,32,0,99,0,111,0,112,0,121,0,
32,0,111,0,102,0,32,0,116,0,104,0,101,0,32,0,
102,0,111,0,110,0,116,0,115,0,32,0,97,0,99,0,
99,0,111,0,109,0,112,0,97,0,110,0,121,0,105,0,
110,0,103,0,32,0,116,0,104,0,105,0,115,0,32,0,
108,0,105,0,99,0,101,0,110,0,115,0,101,0,32,0,
40,0,34,0,70,0,111,0,110,0,116,0,115,0,34,0,
41,0,32,0,97,0,110,0,100,0,32,0,97,0,115,0,
115,0,111,0,99,0,105,0,97,0,116,0,101,0,100,0,
32,0,100,0,111,0,99,0,117,0,109,0,101,0,110,0,
116,0,97,0,116,0,105,0,111,0,110,0,32,0,102,0,
105,0,108,0,101,0,115,0,32,0,40,0,116,0,104,0,
101,0,32,0,34,0,70,0,111,0,110,0,116,0,32,0,
83,0,111,0,102,0,116,0,119,0,97,0,114,0,101,0,
34,0,41,0,44,0,32,0,116,0,111,0,32,0,114,0,
101,0,112,0,114,0,111,0,100,0,117,0,99,0,101,0,
32,0,97,0,110,0,100,0,32,0,100,0,105,0,115,0,
116,0,114,0,105,0,98,0,117,0,116,0,101,0,32,0,
116,0,104,0,101,0,32,0,70,0,111,0,110,0,116,0,
32,0,83,0,111,0,102,0,116,0,119,0,97,0,114,0,
101,0,44,0,32,0,105,0,110,0,99,0,108,0,117,0,
100,0,105,0,110,0,103,0,32,0,119,0,105,0,116,0,
104,0,111,0,117,0,116,0,32,0,108,0,105,0,109,0,
105,0,116,0,97,0,116,0,105,0,111,0,110,0,32,0,
116,0,104,0,101,0,32,0,114,0,105,0,103,0,104,0,
116,0,115,0,32,0,116,0,111,0,32,0,117,0,115,0,
101,0,44,0,32,0,99,0,111,0,112,0,121,0,44,0,
32,0,109,0,101,0,114,0,103,0,101,0,44,0,32,0,
112,0,117,0,98,0,108,0,105,0,115,0,104,0,44,0,
32,0,100,0,105,0,115,0,116,0,114,0,105,0,98,0,
117,0,116,0,101,0,44,0,32,0,97,0,110,0,100,0,
47,0,111,0,114,0,32,0,115,0,101,0,108,0,108,0,
32,0,99,0,111,0,112,0,105,0,101,0,115,0,32,0,
111,0,102,0,32,0,116,0,104,0,101,0,32,0,70,0,
111,0,110,0,116,0,32,0,83,0,111,0,102,0,116,0,
119,0,97,0,114,0,101,0,44,0,32,0,97,0,110,0,
100,0,32,0,116,0,111,0,32,0,112,0,101,0,114,0,
109,0,105,0,116,0,32,0,112,0,101,0,114,0,115,0,
111,0,110,0,115,0,32,0,116,0,111,0,32,0,119,0,
104,0,111,0,109,0,32,0,116,0,104,0,101,0,32,0,
70,0,111,0,110,0,116,0,32,0,83,0,111,0,102,0,
116,0,119,0,97,0,114,0,101,0,32,0,105,0,115,0,
32,0,102,0,117,0,114,0,110,0,105,0,115,0,104,0,
101,0,100,0,32,0,116,0,111,0,32,0,100,0,111,0,
32,0,115,0,111,0,44,0,32,0,115,0,117,0,98,0,
106,0,101,0,99,0,116,0,32,0,116,0,111,0,32,0,
116,0,104,0,101,0,32,0,102,0,111,0,108,0,108,0,
111,0,119,0,105,0,110,0,103,0,32,0,99,0,111,0,
110,0,100,0,105,0,116,0,105,0,111,0,110,0,115,0,
58,0,13,0,10,0,13,0,10,0,84,0,104,0,101,0,
32,0,97,0,98,0,111,0,118,0,101,0,32,0,99,0,
111,0,112,0,121,0,114,0,105,0,103,0,104,0,116,0,
32,0,97,0,110,0,100,0,32,0,116,0,114,0,97,0,
100,0,101,0,109,0,97,0,114,0,107,0,32,0,110,0,
111,0,116,0,105,0,99,0,101,0,115,0,32,0,97,0,
110,0,100,0,32,0,116,0,104,0,105,0,115,0,32,0,
112,0,101,0,114,0,109,0,105,0,115,0,115,0,105,0,
111,0,110,0,32,0,110,0,111,0,116,0,105,0,99,0,
101,0,32,0,115,0,104,0,97,0,108,0,108,0,32,0,
98,0,101,0,32,0,105,0,110,0,99,0,108,0,117,0,
100,0,101,0,100,0,32,0,105,0,110,0,32,0,97,0,
108,0,108,0,32,0,99,0,111,0,112,0,105,0,101,0,
115,0,32,0,111,0,102,0,32,0,111,0,110,0,101,0,
32,0,111,0,114,0,32,0,109,0,111,0,114,0,101,0,
32,0,111,0,102,0,32,0,116,0,104,0,101,0,32,0,
70,0,111,0,110,0,116,0,32,0,83,0,111,0,102,0,
116,0,119,0,97,0,114,0,101,0,32,0,116,0,121,0,
112,0,101,0,102,0,97,0,99,0,101,0,115,0,46,0,
13,0,10,0,13,0,10,0,84,0,104,0,101,0,32,0,
70,0,111,0,110,0,116,0,32,0,83,0,111,0,102,0,
116,0,119,0,97,0,114,0,101,0,32,0,109,0,97,0,
121,0,32,0,98,0,101,0,32,0,109,0,111,0,100,0,
105,0,102,0,105,0,101,0,100,0,44,0,32,0,97,0,
108,0,116,0,101,0,114,0,101,0,100,0,44,0,32,0,
111,0,114,0,32,0,97,0,100,0,100,0,101,0,100,0,
32,0,116,0,111,0,44,0,32,0,97,0,110,0,100,0,
32,0,105,0,110,0,32,0,112,0,97,0,114,0,116,0,
105,0,99,0,117,0,108,0,97,0,114,0,32,0,116,0,
104,0,101,0,32,0,100,0,101,0,115,0,105,0,103,0,
110,0,115,0,32,0,111,0,102,0,32,0,103,0,108,0,
121,0,112,0,104,0,115,0,32,0,111,0,114,0,32,0,
99,0,104,0,97,0,114,0,97,0,99,0,116,0,101,0,
114,0,115,0,32,0,105,0,110,0,32,0,116,0,104,0,
101,0,32,0,70,0,111,0,110,0,116,0,115,0,32,0,
109,0,97,0,121,0,32,0,98,0,101,0,32,0,109,0,
111,0,100,0,105,0,102,0,105,0,101,0,100,0,32,0,
97,0,110,0,100,0,32,0,97,0,100,0,100,0,105,0,
116,0,105,0,111,0,110,0,97,0,108,0,32,0,103,0,
108,0,121,0,112,0,104,0,115,0,32,0,111,0,114,0,
32,0,99,0,104,0,97,0,114,0,97,0,99,0,116,0,
101,0,114,0,115,0,32,0,109,0,97,0,121,0,32,0,
98,0,101,0,32,0,97,0,100,0,100,0,101,0,100,0,
32,0,116,0,111,0,32,0,116,0,104,0,101,0,32,0,
70,0,111,0,110,0,116,0,115,0,44,0,32,0,111,0,
110,0,108,0,121,0,32,0,105,0,102,0,32,0,116,0,
104,0,101,0,32,0,102,0,111,0,110,0,116,0,115,0,
32,0,97,0,114,0,101,0,32,0,114,0,101,0,110,0,
97,0,109,0,101,0,100,0,32,0,116,0,111,0,32,0,
110,0,97,0,109,0,101,0,115,0,32,0,110,0,111,0,
116,0,32,0,99,0,111,0,110,0,116,0,97,0,105,0,
110,0,105,0,110,0,103,0,32,0,101,0,105,0,116,0,
104,0,101,0,114,0,32,0,116,0,104,0,101,0,32,0,
119,0,111,0,114,0,100,0,115,0,32,0,34,0,66,0,
105,0,116,0,115,0,116,0,114,0,101,0,97,0,109,0,
34,0,32,0,111,0,114,0,32,0,116,0,104,0,101,0,
32,0,119,0,111,0,114,0,100,0,32,0,34,0,86,0,
101,0,114,0,97,0,34,0,46,0,13,0,10,0,13,0,
10,0,84,0,104,0,105,0,115,0,32,0,76,0,105,0,
99,0,101,0,110,0,115,0,101,0,32,0,98,0,101,0,
99,0,111,0,109,0,101,0,115,0,32,0,110,0,117,0,
108,0,108,0,32,0,97,0,110,0,100,0,32,0,118,0,
111,0,105,0,100,0,32,0,116,0,111,0,32,0,116,0,
104,0,101,0,32,0,101,0,120,0,116,0,101,0,110,0,
116,0,32,0,97,0,112,0,112,0,108,0,105,0,99,0,
97,0,98,0,108,0,101,0,32,0,116,0,111,0,32,0,
70,0,111,0,110,0,116,0,115,0,32,0,111,0,114,0,
32,0,70,0,111,0,110,0,116,0,32,0,83,0,111,0,
102,0,116,0,119,0,97,0,114,0,101,0,32,0,116,0,
104,0,97,0,116,0,32,0,104,0,97,0,115,0,32,0,
98,0,101,0,101,0,110,0,32,0,109,0,111,0,100,0,
105,0,102,0,105,0,101,0,100,0,32,0,97,0,110,0,
100,0,32,0,105,0,115,0,32,0,100,0,105,0,115,0,
116,0,114,0,105,0,98,0,117,0,116,0,101,0,100,0,
32,0,117,0,110,0,100,0,101,0,114,0,32,0,116,0,
104,0,101,0,32,0,34,0,66,0,105,0,116,0,115,0,
116,0,114,0,101,0,97,0,109,0,32,0,86,0,101,0,
114,0,97,0,34,0,32,0,110,0,97,0,109,0,101,0,
115,0,46,0,13,0,10,0,13,0,10,0,84,0,104,0,
101,0,32,0,70,0,111,0,110,0,116,0,32,0,83,0,
111,0,102,0,116,0,119,0,97,0,114,0,101,0,32,0,
109,0,97,0,121,0,32,0,98,0,101,0,32,0,115,0,
111,0,108,0,100,0,32,0,97,0,115,0,32,0,112,0,
97,0,114,0,116,0,32,0,111,0,102,0,32,0,97,0,
32,0,108,0,97,0,114,0,103,0,101,0,114,0,32,0,
115,0,111,0,102,0,116,0,119,0,97,0,114,0,101,0,
32,0,112,0,97,0,99,0,107,0,97,0,103,0,101,0,
32,0,98,0,117,0,116,0,32,0,110,0,111,0,32,0,
99,0,111,0,112,0,121,0,32,0,111,0,102,0,32,0,
111,0,110,0,101,0,32,0,111,0,114,0,32,0,109,0,
111,0,114,0,101,0,32,0,111,0,102,0,32,0,116,0,
104,0,101,0,32,0,70,0,111,0,110,0,116,0,32,0,
83,0,111,0,102,0,116,0,119,0,97,0,114,0,101,0,
32,0,116,0,121,0,112,0,101,0,102,0,97,0,99,0,
101,0,115,0,32,0,109,0,97,0,121,0,32,0,98,0,
101,0,32,0,115,0,111,0,108,0,100,0,32,0,98,0,
121,0,32,0,105,0,116,0,115,0,101,0,108,0,102,0,
46,0,13,0,10,0,13,0,10,0,84,0,72,0,69,0,
32,0,70,0,79,0,78,0,84,0,32,0,83,0,79,0,
70,0,84,0,87,0,65,0,82,0,69,0,32,0,73,0,
83,0,32,0,80,0,82,0,79,0,86,0,73,0,68,0,
69,0,68,0,32,0,34,0,65,0,83,0,32,0,73,0,
83,0,34,0,44,0,32,0,87,0,73,0,84,0,72,0,
79,0,85,0,84,0,32,0,87,0,65,0,82,0,82,0,
65,0,78,0,84,0,89,0,32,0,79,0,70,0,32,0,
65,0,78,0,89,0,32,0,75,0,73,0,78,0,68,0,
44,0,32,0,69,0,88,0,80,0,82,0,69,0,83,0,
83,0,32,0,79,0,82,0,32,0,73,0,77,0,80,0,
76,0,73,0,69,0,68,0,44,0,32,0,73,0,78,0,
67,0,76,0,85,0,68,0,73,0,78,0,71,0,32,0,
66,0,85,0,84,0,32,0,78,0,79,0,84,0,32,0,
76,0,73,0,77,0,73,0,84,0,69,0,68,0,32,0,
84,0,79,0,32,0,65,0,78,0,89,0,32,0,87,0,
65,0,82,0,82,0,65,0,78,0,84,0,73,0,69,0,
83,0,32,0,79,0,70,0,32,0,77,0,69,0,82,0,
67,0,72,0,65,0,78,0,84,0,65,0,66,0,73,0,
76,0,73,0,84,0,89,0,44,0,32,0,70,0,73,0,
84,0,78,0,69,0,83,0,83,0,32,0,70,0,79,0,
82,0,32,0,65,0,32,0,80,0,65,0,82,0,84,0,
73,0,67,0,85,0,76,0,65,0,82,0,32,0,80,0,
85,0,82,0,80,0,79,0,83,0,69,0,32,0,65,0,
78,0,68,0,32,0,78,0,79,0,78,0,73,0,78,0,
70,0,82,0,73,0,78,0,71,0,69,0,77,0,69,0,
78,0,84,0,32,0,79,0,70,0,32,0,67,0,79,0,
80,0,89,0,82,0,73,0,71,0,72,0,84,0,44,0,
32,0,80,0,65,0,84,0,69,0,78,0,84,0,44,0,
32,0,84,0,82,0,65,0,68,0,69,0,77,0,65,0,
82,0,75,0,44,0,32,0,79,0,82,0,32,0,79,0,
84,0,72,0,69,0,82,0,32,0,82,0,73,0,71,0,
72,0,84,0,46,0,32,0,73,0,78,0,32,0,78,0,
79,0,32,0,69,0,86,0,69,0,78,0,84,0,32,0,
83,0,72,0,65,0,76,0,76,0,32,0,66,0,73,0,
84,0,83,0,84,0,82,0,69,0,65,0,77,0,32,0,
79,0,82,0,32,0,84,0,72,0,69,0,32,0,71,0,
78,0,79,0,77,0,69,0,32,0,70,0,79,0,85,0,
78,0,68,0,65,0,84,0,73,0,79,0,78,0,32,0,
66,0,69,0,32,0,76,0,73,0,65,0,66,0,76,0,
69,0,32,0,70,0,79,0,82,0,32,0,65,0,78,0,
89,0,32,0,67,0,76,0,65,0,73,0,77,0,44,0,
32,0,68,0,65,0,77,0,65,0,71,0,69,0,83,0,
32,0,79,0,82,0,32,0,79,0,84,0,72,0,69,0,
82,0,32,0,76,0,73,0,65,0,66,0,73,0,76,0,
73,0,84,0,89,0,44,0,32,0,73,0,78,0,67,0,
76,0,85,0,68,0,73,0,78,0,71,0,32,0,65,0,
78,0,89,0,32,0,71,0,69,0,78,0,69,0,82,0,
65,0,76,0,44,0,32,0,83,0,80,0,69,0,67,0,
73,0,65,0,76,0,44,0,32,0,73,0,78,0,68,0,
73,0,82,0,69,0,67,0,84,0,44,0,32,0,73,0,
78,0,67,0,73,0,68,0,69,0,78,0,84,0,65,0,
76,0,44,0,32,0,79,0,82,0,32,0,67,0,79,0,
78,0,83,0,69,0,81,0,85,0,69,0,78,0,84,0,
73,0,65,0,76,0,32,0,68,0,65,0,77,0,65,0,
71,0,69,0,83,0,44,0,32,0,87,0,72,0,69,0,
84,0,72,0,69,0,82,0,32,0,73,0,78,0,32,0,
65,0,78,0,32,0,65,0,67,0,84,0,73,0,79,0,
78,0,32,0,79,0,70,0,32,0,67,0,79,0,78,0,
84,0,82,0,65,0,67,0,84,0,44,0,32,0,84,0,
79,0,82,0,84,0,32,0,79,0,82,0,32,0,79,0,
84,0,72,0,69,0,82,0,87,0,73,0,83,0,69,0,
44,0,32,0,65,0,82,0,73,0,83,0,73,0,78,0,
71,0,32,0,70,0,82,0,79,0,77,0,44,0,32,0,
79,0,85,0,84,0,32,0,79,0,70,0,32,0,84,0,
72,0,69,0,32,0,85,0,83,0,69,0,32,0,79,0,
82,0,32,0,73,0,78,0,65,0,66,0,73,0,76,0,
73,0,84,0,89,0,32,0,84,0,79,0,32,0,85,0,
83,0,69,0,32,0,84,0,72,0,69,0,32,0,70,0,
79,0,78,0,84,0,32,0,83,0,79,0,70,0,84,0,
87,0,65,0,82,0,69,0,32,0,79,0,82,0,32,0,
70,0,82,0,79,0,77,0,32,0,79,0,84,0,72,0,
69,0,82,0,32,0,68,0,69,0,65,0,76,0,73,0,
78,0,71,0,83,0,32,0,73,0,78,0,32,0,84,0,
72,0,69,0,32,0,70,0,79,0,78,0,84,0,32,0,
83,0,79,0,70,0,84,0,87,0,65,0,82,0,69,0,
46,0,13,0,10,0,13,0,10,0,69,0,120,0,99,0,
101,0,112,0,116,0,32,0,97,0,115,0,32,0,99,0,
111,0,110,0,116,0,97,0,105,0,110,0,101,0,100,0,
32,0,105,0,110,0,32,0,116,0,104,0,105,0,115,0,
32,0,110,0,111,0,116,0,105,0,99,0,101,0,44,0,
32,0,116,0,104,0,101,0,32,0,110,0,97,0,109,0,
101,0,115,0,32,0,111,0,102,0,32,0,71,0,110,0,
111,0,109,0,101,0,44,0,32,0,116,0,104,0,101,0,
32,0,71,0,110,0,111,0,109,0,101,0,32,0,70,0,
111,0,117,0,110,0,100,0,97,0,116,0,105,0,111,0,
110,0,44,0,32,0,97,0,110,0,100,0,32,0,66,0,
105,0,116,0,115,0,116,0,114,0,101,0,97,0,109,0,
32,0,73,0,110,0,99,0,46,0,44,0,32,0,115,0,
104,0,97,0,108,0,108,0,32,0,110,0,111,0,116,0,
32,0,98,0,101,0,32,0,117,0,115,0,101,0,100,0,
32,0,105,0,110,0,32,0,97,0,100,0,118,0,101,0,
114,0,116,0,105,0,115,0,105,0,110,0,103,0,32,0,
111,0,114,0,32,0,111,0,116,0,104,0,101,0,114,0,
119,0,105,0,115,0,101,0,32,0,116,0,111,0,32,0,
112,0,114,0,111,0,109,0,111,0,116,0,101,0,32,0,
116,0,104,0,101,0,32,0,115,0,97,0,108,0,101,0,
44,0,32,0,117,0,115,0,101,0,32,0,111,0,114,0,
32,0,111,0,116,0,104,0,101,0,114,0,32,0,100,0,
101,0,97,0,108,0,105,0,110,0,103,0,115,0,32,0,
105,0,110,0,32,0,116,0,104,0,105,0,115,0,32,0,
70,0,111,0,110,0,116,0,32,0,83,0,111,0,102,0,
116,0,119,0,97,0,114,0,101,0,32,0,119,0,105,0,
116,0,104,0,111,0,117,0,116,0,32,0,112,0,114,0,
105,0,111,0,114,0,32,0,119,0,114,0,105,0,116,0,
116,0,101,0,110,0,32,0,97,0,117,0,116,0,104,0,
111,0,114,0,105,0,122,0,97,0,116,0,105,0,111,0,
110,0,32,0,102,0,114,0,111,0,109,0,32,0,116,0,
104,0,101,0,32,0,71,0,110,0,111,0,109,0,101,0,
32,0,70,0,111,0,117,0,110,0,100,0,97,0,116,0,
105,0,111,0,110,0,32,0,111,0,114,0,32,0,66,0,
105,0,116,0,115,0,116,0,114,0,101,0,97,0,109,0,
32,0,73,0,110,0,99,0,46,0,44,0,32,0,114,0,
101,0,115,0,112,0,101,0,99,0,116,0,105,0,118,0,
101,0,108,0,121,0,46,0,32,0,70,0,111,0,114,0,
32,0,102,0,117,0,114,0,116,0,104,0,101,0,114,0,
32,0,105,0,110,0,102,0,111,0,114,0,109,0,97,0,
116,0,105,0,111,0,110,0,44,0,32,0,99,0,111,0,
110,0,116,0,97,0,99,0,116,0,58,0,32,0,102,0,
111,0,110,0,116,0,115,0,32,0,97,0,116,0,32,0,
103,0,110,0,111,0,109,0,101,0,32,0,100,0,111,0,
116,0,32,0,111,0,114,0,103,0,46,0,104,0,116,0,
116,0,112,0,58,0,47,0,47,0,119,0,119,0,119,0,
46,0,98,0,105,0,116,0,115,0,116,0,114,0,101,0,
97,0,109,0,46,0,99,0,111,0,109,0,1,53,0,184,
0,203,0,203,0,193,0,170,0,156,1,166,0,184,0,102,
0,0,0,113,0,203,0,160,2,178,0,133,0,117,0,184,
0,195,1,203,1,137,2,45,0,203,0,166,0,240,0,211,
0,170,0,135,0,203,3,170,4,0,1,74,0,51,0,203,
0,0,0,217,5,2,0,244,1,84,0,180,0,156,1,57,
1,20,1,57,7,6,4,0,4,78,4,180,4,82,4,184,
4,231,4,205,0,55,4,115,4,205,4,96,4,115,1,51,
3,162,5,86,5,166,5,86,5,57,3,197,2,18,0,201,
0,31,0,184,1,223,0,115,0,186,3,233,3,51,3,188,
4,68,4,14,0,223,3,205,3,170,0,229,3,170,4,4,
0,0,0,203,0,143,0,164,0,123,0,184,0,20,1,111,
0,127,2,123,2,82,0,143,0,199,5,205,0,154,0,154,
0,111,0,203,0,205,1,158,1,211,0,240,0,186,1,131,
0,213,0,152,3,4,2,72,0,158,1,213,0,193,0,203,
0,246,0,131,3,84,2,127,0,0,3,51,2,102,0,211,
0,199,0,164,0,205,0,143,0,154,0,115,4,0,5,213,
1,10,0,254,2,43,0,164,0,180,0,156,0,0,0,98,
0,156,0,0,0,29,3,45,5,213,5,213,5,213,5,240,
0,127,0,123,0,84,0,164,6,184,6,20,7,35,1,211,
0,184,0,203,0,166,1,195,1,236,6,147,0,160,0,211,
3,92,3,113,3,219,1,133,4,35,4,168,4,72,0,143,
1,57,1,20,1,57,3,96,0,143,5,213,1,154,6,20,
7,35,6,102,1,121,4,96,4,96,4,96,4,123,0,156,
0,0,2,119,4,96,1,170,0,233,4,96,7,98,0,123,
0,197,0,127,2,123,0,0,0,180,2,82,5,205,0,102,
0,188,0,102,0,119,6,16,0,205,1,59,1,133,3,137,
0,143,0,123,0,0,0,29,0,205,7,74,4,47,0,156,
0,156,0,0,7,125,0,111,0,0,0,111,3,53,0,106,
0,111,0,123,0,174,0,178,0,45,3,150,0,143,2,123,
0,246,0,131,3,84,6,55,5,246,0,143,0,156,4,225,
2,102,0,143,1,141,2,246,0,205,3,68,0,41,0,102,
4,238,0,115,0,0,20,0,184,2,128,64,255,251,254,3,
250,20,3,249,37,3,248,50,3,247,150,3,246,14,3,245,
254,3,244,254,3,243,37,3,242,14,3,241,150,3,240,37,
3,239,138,65,5,239,254,3,238,150,3,237,150,3,236,250,
3,235,250,3,234,254,3,233,58,3,232,66,3,231,254,3,
230,50,3,229,228,83,5,229,150,3,228,138,65,5,228,83,
3,227,226,47,5,227,250,3,226,47,3,225,254,3,224,254,
3,223,50,3,222,20,3,221,150,3,220,254,3,219,18,3,
218,125,3,217,187,3,216,254,3,214,138,65,5,214,125,3,
213,212,71,5,213,125,3,212,71,3,211,210,27,5,211,254,
3,210,27,3,209,254,3,208,254,3,207,254,3,206,254,3,
205,150,3,204,203,30,5,204,254,3,203,30,3,202,50,3,
201,254,3,198,133,17,5,198,28,3,197,22,3,196,254,3,
195,254,3,194,254,3,193,254,3,192,254,3,191,254,3,190,
254,3,189,254,3,188,254,3,187,254,3,186,17,3,185,134,
37,5,185,254,3,184,183,187,5,184,254,3,183,182,93,5,
183,187,3,183,128,4,182,181,37,5,182,93,64,255,3,182,
64,4,181,37,3,180,254,3,179,150,3,178,254,3,177,254,
3,176,254,3,175,254,3,174,100,3,173,14,3,172,171,37,
5,172,100,3,171,170,18,5,171,37,3,170,18,3,169,138,
65,5,169,250,3,168,254,3,167,254,3,166,254,3,165,18,
3,164,254,3,163,162,14,5,163,50,3,162,14,3,161,100,
3,160,138,65,5,160,150,3,159,254,3,158,157,12,5,158,
254,3,157,12,3,156,155,25,5,156,100,3,155,154,16,5,
155,25,3,154,16,3,153,10,3,152,254,3,151,150,13,5,
151,254,3,150,13,3,149,138,65,5,149,150,3,148,147,14,
5,148,40,3,147,14,3,146,250,3,145,144,187,5,145,254,
3,144,143,93,5,144,187,3,144,128,4,143,142,37,5,143,
93,3,143,64,4,142,37,3,141,254,3,140,139,46,5,140,
254,3,139,46,3,138,134,37,5,138,65,3,137,136,11,5,
137,20,3,136,11,3,135,134,37,5,135,100,3,134,133,17,
5,134,37,3,133,17,3,132,254,3,131,130,17,5,131,254,
3,130,17,3,129,254,3,128,254,3,127,254,3,64,255,126,
125,125,5,126,254,3,125,125,3,124,100,3,123,84,21,5,
123,37,3,122,254,3,121,254,3,120,14,3,119,12,3,118,
10,3,117,254,3,116,250,3,115,250,3,114,250,3,113,250,
3,112,254,3,111,254,3,110,254,3,108,33,3,107,254,3,
106,17,66,5,106,83,3,105,254,3,104,125,3,103,17,66,
5,102,254,3,101,254,3,100,254,3,99,254,3,98,254,3,
97,58,3,96,250,3,94,12,3,93,254,3,91,254,3,90,
254,3,89,88,10,5,89,250,3,88,10,3,87,22,25,5,
87,50,3,86,254,3,85,84,21,5,85,66,3,84,21,3,
83,1,16,5,83,24,3,82,20,3,81,74,19,5,81,254,
3,80,11,3,79,254,3,78,77,16,5,78,254,3,77,16,
3,76,254,3,75,74,19,5,75,254,3,74,73,16,5,74,
19,3,73,29,13,5,73,16,3,72,13,3,71,254,3,70,
150,3,69,150,3,68,254,3,67,2,45,5,67,250,3,66,
187,3,65,75,3,64,254,3,63,254,3,62,61,18,5,62,
20,3,61,60,15,5,61,18,3,60,59,13,5,60,64,255,
15,3,59,13,3,58,254,3,57,254,3,56,55,20,5,56,
250,3,55,54,16,5,55,20,3,54,53,11,5,54,16,3,
53,11,3,52,30,3,51,13,3,50,49,11,5,50,254,3,
49,11,3,48,47,11,5,48,13,3,47,11,3,46,45,9,
5,46,16,3,45,9,3,44,50,3,43,42,37,5,43,100,
3,42,41,18,5,42,37,3,41,18,3,40,39,37,5,40,
65,3,39,37,3,38,37,11,5,38,15,3,37,11,3,36,
254,3,35,254,3,34,15,3,33,1,16,5,33,18,3,32,
100,3,31,250,3,30,29,13,5,30,100,3,29,13,3,28,
17,66,5,28,254,3,27,250,3,26,66,3,25,17,66,5,
25,254,3,24,100,3,23,22,25,5,23,254,3,22,1,16,
5,22,25,3,21,254,3,20,254,3,19,254,3,18,17,66,
5,18,254,3,17,2,45,5,17,66,3,16,125,3,15,100,
3,14,254,3,13,12,22,5,13,254,3,12,1,16,5,12,
22,3,11,254,3,10,16,3,9,254,3,8,2,45,5,8,
254,3,7,20,3,6,100,3,4,1,16,5,4,254,3,64,
21,3,2,45,5,3,254,3,2,1,16,5,2,45,3,1,
16,3,0,254,3,1,184,1,100,133,141,1,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,29,
182,6,5,4,3,2,1,0,44,32,16,176,2,37,73,100,
176,64,81,88,32,200,89,33,45,44,176,2,37,73,100,176,
64,81,88,32,200,89,33,45,44,32,16,7,32,176,0,80,
176,13,121,32,184,255,255,80,88,4,27,5,89,176,5,28,
176,3,37,8,176,4,37,35,225,32,176,0,80,176,13,121,
32,184,255,255,80,88,4,27,5,89,176,5,28,176,3,37,
8,225,45,44,75,80,88,32,176,253,69,68,89,33,45,44,
176,2,37,69,96,68,45,44,75,83,88,176,2,37,176,2,
37,69,68,89,33,33,45,44,69,68,45,0,0,2,0,102,
254,150,4,102,5,164,0,3,0,7,0,26,64,12,4,251,
0,6,251,1,8,5,127,2,4,0,47,196,212,236,49,0,
16,212,236,212,236,48,19,17,33,17,37,33,17,33,102,4,
0,252,115,3,27,252,229,254,150,7,14,248,242,114,6,41,
0,2,1,53,0,0,2,0,5,213,0,3,0,9,0,64,
64,15,7,0,131,4,129,2,8,7,5,1,3,4,0,0,
10,16,252,60,236,50,57,57,49,0,47,228,252,204,48,1,
75,176,11,84,88,189,0,10,0,64,0,1,0,10,0,10,
255,192,56,17,55,56,89,182,0,11,32,11,80,11,3,93,
37,51,21,35,17,51,17,3,35,3,1,53,203,203,203,20,
162,21,254,254,5,213,253,113,254,155,1,101,0,2,0,197,
3,170,2,233,5,213,0,3,0,7,0,77,64,15,5,1,
132,4,0,129,8,4,5,6,0,5,2,4,8,16,252,252,
220,236,49,0,16,244,60,236,50,48,1,75,176,18,84,75,
176,19,84,91,88,189,0,8,0,64,0,1,0,8,0,8,
255,192,56,17,55,56,89,64,15,48,9,64,9,80,9,96,
9,112,9,160,9,191,9,7,93,1,17,35,17,33,17,35,
17,1,111,170,2,36,170,5,213,253,213,2,43,253,213,2,
43,0,0,2,0,158,0,0,6,23,5,190,0,3,0,31,
0,96,64,49,27,11,0,135,7,4,29,9,5,25,13,2,
135,23,19,15,21,17,31,30,28,27,26,23,22,21,20,19,
18,17,16,14,13,12,9,8,7,6,5,4,3,2,1,0,
26,10,24,6,32,16,252,204,23,57,49,0,47,60,212,60,
60,252,60,60,212,60,60,196,50,236,50,50,48,64,17,11,
1,11,2,11,12,11,13,20,4,26,17,26,18,20,31,8,
1,93,1,33,3,33,11,1,33,19,51,3,33,21,33,3,
33,21,33,3,35,19,33,3,35,19,33,53,33,19,33,53,
33,19,4,23,254,221,84,1,37,68,104,1,36,105,160,103,
1,56,254,161,82,1,62,254,155,104,160,103,254,219,103,161,
104,254,197,1,96,84,254,190,1,105,102,3,133,254,178,3,
135,254,97,1,159,254,97,154,254,178,153,254,98,1,158,254,
98,1,158,153,1,78,154,1,159,0,0,3,0,170,254,211,
4,109,6,20,0,33,0,40,0,47,0,213,64,85,34,2,
10,11,10,39,1,38,40,2,11,11,10,29,1,30,28,2,
47,41,47,27,2,41,41,47,66,19,17,16,34,10,27,41,
4,23,6,9,42,33,5,2,23,134,22,6,134,5,17,35,
26,138,22,137,16,0,42,138,5,137,2,45,8,22,10,30,
7,41,26,18,3,0,9,34,16,9,3,1,7,38,8,13,
5,6,48,16,252,60,236,244,23,60,252,23,60,244,228,236,
49,0,47,228,236,196,212,228,236,50,196,16,238,16,238,17,
18,57,17,57,17,18,23,57,17,18,57,48,75,83,88,7,
16,4,237,7,16,14,237,17,23,57,7,16,14,237,17,23,
57,7,16,4,237,89,34,1,75,176,9,84,88,189,0,48,
0,64,0,1,0,48,0,48,255,192,56,17,55,56,89,1,
75,176,12,84,75,176,16,84,91,75,176,15,84,91,88,189,
0,48,255,192,0,1,0,48,0,48,0,64,56,17,55,56,
89,1,35,3,46,1,39,53,30,1,23,17,46,1,53,52,
54,55,53,51,21,30,1,23,21,46,1,39,17,30,1,21,
20,6,7,3,17,14,1,21,20,22,23,17,62,1,53,52,
38,2,180,100,1,105,210,106,102,209,111,221,201,218,204,100,
93,174,83,83,175,92,227,214,227,214,100,116,122,113,225,127,
129,123,254,211,1,45,2,45,45,180,64,65,1,1,200,36,
172,150,163,188,14,235,232,4,31,27,175,42,46,4,254,85,
35,180,156,169,195,15,3,0,1,154,13,106,88,86,96,213,
254,79,17,110,90,88,104,0,0,5,0,113,255,227,7,41,
5,240,0,11,0,23,0,35,0,39,0,51,0,149,64,54,
36,15,37,38,37,38,15,39,36,39,66,0,146,12,30,146,
46,141,24,146,36,6,146,12,141,38,18,140,40,36,145,52,
39,33,27,37,9,3,13,21,14,9,13,15,33,13,43,14,
27,13,15,49,11,52,16,252,196,236,244,236,16,238,246,238,
17,57,17,18,57,49,0,16,228,50,244,60,228,236,16,238,
246,238,16,238,48,75,83,88,7,16,5,237,7,16,5,237,
89,34,1,75,176,9,84,75,176,11,84,91,75,176,12,84,
91,75,176,20,84,91,75,176,14,84,91,75,176,13,84,91,
88,189,0,52,0,64,0,1,0,52,0,52,255,192,56,17,
55,56,89,1,34,6,21,20,22,51,50,54,53,52,38,39,
50,22,21,20,6,35,34,38,53,52,54,1,34,6,21,20,
22,51,50,54,53,52,38,37,51,1,35,19,50,22,21,20,
6,35,34,38,53,52,54,5,209,87,99,99,87,85,99,99,
85,158,186,187,157,160,186,187,252,151,86,99,98,87,87,99,
100,3,49,160,252,90,160,31,158,188,187,159,159,185,186,2,
145,148,132,130,149,149,130,131,149,127,220,187,187,219,219,187,
188,219,2,97,149,130,132,148,148,132,129,150,127,249,243,6,
13,219,187,189,218,219,188,186,220,0,0,2,0,129,255,227,
5,254,5,240,0,9,0,48,1,205,64,150,13,1,14,12,
134,17,18,17,11,134,10,11,18,18,17,9,134,0,9,21,
22,21,7,1,6,8,134,22,22,21,2,1,3,1,134,29,
30,29,0,134,9,0,30,30,29,32,31,2,33,30,17,10,
19,10,23,22,21,3,24,20,17,19,10,7,8,2,6,9,
17,19,19,10,2,1,2,3,0,17,10,19,10,23,22,2,
24,21,17,19,10,20,17,19,19,10,66,18,11,9,3,6,
0,10,30,3,40,21,14,6,40,39,6,149,24,43,149,39,
148,36,145,24,140,14,19,10,46,11,14,9,0,46,18,21,
39,14,30,3,46,18,39,33,14,17,15,19,33,3,18,27,
16,49,16,252,236,196,212,212,236,16,198,238,17,57,17,18,
57,57,17,57,57,17,57,17,57,49,0,47,198,228,246,230,
238,16,238,16,198,17,18,57,17,23,57,17,23,57,48,75,
83,88,7,16,5,237,7,5,237,17,23,57,7,16,5,237,
17,23,57,7,16,5,237,17,23,57,7,5,237,17,23,57,
7,16,5,237,17,23,57,7,16,8,237,7,16,14,237,17,
23,57,7,16,14,237,17,23,57,7,16,8,237,7,16,8,
237,7,16,14,237,17,23,57,89,34,178,15,50,1,1,93,
64,178,7,11,5,34,9,41,28,0,28,1,31,2,23,11,
42,0,42,1,38,18,58,0,52,18,68,11,94,0,89,1,
90,10,85,18,90,26,90,31,89,48,103,30,123,0,155,0,
154,1,153,2,151,8,149,11,147,21,149,22,149,34,153,45,
31,9,11,9,12,8,17,12,39,12,40,24,2,27,9,25,
11,25,12,25,17,28,20,28,21,22,29,31,50,39,0,39,
1,41,9,35,18,42,19,42,20,40,21,47,50,59,9,52,
18,57,19,63,50,74,9,76,20,75,21,70,25,79,50,86,
1,90,9,89,12,85,18,89,19,92,31,95,50,106,12,105,
17,96,50,117,1,121,12,122,17,147,0,147,1,151,2,149,
5,156,7,156,8,159,8,154,9,155,11,154,12,144,50,160,
50,176,50,57,93,0,93,1,14,1,21,20,22,51,50,54,
55,9,1,62,1,55,51,6,2,7,1,35,39,14,1,35,
34,0,53,52,54,55,46,1,53,52,54,51,50,22,23,21,
46,1,35,34,6,21,20,22,1,242,91,85,212,160,95,166,
73,254,123,1,252,59,66,6,186,12,104,93,1,23,252,143,
104,228,131,241,254,206,134,134,48,50,222,184,83,165,85,87,
158,68,105,131,59,3,35,81,161,88,146,194,63,64,2,143,
253,248,89,203,114,132,254,254,126,254,227,147,89,87,1,19,
215,128,225,99,63,125,60,162,197,36,36,182,47,49,111,88,
51,103,0,1,0,197,3,170,1,111,5,213,0,3,0,66,
64,10,1,132,0,129,4,0,5,2,4,4,16,252,236,49,
0,16,244,236,48,1,75,176,18,84,75,176,19,84,91,88,
189,0,4,0,64,0,1,0,4,0,4,255,192,56,17,55,
56,89,64,13,64,5,80,5,96,5,112,5,144,5,160,5,
6,93,1,17,35,17,1,111,170,5,213,253,213,2,43,0,
0,1,0,176,254,242,2,123,6,18,0,13,0,79,64,15,
6,152,0,151,14,13,7,0,3,18,6,0,19,10,14,16,
220,228,50,236,17,57,57,49,0,16,252,236,48,1,75,176,
19,84,88,189,0,14,0,64,0,1,0,14,0,14,255,192,
56,17,55,56,89,1,75,176,15,84,88,189,0,14,255,192,
0,1,0,14,0,14,0,64,56,17,55,56,89,1,6,2,
21,20,18,23,35,38,2,53,52,18,55,2,123,134,130,131,
133,160,150,149,148,151,6,18,230,254,62,231,231,254,59,229,
235,1,198,224,223,1,196,236,0,1,0,164,254,242,2,111,
6,18,0,13,0,31,64,15,7,152,0,151,14,7,1,0,
11,18,4,19,8,0,14,16,220,60,244,236,17,57,57,49,
0,16,252,236,48,19,51,22,18,21,20,2,7,35,54,18,
53,52,2,164,160,150,149,149,150,160,133,131,131,6,18,236,
254,60,223,224,254,58,235,229,1,197,231,231,1,194,0,1,
0,61,2,74,3,195,5,240,0,17,0,78,64,44,16,13,
11,0,4,12,9,7,4,2,4,8,3,153,5,17,12,153,
10,1,14,145,18,8,12,10,3,9,6,17,3,1,3,2,
0,20,15,4,11,9,20,13,6,18,16,212,60,228,50,220,
60,228,50,23,57,17,18,23,57,49,0,16,244,212,60,236,
50,196,236,50,23,57,18,23,57,48,1,5,5,7,37,17,
35,17,5,39,37,37,55,5,17,51,17,37,3,195,254,153,
1,103,58,254,176,114,254,176,58,1,103,254,153,58,1,80,
114,1,80,4,223,194,195,98,203,254,135,1,121,203,98,195,
194,99,203,1,121,254,135,203,0,1,0,217,0,0,5,219,
5,4,0,11,0,35,64,17,0,9,1,156,7,3,5,2,
21,4,0,23,10,6,21,8,12,16,220,252,60,252,60,236,
49,0,47,212,60,252,60,196,48,1,17,33,21,33,17,35,
17,33,53,33,17,3,174,2,45,253,211,168,253,211,2,45,
5,4,253,211,170,253,211,2,45,170,2,45,0,1,0,158,
255,18,1,195,0,254,0,5,0,25,64,12,3,158,0,131,
6,3,4,1,25,0,24,6,16,252,236,212,204,49,0,16,
252,236,48,55,51,21,3,35,19,240,211,164,129,82,254,172,
254,192,1,64,0,1,0,100,1,223,2,127,2,131,0,3,
0,17,182,0,156,2,4,1,0,4,16,220,204,49,0,16,
212,236,48,19,33,21,33,100,2,27,253,229,2,131,164,0,
0,1,0,219,0,0,1,174,0,254,0,3,0,17,183,0,
131,2,1,25,0,24,4,16,252,236,49,0,47,236,48,55,
51,21,35,219,211,211,254,254,0,1,0,0,255,66,2,178,
5,213,0,3,0,45,64,20,0,26,1,2,1,2,26,3,
0,3,66,2,159,0,129,4,2,0,1,3,47,196,57,57,
49,0,16,244,236,48,75,83,88,7,16,5,237,7,16,5,
237,89,34,1,51,1,35,2,8,170,253,248,170,5,213,249,
109,0,0,2,0,135,255,227,4,143,5,240,0,11,0,23,
0,35,64,19,6,160,18,0,160,12,145,18,140,24,9,28,
15,30,3,28,21,27,24,16,252,236,244,236,49,0,16,228,
244,236,16,238,48,1,34,2,17,16,18,51,50,18,17,16,
2,39,50,0,17,16,0,35,34,0,17,16,0,2,139,156,
157,157,156,157,157,157,157,251,1,9,254,247,251,251,254,247,
1,9,5,80,254,205,254,204,254,205,254,205,1,51,1,51,
1,52,1,51,160,254,115,254,134,254,135,254,115,1,141,1,
121,1,122,1,141,0,0,1,0,225,0,0,4,90,5,213,
0,10,0,75,64,21,66,3,160,4,2,160,5,129,7,0,
160,9,8,31,6,28,3,0,31,1,11,16,212,236,196,252,
236,49,0,47,236,50,244,236,212,236,48,75,83,88,89,34,
1,75,176,15,84,88,189,0,11,255,192,0,1,0,11,0,
11,0,64,56,17,55,56,89,180,15,3,15,4,2,93,55,
33,17,5,53,37,51,17,33,21,33,254,1,74,254,153,1,
101,202,1,74,252,164,170,4,115,72,184,72,250,213,170,0,
0,1,0,150,0,0,4,74,5,240,0,28,0,165,64,39,
25,26,27,3,24,28,17,5,4,0,17,5,5,4,66,16,
161,17,148,13,160,20,145,4,0,160,2,0,16,10,2,1,
10,28,23,16,3,6,29,16,252,196,212,236,192,192,17,18,
57,49,0,47,236,50,244,236,244,236,48,75,83,88,7,16,
5,237,7,5,237,17,23,57,89,34,1,75,176,21,84,75,
176,22,84,91,75,176,20,84,91,88,189,0,29,0,64,0,
1,0,29,0,29,255,192,56,17,55,56,89,64,50,85,4,
86,5,86,7,122,4,122,5,118,27,135,25,7,4,0,4,
25,4,26,4,27,5,28,116,0,118,6,117,26,115,27,116,
28,130,0,134,25,130,26,130,27,130,28,168,0,168,27,17,
93,0,93,37,33,21,33,53,54,0,55,62,1,53,52,38,
35,34,6,7,53,62,1,51,50,4,21,20,6,7,6,0,
1,137,2,193,252,76,115,1,141,51,97,77,167,134,95,211,
120,122,212,88,232,1,20,69,91,25,254,244,170,170,170,119,
1,145,58,109,151,73,119,150,66,67,204,49,50,232,194,92,
165,112,29,254,235,0,0,1,0,156,255,227,4,115,5,240,
0,40,0,123,64,46,0,21,19,10,134,9,31,134,32,19,
160,21,13,160,9,147,6,28,160,32,147,35,145,6,140,21,
163,41,22,28,19,0,3,20,25,28,38,32,16,28,3,20,
31,9,6,41,16,252,196,196,212,236,244,236,17,23,57,57,
49,0,16,236,228,244,228,236,16,230,238,16,238,16,238,16,
238,17,18,57,48,1,75,176,22,84,75,176,20,84,91,88,
189,0,41,0,64,0,1,0,41,0,41,255,192,56,17,55,
56,89,64,9,100,30,97,31,97,32,100,33,4,0,93,1,
30,1,21,20,4,33,34,38,39,53,30,1,51,50,54,53,
52,38,43,1,53,51,50,54,53,52,38,35,34,6,7,53,
62,1,51,50,4,21,20,6,3,63,145,163,254,208,254,232,
94,199,106,84,200,109,190,199,185,165,174,182,149,158,163,152,
83,190,114,115,201,89,230,1,12,142,3,37,31,196,144,221,
242,37,37,195,49,50,150,143,132,149,166,119,112,115,123,36,
38,180,32,32,209,178,124,171,0,2,0,100,0,0,4,164,
5,213,0,2,0,13,0,140,64,29,1,13,3,13,0,3,
3,13,66,0,3,11,7,160,5,1,3,129,9,1,12,10,
0,28,6,8,4,12,14,16,220,212,60,196,236,50,17,57,
49,0,47,228,212,60,236,50,18,57,48,75,83,88,7,16,
4,201,7,16,5,201,89,34,1,75,176,11,84,75,176,13,
84,91,88,189,0,14,0,64,0,1,0,14,0,14,255,192,
56,17,55,56,89,64,42,11,0,42,0,72,0,89,0,105,
0,119,0,138,0,7,22,1,43,0,38,1,43,3,54,1,
78,1,79,12,79,13,86,1,102,1,117,1,122,3,133,1,
13,93,0,93,9,1,33,3,51,17,51,21,35,17,35,17,
33,53,3,6,254,2,1,254,53,254,213,213,201,253,94,5,
37,252,227,3,205,252,51,168,254,160,1,96,195,0,0,1,
0,158,255,227,4,100,5,213,0,29,0,117,64,35,4,26,
7,17,134,16,29,26,160,7,20,160,16,137,13,2,160,0,
129,13,140,7,164,30,23,28,1,10,3,28,0,10,16,6,
30,16,252,196,212,236,16,196,238,49,0,16,228,228,244,236,
16,230,238,16,254,196,16,238,17,18,57,48,1,75,176,22,
84,75,176,20,84,91,88,189,0,30,0,64,0,1,0,30,
0,30,255,192,56,17,55,56,89,1,75,176,15,84,88,189,
0,30,255,192,0,1,0,30,0,30,0,64,56,17,55,56,
89,19,33,21,33,17,62,1,51,50,0,21,20,0,33,34,
38,39,53,30,1,51,50,54,53,52,38,35,34,6,7,221,
3,25,253,160,44,88,44,250,1,36,254,212,254,239,94,195,
104,90,192,107,173,202,202,173,81,161,84,5,213,170,254,146,
15,15,254,238,234,241,254,245,32,32,203,49,48,182,156,156,
182,36,38,0,0,2,0,143,255,227,4,150,5,240,0,11,
0,36,0,88,64,36,19,6,0,13,134,12,0,160,22,6,
160,28,22,165,16,160,12,137,34,145,28,140,37,12,34,9,
28,25,30,19,28,3,33,31,27,37,16,252,236,236,244,236,
228,49,0,16,228,244,228,252,228,16,238,16,238,16,238,17,
18,57,48,64,20,203,0,203,1,205,2,205,3,205,4,203,
5,203,6,7,164,30,178,30,2,93,1,93,1,34,6,21,
20,22,51,50,54,53,52,38,1,21,46,1,35,34,2,3,
62,1,51,50,0,21,20,0,35,32,0,17,16,0,33,50,
22,2,164,136,159,159,136,136,159,159,1,9,76,155,76,200,
211,15,59,178,107,225,1,5,254,240,226,254,253,254,238,1,
80,1,27,76,155,3,59,186,162,161,187,187,161,162,186,2,
121,184,36,38,254,242,254,239,87,93,254,239,235,230,254,234,
1,141,1,121,1,98,1,165,30,0,0,1,0,168,0,0,
4,104,5,213,0,6,0,99,64,24,5,17,2,3,2,3,
17,4,5,4,66,5,160,0,129,3,5,3,1,4,1,0,
6,7,16,252,204,196,17,57,57,49,0,47,244,236,48,75,
83,88,7,16,5,237,7,16,5,237,89,34,1,75,176,22,
84,88,189,0,7,0,64,0,1,0,7,0,7,255,192,56,
17,55,56,89,64,18,88,2,1,6,3,26,5,57,5,72,
5,103,3,176,0,176,6,7,93,0,93,19,33,21,1,35,
1,33,168,3,192,253,226,211,1,254,253,51,5,213,86,250,
129,5,43,0,0,3,0,139,255,227,4,139,5,240,0,11,
0,35,0,47,0,67,64,37,24,12,0,160,39,6,160,30,
45,160,18,145,30,140,39,163,48,24,12,36,42,28,21,36,
28,15,9,28,21,27,30,3,28,15,33,27,48,16,252,196,
236,244,196,236,16,238,16,238,17,57,57,49,0,16,236,228,
244,236,16,238,16,238,57,57,48,1,34,6,21,20,22,51,
50,54,53,52,38,37,38,38,53,52,54,51,50,22,21,20,
6,7,22,22,21,20,4,35,34,36,53,52,54,19,20,22,
51,50,54,53,52,38,35,34,6,2,139,144,165,165,144,144,
166,165,254,165,130,145,255,222,223,254,145,129,146,163,254,247,
247,247,254,247,164,72,145,131,130,147,147,130,131,145,2,197,
154,135,135,154,155,134,135,154,86,32,178,128,179,208,208,179,
128,178,32,34,198,143,217,232,232,217,143,198,1,97,116,130,
130,116,116,130,130,0,0,2,0,129,255,227,4,135,5,240,
0,24,0,36,0,88,64,35,7,31,25,1,134,0,25,160,
10,165,4,160,0,137,22,31,160,16,145,22,140,37,7,28,
28,33,19,30,0,34,34,28,13,27,37,16,252,236,228,244,
236,236,49,0,16,228,244,236,16,230,254,245,238,16,238,17,
18,57,48,64,22,196,25,194,26,192,27,192,28,192,29,194,
30,196,31,7,170,18,188,18,233,18,3,93,1,93,55,53,
30,1,51,50,18,19,14,1,35,34,0,53,52,0,51,32,
0,17,16,0,33,34,38,1,50,54,53,52,38,35,34,6,
21,20,22,225,76,156,75,200,211,15,58,178,108,224,254,251,
1,16,226,1,3,1,17,254,177,254,229,76,156,1,62,136,
159,159,136,136,159,159,31,184,36,38,1,13,1,18,86,92,
1,15,235,230,1,22,254,115,254,134,254,159,254,91,30,2,
151,186,162,161,187,187,161,162,186,0,0,2,0,240,0,0,
1,195,4,35,0,3,0,7,0,28,64,14,6,131,4,166,
0,131,2,5,1,3,4,0,24,8,16,252,60,236,50,49,
0,47,236,244,236,48,55,51,21,35,17,51,21,35,240,211,
211,211,211,254,254,4,35,254,0,2,0,158,255,18,1,195,
4,35,0,3,0,9,0,37,64,19,2,131,0,7,158,4,
131,0,166,10,7,8,5,1,25,4,0,24,10,16,252,60,
236,50,212,204,49,0,16,228,252,236,16,238,48,19,51,21,
35,17,51,21,3,35,19,240,211,211,211,164,129,82,4,35,
254,253,217,172,254,192,1,64,0,1,0,217,0,94,5,219,
4,166,0,6,0,77,64,42,2,156,3,4,3,1,156,0,
1,4,4,3,1,156,2,1,5,6,5,0,156,6,5,66,
5,4,2,1,0,5,3,168,6,167,7,1,2,0,36,4,
35,7,16,252,236,50,57,49,0,16,244,236,23,57,48,75,
83,88,7,4,237,7,16,8,237,7,16,8,237,7,16,4,
237,89,34,9,2,21,1,53,1,5,219,251,248,4,8,250,
254,5,2,3,240,254,145,254,147,182,1,209,166,1,209,0,
0,2,0,217,1,96,5,219,3,162,0,3,0,7,0,28,
64,13,0,156,2,6,156,4,8,5,1,4,0,35,8,16,
252,60,196,50,49,0,16,212,236,212,236,48,19,33,21,33,
21,33,21,33,217,5,2,250,254,5,2,250,254,3,162,168,
240,170,0,1,0,217,0,94,5,219,4,166,0,6,0,79,
64,43,6,156,0,6,3,4,3,5,156,4,4,3,0,156,
1,2,1,6,156,5,6,2,2,1,66,6,5,3,2,0,
5,4,168,1,167,7,6,2,36,4,0,35,7,16,252,60,
236,57,49,0,16,244,236,23,57,48,75,83,88,7,16,8,
237,7,16,4,237,7,16,4,237,7,16,8,237,89,34,19,
53,1,21,1,53,1,217,5,2,250,254,4,6,3,240,182,
254,47,166,254,47,182,1,109,0,2,0,147,0,0,3,176,
5,240,0,3,0,36,0,112,64,43,36,30,9,6,4,10,
29,19,4,0,20,134,19,136,16,149,23,145,0,131,2,29,
26,13,9,5,4,10,30,1,13,28,26,4,28,5,1,3,
0,38,26,19,37,16,220,196,252,236,212,236,16,238,17,57,
57,17,18,57,17,18,57,49,0,47,238,246,254,244,238,16,
205,17,57,57,23,57,48,1,75,176,12,84,88,189,0,37,
0,64,0,1,0,37,0,37,255,192,56,17,55,56,89,182,
121,9,122,10,122,32,3,93,37,51,21,35,19,35,53,52,
54,63,1,62,1,53,52,38,35,34,6,7,53,62,1,51,
50,22,21,20,6,15,1,14,1,7,14,1,21,1,135,203,
203,197,191,56,90,90,57,51,131,108,79,179,97,94,193,103,
184,223,72,90,88,47,39,8,6,6,254,254,1,145,154,101,
130,86,89,53,94,49,89,110,70,67,188,57,56,194,159,76,
137,86,86,47,53,25,21,60,52,0,0,2,0,135,254,156,
7,113,5,162,0,11,0,76,0,149,64,50,24,12,3,9,
169,25,21,27,3,169,76,15,52,51,15,172,48,169,55,21,
172,36,169,55,67,77,51,52,30,26,0,40,18,6,24,12,
40,26,43,30,40,73,18,43,42,40,73,44,61,77,16,220,
236,252,236,16,254,253,254,60,198,16,238,17,18,57,57,49,
0,16,212,196,252,236,16,254,237,212,198,16,197,238,50,16,
196,238,17,57,57,48,0,75,176,9,84,75,176,12,84,91,
75,176,16,84,91,75,176,19,84,91,75,176,20,84,91,88,
189,0,77,255,192,0,1,0,77,0,77,0,64,56,17,55,
56,89,64,9,15,78,31,78,47,78,63,78,4,1,93,1,
20,22,51,50,54,53,52,38,35,34,6,1,14,1,35,34,
38,53,52,54,51,50,22,23,53,51,17,62,1,53,52,38,
39,38,36,35,34,6,7,6,2,21,20,18,23,22,4,51,
50,54,55,23,6,4,35,34,36,39,38,2,53,52,18,55,
54,36,51,50,4,23,30,1,21,16,0,5,2,250,142,124,
123,141,144,122,121,143,2,33,60,155,103,172,215,216,171,103,
156,59,143,146,165,63,64,104,254,213,176,123,226,96,157,177,
115,109,105,1,20,157,129,249,104,90,125,254,217,152,185,254,
184,128,128,134,136,126,129,1,82,189,212,1,107,123,75,79,
254,194,254,232,2,25,143,163,164,142,140,165,164,254,72,77,
73,249,200,200,250,75,76,131,253,32,22,223,177,107,188,80,
131,139,65,64,102,254,181,193,159,254,234,106,104,109,87,81,
111,97,103,131,125,125,1,73,189,182,1,74,125,127,135,174,
160,98,230,123,254,249,254,208,6,0,0,2,0,16,0,0,
5,104,5,213,0,2,0,10,0,186,64,65,0,17,1,0,
4,5,4,2,17,5,5,4,1,17,10,3,10,0,17,2,
0,3,3,10,7,17,5,4,6,17,5,5,4,9,17,3,
10,8,17,10,3,10,66,0,3,7,149,1,3,129,9,5,
9,8,7,6,4,3,2,1,0,9,5,10,11,16,212,196,
23,57,49,0,47,60,228,212,236,18,57,48,75,83,88,7,
16,5,237,7,5,237,7,16,5,237,7,5,237,7,16,8,
237,7,16,5,237,7,16,5,237,7,16,8,237,89,34,178,
32,12,1,1,93,64,58,15,0,88,0,118,0,112,0,140,
0,5,7,1,8,2,6,3,9,4,22,1,25,2,86,1,
88,2,80,12,103,1,104,2,120,1,118,2,124,3,114,4,
119,7,120,8,135,1,136,2,128,12,152,2,153,3,150,4,
23,93,0,93,9,1,33,1,51,1,35,3,33,3,35,2,
188,254,238,2,37,254,123,229,2,57,210,136,253,95,136,213,
5,14,253,25,3,174,250,43,1,127,254,129,0,3,0,201,
0,0,4,236,5,213,0,8,0,17,0,32,0,67,64,35,
25,0,149,10,9,149,18,129,1,149,10,173,31,17,11,8,
2,19,25,31,5,0,14,28,22,5,25,28,46,9,0,28,
18,4,33,16,252,236,50,252,236,212,236,17,23,57,57,57,
49,0,47,236,236,244,236,16,238,57,48,178,15,34,1,1,
93,1,17,33,50,54,53,52,38,35,1,17,33,50,54,53,
52,38,35,37,33,50,22,21,20,6,7,30,1,21,20,4,
35,33,1,147,1,68,163,157,157,163,254,188,1,43,148,145,
145,148,254,11,2,4,231,250,128,124,149,165,254,240,251,253,
232,2,201,253,221,135,139,140,133,2,102,254,62,111,114,113,
112,166,192,177,137,162,20,32,203,152,200,218,0,1,0,115,
255,227,5,39,5,240,0,25,0,54,64,26,13,161,14,174,
10,149,17,1,161,0,174,4,149,23,145,17,140,26,7,25,
13,0,48,20,16,26,16,252,236,50,236,49,0,16,228,244,
236,244,236,16,238,246,238,48,180,15,27,31,27,2,1,93,
1,21,46,1,35,32,0,17,16,0,33,50,54,55,21,14,
1,35,32,0,17,16,0,33,50,22,5,39,102,231,130,255,
0,254,240,1,16,1,0,130,231,102,106,237,132,254,173,254,
122,1,134,1,83,134,237,5,98,213,95,94,254,199,254,216,
254,217,254,199,94,95,211,72,72,1,159,1,103,1,104,1,
159,71,0,2,0,201,0,0,5,176,5,213,0,8,0,17,
0,46,64,21,0,149,9,129,1,149,16,8,2,16,10,0,
5,25,13,50,0,28,9,4,18,16,252,236,244,236,17,57,
57,57,57,49,0,47,236,244,236,48,178,96,19,1,1,93,
1,17,51,32,0,17,16,0,33,37,33,32,0,17,16,0,
41,1,1,147,244,1,53,1,31,254,225,254,203,254,66,1,
159,1,178,1,150,254,104,254,80,254,97,5,47,251,119,1,
24,1,46,1,44,1,23,166,254,151,254,128,254,126,254,150,
0,1,0,201,0,0,4,139,5,213,0,11,0,46,64,21,
6,149,4,2,149,0,129,8,149,4,173,10,5,1,9,7,
3,28,0,4,12,16,252,236,50,212,196,196,49,0,47,236,
236,244,236,16,238,48,178,31,13,1,1,93,19,33,21,33,
17,33,21,33,17,33,21,33,201,3,176,253,26,2,199,253,
57,2,248,252,62,5,213,170,254,70,170,253,227,170,0,1,
0,201,0,0,4,35,5,213,0,9,0,41,64,18,6,149,
4,2,149,0,129,4,173,8,5,1,7,3,28,0,4,10,
16,252,236,50,212,196,49,0,47,236,244,236,16,238,48,178,
15,11,1,1,93,19,33,21,33,17,33,21,33,17,35,201,
3,90,253,112,2,80,253,176,202,5,213,170,254,72,170,253,
55,0,0,1,0,115,255,227,5,139,5,240,0,29,0,57,
64,32,0,5,27,1,149,3,27,149,8,18,161,17,174,21,
149,14,145,8,140,30,2,0,28,17,52,4,51,24,25,11,
16,30,16,252,236,252,228,252,196,49,0,16,228,244,236,244,
236,16,254,212,238,17,57,57,48,37,17,33,53,33,17,6,
4,35,32,0,17,16,0,33,50,4,23,21,38,38,35,32,
0,17,16,0,33,50,54,4,195,254,182,2,18,117,254,230,
160,254,162,254,117,1,139,1,94,146,1,7,111,112,252,139,
254,238,254,237,1,19,1,18,107,168,213,1,145,166,253,127,
83,85,1,153,1,109,1,110,1,153,72,70,215,95,96,254,
206,254,209,254,210,254,206,37,0,1,0,201,0,0,5,59,
5,213,0,11,0,44,64,20,8,149,2,173,4,0,129,10,
6,7,3,28,5,56,9,1,28,0,4,12,16,252,236,50,
252,236,50,49,0,47,60,228,50,252,236,48,178,80,13,1,
1,93,19,51,17,33,17,51,17,35,17,33,17,35,201,202,
2,222,202,202,253,34,202,5,213,253,156,2,100,250,43,2,
199,253,57,0,0,1,0,201,0,0,1,147,5,213,0,3,
0,57,183,0,175,2,1,28,0,4,4,16,252,236,49,0,
47,236,48,1,75,176,16,84,88,189,0,4,255,192,0,1,
0,4,0,4,0,64,56,17,55,56,89,64,13,48,5,64,
5,80,5,96,5,143,5,159,5,6,93,19,51,17,35,201,
202,202,5,213,250,43,0,1,255,150,254,102,1,147,5,213,
0,11,0,77,64,19,11,2,0,7,149,5,176,0,129,12,
5,8,6,57,1,28,0,4,12,16,252,236,228,57,57,49,
0,16,228,252,236,17,57,57,48,1,75,176,16,84,88,189,
0,12,255,192,0,1,0,12,0,12,0,64,56,17,55,56,
89,64,13,48,13,64,13,80,13,96,13,143,13,159,13,6,
93,19,51,17,16,6,43,1,53,51,50,54,53,201,202,205,
227,77,63,134,110,5,213,250,147,254,242,244,170,150,194,0,
0,1,0,201,0,0,5,106,5,213,0,10,0,239,64,40,
8,17,5,6,5,7,17,6,6,5,3,17,4,5,4,2,
17,5,5,4,66,8,5,2,3,3,0,175,9,6,5,1,
4,6,8,1,28,0,4,11,16,252,236,50,212,196,17,57,
49,0,47,60,236,50,23,57,48,75,83,88,7,16,4,237,
7,16,5,237,7,16,5,237,7,16,4,237,89,34,178,8,
3,1,1,93,64,146,20,2,1,4,2,9,8,22,2,40,
5,40,8,55,2,54,5,52,8,71,2,70,5,67,8,85,
2,103,2,118,2,119,5,131,2,136,5,143,8,148,2,155,
8,231,2,21,6,3,9,5,9,6,27,3,25,7,5,10,
3,10,7,24,3,40,5,43,6,42,7,54,4,54,5,54,
6,53,7,48,12,65,3,64,4,69,5,64,6,64,7,64,
12,98,3,96,4,104,5,103,7,119,5,112,12,139,3,139,
5,142,6,143,7,143,12,154,3,157,6,157,7,182,3,181,
7,197,3,197,7,215,3,214,7,232,3,233,4,232,5,234,
6,247,3,248,5,249,6,44,93,113,0,93,113,19,51,17,
1,33,9,1,33,1,17,35,201,202,2,158,1,4,253,27,
3,26,254,246,253,51,202,5,213,253,137,2,119,253,72,252,
227,2,207,253,49,0,0,1,0,201,0,0,4,106,5,213,
0,5,0,37,64,12,2,149,0,129,4,1,28,3,58,0,
4,6,16,252,236,236,49,0,47,228,236,48,64,9,48,7,
80,7,128,3,128,4,4,1,93,19,51,17,33,21,33,201,
202,2,215,252,95,5,213,250,213,170,0,1,0,201,0,0,
6,31,5,213,0,12,0,191,64,52,3,17,7,8,7,2,
17,1,2,8,8,7,2,17,3,2,9,10,9,1,17,10,
10,9,66,10,7,2,3,8,3,0,175,8,11,5,9,8,
3,2,1,5,10,6,28,4,62,10,28,0,4,13,16,252,
236,252,236,17,23,57,49,0,47,60,196,236,50,17,23,57,
48,75,83,88,7,16,5,237,7,16,8,237,7,16,8,237,
7,16,5,237,89,34,178,112,14,1,1,93,64,86,3,7,
15,8,15,9,2,10,21,2,20,7,19,10,38,2,38,7,
32,7,38,10,32,10,52,7,53,10,105,2,124,2,123,7,
121,10,128,2,130,7,130,10,144,2,22,4,1,11,3,19,
1,27,3,35,1,44,3,39,8,40,9,52,1,60,3,86,
8,89,9,101,8,106,9,118,8,121,9,129,1,141,3,149,
1,155,3,20,93,0,93,19,33,9,1,33,17,35,17,1,
35,1,17,35,201,1,45,1,125,1,127,1,45,197,254,127,
203,254,127,196,5,213,252,8,3,248,250,43,5,31,252,0,
4,0,250,225,0,1,0,201,0,0,5,51,5,213,0,9,
0,121,64,30,7,17,1,2,1,2,17,6,7,6,66,7,
2,3,0,175,8,5,6,1,7,2,28,4,54,7,28,0,
4,10,16,252,236,252,236,17,57,57,49,0,47,60,236,50,
57,57,48,75,83,88,7,16,4,237,7,16,4,237,89,34,
178,31,11,1,1,93,64,48,54,2,56,7,72,2,71,7,
105,2,102,7,128,2,7,6,1,9,6,21,1,26,6,70,
1,73,6,87,1,88,6,101,1,105,6,121,6,133,1,138,
6,149,1,154,6,159,11,16,93,0,93,19,33,1,17,51,
17,33,1,17,35,201,1,16,2,150,196,254,240,253,106,196,
5,213,251,31,4,225,250,43,4,225,251,31,0,2,0,115,
255,227,5,217,5,240,0,11,0,23,0,35,64,19,6,149,
18,0,149,12,145,18,140,24,9,25,15,51,3,25,21,16,
24,16,252,236,252,236,49,0,16,228,244,236,16,238,48,1,
34,0,17,16,0,51,50,0,17,16,0,39,32,0,17,16,
0,33,32,0,17,16,0,3,39,220,254,253,1,3,220,220,
1,1,254,255,220,1,58,1,120,254,136,254,198,254,197,254,
135,1,121,5,76,254,184,254,229,254,230,254,184,1,72,1,
26,1,27,1,72,164,254,91,254,158,254,159,254,91,1,164,
1,98,1,98,1,165,0,2,0,201,0,0,4,141,5,213,
0,8,0,19,0,58,64,24,1,149,16,0,149,9,129,18,
16,10,8,2,4,0,5,25,13,63,17,0,28,9,4,20,
16,252,236,50,252,236,17,23,57,49,0,47,244,236,212,236,
48,64,11,15,21,31,21,63,21,95,21,175,21,5,1,93,
1,17,51,50,54,53,52,38,35,37,33,50,4,21,20,4,
43,1,17,35,1,147,254,141,154,154,141,254,56,1,200,251,
1,1,254,255,251,254,202,5,47,253,207,146,135,134,146,166,
227,219,221,226,253,168,0,2,0,115,254,248,5,217,5,240,
0,11,0,29,0,82,64,42,17,16,2,15,1,12,13,12,
14,1,13,13,12,66,15,30,12,6,149,18,0,149,24,145,
18,140,13,30,13,27,15,12,3,9,25,27,51,3,25,21,
16,30,16,252,236,252,236,17,57,57,17,57,49,0,16,196,
228,244,236,16,238,57,18,57,48,75,83,88,7,16,5,237,
7,16,5,237,23,57,89,34,1,34,0,17,16,0,51,50,
0,17,16,0,19,1,35,39,6,6,35,32,0,17,16,0,
33,32,0,17,16,2,3,39,220,254,253,1,3,220,220,1,
1,254,255,63,1,10,244,221,33,35,16,254,197,254,135,1,
121,1,59,1,58,1,120,209,5,76,254,184,254,229,254,230,
254,184,1,72,1,26,1,27,1,72,250,207,254,221,239,2,
2,1,165,1,97,1,98,1,165,254,91,254,158,254,252,254,
142,0,0,2,0,201,0,0,5,84,5,213,0,19,0,28,
0,177,64,53,9,8,7,3,10,6,17,3,4,3,5,17,
4,4,3,66,6,4,0,21,3,4,21,149,9,20,149,13,
129,11,4,5,6,3,17,9,0,28,22,14,5,10,25,25,
4,17,63,20,10,28,12,4,29,16,252,236,50,252,196,236,
17,23,57,17,57,57,57,49,0,47,60,244,236,212,236,18,
57,18,57,18,57,48,75,83,88,7,16,5,237,7,16,5,
237,17,23,57,89,34,178,64,30,1,1,93,64,66,122,19,
1,5,0,5,1,5,2,6,3,7,4,21,0,21,1,20,
2,22,3,23,4,37,0,37,1,37,2,38,3,39,6,38,
7,38,8,38,9,32,30,54,1,54,2,70,1,70,2,104,
5,117,4,117,5,119,19,136,6,136,7,152,6,152,7,31,
93,0,93,1,30,1,23,19,35,3,46,1,43,1,17,35,
17,33,32,22,21,20,6,1,17,51,50,54,53,52,38,35,
3,141,65,123,62,205,217,191,74,139,120,220,202,1,200,1,
0,252,131,253,137,254,146,149,149,146,2,188,22,144,126,254,
104,1,127,150,98,253,137,5,213,214,216,141,186,2,79,253,
238,135,131,131,133,0,0,1,0,135,255,227,4,162,5,240,
0,39,0,126,64,60,13,12,2,14,11,2,30,31,30,8,
9,2,7,10,2,31,31,30,66,10,11,30,31,4,21,1,
0,21,161,20,148,24,149,17,4,149,0,148,37,145,17,140,
40,30,10,11,31,27,7,0,34,27,25,14,45,7,25,20,
34,40,16,220,196,236,252,236,228,17,18,57,57,57,57,49,
0,16,228,244,228,236,16,238,246,238,16,198,17,23,57,48,
75,83,88,7,16,14,237,17,23,57,7,16,14,237,17,23,
57,89,34,178,15,41,1,1,93,182,31,41,47,41,79,41,
3,93,1,21,46,1,35,34,6,21,20,22,31,1,30,1,
21,20,4,33,34,38,39,53,30,1,51,50,54,53,52,38,
47,1,46,1,53,52,36,51,50,22,4,72,115,204,95,165,
179,119,166,122,226,215,254,221,254,231,106,239,128,123,236,114,
173,188,135,154,123,226,202,1,23,245,105,218,5,164,197,55,
54,128,118,99,101,31,25,43,217,182,217,224,48,47,208,69,
70,136,126,110,124,31,24,45,192,171,198,228,38,0,0,1,
255,250,0,0,4,233,5,213,0,7,0,74,64,14,6,2,
149,0,129,4,1,64,3,28,0,64,5,8,16,212,228,252,
228,49,0,47,244,236,50,48,1,75,176,10,84,88,189,0,
8,0,64,0,1,0,8,0,8,255,192,56,17,55,56,89,
64,19,0,9,31,0,16,1,16,2,31,7,16,9,64,9,
112,9,159,9,9,93,3,33,21,33,17,35,17,33,6,4,
239,253,238,203,253,238,5,213,170,250,213,5,43,0,0,1,
0,178,255,227,5,41,5,213,0,17,0,75,64,22,8,2,
17,11,0,5,149,14,140,9,0,129,18,8,28,10,56,1,
28,0,65,18,16,252,236,252,236,49,0,16,228,50,244,236,
17,57,57,57,57,48,1,75,176,16,84,88,189,0,18,0,
64,0,1,0,18,0,18,255,192,56,17,55,56,89,182,31,
19,143,19,159,19,3,93,19,51,17,20,22,51,50,54,53,
17,51,17,16,0,33,32,0,17,178,203,174,195,194,174,203,
254,223,254,230,254,229,254,223,5,213,252,117,240,211,211,240,
3,139,252,92,254,220,254,214,1,42,1,36,0,1,0,16,
0,0,5,104,5,213,0,6,0,183,64,39,4,17,5,6,
5,3,17,2,3,6,6,5,3,17,4,3,0,1,0,2,
17,1,1,0,66,3,4,1,175,0,6,4,3,2,0,5,
5,1,7,16,212,196,23,57,49,0,47,236,50,57,48,75,
83,88,7,16,5,237,7,16,8,237,7,16,8,237,7,16,
5,237,89,34,178,80,8,1,1,93,64,98,0,3,42,3,
71,4,71,5,90,3,125,3,131,3,7,6,0,7,2,8,
4,9,6,21,1,20,2,26,4,26,5,42,0,38,1,38,
2,41,4,41,5,37,6,32,8,56,0,51,1,51,2,60,
4,60,5,55,6,72,0,69,1,69,2,73,4,73,5,71,
6,89,0,86,6,102,2,105,4,105,5,122,0,118,1,118,
2,121,4,121,5,117,6,128,8,152,0,151,6,41,93,0,
93,33,1,51,9,1,51,1,2,74,253,198,211,1,217,1,
218,210,253,199,5,213,251,23,4,233,250,43,0,1,0,68,
0,0,7,166,5,213,0,12,1,123,64,73,5,26,6,5,
9,10,9,4,26,10,9,3,26,10,11,10,2,26,1,2,
11,11,10,6,17,7,8,7,5,17,4,5,8,8,7,2,
17,3,2,12,0,12,1,17,0,0,12,66,10,5,2,3,
6,3,0,175,11,8,12,11,10,9,8,6,5,4,3,2,
1,11,7,0,13,16,212,204,23,57,49,0,47,60,236,50,
50,23,57,48,75,83,88,7,16,5,237,7,16,8,237,7,
16,8,237,7,16,5,237,7,16,8,237,7,16,5,237,7,
5,237,7,16,8,237,89,34,178,0,14,1,1,93,64,242,
6,2,6,5,2,10,0,10,0,10,18,10,40,5,36,10,
32,10,62,2,62,5,52,10,48,10,76,2,77,5,66,10,
64,10,89,2,106,2,107,5,103,10,96,10,123,2,127,2,
124,5,127,5,128,10,150,2,149,5,29,7,0,9,2,8,
3,0,4,6,5,0,5,0,6,1,7,4,8,0,8,7,
9,0,9,4,10,10,12,0,14,26,3,21,4,21,8,25,
12,16,14,32,4,33,5,32,6,32,7,32,8,35,9,36,
10,37,11,32,14,32,14,60,2,58,3,53,4,51,5,48,
8,54,9,57,11,63,12,48,14,70,0,70,1,74,2,64,
4,69,5,64,5,66,6,66,7,66,8,64,8,64,9,68,
10,77,12,64,14,64,14,88,2,86,8,89,12,80,14,102,
2,103,3,97,4,98,5,96,6,96,7,96,8,100,9,100,
10,100,11,119,0,118,1,123,2,120,3,119,4,116,5,121,
6,121,7,119,8,112,8,120,12,127,12,127,14,134,2,135,
3,136,4,137,5,133,9,138,11,143,14,151,4,159,14,175,
14,91,93,0,93,19,51,9,1,51,9,1,51,1,35,9,
1,35,68,204,1,58,1,57,227,1,58,1,57,205,254,137,
254,254,197,254,194,254,5,213,251,18,4,238,251,18,4,238,
250,43,5,16,250,240,0,1,0,61,0,0,5,59,5,213,
0,11,1,93,64,70,9,17,10,11,10,8,17,7,8,11,
11,10,8,17,9,8,5,6,5,7,17,6,6,5,3,17,
4,5,4,2,17,1,2,5,5,4,2,17,3,2,11,0,
11,1,17,0,0,11,66,11,8,5,2,4,3,0,175,9,
6,11,8,5,2,4,0,4,6,0,10,12,16,212,196,220,
196,17,23,57,49,0,47,60,236,50,23,57,48,75,83,88,
7,16,5,237,7,16,8,237,7,16,8,237,7,16,5,237,
7,16,5,237,7,16,8,237,7,16,8,237,7,16,5,237,
89,34,1,75,176,12,84,75,176,13,84,91,75,176,14,84,
91,88,189,0,12,255,192,0,1,0,12,0,12,0,64,56,
17,55,56,89,64,184,7,2,8,8,22,2,25,8,23,11,
39,8,39,11,52,2,56,8,54,11,75,8,88,5,91,8,
102,2,107,8,119,2,119,11,134,2,128,2,135,5,139,8,
133,11,148,2,144,2,151,5,157,8,150,11,27,6,1,9,
3,8,7,7,9,22,1,25,3,25,7,23,9,16,13,38,
1,40,2,41,3,38,5,40,7,39,9,41,11,32,13,53,
0,52,1,60,3,59,4,58,6,59,7,52,9,52,10,56,
11,63,13,72,9,79,13,88,11,95,13,101,0,101,1,106,
3,106,4,104,5,105,6,105,7,108,9,108,10,120,3,121,
6,121,7,120,8,125,9,127,10,120,11,128,0,128,1,131,
2,136,3,133,5,132,8,131,11,143,13,144,0,144,1,148,
2,151,5,151,6,149,8,147,11,159,13,175,13,64,93,0,
93,19,51,9,1,51,9,1,35,9,1,35,1,129,217,1,
115,1,117,217,254,32,2,0,217,254,92,254,89,218,2,21,
5,213,253,213,2,43,253,51,252,248,2,123,253,133,3,29,
0,1,255,252,0,0,4,231,5,213,0,8,0,148,64,40,
3,17,4,5,4,2,17,1,2,5,5,4,2,17,3,2,
8,0,8,1,17,0,0,8,66,2,3,0,175,6,2,7,
4,64,5,28,0,64,7,9,16,212,228,252,228,18,57,49,
0,47,236,50,57,48,75,83,88,7,16,5,237,7,16,8,
237,7,16,8,237,7,16,5,237,89,34,178,0,10,1,1,
93,64,60,5,2,20,2,53,2,48,2,48,5,48,8,70,
2,64,2,64,5,64,8,81,2,81,5,81,8,101,2,132,
2,147,2,16,22,1,26,3,31,10,38,1,41,3,55,1,
56,3,64,10,103,1,104,3,120,3,112,10,159,10,13,93,
0,93,3,51,9,1,51,1,17,35,17,4,217,1,158,1,
155,217,253,240,203,5,213,253,154,2,102,252,242,253,57,2,
199,0,0,1,0,92,0,0,5,31,5,213,0,9,0,155,
64,27,3,17,7,8,7,8,17,2,3,2,66,8,149,0,
129,3,149,5,8,3,0,1,66,4,0,6,10,16,220,196,
212,228,17,57,57,49,0,47,236,244,236,48,75,83,88,7,
16,5,237,7,16,5,237,89,34,1,75,176,9,84,75,176,
10,84,91,88,189,0,10,0,64,0,1,0,10,0,10,255,
192,56,17,55,56,89,64,64,5,2,10,7,24,7,41,2,
38,7,56,7,72,2,71,7,72,8,9,5,3,11,8,0,
11,22,3,26,8,16,11,47,11,53,3,57,8,63,11,71,
3,74,8,79,11,85,3,89,8,102,3,105,8,111,11,119,
3,120,8,127,11,159,11,22,93,0,93,19,33,21,1,33,
21,33,53,1,33,115,4,149,252,80,3,199,251,61,3,176,
252,103,5,213,154,251,111,170,154,4,145,0,0,1,0,176,
254,242,2,88,6,20,0,7,0,83,64,15,4,169,6,178,
2,169,0,177,8,5,1,3,67,0,8,16,220,252,204,50,
49,0,16,252,236,244,236,48,1,75,176,12,84,88,189,0,
8,255,192,0,1,0,8,0,8,0,64,56,17,55,56,89,
1,75,176,18,84,75,176,19,84,91,88,189,0,8,0,64,
0,1,0,8,0,8,255,192,56,17,55,56,89,19,33,21,
35,17,51,21,33,176,1,168,240,240,254,88,6,20,143,249,
252,143,0,1,0,0,255,66,2,178,5,213,0,3,0,45,
64,20,2,26,1,1,0,0,26,3,3,2,66,1,159,0,
129,4,2,0,1,3,47,196,57,57,49,0,16,244,236,48,
75,83,88,7,16,5,237,7,16,5,237,89,34,19,1,35,
1,170,2,8,170,253,248,5,213,249,109,6,147,0,0,1,
0,199,254,242,2,111,6,20,0,7,0,60,64,16,3,169,
1,178,5,169,0,177,8,0,67,4,6,2,4,8,16,252,
60,220,236,49,0,16,252,236,244,236,48,1,75,176,15,84,
75,176,16,84,91,88,189,0,8,255,192,0,1,0,8,0,
8,0,64,56,17,55,56,89,1,17,33,53,51,17,35,53,
2,111,254,88,239,239,6,20,248,222,143,6,4,143,0,1,
0,217,3,168,5,219,5,213,0,6,0,24,64,10,3,4,
1,0,129,7,3,1,5,7,16,220,204,57,49,0,16,244,
204,50,57,48,1,1,35,1,1,35,1,3,188,2,31,201,
254,72,254,72,201,2,31,5,213,253,211,1,139,254,117,2,
45,0,0,1,255,236,254,29,4,20,254,172,0,3,0,15,
181,0,169,1,0,2,4,16,196,196,49,0,212,236,48,1,
21,33,53,4,20,251,216,254,172,143,143,0,0,1,0,170,
4,240,2,137,6,102,0,3,0,49,64,9,1,180,0,179,
4,3,68,1,4,16,220,236,49,0,16,244,236,48,0,75,
176,9,84,75,176,14,84,91,88,189,0,4,255,192,0,1,
0,4,0,4,0,64,56,17,55,56,89,9,1,35,1,1,
111,1,26,153,254,186,6,102,254,138,1,118,0,2,0,123,
255,227,4,45,4,123,0,10,0,37,0,188,64,39,25,31,
11,23,9,14,0,169,23,6,185,14,17,32,134,31,186,28,
185,35,184,17,140,23,12,0,23,3,24,13,9,8,11,31,
3,8,20,69,38,16,252,236,204,212,236,50,50,17,57,57,
49,0,47,196,228,244,252,244,236,16,198,238,16,238,17,57,
17,57,18,57,48,64,110,48,29,48,30,48,31,48,32,48,
33,48,34,63,39,64,29,64,30,64,31,64,32,64,33,64,
34,80,29,80,30,80,31,80,32,80,33,80,34,80,39,112,
39,133,29,135,30,135,31,135,32,135,33,133,34,144,39,160,
39,240,39,30,48,30,48,31,48,32,48,33,64,30,64,31,
64,32,64,33,80,30,80,31,80,32,80,33,96,30,96,31,
96,32,96,33,112,30,112,31,112,32,112,33,128,30,128,31,
128,32,128,33,24,93,1,93,1,34,6,21,20,22,51,50,
54,61,1,55,17,35,53,14,1,35,34,38,53,52,54,51,
33,53,52,38,35,34,6,7,53,62,1,51,50,22,2,190,
223,172,129,111,153,185,184,184,63,188,136,172,203,253,251,1,
2,167,151,96,182,84,101,190,90,243,240,2,51,102,123,98,
115,217,180,41,76,253,129,170,102,97,193,162,189,192,18,127,
139,46,46,170,39,39,252,0,0,2,0,186,255,227,4,164,
6,20,0,11,0,28,0,56,64,25,3,185,12,15,9,185,
24,21,140,15,184,27,151,25,0,18,18,71,24,12,6,8,
26,70,29,16,252,236,50,50,244,236,49,0,47,236,228,244,
196,236,16,198,238,48,182,96,30,128,30,160,30,3,1,93,
1,52,38,35,34,6,21,20,22,51,50,54,1,62,1,51,
50,18,17,16,2,35,34,38,39,21,35,17,51,3,229,167,
146,146,167,167,146,146,167,253,142,58,177,123,204,255,255,204,
123,177,58,185,185,2,47,203,231,231,203,203,231,231,2,82,
100,97,254,188,254,248,254,248,254,188,97,100,168,6,20,0,
0,1,0,113,255,227,3,231,4,123,0,25,0,63,64,27,
0,134,1,136,4,14,134,13,136,10,185,17,4,185,23,184,
17,140,26,7,18,13,0,72,20,69,26,16,252,228,50,236,
49,0,16,228,244,236,16,254,244,238,16,245,238,48,64,11,
15,27,16,27,128,27,144,27,160,27,5,1,93,1,21,46,
1,35,34,6,21,20,22,51,50,54,55,21,14,1,35,34,
0,17,16,0,33,50,22,3,231,78,157,80,179,198,198,179,
80,157,78,77,165,93,253,254,214,1,45,1,6,85,162,4,
53,172,43,43,227,205,205,227,43,43,170,36,36,1,62,1,
14,1,18,1,58,35,0,2,0,113,255,227,4,90,6,20,
0,16,0,28,0,56,64,25,26,185,0,14,20,185,5,8,
140,14,184,1,151,3,23,4,0,8,2,71,17,18,11,69,
29,16,252,236,244,236,50,50,49,0,47,236,228,244,196,236,
16,196,238,48,182,96,30,128,30,160,30,3,1,93,1,17,
51,17,35,53,14,1,35,34,2,17,16,18,51,50,22,1,
20,22,51,50,54,53,52,38,35,34,6,3,162,184,184,58,
177,124,203,255,255,203,124,177,253,199,167,146,146,168,168,146,
146,167,3,182,2,94,249,236,168,100,97,1,68,1,8,1,
8,1,68,97,254,21,203,231,231,203,203,231,231,0,0,2,
0,113,255,227,4,127,4,123,0,20,0,27,0,112,64,36,
0,21,1,9,134,8,136,5,21,169,1,5,185,12,1,187,
24,185,18,184,12,140,28,27,21,2,8,21,8,0,75,2,
18,15,69,28,16,252,236,244,236,196,17,18,57,49,0,16,
228,244,236,228,16,238,16,238,16,244,238,17,18,57,48,64,
41,63,29,112,29,160,29,208,29,240,29,5,63,0,63,1,
63,2,63,21,63,27,5,44,7,47,8,47,9,44,10,111,
0,111,1,111,2,111,21,111,27,9,93,113,1,93,1,21,
33,30,1,51,50,54,55,21,14,1,35,32,0,17,16,0,
51,50,0,7,46,1,35,34,6,7,4,127,252,178,12,205,
183,106,199,98,99,208,107,254,244,254,199,1,41,252,226,1,
7,184,2,165,136,154,185,14,2,94,90,190,199,52,52,174,
42,44,1,56,1,10,1,19,1,67,254,221,196,151,180,174,
158,0,0,1,0,47,0,0,2,248,6,20,0,19,0,112,
64,28,5,16,1,12,8,169,6,1,135,0,151,14,6,188,
10,2,19,7,0,7,9,5,8,13,15,11,76,20,16,252,
60,196,252,60,196,196,18,57,57,49,0,47,228,50,252,236,
16,238,50,18,57,57,48,1,75,176,10,84,88,189,0,20,
255,192,0,1,0,20,0,20,0,64,56,17,55,56,89,1,
75,176,14,84,88,189,0,20,0,64,0,1,0,20,0,20,
255,192,56,17,55,56,89,182,64,21,80,21,160,21,3,93,
1,21,35,34,6,29,1,33,21,33,17,35,17,35,53,51,
53,52,54,51,2,248,176,99,77,1,47,254,209,185,176,176,
174,189,6,20,153,80,104,99,143,252,47,3,209,143,78,187,
171,0,0,2,0,113,254,86,4,90,4,123,0,11,0,40,
0,74,64,35,25,12,29,9,18,134,19,22,185,15,3,185,
38,35,184,39,188,9,185,15,189,26,29,38,25,0,8,12,
71,6,18,18,32,69,41,16,252,196,236,244,236,50,50,49,
0,47,196,228,236,228,244,196,236,16,254,213,238,17,18,57,
57,48,182,96,42,128,42,160,42,3,1,93,1,52,38,35,
34,6,21,20,22,51,50,54,23,16,2,33,34,38,39,53,
30,1,51,50,54,61,1,14,1,35,34,2,17,16,18,51,
50,22,23,53,51,3,162,165,149,148,165,165,148,149,165,184,
254,254,250,97,172,81,81,158,82,181,180,57,178,124,206,252,
252,206,124,178,57,184,2,61,200,220,220,200,199,220,220,235,
254,226,254,233,29,30,179,44,42,189,191,91,99,98,1,58,
1,3,1,4,1,58,98,99,170,0,0,1,0,186,0,0,
4,100,6,20,0,19,0,52,64,25,3,9,0,3,14,1,
6,135,14,17,184,12,151,10,1,2,8,0,78,13,9,8,
11,70,20,16,252,236,50,244,236,49,0,47,60,236,244,196,
236,17,18,23,57,48,178,96,21,1,1,93,1,17,35,17,
52,38,35,34,6,21,17,35,17,51,17,62,1,51,50,22,
4,100,184,124,124,149,172,185,185,66,179,117,193,198,2,164,
253,92,2,158,159,158,190,164,253,135,6,20,253,158,101,100,
239,0,0,2,0,193,0,0,1,121,6,20,0,3,0,7,
0,43,64,14,6,190,4,177,0,188,2,5,1,8,4,0,
70,8,16,252,60,236,50,49,0,47,228,252,236,48,64,11,
16,9,64,9,80,9,96,9,112,9,5,1,93,19,51,17,
35,17,51,21,35,193,184,184,184,184,4,96,251,160,6,20,
233,0,0,2,255,219,254,86,1,121,6,20,0,11,0,15,
0,68,64,28,11,2,7,0,14,190,12,7,135,5,189,0,
188,12,177,16,8,16,5,6,79,13,1,8,12,0,70,16,
16,252,60,236,50,228,57,18,57,49,0,16,236,228,244,236,
16,238,17,18,57,57,48,64,11,16,17,64,17,80,17,96,
17,112,17,5,1,93,19,51,17,20,6,43,1,53,51,50,
54,53,17,51,21,35,193,184,163,181,70,49,105,76,184,184,
4,96,251,140,214,192,156,97,153,6,40,233,0,1,0,186,
0,0,4,156,6,20,0,10,0,188,64,41,8,17,5,6,
5,7,17,6,6,5,3,17,4,5,4,2,17,5,5,4,
66,8,5,2,3,3,188,0,151,9,6,5,1,4,6,8,
1,8,0,70,11,16,252,236,50,212,196,17,57,49,0,47,
60,236,228,23,57,48,75,83,88,7,16,4,237,7,16,5,
237,7,16,5,237,7,16,4,237,89,34,178,16,12,1,1,
93,64,95,4,2,10,8,22,2,39,2,41,5,43,8,86,
2,102,2,103,8,115,2,119,5,130,2,137,5,142,8,147,
2,150,5,151,8,163,2,18,9,5,9,6,2,11,3,10,
7,40,3,39,4,40,5,43,6,43,7,64,12,104,3,96,
12,137,3,133,4,137,5,141,6,143,7,154,3,151,7,170,
3,167,5,182,7,197,7,214,7,247,3,240,3,247,4,240,
4,26,93,113,0,93,19,51,17,1,51,9,1,35,1,17,
35,186,185,2,37,235,253,174,2,107,240,253,199,185,6,20,
252,105,1,227,253,244,253,172,2,35,253,221,0,1,0,193,
0,0,1,121,6,20,0,3,0,34,183,0,151,2,1,8,
0,70,4,16,252,236,49,0,47,236,48,64,13,16,5,64,
5,80,5,96,5,112,5,240,5,6,1,93,19,51,17,35,
193,184,184,6,20,249,236,0,0,1,0,186,0,0,7,29,
4,123,0,34,0,90,64,38,6,18,9,24,15,0,6,29,
7,21,12,135,29,32,3,184,27,188,25,16,7,0,17,15,
8,8,6,80,17,8,15,80,28,24,8,26,70,35,16,252,
236,50,252,252,252,236,17,18,57,49,0,47,60,60,228,244,
60,196,236,50,17,18,23,57,48,64,19,48,36,80,36,112,
36,144,36,160,36,160,36,191,36,223,36,255,36,9,1,93,
1,62,1,51,50,22,21,17,35,17,52,38,35,34,6,21,
17,35,17,52,38,35,34,6,21,17,35,17,51,21,62,1,
51,50,22,4,41,69,192,130,175,190,185,114,117,143,166,185,
114,119,141,166,185,185,63,176,121,122,171,3,137,124,118,245,
226,253,92,2,158,161,156,190,164,253,135,2,158,162,155,191,
163,253,135,4,96,174,103,98,124,0,0,1,0,186,0,0,
4,100,4,123,0,19,0,54,64,25,3,9,0,3,14,1,
6,135,14,17,184,12,188,10,1,2,8,0,78,13,9,8,
11,70,20,16,252,236,50,244,236,49,0,47,60,228,244,196,
236,17,18,23,57,48,180,96,21,207,21,2,1,93,1,17,
35,17,52,38,35,34,6,21,17,35,17,51,21,62,1,51,
50,22,4,100,184,124,124,149,172,185,185,66,179,117,193,198,
2,164,253,92,2,158,159,158,190,164,253,135,4,96,174,101,
100,239,0,2,0,113,255,227,4,117,4,123,0,11,0,23,
0,74,64,19,6,185,18,0,185,12,184,18,140,24,9,18,
15,81,3,18,21,69,24,16,252,236,244,236,49,0,16,228,
244,236,16,238,48,64,35,63,25,123,0,123,6,127,7,127,
8,127,9,127,10,127,11,123,12,127,13,127,14,127,15,127,
16,127,17,123,18,160,25,240,25,17,1,93,1,34,6,21,
20,22,51,50,54,53,52,38,39,50,0,17,16,0,35,34,
0,17,16,0,2,115,148,172,171,149,147,172,172,147,240,1,
18,254,238,240,241,254,239,1,17,3,223,231,201,201,231,232,
200,199,233,156,254,200,254,236,254,237,254,199,1,57,1,19,
1,20,1,56,0,2,0,186,254,86,4,164,4,123,0,16,
0,28,0,62,64,27,26,185,0,14,20,185,5,8,184,14,
140,1,189,3,188,29,17,18,11,71,23,4,0,8,2,70,
29,16,252,236,50,50,244,236,49,0,16,228,228,228,244,196,
236,16,196,238,48,64,9,96,30,128,30,160,30,224,30,4,
1,93,37,17,35,17,51,21,62,1,51,50,18,17,16,2,
35,34,38,1,52,38,35,34,6,21,20,22,51,50,54,1,
115,185,185,58,177,123,204,255,255,204,123,177,2,56,167,146,
146,167,167,146,146,167,168,253,174,6,10,170,100,97,254,188,
254,248,254,248,254,188,97,1,235,203,231,231,203,203,231,231,
0,2,0,113,254,86,4,90,4,123,0,11,0,28,0,62,
64,27,3,185,12,15,9,185,24,21,184,15,140,27,189,25,
188,29,24,12,6,8,26,71,0,18,18,69,29,16,252,236,
244,236,50,50,49,0,16,228,228,228,244,196,236,16,198,238,
48,64,9,96,30,128,30,160,30,224,30,4,1,93,1,20,
22,51,50,54,53,52,38,35,34,6,1,14,1,35,34,2,
17,16,18,51,50,22,23,53,51,17,35,1,47,167,146,146,
168,168,146,146,167,2,115,58,177,124,203,255,255,203,124,177,
58,184,184,2,47,203,231,231,203,203,231,231,253,174,100,97,
1,68,1,8,1,8,1,68,97,100,170,249,246,0,0,1,
0,186,0,0,3,74,4,123,0,17,0,48,64,20,6,11,
7,0,17,11,3,135,14,184,9,188,7,10,6,8,0,8,
70,18,16,252,196,236,50,49,0,47,228,244,236,196,212,204,
17,18,57,48,180,80,19,159,19,2,1,93,1,46,1,35,
34,6,21,17,35,17,51,21,62,1,51,50,22,23,3,74,
31,73,44,156,167,185,185,58,186,133,19,46,28,3,180,18,
17,203,190,253,178,4,96,174,102,99,5,5,0,1,0,111,
255,227,3,199,4,123,0,39,0,231,64,60,13,12,2,14,
11,83,31,30,8,9,2,7,10,83,30,31,30,66,10,11,
30,31,4,21,0,134,1,137,4,20,134,21,137,24,185,17,
4,185,37,184,17,140,40,30,10,11,31,27,7,0,82,27,
8,14,7,8,20,34,69,40,16,252,196,236,212,236,228,17,
18,57,57,57,57,49,0,16,228,244,236,16,254,245,238,16,
245,238,18,23,57,48,75,83,88,7,16,14,237,17,23,57,
7,14,237,17,23,57,89,34,178,0,39,1,1,93,64,109,
28,10,28,11,28,12,46,9,44,10,44,11,44,12,59,9,
59,10,59,11,59,12,11,32,0,32,1,36,2,40,10,40,
11,42,19,47,20,47,21,42,22,40,30,40,31,41,32,41,
33,36,39,134,10,134,11,134,12,134,13,18,0,0,0,1,
2,2,6,10,6,11,3,12,3,13,3,14,3,15,3,16,
3,25,3,26,3,27,3,28,4,29,9,39,47,41,63,41,
95,41,127,41,128,41,144,41,160,41,240,41,24,93,0,93,
113,1,21,46,1,35,34,6,21,20,22,31,1,30,1,21,
20,6,35,34,38,39,53,30,1,51,50,54,53,52,38,47,
1,46,1,53,52,54,51,50,22,3,139,78,168,90,137,137,
98,148,63,196,165,247,216,90,195,108,102,198,97,130,140,101,
171,64,171,152,224,206,102,180,4,63,174,40,40,84,84,64,
73,33,14,42,153,137,156,182,35,35,190,53,53,89,81,75,
80,37,15,36,149,130,158,172,30,0,0,1,0,55,0,0,
2,242,5,158,0,19,0,56,64,25,14,5,8,15,3,169,
0,17,1,188,8,135,10,11,8,9,2,4,0,8,16,18,
14,70,20,16,252,60,196,252,60,196,50,57,57,49,0,47,
236,244,60,196,236,50,17,57,57,48,178,175,21,1,1,93,
1,17,33,21,33,17,20,22,59,1,21,35,34,38,53,17,
35,53,51,17,1,119,1,123,254,133,75,115,189,189,213,162,
135,135,5,158,254,194,143,253,160,137,78,154,159,210,2,96,
143,1,62,0,0,1,0,174,255,227,4,88,4,96,0,19,
0,54,64,25,3,9,0,3,14,1,6,135,14,17,140,10,
1,188,12,13,9,8,11,78,2,8,0,70,20,16,252,236,
244,236,50,49,0,47,228,50,244,196,236,17,18,23,57,48,
180,96,21,207,21,2,1,93,19,17,51,17,20,22,51,50,
54,53,17,51,17,35,53,14,1,35,34,38,174,184,124,124,
149,173,184,184,67,177,117,193,200,1,186,2,166,253,97,159,
159,190,164,2,123,251,160,172,102,99,240,0,0,1,0,61,
0,0,4,127,4,96,0,6,1,18,64,39,3,17,4,5,
4,2,17,1,2,5,5,4,2,17,3,2,6,0,6,1,
17,0,0,6,66,2,3,0,191,5,6,5,3,2,1,5,
4,0,7,16,212,196,23,57,49,0,47,236,50,57,48,75,
83,88,7,16,5,237,7,16,8,237,7,16,8,237,7,16,
5,237,89,34,1,75,176,10,84,88,189,0,7,255,192,0,
1,0,7,0,7,0,64,56,17,55,56,89,1,75,176,20,
84,75,176,21,84,91,88,189,0,7,0,64,0,1,0,7,
0,7,255,192,56,17,55,56,89,64,142,72,2,106,2,123,
2,127,2,134,2,128,2,145,2,164,2,8,6,0,6,1,
9,3,9,4,21,0,21,1,26,3,26,4,38,0,38,1,
41,3,41,4,32,8,53,0,53,1,58,3,58,4,48,8,
70,0,70,1,73,3,73,4,70,5,72,6,64,8,86,0,
86,1,89,3,89,4,80,8,102,0,102,1,105,3,105,4,
103,5,104,6,96,8,117,0,116,1,123,3,123,4,117,5,
122,6,133,0,133,1,137,3,137,4,137,5,134,6,150,0,
150,1,151,2,154,3,152,4,152,5,151,6,168,5,167,6,
176,8,192,8,223,8,255,8,62,93,0,93,19,51,9,1,
51,1,35,61,195,1,94,1,94,195,254,92,250,4,96,252,
84,3,172,251,160,0,0,1,0,86,0,0,6,53,4,96,
0,12,2,1,64,73,5,85,6,5,9,10,9,4,85,10,
9,3,85,10,11,10,2,85,1,2,11,11,10,6,17,7,
8,7,5,17,4,5,8,8,7,2,17,3,2,12,0,12,
1,17,0,0,12,66,10,5,2,3,6,3,0,191,11,8,
12,11,10,9,8,6,5,4,3,2,1,11,7,0,13,16,
212,204,23,57,49,0,47,60,236,50,50,23,57,48,75,83,
88,7,16,5,237,7,16,8,237,7,16,8,237,7,16,5,
237,7,16,8,237,7,16,5,237,7,5,237,7,16,8,237,
89,34,1,75,176,10,84,75,176,17,84,91,75,176,18,84,
91,75,176,19,84,91,75,176,11,84,91,88,189,0,13,255,
192,0,1,0,13,0,13,0,64,56,17,55,56,89,1,75,
176,12,84,75,176,13,84,91,75,176,16,84,91,88,189,0,
13,0,64,0,1,0,13,0,13,255,192,56,17,55,56,89,
64,255,5,2,22,2,22,5,34,10,53,10,73,2,73,5,
70,10,64,10,91,2,91,5,85,10,80,10,110,2,110,5,
102,10,121,2,127,2,121,5,127,5,135,2,153,2,152,5,
148,10,188,2,188,5,206,2,199,3,207,5,29,5,2,9,
3,6,4,11,5,10,8,11,9,4,11,5,12,21,2,25,
3,22,4,26,5,27,8,27,9,20,11,21,12,37,0,37,
1,35,2,39,3,33,4,37,5,34,6,34,7,37,8,39,
9,36,10,33,11,35,12,57,3,54,4,54,8,57,12,48,
14,70,2,72,3,70,4,64,4,66,5,64,6,64,7,64,
8,68,9,68,10,68,11,64,14,64,14,86,0,86,1,86,
2,80,4,81,5,82,6,82,7,80,8,83,9,84,10,85,
11,99,0,100,1,101,2,106,3,101,4,106,5,106,6,106,
7,110,9,97,11,103,12,111,14,117,0,117,1,121,2,125,
3,120,4,125,5,122,6,127,6,122,7,127,7,120,8,121,
9,127,9,123,10,118,11,125,12,135,2,136,5,143,14,151,
0,151,1,148,2,147,3,156,4,155,5,152,6,152,7,153,
8,64,47,150,12,159,14,166,0,166,1,164,2,164,3,171,
4,171,5,169,6,169,7,171,8,164,12,175,14,181,2,177,
3,189,4,187,5,184,9,191,14,196,2,195,3,204,4,202,
5,121,93,0,93,19,51,27,1,51,27,1,51,1,35,11,
1,35,86,184,230,229,217,230,229,184,254,219,217,241,242,217,
4,96,252,150,3,106,252,150,3,106,251,160,3,150,252,106,
0,1,0,59,0,0,4,121,4,96,0,11,1,90,64,70,
5,17,6,7,6,4,17,3,4,7,7,6,4,17,5,4,
1,2,1,3,17,2,2,1,11,17,0,1,0,10,17,9,
10,1,1,0,10,17,11,10,7,8,7,9,17,8,8,7,
66,10,7,4,1,4,8,0,191,5,2,10,7,4,1,4,
8,0,2,8,6,12,16,212,196,212,196,17,23,57,49,0,
47,60,236,50,23,57,48,75,83,88,7,16,5,237,7,16,
8,237,7,16,8,237,7,16,5,237,7,16,5,237,7,16,
8,237,7,16,8,237,7,16,5,237,89,34,1,75,176,10,
84,75,176,15,84,91,75,176,16,84,91,75,176,17,84,91,
88,189,0,12,255,192,0,1,0,12,0,12,0,64,56,17,
55,56,89,1,75,176,20,84,88,189,0,12,0,64,0,1,
0,12,0,12,255,192,56,17,55,56,89,64,152,10,4,4,
10,26,4,21,10,38,10,61,4,49,10,85,4,87,7,88,
10,102,10,118,1,122,4,118,7,116,10,141,4,130,10,153,
4,159,4,151,7,146,10,144,10,166,1,169,4,175,4,165,
7,163,10,160,10,28,10,3,4,5,5,9,10,11,26,3,
21,5,21,9,26,11,41,3,38,5,37,9,42,11,32,13,
58,1,57,3,55,5,52,7,54,9,57,11,48,13,73,3,
70,5,69,9,74,11,64,13,89,0,86,1,89,2,89,3,
87,5,86,6,89,7,86,8,86,9,89,11,80,13,111,13,
120,1,127,13,155,1,148,7,171,1,164,7,176,13,207,13,
223,13,255,13,47,93,0,93,9,2,35,9,1,35,9,1,
51,9,1,4,100,254,107,1,170,217,254,186,254,186,217,1,
179,254,114,217,1,41,1,41,4,96,253,223,253,193,1,184,
254,72,2,74,2,22,254,113,1,143,0,1,0,61,254,86,
4,127,4,96,0,15,1,162,64,67,7,8,2,9,17,0,
15,10,17,11,10,0,0,15,14,17,15,0,15,13,17,12,
13,0,0,15,13,17,14,13,10,11,10,12,17,11,11,10,
66,13,11,9,16,0,11,5,135,3,189,14,11,188,16,14,
13,12,10,9,6,3,0,8,15,4,15,11,16,16,212,196,
196,17,23,57,49,0,16,228,50,244,236,17,57,17,57,18,
57,48,75,83,88,7,16,5,237,7,16,8,237,7,16,8,
237,7,16,5,237,7,16,8,237,7,5,237,23,50,89,34,
1,75,176,10,84,75,176,8,84,91,88,189,0,16,255,192,
0,1,0,16,0,16,0,64,56,17,55,56,89,1,75,176,
20,84,88,189,0,16,0,64,0,1,0,16,0,16,255,192,
56,17,55,56,89,64,240,6,0,5,8,6,9,3,13,22,
10,23,13,16,13,35,13,53,13,73,10,79,10,78,13,90,
9,90,10,106,10,135,13,128,13,147,13,18,10,0,10,9,
6,11,5,12,11,14,11,15,23,1,21,2,16,4,16,5,
23,10,20,11,20,12,26,14,26,15,39,0,36,1,36,2,
32,4,32,5,41,8,40,9,37,10,36,11,36,12,39,13,
42,14,42,15,32,17,55,0,53,1,53,2,48,4,48,5,
56,10,54,11,54,12,56,13,57,14,57,15,48,17,65,0,
64,1,64,2,64,3,64,4,64,5,64,6,64,7,64,8,
66,9,69,10,71,13,73,14,73,15,64,17,84,0,81,1,
81,2,85,3,80,4,80,5,86,6,85,7,86,8,87,9,
87,10,85,11,85,12,89,14,89,15,80,17,102,1,102,2,
104,10,105,14,105,15,96,17,123,8,120,14,120,15,137,0,
138,9,133,11,133,12,137,13,137,14,137,15,153,9,149,11,
149,12,154,14,154,15,164,11,164,12,171,14,171,15,176,17,
207,17,223,17,255,17,101,93,0,93,5,14,1,43,1,53,
51,50,54,63,1,1,51,9,1,51,2,147,78,148,124,147,
108,76,84,51,33,254,59,195,1,94,1,94,195,104,200,122,
154,72,134,84,4,78,252,148,3,108,0,1,0,88,0,0,
3,219,4,96,0,9,0,180,64,26,8,17,2,3,2,3,
17,7,8,7,66,8,169,0,188,3,169,5,8,3,1,0,
4,1,6,10,16,220,196,50,196,17,57,57,49,0,47,236,
244,236,48,75,83,88,7,16,5,237,7,16,5,237,89,34,
1,75,176,11,84,75,176,12,84,91,88,189,0,10,0,64,
0,1,0,10,0,10,255,192,56,17,55,56,89,1,75,176,
19,84,88,189,0,10,255,192,0,1,0,10,0,10,0,64,
56,17,55,56,89,64,66,5,2,22,2,38,2,71,2,73,
7,5,11,8,15,11,24,3,27,8,43,8,32,11,54,3,
57,8,48,11,64,1,64,2,69,3,64,4,64,5,67,8,
87,3,89,8,95,11,96,1,96,2,102,3,96,4,96,5,
98,8,127,11,128,11,175,11,27,93,0,93,19,33,21,1,
33,21,33,53,1,33,113,3,106,253,76,2,180,252,125,2,
180,253,101,4,96,168,252,219,147,168,3,37,0,1,1,0,
254,178,4,23,6,20,0,36,0,130,64,52,25,15,21,11,
6,37,9,26,16,21,29,11,5,32,33,3,0,11,169,9,
0,169,1,192,9,21,169,19,177,37,12,9,10,5,36,22,
25,0,29,10,5,19,2,20,0,32,25,67,10,15,5,37,
16,212,60,196,252,60,196,50,57,57,17,18,57,17,18,57,
57,17,18,57,57,49,0,16,252,236,196,244,236,16,238,18,
23,57,18,57,17,57,57,17,18,57,17,18,57,57,48,1,
75,176,12,84,88,189,0,37,255,192,0,1,0,37,0,37,
0,64,56,17,55,56,89,178,0,38,1,93,5,21,35,34,
38,61,1,52,38,43,1,53,51,50,54,61,1,52,54,59,
1,21,35,34,6,29,1,20,6,7,30,1,29,1,20,22,
51,4,23,62,249,169,108,142,61,61,143,107,169,249,62,68,
141,86,91,110,111,90,86,141,190,144,148,221,239,151,116,143,
115,149,240,221,147,143,88,141,248,157,142,25,27,142,156,248,
141,88,0,1,1,4,254,29,1,174,6,29,0,3,0,18,
183,1,0,177,4,0,5,2,4,16,212,236,49,0,16,252,
204,48,1,17,35,17,1,174,170,6,29,248,0,8,0,0,
0,1,1,0,254,178,4,23,6,20,0,36,0,158,64,54,
31,37,27,22,12,15,8,27,11,21,25,15,4,5,32,3,
0,25,169,27,0,169,35,192,27,15,169,17,177,37,28,25,
26,21,15,1,4,0,8,26,21,35,18,4,0,26,31,21,
67,16,0,11,4,37,16,212,60,196,50,252,60,196,17,18,
57,57,17,18,57,17,18,57,57,17,18,57,57,49,0,16,
252,236,196,244,236,16,238,18,23,57,17,18,57,57,17,57,
17,57,57,17,18,57,48,1,75,176,10,84,88,189,0,37,
0,64,0,1,0,37,0,37,255,192,56,17,55,56,89,1,
75,176,14,84,88,189,0,37,255,192,0,1,0,37,0,37,
0,64,56,17,55,56,89,178,0,38,1,93,5,51,50,54,
61,1,52,54,55,46,1,61,1,52,38,43,1,53,51,50,
22,29,1,20,22,59,1,21,35,34,6,29,1,20,6,43,
1,1,0,70,140,85,90,111,111,90,85,140,70,63,249,167,
108,142,62,62,142,108,167,249,63,190,86,143,248,156,142,27,
25,142,157,248,142,87,143,147,221,240,149,115,143,116,151,239,
221,148,0,1,0,217,1,211,5,219,3,49,0,29,0,35,
64,16,1,16,27,12,0,19,4,156,27,19,156,12,30,0,
15,30,16,212,196,49,0,16,212,252,212,236,16,192,17,18,
57,57,48,1,21,6,6,35,34,39,38,39,38,39,38,35,
34,6,7,53,54,54,51,50,23,22,23,22,23,22,51,50,
54,5,219,105,179,97,110,146,11,5,7,15,155,94,88,172,
98,105,179,97,110,147,10,5,8,14,155,94,86,169,3,49,
178,79,68,59,4,2,3,5,62,77,83,178,79,69,60,4,
2,3,5,62,76,0,255,255,0,16,0,0,5,104,7,78,
2,39,0,36,0,0,0,0,0,7,1,3,0,188,1,117,
0,3,0,16,0,0,5,104,7,109,0,11,0,14,0,33,
0,203,64,84,12,17,13,12,27,28,27,14,17,28,27,30,
17,28,27,29,17,28,28,27,13,17,33,15,33,12,17,14,
12,15,15,33,32,17,15,33,31,17,33,15,33,66,12,27,
15,13,9,3,193,21,9,30,149,13,9,142,32,28,30,29,
28,24,32,31,33,13,18,6,14,24,12,6,27,0,86,24,
28,15,6,86,18,28,33,34,16,212,196,212,236,50,16,212,
238,50,17,57,17,57,17,18,57,17,57,57,17,18,57,57,
49,0,47,60,230,214,238,16,212,238,17,18,57,57,57,48,
75,83,88,7,16,5,237,7,5,237,7,16,8,237,7,16,
5,237,7,16,5,237,7,5,237,7,5,237,7,16,8,237,
89,34,178,32,35,1,1,93,64,32,26,12,115,12,155,12,
3,7,15,8,27,80,35,102,13,105,14,117,13,123,14,121,
28,121,29,118,32,118,33,128,35,12,93,0,93,1,52,38,
35,34,6,21,20,22,51,50,54,3,1,33,1,46,1,53,
52,54,51,50,22,21,20,6,7,1,35,3,33,3,35,3,
84,89,63,64,87,88,63,63,89,152,254,240,2,33,254,88,
61,62,159,115,114,161,63,60,2,20,210,136,253,95,136,213,
6,90,63,89,87,65,63,88,88,254,243,253,25,3,78,41,
115,73,115,160,161,114,70,118,41,250,139,1,127,254,129,0,
255,255,0,115,254,117,5,39,5,240,2,39,0,38,0,0,
0,0,0,7,0,221,1,45,0,0,255,255,0,201,0,0,
4,139,7,107,2,39,0,40,0,0,0,0,0,7,1,4,
0,158,1,117,255,255,0,201,0,0,5,51,7,94,2,39,
0,49,0,0,0,0,0,7,1,5,0,254,1,117,255,255,
0,115,255,227,5,217,7,78,2,39,0,50,0,0,0,0,
0,7,1,3,1,39,1,117,255,255,0,178,255,227,5,41,
7,78,2,39,0,56,0,0,0,0,0,7,1,3,0,238,
1,117,255,255,0,123,255,227,4,45,6,102,2,39,0,68,
0,0,0,0,0,7,0,141,0,82,0,0,255,255,0,123,
255,227,4,45,6,102,2,39,0,68,0,0,0,0,0,7,
0,67,0,82,0,0,255,255,0,123,255,227,4,45,6,102,
2,39,0,68,0,0,0,0,0,7,0,215,0,82,0,0,
255,255,0,123,255,227,4,45,6,16,2,39,0,68,0,0,
0,0,0,7,0,142,0,82,0,0,255,255,0,123,255,227,
4,45,6,55,2,39,0,68,0,0,0,0,0,7,0,216,
0,82,0,0,255,255,0,123,255,227,4,45,7,6,2,39,
0,68,0,0,0,0,0,7,0,220,0,82,0,0,255,255,
0,113,254,117,3,231,4,123,2,39,0,70,0,0,0,0,
0,7,0,221,0,143,0,0,255,255,0,113,255,227,4,127,
6,102,2,39,0,72,0,0,0,0,0,7,0,141,0,139,
0,0,255,255,0,113,255,227,4,127,6,102,2,39,0,72,
0,0,0,0,0,7,0,67,0,139,0,0,255,255,0,113,
255,227,4,127,6,102,2,39,0,72,0,0,0,0,0,7,
0,215,0,139,0,0,255,255,0,113,255,227,4,127,6,16,
2,39,0,72,0,0,0,0,0,7,0,142,0,139,0,0,
255,255,0,144,0,0,2,111,6,102,2,39,0,214,0,0,
0,0,0,7,0,141,255,29,0,0,255,255,255,199,0,0,
1,166,6,102,2,39,0,214,0,0,0,0,0,7,0,67,
255,29,0,0,255,255,255,222,0,0,2,92,6,102,2,39,
0,214,0,0,0,0,0,7,0,215,255,29,0,0,255,255,
255,244,0,0,2,70,6,16,2,39,0,214,0,0,0,0,
0,7,0,142,255,29,0,0,255,255,0,186,0,0,4,100,
6,55,2,39,0,81,0,0,0,0,0,7,0,216,0,152,
0,0,255,255,0,113,255,227,4,117,6,102,2,39,0,82,
0,0,0,0,0,7,0,141,0,115,0,0,255,255,0,113,
255,227,4,117,6,102,2,39,0,82,0,0,0,0,0,7,
0,67,0,115,0,0,255,255,0,113,255,227,4,117,6,102,
2,39,0,82,0,0,0,0,0,7,0,215,0,115,0,0,
255,255,0,113,255,227,4,117,6,16,2,39,0,82,0,0,
0,0,0,7,0,142,0,115,0,0,255,255,0,113,255,227,
4,117,6,55,2,39,0,82,0,0,0,0,0,7,0,216,
0,115,0,0,255,255,0,174,255,227,4,88,6,102,2,39,
0,88,0,0,0,0,0,7,0,141,0,123,0,0,255,255,
0,174,255,227,4,88,6,102,2,39,0,88,0,0,0,0,
0,7,0,67,0,123,0,0,255,255,0,174,255,227,4,88,
6,102,2,39,0,88,0,0,0,0,0,7,0,215,0,123,
0,0,255,255,0,174,255,227,4,88,6,16,2,39,0,88,
0,0,0,0,0,7,0,142,0,123,0,0,0,1,0,57,
255,59,3,199,5,213,0,11,0,39,64,20,8,4,185,10,
2,0,129,6,194,12,3,89,5,1,87,9,89,7,0,12,
16,212,60,236,252,60,236,49,0,16,228,244,212,60,236,50,
48,1,51,17,33,21,33,17,35,17,33,53,33,1,168,176,
1,111,254,145,176,254,145,1,111,5,213,254,92,153,251,163,
4,93,153,0,0,2,0,195,3,117,3,61,5,240,0,11,
0,26,0,32,64,17,6,195,21,196,0,195,12,145,27,9,
90,18,91,3,90,24,27,16,220,236,252,236,49,0,16,244,
236,252,236,48,1,34,6,21,20,22,51,50,54,53,52,38,
39,50,22,23,22,22,21,20,6,35,34,38,53,52,54,2,
0,80,110,110,80,80,110,111,79,64,118,43,46,46,185,134,
135,180,184,5,111,111,80,79,109,109,79,79,112,129,49,46,
45,114,66,132,183,180,135,134,186,0,0,2,0,172,254,199,
4,35,5,152,0,6,0,33,0,81,64,43,19,22,20,0,
15,12,1,11,7,134,8,136,11,16,134,15,136,12,185,20,
22,11,185,29,31,28,184,22,140,34,28,21,0,9,30,19,
11,15,7,4,18,25,34,16,220,236,212,60,212,60,60,236,
50,50,49,0,16,228,244,60,196,236,16,196,254,244,238,16,
245,238,18,57,17,18,57,17,18,57,48,37,17,6,6,21,
20,22,1,21,38,38,39,3,54,54,55,21,6,6,7,17,
35,17,38,0,17,16,0,55,17,51,19,22,22,2,166,147,
164,164,2,16,74,136,68,1,70,137,72,65,137,77,102,241,
254,247,1,9,241,102,1,73,137,131,3,88,18,226,184,185,
226,3,161,172,41,42,3,252,160,5,42,39,170,30,35,7,
254,228,1,32,20,1,51,1,1,1,2,1,50,22,1,31,
254,225,4,33,0,1,0,129,0,0,4,98,5,240,0,27,
0,96,64,33,7,22,8,1,134,0,18,10,169,20,8,12,
4,160,0,148,25,145,16,12,160,14,0,13,9,11,7,28,
19,15,21,17,28,16,220,60,204,204,252,60,196,212,196,49,
0,47,236,50,244,228,236,16,212,60,238,50,16,238,17,57,
57,48,1,75,176,12,84,88,189,0,28,255,192,0,1,0,
28,0,28,0,64,56,17,55,56,89,180,54,1,54,2,2,
0,93,1,21,46,1,35,34,6,29,1,33,21,33,17,33,
21,33,53,51,17,35,53,51,53,16,54,51,50,22,4,78,
76,136,61,148,116,1,135,254,121,2,45,252,31,236,199,199,
214,232,61,151,5,180,182,41,41,155,212,215,143,254,47,170,
170,1,209,143,238,1,5,243,31,0,0,2,0,92,255,61,
3,162,5,240,0,11,0,62,0,145,64,60,47,48,42,6,
0,23,29,48,54,4,13,39,138,38,13,138,12,42,198,38,
197,35,16,198,12,197,60,145,35,63,47,6,0,23,48,4,
19,29,45,9,54,3,19,87,57,45,87,32,9,87,12,34,
26,57,38,34,3,87,51,63,16,220,236,228,196,212,228,236,
212,236,16,238,17,57,17,18,57,17,23,57,57,49,0,16,
196,244,228,236,16,230,238,16,238,16,238,17,23,57,57,57,
17,18,57,48,1,75,176,10,84,75,176,11,84,91,75,176,
12,84,91,75,176,14,84,91,88,189,0,63,0,64,0,1,
0,63,0,63,255,192,56,17,55,56,89,1,14,1,21,20,
22,23,62,1,53,52,38,19,21,46,1,35,34,6,21,20,
23,22,23,30,1,21,20,6,7,30,1,21,20,6,35,34,
38,39,53,30,1,51,50,54,53,52,47,1,46,1,53,52,
54,55,46,1,53,52,54,51,50,22,1,123,63,62,139,250,
63,62,143,204,83,143,56,97,108,206,26,14,211,131,92,93,
62,57,204,173,73,154,88,87,148,58,102,113,221,25,214,128,
93,91,59,59,200,166,73,153,3,168,46,90,46,76,133,135,
45,91,46,75,136,2,147,164,39,39,80,71,90,115,15,8,
119,154,101,90,140,53,52,109,64,142,168,29,29,164,39,39,
84,76,102,123,14,120,153,102,91,143,49,44,112,69,130,159,
29,0,0,1,1,51,1,209,3,133,4,33,0,11,0,18,
183,9,199,3,12,6,92,0,12,16,212,236,49,0,16,212,
236,48,1,52,54,51,50,22,21,20,6,35,34,38,1,51,
173,126,124,171,172,125,125,172,2,250,124,171,171,124,125,172,
172,0,0,1,0,158,255,59,4,57,5,213,0,13,0,37,
64,18,8,2,4,193,0,129,6,2,14,0,7,93,5,3,
93,1,11,14,16,212,212,252,220,236,57,49,0,16,196,50,
244,236,17,57,48,1,33,17,35,17,35,17,35,17,38,38,
53,52,36,2,121,1,192,141,190,142,215,235,1,4,5,213,
249,102,6,31,249,225,3,78,17,221,184,190,232,0,0,1,
0,186,255,227,4,172,6,20,0,47,0,154,64,48,45,39,
33,12,4,6,13,32,0,4,42,22,134,23,26,185,19,42,
185,3,151,19,140,46,12,9,13,29,32,33,39,9,8,36,
39,8,6,29,8,36,16,22,45,8,16,0,70,48,16,252,
196,252,204,16,198,238,212,238,16,238,17,57,57,18,57,18,
57,49,0,47,228,254,238,16,254,213,238,18,23,57,23,57,
48,64,64,15,5,15,6,15,7,15,39,15,40,138,12,138,
13,7,10,6,10,7,10,11,10,12,10,13,10,31,13,32,
10,33,12,34,4,38,25,13,25,31,25,32,58,32,58,33,
77,31,77,32,73,33,73,34,106,31,106,32,165,6,165,7,
166,32,24,93,1,93,19,52,54,51,50,22,23,14,1,21,
20,22,31,1,30,1,21,20,6,35,34,38,39,53,30,1,
51,50,54,53,52,38,47,1,46,1,53,52,54,55,46,1,
35,34,6,21,17,35,186,239,218,208,219,3,151,168,58,65,
57,166,96,225,211,64,136,73,80,140,65,116,120,59,101,92,
96,87,167,151,8,131,113,130,136,187,4,113,200,219,232,224,
8,115,96,47,81,42,37,106,142,100,172,183,25,24,164,30,
29,95,91,63,84,62,55,59,135,91,127,172,29,103,112,139,
131,251,147,0,0,4,1,27,0,0,6,229,5,205,0,23,
0,47,0,56,0,76,0,96,64,54,69,66,67,63,50,201,
72,48,201,57,74,67,202,12,57,202,0,201,24,200,12,201,
36,72,69,51,48,4,49,66,60,63,57,54,73,49,96,75,
54,96,67,60,94,18,9,30,75,94,6,9,30,95,42,77,
16,220,228,252,236,16,254,253,196,238,16,238,50,17,57,57,
18,57,18,23,57,49,0,47,238,246,254,237,16,237,50,16,
238,214,238,57,18,57,57,48,1,34,6,7,6,6,21,20,
22,23,22,22,51,50,54,55,54,54,53,52,38,39,38,38,
39,50,4,23,22,18,21,20,2,7,6,4,35,34,36,39,
38,2,53,52,18,55,54,36,19,35,17,51,50,54,53,52,
38,39,50,22,21,20,6,7,22,22,23,23,35,39,38,38,
35,35,17,35,17,4,0,131,226,94,94,96,96,94,94,226,
131,132,227,94,93,93,94,92,94,227,132,152,1,7,109,109,
108,108,109,109,254,249,152,152,254,249,109,109,108,108,109,109,
1,7,125,123,123,110,87,88,102,176,174,105,96,24,67,46,
137,172,129,59,73,54,66,155,5,102,94,94,94,229,130,129,
227,94,94,95,95,94,93,226,131,133,227,93,94,94,103,110,
109,109,254,250,154,152,254,251,109,109,110,110,109,109,1,5,
152,154,1,6,109,109,110,254,98,254,236,62,75,76,63,103,
119,121,86,112,17,8,77,73,223,209,96,51,254,156,3,68,
0,3,1,27,0,0,6,229,5,205,0,23,0,47,0,73,
0,67,64,38,61,203,62,58,204,65,202,36,49,203,48,52,
204,71,202,24,201,0,200,36,201,12,55,97,68,61,48,94,
42,9,6,68,94,30,9,6,18,74,16,220,204,252,236,16,
254,237,50,16,238,49,0,47,238,246,254,253,238,214,238,16,
253,238,214,238,48,1,50,4,23,22,18,21,20,2,7,6,
4,35,34,36,39,38,2,53,52,18,55,54,36,23,34,6,
7,6,6,21,20,22,23,22,22,51,50,54,55,54,54,53,
52,38,39,38,38,23,21,38,38,35,34,6,21,20,22,51,
50,54,55,21,6,6,35,34,38,53,52,54,51,50,22,4,
0,152,1,7,109,109,108,108,109,109,254,249,152,152,254,249,
109,109,108,108,109,109,1,7,152,131,226,94,94,96,96,94,
94,226,131,132,227,94,93,93,94,92,94,227,167,66,130,66,
149,167,171,155,64,122,66,67,137,70,216,251,251,216,73,136,
5,205,110,109,109,254,250,154,152,254,251,109,109,110,110,109,
109,1,5,152,154,1,6,109,109,110,103,94,94,94,229,130,
129,227,94,94,95,95,94,93,226,131,133,227,93,94,94,245,
129,33,32,175,157,159,174,31,34,127,29,28,244,208,209,242,
28,0,0,2,1,39,3,147,6,70,5,213,0,12,0,20,
0,62,64,33,1,6,7,16,10,4,18,14,9,3,6,201,
13,2,0,129,21,1,9,5,98,3,9,98,11,13,99,15,
98,19,99,17,21,16,212,228,252,228,212,236,212,236,17,57,
49,0,16,244,60,60,236,23,50,212,60,60,196,17,57,48,
1,19,19,51,17,35,17,3,35,3,17,35,17,35,21,35,
17,35,17,35,53,4,74,174,164,170,113,195,55,203,114,113,
203,114,201,5,213,255,0,1,0,253,190,1,228,254,209,1,
47,254,28,2,66,94,254,28,1,228,94,0,0,1,1,115,
4,238,3,82,6,102,0,3,0,49,64,9,2,180,0,179,
4,3,68,1,4,16,212,236,49,0,16,244,236,48,0,75,
176,9,84,75,176,14,84,91,88,189,0,4,255,192,0,1,
0,4,0,4,0,64,56,17,55,56,89,1,51,1,35,2,
139,199,254,186,153,6,102,254,136,0,0,2,0,215,5,70,
3,41,6,16,0,3,0,7,0,146,64,14,6,2,206,4,
0,205,8,1,100,0,5,100,4,8,16,220,252,212,236,49,
0,16,252,60,236,50,48,0,75,176,10,84,75,176,13,84,
91,88,189,0,8,0,64,0,1,0,8,0,8,255,192,56,
17,55,56,89,1,75,176,12,84,75,176,13,84,91,75,176,
14,84,91,75,176,23,84,91,88,189,0,8,255,192,0,1,
0,8,0,8,0,64,56,17,55,56,89,1,75,176,15,84,
75,176,25,84,91,88,189,0,8,0,64,0,1,0,8,0,
8,255,192,56,17,55,56,89,64,17,96,1,96,2,96,5,
96,6,112,1,112,2,112,5,112,6,8,93,1,51,21,35,
37,51,21,35,2,94,203,203,254,121,203,203,6,16,202,202,
202,0,0,1,0,217,0,39,5,219,4,221,0,19,0,62,
64,34,13,12,10,3,2,207,4,0,156,6,12,207,14,10,
156,18,6,16,8,20,18,14,13,12,8,4,3,2,8,9,
5,15,0,20,16,220,60,196,50,23,57,49,0,16,212,60,
204,50,252,60,236,16,254,60,236,57,17,18,57,48,19,33,
1,23,7,33,21,33,7,33,21,33,1,39,55,33,53,33,
55,33,217,3,4,1,0,125,174,1,47,254,72,195,2,123,
252,250,254,254,125,174,254,213,1,182,195,253,135,3,162,1,
59,102,213,168,240,170,254,199,102,211,170,240,0,2,0,8,
0,0,7,72,5,213,0,15,0,19,0,135,64,57,17,17,
14,15,14,16,17,15,15,14,13,17,15,14,12,17,14,15,
14,66,5,149,3,11,149,17,1,149,16,149,0,129,17,7,
149,3,173,13,9,17,16,15,13,12,5,14,10,0,4,8,
6,2,28,18,10,14,20,16,212,212,60,236,50,212,196,196,
17,18,23,57,49,0,47,60,236,236,196,244,236,236,16,238,
16,238,48,75,83,88,7,16,5,237,7,5,237,7,16,5,
237,7,16,5,237,89,34,178,128,21,1,1,93,64,19,103,
17,119,16,119,17,134,12,133,16,150,17,144,21,160,21,191,
21,9,93,1,21,33,17,33,21,33,17,33,21,33,17,33,
3,35,1,23,1,33,17,7,53,253,27,2,199,253,57,2,
248,252,61,253,240,160,205,2,113,139,254,182,1,203,5,213,
170,254,70,170,253,227,170,1,127,254,129,5,213,158,252,240,
3,16,0,3,0,102,255,186,5,229,6,23,0,9,0,19,
0,43,0,158,64,60,29,31,26,13,43,44,19,10,1,0,
4,13,41,38,32,20,13,4,42,38,30,26,4,149,38,13,
149,26,145,38,140,44,43,44,42,20,23,16,32,30,35,19,
10,1,0,4,29,41,16,7,31,7,25,35,51,16,25,23,
16,44,16,252,236,252,236,192,17,18,57,57,23,57,18,57,
57,17,18,57,57,17,57,49,0,16,228,244,236,16,238,16,
192,16,192,17,18,57,57,18,57,18,23,57,18,57,17,18,
57,57,48,64,42,87,0,90,21,87,25,85,33,106,21,101,
33,123,21,118,28,117,33,9,70,19,89,0,86,19,106,0,
100,19,100,28,106,40,124,0,115,19,118,28,122,40,11,93,
1,93,9,1,30,1,51,50,0,17,52,38,39,46,1,35,
34,0,17,20,22,23,7,38,2,53,16,0,33,50,22,23,
55,23,7,22,18,21,16,0,33,34,38,39,7,39,4,182,
253,51,62,161,95,220,1,1,39,121,61,161,95,220,254,253,
39,39,134,78,79,1,121,1,59,130,221,87,162,102,170,78,
80,254,136,254,198,128,221,91,162,103,4,88,252,178,64,67,
1,72,1,26,112,184,184,64,67,254,184,254,229,112,188,68,
158,102,1,8,160,1,98,1,165,77,75,191,89,198,103,254,
246,158,254,159,254,91,75,75,191,88,0,3,0,221,0,221,
5,207,3,238,0,11,0,23,0,47,0,255,64,29,45,27,
21,9,33,3,0,36,24,4,21,15,39,33,21,27,15,33,
48,12,0,36,24,18,6,42,18,30,48,16,212,196,212,196,
17,57,57,57,57,49,0,16,212,196,212,196,16,192,17,18,
23,57,18,57,17,18,57,48,64,190,5,2,5,3,5,4,
0,5,0,6,0,7,5,8,5,9,5,10,10,16,15,17,
15,18,15,19,10,20,21,2,21,3,21,4,16,5,16,6,
16,7,21,8,21,9,21,10,26,14,26,15,26,16,31,17,
31,18,31,19,26,20,26,21,26,22,36,2,36,3,36,4,
32,5,32,6,32,7,36,8,36,9,36,10,42,14,42,15,
42,16,47,17,47,18,47,19,42,20,42,21,42,22,53,2,
53,3,53,4,48,5,48,6,48,7,53,8,53,9,53,10,
58,14,58,15,58,16,63,17,63,18,63,19,58,20,58,21,
58,22,69,2,69,3,69,4,64,5,64,6,64,7,69,8,
69,9,69,10,74,14,74,15,74,16,79,17,79,18,79,19,
74,20,74,21,74,22,86,180,31,176,32,176,33,176,34,176,
38,176,39,176,40,180,41,8,93,1,93,1,30,1,51,50,
54,53,52,38,35,34,6,7,46,1,35,34,6,21,20,22,
51,50,54,23,14,1,35,34,38,53,52,54,51,50,22,23,
62,1,51,50,22,21,20,6,35,34,38,3,147,49,134,84,
101,128,118,89,82,133,196,49,133,85,102,127,118,89,82,134,
144,70,157,94,136,186,167,134,95,153,72,68,158,97,134,188,
167,134,94,149,2,47,88,90,135,105,101,134,135,55,88,88,
132,106,101,134,136,22,135,127,223,166,175,216,126,138,138,131,
225,167,175,214,119,0,0,2,0,217,0,0,5,219,5,4,
0,11,0,15,0,46,64,24,5,208,7,3,156,0,208,9,
1,12,156,14,13,2,21,4,0,23,12,8,21,10,6,16,
16,212,60,236,50,252,60,236,50,49,0,47,236,212,60,236,
252,60,236,48,1,17,33,21,33,17,35,17,33,53,33,17,
1,33,21,33,3,174,2,45,253,211,168,253,211,2,45,253,
211,5,2,250,254,5,4,254,125,170,254,125,1,131,170,1,
131,251,166,170,0,2,0,217,0,0,5,219,4,168,0,6,
0,10,0,84,64,46,2,156,3,4,3,1,156,0,1,4,
4,3,1,156,2,1,5,6,5,0,156,6,5,66,5,4,
2,1,0,5,3,209,6,167,7,156,9,1,8,2,0,36,
7,4,35,11,16,252,60,236,50,50,57,49,0,47,236,244,
236,23,57,48,75,83,88,7,4,237,7,16,8,237,7,16,
8,237,7,16,4,237,89,34,9,2,21,1,53,1,1,33,
21,33,5,219,252,64,3,192,250,254,5,2,250,254,5,2,
250,254,3,248,254,235,254,238,178,1,112,170,1,111,252,2,
170,0,0,2,0,217,0,0,5,219,4,168,0,6,0,10,
0,86,64,47,6,156,0,6,3,4,3,5,156,4,4,3,
0,156,1,2,1,6,156,5,6,2,2,1,66,6,5,3,
2,0,5,4,209,1,167,7,156,8,6,7,2,36,9,4,
0,35,11,16,252,60,60,236,50,57,49,0,47,236,244,236,
23,57,48,75,83,88,7,16,8,237,7,16,4,237,7,16,
4,237,7,16,8,237,89,34,19,53,1,21,1,53,1,1,
21,33,53,217,5,2,250,254,3,193,1,65,250,254,3,248,
176,254,145,170,254,144,178,1,18,253,199,170,170,0,0,1,
0,82,0,0,4,195,5,213,0,24,0,198,64,70,16,2,
17,22,17,15,2,14,15,22,22,17,15,2,16,15,8,13,
8,14,2,13,13,8,66,15,11,9,4,0,211,23,6,18,
11,211,20,9,16,13,129,2,12,9,14,3,5,22,15,3,
21,18,16,3,0,17,102,19,0,101,1,28,13,102,10,5,
101,7,3,25,16,212,60,236,50,236,252,236,50,236,18,23,
57,18,57,57,17,23,57,49,0,47,228,50,212,60,236,50,
212,60,236,50,17,18,57,48,75,83,88,7,16,5,237,7,
16,8,237,7,16,8,237,7,16,5,237,89,34,1,75,176,
12,84,88,189,0,25,255,192,0,1,0,25,0,25,0,64,
56,17,55,56,89,64,40,134,15,144,15,166,15,160,15,181,
15,5,39,12,39,13,39,14,41,16,40,17,40,18,55,14,
57,16,135,12,136,18,166,13,165,14,170,16,169,17,14,93,
0,93,1,33,17,35,17,33,53,33,53,39,33,53,33,1,
51,9,1,51,1,33,21,33,7,21,33,4,141,254,99,201,
254,96,1,160,84,254,180,1,8,254,195,190,1,123,1,121,
191,254,194,1,8,254,181,84,1,159,1,199,254,57,1,199,
123,51,155,123,2,74,253,68,2,188,253,182,123,155,51,0,
0,1,0,174,254,86,4,229,4,96,0,32,0,77,64,37,
19,25,31,3,22,6,3,9,12,3,1,18,15,6,135,28,
22,140,10,1,188,0,189,33,25,9,18,9,8,11,78,31,
2,8,0,70,33,16,252,236,50,244,236,196,18,57,49,0,
16,228,228,50,244,60,236,220,196,17,23,57,17,18,23,57,
48,182,31,34,96,34,207,34,3,1,93,19,17,51,17,20,
22,51,50,54,53,17,51,17,20,22,51,50,54,55,21,14,
1,35,34,38,39,14,1,35,34,38,39,17,174,184,138,135,
148,149,184,35,37,9,32,28,41,73,35,69,82,15,50,145,
98,102,143,42,254,86,6,10,253,72,145,148,168,168,2,141,
252,162,60,57,11,12,148,23,22,78,80,79,79,78,78,253,
215,0,0,2,0,104,255,231,3,193,5,45,0,29,0,41,
0,98,64,25,0,39,33,9,27,6,39,21,6,15,33,27,
15,21,213,42,12,36,3,0,30,18,36,24,42,16,212,204,
220,204,57,57,17,57,49,0,16,228,204,220,204,16,206,16,
206,17,18,57,17,18,57,48,1,75,176,12,84,75,176,11,
84,91,75,176,14,84,91,75,176,16,84,91,75,176,20,84,
91,88,189,0,42,0,64,0,1,0,42,0,42,255,192,56,
17,55,56,89,1,62,1,53,52,38,35,34,6,35,34,38,
53,52,54,51,50,18,17,16,0,35,34,38,53,52,18,51,
50,22,7,52,38,35,34,2,21,20,22,51,50,18,2,244,
15,15,73,72,55,144,36,36,48,144,101,180,214,254,223,213,
152,203,221,162,101,130,11,87,79,109,141,86,80,109,141,2,
109,87,163,75,129,131,116,44,31,62,98,254,202,254,249,254,
177,254,70,216,163,198,1,1,91,224,116,125,254,254,207,116,
123,1,4,0,0,1,0,25,254,119,5,59,5,193,0,11,
0,93,64,20,10,4,12,2,5,7,2,0,7,12,10,5,
4,3,1,0,6,6,8,12,16,212,196,23,57,49,0,16,
196,212,204,16,206,17,18,57,57,48,64,48,81,3,86,5,
80,5,90,10,115,3,112,3,118,4,117,5,112,5,122,10,
128,3,128,5,12,90,9,127,2,127,3,112,5,112,6,123,
9,116,11,143,2,143,3,128,5,128,6,11,93,1,93,19,
33,21,33,9,1,33,21,33,53,9,1,55,4,234,252,65,
2,160,253,74,3,239,250,222,2,213,253,73,5,193,193,253,
51,253,4,192,149,3,33,2,227,0,0,1,0,156,254,119,
5,113,5,193,0,7,0,30,64,15,6,2,215,4,214,0,
175,8,3,103,1,5,103,0,8,16,212,236,212,236,49,0,
16,252,236,236,50,48,19,33,17,35,17,33,17,35,156,4,
213,240,253,10,239,5,193,248,182,6,125,249,131,0,0,1,
255,225,255,240,4,170,4,47,0,35,0,203,64,49,11,2,
21,31,30,3,0,8,218,15,26,22,0,217,34,216,15,213,
24,12,30,27,26,25,24,23,6,36,18,1,0,11,2,4,
35,22,21,5,34,31,18,12,35,18,104,5,35,31,36,16,
212,212,212,236,18,57,17,18,57,18,57,57,17,23,57,17,
18,23,57,49,0,47,60,228,244,236,50,50,16,238,17,23,
57,57,57,48,1,75,176,10,84,88,189,0,36,255,192,0,
1,0,36,0,36,0,64,56,17,55,56,89,64,86,24,30,
24,31,2,9,0,9,1,13,2,13,3,15,4,15,5,15,
6,15,7,15,8,15,9,15,10,15,11,15,12,15,13,15,
14,15,15,15,16,15,17,15,18,15,19,14,20,13,21,9,
22,11,23,8,24,15,24,13,25,8,26,9,35,17,0,17,
1,22,2,22,3,23,20,22,21,17,22,23,23,28,24,28,
25,17,35,40,93,0,93,1,35,3,14,1,21,20,22,51,
50,54,55,7,14,1,35,34,38,53,52,54,55,19,33,3,
35,19,35,34,6,7,35,62,1,51,33,4,135,182,105,15,
15,47,55,17,46,37,30,30,55,26,118,121,21,34,80,254,
186,194,181,195,41,54,60,9,160,28,143,165,3,121,3,145,
254,25,74,92,22,58,49,5,5,141,8,8,102,100,46,144,
161,1,120,252,111,3,145,64,69,166,125,0,0,1,0,47,
254,141,3,250,6,14,0,37,0,38,64,20,32,219,0,26,
13,219,19,26,220,7,177,38,10,105,23,106,29,105,4,38,
16,220,236,252,236,49,0,16,252,236,220,228,16,222,228,48,
1,50,19,54,55,18,18,51,50,22,21,20,6,35,34,38,
39,38,38,35,34,3,6,7,2,2,35,34,38,53,52,54,
51,50,22,23,22,22,1,55,106,14,2,1,12,190,202,80,
100,64,55,42,56,12,6,9,16,107,14,4,4,17,189,196,
79,101,68,61,33,48,15,10,10,254,250,2,176,108,57,2,
3,1,188,84,65,54,63,38,35,15,72,253,149,193,110,254,
33,254,98,83,65,56,63,29,28,18,83,0,0,3,0,115,
1,213,3,59,5,240,0,3,0,30,0,41,0,95,64,51,
40,7,37,4,31,18,24,16,2,227,0,31,221,16,0,225,
37,221,5,10,25,223,24,222,21,221,10,224,28,145,42,0,
24,13,31,16,34,6,2,1,40,17,6,107,4,108,24,34,
107,13,42,16,220,236,204,252,236,50,50,192,192,17,18,57,
57,17,18,57,49,0,16,244,228,252,244,236,16,196,238,237,
214,238,16,238,17,18,57,18,57,17,57,57,48,19,33,21,
33,1,17,35,53,6,6,35,34,38,53,52,54,51,51,53,
52,38,35,34,6,7,53,54,54,51,50,22,5,34,6,21,
20,22,51,50,54,53,53,139,2,176,253,80,2,174,149,44,
144,93,128,152,191,188,182,117,117,62,136,68,73,145,69,183,
179,254,236,161,126,98,82,104,130,2,80,123,2,184,254,64,
112,63,68,135,113,135,138,4,91,91,34,34,127,28,28,176,
240,67,79,64,77,144,114,29,0,3,0,96,1,213,3,100,
5,240,0,3,0,15,0,27,0,46,64,25,2,227,0,225,
22,221,10,224,16,221,4,145,28,0,19,13,1,25,107,7,
108,19,107,13,28,16,220,236,252,236,57,17,18,57,49,0,
16,244,236,244,236,252,236,48,19,33,21,33,1,50,22,21,
20,6,35,34,38,53,52,54,23,34,6,21,20,22,51,50,
54,53,52,38,139,2,176,253,80,1,88,179,206,206,179,179,
208,208,179,105,126,127,104,105,125,124,2,80,123,4,27,221,
191,191,219,220,190,191,221,115,161,136,133,160,160,133,137,160,
0,1,0,78,0,0,5,207,5,231,0,31,0,64,64,34,
9,229,25,145,18,15,3,3,0,229,16,1,17,32,22,19,
15,12,31,6,2,1,0,2,109,6,28,28,15,109,12,28,
22,32,16,212,236,236,212,236,236,192,192,17,18,57,17,18,
57,17,18,57,49,0,47,60,236,23,50,244,236,48,37,21,
33,53,54,18,53,52,0,35,34,0,21,20,18,23,21,33,
53,33,38,2,53,16,0,33,32,0,17,20,2,7,5,207,
253,168,177,198,254,248,216,216,254,247,199,178,253,168,1,63,
158,145,1,127,1,49,1,47,1,129,142,161,178,178,178,97,
1,76,202,240,1,34,254,221,239,202,254,180,97,178,178,139,
1,42,184,1,62,1,138,254,119,254,203,194,254,216,141,0,
0,3,0,123,255,227,7,111,4,123,0,6,0,51,0,62,
1,3,64,67,39,45,37,61,14,13,0,52,169,37,22,134,
21,136,18,0,169,14,58,18,185,28,25,46,134,45,186,42,
3,185,14,187,7,49,10,184,31,25,140,37,63,52,55,38,
6,15,0,37,55,28,7,38,15,21,0,8,13,61,38,8,
15,45,55,8,34,69,63,16,252,236,204,212,252,60,212,236,
196,17,18,57,57,17,57,17,18,57,17,18,57,49,0,16,
196,228,50,244,60,196,228,252,60,244,236,16,196,238,50,16,
238,16,244,238,16,238,17,57,17,57,17,18,57,48,64,129,
48,43,48,44,48,45,48,46,48,47,48,48,64,43,64,44,
64,45,64,46,64,47,64,48,80,43,80,44,80,45,80,46,
80,47,80,48,133,43,133,48,128,64,144,64,160,64,176,64,
192,64,208,64,224,64,224,64,240,64,29,63,0,63,6,63,
13,63,14,63,15,5,48,44,48,45,48,46,48,47,64,44,
64,45,64,46,64,47,80,44,80,45,80,46,80,47,111,0,
111,6,111,13,111,14,111,15,96,44,96,45,96,46,96,47,
112,44,112,45,112,46,112,47,128,44,128,45,128,46,128,47,
29,93,113,1,93,1,46,1,35,34,6,7,3,62,1,51,
50,0,29,1,33,30,1,51,50,54,55,21,14,1,35,34,
38,39,14,1,35,34,38,53,52,54,51,33,53,52,38,35,
34,6,7,53,62,1,51,50,22,3,34,6,21,20,22,51,
50,54,61,1,6,182,1,165,137,153,185,14,68,74,212,132,
226,1,8,252,178,12,204,183,104,200,100,100,208,106,167,248,
77,73,216,143,189,210,253,251,1,2,167,151,96,182,84,101,
190,90,142,213,239,223,172,129,111,153,185,2,148,151,180,174,
158,1,48,90,94,254,221,250,90,191,200,53,53,174,42,44,
121,119,120,120,187,168,189,192,18,127,139,46,46,170,39,39,
96,254,24,102,123,98,115,217,180,41,0,3,0,72,255,162,
4,156,4,188,0,9,0,19,0,43,0,228,64,60,43,44,
38,31,29,26,19,10,1,0,4,13,41,38,32,20,13,4,
42,38,30,26,4,185,38,13,185,26,184,38,140,44,43,44,
42,20,23,16,32,30,35,19,10,1,0,4,16,7,31,29,
7,18,35,81,41,16,18,23,69,44,16,252,236,50,244,236,
50,192,17,18,23,57,18,57,57,17,18,57,57,17,57,49,
0,16,228,244,236,16,238,16,192,16,192,17,18,57,57,18,
57,18,23,57,17,57,57,17,18,57,48,64,112,40,1,63,
45,89,20,86,28,85,29,86,32,106,21,102,33,127,0,123,
4,127,5,127,6,127,7,127,8,127,9,127,10,127,11,127,
12,123,13,122,21,123,26,127,27,127,28,127,29,127,30,127,
31,127,32,123,33,127,34,127,35,127,36,127,37,123,38,155,
25,149,37,168,25,160,45,240,45,38,89,0,86,19,85,29,
90,40,105,0,102,19,101,28,106,40,122,0,116,19,118,28,
122,40,137,30,149,24,154,36,162,24,173,36,17,93,1,93,
9,1,30,1,51,50,54,53,52,38,39,46,1,35,34,6,
21,20,22,23,7,46,1,53,16,0,51,50,22,23,55,23,
7,30,1,21,16,0,35,34,38,39,7,39,3,137,254,25,
41,103,65,147,172,20,92,42,103,62,151,169,19,20,125,54,
54,1,17,241,93,159,67,139,95,146,53,54,254,238,240,96,
161,63,139,96,3,33,253,176,42,40,232,200,79,117,154,41,
41,235,211,72,110,46,151,77,197,119,1,20,1,56,51,52,
168,79,179,77,198,120,254,237,254,199,52,51,168,78,0,2,
0,143,255,227,3,172,5,213,0,32,0,36,0,134,64,47,
32,26,5,2,4,6,25,0,16,134,15,136,12,0,33,131,
35,12,149,19,140,35,129,37,6,34,25,22,9,5,1,0,
26,34,9,0,28,1,34,28,33,38,15,9,28,22,37,16,
220,236,212,252,236,212,236,17,18,57,17,18,57,17,18,57,
18,57,49,0,16,228,244,236,16,254,205,16,244,238,18,57,
57,23,57,48,1,75,176,16,84,75,176,18,84,91,75,176,
19,84,91,88,189,0,37,255,192,0,1,0,37,0,37,0,
64,56,17,55,56,89,64,11,116,4,116,5,116,6,116,7,
118,28,5,93,1,51,21,20,6,15,1,14,1,21,20,22,
51,50,54,55,21,14,1,35,34,38,53,52,54,63,1,62,
1,55,62,1,53,19,35,53,51,1,244,190,55,90,90,58,
51,131,109,78,180,96,94,192,103,184,224,73,89,88,48,38,
8,7,6,196,202,202,4,68,156,101,130,87,88,53,94,49,
89,110,70,67,188,57,56,194,159,76,137,86,86,47,53,25,
21,60,54,1,14,254,0,2,1,53,0,0,2,0,5,213,
0,3,0,9,0,98,64,15,7,0,131,2,129,4,8,7,
4,0,3,5,1,0,10,16,252,60,236,50,57,57,49,0,
47,244,252,204,48,1,75,176,11,84,88,189,0,10,0,64,
0,1,0,10,0,10,255,192,56,17,55,56,89,1,75,176,
15,84,75,176,16,84,91,75,176,19,84,91,88,189,0,10,
255,192,0,1,0,10,0,10,0,64,56,17,55,56,89,182,
0,11,32,11,80,11,3,93,1,35,53,51,17,35,17,19,
51,19,2,0,203,203,203,21,162,20,4,215,254,250,43,2,
143,1,101,254,155,0,0,1,0,217,1,31,5,219,3,94,
0,5,0,23,64,10,4,156,2,0,6,3,23,1,0,6,
16,220,212,236,49,0,16,212,196,236,48,19,33,17,35,17,
33,217,5,2,168,251,166,3,94,253,193,1,149,0,0,1,
0,61,255,215,5,25,6,125,0,10,0,42,64,24,10,9,
8,7,6,5,11,2,4,2,0,11,10,9,7,6,5,4,
3,0,8,1,8,11,16,212,204,23,57,49,0,16,212,204,
196,17,18,23,57,48,1,51,21,35,1,35,1,7,39,37,
1,4,92,189,115,253,174,66,254,193,125,25,1,27,1,0,
6,125,96,249,186,3,115,45,80,98,253,59,0,1,0,31,
254,86,5,2,6,20,0,35,0,138,64,64,14,13,2,15,
12,17,25,30,25,11,10,9,8,4,7,17,30,30,25,66,
25,12,19,10,7,30,1,26,10,169,8,19,138,18,230,22,
169,15,1,138,0,230,4,169,33,151,15,28,8,36,30,29,
27,26,25,12,11,9,8,7,10,0,18,36,16,212,204,23,
57,49,0,16,196,50,196,252,236,244,236,16,238,246,238,16,
238,50,18,57,57,17,18,57,57,48,75,83,88,7,16,5,
237,23,50,7,16,5,237,17,23,57,89,34,1,75,176,12,
84,88,189,0,36,255,192,0,1,0,36,0,36,0,64,56,
17,55,56,89,1,21,46,1,35,34,6,7,3,33,21,33,
3,2,6,35,34,38,39,53,30,1,51,50,54,55,19,35,
53,33,19,62,1,51,50,22,5,2,38,80,44,96,114,25,
60,1,31,254,195,127,58,188,186,58,100,47,52,97,47,97,
109,34,137,248,1,23,63,36,198,151,53,100,5,240,164,29,
28,122,132,254,201,143,253,133,254,227,211,21,22,166,33,33,
137,166,2,173,143,1,74,183,195,18,0,2,0,217,1,16,
5,219,3,244,0,29,0,59,0,63,64,31,46,31,57,42,
0,45,34,19,1,16,27,12,30,42,156,49,57,156,34,4,
156,27,12,156,19,60,30,0,45,15,60,16,212,60,196,50,
49,0,16,212,236,212,236,220,252,212,236,192,17,18,57,57,
17,18,57,57,17,18,57,57,48,1,21,6,6,35,34,39,
38,39,38,39,38,35,34,6,7,53,54,54,51,50,23,22,
23,22,23,22,51,50,54,19,21,6,6,35,34,39,38,39,
38,39,38,35,34,6,7,53,54,54,51,50,23,22,23,22,
23,22,51,50,54,5,219,105,179,97,110,146,10,7,6,15,
155,94,88,172,98,105,179,97,110,147,11,5,6,15,155,94,
86,169,103,105,179,97,110,146,10,7,6,15,155,94,88,172,
98,105,179,97,110,147,10,5,7,15,155,94,86,169,2,111,
179,78,69,59,4,3,2,6,61,76,84,179,78,69,59,5,
2,2,6,61,75,1,218,178,79,69,59,4,3,2,6,61,
76,83,178,78,69,59,4,2,3,6,61,75,0,2,255,250,
0,0,5,96,5,193,0,2,0,6,0,56,64,15,0,3,
1,3,5,4,3,2,1,0,5,7,5,6,7,16,212,204,
17,23,57,49,0,47,196,204,17,57,48,64,20,99,1,109,
2,112,1,120,2,127,2,121,5,118,6,7,110,0,127,0,
2,93,1,93,9,1,33,1,51,1,33,2,172,254,94,3,
68,253,239,224,2,67,250,154,4,238,251,196,5,15,250,63,
0,2,0,158,0,141,4,37,4,35,0,6,0,13,0,134,
64,73,3,232,4,5,4,2,232,1,2,5,5,4,2,232,
3,2,6,0,6,1,232,0,0,6,10,232,11,12,11,9,
232,8,9,12,12,11,9,232,10,9,13,7,13,8,232,7,
7,13,66,9,2,11,4,231,7,0,166,14,9,12,5,2,
7,3,0,111,5,10,7,111,12,110,14,16,252,252,60,212,
236,50,17,57,17,18,57,49,0,16,244,60,236,50,57,57,
48,75,83,88,7,16,4,237,7,16,8,237,7,16,8,237,
7,16,4,237,7,16,4,237,7,16,8,237,7,16,8,237,
7,16,4,237,89,34,1,21,1,1,21,1,53,19,21,1,
1,21,1,53,4,37,254,211,1,45,254,43,35,254,211,1,
45,254,43,4,35,191,254,244,254,244,191,1,162,82,1,162,
191,254,244,254,244,191,1,162,82,0,0,2,0,193,0,141,
4,72,4,35,0,6,0,13,0,134,64,73,12,232,13,12,
9,10,9,11,232,10,10,9,13,232,7,8,7,12,232,11,
12,8,8,7,5,232,6,5,2,3,2,4,232,3,3,2,
6,232,0,1,0,5,232,4,5,1,1,0,66,12,5,10,
3,231,7,0,166,14,12,8,1,5,0,8,111,10,7,1,
111,3,0,112,14,16,252,60,252,212,60,236,18,57,17,18,
57,49,0,16,244,60,236,50,57,57,48,75,83,88,7,16,
8,237,7,16,4,237,7,16,4,237,7,16,8,237,7,16,
8,237,7,16,4,237,7,16,4,237,7,16,8,237,89,34,
19,1,21,1,53,1,1,37,1,21,1,53,1,1,193,1,
213,254,43,1,45,254,211,1,178,1,213,254,43,1,45,254,
211,4,35,254,94,82,254,94,191,1,12,1,12,191,254,94,
82,254,94,191,1,12,1,12,0,3,0,236,0,0,7,20,
0,254,0,3,0,7,0,11,0,35,64,17,8,4,0,131,
10,6,2,4,25,5,0,25,1,9,25,8,12,16,212,252,
212,236,212,236,49,0,47,60,60,236,50,50,48,37,51,21,
35,37,51,21,35,37,51,21,35,3,150,212,212,2,169,213,
213,250,173,213,213,254,254,254,254,254,254,0,255,255,0,16,
0,0,5,104,7,107,2,39,0,36,0,0,0,0,0,7,
1,6,0,188,1,117,255,255,0,16,0,0,5,104,7,94,
2,39,0,36,0,0,0,0,0,7,1,5,0,188,1,117,
255,255,0,115,255,227,5,217,7,94,2,39,0,50,0,0,
0,0,0,7,1,5,1,39,1,117,0,2,0,115,0,0,
8,12,5,213,0,16,0,25,0,59,64,31,5,149,3,17,
1,149,0,129,24,7,149,3,173,9,24,18,16,10,21,6,
2,28,17,0,4,8,21,25,13,16,26,16,252,236,212,196,
196,212,236,50,18,57,57,57,57,49,0,47,236,236,50,244,
236,50,16,238,48,1,21,33,17,33,21,33,17,33,21,33,
32,0,17,16,0,33,23,35,32,0,17,16,0,33,51,7,
250,253,26,2,199,253,57,2,248,251,215,254,79,254,65,1,
191,1,177,103,129,254,191,254,192,1,64,1,65,129,5,213,
170,254,70,170,253,227,170,1,124,1,112,1,109,1,124,170,
254,225,254,224,254,223,254,223,0,3,0,113,255,227,7,195,
4,123,0,6,0,39,0,51,0,132,64,49,7,8,0,16,
134,15,136,12,0,169,8,46,12,185,22,19,40,3,185,8,
187,34,37,31,184,25,19,140,52,6,0,22,34,49,9,15,
0,8,7,75,49,18,9,81,43,18,28,69,52,16,252,236,
244,252,244,236,196,17,18,57,57,18,57,49,0,16,228,50,
244,60,196,228,236,50,16,196,238,50,16,238,16,244,238,17,
18,57,48,64,37,63,53,95,53,112,53,159,53,207,53,208,
53,240,53,7,63,0,63,6,63,7,63,8,63,9,5,111,
0,111,6,111,7,111,8,111,9,5,93,113,1,93,1,46,
1,35,34,6,7,5,21,33,30,1,51,50,54,55,21,14,
1,35,34,38,39,14,1,35,34,0,17,16,0,51,50,22,
23,62,1,51,50,0,37,34,6,21,20,22,51,50,54,53,
52,38,7,10,2,164,137,153,185,14,3,72,252,178,12,204,
183,106,200,98,100,208,106,160,242,81,71,209,140,241,254,239,
1,17,241,140,211,66,78,232,143,226,1,8,250,176,148,172,
171,149,147,172,172,2,148,152,179,174,158,53,90,190,199,52,
52,174,42,44,110,109,110,109,1,57,1,19,1,20,1,56,
111,108,107,112,254,221,135,231,201,201,231,232,200,199,233,0,
0,1,0,0,1,233,4,0,2,121,0,3,0,16,182,2,
169,0,233,4,1,0,47,198,49,0,16,252,236,48,17,33,
21,33,4,0,252,0,2,121,144,0,0,1,0,0,1,233,
8,0,2,121,0,3,0,15,181,2,169,0,4,1,0,47,
204,49,0,16,212,236,48,17,33,21,33,8,0,248,0,2,
121,144,0,2,0,174,3,233,3,109,5,213,0,5,0,11,
0,39,64,19,6,0,158,9,3,129,12,9,10,6,25,7,
3,4,7,0,25,1,12,16,220,252,204,212,204,16,254,212,
206,49,0,16,244,60,236,50,48,1,35,53,19,51,3,5,
35,53,19,51,3,1,129,211,164,129,82,1,154,211,164,129,
82,3,233,173,1,63,254,193,173,173,1,63,254,193,0,2,
0,174,3,233,3,109,5,213,0,5,0,11,0,39,64,19,
9,3,158,6,0,129,12,9,10,7,25,6,1,3,4,1,
25,0,12,16,220,236,212,204,16,220,238,212,206,49,0,16,
244,60,236,50,48,1,51,21,3,35,19,37,51,21,3,35,
19,1,0,211,164,129,82,1,154,211,164,129,82,5,213,172,
254,192,1,64,172,172,254,192,1,64,0,1,0,174,3,233,
1,211,5,213,0,5,0,24,64,11,0,158,3,129,6,3,
4,0,25,1,6,16,220,252,212,204,49,0,16,244,236,48,
1,35,53,19,51,3,1,129,211,164,129,82,3,233,173,1,
63,254,193,0,0,1,0,178,3,254,1,215,5,213,0,5,
0,24,64,11,3,158,0,129,6,3,4,1,113,0,6,16,
220,236,212,204,49,0,16,244,236,48,1,51,21,3,35,19,
1,4,211,164,129,82,5,213,152,254,193,1,63,0,0,3,
0,217,0,150,5,219,4,111,0,3,0,7,0,11,0,41,
64,20,0,234,2,6,234,4,2,8,156,4,10,12,9,5,
1,114,4,0,8,12,16,220,212,60,252,60,196,49,0,16,
212,196,252,196,16,238,16,238,48,1,51,21,35,17,51,21,
35,1,33,21,33,2,223,246,246,246,246,253,250,5,2,250,
254,4,111,246,254,18,245,2,65,170,0,2,0,6,254,35,
3,238,6,117,0,3,0,7,0,34,64,17,2,6,0,8,
4,6,8,6,4,3,2,1,0,6,5,7,8,16,212,204,
23,57,49,0,16,212,204,17,57,18,57,48,9,7,1,250,
254,127,1,129,1,129,254,127,1,244,254,12,254,12,5,129,
252,207,252,199,3,57,4,37,251,219,251,211,4,45,255,255,
0,61,254,86,4,127,6,16,2,39,0,92,0,0,0,0,
0,7,0,142,0,94,0,0,255,255,255,252,0,0,4,231,
7,78,2,39,0,60,0,0,0,0,0,7,1,3,0,115,
1,117,0,1,254,137,255,227,2,205,5,240,0,3,0,43,
64,19,0,15,1,2,1,2,15,3,0,3,66,2,140,0,
145,4,1,3,4,16,212,204,49,0,16,228,228,48,75,83,
88,7,16,5,237,7,16,5,237,89,34,1,51,1,35,2,
45,160,252,92,160,5,240,249,243,0,0,2,0,94,0,82,
4,188,4,178,0,35,0,47,0,131,64,73,3,9,27,21,
4,45,30,0,39,28,2,33,29,12,18,45,20,11,10,3,
19,15,1,29,45,185,19,235,15,236,39,185,29,235,33,48,
30,12,0,18,4,42,36,20,48,28,21,27,42,29,19,28,
24,9,3,36,11,10,1,3,2,36,40,2,115,6,116,42,
40,28,115,24,48,16,220,228,236,244,228,236,18,23,57,18,
57,57,17,18,57,57,18,57,57,17,18,57,17,18,23,57,
49,0,16,212,228,236,244,228,236,16,192,17,18,23,57,18,
57,57,17,18,57,57,17,57,57,18,23,57,48,1,55,23,
7,22,22,21,20,6,7,23,7,39,6,6,35,34,38,39,
7,39,55,38,38,53,52,54,55,39,55,23,54,54,51,50,
22,19,52,38,35,34,6,21,20,22,51,50,54,3,123,207,
114,206,37,36,38,40,209,114,207,59,116,61,58,120,61,207,
113,207,37,37,38,38,207,115,207,55,116,64,60,117,92,155,
114,112,158,157,113,113,156,3,225,209,115,206,59,119,62,63,
115,57,207,113,207,40,38,37,37,207,115,206,62,118,58,64,
116,56,206,115,207,39,37,36,254,124,112,154,154,112,114,156,
157,0,0,1,0,158,0,141,2,115,4,35,0,6,0,71,
64,37,3,232,4,5,4,2,232,1,2,5,5,4,2,232,
3,2,6,0,6,1,232,0,6,66,2,4,231,0,166,7,
2,3,0,111,5,110,7,16,252,236,50,57,49,0,16,244,
236,57,48,75,83,88,7,4,237,7,16,8,237,7,16,8,
237,7,16,4,237,89,34,1,21,1,1,21,1,53,2,115,
254,211,1,45,254,43,4,35,191,254,244,254,244,191,1,162,
82,0,0,1,0,193,0,141,2,150,4,35,0,6,0,73,
64,38,5,232,6,5,2,3,2,4,232,3,3,2,6,232,
0,1,0,5,232,4,5,1,1,0,66,5,3,231,0,166,
7,5,1,111,3,0,112,7,16,252,60,236,57,49,0,16,
244,236,57,48,75,83,88,7,16,8,237,7,16,4,237,7,
16,4,237,7,16,8,237,89,34,19,1,21,1,53,1,1,
193,1,213,254,43,1,45,254,211,4,35,254,94,82,254,94,
191,1,12,1,12,0,0,2,0,47,0,0,4,74,6,20,
0,21,0,25,0,155,64,40,11,20,24,7,3,169,0,16,
135,14,24,190,22,177,14,151,9,0,188,5,1,17,14,15,
4,22,2,8,0,15,20,4,8,8,23,0,10,6,76,26,
16,252,60,196,50,196,252,60,196,16,238,50,17,18,57,57,
49,0,47,60,230,50,238,254,238,16,238,16,238,50,18,57,
57,48,1,75,176,10,84,88,189,0,26,255,192,0,1,0,
26,0,26,0,64,56,17,55,56,89,1,75,176,14,84,88,
189,0,26,0,64,0,1,0,26,0,26,255,192,56,17,55,
56,89,64,26,16,22,16,23,16,24,16,25,4,48,27,80,
27,128,15,128,16,128,27,160,27,208,27,239,27,8,93,0,
93,1,17,35,17,33,17,35,17,35,53,51,53,52,54,59,
1,21,35,34,6,29,1,1,51,21,35,4,74,185,254,7,
185,176,176,173,179,185,176,99,77,1,249,185,185,4,96,251,
160,3,209,252,47,3,209,143,78,183,175,153,80,104,99,1,
178,233,0,1,0,47,0,0,4,74,6,20,0,21,0,132,
64,33,8,19,4,15,11,169,9,4,135,0,151,17,9,188,
13,2,5,0,10,8,3,8,1,10,12,8,8,16,1,18,
14,76,22,16,252,60,196,196,252,60,196,16,238,17,18,57,
57,49,0,47,60,230,50,254,238,16,238,50,18,57,57,48,
1,75,176,10,84,88,189,0,22,255,192,0,1,0,22,0,
22,0,64,56,17,55,56,89,1,75,176,14,84,88,189,0,
22,0,64,0,1,0,22,0,22,255,192,56,17,55,56,89,
64,17,48,23,80,23,128,10,128,11,128,23,160,23,208,23,
239,23,8,93,1,33,17,35,17,33,34,6,29,1,33,21,
33,17,35,17,35,53,51,53,52,54,2,74,2,0,185,254,
183,99,77,1,47,254,209,185,176,176,174,6,20,249,236,5,
123,80,104,99,143,252,47,3,209,143,78,187,171,0,0,1,
0,57,255,59,3,199,5,213,0,19,0,62,64,32,18,6,
185,0,16,8,185,10,4,0,2,14,10,12,129,2,194,20,
15,0,89,17,13,1,87,9,5,89,11,7,3,20,16,212,
60,60,236,50,252,60,60,236,50,49,0,16,228,244,196,50,
16,196,50,16,238,50,16,238,50,48,37,33,17,35,17,33,
53,33,17,33,53,33,17,51,17,33,21,33,17,33,3,199,
254,145,176,254,145,1,111,254,145,1,111,176,1,111,254,145,
1,111,223,254,92,1,164,154,2,31,153,1,164,254,92,153,
253,225,0,1,0,219,2,72,1,174,3,70,0,3,0,18,
183,2,131,0,4,1,25,0,4,16,212,236,49,0,16,212,
236,48,19,51,21,35,219,211,211,3,70,254,0,1,0,174,
255,18,1,211,0,254,0,5,0,24,64,11,3,158,0,131,
6,3,4,1,25,0,6,16,212,236,212,204,49,0,16,252,
236,48,37,51,21,3,35,19,1,0,211,164,129,82,254,172,
254,192,1,64,0,2,0,174,255,18,3,109,0,254,0,5,
0,11,0,39,64,19,9,3,158,6,0,131,12,3,4,1,
25,0,7,9,10,7,25,6,12,16,220,236,212,204,16,220,
238,212,206,49,0,16,252,60,236,50,48,37,51,21,3,35,
19,37,51,21,3,35,19,2,154,211,164,129,82,254,102,211,
164,129,82,254,172,254,192,1,64,172,172,254,192,1,64,0,
0,7,0,113,255,227,10,76,5,240,0,11,0,23,0,35,
0,39,0,51,0,63,0,75,0,174,64,68,36,15,37,38,
37,38,15,39,36,39,66,64,0,146,12,46,146,30,141,40,
146,24,70,6,146,52,12,141,58,38,18,140,36,24,145,76,
37,73,67,39,49,43,67,13,61,9,13,15,14,3,13,21,
49,13,27,61,14,73,13,21,55,43,13,27,14,33,11,76,
16,252,228,236,212,196,236,228,16,238,16,238,246,238,16,238,
17,18,57,17,18,57,49,0,16,228,50,244,60,60,228,50,
236,50,16,238,246,238,16,238,50,48,75,83,88,7,16,5,
237,7,16,5,237,89,34,1,75,176,20,84,75,176,9,84,
91,75,176,11,84,91,75,176,12,84,91,75,176,13,84,91,
75,176,14,84,91,88,189,0,76,0,64,0,1,0,76,0,
76,255,192,56,17,55,56,89,1,34,6,21,20,22,51,50,
54,53,52,38,39,50,22,21,20,6,35,34,38,53,52,54,
1,50,22,21,20,6,35,34,38,53,52,54,33,51,1,35,
19,34,6,21,20,22,51,50,54,53,52,38,1,50,22,21,
20,6,35,34,38,53,52,54,23,34,6,21,20,22,51,50,
54,53,52,38,8,244,87,100,100,87,85,99,99,85,158,186,
187,157,160,186,187,249,116,158,188,187,159,159,185,186,4,37,
160,252,90,160,31,86,99,98,87,87,99,100,3,178,158,186,
187,157,160,186,187,159,87,99,99,87,85,99,99,2,145,148,
132,130,149,149,130,131,149,127,220,187,187,219,219,187,188,219,
2,224,219,187,189,218,219,188,186,220,249,243,5,142,149,130,
132,148,148,132,129,150,253,159,220,187,187,219,219,187,188,219,
127,148,132,130,149,149,130,131,149,0,255,255,0,16,0,0,
5,104,7,109,2,39,0,36,0,0,0,0,0,7,1,7,
0,188,1,117,255,255,0,201,0,0,4,139,7,109,2,39,
0,40,0,0,0,0,0,7,1,7,0,158,1,117,255,255,
0,16,0,0,5,104,7,107,2,39,0,36,0,0,0,0,
0,7,1,4,0,188,1,117,255,255,0,201,0,0,4,139,
7,78,2,39,0,40,0,0,0,0,0,7,1,3,0,158,
1,117,255,255,0,201,0,0,4,139,7,107,2,39,0,40,
0,0,0,0,0,7,1,6,0,158,1,117,255,255,0,162,
0,0,2,31,7,107,2,39,0,44,0,0,0,0,0,7,
1,4,255,47,1,117,255,255,255,254,0,0,2,96,7,109,
2,39,0,44,0,0,0,0,0,7,1,7,255,47,1,117,
255,255,0,6,0,0,2,88,7,78,2,39,0,44,0,0,
0,0,0,7,1,3,255,47,1,117,255,255,0,59,0,0,
1,186,7,107,2,39,0,44,0,0,0,0,0,7,1,6,
255,47,1,117,255,255,0,115,255,227,5,217,7,107,2,39,
0,50,0,0,0,0,0,7,1,4,1,39,1,117,255,255,
0,115,255,227,5,217,7,109,2,39,0,50,0,0,0,0,
0,7,1,7,1,39,1,117,255,255,0,115,255,227,5,217,
7,107,2,39,0,50,0,0,0,0,0,7,1,6,1,39,
1,117,255,255,0,178,255,227,5,41,7,107,2,39,0,56,
0,0,0,0,0,7,1,4,0,238,1,117,255,255,0,178,
255,227,5,41,7,109,2,39,0,56,0,0,0,0,0,7,
1,7,0,238,1,117,255,255,0,178,255,227,5,41,7,107,
2,39,0,56,0,0,0,0,0,7,1,6,0,238,1,117,
0,1,0,193,0,0,1,121,4,96,0,3,0,32,183,0,
191,2,1,8,0,70,4,16,252,236,49,0,47,236,48,64,
11,16,5,64,5,80,5,96,5,112,5,5,1,93,19,51,
17,35,193,184,184,4,96,251,160,0,0,1,0,193,4,238,
3,63,6,102,0,6,0,55,64,12,4,5,2,180,0,179,
7,4,2,117,6,7,16,220,236,57,49,0,16,244,236,50,
57,48,0,75,176,9,84,75,176,14,84,91,88,189,0,7,
255,192,0,1,0,7,0,7,0,64,56,17,55,56,89,1,
51,19,35,39,7,35,1,182,148,245,139,180,180,139,6,102,
254,136,245,245,0,1,0,182,5,29,3,74,6,55,0,27,
0,99,64,36,0,18,7,14,11,4,1,18,7,15,11,4,
18,195,25,7,4,195,21,11,237,28,15,1,14,0,7,21,
86,22,119,7,86,8,118,28,16,244,236,252,236,17,57,57,
57,57,49,0,16,252,60,252,212,60,236,17,18,57,17,18,
57,17,18,57,17,18,57,48,0,75,176,9,84,75,176,12,
84,91,88,189,0,28,255,192,0,1,0,28,0,28,0,64,
56,17,55,56,89,1,39,46,1,35,34,6,7,35,62,1,
51,50,22,31,1,30,1,51,50,54,55,51,14,1,35,34,
38,1,252,57,22,33,13,38,36,2,125,2,102,91,38,64,
37,57,22,33,13,38,36,2,125,2,102,91,38,64,5,90,
55,20,19,73,82,135,147,28,33,55,20,19,73,82,135,147,
28,0,0,1,0,213,5,98,3,43,5,246,0,3,0,47,
183,2,239,0,238,4,1,0,4,16,212,204,49,0,16,252,
236,48,0,75,176,9,84,75,176,14,84,91,88,189,0,4,
255,192,0,1,0,4,0,4,0,64,56,17,55,56,89,19,
33,21,33,213,2,86,253,170,5,246,148,0,0,1,0,199,
5,41,3,57,6,72,0,13,0,87,64,14,11,240,4,7,
0,179,14,7,86,8,1,86,0,14,16,220,236,212,236,49,
0,16,244,60,212,236,48,0,75,176,9,84,88,189,0,14,
255,192,0,1,0,14,0,14,0,64,56,17,55,56,89,0,
75,176,15,84,75,176,16,84,91,75,176,17,84,91,88,189,
0,14,0,64,0,1,0,14,0,14,255,192,56,17,55,56,
89,19,51,30,1,51,50,54,55,51,14,1,35,34,38,199,
118,11,97,87,86,96,13,118,10,158,145,145,158,6,72,75,
75,74,76,143,144,144,0,1,1,154,5,68,2,102,6,16,
0,3,0,44,64,9,2,206,0,205,4,1,100,0,4,16,
212,236,49,0,16,252,236,48,0,75,176,9,84,88,189,0,
4,255,192,0,1,0,4,0,4,0,64,56,17,55,56,89,
1,51,21,35,1,154,204,204,6,16,204,0,0,2,0,238,
4,225,3,18,7,6,0,11,0,23,0,95,64,17,3,193,
21,242,9,193,15,241,24,0,86,12,120,6,86,18,24,16,
212,236,244,236,49,0,16,244,236,244,236,48,0,75,176,9,
84,75,176,12,84,91,88,189,0,24,255,192,0,1,0,24,
0,24,0,64,56,17,55,56,89,1,75,176,10,84,75,176,
11,84,91,75,176,12,84,91,88,189,0,24,255,192,0,1,
0,24,0,24,0,64,56,17,55,56,89,1,52,38,35,34,
6,21,20,22,51,50,54,55,20,6,35,34,38,53,52,54,
51,50,22,2,152,88,64,65,87,87,65,64,88,122,159,115,
115,159,159,115,115,159,5,244,63,88,87,64,65,87,88,64,
115,160,160,115,115,159,159,0,0,1,1,35,254,117,2,193,
0,0,0,19,0,31,64,14,9,6,10,13,243,6,0,19,
0,16,39,3,9,20,16,220,212,236,212,204,49,0,47,212,
252,196,18,57,48,33,22,22,21,20,6,35,34,38,39,53,
22,22,51,50,54,53,52,38,39,2,84,55,54,120,118,46,
87,43,34,74,47,59,60,43,45,62,105,48,89,91,12,12,
131,17,15,48,46,30,87,61,0,2,0,240,4,238,3,174,
6,102,0,3,0,7,0,66,64,17,6,2,180,4,0,179,
8,4,7,3,0,5,1,3,5,7,8,16,212,220,212,204,
17,57,17,18,57,49,0,16,244,60,236,50,48,0,75,176,
9,84,75,176,14,84,91,88,189,0,8,255,192,0,1,0,
8,0,8,0,64,56,17,55,56,89,1,51,3,35,3,51,
3,35,2,252,178,248,135,129,170,223,137,6,102,254,136,1,
120,254,136,0,0,1,1,76,254,117,2,193,0,0,0,19,
0,32,64,15,11,14,10,7,243,14,244,0,1,0,10,4,
39,17,20,16,212,236,196,212,204,49,0,47,252,252,196,18,
57,48,33,51,6,6,21,20,22,51,50,54,55,21,6,6,
35,34,38,53,52,54,1,184,119,45,43,55,54,32,62,31,
38,68,30,122,115,53,61,88,31,46,46,15,15,133,10,10,
87,93,48,105,0,1,0,193,4,238,3,63,6,102,0,6,
0,55,64,12,3,0,180,4,1,179,7,3,5,117,1,7,
16,220,236,57,49,0,16,244,60,236,57,48,0,75,176,9,
84,75,176,14,84,91,88,189,0,7,255,192,0,1,0,7,
0,7,0,64,56,17,55,56,89,1,3,51,23,55,51,3,
1,182,245,139,180,180,139,245,4,238,1,120,245,245,254,136,
0,1,255,242,0,0,4,117,5,213,0,13,0,63,64,30,
12,11,10,4,3,2,6,0,6,149,0,129,8,3,4,1,
11,14,0,4,5,1,28,12,7,58,9,0,121,14,16,244,
60,236,196,252,60,196,17,18,57,17,18,57,49,0,47,228,
236,17,23,57,48,180,48,15,80,15,2,1,93,19,51,17,
37,23,1,17,33,21,33,17,7,39,55,211,203,1,57,80,
254,119,2,215,252,94,148,77,225,5,213,253,152,219,111,254,
238,253,227,170,2,59,106,110,158,0,0,1,0,2,0,0,
2,72,6,20,0,11,0,94,64,26,10,9,8,4,3,2,
6,0,151,6,3,4,1,9,10,0,4,122,5,1,8,10,
122,7,0,12,16,212,60,228,252,60,228,17,18,57,17,18,
57,49,0,47,236,23,57,48,1,75,176,16,84,88,189,0,
12,0,64,0,1,0,12,0,12,255,192,56,17,55,56,89,
64,19,16,13,64,13,80,13,96,13,115,4,122,10,112,13,
224,13,240,13,9,93,19,51,17,55,23,7,17,35,17,7,
39,55,199,184,125,76,201,184,123,74,197,6,20,253,166,90,
106,141,252,227,2,154,88,106,141,0,255,255,0,135,255,227,
4,162,7,109,2,39,0,54,0,0,0,0,0,7,1,8,
0,139,1,117,255,255,0,111,255,227,3,199,6,102,2,39,
0,86,0,0,0,0,0,7,0,224,0,23,0,0,255,255,
0,92,0,0,5,31,7,109,2,39,0,61,0,0,0,0,
0,7,1,8,0,190,1,117,255,255,0,88,0,0,3,219,
6,102,2,39,0,93,0,0,0,0,0,7,0,224,0,27,
0,0,0,2,1,4,254,162,1,174,5,152,0,3,0,7,
0,28,64,13,1,245,0,4,245,5,8,4,0,5,6,2,
8,16,220,60,236,50,49,0,16,212,236,212,236,48,1,17,
35,17,19,17,35,17,1,174,170,170,170,1,152,253,10,2,
246,4,0,253,10,2,246,0,0,2,0,10,0,0,5,186,
5,213,0,12,0,25,0,103,64,32,16,9,169,11,13,149,
0,129,18,149,14,11,7,7,1,25,19,4,15,13,22,25,
4,50,10,17,13,28,8,0,121,26,16,244,60,236,50,196,
244,236,16,196,23,57,49,0,47,198,50,238,246,238,16,238,
50,48,64,40,32,27,127,27,176,27,3,159,9,159,10,159,
11,159,12,159,14,159,15,159,16,159,17,191,9,191,10,191,
11,191,12,191,14,191,15,191,16,191,17,16,93,1,93,19,
33,32,0,17,16,0,41,1,17,35,53,51,19,17,33,21,
33,17,51,32,0,17,16,0,33,211,1,160,1,177,1,150,
254,105,254,80,254,96,201,201,203,1,80,254,176,243,1,53,
1,31,254,225,254,203,5,213,254,151,254,128,254,126,254,150,
2,188,144,1,227,254,29,144,253,234,1,24,1,46,1,44,
1,23,0,2,0,113,255,227,4,117,6,20,0,14,0,40,
1,39,64,94,37,123,38,37,30,35,30,36,123,35,35,30,
15,123,35,30,40,123,39,40,30,35,30,38,39,40,39,37,
36,37,40,40,39,34,35,34,31,32,31,33,32,32,31,66,
40,39,38,37,34,33,32,31,8,35,30,3,15,35,3,185,
27,9,185,21,140,27,35,177,41,38,39,18,12,33,32,24,
40,37,35,34,31,5,30,15,6,12,18,18,81,6,18,24,
69,41,16,252,236,244,236,17,57,57,23,57,18,57,57,17,
18,57,57,49,0,16,236,196,244,236,16,238,18,57,18,57,
18,23,57,48,75,83,88,7,16,14,201,7,16,8,201,7,
16,8,201,7,16,14,201,7,16,8,237,7,14,237,7,16,
5,237,7,16,8,237,89,34,178,63,42,1,1,93,64,118,
22,37,43,31,40,34,47,35,47,36,41,37,45,38,45,39,
42,40,54,37,70,37,88,32,88,33,96,32,96,33,102,34,
117,32,117,33,117,34,19,37,35,37,36,38,38,38,39,39,
40,54,36,54,37,70,36,69,37,90,32,90,33,98,32,98,
33,127,0,127,1,127,2,122,3,123,9,127,10,127,11,127,
12,127,13,127,14,127,15,127,16,127,17,127,18,127,19,127,
20,123,21,122,27,122,28,127,29,127,30,118,32,118,33,120,
34,160,42,240,42,39,93,0,93,1,46,1,35,34,6,21,
20,22,51,50,54,53,52,38,19,22,18,21,20,0,35,34,
0,53,52,0,51,50,22,23,39,5,39,37,39,51,23,37,
23,5,3,70,50,88,41,167,185,174,146,145,174,54,9,126,
114,254,228,230,231,254,229,1,20,221,18,52,42,159,254,193,
33,1,25,181,228,127,1,77,33,254,217,3,147,17,16,216,
195,188,222,222,188,122,188,1,38,143,254,224,173,255,254,201,
1,55,255,250,1,55,5,5,180,107,99,92,204,145,111,97,
98,0,255,255,255,252,0,0,4,231,7,107,2,39,0,60,
0,0,0,0,0,7,1,4,0,115,1,117,255,255,0,61,
254,86,4,127,6,102,2,39,0,92,0,0,0,0,0,7,
0,141,0,94,0,0,0,2,0,201,0,0,4,141,5,213,
0,12,0,21,0,61,64,27,14,149,9,13,149,2,246,0,
129,11,21,15,9,3,4,1,18,25,6,63,13,10,1,28,
0,4,22,16,252,236,50,50,252,236,17,23,57,49,0,47,
244,252,236,212,236,48,64,9,15,23,31,23,63,23,95,23,
4,1,93,19,51,17,51,50,4,21,20,4,43,1,17,35,
19,17,51,50,54,53,52,38,35,201,202,254,251,1,1,254,
255,251,254,202,202,254,141,154,153,142,5,213,254,248,225,220,
220,226,254,174,4,39,253,209,146,134,134,145,0,2,0,186,
254,86,4,164,6,20,0,16,0,28,0,62,64,27,20,185,
5,8,26,185,0,14,140,8,184,1,189,3,151,29,17,18,
11,71,23,4,0,8,2,70,29,16,252,236,50,50,244,236,
49,0,16,236,228,228,244,196,236,16,198,238,48,64,9,96,
30,128,30,160,30,224,30,4,1,93,37,17,35,17,51,17,
62,1,51,50,18,17,16,2,35,34,38,1,52,38,35,34,
6,21,20,22,51,50,54,1,115,185,185,58,177,123,204,255,
255,204,123,177,2,56,167,146,146,167,167,146,146,167,168,253,
174,7,190,253,162,100,97,254,188,254,248,254,248,254,188,97,
1,235,203,231,231,203,203,231,231,0,0,1,0,217,2,45,
5,219,2,215,0,3,0,17,182,0,156,2,4,1,0,4,
16,212,196,49,0,16,212,236,48,19,33,21,33,217,5,2,
250,254,2,215,170,0,0,1,1,25,0,63,5,156,4,197,
0,11,0,133,64,77,10,156,11,10,7,8,7,9,156,8,
8,7,4,156,3,4,7,7,6,5,156,6,7,6,4,156,
5,4,1,2,1,3,156,2,2,1,11,156,0,1,0,10,
156,9,10,1,1,0,66,10,8,7,6,4,2,1,0,8,
5,3,11,9,12,11,10,9,7,5,4,3,1,8,2,0,
8,6,12,16,212,60,204,50,23,57,49,0,16,212,60,204,
50,23,57,48,75,83,88,7,16,8,237,7,16,5,237,7,
16,5,237,7,16,8,237,7,16,5,237,7,16,8,237,7,
16,5,237,7,16,8,237,89,34,9,2,7,1,1,39,1,
1,55,1,1,5,156,254,55,1,201,119,254,53,254,53,118,
1,200,254,56,118,1,203,1,203,4,76,254,53,254,55,121,
1,203,254,53,121,1,201,1,203,121,254,53,1,203,0,1,
0,137,2,156,2,197,5,223,0,10,0,44,64,24,7,0,
221,9,3,221,4,2,221,9,247,5,145,11,8,124,6,93,
3,124,1,124,0,11,16,220,244,228,252,228,49,0,16,244,
236,236,212,236,16,238,50,48,19,51,17,7,53,55,51,17,
51,21,33,156,204,223,230,137,205,253,215,3,10,2,99,41,
116,39,253,43,110,0,0,1,0,94,2,156,2,180,5,240,
0,24,0,74,64,36,0,125,6,4,0,23,125,6,6,4,
66,4,2,0,14,221,15,0,221,2,247,11,221,15,18,145,
25,0,14,8,126,1,21,14,3,25,16,220,196,212,196,236,
17,57,49,0,16,244,196,236,252,236,16,238,17,18,57,48,
75,83,88,7,16,5,237,23,50,7,5,237,89,34,1,33,
21,33,53,54,55,0,53,52,38,35,34,6,7,53,54,54,
51,50,22,21,20,1,6,1,12,1,168,253,170,34,63,1,
88,104,85,52,122,72,77,133,57,145,174,254,181,56,3,14,
114,110,31,56,1,49,94,66,81,35,35,123,28,28,132,108,
139,254,228,48,0,1,0,98,2,141,2,205,5,240,0,40,
0,72,64,39,0,21,19,10,221,9,31,221,32,19,221,21,
13,221,9,248,6,247,28,221,32,248,35,145,41,22,19,0,
20,25,126,38,16,126,3,20,31,9,41,16,220,196,196,212,
236,212,236,17,57,57,57,49,0,16,244,228,236,252,228,236,
212,236,16,238,16,238,17,18,57,48,1,22,22,21,20,6,
35,34,38,39,53,22,22,51,50,54,53,52,38,35,35,53,
51,50,54,53,52,38,35,34,6,7,53,54,54,51,50,22,
21,20,6,2,12,92,101,190,177,57,125,70,52,119,67,109,
120,111,108,86,94,94,97,100,95,40,102,81,73,128,55,144,
169,90,4,96,18,109,82,124,134,21,20,121,27,26,79,70,
74,76,108,63,60,58,61,18,23,115,17,18,118,99,69,96,
255,255,0,137,255,227,7,127,5,240,0,39,0,240,0,0,
0,0,0,39,0,188,3,53,0,0,0,7,1,9,4,139,
253,100,255,255,0,137,255,227,7,63,5,240,0,39,0,240,
0,0,0,0,0,39,0,188,3,53,0,0,0,7,0,241,
4,139,253,100,255,255,0,98,255,227,7,127,5,240,0,39,
0,242,0,0,0,0,0,39,0,188,3,53,0,0,0,7,
1,9,4,139,253,100,255,255,0,115,255,227,5,139,7,109,
2,39,0,42,0,0,0,0,0,7,1,10,1,27,1,117,
255,255,0,113,254,86,4,90,6,72,2,39,0,74,0,0,
0,0,0,7,0,218,0,139,0,0,255,255,0,201,0,0,
1,149,7,80,2,39,0,44,0,0,0,0,0,7,1,11,
255,47,1,117,255,255,0,135,254,117,4,162,5,240,2,39,
0,54,0,0,0,0,0,7,0,221,0,139,0,0,255,255,
0,111,254,117,3,199,4,123,2,39,0,86,0,0,0,0,
0,7,0,221,0,23,0,0,255,255,0,115,255,227,5,39,
7,107,2,39,0,38,0,0,0,0,0,7,1,4,1,45,
1,117,255,255,0,113,255,227,3,231,6,102,2,39,0,70,
0,0,0,0,0,7,0,141,0,137,0,0,255,255,0,115,
255,227,5,39,7,109,2,39,0,38,0,0,0,0,0,7,
1,8,1,45,1,117,255,255,0,113,255,227,3,231,6,102,
2,39,0,70,0,0,0,0,0,7,0,224,0,137,0,0,
0,2,0,113,255,227,4,244,6,20,0,24,0,36,0,74,
64,36,7,3,211,9,1,249,34,185,0,22,28,185,13,16,
140,22,184,5,151,11,2,31,12,4,3,0,8,8,10,6,
71,25,18,19,69,37,16,252,236,244,60,196,252,23,60,196,
49,0,47,236,228,244,196,236,16,196,238,253,60,238,50,48,
182,96,38,128,38,160,38,3,1,93,1,17,33,53,33,53,
51,21,51,21,35,17,35,53,14,1,35,34,2,17,16,18,
51,50,22,1,20,22,51,50,54,53,52,38,35,34,6,3,
162,254,186,1,70,184,154,154,184,58,177,124,203,255,255,203,
124,177,253,199,167,146,146,168,168,146,146,167,3,182,1,78,
125,147,147,125,250,252,168,100,97,1,68,1,8,1,8,1,
68,97,254,21,203,231,231,203,203,231,231,0,0,1,0,100,
1,223,2,127,2,131,0,3,0,17,182,0,156,2,4,1,
0,4,16,220,204,49,0,16,212,236,48,19,33,21,33,100,
2,27,253,229,2,131,164,0,0,1,0,219,2,72,1,174,
3,70,0,3,0,18,183,2,131,0,4,1,25,0,4,16,
212,236,49,0,16,212,236,48,19,51,21,35,219,211,211,3,
70,254,0,1,0,0,255,227,4,143,5,240,0,49,1,28,
64,58,32,18,211,34,16,43,7,211,9,25,161,26,174,22,
149,29,1,161,0,174,4,149,47,145,29,140,41,9,50,43,
34,33,41,35,38,18,16,10,3,13,9,17,8,44,32,38,
19,7,17,8,17,13,28,25,0,38,42,33,47,60,212,196,
50,252,196,196,18,57,57,18,57,57,17,18,57,17,23,57,
18,57,57,17,57,57,49,0,16,196,50,228,244,236,244,236,
16,238,246,238,16,238,50,221,60,238,50,48,1,75,176,9,
84,75,176,12,84,91,75,176,13,84,91,75,176,15,84,91,
75,176,23,84,91,75,176,24,84,91,88,189,0,50,255,192,
0,1,0,50,0,50,0,64,56,17,55,56,89,64,122,14,
0,14,1,11,2,11,49,84,20,105,12,108,14,110,15,111,
16,111,17,111,18,111,19,105,20,107,31,111,32,111,33,111,
34,111,35,110,36,108,37,105,39,105,45,159,7,159,8,159,
9,159,10,159,11,159,12,159,13,159,14,159,15,159,16,159,
17,159,18,159,19,150,31,159,32,159,33,159,34,159,35,159,
36,159,37,159,38,159,39,159,40,159,41,159,42,159,43,159,
44,157,45,50,0,8,0,9,16,8,16,9,32,8,32,9,
85,21,83,30,106,21,103,31,10,93,0,93,1,21,46,1,
35,34,6,7,33,7,33,14,1,21,20,22,23,33,7,33,
30,1,51,50,54,55,21,14,1,35,34,0,3,35,55,51,
52,38,53,52,54,53,35,55,51,18,0,51,50,22,4,143,
91,169,102,157,202,32,2,65,55,253,230,2,1,1,2,1,
190,56,254,138,32,202,157,102,169,91,89,185,96,237,254,203,
40,211,55,139,1,1,194,55,156,40,1,54,236,98,185,5,
98,213,105,90,200,187,123,24,46,35,32,46,24,123,187,202,
90,105,211,72,72,1,34,1,3,123,23,47,32,35,47,23,
123,1,1,1,34,71,0,2,0,215,5,14,3,41,5,217,
0,3,0,7,0,165,64,13,4,0,206,6,2,8,1,100,
0,5,100,4,8,16,212,252,220,236,49,0,16,212,60,236,
50,48,0,75,176,14,84,75,176,17,84,91,88,189,0,8,
0,64,0,1,0,8,0,8,255,192,56,17,55,56,89,1,
75,176,14,84,75,176,13,84,91,75,176,23,84,91,88,189,
0,8,255,192,0,1,0,8,0,8,0,64,56,17,55,56,
89,1,75,176,17,84,75,176,25,84,91,88,189,0,8,0,
64,0,1,0,8,0,8,255,192,56,17,55,56,89,0,75,
176,24,84,88,189,0,8,255,192,0,1,0,8,0,8,0,
64,56,17,55,56,89,64,17,96,1,96,2,96,5,96,6,
112,1,112,2,112,5,112,6,8,1,93,1,51,21,35,37,
51,21,35,2,94,203,203,254,121,203,203,5,217,203,203,203,
0,1,1,115,4,238,2,240,5,246,0,3,0,127,64,17,
2,3,0,3,1,0,0,3,66,0,2,250,4,1,3,3,
4,16,196,16,192,49,0,16,244,204,48,75,83,88,7,16,
5,201,7,16,5,201,89,34,0,75,176,12,84,88,189,0,
4,255,192,0,1,0,4,0,4,0,64,56,17,55,56,89,
0,75,176,14,84,88,189,0,4,0,64,0,1,0,4,0,
4,255,192,56,17,55,56,89,64,32,6,2,21,2,37,1,
37,2,54,2,70,2,86,2,106,1,103,2,9,15,0,15,
1,31,0,31,1,47,0,47,1,6,93,1,93,1,51,3,
35,2,55,185,228,153,5,246,254,248,0,1,0,182,5,14,
3,74,5,233,0,29,0,117,64,33,22,16,15,3,19,12,
7,1,0,3,8,23,12,195,4,19,195,27,8,250,30,16,
1,15,0,7,22,86,24,7,86,9,30,16,212,236,212,236,
17,57,57,57,57,49,0,16,244,60,236,212,236,50,18,23,
57,17,18,23,57,48,0,75,176,12,84,88,189,0,30,255,
192,0,1,0,30,0,30,0,64,56,17,55,56,89,0,75,
176,14,84,88,189,0,30,0,64,0,1,0,30,0,30,255,
192,56,17,55,56,89,180,16,11,31,26,2,93,1,39,46,
1,35,34,6,29,1,35,52,54,51,50,22,31,1,30,1,
51,50,54,61,1,51,14,1,35,34,38,1,252,57,25,31,
12,36,40,125,103,86,36,61,48,57,23,34,15,32,40,125,
2,103,84,34,59,5,57,33,14,11,50,45,6,101,118,16,
27,30,13,12,51,41,6,100,119,16,0,1,1,12,4,238,
2,139,5,246,0,3,0,137,64,17,1,2,3,2,0,3,
3,2,66,0,1,250,4,1,3,3,4,16,196,16,192,49,
0,16,244,204,48,75,83,88,7,16,5,201,7,16,5,201,
89,34,0,75,176,12,84,88,189,0,4,255,192,0,1,0,
4,0,4,0,64,56,17,55,56,89,0,75,176,14,84,88,
189,0,4,0,64,0,1,0,4,0,4,255,192,56,17,55,
56,89,64,42,6,0,6,1,22,0,18,1,36,0,36,1,
53,1,67,1,85,0,85,1,159,0,159,1,175,0,175,1,
14,15,0,15,3,31,0,31,3,47,0,47,3,6,93,1,
93,1,19,35,3,1,199,196,153,230,5,246,254,248,1,8,
0,1,0,207,4,238,3,49,5,248,0,6,0,119,64,10,
4,0,5,2,250,7,4,2,6,7,16,212,196,57,49,0,
16,244,60,196,57,48,0,75,176,12,84,88,189,0,7,255,
192,0,1,0,7,0,7,0,64,56,17,55,56,89,0,75,
176,14,84,88,189,0,7,0,64,0,1,0,7,0,7,255,
192,56,17,55,56,89,1,75,176,14,84,88,189,0,7,255,
192,0,1,0,7,0,7,0,64,56,17,55,56,89,64,19,
15,0,15,1,12,4,31,0,31,1,29,4,47,0,47,1,
45,4,9,0,93,1,51,19,35,39,7,35,1,162,188,211,
139,166,166,139,5,248,254,246,178,178,0,1,0,207,4,238,
3,49,5,248,0,6,0,134,64,10,3,4,1,0,250,7,
3,5,1,7,16,212,196,57,49,0,16,244,196,50,57,48,
0,75,176,12,84,75,176,9,84,91,75,176,10,84,91,75,
176,11,84,91,88,189,0,7,255,192,0,1,0,7,0,7,
0,64,56,17,55,56,89,0,75,176,14,84,88,189,0,7,
0,64,0,1,0,7,0,7,255,192,56,17,55,56,89,1,
75,176,14,84,88,189,0,7,255,192,0,1,0,7,0,7,
0,64,56,17,55,56,89,64,19,0,0,3,3,0,6,16,
0,18,3,16,6,32,0,34,3,32,6,9,0,93,1,3,
51,23,55,51,3,1,162,211,139,166,166,139,211,4,238,1,
10,178,178,254,246,0,0,2,0,63,2,156,2,244,5,223,
0,2,0,13,0,212,64,22,0,3,11,7,221,5,1,9,
247,3,145,14,1,12,10,0,93,6,8,4,12,14,16,220,
212,60,196,236,50,17,57,49,0,16,244,252,212,60,236,50,
18,57,48,1,75,176,14,84,75,176,15,84,91,75,176,16,
84,91,75,176,17,84,91,75,176,11,84,91,75,176,10,84,
91,88,189,0,14,0,64,0,1,0,14,0,14,255,192,56,
17,55,56,89,0,75,176,17,84,75,176,14,84,91,88,189,
0,14,255,192,0,1,0,14,0,14,0,64,56,17,55,56,
89,64,84,11,1,29,1,47,1,57,1,73,1,70,3,89,
3,105,3,139,3,171,3,187,3,11,1,0,15,1,15,2,
15,5,15,6,15,7,15,8,15,11,15,12,15,13,19,0,
31,1,31,2,31,5,31,6,31,7,31,8,31,11,31,12,
31,13,34,0,53,0,71,0,75,13,83,0,91,13,101,0,
132,0,165,0,181,0,30,93,1,93,9,1,33,3,51,17,
51,21,35,21,35,53,33,53,1,221,254,203,1,53,22,166,
135,135,144,254,98,5,102,254,93,2,28,253,228,109,186,186,
121,0,0,1,0,199,5,6,3,57,5,248,0,13,0,106,
64,14,7,0,4,195,11,250,14,7,86,8,1,86,0,14,
16,212,236,212,236,49,0,16,244,252,196,50,48,0,75,176,
12,84,88,189,0,14,255,192,0,1,0,14,0,14,0,64,
56,17,55,56,89,0,75,176,14,84,88,189,0,14,0,64,
0,1,0,14,0,14,255,192,56,17,55,56,89,1,75,176,
14,84,75,176,15,84,91,88,189,0,14,255,192,0,1,0,
14,0,14,0,64,56,17,55,56,89,19,51,30,1,51,50,
54,55,51,14,1,35,34,38,199,118,13,99,83,82,97,16,
118,10,160,143,144,159,5,248,54,57,55,56,119,123,122,0,
0,1,1,154,5,14,2,102,5,219,0,3,0,17,182,0,
2,250,4,1,0,4,16,212,204,49,0,16,244,204,48,1,
51,21,35,1,154,204,204,5,219,205,0,0,0,0,0,2,
0,1,0,0,0,0,0,20,0,3,0,1,0,0,1,26,
0,0,1,6,0,0,1,0,0,0,0,0,0,0,1,3,
0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,3,4,5,6,7,8,9,10,11,12,
13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,
29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,
45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,
61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,
77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,
93,94,95,96,97,0,98,99,100,101,102,103,104,105,106,107,
108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,
124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,
140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,
156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,
172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,
204,205,206,207,208,209,0,210,211,212,213,214,215,216,217,218,
219,220,221,222,223,224,0,4,2,62,0,0,0,58,0,32,
0,4,0,26,0,126,0,255,1,7,1,17,1,31,1,49,
1,66,1,83,1,97,1,120,1,126,1,146,2,199,2,221,
3,169,3,192,32,38,32,48,32,58,32,172,33,34,34,6,
34,30,34,43,34,72,34,101,37,202,251,2,255,255,0,0,
0,32,0,160,1,6,1,12,1,30,1,48,1,65,1,82,
1,94,1,120,1,125,1,146,2,198,2,216,3,169,3,192,
32,19,32,48,32,57,32,172,33,34,34,2,34,15,34,43,
34,72,34,96,37,202,251,1,255,255,255,227,0,0,255,245,
0,0,255,216,0,0,255,160,255,94,0,0,255,67,255,104,
255,20,0,0,0,0,252,246,252,219,0,0,224,150,224,133,
224,86,223,106,0,0,0,0,222,113,222,95,0,0,218,239,
5,191,0,1,0,0,0,56,0,0,0,244,0,0,0,252,
0,0,0,0,0,250,0,0,0,0,0,0,0,250,0,252,
0,0,0,0,1,2,0,0,0,0,0,0,0,0,1,32,
1,40,0,0,0,0,1,66,0,0,0,0,0,0,0,172,
0,163,0,132,0,133,0,189,0,150,0,231,0,134,0,142,
0,139,0,157,0,169,0,164,1,0,0,138,0,217,0,131,
0,147,0,241,0,242,0,141,0,151,0,136,0,195,0,221,
0,240,0,158,0,170,0,243,0,244,0,245,0,162,0,173,
0,201,0,199,0,174,0,98,0,99,0,144,0,100,0,203,
0,101,0,200,0,202,0,207,0,204,0,205,0,206,0,232,
0,102,0,210,0,208,0,209,0,175,0,103,0,239,0,145,
0,213,0,211,0,212,0,104,0,234,0,236,0,137,0,106,
0,105,0,107,0,109,0,108,0,110,0,160,0,111,0,113,
0,112,0,114,0,115,0,117,0,116,0,118,0,119,0,233,
0,120,0,122,0,121,0,123,0,125,0,124,0,184,0,161,
0,127,0,126,0,128,0,129,0,235,0,237,0,186,0,253,
0,254,0,0,0,0,0,0,0,255,0,248,0,214,0,249,
0,250,0,227,0,228,0,215,0,224,0,218,0,219,0,220,
0,223,0,216,0,222,0,178,0,179,0,0,0,0,0,0,
0,182,0,183,0,196,0,0,0,180,0,181,0,197,0,0,
0,130,0,194,0,135,0,0,0,0,0,0,0,171,0,152,
0,0,0,0,0,0,0,168,0,154,0,0,0,153,0,238,
0,0,0,0,0,188,0,0,0,0,0,0,1,1,0,165,
0,0,0,0,0,0,0,146,0,143,0,0,0,0,0,0,
0,148,0,149,4,205,0,102,0,0,0,0,2,139,0,0,
2,139,0,0,3,53,1,53,3,174,0,197,6,180,0,158,
5,23,0,170,7,154,0,113,6,61,0,129,2,51,0,197,
3,31,0,176,3,31,0,164,4,0,0,61,6,180,0,217,
2,139,0,158,2,227,0,100,2,139,0,219,2,178,0,0,
5,23,0,135,5,23,0,225,5,23,0,150,5,23,0,156,
5,23,0,100,5,23,0,158,5,23,0,143,5,23,0,168,
5,23,0,139,5,23,0,129,2,178,0,240,2,178,0,158,
6,180,0,217,6,180,0,217,6,180,0,217,4,63,0,147,
8,0,0,135,5,121,0,16,5,125,0,201,5,150,0,115,
6,41,0,201,5,14,0,201,4,154,0,201,6,51,0,115,
6,4,0,201,2,92,0,201,2,92,255,150,5,63,0,201,
4,117,0,201,6,231,0,201,5,252,0,201,6,76,0,115,
4,211,0,201,6,76,0,115,5,143,0,201,5,20,0,135,
4,227,255,250,5,219,0,178,5,121,0,16,7,233,0,68,
5,123,0,61,4,227,255,252,5,123,0,92,3,31,0,176,
2,178,0,0,3,31,0,199,6,180,0,217,4,0,255,236,
4,0,0,170,4,231,0,123,5,20,0,186,4,102,0,113,
5,20,0,113,4,236,0,113,2,209,0,47,5,20,0,113,
5,18,0,186,2,57,0,193,2,57,255,219,4,162,0,186,
2,57,0,193,7,203,0,186,5,18,0,186,4,229,0,113,
5,20,0,186,5,20,0,113,3,74,0,186,4,43,0,111,
3,35,0,55,5,18,0,174,4,188,0,61,6,139,0,86,
4,188,0,59,4,188,0,61,4,51,0,88,5,23,1,0,
2,178,1,4,5,23,1,0,6,180,0,217,5,121,0,16,
5,121,0,16,5,150,0,115,5,14,0,201,5,252,0,201,
6,76,0,115,5,219,0,178,4,231,0,123,4,231,0,123,
4,231,0,123,4,231,0,123,4,231,0,123,4,231,0,123,
4,102,0,113,4,236,0,113,4,236,0,113,4,236,0,113,
4,236,0,113,2,57,0,144,2,57,255,199,2,57,255,222,
2,57,255,244,5,18,0,186,4,229,0,113,4,229,0,113,
4,229,0,113,4,229,0,113,4,229,0,113,5,18,0,174,
5,18,0,174,5,18,0,174,5,18,0,174,4,0,0,57,
4,0,0,195,5,23,0,172,5,23,0,129,4,0,0,92,
4,184,1,51,5,23,0,158,5,10,0,186,8,0,1,27,
8,0,1,27,8,0,1,39,4,0,1,115,4,0,0,215,
6,180,0,217,7,203,0,8,6,76,0,102,6,170,0,221,
6,180,0,217,6,180,0,217,6,180,0,217,5,23,0,82,
5,23,0,174,4,35,0,104,5,100,0,25,6,14,0,156,
4,182,255,225,4,43,0,47,3,197,0,115,3,197,0,96,
6,29,0,78,7,219,0,123,4,229,0,72,4,63,0,143,
3,53,1,53,6,180,0,217,5,25,0,61,5,23,0,31,
6,180,0,217,5,90,255,250,4,229,0,158,4,229,0,193,
8,0,0,236,5,23,0,0,5,121,0,16,5,121,0,16,
6,76,0,115,8,143,0,115,8,47,0,113,4,0,0,0,
8,0,0,0,4,37,0,174,4,37,0,174,2,139,0,174,
2,139,0,178,6,180,0,217,3,244,0,6,4,188,0,61,
4,227,255,252,1,86,254,137,5,23,0,94,3,51,0,158,
3,51,0,193,5,10,0,47,5,10,0,47,4,0,0,57,
2,139,0,219,2,139,0,174,4,37,0,174,10,188,0,113,
5,121,0,16,5,14,0,201,5,121,0,16,5,14,0,201,
5,14,0,201,2,92,0,162,2,92,255,254,2,92,0,6,
2,92,0,59,6,76,0,115,6,76,0,115,6,76,0,115,
5,219,0,178,5,219,0,178,5,219,0,178,2,57,0,193,
4,0,0,193,4,0,0,182,4,0,0,213,4,0,0,199,
4,0,1,154,4,0,0,238,4,0,1,35,4,0,0,240,
4,0,1,76,4,0,0,193,4,127,255,242,2,70,0,2,
5,20,0,135,4,43,0,111,5,123,0,92,4,51,0,88,
2,178,1,4,6,51,0,10,4,229,0,113,4,227,255,252,
4,188,0,61,4,215,0,201,5,20,0,186,6,180,0,217,
6,180,1,25,3,53,0,137,3,53,0,94,3,53,0,98,
7,193,0,137,7,193,0,137,7,193,0,98,6,51,0,115,
5,20,0,113,2,92,0,201,5,20,0,135,4,43,0,111,
5,150,0,115,4,102,0,113,5,150,0,115,4,102,0,113,
5,20,0,113,2,227,0,100,2,139,0,219,5,23,0,0,
4,0,0,215,4,0,1,115,4,0,0,182,4,0,1,12,
4,0,0,207,4,0,0,207,3,53,0,63,4,0,0,199,
4,0,1,154,0,2,0,0,0,0,0,0,255,43,0,143,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,12,0,0,0,1,0,2,0,3,0,4,
0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,
0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,
0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,
0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,
0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,
0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,
0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,
0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,
0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,
0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,
0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,
0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,
0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,
0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,
0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,
0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,
0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,
0,141,0,142,0,143,0,144,0,145,0,146,0,147,0,148,
0,149,0,150,0,151,0,152,0,153,0,154,0,155,0,156,
0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,
0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,
0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,
0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,
0,189,0,190,0,191,0,192,0,193,0,194,0,195,0,196,
0,197,0,198,0,199,0,200,0,201,0,202,0,203,0,204,
0,205,0,206,0,207,0,208,0,209,0,211,0,212,0,213,
0,214,0,215,0,216,0,217,0,218,0,219,0,220,0,221,
0,222,0,223,0,224,0,225,0,226,0,227,0,228,0,229,
0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,
0,238,0,239,0,240,0,241,0,242,0,243,0,245,0,244,
0,246,0,248,0,249,0,250,0,251,0,252,0,253,0,254,
0,255,1,0,1,1,1,2,1,3,1,4,1,5,1,6,
1,7,1,8,1,9,1,10,1,11,1,12,1,13,9,115,
102,116,104,121,112,104,101,110,14,112,101,114,105,111,100,99,
101,110,116,101,114,101,100,4,69,117,114,111,5,99,54,52,
53,57,5,99,54,52,54,48,5,99,54,52,54,49,5,99,
54,52,54,50,5,99,54,52,54,51,5,99,54,52,54,54,
5,99,54,52,54,55,5,99,54,52,54,56,5,99,54,52,
54,57,0,0,0,0,0,34,0,34,0,34,0,34,0,88,
0,147,0,255,1,182,2,79,3,131,3,178,3,246,4,33,
4,110,4,152,4,180,4,202,4,222,5,3,5,69,5,130,
6,5,6,126,6,225,7,76,7,183,7,252,8,101,8,207,
8,238,9,22,9,82,9,115,9,174,10,31,10,223,11,88,
11,176,11,251,12,58,12,105,12,147,12,230,13,20,13,61,
13,122,14,13,14,47,14,172,15,0,15,69,15,133,15,235,
16,117,16,241,17,41,17,112,17,224,18,189,19,138,19,235,
20,80,20,139,20,177,20,225,21,3,21,24,21,64,21,214,
22,34,22,109,22,185,23,35,23,123,23,223,24,27,24,67,
24,128,24,248,25,22,25,119,25,179,26,4,26,82,26,161,
26,216,27,135,27,196,28,0,28,157,29,186,30,135,31,119,
31,232,32,91,32,114,32,243,33,53,33,66,33,226,33,239,
33,252,34,9,34,22,34,35,34,48,34,61,34,74,34,87,
34,100,34,113,34,126,34,139,34,152,34,165,34,178,34,191,
34,204,34,217,34,230,34,243,35,0,35,13,35,26,35,39,
35,52,35,65,35,78,35,91,35,104,35,148,35,207,36,52,
36,143,37,51,37,83,37,129,38,20,38,186,39,75,39,144,
39,183,40,19,40,88,40,195,41,95,42,37,42,92,42,163,
42,233,43,122,43,211,44,68,44,143,44,177,45,80,45,160,
46,14,46,82,46,170,47,135,48,65,48,189,49,5,49,33,
49,80,49,207,50,72,50,122,50,223,51,70,51,112,51,112,
51,125,51,138,51,151,51,230,52,122,52,143,52,163,52,209,
52,255,53,28,53,57,53,103,53,145,53,158,53,171,53,207,
54,91,54,147,54,205,55,67,55,169,55,235,56,0,56,28,
56,74,57,15,57,28,57,41,57,54,57,67,57,80,57,93,
57,106,57,119,57,132,57,145,57,158,57,171,57,184,57,197,
57,210,57,239,58,28,58,123,58,160,58,229,59,8,59,94,
59,142,59,196,59,244,60,34,60,95,60,167,60,180,60,193,
60,206,60,219,60,254,61,99,62,59,62,72,62,85,62,152,
62,231,62,253,63,97,63,141,63,220,64,58,64,75,64,92,
64,109,64,122,64,135,64,148,64,161,64,174,64,187,64,200,
64,213,64,226,65,64,65,86,65,107,66,69,66,170,66,247,
67,95,67,178,67,255,68,85,68,219,69,42,69,63,0,0,
0,0,0,1,0,0,45,134,0,1,7,148,24,0,0,10,
21,120,0,16,0,36,255,211,0,16,0,37,255,183,0,16,
0,38,0,0,0,16,0,39,0,0,0,16,0,41,0,0,
0,16,0,42,0,75,0,16,0,43,0,0,0,16,0,45,
0,114,0,16,0,46,0,0,0,16,0,47,0,0,0,16,
0,50,0,57,0,16,0,51,0,0,0,16,0,52,0,75,
0,16,0,53,0,0,0,16,0,55,255,68,0,16,0,57,
255,136,0,16,0,58,255,173,0,16,0,59,255,154,0,16,
0,60,255,13,0,16,0,61,0,0,0,16,0,73,0,0,
0,16,0,81,0,0,0,16,0,82,0,38,0,16,0,85,
0,0,0,16,0,89,255,201,0,16,0,90,0,0,0,16,
0,92,255,220,0,16,0,98,255,211,0,16,0,100,0,0,
0,16,0,103,0,57,0,16,0,120,0,0,0,16,0,121,
0,38,0,16,0,122,0,38,0,16,0,123,0,38,0,16,
0,124,0,38,0,16,0,125,0,38,0,16,0,137,0,0,
0,16,0,144,0,0,0,16,0,173,255,211,0,16,0,174,
255,211,0,16,0,175,0,57,0,16,0,186,255,220,0,16,
0,187,255,13,0,16,0,199,255,211,0,16,0,201,255,211,
0,16,0,208,0,57,0,16,0,209,0,57,0,16,0,210,
0,57,0,16,0,229,0,0,0,16,0,233,0,0,0,16,
0,234,255,13,0,16,0,235,255,220,0,16,0,236,0,0,
0,16,0,246,0,75,0,16,0,251,0,0,0,16,0,253,
0,0,0,36,0,16,255,211,0,36,0,17,255,220,0,36,
0,29,255,220,0,36,0,36,0,57,0,36,0,38,255,220,
0,36,0,42,255,220,0,36,0,50,255,220,0,36,0,52,
255,220,0,36,0,54,0,0,0,36,0,55,255,97,0,36,
0,56,0,0,0,36,0,57,255,125,0,36,0,58,255,144,
0,36,0,59,0,0,0,36,0,60,255,97,0,36,0,70,
255,220,0,36,0,71,255,220,0,36,0,72,255,220,0,36,
0,73,255,183,0,36,0,82,255,220,0,36,0,84,255,220,
0,36,0,87,255,220,0,36,0,88,0,0,0,36,0,89,
255,136,0,36,0,90,255,173,0,36,0,92,255,117,0,36,
0,98,0,57,0,36,0,100,255,220,0,36,0,103,255,220,
0,36,0,104,0,0,0,36,0,111,255,220,0,36,0,112,
255,220,0,36,0,113,255,220,0,36,0,114,255,220,0,36,
0,115,255,220,0,36,0,121,255,220,0,36,0,122,255,220,
0,36,0,123,255,220,0,36,0,124,255,220,0,36,0,125,
255,220,0,36,0,126,0,0,0,36,0,127,0,0,0,36,
0,128,0,0,0,36,0,129,0,0,0,36,0,169,255,183,
0,36,0,170,0,0,0,36,0,173,0,57,0,36,0,174,
0,57,0,36,0,175,255,220,0,36,0,180,254,248,0,36,
0,181,255,3,0,36,0,186,255,117,0,36,0,187,255,97,
0,36,0,197,0,47,0,36,0,199,0,57,0,36,0,201,
0,57,0,36,0,208,255,220,0,36,0,209,255,220,0,36,
0,210,255,220,0,36,0,211,0,0,0,36,0,212,0,0,
0,36,0,213,0,0,0,36,0,227,0,0,0,36,0,234,
255,97,0,36,0,235,255,117,0,36,0,246,255,220,0,36,
0,249,0,0,0,36,0,251,255,220,0,36,0,252,255,220,
0,36,0,253,255,220,0,36,0,254,255,220,0,37,0,16,
0,0,0,37,0,38,255,220,0,37,0,42,255,220,0,37,
0,50,255,220,0,37,0,54,255,220,0,37,0,57,255,193,
0,37,0,58,255,183,0,37,0,60,255,144,0,37,0,100,
255,220,0,37,0,103,255,220,0,37,0,169,255,193,0,37,
0,170,255,220,0,37,0,175,255,220,0,37,0,180,255,144,
0,37,0,181,255,144,0,37,0,187,255,144,0,37,0,197,
255,173,0,37,0,208,255,220,0,37,0,209,255,220,0,37,
0,210,255,220,0,37,0,227,255,220,0,37,0,234,255,144,
0,37,0,246,255,220,0,37,0,249,255,220,0,37,0,251,
255,220,0,37,0,253,255,220,0,38,0,16,0,0,0,38,
0,36,0,0,0,38,0,54,0,0,0,38,0,60,255,220,
0,38,0,98,0,0,0,38,0,169,255,220,0,38,0,170,
255,220,0,38,0,173,0,0,0,38,0,174,0,0,0,38,
0,180,0,0,0,38,0,181,0,38,0,38,0,187,255,220,
0,38,0,197,0,0,0,38,0,199,0,0,0,38,0,201,
0,0,0,38,0,227,0,0,0,38,0,234,255,220,0,38,
0,249,0,0,0,39,0,16,0,0,0,39,0,36,255,220,
0,39,0,57,255,220,0,39,0,58,0,0,0,39,0,60,
255,144,0,39,0,98,255,220,0,39,0,169,255,220,0,39,
0,170,255,220,0,39,0,173,255,220,0,39,0,174,255,220,
0,39,0,180,255,211,0,39,0,181,255,201,0,39,0,187,
255,144,0,39,0,197,255,68,0,39,0,199,255,220,0,39,
0,201,255,220,0,39,0,234,255,144,0,41,0,16,0,0,
0,41,0,17,254,183,0,41,0,29,255,97,0,41,0,36,
255,68,0,41,0,54,255,220,0,41,0,55,255,220,0,41,
0,68,255,68,0,41,0,72,255,144,0,41,0,76,255,107,
0,41,0,82,255,183,0,41,0,85,255,107,0,41,0,88,
255,144,0,41,0,92,255,68,0,41,0,98,255,68,0,41,
0,105,255,68,0,41,0,106,255,68,0,41,0,107,255,68,
0,41,0,108,255,68,0,41,0,109,255,68,0,41,0,110,
255,68,0,41,0,112,255,144,0,41,0,113,255,144,0,41,
0,114,255,144,0,41,0,115,255,144,0,41,0,121,255,183,
0,41,0,122,255,183,0,41,0,123,255,183,0,41,0,124,
255,183,0,41,0,125,255,183,0,41,0,126,255,144,0,41,
0,127,255,144,0,41,0,128,255,144,0,41,0,129,255,144,
0,41,0,169,0,0,0,41,0,170,0,0,0,41,0,173,
255,68,0,41,0,174,255,68,0,41,0,180,255,211,0,41,
0,181,0,0,0,41,0,186,255,68,0,41,0,197,254,136,
0,41,0,199,255,68,0,41,0,201,255,68,0,41,0,227,
255,220,0,41,0,235,255,68,0,41,0,249,255,220,0,42,
0,16,0,0,0,42,0,36,0,0,0,42,0,55,255,183,
0,42,0,58,0,0,0,42,0,60,255,154,0,42,0,98,
0,0,0,42,0,169,255,220,0,42,0,170,255,220,0,42,
0,173,0,0,0,42,0,174,0,0,0,42,0,180,255,211,
0,42,0,181,255,211,0,42,0,187,255,154,0,42,0,197,
255,201,0,42,0,199,0,0,0,42,0,201,0,0,0,42,
0,234,255,154,0,43,0,16,0,0,0,43,0,17,255,220,
0,43,0,29,0,0,0,43,0,169,0,0,0,43,0,170,
0,0,0,43,0,180,255,183,0,43,0,181,255,193,0,43,
0,197,255,183,0,45,0,16,255,183,0,45,0,36,255,220,
0,45,0,98,255,220,0,45,0,169,255,220,0,45,0,170,
255,220,0,45,0,173,255,220,0,45,0,174,255,220,0,45,
0,180,255,183,0,45,0,181,255,193,0,45,0,197,255,144,
0,45,0,199,255,220,0,45,0,201,255,220,0,46,0,16,
255,41,0,46,0,36,255,220,0,46,0,38,255,144,0,46,
0,50,255,144,0,46,0,55,255,97,0,46,0,56,255,201,
0,46,0,58,255,183,0,46,0,60,255,183,0,46,0,68,
255,220,0,46,0,72,255,154,0,46,0,82,255,154,0,46,
0,88,255,154,0,46,0,92,255,107,0,46,0,98,255,220,
0,46,0,100,255,144,0,46,0,103,255,144,0,46,0,104,
255,201,0,46,0,105,255,220,0,46,0,106,255,220,0,46,
0,107,255,220,0,46,0,108,255,220,0,46,0,109,255,220,
0,46,0,110,255,220,0,46,0,112,255,154,0,46,0,113,
255,154,0,46,0,114,255,154,0,46,0,115,255,154,0,46,
0,121,255,154,0,46,0,122,255,154,0,46,0,123,255,154,
0,46,0,124,255,154,0,46,0,125,255,154,0,46,0,126,
255,154,0,46,0,127,255,154,0,46,0,128,255,154,0,46,
0,129,255,154,0,46,0,169,255,125,0,46,0,170,0,0,
0,46,0,173,255,220,0,46,0,174,255,220,0,46,0,175,
255,144,0,46,0,180,255,193,0,46,0,181,255,193,0,46,
0,186,255,107,0,46,0,187,255,183,0,46,0,197,0,0,
0,46,0,199,255,220,0,46,0,201,255,220,0,46,0,208,
255,144,0,46,0,209,255,144,0,46,0,210,255,144,0,46,
0,211,255,201,0,46,0,212,255,201,0,46,0,213,255,201,
0,46,0,234,255,183,0,46,0,235,255,107,0,46,0,251,
255,144,0,46,0,253,255,144,0,47,0,16,255,220,0,47,
0,36,0,47,0,47,0,50,255,183,0,47,0,55,254,230,
0,47,0,56,255,154,0,47,0,57,255,31,0,47,0,58,
255,68,0,47,0,60,254,240,0,47,0,68,0,0,0,47,
0,72,255,220,0,47,0,82,255,220,0,47,0,88,255,220,
0,47,0,92,255,68,0,47,0,98,0,47,0,47,0,103,
255,183,0,47,0,104,255,154,0,47,0,105,0,0,0,47,
0,106,0,0,0,47,0,107,0,0,0,47,0,108,0,0,
0,47,0,109,0,0,0,47,0,110,0,0,0,47,0,112,
255,220,0,47,0,113,255,220,0,47,0,114,255,220,0,47,
0,115,255,220,0,47,0,121,255,220,0,47,0,122,255,220,
0,47,0,123,255,220,0,47,0,124,255,220,0,47,0,125,
255,220,0,47,0,126,255,220,0,47,0,127,255,220,0,47,
0,128,255,220,0,47,0,129,255,220,0,47,0,169,0,0,
0,47,0,170,0,0,0,47,0,173,0,47,0,47,0,174,
0,47,0,47,0,175,255,183,0,47,0,180,254,97,0,47,
0,181,253,230,0,47,0,186,255,68,0,47,0,187,254,240,
0,47,0,197,0,0,0,47,0,199,0,47,0,47,0,201,
0,47,0,47,0,208,255,183,0,47,0,209,255,183,0,47,
0,210,255,183,0,47,0,211,255,154,0,47,0,212,255,154,
0,47,0,213,255,154,0,47,0,234,254,240,0,47,0,235,
255,68,0,50,0,16,0,57,0,50,0,17,255,173,0,50,
0,29,255,220,0,50,0,36,255,220,0,50,0,57,255,220,
0,50,0,59,255,125,0,50,0,60,255,144,0,50,0,98,
255,220,0,50,0,169,255,220,0,50,0,170,0,0,0,50,
0,173,255,220,0,50,0,174,255,220,0,50,0,180,255,211,
0,50,0,181,255,220,0,50,0,187,255,144,0,50,0,197,
255,68,0,50,0,199,255,220,0,50,0,201,255,220,0,50,
0,234,255,144,0,51,0,16,255,211,0,51,0,17,254,193,
0,51,0,29,0,0,0,51,0,36,255,125,0,51,0,56,
0,0,0,51,0,58,0,0,0,51,0,60,255,211,0,51,
0,68,255,164,0,51,0,72,255,183,0,51,0,76,255,211,
0,51,0,81,255,220,0,51,0,82,255,183,0,51,0,85,
255,220,0,51,0,86,255,220,0,51,0,88,255,220,0,51,
0,92,0,0,0,51,0,98,255,125,0,51,0,104,0,0,
0,51,0,105,255,164,0,51,0,106,255,164,0,51,0,107,
255,164,0,51,0,108,255,164,0,51,0,109,255,164,0,51,
0,110,255,164,0,51,0,112,255,183,0,51,0,113,255,183,
0,51,0,114,255,183,0,51,0,115,255,183,0,51,0,120,
255,220,0,51,0,121,255,183,0,51,0,122,255,183,0,51,
0,123,255,183,0,51,0,124,255,183,0,51,0,125,255,183,
0,51,0,126,255,220,0,51,0,127,255,220,0,51,0,128,
255,220,0,51,0,129,255,220,0,51,0,169,255,220,0,51,
0,170,0,0,0,51,0,173,255,125,0,51,0,174,255,125,
0,51,0,180,0,38,0,51,0,181,0,38,0,51,0,186,
0,0,0,51,0,187,255,211,0,51,0,197,254,183,0,51,
0,199,255,125,0,51,0,201,255,125,0,51,0,211,0,0,
0,51,0,212,0,0,0,51,0,213,0,0,0,51,0,228,
255,220,0,51,0,234,255,211,0,51,0,235,0,0,0,51,
0,250,255,220,0,52,0,16,0,57,0,52,0,169,0,0,
0,52,0,170,0,0,0,52,0,180,255,211,0,52,0,181,
255,220,0,52,0,197,255,125,0,53,0,16,255,173,0,53,
0,17,255,183,0,53,0,29,255,193,0,53,0,36,255,173,
0,53,0,38,255,154,0,53,0,55,255,107,0,53,0,57,
255,144,0,53,0,58,255,173,0,53,0,60,255,125,0,53,
0,68,255,211,0,53,0,72,255,164,0,53,0,82,255,164,
0,53,0,88,255,164,0,53,0,92,255,144,0,53,0,98,
255,173,0,53,0,100,255,154,0,53,0,105,255,211,0,53,
0,106,255,211,0,53,0,107,255,211,0,53,0,108,255,211,
0,53,0,109,255,211,0,53,0,110,255,211,0,53,0,112,
255,164,0,53,0,113,255,164,0,53,0,114,255,164,0,53,
0,115,255,164,0,53,0,121,255,164,0,53,0,122,255,164,
0,53,0,123,255,164,0,53,0,124,255,164,0,53,0,125,
255,164,0,53,0,126,255,164,0,53,0,127,255,164,0,53,
0,128,255,164,0,53,0,129,255,164,0,53,0,169,255,144,
0,53,0,170,255,220,0,53,0,173,255,173,0,53,0,174,
255,173,0,53,0,180,255,107,0,53,0,181,255,125,0,53,
0,186,255,144,0,53,0,187,255,125,0,53,0,197,255,220,
0,53,0,199,255,173,0,53,0,201,255,173,0,53,0,234,
255,125,0,53,0,235,255,144,0,53,0,251,255,154,0,53,
0,253,255,154,0,54,0,36,0,38,0,54,0,38,0,0,
0,54,0,42,0,0,0,54,0,50,0,0,0,54,0,52,
0,0,0,54,0,54,0,0,0,54,0,98,0,38,0,54,
0,100,0,0,0,54,0,103,0,0,0,54,0,173,0,38,
0,54,0,174,0,38,0,54,0,175,0,0,0,54,0,199,
0,38,0,54,0,201,0,38,0,54,0,208,0,0,0,54,
0,209,0,0,0,54,0,210,0,0,0,54,0,227,0,0,
0,54,0,246,0,0,0,54,0,249,0,0,0,54,0,251,
0,0,0,54,0,253,0,0,0,55,0,16,255,68,0,55,
0,17,255,13,0,55,0,29,255,31,0,55,0,36,255,97,
0,55,0,38,255,136,0,55,0,55,255,220,0,55,0,68,
254,173,0,55,0,70,254,164,0,55,0,72,254,164,0,55,
0,76,255,193,0,55,0,82,254,164,0,55,0,85,254,211,
0,55,0,86,254,173,0,55,0,88,254,201,0,55,0,90,
254,173,0,55,0,92,254,193,0,55,0,98,255,97,0,55,
0,100,255,136,0,55,0,105,254,173,0,55,0,106,254,173,
0,55,0,107,254,173,0,55,0,108,254,173,0,55,0,109,
254,173,0,55,0,110,254,173,0,55,0,111,254,164,0,55,
0,112,254,164,0,55,0,113,254,164,0,55,0,114,254,164,
0,55,0,115,254,164,0,55,0,121,254,164,0,55,0,122,
254,164,0,55,0,123,254,164,0,55,0,124,254,164,0,55,
0,125,254,164,0,55,0,126,254,201,0,55,0,127,254,201,
0,55,0,128,254,201,0,55,0,129,254,201,0,55,0,169,
255,68,0,55,0,170,255,144,0,55,0,173,255,97,0,55,
0,174,255,97,0,55,0,180,0,0,0,55,0,181,255,211,
0,55,0,186,254,193,0,55,0,197,254,248,0,55,0,199,
255,97,0,55,0,201,255,97,0,55,0,228,254,173,0,55,
0,235,254,193,0,55,0,250,254,173,0,55,0,251,255,136,
0,55,0,252,254,164,0,55,0,253,255,136,0,55,0,254,
254,164,0,56,0,36,0,0,0,56,0,45,0,0,0,56,
0,61,255,220,0,56,0,98,0,0,0,56,0,173,0,0,
0,56,0,174,0,0,0,56,0,199,0,0,0,56,0,201,
0,0,0,56,0,229,255,220,0,57,0,16,255,136,0,57,
0,17,254,248,0,57,0,29,255,89,0,57,0,36,255,125,
0,57,0,50,255,220,0,57,0,68,255,97,0,57,0,72,
255,97,0,57,0,76,255,211,0,57,0,82,255,97,0,57,
0,88,255,117,0,57,0,92,255,201,0,57,0,98,255,125,
0,57,0,103,255,220,0,57,0,105,255,97,0,57,0,106,
255,97,0,57,0,107,255,97,0,57,0,108,255,97,0,57,
0,109,255,97,0,57,0,110,255,97,0,57,0,112,255,97,
0,57,0,113,255,97,0,57,0,114,255,97,0,57,0,115,
255,97,0,57,0,121,255,97,0,57,0,122,255,97,0,57,
0,123,255,97,0,57,0,124,255,97,0,57,0,125,255,97,
0,57,0,126,255,117,0,57,0,127,255,117,0,57,0,128,
255,117,0,57,0,129,255,117,0,57,0,169,255,78,0,57,
0,170,255,144,0,57,0,173,255,125,0,57,0,174,255,125,
0,57,0,175,255,220,0,57,0,180,0,0,0,57,0,181,
0,0,0,57,0,186,255,201,0,57,0,197,254,230,0,57,
0,199,255,125,0,57,0,201,255,125,0,57,0,208,255,220,
0,57,0,209,255,220,0,57,0,210,255,220,0,57,0,235,
255,201,0,58,0,16,255,173,0,58,0,17,255,21,0,58,
0,29,255,136,0,58,0,36,255,144,0,58,0,68,255,125,
0,58,0,72,255,136,0,58,0,76,255,211,0,58,0,82,
255,136,0,58,0,85,255,164,0,58,0,88,255,183,0,58,
0,92,255,220,0,58,0,98,255,144,0,58,0,105,255,125,
0,58,0,106,255,125,0,58,0,107,255,125,0,58,0,108,
255,125,0,58,0,109,255,125,0,58,0,110,255,125,0,58,
0,112,255,136,0,58,0,113,255,136,0,58,0,114,255,136,
0,58,0,115,255,136,0,58,0,121,255,136,0,58,0,122,
255,136,0,58,0,123,255,136,0,58,0,124,255,136,0,58,
0,125,255,136,0,58,0,126,255,183,0,58,0,127,255,183,
0,58,0,128,255,183,0,58,0,129,255,183,0,58,0,169,
255,144,0,58,0,170,255,220,0,58,0,173,255,144,0,58,
0,174,255,144,0,58,0,180,255,220,0,58,0,181,0,0,
0,58,0,186,255,220,0,58,0,197,254,248,0,58,0,199,
255,144,0,58,0,201,255,144,0,58,0,235,255,220,0,59,
0,16,255,154,0,59,0,36,0,0,0,59,0,38,255,107,
0,59,0,50,255,125,0,59,0,55,255,220,0,59,0,72,
255,164,0,59,0,98,0,0,0,59,0,100,255,107,0,59,
0,103,255,125,0,59,0,112,255,164,0,59,0,113,255,164,
0,59,0,114,255,164,0,59,0,115,255,164,0,59,0,169,
255,144,0,59,0,170,0,0,0,59,0,173,0,0,0,59,
0,174,0,0,0,59,0,175,255,125,0,59,0,180,255,97,
0,59,0,181,255,173,0,59,0,197,255,211,0,59,0,199,
0,0,0,59,0,201,0,0,0,59,0,208,255,125,0,59,
0,209,255,125,0,59,0,210,255,125,0,59,0,251,255,107,
0,59,0,253,255,107,0,60,0,16,255,13,0,60,0,17,
254,97,0,60,0,29,254,240,0,60,0,36,255,97,0,60,
0,38,255,144,0,60,0,50,255,144,0,60,0,68,254,230,
0,60,0,72,254,240,0,60,0,76,255,183,0,60,0,82,
254,240,0,60,0,88,255,21,0,60,0,98,255,97,0,60,
0,100,255,144,0,60,0,103,255,144,0,60,0,105,254,230,
0,60,0,106,254,230,0,60,0,107,254,230,0,60,0,108,
254,230,0,60,0,109,254,230,0,60,0,110,254,230,0,60,
0,112,254,240,0,60,0,113,254,240,0,60,0,114,254,240,
0,60,0,115,254,240,0,60,0,121,254,240,0,60,0,122,
254,240,0,60,0,123,254,240,0,60,0,124,254,240,0,60,
0,125,254,240,0,60,0,126,255,21,0,60,0,127,255,21,
0,60,0,128,255,21,0,60,0,129,255,21,0,60,0,169,
255,31,0,60,0,170,255,107,0,60,0,173,255,97,0,60,
0,174,255,97,0,60,0,175,255,144,0,60,0,180,255,144,
0,60,0,181,255,220,0,60,0,197,254,248,0,60,0,199,
255,97,0,60,0,201,255,97,0,60,0,208,255,144,0,60,
0,209,255,144,0,60,0,210,255,144,0,60,0,251,255,144,
0,60,0,253,255,144,0,61,0,16,255,220,0,61,0,169,
0,0,0,61,0,170,0,0,0,61,0,180,255,220,0,61,
0,181,255,220,0,61,0,197,255,220,0,72,0,91,255,220,
0,73,0,16,255,144,0,73,0,17,255,107,0,73,0,29,
255,183,0,73,0,87,255,220,0,73,0,90,255,220,0,73,
0,92,255,220,0,73,0,169,255,183,0,73,0,170,255,220,
0,73,0,180,0,65,0,73,0,181,0,0,0,73,0,186,
255,220,0,73,0,197,255,21,0,73,0,235,255,220,0,78,
0,68,255,220,0,78,0,72,255,183,0,78,0,82,255,183,
0,78,0,88,255,193,0,78,0,92,255,183,0,78,0,105,
255,220,0,78,0,106,255,220,0,78,0,107,255,220,0,78,
0,108,255,220,0,78,0,109,255,220,0,78,0,110,255,220,
0,78,0,112,255,183,0,78,0,113,255,183,0,78,0,114,
255,183,0,78,0,115,255,183,0,78,0,121,255,183,0,78,
0,122,255,183,0,78,0,123,255,183,0,78,0,124,255,183,
0,78,0,125,255,183,0,78,0,126,255,193,0,78,0,127,
255,193,0,78,0,128,255,193,0,78,0,129,255,193,0,78,
0,186,255,183,0,78,0,235,255,183,0,81,0,16,0,0,
0,81,0,17,0,0,0,81,0,29,0,0,0,81,0,169,
0,0,0,81,0,170,0,0,0,81,0,180,255,107,0,81,
0,181,255,144,0,81,0,197,255,164,0,82,0,16,0,38,
0,82,0,17,255,220,0,82,0,29,0,0,0,82,0,91,
255,193,0,82,0,169,0,0,0,82,0,170,0,0,0,82,
0,180,255,107,0,82,0,181,255,183,0,82,0,197,255,125,
0,85,0,16,255,125,0,85,0,17,255,68,0,85,0,29,
255,220,0,85,0,70,255,211,0,85,0,71,255,220,0,85,
0,72,255,211,0,85,0,73,0,0,0,85,0,74,255,220,
0,85,0,75,255,220,0,85,0,80,255,220,0,85,0,81,
255,220,0,85,0,82,255,211,0,85,0,84,255,220,0,85,
0,85,255,220,0,85,0,88,0,0,0,85,0,89,0,0,
0,85,0,90,0,0,0,85,0,91,255,201,0,85,0,92,
0,0,0,85,0,93,0,0,0,85,0,111,255,211,0,85,
0,112,255,211,0,85,0,113,255,211,0,85,0,114,255,211,
0,85,0,115,255,211,0,85,0,120,255,220,0,85,0,121,
255,211,0,85,0,122,255,211,0,85,0,123,255,211,0,85,
0,124,255,211,0,85,0,125,255,211,0,85,0,126,0,0,
0,85,0,127,0,0,0,85,0,128,0,0,0,85,0,129,
0,0,0,85,0,169,255,183,0,85,0,170,0,0,0,85,
0,180,0,0,0,85,0,181,0,86,0,85,0,186,0,0,
0,85,0,197,254,201,0,85,0,230,0,0,0,85,0,235,
0,0,0,85,0,247,255,220,0,85,0,252,255,211,0,85,
0,254,255,211,0,89,0,16,255,201,0,89,0,17,255,97,
0,89,0,29,255,144,0,89,0,169,255,220,0,89,0,170,
255,220,0,89,0,180,0,0,0,89,0,181,255,220,0,89,
0,197,254,240,0,90,0,16,0,0,0,90,0,17,255,68,
0,90,0,29,255,144,0,90,0,169,255,220,0,90,0,170,
255,220,0,90,0,180,0,0,0,90,0,181,0,0,0,90,
0,197,255,41,0,91,0,70,255,220,0,91,0,72,255,193,
0,91,0,82,255,193,0,91,0,111,255,220,0,91,0,112,
255,193,0,91,0,113,255,193,0,91,0,114,255,193,0,91,
0,115,255,193,0,91,0,121,255,193,0,91,0,122,255,193,
0,91,0,123,255,193,0,91,0,124,255,193,0,91,0,125,
255,193,0,91,0,252,255,220,0,91,0,254,255,220,0,92,
0,16,255,220,0,92,0,17,254,220,0,92,0,29,255,107,
0,92,0,169,255,220,0,92,0,170,255,220,0,92,0,180,
0,0,0,92,0,181,0,0,0,92,0,197,254,211,0,98,
0,16,255,211,0,98,0,17,255,220,0,98,0,29,255,220,
0,98,0,36,0,57,0,98,0,38,255,220,0,98,0,42,
255,220,0,98,0,50,255,220,0,98,0,52,255,220,0,98,
0,54,0,0,0,98,0,55,255,97,0,98,0,56,0,0,
0,98,0,57,255,125,0,98,0,58,255,144,0,98,0,59,
0,0,0,98,0,60,255,97,0,98,0,70,255,220,0,98,
0,71,255,220,0,98,0,72,255,220,0,98,0,73,255,183,
0,98,0,82,255,220,0,98,0,84,255,220,0,98,0,87,
255,220,0,98,0,88,0,0,0,98,0,89,255,136,0,98,
0,90,255,173,0,98,0,92,255,117,0,98,0,98,0,57,
0,98,0,100,255,220,0,98,0,103,255,220,0,98,0,104,
0,0,0,98,0,111,255,220,0,98,0,112,255,220,0,98,
0,113,255,220,0,98,0,114,255,220,0,98,0,115,255,220,
0,98,0,121,255,220,0,98,0,122,255,220,0,98,0,123,
255,220,0,98,0,124,255,220,0,98,0,125,255,220,0,98,
0,126,0,0,0,98,0,127,0,0,0,98,0,128,0,0,
0,98,0,129,0,0,0,98,0,169,255,183,0,98,0,170,
0,0,0,98,0,173,0,57,0,98,0,174,0,57,0,98,
0,175,255,220,0,98,0,180,254,248,0,98,0,181,255,3,
0,98,0,186,255,117,0,98,0,187,255,97,0,98,0,197,
0,47,0,98,0,199,0,57,0,98,0,201,0,57,0,98,
0,208,255,220,0,98,0,209,255,220,0,98,0,210,255,220,
0,98,0,211,0,0,0,98,0,212,0,0,0,98,0,213,
0,0,0,98,0,227,0,0,0,98,0,234,255,97,0,98,
0,235,255,117,0,98,0,246,255,220,0,98,0,249,0,0,
0,98,0,251,255,220,0,98,0,252,255,220,0,98,0,253,
255,220,0,98,0,254,255,220,0,100,0,16,0,0,0,100,
0,36,0,0,0,100,0,54,0,0,0,100,0,60,255,220,
0,100,0,98,0,0,0,100,0,169,255,220,0,100,0,170,
255,220,0,100,0,173,0,0,0,100,0,174,0,0,0,100,
0,180,0,0,0,100,0,181,0,38,0,100,0,187,255,220,
0,100,0,197,0,0,0,100,0,199,0,0,0,100,0,201,
0,0,0,100,0,227,0,0,0,100,0,234,255,220,0,100,
0,249,0,0,0,103,0,16,0,57,0,103,0,17,255,173,
0,103,0,29,255,220,0,103,0,36,255,220,0,103,0,57,
255,220,0,103,0,59,255,125,0,103,0,60,255,144,0,103,
0,98,255,220,0,103,0,169,255,220,0,103,0,170,0,0,
0,103,0,173,255,220,0,103,0,174,255,220,0,103,0,180,
255,211,0,103,0,181,255,220,0,103,0,187,255,144,0,103,
0,197,255,68,0,103,0,199,255,220,0,103,0,201,255,220,
0,103,0,234,255,144,0,104,0,36,0,0,0,104,0,45,
0,0,0,104,0,61,255,220,0,104,0,98,0,0,0,104,
0,173,0,0,0,104,0,174,0,0,0,104,0,199,0,0,
0,104,0,201,0,0,0,104,0,229,255,220,0,112,0,91,
255,220,0,113,0,91,255,220,0,114,0,91,255,220,0,115,
0,91,255,220,0,120,0,16,0,0,0,120,0,17,0,0,
0,120,0,29,0,0,0,120,0,169,0,0,0,120,0,170,
0,0,0,120,0,180,255,107,0,120,0,181,255,144,0,120,
0,197,255,164,0,121,0,16,0,38,0,121,0,17,255,220,
0,121,0,29,0,0,0,121,0,91,255,193,0,121,0,169,
0,0,0,121,0,170,0,0,0,121,0,180,255,107,0,121,
0,181,255,183,0,121,0,197,255,125,0,122,0,16,0,38,
0,122,0,17,255,220,0,122,0,29,0,0,0,122,0,91,
255,193,0,122,0,169,0,0,0,122,0,170,0,0,0,122,
0,180,255,107,0,122,0,181,255,183,0,122,0,197,255,125,
0,123,0,16,0,38,0,123,0,17,255,220,0,123,0,29,
0,0,0,123,0,91,255,193,0,123,0,169,0,0,0,123,
0,170,0,0,0,123,0,180,255,107,0,123,0,181,255,183,
0,123,0,197,255,125,0,124,0,16,0,38,0,124,0,17,
255,220,0,124,0,29,0,0,0,124,0,91,255,193,0,124,
0,169,0,0,0,124,0,170,0,0,0,124,0,180,255,107,
0,124,0,181,255,183,0,124,0,197,255,125,0,125,0,16,
0,38,0,125,0,17,255,220,0,125,0,29,0,0,0,125,
0,91,255,193,0,125,0,169,0,0,0,125,0,170,0,0,
0,125,0,180,255,107,0,125,0,181,255,183,0,125,0,197,
255,125,0,137,0,16,0,38,0,137,0,169,0,0,0,137,
0,170,0,0,0,137,0,180,255,144,0,137,0,181,255,144,
0,137,0,197,255,173,0,144,0,16,0,0,0,144,0,169,
0,0,0,144,0,170,0,0,0,144,0,180,255,173,0,144,
0,181,255,164,0,144,0,197,255,144,0,169,0,36,0,0,
0,169,0,37,255,220,0,169,0,38,255,220,0,169,0,39,
255,220,0,169,0,41,0,0,0,169,0,42,255,220,0,169,
0,43,0,0,0,169,0,45,255,220,0,169,0,46,0,0,
0,169,0,47,0,0,0,169,0,50,0,0,0,169,0,51,
0,0,0,169,0,52,0,0,0,169,0,53,0,0,0,169,
0,55,255,144,0,169,0,57,255,144,0,169,0,58,255,220,
0,169,0,59,0,0,0,169,0,60,255,107,0,169,0,61,
0,0,0,169,0,73,0,0,0,169,0,81,0,0,0,169,
0,82,0,0,0,169,0,85,0,0,0,169,0,89,255,220,
0,169,0,90,255,220,0,169,0,92,255,220,0,169,0,98,
0,0,0,169,0,100,255,220,0,169,0,103,0,0,0,169,
0,120,0,0,0,169,0,121,0,0,0,169,0,122,0,0,
0,169,0,123,0,0,0,169,0,124,0,0,0,169,0,125,
0,0,0,169,0,137,0,0,0,169,0,144,0,151,0,169,
0,173,0,0,0,169,0,174,0,0,0,169,0,175,0,0,
0,169,0,186,255,220,0,169,0,187,255,107,0,169,0,199,
0,0,0,169,0,201,0,0,0,169,0,208,0,0,0,169,
0,209,0,0,0,169,0,210,0,0,0,169,0,229,0,0,
0,169,0,233,0,0,0,169,0,234,255,107,0,169,0,235,
255,220,0,169,0,236,0,0,0,169,0,246,255,220,0,169,
0,251,255,220,0,169,0,253,255,220,0,170,0,36,255,183,
0,170,0,37,255,183,0,170,0,38,255,220,0,170,0,39,
255,220,0,170,0,41,0,0,0,170,0,42,0,0,0,170,
0,43,0,0,0,170,0,45,255,220,0,170,0,46,0,0,
0,170,0,47,0,0,0,170,0,50,255,220,0,170,0,51,
0,0,0,170,0,52,0,0,0,170,0,53,0,0,0,170,
0,55,255,68,0,170,0,57,255,78,0,170,0,58,255,144,
0,170,0,59,255,144,0,170,0,60,255,31,0,170,0,61,
0,0,0,170,0,73,0,0,0,170,0,81,0,0,0,170,
0,82,0,0,0,170,0,85,0,0,0,170,0,89,255,220,
0,170,0,90,255,220,0,170,0,92,255,220,0,170,0,98,
255,183,0,170,0,100,255,220,0,170,0,103,255,220,0,170,
0,120,0,0,0,170,0,121,0,0,0,170,0,122,0,0,
0,170,0,123,0,0,0,170,0,124,0,0,0,170,0,125,
0,0,0,170,0,137,0,0,0,170,0,144,0,0,0,170,
0,173,255,183,0,170,0,174,255,183,0,170,0,175,255,220,
0,170,0,186,255,220,0,170,0,187,255,31,0,170,0,199,
255,183,0,170,0,201,255,183,0,170,0,208,255,220,0,170,
0,209,255,220,0,170,0,210,255,220,0,170,0,229,0,0,
0,170,0,233,0,0,0,170,0,234,255,31,0,170,0,235,
255,220,0,170,0,236,0,0,0,170,0,246,0,0,0,170,
0,251,255,220,0,170,0,253,255,220,0,173,0,16,255,211,
0,173,0,17,255,220,0,173,0,29,255,220,0,173,0,36,
0,57,0,173,0,38,255,220,0,173,0,42,255,220,0,173,
0,50,255,220,0,173,0,52,255,220,0,173,0,54,0,0,
0,173,0,55,255,97,0,173,0,56,0,0,0,173,0,57,
255,125,0,173,0,58,255,144,0,173,0,59,0,0,0,173,
0,60,255,97,0,173,0,70,255,220,0,173,0,71,255,220,
0,173,0,72,255,220,0,173,0,73,255,183,0,173,0,82,
255,220,0,173,0,84,255,220,0,173,0,87,255,220,0,173,
0,88,0,0,0,173,0,89,255,136,0,173,0,90,255,173,
0,173,0,92,255,117,0,173,0,98,0,57,0,173,0,100,
255,220,0,173,0,103,255,220,0,173,0,104,0,0,0,173,
0,111,255,220,0,173,0,112,255,220,0,173,0,113,255,220,
0,173,0,114,255,220,0,173,0,115,255,220,0,173,0,121,
255,220,0,173,0,122,255,220,0,173,0,123,255,220,0,173,
0,124,255,220,0,173,0,125,255,220,0,173,0,126,0,0,
0,173,0,127,0,0,0,173,0,128,0,0,0,173,0,129,
0,0,0,173,0,169,255,183,0,173,0,170,0,0,0,173,
0,173,0,57,0,173,0,174,0,57,0,173,0,175,255,220,
0,173,0,180,254,248,0,173,0,181,255,3,0,173,0,186,
255,117,0,173,0,187,255,97,0,173,0,197,0,47,0,173,
0,199,0,57,0,173,0,201,0,57,0,173,0,208,255,220,
0,173,0,209,255,220,0,173,0,210,255,220,0,173,0,211,
0,0,0,173,0,212,0,0,0,173,0,213,0,0,0,173,
0,227,0,0,0,173,0,234,255,97,0,173,0,235,255,117,
0,173,0,246,255,220,0,173,0,249,0,0,0,173,0,251,
255,220,0,173,0,252,255,220,0,173,0,253,255,220,0,173,
0,254,255,220,0,174,0,16,255,211,0,174,0,17,255,220,
0,174,0,29,255,220,0,174,0,36,0,57,0,174,0,38,
255,220,0,174,0,42,255,220,0,174,0,50,255,220,0,174,
0,52,255,220,0,174,0,54,0,0,0,174,0,55,255,97,
0,174,0,56,0,0,0,174,0,57,255,125,0,174,0,58,
255,144,0,174,0,59,0,0,0,174,0,60,255,97,0,174,
0,70,255,220,0,174,0,71,255,220,0,174,0,72,255,220,
0,174,0,73,255,183,0,174,0,82,255,220,0,174,0,84,
255,220,0,174,0,87,255,220,0,174,0,88,0,0,0,174,
0,89,255,136,0,174,0,90,255,173,0,174,0,92,255,117,
0,174,0,98,0,57,0,174,0,100,255,220,0,174,0,103,
255,220,0,174,0,104,0,0,0,174,0,111,255,220,0,174,
0,112,255,220,0,174,0,113,255,220,0,174,0,114,255,220,
0,174,0,115,255,220,0,174,0,121,255,220,0,174,0,122,
255,220,0,174,0,123,255,220,0,174,0,124,255,220,0,174,
0,125,255,220,0,174,0,126,0,0,0,174,0,127,0,0,
0,174,0,128,0,0,0,174,0,129,0,0,0,174,0,169,
255,183,0,174,0,170,0,0,0,174,0,173,0,57,0,174,
0,174,0,57,0,174,0,175,255,220,0,174,0,180,254,248,
0,174,0,181,255,3,0,174,0,186,255,117,0,174,0,187,
255,97,0,174,0,197,0,47,0,174,0,199,0,57,0,174,
0,201,0,57,0,174,0,208,255,220,0,174,0,209,255,220,
0,174,0,210,255,220,0,174,0,211,0,0,0,174,0,212,
0,0,0,174,0,213,0,0,0,174,0,227,0,0,0,174,
0,234,255,97,0,174,0,235,255,117,0,174,0,246,255,220,
0,174,0,249,0,0,0,174,0,251,255,220,0,174,0,252,
255,220,0,174,0,253,255,220,0,174,0,254,255,220,0,175,
0,16,0,57,0,175,0,17,255,173,0,175,0,29,255,220,
0,175,0,36,255,220,0,175,0,57,255,220,0,175,0,59,
255,125,0,175,0,60,255,144,0,175,0,98,255,220,0,175,
0,169,255,220,0,175,0,170,0,0,0,175,0,173,255,220,
0,175,0,174,255,220,0,175,0,180,255,211,0,175,0,181,
255,220,0,175,0,187,255,144,0,175,0,197,255,68,0,175,
0,199,255,220,0,175,0,201,255,220,0,175,0,234,255,144,
0,180,0,36,254,248,0,180,0,37,255,193,0,180,0,38,
255,183,0,180,0,39,255,193,0,180,0,41,255,193,0,180,
0,42,255,183,0,180,0,43,255,193,0,180,0,45,255,193,
0,180,0,46,255,193,0,180,0,47,255,193,0,180,0,50,
255,183,0,180,0,51,255,193,0,180,0,52,255,183,0,180,
0,53,255,193,0,180,0,55,0,0,0,180,0,57,0,0,
0,180,0,58,0,0,0,180,0,59,255,136,0,180,0,60,
0,0,0,180,0,61,255,220,0,180,0,73,255,183,0,180,
0,81,255,144,0,180,0,82,255,107,0,180,0,85,255,144,
0,180,0,89,255,183,0,180,0,90,255,183,0,180,0,92,
255,183,0,180,0,98,254,248,0,180,0,100,255,183,0,180,
0,103,255,183,0,180,0,120,255,144,0,180,0,121,255,107,
0,180,0,122,255,107,0,180,0,123,255,107,0,180,0,124,
255,107,0,180,0,125,255,107,0,180,0,137,255,193,0,180,
0,144,254,125,0,180,0,173,254,248,0,180,0,174,254,248,
0,180,0,175,255,183,0,180,0,186,255,183,0,180,0,187,
0,0,0,180,0,199,254,248,0,180,0,201,254,248,0,180,
0,208,255,183,0,180,0,209,255,183,0,180,0,210,255,183,
0,180,0,229,255,220,0,180,0,233,255,183,0,180,0,234,
0,0,0,180,0,235,255,183,0,180,0,236,255,193,0,180,
0,246,255,183,0,180,0,251,255,183,0,180,0,253,255,183,
0,186,0,16,255,220,0,186,0,17,254,220,0,186,0,29,
255,107,0,186,0,169,255,220,0,186,0,170,255,220,0,186,
0,180,0,0,0,186,0,181,0,0,0,186,0,197,254,211,
0,187,0,16,255,13,0,187,0,17,254,97,0,187,0,29,
254,240,0,187,0,36,255,97,0,187,0,38,255,144,0,187,
0,50,255,144,0,187,0,68,254,230,0,187,0,72,254,240,
0,187,0,76,255,183,0,187,0,82,254,240,0,187,0,88,
255,21,0,187,0,98,255,97,0,187,0,100,255,144,0,187,
0,103,255,144,0,187,0,105,254,230,0,187,0,106,254,230,
0,187,0,107,254,230,0,187,0,108,254,230,0,187,0,109,
254,230,0,187,0,110,254,230,0,187,0,112,254,240,0,187,
0,113,254,240,0,187,0,114,254,240,0,187,0,115,254,240,
0,187,0,121,254,240,0,187,0,122,254,240,0,187,0,123,
254,240,0,187,0,124,254,240,0,187,0,125,254,240,0,187,
0,126,255,21,0,187,0,127,255,21,0,187,0,128,255,21,
0,187,0,129,255,21,0,187,0,169,255,31,0,187,0,170,
255,107,0,187,0,173,255,97,0,187,0,174,255,97,0,187,
0,175,255,144,0,187,0,180,255,144,0,187,0,181,255,220,
0,187,0,197,254,248,0,187,0,199,255,97,0,187,0,201,
255,97,0,187,0,208,255,144,0,187,0,209,255,144,0,187,
0,210,255,144,0,187,0,251,255,144,0,187,0,253,255,144,
0,197,0,36,0,38,0,197,0,37,255,183,0,197,0,38,
255,144,0,197,0,39,255,183,0,197,0,41,255,183,0,197,
0,42,255,183,0,197,0,43,255,183,0,197,0,45,0,47,
0,197,0,46,255,183,0,197,0,47,255,183,0,197,0,50,
255,144,0,197,0,51,255,183,0,197,0,52,255,144,0,197,
0,53,255,183,0,197,0,55,254,230,0,197,0,57,254,136,
0,197,0,58,255,3,0,197,0,59,255,183,0,197,0,60,
254,136,0,197,0,61,0,0,0,197,0,73,255,220,0,197,
0,81,255,183,0,197,0,82,255,183,0,197,0,85,255,183,
0,197,0,89,255,21,0,197,0,90,255,60,0,197,0,92,
255,144,0,197,0,98,0,38,0,197,0,100,255,144,0,197,
0,103,255,144,0,197,0,120,255,183,0,197,0,121,255,183,
0,197,0,122,255,183,0,197,0,123,255,183,0,197,0,124,
255,183,0,197,0,125,255,183,0,197,0,137,255,183,0,197,
0,144,0,38,0,197,0,173,0,38,0,197,0,174,0,38,
0,197,0,175,255,144,0,197,0,186,255,144,0,197,0,187,
254,136,0,197,0,199,0,38,0,197,0,201,0,38,0,197,
0,208,255,144,0,197,0,209,255,144,0,197,0,210,255,144,
0,197,0,229,0,0,0,197,0,233,255,183,0,197,0,234,
254,136,0,197,0,235,255,144,0,197,0,236,255,183,0,197,
0,246,255,183,0,197,0,251,255,144,0,197,0,253,255,144,
0,199,0,16,255,211,0,199,0,17,255,220,0,199,0,29,
255,220,0,199,0,36,0,57,0,199,0,38,255,220,0,199,
0,42,255,220,0,199,0,50,255,220,0,199,0,52,255,220,
0,199,0,54,0,0,0,199,0,55,255,97,0,199,0,56,
0,0,0,199,0,57,255,125,0,199,0,58,255,144,0,199,
0,59,0,0,0,199,0,60,255,97,0,199,0,70,255,220,
0,199,0,71,255,220,0,199,0,72,255,220,0,199,0,73,
255,183,0,199,0,82,255,220,0,199,0,84,255,220,0,199,
0,87,255,220,0,199,0,88,0,0,0,199,0,89,255,136,
0,199,0,90,255,173,0,199,0,92,255,117,0,199,0,98,
0,57,0,199,0,100,255,220,0,199,0,103,255,220,0,199,
0,104,0,0,0,199,0,111,255,220,0,199,0,112,255,220,
0,199,0,113,255,220,0,199,0,114,255,220,0,199,0,115,
255,220,0,199,0,121,255,220,0,199,0,122,255,220,0,199,
0,123,255,220,0,199,0,124,255,220,0,199,0,125,255,220,
0,199,0,126,0,0,0,199,0,127,0,0,0,199,0,128,
0,0,0,199,0,129,0,0,0,199,0,169,255,183,0,199,
0,170,0,0,0,199,0,173,0,57,0,199,0,174,0,57,
0,199,0,175,255,220,0,199,0,180,254,248,0,199,0,181,
255,3,0,199,0,186,255,117,0,199,0,187,255,97,0,199,
0,197,0,47,0,199,0,199,0,57,0,199,0,201,0,57,
0,199,0,208,255,220,0,199,0,209,255,220,0,199,0,210,
255,220,0,199,0,211,0,0,0,199,0,212,0,0,0,199,
0,213,0,0,0,199,0,227,0,0,0,199,0,234,255,97,
0,199,0,235,255,117,0,199,0,246,255,220,0,199,0,249,
0,0,0,199,0,251,255,220,0,199,0,252,255,220,0,199,
0,253,255,220,0,199,0,254,255,220,0,201,0,16,255,211,
0,201,0,17,255,220,0,201,0,29,255,220,0,201,0,36,
0,57,0,201,0,38,255,220,0,201,0,42,255,220,0,201,
0,50,255,220,0,201,0,52,255,220,0,201,0,54,0,0,
0,201,0,55,255,97,0,201,0,56,0,0,0,201,0,57,
255,125,0,201,0,58,255,144,0,201,0,59,0,0,0,201,
0,60,255,97,0,201,0,70,255,220,0,201,0,71,255,220,
0,201,0,72,255,220,0,201,0,73,255,183,0,201,0,82,
255,220,0,201,0,84,255,220,0,201,0,87,255,220,0,201,
0,88,0,0,0,201,0,89,255,136,0,201,0,90,255,173,
0,201,0,92,255,117,0,201,0,98,0,57,0,201,0,100,
255,220,0,201,0,103,255,220,0,201,0,104,0,0,0,201,
0,111,255,220,0,201,0,112,255,220,0,201,0,113,255,220,
0,201,0,114,255,220,0,201,0,115,255,220,0,201,0,121,
255,220,0,201,0,122,255,220,0,201,0,123,255,220,0,201,
0,124,255,220,0,201,0,125,255,220,0,201,0,126,0,0,
0,201,0,127,0,0,0,201,0,128,0,0,0,201,0,129,
0,0,0,201,0,169,255,183,0,201,0,170,0,0,0,201,
0,173,0,57,0,201,0,174,0,57,0,201,0,175,255,220,
0,201,0,180,254,248,0,201,0,181,255,3,0,201,0,186,
255,117,0,201,0,187,255,97,0,201,0,197,0,47,0,201,
0,199,0,57,0,201,0,201,0,57,0,201,0,208,255,220,
0,201,0,209,255,220,0,201,0,210,255,220,0,201,0,211,
0,0,0,201,0,212,0,0,0,201,0,213,0,0,0,201,
0,227,0,0,0,201,0,234,255,97,0,201,0,235,255,117,
0,201,0,246,255,220,0,201,0,249,0,0,0,201,0,251,
255,220,0,201,0,252,255,220,0,201,0,253,255,220,0,201,
0,254,255,220,0,208,0,16,0,57,0,208,0,17,255,173,
0,208,0,29,255,220,0,208,0,36,255,220,0,208,0,57,
255,220,0,208,0,59,255,125,0,208,0,60,255,144,0,208,
0,98,255,220,0,208,0,169,255,220,0,208,0,170,0,0,
0,208,0,173,255,220,0,208,0,174,255,220,0,208,0,180,
255,211,0,208,0,181,255,220,0,208,0,187,255,144,0,208,
0,197,255,68,0,208,0,199,255,220,0,208,0,201,255,220,
0,208,0,234,255,144,0,209,0,16,0,57,0,209,0,17,
255,173,0,209,0,29,255,220,0,209,0,36,255,220,0,209,
0,57,255,220,0,209,0,59,255,125,0,209,0,60,255,144,
0,209,0,98,255,220,0,209,0,169,255,220,0,209,0,170,
0,0,0,209,0,173,255,220,0,209,0,174,255,220,0,209,
0,180,255,211,0,209,0,181,255,220,0,209,0,187,255,144,
0,209,0,197,255,68,0,209,0,199,255,220,0,209,0,201,
255,220,0,209,0,234,255,144,0,210,0,16,0,57,0,210,
0,17,255,173,0,210,0,29,255,220,0,210,0,36,255,220,
0,210,0,57,255,220,0,210,0,59,255,125,0,210,0,60,
255,144,0,210,0,98,255,220,0,210,0,169,255,220,0,210,
0,170,0,0,0,210,0,173,255,220,0,210,0,174,255,220,
0,210,0,180,255,211,0,210,0,181,255,220,0,210,0,187,
255,144,0,210,0,197,255,68,0,210,0,199,255,220,0,210,
0,201,255,220,0,210,0,234,255,144,0,211,0,36,0,0,
0,211,0,45,0,0,0,211,0,61,255,220,0,211,0,98,
0,0,0,211,0,173,0,0,0,211,0,174,0,0,0,211,
0,199,0,0,0,211,0,201,0,0,0,211,0,229,255,220,
0,212,0,36,0,0,0,212,0,45,0,0,0,212,0,61,
255,220,0,212,0,98,0,0,0,212,0,173,0,0,0,212,
0,174,0,0,0,212,0,199,0,0,0,212,0,201,0,0,
0,212,0,229,255,220,0,213,0,36,0,0,0,213,0,45,
0,0,0,213,0,61,255,220,0,213,0,98,0,0,0,213,
0,173,0,0,0,213,0,174,0,0,0,213,0,199,0,0,
0,213,0,201,0,0,0,213,0,229,255,220,0,227,0,36,
0,38,0,227,0,38,0,0,0,227,0,42,0,0,0,227,
0,50,0,0,0,227,0,52,0,0,0,227,0,54,0,0,
0,227,0,98,0,38,0,227,0,100,0,0,0,227,0,103,
0,0,0,227,0,173,0,38,0,227,0,174,0,38,0,227,
0,175,0,0,0,227,0,199,0,38,0,227,0,201,0,38,
0,227,0,208,0,0,0,227,0,209,0,0,0,227,0,210,
0,0,0,227,0,227,0,0,0,227,0,246,0,0,0,227,
0,249,0,0,0,227,0,251,0,0,0,227,0,253,0,0,
0,229,0,16,255,220,0,229,0,169,0,0,0,229,0,170,
0,0,0,229,0,180,255,220,0,229,0,181,255,220,0,229,
0,197,255,220,0,233,0,16,0,0,0,233,0,169,0,0,
0,233,0,170,0,0,0,233,0,180,255,164,0,233,0,181,
255,144,0,233,0,197,255,183,0,234,0,16,255,13,0,234,
0,17,254,97,0,234,0,29,254,240,0,234,0,36,255,97,
0,234,0,38,255,144,0,234,0,50,255,144,0,234,0,68,
254,230,0,234,0,72,254,240,0,234,0,76,255,183,0,234,
0,82,254,240,0,234,0,88,255,21,0,234,0,98,255,97,
0,234,0,100,255,144,0,234,0,103,255,144,0,234,0,105,
254,230,0,234,0,106,254,230,0,234,0,107,254,230,0,234,
0,108,254,230,0,234,0,109,254,230,0,234,0,110,254,230,
0,234,0,112,254,240,0,234,0,113,254,240,0,234,0,114,
254,240,0,234,0,115,254,240,0,234,0,121,254,240,0,234,
0,122,254,240,0,234,0,123,254,240,0,234,0,124,254,240,
0,234,0,125,254,240,0,234,0,126,255,21,0,234,0,127,
255,21,0,234,0,128,255,21,0,234,0,129,255,21,0,234,
0,169,255,31,0,234,0,170,255,107,0,234,0,173,255,97,
0,234,0,174,255,97,0,234,0,175,255,144,0,234,0,180,
255,144,0,234,0,181,255,220,0,234,0,197,254,248,0,234,
0,199,255,97,0,234,0,201,255,97,0,234,0,208,255,144,
0,234,0,209,255,144,0,234,0,210,255,144,0,234,0,251,
255,144,0,234,0,253,255,144,0,235,0,16,255,220,0,235,
0,17,254,220,0,235,0,29,255,107,0,235,0,169,255,220,
0,235,0,170,255,220,0,235,0,180,0,0,0,235,0,181,
0,0,0,235,0,197,254,211,0,236,0,16,0,0,0,236,
0,17,255,107,0,236,0,29,255,183,0,236,0,169,0,0,
0,236,0,170,0,0,0,236,0,180,255,220,0,236,0,181,
0,0,0,236,0,197,255,68,0,246,0,16,0,0,0,246,
0,36,0,0,0,246,0,55,255,183,0,246,0,58,0,0,
0,246,0,60,255,154,0,246,0,98,0,0,0,246,0,169,
255,220,0,246,0,170,255,220,0,246,0,173,0,0,0,246,
0,174,0,0,0,246,0,180,255,211,0,246,0,181,255,211,
0,246,0,187,255,154,0,246,0,197,255,201,0,246,0,199,
0,0,0,246,0,201,0,0,0,246,0,234,255,154,0,249,
0,36,0,38,0,249,0,38,0,0,0,249,0,42,0,0,
0,249,0,50,0,0,0,249,0,52,0,0,0,249,0,54,
0,0,0,249,0,98,0,38,0,249,0,100,0,0,0,249,
0,103,0,0,0,249,0,173,0,38,0,249,0,174,0,38,
0,249,0,175,0,0,0,249,0,199,0,38,0,249,0,201,
0,38,0,249,0,208,0,0,0,249,0,209,0,0,0,249,
0,210,0,0,0,249,0,227,0,0,0,249,0,246,0,0,
0,249,0,249,0,0,0,249,0,251,0,0,0,249,0,253,
0,0,0,251,0,16,0,0,0,251,0,36,0,0,0,251,
0,54,0,0,0,251,0,60,255,220,0,251,0,98,0,0,
0,251,0,169,255,220,0,251,0,170,255,220,0,251,0,173,
0,0,0,251,0,174,0,0,0,251,0,180,0,0,0,251,
0,181,0,38,0,251,0,187,255,220,0,251,0,197,0,0,
0,251,0,199,0,0,0,251,0,201,0,0,0,251,0,227,
0,0,0,251,0,234,255,220,0,251,0,249,0,0,0,253,
0,16,0,0,0,253,0,36,0,0,0,253,0,54,0,0,
0,253,0,60,255,220,0,253,0,98,0,0,0,253,0,169,
255,220,0,253,0,170,255,220,0,253,0,173,0,0,0,253,
0,174,0,0,0,253,0,180,0,0,0,253,0,181,0,38,
0,253,0,187,255,220,0,253,0,197,0,0,0,253,0,199,
0,0,0,253,0,201,0,0,0,253,0,227,0,0,0,253,
0,234,255,220,0,253,0,249,0,0,0,0,0,1,0,0,
1,12,0,77,0,7,0,66,0,4,0,2,0,16,0,64,
0,7,0,0,4,21,5,104,0,3,0,1,0,1,0,0,
7,109,254,29,0,0,10,188,254,137,254,137,10,76,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,12,
0,1,4,14,1,144,0,5,0,4,5,71,4,204,0,0,
254,66,5,71,4,204,0,0,2,83,0,143,2,102,8,2,
2,11,6,3,3,8,4,2,2,4,128,0,0,175,16,0,
32,74,0,0,0,0,0,0,0,0,66,105,116,115,0,64,
0,32,251,2,6,20,254,20,1,154,7,109,1,227,0,0,
0,1,0,0,0,0,0,0,0,1,0,0,66,0,29,177,
2,139,4,96,0,0,35,99,5,213,0,0,86,101,114,97,
83,97,110,115,0,0,0,0,0,0,0,0,255,255,255,255,
54,255,255,254,54,50,56,82,48,48,0,0,64,0,0,0,
0,0,0,20,0,0,1,16,9,12,5,0,3,3,3,4,
8,6,9,8,2,4,4,5,8,3,3,3,3,6,6,6,
6,6,6,6,6,6,6,3,3,8,8,8,5,10,6,7,
7,7,6,6,7,7,3,3,6,5,8,7,7,6,7,6,
7,5,7,6,7,6,5,5,4,3,4,8,5,5,6,6,
6,6,6,3,6,6,3,3,5,3,9,6,6,6,6,4,
5,4,6,5,7,5,5,6,5,3,5,8,6,6,7,6,
7,7,7,6,6,6,6,6,6,6,6,6,6,6,3,3,
3,3,6,6,6,6,6,6,6,6,6,6,5,5,6,6,
5,5,6,6,9,9,9,5,5,8,9,7,8,8,8,8,
6,6,5,6,7,5,5,4,4,7,9,6,5,3,8,6,
6,8,6,6,6,9,6,6,6,7,10,9,5,9,5,5,
3,3,8,4,5,5,2,6,4,4,6,6,5,3,3,5,
12,6,6,6,6,6,3,3,3,3,7,7,7,7,7,7,
3,5,5,5,5,5,5,5,5,5,5,5,3,7,5,5,
6,3,7,6,5,5,6,6,8,8,4,4,4,9,9,9,
7,6,3,7,5,7,6,7,6,6,3,3,6,5,5,5,
5,5,5,4,5,5,0,0,10,13,6,0,3,3,4,5,
8,6,10,9,3,4,4,5,8,3,4,3,3,6,6,6,
6,6,6,6,6,6,6,3,3,8,8,8,5,11,7,7,
8,8,7,6,8,8,3,3,7,6,9,8,8,7,8,7,
7,5,8,7,9,6,7,6,4,3,4,8,5,5,6,6,
5,6,6,4,6,6,2,2,5,2,10,6,6,6,6,4,
5,4,6,6,8,6,6,5,6,3,6,8,7,7,8,7,
8,8,8,6,6,6,6,6,6,5,6,6,6,6,2,2,
2,2,6,6,6,6,6,6,6,6,6,6,5,5,6,6,
5,6,6,6,10,10,10,5,5,8,10,8,8,8,8,8,
6,7,5,7,8,6,5,5,5,8,10,6,5,4,8,6,
6,8,7,6,6,10,6,7,7,8,11,10,5,10,5,5,
3,3,8,5,6,7,2,6,4,4,6,6,5,3,3,5,
13,7,7,7,7,7,3,3,3,3,8,8,8,8,8,8,
2,5,5,5,5,5,5,5,5,5,5,6,2,7,5,6,
5,3,8,6,7,6,7,6,8,8,4,4,4,10,10,10,
8,6,3,7,5,8,5,8,5,6,4,3,6,5,5,5,
5,5,5,4,5,5,0,0,11,15,7,0,3,3,3,5,
9,7,10,10,3,4,4,6,9,4,4,4,4,7,7,7,
7,7,7,7,7,7,7,4,4,9,9,9,6,12,7,8,
8,8,7,6,9,8,3,3,7,6,9,8,9,7,9,7,
8,7,8,7,9,7,7,9,4,4,4,9,6,6,7,7,
6,7,7,4,7,7,3,3,6,3,11,7,7,7,7,5,
7,4,7,6,9,6,6,5,7,4,7,9,7,7,8,7,
8,9,8,7,7,7,7,7,7,6,7,7,7,7,3,3,
3,3,7,7,7,7,7,7,7,7,7,7,6,6,7,7,
6,6,7,7,11,11,11,6,6,9,11,9,9,9,9,9,
7,7,6,7,8,6,6,5,5,8,11,7,6,3,9,7,
7,9,7,7,7,11,7,7,7,9,12,11,6,11,6,6,
4,4,9,5,6,7,2,7,4,4,7,7,6,4,4,6,
15,7,7,7,7,7,3,3,3,3,9,9,9,8,8,8,
3,6,6,6,6,6,6,6,6,6,6,6,3,8,7,9,
5,4,8,7,7,6,7,7,9,9,4,4,4,11,11,11,
9,7,3,8,7,8,6,8,6,7,4,4,7,6,6,6,
6,6,6,4,6,6,0,0,12,16,7,0,4,4,5,5,
10,8,11,10,3,5,5,6,10,4,4,4,4,8,8,8,
8,8,8,8,8,8,8,4,4,10,10,10,6,13,8,8,
8,9,8,7,9,9,3,3,7,6,10,9,9,8,9,8,
8,7,9,8,11,9,7,9,5,4,5,10,6,6,8,8,
7,8,8,4,8,8,3,3,7,3,11,8,8,8,8,5,
7,5,8,6,9,6,6,5,8,4,8,10,8,8,8,8,
9,9,9,8,8,8,8,8,8,7,8,8,8,8,3,3,
3,3,8,8,8,8,8,8,8,8,8,8,6,6,8,8,
6,7,8,8,12,12,12,6,6,10,12,9,10,10,10,10,
8,8,6,8,9,7,6,6,6,9,12,8,6,5,10,8,
8,10,8,7,7,12,8,8,8,9,13,13,6,12,6,6,
4,4,10,6,6,7,2,8,5,5,7,7,6,4,4,6,
16,8,8,8,8,8,3,3,3,3,9,9,9,9,9,9,
3,6,6,6,6,6,6,6,6,6,6,6,3,8,7,9,
5,4,9,8,7,6,8,8,10,10,5,5,5,12,12,12,
9,8,3,8,7,8,7,8,7,8,4,4,8,6,6,6,
6,6,6,5,6,6,0,0,13,17,8,0,4,4,5,5,
11,8,12,11,3,5,5,7,11,4,5,4,4,8,8,8,
8,8,8,8,8,8,8,4,4,11,11,11,7,13,9,9,
9,10,8,7,10,10,3,3,8,7,11,10,10,8,10,8,
9,7,10,9,11,10,7,10,5,4,5,11,7,7,8,8,
7,8,8,4,8,8,3,3,7,3,13,8,8,8,8,5,
7,5,8,7,9,7,7,7,8,4,8,11,9,9,9,8,
10,10,10,8,8,8,8,8,8,7,8,8,8,8,3,3,
3,3,8,8,8,8,8,8,8,8,8,8,7,7,8,8,
7,8,8,8,13,13,13,7,7,11,13,10,11,11,11,11,
8,8,7,9,10,8,7,6,6,10,13,8,7,5,11,8,
8,11,9,8,8,13,8,9,9,10,14,13,7,13,7,7,
4,4,11,6,7,7,2,8,5,5,8,8,7,4,4,7,
17,9,8,9,8,8,3,3,3,3,10,10,10,10,10,10,
3,7,7,7,7,7,7,7,7,7,7,7,3,9,7,10,
7,4,10,8,7,7,8,8,11,11,5,5,5,13,13,13,
10,8,3,9,7,9,7,9,7,8,5,4,8,7,7,7,
7,7,7,5,7,7,0,0,14,19,8,0,4,4,5,5,
12,9,13,12,3,5,5,7,12,4,5,4,5,9,9,9,
9,9,9,9,9,9,9,5,5,12,12,12,7,14,9,10,
10,11,9,8,11,10,3,3,9,7,12,10,11,9,11,10,
9,9,10,9,13,11,9,10,5,5,5,12,7,7,8,9,
8,9,9,4,9,9,3,3,8,3,13,9,9,9,9,5,
8,5,9,7,11,7,7,8,9,5,9,12,9,9,10,9,
10,11,10,8,8,8,8,8,8,8,9,9,9,9,3,3,
3,3,9,9,9,9,9,9,9,9,9,9,7,7,9,9,
7,8,9,9,14,14,14,7,7,12,14,11,12,12,12,12,
9,9,7,9,11,8,7,7,7,11,14,9,7,5,12,9,
9,12,9,9,9,14,9,9,9,11,15,15,7,14,7,7,
4,4,12,7,7,9,2,9,6,6,8,8,7,4,4,7,
19,9,9,9,9,9,3,3,3,3,11,11,11,10,10,10,
3,7,7,7,7,7,7,7,7,7,7,7,3,9,8,10,
8,5,11,9,9,7,9,9,12,12,6,6,6,14,14,14,
11,9,3,9,8,10,8,10,8,9,5,4,9,7,7,7,
7,7,7,6,7,7,0,0,15,20,9,0,5,5,6,6,
13,10,14,11,3,6,6,8,13,5,5,5,5,10,10,10,
10,10,10,10,10,10,10,5,5,13,13,13,8,15,10,10,
10,11,9,9,12,11,3,3,10,8,13,11,12,9,12,10,
10,9,11,10,15,10,9,11,6,5,6,13,8,8,9,9,
8,9,9,5,9,9,3,3,8,3,15,9,9,9,9,6,
8,6,9,8,13,10,8,8,10,5,10,13,10,10,10,9,
11,12,11,9,9,9,9,9,9,8,9,9,9,9,3,3,
3,3,9,9,9,9,9,9,9,9,9,9,8,8,10,10,
8,9,10,9,15,15,15,8,8,13,15,12,13,13,13,13,
10,9,8,10,11,9,8,7,7,11,15,9,8,6,13,10,
10,13,10,9,9,15,10,10,10,12,16,15,8,15,8,8,
5,5,13,7,8,9,3,10,6,6,9,9,8,5,5,8,
20,10,9,10,9,9,3,3,3,3,12,12,12,11,11,11,
3,8,8,8,8,8,8,8,8,8,8,8,3,10,8,11,
8,5,12,9,9,8,9,9,13,13,6,6,6,15,15,15,
12,9,3,10,8,10,8,10,8,9,5,5,10,8,8,8,
8,8,8,6,8,8,0,0,16,21,10,0,5,5,6,6,
13,10,15,12,3,6,6,8,13,5,6,5,5,10,10,10,
10,10,10,10,10,10,10,5,5,13,13,13,9,16,11,11,
11,12,10,9,12,12,5,5,10,9,13,12,13,10,13,11,
10,9,12,11,17,11,9,12,6,5,6,13,8,8,9,10,
9,10,9,6,10,10,3,3,9,3,15,10,10,10,10,7,
9,6,10,9,13,10,9,9,10,5,10,13,11,11,11,10,
12,13,12,9,9,9,9,9,9,9,9,9,9,9,3,3,
3,3,10,10,10,10,10,10,10,10,10,10,8,8,10,10,
8,9,10,10,16,16,16,8,8,13,16,13,13,13,13,13,
10,10,8,11,12,9,8,8,8,12,16,10,9,6,13,10,
10,13,11,10,10,16,10,11,11,13,17,15,8,16,8,8,
5,5,13,8,9,9,3,10,6,6,10,10,8,5,5,8,
21,11,10,11,10,10,5,5,5,5,13,13,13,12,12,12,
3,8,8,8,8,8,8,8,8,8,8,9,4,10,9,12,
9,5,13,10,9,9,10,10,13,13,6,6,6,16,16,16,
12,10,5,10,9,11,9,11,9,10,6,5,10,8,8,8,
8,8,8,6,8,8,0,0,17,23,10,0,5,5,7,8,
14,11,16,13,5,7,7,9,14,5,6,5,6,11,11,11,
11,11,11,11,11,11,11,6,6,14,14,14,9,17,11,12,
12,13,11,10,13,13,6,6,12,9,15,13,13,10,13,12,
11,10,13,11,18,13,10,12,7,6,7,14,9,9,10,10,
8,10,10,6,10,11,5,5,10,5,17,11,10,10,10,7,
8,7,11,10,15,10,10,8,11,6,11,14,11,11,12,11,
13,13,13,10,10,10,10,10,10,8,10,10,10,10,5,5,
5,5,11,10,10,10,10,10,11,11,11,11,9,9,11,11,
9,10,11,11,17,17,17,9,9,14,16,13,14,14,14,14,
11,11,9,11,13,10,9,8,8,13,16,10,9,7,14,11,
11,14,11,10,10,17,11,11,11,13,18,17,9,17,9,9,
5,5,14,8,10,10,3,11,7,7,10,10,9,5,5,9,
23,11,11,11,11,11,6,6,6,6,13,13,13,13,13,13,
5,9,9,9,9,9,9,9,9,9,9,10,5,11,8,12,
8,6,13,10,10,10,10,10,14,14,7,7,7,16,16,16,
13,10,6,11,8,12,8,12,8,10,6,5,11,9,9,9,
9,9,9,7,9,9,0,0,18,24,11,0,6,6,7,8,
15,11,17,13,4,7,7,9,15,6,7,6,6,11,11,11,
11,11,11,11,11,11,11,6,6,15,15,15,10,18,12,12,
13,14,11,10,14,14,6,6,12,10,16,14,14,11,14,13,
11,12,14,12,19,13,12,13,7,6,7,15,9,9,10,11,
9,11,11,6,11,11,5,5,10,5,17,11,11,11,11,8,
8,7,11,11,16,11,11,9,11,6,11,15,12,12,13,11,
14,14,14,10,10,10,10,10,10,9,11,11,11,11,5,5,
5,5,11,11,11,11,11,11,11,11,11,11,9,9,11,11,
9,11,11,11,18,18,18,9,9,15,17,14,15,15,15,15,
11,11,9,12,14,11,9,8,8,14,17,11,10,7,15,11,
11,15,12,11,11,18,11,12,12,14,19,19,9,18,9,9,
6,6,15,9,11,12,3,11,7,7,11,11,9,6,6,9,
24,12,11,12,11,11,6,6,6,6,14,14,14,14,14,14,
5,9,9,9,9,9,9,9,9,9,9,10,5,11,8,13,
9,6,14,11,12,11,11,11,15,15,7,7,7,17,17,17,
14,11,6,11,8,13,9,13,9,11,7,6,11,9,9,9,
9,9,9,7,9,9,0,0,19,26,11,0,6,6,8,8,
16,12,18,14,4,7,7,10,16,6,7,6,6,12,12,12,
12,12,12,12,12,12,12,6,6,16,16,16,10,19,13,13,
13,15,12,11,15,14,6,6,12,11,16,14,15,12,15,13,
12,12,14,13,20,14,12,13,7,6,7,16,10,10,11,11,
9,11,11,6,11,12,5,5,11,5,17,12,11,11,11,8,
9,8,12,11,17,11,11,11,12,6,12,16,13,13,13,12,
14,15,14,11,11,11,11,11,11,9,11,11,11,11,5,5,
5,5,12,11,11,11,11,11,12,12,12,12,10,10,12,12,
10,11,12,12,19,19,19,10,10,16,18,15,16,16,16,16,
12,12,10,13,14,11,10,9,9,15,18,11,10,8,16,12,
12,16,13,12,12,19,12,13,13,15,20,19,10,19,10,10,
6,6,16,9,11,12,3,12,8,8,11,11,10,6,6,10,
26,13,12,13,12,12,6,6,6,6,15,15,15,14,14,14,
5,10,10,10,10,10,10,10,10,10,10,11,5,12,9,13,
11,6,15,11,12,11,12,11,16,16,8,8,8,18,18,18,
15,11,6,12,9,13,9,13,9,11,7,6,12,10,10,10,
10,10,10,8,10,10,0,0,20,27,12,0,6,6,8,10,
17,13,19,15,6,8,8,10,17,6,7,6,7,13,13,13,
13,13,13,13,13,13,13,7,7,17,17,17,11,20,14,14,
14,15,13,12,16,15,6,6,13,11,17,15,16,12,16,14,
13,12,15,14,20,14,12,14,8,7,8,17,10,10,12,13,
11,13,12,7,13,13,6,6,12,6,20,13,12,13,13,8,
10,8,13,11,17,11,11,11,13,7,13,17,14,14,14,13,
15,16,15,12,12,12,12,12,12,11,12,12,12,12,6,6,
6,6,13,12,12,12,12,12,13,13,13,13,10,10,13,13,
10,12,13,13,20,20,20,10,10,17,20,16,17,17,17,17,
13,13,10,13,15,12,10,9,9,15,19,12,11,8,17,13,
13,17,13,12,12,20,13,14,14,16,21,20,10,20,10,10,
6,6,17,10,11,12,3,13,8,8,13,13,10,6,6,10,
27,14,13,14,13,13,6,6,6,6,16,16,16,15,15,15,
6,10,10,10,10,10,10,10,10,10,10,11,6,13,10,14,
11,7,15,12,12,11,12,13,17,17,8,8,8,19,19,19,
16,13,6,13,10,14,11,14,11,13,7,6,13,10,10,10,
10,10,10,8,10,10,0,0,21,28,13,0,7,7,8,10,
18,13,20,16,6,8,8,11,18,7,8,7,7,13,13,13,
13,13,13,13,13,13,13,7,7,18,18,18,11,21,14,14,
15,16,13,12,16,16,6,6,14,12,18,16,17,13,17,15,
13,13,15,14,21,14,13,14,8,7,8,18,11,11,13,13,
12,13,13,7,13,13,6,6,12,6,20,14,13,13,13,9,
11,8,14,11,17,13,13,11,13,7,13,18,14,14,15,13,
16,17,15,13,13,13,13,13,13,12,13,13,13,13,6,6,
6,6,14,13,13,13,13,13,14,14,14,14,11,11,13,13,
11,12,13,13,21,21,21,11,11,18,20,17,18,18,18,18,
13,14,11,14,16,12,11,10,10,16,20,13,11,8,18,13,
13,18,14,13,13,21,13,14,14,17,22,22,11,21,11,11,
7,7,18,10,13,13,4,13,8,8,13,13,11,7,7,11,
28,14,13,14,13,13,6,6,6,6,17,17,17,15,15,15,
6,11,11,11,11,11,11,11,11,11,11,12,6,13,11,14,
11,7,16,13,13,13,13,13,18,18,8,8,8,20,20,20,
16,13,6,13,11,15,12,15,12,13,8,7,13,11,11,11,
11,11,11,8,11,11,0,0,22,30,13,0,7,7,9,10,
18,14,21,17,6,9,9,11,18,7,8,7,7,14,14,14,
14,14,14,14,14,14,14,7,7,18,18,18,12,22,15,15,
15,17,14,13,17,17,6,6,14,12,19,16,17,13,17,15,
14,13,16,15,22,15,13,15,9,7,9,18,11,11,13,14,
12,14,13,8,14,14,6,6,13,6,22,14,13,14,14,9,
11,9,14,14,18,14,14,12,14,7,14,18,15,15,15,14,
16,17,16,13,13,13,13,13,13,12,13,13,13,13,6,6,
6,6,14,13,13,13,13,13,14,14,14,14,11,11,14,14,
11,13,14,14,22,22,22,11,11,18,21,17,18,18,18,18,
14,14,11,15,17,13,11,10,10,17,21,13,12,9,18,14,
14,18,15,13,13,22,14,15,15,17,24,22,11,22,11,11,
7,7,18,11,14,13,4,14,9,9,13,13,11,7,7,11,
30,15,14,15,14,14,6,6,6,6,17,17,17,16,16,16,
6,11,11,11,11,11,11,11,11,11,11,12,6,14,11,15,
12,7,17,13,13,14,13,14,18,18,9,9,9,21,21,21,
17,14,6,14,11,15,12,15,12,14,8,7,14,11,11,11,
11,11,11,9,11,11,0,0,23,31,14,0,7,7,9,11,
19,15,22,18,6,9,9,12,19,7,8,7,8,15,15,15,
15,15,15,15,15,15,15,8,8,19,19,19,12,23,16,16,
16,18,15,13,18,17,7,7,15,13,20,17,18,14,18,16,
15,14,17,16,23,16,14,16,9,8,9,19,12,12,14,15,
13,15,14,8,15,15,6,6,13,6,22,15,14,14,14,9,
12,9,15,14,19,14,14,12,15,8,15,19,16,16,16,15,
17,18,17,14,14,14,14,14,14,13,14,14,14,14,6,6,
6,6,15,14,14,14,14,14,15,15,15,15,12,12,15,15,
12,14,15,14,23,23,23,12,12,19,22,18,19,19,19,19,
15,15,12,16,17,14,12,11,11,18,21,14,12,9,19,15,
15,19,15,14,14,23,15,16,16,18,25,24,12,23,12,12,
7,7,19,11,14,14,4,15,9,9,15,15,12,7,7,12,
31,16,15,16,15,15,7,7,7,7,18,18,18,17,17,17,
6,12,12,12,12,12,12,12,12,12,12,13,6,15,12,16,
12,8,18,14,14,14,14,14,19,19,9,9,9,22,22,22,
18,15,7,15,12,16,13,16,13,15,8,7,15,12,12,12,
12,12,12,9,12,12,0,0,24,32,14,0,8,8,10,11,
20,15,23,19,7,9,9,12,20,8,9,8,8,15,15,15,
15,15,15,15,15,15,15,8,8,20,20,20,13,24,16,16,
17,18,15,14,19,18,7,7,16,13,21,18,19,14,19,17,
15,15,18,16,24,16,15,16,9,8,9,20,12,12,14,15,
13,15,14,8,15,15,7,7,14,6,24,15,14,15,15,10,
12,9,15,15,20,15,15,13,15,8,15,20,16,16,17,15,
18,19,18,14,14,14,14,14,14,13,14,14,14,14,7,7,
7,7,15,14,14,14,14,14,15,15,15,15,12,12,15,15,
12,14,15,15,24,24,24,12,12,20,23,19,20,20,20,20,
15,15,12,16,18,14,13,11,11,18,23,14,13,10,20,15,
15,20,16,15,15,24,15,16,16,19,26,24,12,24,12,12,
8,8,20,12,15,15,4,15,10,10,15,15,12,8,8,12,
32,16,15,16,15,15,7,7,7,7,19,19,19,18,18,18,
7,12,12,12,12,12,12,12,12,12,12,13,6,15,12,16,
13,8,19,14,15,15,15,15,20,20,10,10,10,23,23,23,
19,15,7,15,12,17,13,17,13,15,9,8,15,12,12,12,
12,12,12,10,12,12,0,0,25,34,15,0,8,8,10,12,
21,16,24,20,7,10,10,13,21,8,9,8,8,16,16,16,
16,16,16,16,16,16,16,8,8,21,21,21,13,25,17,17,
17,19,16,14,19,19,7,7,16,14,22,19,20,15,20,17,
16,15,18,17,25,17,15,17,10,8,10,21,13,13,15,16,
14,16,15,9,16,16,7,7,14,7,24,16,15,16,16,10,
13,10,16,15,20,15,15,13,16,8,16,21,17,17,17,16,
19,20,18,15,15,15,15,15,15,14,15,15,15,15,7,7,
7,7,16,15,15,15,15,15,16,16,16,16,13,13,16,16,
13,15,16,16,25,25,25,13,13,21,24,20,21,21,21,21,
16,16,13,17,19,15,13,12,12,19,25,15,13,10,21,16,
16,21,17,15,15,25,16,17,17,20,27,26,13,25,13,13,
8,8,21,12,15,15,4,16,10,10,16,16,13,8,8,13,
34,17,16,17,16,16,7,7,7,7,20,20,20,18,18,18,
7,13,13,13,13,13,13,13,13,13,13,14,7,16,13,17,
13,8,19,15,15,15,15,16,21,21,10,10,10,24,24,24,
19,16,7,16,13,17,14,17,14,16,9,8,16,13,13,13,
13,13,13,10,13,13,0,0,26,35,16,0,8,8,10,12,
22,17,25,20,7,10,10,13,22,8,9,8,9,17,17,17,
17,17,17,17,17,17,17,9,9,22,22,22,14,26,18,18,
18,20,16,15,20,20,8,8,17,14,22,19,20,16,20,18,
17,16,19,18,26,18,16,18,10,9,10,22,13,13,16,17,
14,17,16,9,17,16,7,7,15,7,25,16,16,17,17,11,
14,10,16,15,21,15,15,14,17,9,17,22,18,18,18,16,
19,20,19,16,16,16,16,16,16,14,16,16,16,16,7,7,
7,7,16,16,16,16,16,16,16,16,16,16,13,13,17,17,
13,15,17,16,26,26,26,13,13,22,25,20,22,22,22,22,
17,17,13,18,20,15,14,12,12,20,26,16,14,10,22,17,
17,22,17,16,16,26,17,18,18,20,28,27,13,26,13,13,
8,8,22,13,15,16,4,17,10,10,16,16,13,8,8,13,
35,18,16,18,16,16,8,8,8,8,20,20,20,19,19,19,
7,13,13,13,13,13,13,13,13,13,13,15,7,17,14,18,
14,9,20,16,16,15,16,17,22,22,10,10,10,25,25,25,
20,17,8,17,14,18,14,18,14,17,9,8,17,13,13,13,
13,13,13,10,13,13,0,0,27,36,16,0,9,9,11,12,
23,17,26,21,7,11,11,14,23,9,10,9,9,17,17,17,
17,17,17,17,17,17,17,9,9,23,23,23,14,27,18,19,
19,21,17,16,21,20,8,8,18,15,23,20,21,16,21,19,
17,17,20,18,27,19,17,19,11,9,11,23,14,14,17,17,
15,17,17,10,17,17,8,8,16,8,26,17,17,17,17,11,
14,11,17,16,22,16,16,14,17,9,17,23,18,18,19,17,
20,21,20,17,17,17,17,17,17,15,17,17,17,17,8,8,
8,8,17,17,17,17,17,17,17,17,17,17,14,14,17,17,
14,16,17,17,27,27,27,14,14,23,26,21,22,23,23,23,
17,17,14,18,20,16,14,13,13,21,27,17,14,11,23,17,
17,23,18,17,17,27,17,18,18,21,29,28,14,27,14,14,
9,9,23,13,16,17,5,17,11,11,17,17,14,9,9,14,
36,18,17,18,17,17,8,8,8,8,21,21,21,20,20,20,
8,14,14,14,14,14,14,14,14,14,14,15,8,17,14,19,
14,9,21,17,17,16,16,17,23,23,11,11,11,26,26,26,
21,17,8,17,14,19,15,19,15,17,10,9,17,14,14,14,
14,14,14,11,14,14,0,0,28,38,17,0,9,9,11,13,
23,18,27,22,8,11,11,14,23,9,10,9,9,18,18,18,
18,18,18,18,18,18,18,9,9,23,23,23,15,28,19,19,
20,22,18,16,22,21,8,8,18,16,24,21,22,17,22,19,
18,17,21,19,28,19,17,19,11,9,11,23,14,14,17,18,
15,18,17,10,18,18,8,8,16,8,27,18,17,18,18,12,
15,11,18,17,23,17,17,15,18,9,18,23,19,19,20,18,
21,22,21,17,17,17,17,17,17,15,17,17,17,17,8,8,
8,8,18,17,17,17,17,17,18,18,18,18,14,14,18,18,
14,17,18,18,28,28,28,14,14,23,27,22,23,23,23,23,
18,18,14,19,21,16,15,13,13,21,28,17,15,11,23,18,
18,23,19,17,17,28,18,19,19,22,30,29,14,28,15,15,
9,9,23,14,17,17,5,18,11,11,18,18,14,9,9,15,
38,19,18,19,18,18,8,8,8,8,22,22,22,21,21,21,
8,14,14,14,14,14,14,14,14,14,14,16,8,18,15,19,
15,9,22,17,17,17,17,18,23,23,11,11,11,27,27,27,
22,18,8,18,15,20,15,20,15,18,10,9,18,14,14,14,
14,14,14,11,14,14,0,0,0,0,0,2,0,8,0,2,
255,255,0,3,0,1,0,0,0,2,0,0,12,80,10,236,
95,15,60,245,0,31,8,0,0,0,0,0,186,185,240,184,
0,0,0,0,186,194,103,145,254,137,254,29,10,76,7,109,
0,0,0,8,0,1,0,0,0,0,0,0
};
static TTF_Font *font;
static void init_text() {
    SDL_RWops *fontrw = SDL_RWFromMem((void *)fontbits, sizeof(fontbits));
    if (!TTF_WasInit()) {
        TTF_Init();
        font = TTF_OpenFontRW(fontrw, 0, 12);
    }
}
static Uint8 *keystate;  /* for KeyboardPushed */
static int numkeys;
static Uint8 keyrel[SDLK_LAST];  /* for KeyboardReleased */
static Uint8 mousebuttons;
static int mousex;
static int mousey;
static int framerate = 60;static SDL_Color frontcolor;
static SDL_Joystick *joystick;
static void putpixel(SDL_Surface *surface, int x, int y, uint32_t color) {
	if (x < 0 || y < 0 || x > surface->w || y > surface->h)
		return;

	switch (surface->format->BytesPerPixel) {
	case 1:
		((uint8_t *)surface->pixels)[x + y * surface->pitch] = color;
		break;
	case 2:
		((uint16_t *)surface->pixels)[x + y * surface->pitch/2] = color;
		break;
	case 4:
		((uint32_t *)surface->pixels)[x + y * surface->pitch/4] = color;
		break;
	}
}

static void linedraw(int x, int y, int dx, int dy, Uint32 color) {
	int i, j;

	SDL_LockSurface(screen);

	if (abs(dx) > abs(dy)) {
		/* Normalize dx positive */
		if (dx < 0) {
			x += dx;
			y += dy;
			dx = -dx;
			dy = -dy;
		}
		j = 0;
		for (i = 0; i < dx; i++) {
			putpixel(screen, x + i, y, color);
			j += abs(dy);
			if (j >= dx) {
				j -= dx;
				y += dy > 0 ? 1 : -1;
			}
		}
	} else {
		/* Normalize dy positive */
		if (dy < 0) {
			x += dx;
			y += dy;
			dx = -dx;
			dy = -dy;
		}
		j = 0;
		for (i = 0; i < dy; i++) {
			putpixel(screen, x, y + i, color);
			j += abs(dx);
			if (j >= dy) {
				j -= dy;
				x += dx > 0 ? 1 : -1;
			}
		}
	}

	SDL_UnlockSurface(screen);
}
static std::map<intptr_t, Mix_Music *> modmap;
static intptr_t modmap_last_dynamic;
static uint32_t word(unsigned char *w) {
	return w[0] | (w[1]<<8) | (w[2]<<16) | (w[3]<<24);
}

static ssize_t fullread(int fd, unsigned char *buf, size_t count) {
	size_t n = 0;
	ssize_t r = 0;
	while (n < count) {
		r = read(fd, buf + n, count - n);
		if (r < 0 && errno == EINTR)
			continue;
		if (r < 0)
			return r;
		if (r == 0)
			return n;
		n += r;
	}
	return n;
}

static unsigned char *packed;
static int packedsize;

static unsigned char *packp;
static uint64_t curword;
static int bitsleft;

static uint32_t getbits(int bits) {
	if (bits > bitsleft) {
		curword <<= 32;
		curword |= word(packp);
		packp += 4;
		bitsleft += 32;
	}
	bitsleft -= bits;
	return (curword >> bitsleft) & ((1 << bits) - 1);
}

static uint32_t decodegamma() {
	uint32_t w = 1;
	do {
		w = (w << 1) | getbits(1);
	} while (getbits(1));
	return w;
}

static int decode() {
	int indexbase = 8;
	int lastindex = 1;
	int minimumliteral = 0;
	int literalbits = 8;
	unsigned char *dest = packfile;

	bitsleft = 0;
	curword = 0;

	for (;;) {
		if (packp - packed > packedsize + 4)
			return 0;
		if (dest - packfile > packfilesize)
			return 0;
		if (getbits(1)) {
			/* 1 Literal */
			*dest++ = getbits(literalbits) + minimumliteral;
		} else if (getbits(1)) {
			/* 01 Normal phrase */
			int l;
			int g = decodegamma();
			if (g == 2) {
				/* 0100 repeated normal phrase */
				l = decodegamma();
			} else {
				lastindex = getbits(indexbase) | ((g-3) << indexbase);
				l = decodegamma();
				if (lastindex >= 0x10000)
					l += 3;
				else if (lastindex >= 0x37ff)
					l += 2;
				else if (lastindex >= 0x27f)
					l += 1;
				else if (lastindex <= 0x7f)
					l += 4;
			}
			if (dest - packfile < lastindex)
				return 0;
			if (dest - packfile + l > packfilesize)
				return 0;
			/* Unfortunately can't use memmove or memcpy here,
                         * because l > lastindex is allowed, and the
                         * overlapping copy should be handled in this
                         * specific way. */
			while (l--) {
				*dest = *(dest - lastindex);
				dest++;
			}
		} else if (getbits(1)) {
			int x = getbits(4);
			if (!x) {
				if (getbits(1)) {
					/* 00100001 Block sequence */
					do {
						int n;
						if (dest - packfile + 256 > packfilesize)
							return 0;
						for (n = 0; n < 256; n++) {
							*dest++ = getbits(8);
						}
					} while (getbits(1));
				} else if (getbits(1)) {
					/* 001000001 */
					literalbits = 8;
					minimumliteral = 0;
				} else {
					/* 001000000xxxxxxxx */
					literalbits = 7;
					minimumliteral = getbits(8);
				}
			} else if (x == 1) {
				/* 0010001 literal byte 00 */
				*dest++ = 0;
			} else {
				/* 001xxxx single byte match */
				if (dest - packfile < x-1)
					return 0;
				*dest = *(dest-(x-1));
				dest++;
			}
		} else {
			int x = getbits(7);
			int y = getbits(2);
			if (!x && !y) {
				/* 000000000000 done */
				return dest - packfile; /* decoded size */
			}
			if (x) {
				if (dest - packfile < x)
					return 0;
				if (dest - packfile + y+2 > packfilesize)
					return 0;
				/* 000xxxxxxxyy Short match */
				lastindex = x;
				y += 2;
				/* can't memmove, same reason as above */
			        while (y--) {
					*dest = *(dest - lastindex);
					dest++;
				}
			} else {
				/* 0000000000yybbbb New index base */
				indexbase = getbits(y+3);
			}
		}
	}
}

static int nextpack() {
	unsigned char sizes[8];
	if (packfd < 0)
		return 0;
	if (fullread(packfd, sizes, 8) < 8) {
		closepack();
		return 0;
	}
	packfilesize = word(sizes);
	packedsize = word(sizes + 4);
	if (packedsize > packfilesize) {
		closepack();
		return 0;
	}
	packfile = new unsigned char [packfilesize];
	if (packedsize == packfilesize) {  /* not compressed */
		if (fullread(packfd, packfile, packfilesize) < packfilesize) {
			closepack();
			return 0;
		}
		return 1;
	}
	packed = new unsigned char [packedsize];
	packp = packed + 10;
	if (packedsize < 14 ||
	    fullread(packfd, packed, packedsize) < packedsize ||
	    word(packed + 2) != packfilesize ||
	    packed[0] != 'J' || packed[1] != 'C' ||
	    decode() != packfilesize) {
		delete[] packed;
		closepack();
		return 0;
	}
	return 1;
}
static void init_random() {
    struct timeval tv;
    unsigned int seed;

    gettimeofday(&tv, 0);
    seed = tv.tv_usec ^ tv.tv_sec ^ getpid();
    srandom(seed);
}
#include <ctype.h>
#include <stack>
/*
 * Define ordering functions for all the types needed
 */

typedef int (*ordered_fn)(ListElement *, ListElement*, int);

template <typename T>
static int e_asc(ListElement *elem1, ListElement *elem2, int offset) {
    T *e1 = reinterpret_cast<T *>(reinterpret_cast<char *>(elem1+1)+offset);
    T *e2 = reinterpret_cast<T *>(reinterpret_cast<char *>(elem2+1)+offset);
    return (*e1) <= (*e2);
}

template <typename T>
static int e_desc(ListElement *elem1, ListElement *elem2, int offset) {
    T *e1 = reinterpret_cast<T *>(reinterpret_cast<char *>(elem1+1)+offset);
    T *e2 = reinterpret_cast<T *>(reinterpret_cast<char *>(elem2+1)+offset);
    return (*e1) >= (*e2);
}

static int e_asc_cistring(ListElement *elem1, ListElement *elem2, int offset) {
    std::string *e1 = reinterpret_cast<std::string *>(reinterpret_cast<char *>(elem1+1)+offset);
    std::string *e2 = reinterpret_cast<std::string *>(reinterpret_cast<char *>(elem2+1)+offset);
    size_t upto = e1->length() < e2->length() ? e1->length() : e2->length();
    for (size_t i = 0; i < upto; i++) {
        if (tolower((*e1)[i]) < tolower((*e2)[i]))
            return 1;
        if (tolower((*e1)[i]) > tolower((*e2)[i]))
            return 0;
    }
    return e1->length() <= e2->length();
}

static int e_desc_cistring(ListElement *elem1, ListElement *elem2, int offset) {
    std::string *e1 = reinterpret_cast<std::string *>(reinterpret_cast<char *>(elem1+1)+offset);
    std::string *e2 = reinterpret_cast<std::string *>(reinterpret_cast<char *>(elem2+1)+offset);
    size_t upto = e1->length() < e2->length() ? e1->length() : e2->length();
    for (size_t i = 0; i < upto; i++) {
        if (tolower((*e1)[i]) > tolower((*e2)[i]))
            return 1;
        if (tolower((*e1)[i]) < tolower((*e2)[i]))
            return 0;
    }
    return e1->length() >= e2->length();
}

/* These are in the order of the PB_Sort_ constants */
static ordered_fn comparators_asc[] = {
    &e_asc<int8_t>, &e_asc<int16_t>, &e_asc<int32_t>,
    &e_asc<std::string>, &e_asc<float>, &e_asc<double>,
    &e_asc<int64_t>, &e_asc<uint8_t>, &e_asc<intptr_t>,
    &e_asc<uint8_t>, &e_asc<uint16_t>
};
static ordered_fn comparators_desc[] = {
    &e_desc<int8_t>, &e_desc<int16_t>, &e_desc<int32_t>,
    &e_desc<std::string>, &e_desc<float>, &e_desc<double>,
    &e_desc<int64_t>, &e_desc<uint8_t>, &e_desc<intptr_t>,
    &e_desc<uint8_t>, &e_desc<uint16_t>
};
/* For PB_Sort_String, indexed by option value */
static ordered_fn comparators_string[] = {
    &e_asc<std::string>, &e_desc<std::string>,
    &e_asc_cistring, &e_desc_cistring
};

/* opt = 0: ascending; opt = 1: descending;
 * opt = 2: case-insensitive asc; opt = 3: case-insensitive desc */
static ordered_fn comparator(int pb_sort, int opt) {
    if (pb_sort < 0 || pb_sort > 7)
        return 0;
    if (opt < 0 || opt > 3)
        return 0;
    if (pb_sort == 3)
        return comparators_string[opt];
    if  (opt == 0 || opt == 2)
        return comparators_asc[pb_sort];
    else
        return comparators_desc[pb_sort];
}

class SortedList {
  public:
    ListElement *root;
    ListElement *last;
    int length;
    ordered_fn ordered_p;
    int offset;
    SortedList(ordered_fn ordered_p, int offset)
      : root(), last(), length(), ordered_p(ordered_p), offset(offset) {};

    void clear() {
        this->root = 0;
        this->last = 0;
        this->length = 0;
    }

    void append(ListElement *first, ListElement *last, int length) {
        if (!this->root)
            this->root = first;
        first->prev = this->last;
        if (this->last)
            this->last->next = first;
        this->last = last;
        last->next = 0;
        this->length += length;
    }

    void append_one(ListElement *e) {
        if (!this->root)
            this->root = e;
        e->prev = this->last;
        if (this->last)
            this->last->next = e;
        this->last = e;
        e->next = 0;
        this->length += 1;
    }

    void insert_first(ListElement *e) {
        e->prev = 0;
        e->next = this->root;
        if (this->root)
            this->root->prev = e;
        this->root = e;
        if (!this->last)
            this->last = e;
        this->length += 1;
    }

    void insert_after(ListElement *p, ListElement *e) {
        e->prev = p;
        e->next = p->next;
        p->next = e;
        if (this->last == p)
            this->last = e;
        this->length += 1;
    }

    /* Put e in sorted location in list. Start checking from end of list
     * in order to keep a stable sort */
    void insert_sort(ListElement *e) {
        ListElement *p = this->last;
        while (p && !this->ordered_p(p, e, this->offset)) {
            p = p->prev;
        }
        if (!p)
            this->insert_first(e);
        else
            this->insert_after(p, e);
    }

    /* Take up to n elements from 'start' list and sort them into this list */
    ListElement *gobble_n(ListElement *start, int count) {
        ListElement *p = start;
        for (int i = 0; p && i < count; i++) {
            ListElement *n = p->next;
            this->insert_sort(p);
            p = n;
        }
        return p;
    }

    /* Take the elements from the start of 'start' list that can be
     * appended to this list without reordering */
    ListElement *gobble_more(ListElement *start) {
        if (!this->last && start) {
            ListElement *e = start;
            start = start->next;
            this->insert_first(e);
        }
        if (!start || !this->ordered_p(this->last, start, this->offset))
            return start;
        int count = 1;
        ListElement *p = start;
        while (p->next && this->ordered_p(p, p->next, this->offset)) {
            p = p->next;
            count += 1;
        }
        ListElement *n = p->next;
        this->append(start, p, count);
        return n;
    }

    /* Merge other list into this list. Destructive of other list. */
    void merge(SortedList &l1) {
        SortedList l2(*this);
        this->clear();
        /* Fast merge of already-ordered lists */
        if (this->ordered_p(l1.last, l2.root, this->offset)) {
            this->append(l1.root, l1.last, l1.length);
            this->append(l2.root, l2.last, l2.length);
            return;
        }
        ListElement *p1 = l1.root;
        ListElement *p2 = l2.root;
        ListElement *n;
        while (p1 && p2) {
            if (this->ordered_p(p1, p2, this->offset)) {
                n = p1->next;
                this->append_one(p1);
                p1 = n;
                l1.length -= 1;
            } else {
                n = p2->next;
                this->append_one(p2);
                p2 = n;
                l2.length -= 1;
            }
        }
        if (p1)
            this->append(p1, l1.last, l1.length);
        if (p2)
            this->append(p2, l2.last, l2.length);
    }

};

static void listsort(LinkedList& list, ordered_fn ordered_p, int offset) {
    std::stack<SortedList> stack;
    SortedList current(ordered_p, offset);
    ListElement *p = list.root;

    /* Natural merge sort variation:
     * Split the list into small chunks, sort each chunk with insertion sort
     * The chunks are at least 8 elements long, and are then extended
     * with whatever part of the list is ordered already.
     * Push the chunks onto a stack, and merge chunks with the top of the
     * stack when they are of similar size.
     * With some care in the helper functions, this approach is a stable
     * sort (it does not reorder already-ordered elements in the list)
     * and it is fast on already-ordered lists.
     */
    for (;;) {
        p = current.gobble_n(p, 8);
        p = current.gobble_more(p);
        if (!p)
            break;
        while (!stack.empty() && current.length * 2 > stack.top().length) {
            current.merge(stack.top());
            stack.pop();
        }
        stack.push(current);
        current.clear();
    }

    while (!stack.empty()) {
        current.merge(stack.top());
        stack.pop();
    }
    list.root = current.root;
    list.last = current.last;
    list.index = LISTINDEX_INVALID;
    return;
}

static float p_abs(float p1) {
return fabsf(p1);

}

static char * p_addelement(LinkedList& p1) {
struct ListElement *newelem = p1.alloc_elem();
if (!newelem)
    return 0;
if (p1.length == 0) {
    insertonly(p1, newelem);
} else if (!p1.current) {
    insertfirst(p1, newelem);
} else if (p1.current == p1.last) {
    insertlast(p1, newelem);
} else {
    newelem->next = p1.current->next;
    newelem->prev = p1.current;
    newelem->next->prev = newelem;
    newelem->prev->next = newelem;
    p1.current = newelem;
    p1.length += 1;
    if (p1.index != LISTINDEX_INVALID)
        p1.index += 1;
}
return reinterpret_cast<char *>(p1.current);

}

static intptr_t p_anz_staffpieces() {
	int16_t v_anz_pieces = 0;
	intptr_t v_i = 0;
	v_anz_pieces = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_inventory("anz_staffpieces", v_i, g_akt_spieler).f_name == 403 || a_inventory("anz_staffpieces", v_i, g_akt_spieler).f_name == 404 || a_inventory("anz_staffpieces", v_i, g_akt_spieler).f_name == 405 || a_inventory("anz_staffpieces", v_i, g_akt_spieler).f_name == 406 || a_inventory("anz_staffpieces", v_i, g_akt_spieler).f_name == 407 || a_inventory("anz_staffpieces", v_i, g_akt_spieler).f_name == 408 || a_inventory("anz_staffpieces", v_i, g_akt_spieler).f_name == 409 || a_inventory("anz_staffpieces", v_i, g_akt_spieler).f_name == 410 || a_inventory("anz_staffpieces", v_i, g_akt_spieler).f_name == 411) {
			v_anz_pieces = (v_anz_pieces + 1);
		}
	}
	for (v_i = 1; v_i <= 9; v_i += 1) {
		if (a_spieler("anz_staffpieces", g_akt_spieler).f_staff_pieces[v_i] == 1) {
			v_anz_pieces = (v_anz_pieces + 1);
		}
	}
	return v_anz_pieces;
}

static intptr_t p_aus_schule(int16_t v_spell) {
	int16_t v_schule = 0;
	v_schule = 0;
	if ((a_spells("aus_schule", v_spell).f_summoning == 1 || a_spells("aus_schule", v_spell).f_school == 67) && a_skills("aus_schule", 67, g_akt_spieler).f_gewaehlt == 1) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 1 && !a_skills("aus_schule", 136, g_akt_spieler).f_gewaehlt) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 55 && (a_skills("aus_schule", 55, g_akt_spieler).f_gewaehlt == 1 || a_skills("aus_schule", 62, g_akt_spieler).f_gewaehlt == 1)) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 53 && (a_skills("aus_schule", 53, g_akt_spieler).f_gewaehlt == 1 || a_skills("aus_schule", 62, g_akt_spieler).f_gewaehlt == 1)) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 52 && a_skills("aus_schule", 52, g_akt_spieler).f_gewaehlt == 1) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 57 && a_skills("aus_schule", 57, g_akt_spieler).f_gewaehlt == 1) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 54 && (a_skills("aus_schule", 54, g_akt_spieler).f_gewaehlt == 1 || a_skills("aus_schule", 62, g_akt_spieler).f_gewaehlt == 1)) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 48 && a_skills("aus_schule", 48, g_akt_spieler).f_gewaehlt == 1) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 56 && (a_skills("aus_schule", 56, g_akt_spieler).f_gewaehlt == 1 || a_skills("aus_schule", 62, g_akt_spieler).f_gewaehlt == 1)) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 51 && a_skills("aus_schule", 51, g_akt_spieler).f_gewaehlt == 1) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 60 && a_skills("aus_schule", 60, g_akt_spieler).f_gewaehlt == 1) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 49 && a_skills("aus_schule", 49, g_akt_spieler).f_gewaehlt == 1) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 59 && a_skills("aus_schule", 59, g_akt_spieler).f_gewaehlt == 1) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 58 && a_skills("aus_schule", 58, g_akt_spieler).f_gewaehlt == 1) {
		v_schule = 1;
	}
	if (a_spells("aus_schule", v_spell).f_school == 50 && a_skills("aus_schule", 50, g_akt_spieler).f_gewaehlt == 1) {
		v_schule = 1;
	}
	return v_schule;
}

static intptr_t p_backpackspace() {
	int16_t v_i = 0;
	v_i = 1;
	do {
		if (!a_inventory("backpackspace", v_i, g_akt_spieler).f_name) {
			return v_i;
		}
		v_i = (v_i + 1);
	} while (!(v_i > 50));
	return v_i;
}

static intptr_t p_blockiert(int16_t v_x, int16_t v_y, int16_t v_level) {
	int16_t v_testfeld = 0;
	if (v_x < 1 || v_y < 1) {
		return 1;
	}
	if (!v_level) {
		v_level = a_spieler("blockiert", g_akt_spieler).f_level;
	}
	v_testfeld = a_labyrinth("blockiert", v_level, v_x, v_y).f_feld;
	if (a_fields("blockiert", v_testfeld).f_block_los == 1) {
		return 1;
	}
	return 0;
}

static intptr_t p_blockiert2(int16_t v_x, int16_t v_y, int16_t v_level) {
	int16_t v_testfeld = 0;
	if (v_x < 1 || v_y < 1) {
		return 1;
	}
	v_testfeld = a_labyrinth("blockiert2", v_level, v_x, v_y).f_feld;
	if (a_fields("blockiert2", v_testfeld).f_block_item == 1) {
		return 1;
	}
	return 0;
}

static void p_box(intptr_t p1, intptr_t p2, intptr_t p3, intptr_t p4, intptr_t p5) {
SDL_Rect dstrect = { p1, p2, p3, p4 };
Uint32 color;
if (p5 < 0) {
  color = SDL_MapRGB(screen->format, frontcolor.r, frontcolor.g, frontcolor.b);
} else {
  color = SDL_MapRGB(screen->format, (p5 >> 16) && 0xff, (p5 >> 8) && 0xff, p5 && 0xff);
}
SDL_FillRect(screen, &dstrect, color);

}

static intptr_t p_bubblesort() {
	int16_t v_i = 0;
	int16_t v_j = 0;
	std::string v_n1;
	std::string v_n2;
	int16_t v_switch = 0;
	v_switch = 0;
	for (v_i = 1; v_i <= (g_anz_zauber - 2); v_i += 1) {
		for (v_j = 1; v_j <= (g_anz_zauber - 2); v_j += 1) {
			v_n1 = a_spells("bubblesort", a_zauberliste("bubblesort", (v_j + g_akt_zauber_offset2))).f_name[(1 + g_language)];
			v_n2 = a_spells("bubblesort", a_zauberliste("bubblesort", ((v_j + g_akt_zauber_offset2) + 1))).f_name[(1 + g_language)];
			if (a_spieler("bubblesort", g_akt_spieler).f_sorting_style == 1) {
				v_switch = (a_spells("bubblesort", a_zauberliste("bubblesort", (v_j + g_akt_zauber_offset2))).f_level - a_spells("bubblesort", a_zauberliste("bubblesort", ((v_j + g_akt_zauber_offset2) + 1))).f_level);
				if (!v_switch && v_n1 > v_n2) {
					v_switch = 1;
				}
				if (v_switch < 0) {
					v_switch = 0;
				}
			} else {
				if (v_n1 > v_n2) {
					v_switch = 1;
				}
			}
			if (v_switch) {
				v_switch = a_zauberliste("bubblesort", ((v_j + g_akt_zauber_offset2) + 1));
				a_zauberliste("bubblesort", ((v_j + g_akt_zauber_offset2) + 1)) = a_zauberliste("bubblesort", (v_j + g_akt_zauber_offset2));
				a_zauberliste("bubblesort", (v_j + g_akt_zauber_offset2)) = v_switch;
				v_switch = 0;
			}
		}
	}
}

static intptr_t p_catchsound(intptr_t p1, intptr_t p2) {
if (p1 < 0)
    p1 = --soundmap_last_dynamic;
if (soundmap.count(p1) > 0) {
    Mix_FreeChunk(soundmap[p1]);
    soundmap.erase(p1);
}
SDL_RWops *rw = SDL_RWFromMem(packfile, packfilesize);
if (!rw)
    return 0;
Mix_Chunk *chunk = Mix_LoadWAV_RW(rw, 0);
SDL_RWclose(rw);
if (!chunk)
    return 0;
soundmap[p1] = chunk;
delete[] packfile;
packfile = 0;
packfilesize = 0;
return (p1 < 0) ? p1 : 1;

}

static intptr_t p_catchsprite(intptr_t p1, intptr_t p2) {
if (p1 < 0)
    p1 = --spritemap_last_dynamic;
spritemap.erase(p1);
/* Cheat: ignore p2, assume that the source is the current packfile */
if (!packfile)
    return 0;
SDL_Surface *surf = IMG_Load_RW(SDL_RWFromMem(packfile, packfilesize), 1);
delete[] packfile;
packfile = 0;
packfilesize = 0;
if (!surf)
    return 0;
spritemap[p1].surface = surf;
SDL_Rect clip = { 0, 0, surf->w, surf->h };
spritemap[p1].clip = clip;
return (p1 < 0) ? p1 : 1;

}

static void p_changecurrentelement(LinkedList& p1, char * p2) {
/* p2 is a pointer to the data part of a list element, or NULL */
if (!p2) {
    p1.current = 0;
    p1.index = -1;
} else {
    p1.current = reinterpret_cast<ListElement *>(p2) - 1;
    p1.index = LISTINDEX_INVALID;
}

}

static std::string p_chr(uint8_t p1) {
char s[2];
s[0] = p1;
s[1] = 0;
return s;

}

static void p_circle(intptr_t p1, intptr_t p2, intptr_t p3, intptr_t p4) {
Uint32 color;
if (p4 < 0) {
  color = SDL_MapRGB(screen->format, frontcolor.r, frontcolor.g, frontcolor.b);
} else {
  color = SDL_MapRGB(screen->format, (p4 >> 16) && 0xff, (p4 >> 8) && 0xff, p4 && 0xff);
}
filledCircleColor(screen, p1, p2, p3, color);

}

static void p_clearlist(LinkedList& p1) {
struct ListElement *p = p1.root;
struct ListElement *n;
while (p) {
    n = p->next;
    p1.del_elem(p);
    p = n;
}
p1.root = 0;
p1.current = 0;
p1.last = 0;
p1.length = 0;
p1.index = -1;

}

static void p_clearscreen(intptr_t p1) {
int r, g, b;
uint32_t color;
if (!screen)
    return;
r = (p1 >> 16) & 0xff;
g = (p1 >> 8) & 0xff;
b = p1 & 0xff;
color = SDL_MapRGB(screen->format, r, g, b);
SDL_FillRect(screen, 0, color);

}

static intptr_t p_cleartile(int16_t v_x, int16_t v_y, int16_t v_level) {
	int16_t v_act_tile = 0;
	int16_t v_new_tile = 0;
	if (v_level == -1) {
		v_level = a_spieler("cleartile", g_akt_spieler).f_level;
	}
	v_act_tile = a_labyrinth("cleartile", v_level, v_x, v_y).f_feld;
	v_new_tile = a_inhalt("cleartile", v_level);
	if (a_fields("cleartile", v_act_tile).f_attri_floor) {
		v_new_tile = a_labyrinth("cleartile", v_level, v_x, v_y).f_stat2;
	}
	a_labyrinth("cleartile", v_level, v_x, v_y).f_feld = v_new_tile;
	a_labyrinth("cleartile", v_level, v_x, v_y).f_stat1 = 0;
	a_labyrinth("cleartile", v_level, v_x, v_y).f_stat2 = 0;
}

static void p_clipsprite(intptr_t p1, intptr_t p2, intptr_t p3, intptr_t p4, intptr_t p5) {
if (spritemap.count(p1) == 0)
    return;
SDL_Rect clip = { p2, p3, p4, p5 };
spritemap[p1].clip = clip;

}

static void p_closefile(intptr_t p1) {
if (filemap[p1])
  fclose(filemap[p1]);
filemap.erase(p1);

}

static void p_closenetworkconnection(intptr_t p1) {
close(p1 - 1);

}

static void p_closescreen() {
SDL_QuitSubSystem(SDL_INIT_VIDEO);
screen = 0;

}

static float p_cos(float p1) {
return cosf(p1);

}

static intptr_t p_count_skills(intptr_t v_player_num) {
	int16_t v_actcount = 0;
	intptr_t v_i = 0;
	v_actcount = 0;
	for (v_i = 1; v_i <= 144; v_i += 1) {
		if (a_skills("count_skills", v_i, v_player_num).f_gewaehlt == 1 && a_skills("count_skills", v_i, v_player_num).f_nummer) {
			v_actcount += 1;
		}
	}
	return v_actcount;
}

static intptr_t p_countlist(LinkedList& p1) {
return p1.length;

}

static void p_createdirectory(std::string p1) {
mkdir(p1.c_str(), 0777);

}

static intptr_t p_createfile(intptr_t p1, std::string p2) {
if (p1 < 0)
    p1 = --filemap_last_dynamic;
if (filemap.count(p1) > 0) {
    fclose(filemap[p1]);
    filemap.erase(p1);
}
FILE *fp = fopen(p2.c_str(), "w");
if (!fp)
    return 0;
filemap[p1] = fp;
return (p1 < 0) ? p1 : 1;

}

static intptr_t p_creature_add_poison(int16_t v_amount) {
	int16_t v_poisoned = 0;
	v_poisoned = 1;
	if (a_spieler("creature_add_poison", g_akt_spieler).f_creature_typ != 2 && a_spieler("creature_add_poison", g_akt_spieler).f_creature_typ != 3 && a_spieler("creature_add_poison", g_akt_spieler).f_creature_typ != 6 && a_spieler("creature_add_poison", g_akt_spieler).f_creature_typ != 12) {
		v_poisoned = 0;
		a_spieler("creature_add_poison", g_akt_spieler).f_creature_poison += v_amount;
	}
	return v_poisoned;
}

static intptr_t p_credit(intptr_t v_nummer, std::string v_text, intptr_t v_abstand) {
	a_credits("credit", v_nummer).f_text = v_text;
	a_credits("credit", v_nummer).f_y = (a_credits("credit", (v_nummer - 1)).f_y + v_abstand);
}

static intptr_t p_date() {
return time(0);

}

static void p_delay(intptr_t p1) {
usleep(p1*1000);

}

static void p_deleteelement(LinkedList& p1, intptr_t p2) {
/* Delete current element, and leave element before it as current.
 * If deleting first element, leave new first element as current if p2. */
struct ListElement *e = p1.current;
if (!e)
    return;
if (e->prev)
    e->prev->next = e->next;
if (e->next)
    e->next->prev = e->prev;
if (p1.root == e)
    p1.root = e->next;
if (p1.last == e)
    p1.last = e->prev;
p1.current = e->prev;
p1.del_elem(e);
if (p1.index != LISTINDEX_INVALID)
    p1.index -= 1;
p1.length -= 1;
if (p2 && !p1.current && p1.root) {
    p1.current = p1.root;
    p1.index = 0;
}

}

static void p_displaysprite(intptr_t p1, intptr_t p2, intptr_t p3) {
if (spritemap.count(p1) == 0)
    return;
SDL_Rect dstrect = { p2, p3, 0, 0 };
SDL_Surface *surface = spritemap[p1].surface;
SDL_SetColorKey(surface, 0, 0);
SDL_SetAlpha(surface, 0, 0);
SDL_BlitSurface(surface, &spritemap[p1].clip, screen, &dstrect);

}

static void p_displaytransparentsprite(intptr_t p1, intptr_t p2, intptr_t p3) {
if (spritemap.count(p1) == 0)
    return;
SDL_Rect dstrect = { p2, p3, 0, 0 };
SDL_Surface *surface = spritemap[p1].surface;
uint32_t color = SDL_MapRGB(surface->format, 0, 0, 0);
SDL_SetColorKey(surface, SDL_SRCCOLORKEY, color);
SDL_SetAlpha(surface, 0, 0);
SDL_BlitSurface(surface, &spritemap[p1].clip, screen, &dstrect);

}

static intptr_t p_draw_creature(int8_t v_frame, int16_t v_offset) {
	if (a_spieler("draw_creature", g_akt_spieler).f_creature_typ == 10) {
		p_clipsprite(0, (((a_spieler("draw_creature", g_akt_spieler).f_creature_heading * 32) * 2) + (v_frame * 32)), ((a_spieler("draw_creature", g_akt_spieler).f_maennchen * 32) - 32), 32, 32);
		p_displaytransparentsprite(0, 160, (160 + v_offset));
	} else {
		if (a_spieler("draw_creature", g_akt_spieler).f_creature_typ == 16) {
			p_clipsprite(0, (((a_spieler("draw_creature", g_akt_spieler).f_creature_heading * 32) * 2) + (v_frame * 32)), 608, 32, 32);
			p_displaytransparentsprite(0, 160, (160 + v_offset));
		} else {
			p_clipsprite(34, (((a_spieler("draw_creature", g_akt_spieler).f_creature_heading * 32) * 2) + (v_frame * 32)), ((a_creature("draw_creature", a_spieler("draw_creature", g_akt_spieler).f_creature_typ).f_creature_graphic * 32) - 32), 32, 32);
			p_displaytransparentsprite(34, 160, (160 + v_offset));
		}
	}
}

static intptr_t p_draw_item(int16_t v_name, int16_t v_x, int16_t v_y, int16_t v_offset_x, int16_t v_offset_y) {
	int16_t v_sprite_x = 0;
	int16_t v_sprite_y = 0;
	if (a_item("draw_item", v_name).f_type != 17 || !a_skills("draw_item", 126, g_akt_spieler).f_gewaehlt) {
		v_sprite_x = v_name;
		v_sprite_y = 0;
		if (v_sprite_x > 16) {
			do {
				v_sprite_y = (v_sprite_y + 1);
				v_sprite_x = (v_sprite_x - 16);
			} while (!(v_sprite_x < 17));
		}
		p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
		p_displaytransparentsprite(8, (((v_x * 32) - 64) + v_offset_x), (((v_y * 32) - 64) + v_offset_y));
	}
}

static intptr_t p_draw_mousepointer(int16_t v_x, int16_t v_y) {
	int16_t v_sprite_x = 0;
	int16_t v_sprite_y = 0;
	if (!g_no_mouse) {
		v_sprite_x = a_spieler("draw_mousepointer", g_akt_spieler).f_mousepointer;
		v_sprite_y = 0;
		if (v_sprite_x > 6) {
			v_sprite_y += 1;
			v_sprite_x -= 6;
		}
		p_clipsprite(72, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
		p_displaytransparentsprite(72, v_x, v_y);
	}
}

static intptr_t p_draw_plain_frame(int16_t v_draw_hline) {
	p_clipsprite(55, 0, 0, 640, 17);
	p_displaytransparentsprite(55, 0, 0);
	p_clipsprite(63, 0, 0, 640, 17);
	if (v_draw_hline > 0) {
		p_displaysprite(63, 0, v_draw_hline);
	} else {
		if (!v_draw_hline) {
			p_displaysprite(63, 0, 46);
		}
	}
	p_clipsprite(58, 0, 0, 640, 17);
	p_displaytransparentsprite(58, 0, 463);
	p_clipsprite(56, 0, 0, 17, 480);
	p_displaytransparentsprite(56, 0, 0);
	p_clipsprite(59, 0, 0, 17, 480);
	p_displaytransparentsprite(59, 623, 0);
}

static void p_drawingmode(intptr_t p1) {
;  /* cheat -- always draw in mode 1 */

}

static intptr_t p_drawtext(intptr_t p1, intptr_t p2, std::string p3, intptr_t p4, intptr_t p5) {
SDL_Rect textpos;
SDL_Surface *textsurf;
int w;
textpos.x = p1;
textpos.y = p2;
if (!screen)
    return textpos.x;
/* background color is in p5, but it's not actually supported yet. */
if (p4 < 0) {
    textsurf = TTF_RenderText_Blended(font, p3.c_str(), frontcolor);
} else {
    SDL_Color color;
    color.r = (p4 >> 16) & 0xff;
    color.g = (p4 >> 8) & 0xff;
    color.b = p4 & 0xff;
    textsurf = TTF_RenderText_Blended(font, p3.c_str(), color);
}
if (!textsurf)
    return textpos.x;
SDL_BlitSurface(textsurf, NULL, screen, &textpos);
w = textsurf->w;
SDL_FreeSurface(textsurf);  /* cache this? */
return textpos.x + w;

}

static intptr_t p_elapsedmilliseconds() {
/* Instead of going out and parsing /proc/uptime or something,
 * just fake it. Pretend that the system was up for one hour,
 * at the first call to ElapsedMilliseconds. Callers are going
 * to be interested in time differences, not absolute time. */
static struct timeval elapsedbasis;
struct timeval tv;
gettimeofday(&tv, 0);
if (elapsedbasis.tv_sec == 0) {
    elapsedbasis = tv;
    elapsedbasis.tv_sec -= 3600;
}
return (tv.tv_sec - elapsedbasis.tv_sec) * 1000 +
       (tv.tv_usec - elapsedbasis.tv_usec) / 1000;

}

static intptr_t p_eof(intptr_t p1) {
/* Can't use feof() here. Eof() should return true when the file
 * pointer is actually at the end of the file, while feof only
 * returns true when a previous read has failed. */
int c;
if (filemap.count(p1) == 0)
    return 0;
c = getc(filemap[p1]);
if (c == EOF)
    return 1;
ungetc(c, filemap[p1]);
return 0;

}

static void p_examinejoystick() {
SDL_JoystickUpdate();

}

static void p_examinekeyboard() {
SDL_Event event;

/* KeyboardReleased needs to report whether a key has actually gone
 * from pressed to released since the last poll. Unlike KeyboardPushed,
 * this cannot be done via the implicitly updated keystate array. */
memset(keyrel, 0, SDLK_LAST);
while (SDL_PollEvent(&event)) {
    if (event.type == SDL_KEYUP) {
        SDLKey sym = event.key.keysym.sym;
        if (sym >= 0 && sym < SDLK_LAST) {
            keyrel[sym] = 1;
        }
        break;
    }
}

}

static intptr_t p_examinemouse() {
SDL_PumpEvents();
mousebuttons = SDL_GetMouseState(&mousex, &mousey);
return 1;

}

static intptr_t p_fenster(intptr_t v_typ) {
	if (g_windowsfenster || v_typ) {
	}
}

static char * p_firstelement(LinkedList& p1) {
if (!p1.root)
    return 0;
p1.current = p1.root;
p1.index = 0;
return reinterpret_cast<char *>(p1.current);

}

static void p_flipbuffers(intptr_t p1) {
static struct timeval lastflip;
struct timeval now;
long elapsed;
if (!screen)
    return;
gettimeofday(&now, 0);
/* Convert new.tv_sec - lastflip.tv_sec to 0 or 1 to avoid overflow
 * in elapsed microseconds. */
elapsed = now.tv_usec - lastflip.tv_usec
        + !!(now.tv_sec - lastflip.tv_sec) * 1000000;
if (elapsed < 1000000 / framerate)
    usleep(1000000 / framerate - elapsed);
SDL_Flip(screen);
gettimeofday(&lastflip, 0);

}

static std::string p_formatdate(std::string p1, intptr_t p2) {
char c;
/* Allocating s at same length as p1 is safe as long as all formatting
 * codes are at least as long as the string they represent.
 * That's going to be true until the year 100000. Remember to fix
 * this before then. */
char *s = new char [p1.length() + 1];
const char *q = p1.c_str();
char *r = s;
time_t t = p2;
struct tm *tm = localtime(&t);
while (c = *q++) {
    if (c == '%') {
        if (q[0] == 'y' && q[1] == 'y' && q[2] == 'y' && q[3] == 'y') {
            sprintf(s, "%04d", tm->tm_year + 1900);
            s += strlen(s);
            q += 4;
        } else if (q[0] == 'y' && q[1] == 'y') {
            sprintf(s, "%02d", tm->tm_year % 100);
            s += 2;
            q += 2;
        } else if (q[0] == 'm' && q[1] == 'm') {
            sprintf(s, "%02d", tm->tm_mon + 1);
            s += 2;
            q += 2;
        } else if (q[0] == 'd' && q[1] == 'd') {
            sprintf(s, "%02d", tm->tm_mday);
            s += 2;
            q += 2;
        } else if (q[0] == 'h' && q[1] == 'h') {
            sprintf(s, "%02d", tm->tm_hour);
            s += 2;
            q += 2;
        } else if (q[0] == 'i' && q[1] == 'i') {
            sprintf(s, "%02d", tm->tm_min);
            s += 2;
            q += 2;
        } else if (q[0] == 's' && q[1] == 's') {
            sprintf(s, "%02d", tm->tm_sec);
            s += 2;
            q += 2;
        } else {
            *s++ = c;
        }
    } else {
        *s++ = c;
    }
}
*s++ = 0;
std::string rs = r;
delete[] r;
return rs;

}

static void p_frontcolor(intptr_t p1) {
frontcolor.r = (p1 >> 16) & 0xff;
frontcolor.g = (p1 >> 8) & 0xff;;
frontcolor.b = p1 & 0xff;

}

static intptr_t p_get_weaving(int16_t v_player) {
	if (g_item_spell) {
		return 1;
	}
	if (v_player == -1) {
		v_player = g_akt_spieler;
	}
	return a_spieler("get_weaving", v_player).f_spellweaving;
}

static std::string p_getenvironmentvariable(std::string p1) {
char *s = getenv(p1.c_str());
return s ? s : "";

}

static intptr_t p_gewicht() {
	int16_t v_gewicht = 0;
	intptr_t v_i = 0;
	v_gewicht = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_inventory("gewicht", v_i, g_akt_spieler).f_name && a_item("gewicht", a_inventory("gewicht", v_i, g_akt_spieler).f_name).f_gewicht > 0 && a_inventory("gewicht", v_i, g_akt_spieler).f_anzahl >= 0 && a_inventory("gewicht", v_i, g_akt_spieler).f_name <= 411) {
			v_gewicht = (v_gewicht + (a_item("gewicht", a_inventory("gewicht", v_i, g_akt_spieler).f_name).f_gewicht * (a_inventory("gewicht", v_i, g_akt_spieler).f_anzahl + 1)));
		}
	}
	v_gewicht += ((a_spieler("gewicht", g_akt_spieler).f_gold * 3) / 200);
	for (v_i = 1; v_i <= 9; v_i += 1) {
		if (a_spieler("gewicht", g_akt_spieler).f_staff_pieces[v_i] == 1) {
			v_gewicht = (v_gewicht + a_item("gewicht", 403).f_gewicht);
		}
	}
	return v_gewicht;
}

static intptr_t p_gold_anzahl() {
	int16_t v_beutel = 0;
	intptr_t v_i = 0;
	v_beutel = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_inventory("gold_anzahl", v_i, g_akt_spieler).f_name == 150) {
			v_beutel = v_i;
		}
	}
	if (v_beutel > 0) {
		return a_spieler("gold_anzahl", g_akt_spieler).f_gold;
	} else {
		return 0;
	}
}

static intptr_t p_gold_verlieren(int16_t v_anzahl) {
	int16_t v_beutel = 0;
	intptr_t v_i = 0;
	int32_t v_long = 0;
	v_beutel = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_inventory("gold_verlieren", v_i, g_akt_spieler).f_name == 150) {
			v_beutel = v_i;
		}
	}
	if (v_beutel > 0) {
		v_long = v_anzahl;
		a_spieler("gold_verlieren", g_akt_spieler).f_gold -= v_long;
		if (a_spieler("gold_verlieren", g_akt_spieler).f_gold < 1) {
			a_spieler("gold_verlieren", g_akt_spieler).f_gold = 0;
		}
	}
}

static intptr_t p_habich(int16_t v_nr) {
	intptr_t v_gef = 0;
	intptr_t v_habich = 0;
	intptr_t v_i = 0;
	v_habich = 0;
	v_gef = 0;
	for (v_i = 1; v_i <= 30; v_i += 1) {
		if (a_aktive("habich", v_i, g_akt_spieler).f_nr == v_nr) {
			v_habich = a_aktive("habich", v_i, g_akt_spieler).f_staerke;
			v_gef = 1;
		}
	}
	if (!v_habich && v_gef == 1) {
		v_habich = 1;
	}
	return v_habich;
}

static intptr_t p_has_trait2(int16_t v_welches, int16_t v_eigensch) {
	intptr_t v_gef = 0;
	v_gef = 0;
	if (a_monster("has_trait2", v_welches).f_eigenschaft1 == v_eigensch) {
		v_gef = 1;
	}
	if (a_monster("has_trait2", v_welches).f_eigenschaft2 == v_eigensch) {
		v_gef = 1;
	}
	if (a_monster("has_trait2", v_welches).f_eigenschaft3 == v_eigensch) {
		v_gef = 1;
	}
	if (a_monster("has_trait2", v_welches).f_eigenschaft4 == v_eigensch) {
		v_gef = 1;
	}
	if (a_monster("has_trait2", v_welches).f_eigenschaft5 == v_eigensch) {
		v_gef = 1;
	}
	if (a_monster("has_trait2", v_welches).f_eigenschaft6 == v_eigensch) {
		v_gef = 1;
	}
	if (a_monster("has_trait2", v_welches).f_eigenschaft7 == v_eigensch) {
		v_gef = 1;
	}
	if (a_monster("has_trait2", v_welches).f_eigenschaft8 == v_eigensch) {
		v_gef = 1;
	}
	if (a_monster("has_trait2", v_welches).f_eigenschaft9 == v_eigensch) {
		v_gef = 1;
	}
	if (a_monster("has_trait2", v_welches).f_eigenschaft10 == v_eigensch) {
		v_gef = 1;
	}
	return v_gef;
}

static intptr_t p_hater(int16_t v_nr, intptr_t v_xx) {
	intptr_t v_hater = 0;
	intptr_t v_i = 0;
	v_hater = 0;
	for (v_i = 1; v_i <= 30; v_i += 1) {
		if (a_aktive("hater", v_i, v_xx).f_nr == v_nr) {
			v_hater = 1;
		}
	}
	return v_hater;
}

static intptr_t p_ich_trage(int16_t v_was) {
	intptr_t v_i = 0;
	int16_t v_jupp = 0;
	intptr_t v_waffe = 0;
	v_jupp = 0;
	v_waffe = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_item("ich_trage", a_inventory("ich_trage", v_i, g_akt_spieler).f_name).f_klasse == v_was && a_inventory("ich_trage", v_i, g_akt_spieler).f_benutzt == 1) {
			v_jupp = 1;
		}
		if (a_item("ich_trage", a_inventory("ich_trage", v_i, g_akt_spieler).f_name).f_type == 1 && a_inventory("ich_trage", v_i, g_akt_spieler).f_benutzt == 1) {
			v_waffe = 1;
		}
	}
	if (v_was == 10 && v_waffe == 1) {
		v_jupp = 1;
	}
	return v_jupp;
}

static intptr_t p_ich_trage2(int16_t v_geg) {
	intptr_t v_hugo = 0;
	intptr_t v_i = 0;
	v_hugo = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_inventory("ich_trage2", v_i, g_akt_spieler).f_name == v_geg && a_inventory("ich_trage2", v_i, g_akt_spieler).f_benutzt == 1) {
			v_hugo = 1;
		}
	}
	return v_hugo;
}

static intptr_t p_ich_trage3(int16_t v_was) {
	intptr_t v_i = 0;
	int16_t v_jupp = 0;
	v_jupp = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_inventory("ich_trage3", v_i, g_akt_spieler).f_name == v_was && a_inventory("ich_trage3", v_i, g_akt_spieler).f_benutzt == 1) {
			v_jupp = 1;
		}
	}
	return v_jupp;
}

static intptr_t p_ich_trage4() {
	intptr_t v_hugo = 0;
	intptr_t v_i = 0;
	v_hugo = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_item("ich_trage4", a_inventory("ich_trage4", v_i, g_akt_spieler).f_name).f_magisch == 1 && a_inventory("ich_trage4", v_i, g_akt_spieler).f_benutzt == 1) {
			v_hugo = 1;
		}
	}
	return v_hugo;
}

static intptr_t p_immune(int16_t v_gegen) {
	int16_t v_mon_no = 0;
	int16_t v_res = 0;
	v_mon_no = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number;
	if (!p_has_trait2(v_mon_no, v_gegen) || p_habich(160) > 0) {
		v_res = 0;
	} else {
		v_res = 1;
	}
	return v_res;
}

static intptr_t p_init_creatures() {
	a_creature("init_creatures", 1).f_creature_number = 1;
	a_creature("init_creatures", 1).f_creature_name[1] = "Homunkulus";
	a_creature("init_creatures", 1).f_creature_name[2] = "Homunkulus";
	a_creature("init_creatures", 1).f_creature_name[3] = "Homunkulus";
	a_creature("init_creatures", 1).f_creature_graphic = 9;
	a_creature("init_creatures", 1).f_creature_lifepoints = 5;
	a_creature("init_creatures", 1).f_creature_maxlifepoints = 5;
	a_creature("init_creatures", 1).f_creature_attack = 20;
	a_creature("init_creatures", 1).f_creature_schaden_min = 1;
	a_creature("init_creatures", 1).f_creature_schaden_max = 2;
	a_creature("init_creatures", 1).f_creature_maxspeed = 10;
	a_creature("init_creatures", 2).f_creature_number = 2;
	a_creature("init_creatures", 2).f_creature_name[1] = "Skeleton";
	a_creature("init_creatures", 2).f_creature_name[2] = "Skelett";
	a_creature("init_creatures", 2).f_creature_name[3] = "Esqueleto";
	a_creature("init_creatures", 2).f_creature_graphic = 7;
	a_creature("init_creatures", 2).f_creature_lifepoints = 10;
	a_creature("init_creatures", 2).f_creature_maxlifepoints = 10;
	a_creature("init_creatures", 2).f_creature_attack = 40;
	a_creature("init_creatures", 2).f_creature_schaden_min = 1;
	a_creature("init_creatures", 2).f_creature_schaden_max = 4;
	a_creature("init_creatures", 2).f_creature_maxspeed = 4;
	a_creature("init_creatures", 3).f_creature_number = 3;
	a_creature("init_creatures", 3).f_creature_name[1] = "Death Knight";
	a_creature("init_creatures", 3).f_creature_name[2] = "Todesritter";
	a_creature("init_creatures", 3).f_creature_name[3] = "Caballero de la Muerte";
	a_creature("init_creatures", 3).f_creature_graphic = 12;
	a_creature("init_creatures", 3).f_creature_lifepoints = 20;
	a_creature("init_creatures", 3).f_creature_maxlifepoints = 20;
	a_creature("init_creatures", 3).f_creature_attack = 70;
	a_creature("init_creatures", 3).f_creature_schaden_min = 1;
	a_creature("init_creatures", 3).f_creature_schaden_max = 10;
	a_creature("init_creatures", 3).f_creature_maxspeed = 5;
	a_creature("init_creatures", 4).f_creature_number = 4;
	a_creature("init_creatures", 4).f_creature_name[1] = "Star Feary";
	a_creature("init_creatures", 4).f_creature_name[2] = "Sternenfee";
	a_creature("init_creatures", 4).f_creature_name[3] = "Hada de las Estrellas";
	a_creature("init_creatures", 4).f_creature_graphic = 13;
	a_creature("init_creatures", 4).f_creature_lifepoints = 10;
	a_creature("init_creatures", 4).f_creature_maxlifepoints = 10;
	a_creature("init_creatures", 4).f_creature_attack = 40;
	a_creature("init_creatures", 4).f_creature_schaden_min = 1;
	a_creature("init_creatures", 4).f_creature_schaden_max = 2;
	a_creature("init_creatures", 4).f_creature_maxspeed = 15;
	a_creature("init_creatures", 5).f_creature_number = 5;
	a_creature("init_creatures", 5).f_creature_name[1] = "Tigre";
	a_creature("init_creatures", 5).f_creature_name[2] = "Tiger";
	a_creature("init_creatures", 5).f_creature_name[3] = "Tigre";
	a_creature("init_creatures", 5).f_creature_graphic = 14;
	a_creature("init_creatures", 5).f_creature_lifepoints = 25;
	a_creature("init_creatures", 5).f_creature_maxlifepoints = 25;
	a_creature("init_creatures", 5).f_creature_attack = 70;
	a_creature("init_creatures", 5).f_creature_schaden_min = 2;
	a_creature("init_creatures", 5).f_creature_schaden_max = 10;
	a_creature("init_creatures", 5).f_creature_maxspeed = 7;
	a_creature("init_creatures", 6).f_creature_number = 6;
	a_creature("init_creatures", 6).f_creature_name[1] = "Mummy";
	a_creature("init_creatures", 6).f_creature_name[2] = "Mumie";
	a_creature("init_creatures", 6).f_creature_name[3] = "Momia";
	a_creature("init_creatures", 6).f_creature_graphic = 11;
	a_creature("init_creatures", 6).f_creature_lifepoints = 50;
	a_creature("init_creatures", 6).f_creature_maxlifepoints = 50;
	a_creature("init_creatures", 6).f_creature_attack = 60;
	a_creature("init_creatures", 6).f_creature_schaden_min = 2;
	a_creature("init_creatures", 6).f_creature_schaden_max = 15;
	a_creature("init_creatures", 6).f_creature_maxspeed = 4;
	a_creature("init_creatures", 7).f_creature_number = 7;
	a_creature("init_creatures", 7).f_creature_name[1] = "Demon";
	a_creature("init_creatures", 7).f_creature_name[2] = "D\344mon";
	a_creature("init_creatures", 7).f_creature_name[3] = "Demonio";
	a_creature("init_creatures", 7).f_creature_graphic = 8;
	a_creature("init_creatures", 7).f_creature_lifepoints = 70;
	a_creature("init_creatures", 7).f_creature_maxlifepoints = 70;
	a_creature("init_creatures", 7).f_creature_attack = 80;
	a_creature("init_creatures", 7).f_creature_schaden_min = 3;
	a_creature("init_creatures", 7).f_creature_schaden_max = 20;
	a_creature("init_creatures", 7).f_creature_maxspeed = 8;
	a_creature("init_creatures", 8).f_creature_number = 8;
	a_creature("init_creatures", 8).f_creature_name[1] = "Angel";
	a_creature("init_creatures", 8).f_creature_name[2] = "Engel";
	a_creature("init_creatures", 8).f_creature_name[3] = "Angel";
	a_creature("init_creatures", 8).f_creature_graphic = 10;
	a_creature("init_creatures", 8).f_creature_lifepoints = 70;
	a_creature("init_creatures", 8).f_creature_maxlifepoints = 70;
	a_creature("init_creatures", 8).f_creature_attack = 80;
	a_creature("init_creatures", 8).f_creature_schaden_min = 3;
	a_creature("init_creatures", 8).f_creature_schaden_max = 20;
	a_creature("init_creatures", 8).f_creature_maxspeed = 8;
	a_creature("init_creatures", 9).f_creature_number = 9;
	a_creature("init_creatures", 9).f_creature_name[1] = "Dragon";
	a_creature("init_creatures", 9).f_creature_name[2] = "Drache";
	a_creature("init_creatures", 9).f_creature_name[3] = "Dragon";
	a_creature("init_creatures", 9).f_creature_graphic = 6;
	a_creature("init_creatures", 9).f_creature_lifepoints = 100;
	a_creature("init_creatures", 9).f_creature_maxlifepoints = 100;
	a_creature("init_creatures", 9).f_creature_attack = 80;
	a_creature("init_creatures", 9).f_creature_schaden_min = 4;
	a_creature("init_creatures", 9).f_creature_schaden_max = 25;
	a_creature("init_creatures", 9).f_creature_maxspeed = 5;
	a_creature("init_creatures", 10).f_creature_number = 10;
	a_creature("init_creatures", 10).f_creature_name[1] = "Doppelganger";
	a_creature("init_creatures", 10).f_creature_name[2] = "Doppelg\344nger";
	a_creature("init_creatures", 10).f_creature_name[3] = "Gemelo";
	a_creature("init_creatures", 10).f_creature_graphic = 0;
	a_creature("init_creatures", 10).f_creature_lifepoints = 0;
	a_creature("init_creatures", 10).f_creature_maxlifepoints = 0;
	a_creature("init_creatures", 10).f_creature_attack = 60;
	a_creature("init_creatures", 10).f_creature_schaden_min = 2;
	a_creature("init_creatures", 10).f_creature_schaden_max = 10;
	a_creature("init_creatures", 10).f_creature_maxspeed = 0;
	a_creature("init_creatures", 11).f_creature_number = 11;
	a_creature("init_creatures", 11).f_creature_name[1] = "Doppelganger";
	a_creature("init_creatures", 11).f_creature_name[2] = "Doppelg\344nger";
	a_creature("init_creatures", 11).f_creature_name[3] = "Gemelo";
	a_creature("init_creatures", 11).f_creature_graphic = 4;
	a_creature("init_creatures", 11).f_creature_lifepoints = 5;
	a_creature("init_creatures", 11).f_creature_maxlifepoints = 5;
	a_creature("init_creatures", 11).f_creature_attack = 20;
	a_creature("init_creatures", 11).f_creature_schaden_min = 1;
	a_creature("init_creatures", 11).f_creature_schaden_max = 2;
	a_creature("init_creatures", 11).f_creature_maxspeed = 12;
	a_creature("init_creatures", 12).f_creature_number = 12;
	a_creature("init_creatures", 12).f_creature_name[1] = "Golem";
	a_creature("init_creatures", 12).f_creature_name[2] = "Golem";
	a_creature("init_creatures", 12).f_creature_name[3] = "Golem";
	a_creature("init_creatures", 12).f_creature_graphic = 16;
	a_creature("init_creatures", 12).f_creature_lifepoints = 100;
	a_creature("init_creatures", 12).f_creature_maxlifepoints = 100;
	a_creature("init_creatures", 12).f_creature_attack = 60;
	a_creature("init_creatures", 12).f_creature_schaden_min = 2;
	a_creature("init_creatures", 12).f_creature_schaden_max = 10;
	a_creature("init_creatures", 12).f_creature_maxspeed = 4;
	a_creature("init_creatures", 13).f_creature_number = 13;
	a_creature("init_creatures", 13).f_creature_name[1] = "Satyr";
	a_creature("init_creatures", 13).f_creature_name[2] = "Satyr";
	a_creature("init_creatures", 13).f_creature_name[3] = "Satiro";
	a_creature("init_creatures", 13).f_creature_graphic = 17;
	a_creature("init_creatures", 13).f_creature_lifepoints = 20;
	a_creature("init_creatures", 13).f_creature_maxlifepoints = 20;
	a_creature("init_creatures", 13).f_creature_attack = 60;
	a_creature("init_creatures", 13).f_creature_schaden_min = 2;
	a_creature("init_creatures", 13).f_creature_schaden_max = 8;
	a_creature("init_creatures", 13).f_creature_maxspeed = 6;
	a_creature("init_creatures", 14).f_creature_number = 14;
	a_creature("init_creatures", 14).f_creature_name[1] = "Fire Elemental";
	a_creature("init_creatures", 14).f_creature_name[2] = "Feuerelementar";
	a_creature("init_creatures", 14).f_creature_name[3] = "Elementar de Fuego";
	a_creature("init_creatures", 14).f_creature_graphic = 18;
	a_creature("init_creatures", 14).f_creature_lifepoints = 24;
	a_creature("init_creatures", 14).f_creature_maxlifepoints = 24;
	a_creature("init_creatures", 14).f_creature_attack = 60;
	a_creature("init_creatures", 14).f_creature_schaden_min = 2;
	a_creature("init_creatures", 14).f_creature_schaden_max = 14;
	a_creature("init_creatures", 14).f_creature_maxspeed = 5;
	a_creature("init_creatures", 15).f_creature_number = 15;
	a_creature("init_creatures", 15).f_creature_name[1] = "Water Elemental";
	a_creature("init_creatures", 15).f_creature_name[2] = "Wasserelementar";
	a_creature("init_creatures", 15).f_creature_name[3] = "Elementar de Aqua";
	a_creature("init_creatures", 15).f_creature_graphic = 19;
	a_creature("init_creatures", 15).f_creature_lifepoints = 24;
	a_creature("init_creatures", 15).f_creature_maxlifepoints = 24;
	a_creature("init_creatures", 15).f_creature_attack = 60;
	a_creature("init_creatures", 15).f_creature_schaden_min = 2;
	a_creature("init_creatures", 15).f_creature_schaden_max = 14;
	a_creature("init_creatures", 15).f_creature_maxspeed = 5;
}

static intptr_t p_init_highscores() {
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	for (v_i = 1; v_i <= 30; v_i += 1) {
		a_hscores("init_highscores", v_i).f_version = " ";
		a_hscores("init_highscores", v_i).f_name = " ";
		a_hscores("init_highscores", v_i).f_level = 0;
		a_hscores("init_highscores", v_i).f_gold = 0;
		a_hscores("init_highscores", v_i).f_mks = 0;
		a_hscores("init_highscores", v_i).f_punkte = 0;
		a_hscores("init_highscores", v_i).f_maennchen = 0;
		a_hscores("init_highscores", v_i).f_anfangszeit = " ";
		a_hscores("init_highscores", v_i).f_endezeit = " ";
		a_hscores("init_highscores", v_i).f_maxlifepoints = 0;
		a_hscores("init_highscores", v_i).f_maxmana = 0;
		a_hscores("init_highscores", v_i).f_attack = 0;
		a_hscores("init_highscores", v_i).f_dexterity = 0;
		a_hscores("init_highscores", v_i).f_strength = 0;
		a_hscores("init_highscores", v_i).f_maxspeed = 0;
		a_hscores("init_highscores", v_i).f_perception = 0;
		a_hscores("init_highscores", v_i).f_luck_score = 0;
		a_hscores("init_highscores", v_i).f_power_score = 0;
		a_hscores("init_highscores", v_i).f_circle = 0;
		a_hscores("init_highscores", v_i).f_stabteile = 0;
		a_hscores("init_highscores", v_i).f_moves = 0;
		a_hscores("init_highscores", v_i).f_cause_of_death = 0;
		a_hscores("init_highscores", v_i).f_cause_of_death_monster = 0;
		for (v_j = 1; v_j <= 30; v_j += 1) {
			a_hscores("init_highscores", v_i).f_skills[v_j] = 0;
		}
	}
}

static intptr_t p_init_spells() {
	a_spells("init_spells", 1).f_name[2] = "Mondlicht";
	a_spells("init_spells", 1).f_name[1] = "Moonlight";
	a_spells("init_spells", 1).f_name[3] = "Luz Lunar";
	a_spells("init_spells", 1).f_cost = 1;
	a_spells("init_spells", 1).f_level = 1;
	a_spells("init_spells", 1).f_duration = 5;
	a_spells("init_spells", 1).f_school = 1;
	a_spells("init_spells", 1).f_info_1[2] = "Ruft das Licht des Mondes herbei und ";
	a_spells("init_spells", 1).f_info_2[2] = "erhellt das Labyrinth (Aktiver Zauber)";
	a_spells("init_spells", 1).f_info_1[1] = "summons the light of the moon to ";
	a_spells("init_spells", 1).f_info_2[1] = "follow the magician (active spell)";
	a_spells("init_spells", 1).f_info_1[3] = "Hace que la luz de la luna siga ";
	a_spells("init_spells", 1).f_info_2[3] = "al mago (hechizo activo)";
	a_spells("init_spells", 1).f_weavable = 1;
	a_spells("init_spells", 2).f_name[2] = "Wirbelwind";
	a_spells("init_spells", 2).f_name[1] = "Whirlwind";
	a_spells("init_spells", 2).f_name[3] = "Torbellino";
	a_spells("init_spells", 2).f_cost = 1;
	a_spells("init_spells", 2).f_level = 2;
	a_spells("init_spells", 2).f_duration = 0;
	a_spells("init_spells", 2).f_school = 1;
	a_spells("init_spells", 2).f_info_1[2] = "Ruft einen Wirbelwind herbei der ";
	a_spells("init_spells", 2).f_info_2[2] = "ein nahes Monster attackiert";
	a_spells("init_spells", 2).f_info_1[1] = "Summons a small whirlwind to";
	a_spells("init_spells", 2).f_info_2[1] = "attack a nearby monster";
	a_spells("init_spells", 2).f_info_1[3] = "Crea un pequeno torbellino para ";
	a_spells("init_spells", 2).f_info_2[3] = "atacar a un monstruo cercano";
	a_spells("init_spells", 2).f_weavable = 1;
	a_spells("init_spells", 3).f_name[2] = "Heilung";
	a_spells("init_spells", 3).f_name[1] = "Heal";
	a_spells("init_spells", 3).f_name[3] = "Curacion";
	a_spells("init_spells", 3).f_cost = 2;
	a_spells("init_spells", 3).f_level = 3;
	a_spells("init_spells", 3).f_duration = 0;
	a_spells("init_spells", 3).f_school = 1;
	a_spells("init_spells", 3).f_info_1[2] = "Bringt dem Magier verlorene Lebenspunkte";
	a_spells("init_spells", 3).f_info_2[2] = "zur\374ck. (3 mal pro Level)";
	a_spells("init_spells", 3).f_info_1[1] = "Restores lost Life Points of the";
	a_spells("init_spells", 3).f_info_2[1] = "magician (3 times per level)";
	a_spells("init_spells", 3).f_info_1[3] = "Recupera Puntos de Vida al ";
	a_spells("init_spells", 3).f_info_2[3] = "mago (3 veces por nivel)";
	a_spells("init_spells", 3).f_weavable = 1;
	a_spells("init_spells", 18).f_name[2] = "Schutzschild";
	a_spells("init_spells", 18).f_name[1] = "Shield";
	a_spells("init_spells", 18).f_name[3] = "Escudo";
	a_spells("init_spells", 18).f_cost = 2;
	a_spells("init_spells", 18).f_level = 4;
	a_spells("init_spells", 18).f_duration = 5;
	a_spells("init_spells", 18).f_school = 1;
	a_spells("init_spells", 18).f_info_1[2] = "Sch\374tzt vor Nahkampf-";
	a_spells("init_spells", 18).f_info_2[2] = "Attacken (aktiver Zauber)";
	a_spells("init_spells", 18).f_info_1[1] = "Wards against melee";
	a_spells("init_spells", 18).f_info_2[1] = "attacks (active spell)";
	a_spells("init_spells", 18).f_info_1[3] = "Proteccion contra ataques cuerpo ";
	a_spells("init_spells", 18).f_info_2[3] = "a cuerpo (hechizo activo)";
	a_spells("init_spells", 18).f_weavable = 1;
	a_spells("init_spells", 19).f_name[2] = "Arkaner Schlag";
	a_spells("init_spells", 19).f_name[1] = "Arcane Bolt";
	a_spells("init_spells", 19).f_name[3] = "Rayo Secreto";
	a_spells("init_spells", 19).f_cost = 2;
	a_spells("init_spells", 19).f_level = 5;
	a_spells("init_spells", 19).f_duration = 0;
	a_spells("init_spells", 19).f_school = 1;
	a_spells("init_spells", 19).f_info_1[2] = "Wirft eine Sph\344re aus Magie";
	a_spells("init_spells", 19).f_info_2[2] = "auf einen Gegner";
	a_spells("init_spells", 19).f_info_1[1] = "Throws a sphere of magic";
	a_spells("init_spells", 19).f_info_2[1] = "on a nearby enemy";
	a_spells("init_spells", 19).f_info_1[3] = "Lanza una esfera de magia ";
	a_spells("init_spells", 19).f_info_2[3] = "a un enemigo cercano";
	a_spells("init_spells", 19).f_weavable = 1;
	a_spells("init_spells", 20).f_name[2] = "Fallen Zeigen";
	a_spells("init_spells", 20).f_name[1] = "Show Traps";
	a_spells("init_spells", 20).f_name[3] = "Muestra Trampas";
	a_spells("init_spells", 20).f_cost = 2;
	a_spells("init_spells", 20).f_level = 6;
	a_spells("init_spells", 20).f_duration = 0;
	a_spells("init_spells", 20).f_school = 1;
	a_spells("init_spells", 20).f_info_1[2] = "Deckt Fallen in n\344chster";
	a_spells("init_spells", 20).f_info_2[2] = "N\344he auf (mit 80%)";
	a_spells("init_spells", 20).f_info_1[1] = "Reveals traps around the";
	a_spells("init_spells", 20).f_info_2[1] = "magician (80% chance)";
	a_spells("init_spells", 20).f_info_1[3] = "Se muestran todas las trampas ";
	a_spells("init_spells", 20).f_info_2[3] = "cercanas del mago (con 80%)";
	a_spells("init_spells", 20).f_weavable = 1;
	a_spells("init_spells", 55).f_name[2] = "Falle Zerst\366ren";
	a_spells("init_spells", 55).f_name[1] = "Destroy Trap";
	a_spells("init_spells", 55).f_name[3] = "Destruir Trampa";
	a_spells("init_spells", 55).f_cost = 3;
	a_spells("init_spells", 55).f_level = 7;
	a_spells("init_spells", 55).f_duration = 0;
	a_spells("init_spells", 55).f_school = 1;
	a_spells("init_spells", 55).f_info_1[2] = "Zerst\366rt eine Falle";
	a_spells("init_spells", 55).f_info_2[2] = "";
	a_spells("init_spells", 55).f_info_1[1] = "Destroys a trap";
	a_spells("init_spells", 55).f_info_2[1] = "";
	a_spells("init_spells", 55).f_info_1[3] = "Destruye una trampa";
	a_spells("init_spells", 55).f_info_2[3] = "";
	a_spells("init_spells", 182).f_name[2] = "Schwert zu Pflugschar";
	a_spells("init_spells", 182).f_name[1] = "Sword to Ploughshare";
	a_spells("init_spells", 182).f_name[3] = "de espadas en aradas";
	a_spells("init_spells", 182).f_cost = 10;
	a_spells("init_spells", 182).f_level = 8;
	a_spells("init_spells", 182).f_duration = 0;
	a_spells("init_spells", 182).f_school = 1;
	a_spells("init_spells", 182).f_info_1[2] = "Verwandelt eine Waffe";
	a_spells("init_spells", 182).f_info_2[2] = "in Nahrung";
	a_spells("init_spells", 182).f_info_1[1] = "Transforms a weapon";
	a_spells("init_spells", 182).f_info_2[1] = "into food";
	a_spells("init_spells", 182).f_info_1[3] = "Transforma una arma";
	a_spells("init_spells", 182).f_info_2[3] = "a alimentos";
	a_spells("init_spells", 182).f_weavable = 1;
	a_spells("init_spells", 57).f_name[2] = "Vortex";
	a_spells("init_spells", 57).f_name[1] = "Vortex";
	a_spells("init_spells", 57).f_name[3] = "Vortice";
	a_spells("init_spells", 57).f_cost = 3;
	a_spells("init_spells", 57).f_level = 10;
	a_spells("init_spells", 57).f_duration = 0;
	a_spells("init_spells", 57).f_school = 1;
	a_spells("init_spells", 57).f_info_1[2] = "Ein magischer Wirbel attackiert";
	a_spells("init_spells", 57).f_info_2[2] = "ein Monster";
	a_spells("init_spells", 57).f_info_1[1] = "A magical vortex attacks";
	a_spells("init_spells", 57).f_info_2[1] = "one monster";
	a_spells("init_spells", 57).f_info_1[3] = "Un vortice magico ataca ";
	a_spells("init_spells", 57).f_info_2[3] = "a un monstruo";
	a_spells("init_spells", 57).f_weavable = 1;
	a_spells("init_spells", 178).f_name[2] = "Rune Zerst\366ren";
	a_spells("init_spells", 178).f_name[1] = "Destroy Rune";
	a_spells("init_spells", 178).f_name[3] = "Destruye Runa";
	a_spells("init_spells", 178).f_cost = 3;
	a_spells("init_spells", 178).f_level = 11;
	a_spells("init_spells", 178).f_duration = 0;
	a_spells("init_spells", 178).f_school = 1;
	a_spells("init_spells", 178).f_info_1[2] = "Zerst\366rt eine Rune";
	a_spells("init_spells", 178).f_info_2[2] = "";
	a_spells("init_spells", 178).f_info_1[1] = "Destroys a rune";
	a_spells("init_spells", 178).f_info_2[1] = "";
	a_spells("init_spells", 178).f_info_1[3] = "Destruye una runa";
	a_spells("init_spells", 178).f_info_2[3] = "";
	a_spells("init_spells", 56).f_name[2] = "Prismatisches Spray";
	a_spells("init_spells", 56).f_name[1] = "Prismatic Spray";
	a_spells("init_spells", 56).f_name[3] = "Espray prismatico";
	a_spells("init_spells", 56).f_cost = 4;
	a_spells("init_spells", 56).f_level = 13;
	a_spells("init_spells", 56).f_duration = 0;
	a_spells("init_spells", 56).f_school = 1;
	a_spells("init_spells", 56).f_info_1[2] = "Vielfarbige Strahlen attackieren";
	a_spells("init_spells", 56).f_info_2[2] = "alle Monster in der Umgebung";
	a_spells("init_spells", 56).f_info_1[1] = "Many multicolored rays attack";
	a_spells("init_spells", 56).f_info_2[1] = "all monsters in the vicinity";
	a_spells("init_spells", 56).f_info_1[3] = "Muchos rayos multicolores atacan ";
	a_spells("init_spells", 56).f_info_2[3] = "a todos los monstruos cercanos";
	a_spells("init_spells", 56).f_weavable = 1;
	a_spells("init_spells", 174).f_name[2] = "Transmigration";
	a_spells("init_spells", 174).f_name[1] = "Transmigration";
	a_spells("init_spells", 174).f_name[3] = "Transmigracion";
	a_spells("init_spells", 174).f_cost = 10;
	a_spells("init_spells", 174).f_level = 15;
	a_spells("init_spells", 174).f_duration = 0;
	a_spells("init_spells", 174).f_school = 1;
	a_spells("init_spells", 174).f_info_1[2] = "Vertauscht permanent Mana/Lebenspunkte";
	a_spells("init_spells", 174).f_info_2[2] = "Kostet Gegenstand! 3 mal pro Ebene";
	a_spells("init_spells", 174).f_info_1[1] = "Permanently swaps Mana and Life Points";
	a_spells("init_spells", 174).f_info_2[1] = "Costs item! 3 times per level";
	a_spells("init_spells", 174).f_info_1[3] = "Cambia permanente Puntos de Mana y Vida";
	a_spells("init_spells", 174).f_info_2[3] = "Cuesta un objeto! 3 vez por nivel";
	a_spells("init_spells", 4).f_name[2] = "Erde Sp\374ren";
	a_spells("init_spells", 4).f_name[1] = "Sense Earth";
	a_spells("init_spells", 4).f_name[3] = "Sentir la Tierra";
	a_spells("init_spells", 4).f_cost = 1;
	a_spells("init_spells", 4).f_level = 1;
	a_spells("init_spells", 4).f_duration = 0;
	a_spells("init_spells", 4).f_school = 55;
	a_spells("init_spells", 4).f_info_1[2] = "Zeigt eine Karte mit allen ";
	a_spells("init_spells", 4).f_info_2[2] = "Mauern der n\344heren Umgebung";
	a_spells("init_spells", 4).f_info_1[1] = "Shows a map containing the ";
	a_spells("init_spells", 4).f_info_2[1] = "walls of the actual level";
	a_spells("init_spells", 4).f_info_1[3] = "Muestra un mapa con los ";
	a_spells("init_spells", 4).f_info_2[3] = "obstaculos del nivel";
	a_spells("init_spells", 6).f_name[2] = "Erdst\344rke";
	a_spells("init_spells", 6).f_name[1] = "Earthen Strength";
	a_spells("init_spells", 6).f_name[3] = "Fuerza Terrestre";
	a_spells("init_spells", 6).f_cost = 1;
	a_spells("init_spells", 6).f_level = 2;
	a_spells("init_spells", 6).f_duration = 5;
	a_spells("init_spells", 6).f_school = 55;
	a_spells("init_spells", 6).f_info_1[2] = "Erh\366ht die St\344rke des ";
	a_spells("init_spells", 6).f_info_2[2] = "Magiers (Aktiver Zauber)";
	a_spells("init_spells", 6).f_info_1[1] = "Increases the Strength ";
	a_spells("init_spells", 6).f_info_2[1] = "of the magician (active spell)";
	a_spells("init_spells", 6).f_info_1[3] = "Incrementa la fuerza del ";
	a_spells("init_spells", 6).f_info_2[3] = "mago (hechizo activo)";
	a_spells("init_spells", 6).f_weavable = 1;
	a_spells("init_spells", 180).f_name[2] = "Golem zerst\366ren";
	a_spells("init_spells", 180).f_name[1] = "Destroy Golem";
	a_spells("init_spells", 180).f_name[3] = "Destruir Golem";
	a_spells("init_spells", 180).f_cost = 2;
	a_spells("init_spells", 180).f_level = 4;
	a_spells("init_spells", 180).f_duration = 0;
	a_spells("init_spells", 180).f_school = 55;
	a_spells("init_spells", 180).f_info_1[2] = "Vernichtet einen Golem";
	a_spells("init_spells", 180).f_info_2[2] = "";
	a_spells("init_spells", 180).f_info_1[1] = "Destroys a construct";
	a_spells("init_spells", 180).f_info_2[1] = "";
	a_spells("init_spells", 180).f_info_1[3] = "Destruye al Golem";
	a_spells("init_spells", 180).f_info_2[3] = "";
	a_spells("init_spells", 21).f_name[2] = "Portal";
	a_spells("init_spells", 21).f_name[1] = "Portal";
	a_spells("init_spells", 21).f_name[3] = "Portal";
	a_spells("init_spells", 21).f_cost = 5;
	a_spells("init_spells", 21).f_level = 5;
	a_spells("init_spells", 21).f_duration = 0;
	a_spells("init_spells", 21).f_school = 55;
	a_spells("init_spells", 21).f_info_1[2] = "Erzeugt eine magische \326ffnung";
	a_spells("init_spells", 21).f_info_2[2] = "in einer Mauer. 1 mal pro Ebene";
	a_spells("init_spells", 21).f_info_1[1] = "Creates a magical passage";
	a_spells("init_spells", 21).f_info_2[1] = "through a wall. Once per level";
	a_spells("init_spells", 21).f_info_1[3] = "Crea un pasadizo magico a traves";
	a_spells("init_spells", 21).f_info_2[3] = "de una pared. 1 vez por nivel";
	a_spells("init_spells", 119).f_name[2] = "Schutz Gegen Versteinern";
	a_spells("init_spells", 119).f_name[1] = "Protection: Petrification";
	a_spells("init_spells", 119).f_name[3] = "Proteccion: Piedra";
	a_spells("init_spells", 119).f_cost = 1;
	a_spells("init_spells", 119).f_level = 6;
	a_spells("init_spells", 119).f_duration = 5;
	a_spells("init_spells", 119).f_school = 55;
	a_spells("init_spells", 119).f_info_1[2] = "Besch\374tzt den Magier vor";
	a_spells("init_spells", 119).f_info_2[2] = "Versteinerung!";
	a_spells("init_spells", 119).f_info_1[1] = "Protects the mage from";
	a_spells("init_spells", 119).f_info_2[1] = "getting turned to stone!";
	a_spells("init_spells", 119).f_info_1[3] = "Protege el mago de";
	a_spells("init_spells", 119).f_info_2[3] = "convertir a piedra!";
	a_spells("init_spells", 119).f_weavable = 1;
	a_spells("init_spells", 61).f_name[2] = "Fallensinn";
	a_spells("init_spells", 61).f_name[1] = "Trap Alert";
	a_spells("init_spells", 61).f_name[3] = "Alarma de Trampas";
	a_spells("init_spells", 61).f_cost = 3;
	a_spells("init_spells", 61).f_level = 7;
	a_spells("init_spells", 61).f_duration = 5;
	a_spells("init_spells", 61).f_school = 55;
	a_spells("init_spells", 61).f_info_1[2] = "Erh\366ht die Chance Fallen";
	a_spells("init_spells", 61).f_info_2[2] = "zu entdecken (Aktiver Zauber)";
	a_spells("init_spells", 61).f_info_1[1] = "Increases the chance to";
	a_spells("init_spells", 61).f_info_2[1] = "spot traps (active spell)";
	a_spells("init_spells", 61).f_info_1[3] = "Incrementa las posibilitades de detectar ";
	a_spells("init_spells", 61).f_info_2[3] = "trampas (hechizo activo)";
	a_spells("init_spells", 61).f_weavable = 1;
	a_spells("init_spells", 62).f_name[2] = "Versteinern";
	a_spells("init_spells", 62).f_name[1] = "Petrify";
	a_spells("init_spells", 62).f_name[3] = "Convertir en Piedra";
	a_spells("init_spells", 62).f_cost = 3;
	a_spells("init_spells", 62).f_level = 8;
	a_spells("init_spells", 62).f_duration = 0;
	a_spells("init_spells", 62).f_school = 55;
	a_spells("init_spells", 62).f_info_1[2] = "L\344sst ein Monster";
	a_spells("init_spells", 62).f_info_2[2] = "versteinern";
	a_spells("init_spells", 62).f_info_1[1] = "Turns a monster";
	a_spells("init_spells", 62).f_info_2[1] = "into stone";
	a_spells("init_spells", 62).f_info_1[3] = "Convierte a un monstruo ";
	a_spells("init_spells", 62).f_info_2[3] = "en piedra";
	a_spells("init_spells", 152).f_name[2] = "Golem Beschw\366ren";
	a_spells("init_spells", 152).f_name[1] = "Summon Golem";
	a_spells("init_spells", 152).f_name[3] = "Conjurar Golem";
	a_spells("init_spells", 152).f_cost = 15;
	a_spells("init_spells", 152).f_level = 9;
	a_spells("init_spells", 152).f_duration = 0;
	a_spells("init_spells", 152).f_school = 55;
	a_spells("init_spells", 152).f_summoning = 12;
	a_spells("init_spells", 152).f_info_1[2] = "Erschafft einen magischen";
	a_spells("init_spells", 152).f_info_2[2] = "Diener auf dem Nexus";
	a_spells("init_spells", 152).f_info_1[1] = "Summons a magical";
	a_spells("init_spells", 152).f_info_2[1] = "servant in the Nexus";
	a_spells("init_spells", 152).f_info_1[3] = "Conjura un servidor";
	a_spells("init_spells", 152).f_info_2[3] = "magico en el Nexo";
	a_spells("init_spells", 63).f_name[2] = "Erdbeben";
	a_spells("init_spells", 63).f_name[1] = "Earthquake";
	a_spells("init_spells", 63).f_name[3] = "Terremoto";
	a_spells("init_spells", 63).f_cost = 4;
	a_spells("init_spells", 63).f_level = 10;
	a_spells("init_spells", 63).f_duration = 0;
	a_spells("init_spells", 63).f_school = 55;
	a_spells("init_spells", 63).f_info_1[2] = "Ein gewaltiger Erdschlag trifft";
	a_spells("init_spells", 63).f_info_2[2] = "alle nicht-fliegenden Monster";
	a_spells("init_spells", 63).f_info_1[1] = "A mighty blow attacks all";
	a_spells("init_spells", 63).f_info_2[1] = "non-flying monsters";
	a_spells("init_spells", 63).f_info_1[3] = "Un poderoso temblor ataca todos ";
	a_spells("init_spells", 63).f_info_2[3] = "los monstruos no voladores";
	a_spells("init_spells", 63).f_weavable = 1;
	a_spells("init_spells", 106).f_name[2] = "Stein Zerst\366ren";
	a_spells("init_spells", 106).f_name[1] = "Break Boulder";
	a_spells("init_spells", 106).f_name[3] = "Destruye Piedra";
	a_spells("init_spells", 106).f_cost = 4;
	a_spells("init_spells", 106).f_level = 11;
	a_spells("init_spells", 106).f_duration = 0;
	a_spells("init_spells", 106).f_school = 55;
	a_spells("init_spells", 106).f_info_1[2] = "Zerst\366rt einen Stein";
	a_spells("init_spells", 106).f_info_2[2] = "";
	a_spells("init_spells", 106).f_info_1[1] = "Destroys a stone";
	a_spells("init_spells", 106).f_info_2[1] = "";
	a_spells("init_spells", 106).f_info_1[3] = "Destruye una piedra";
	a_spells("init_spells", 106).f_info_2[3] = "";
	a_spells("init_spells", 64).f_name[2] = "Fallen Entfernen";
	a_spells("init_spells", 64).f_name[1] = "Remove Traps";
	a_spells("init_spells", 64).f_name[3] = "Quitar Trampas";
	a_spells("init_spells", 64).f_cost = 7;
	a_spells("init_spells", 64).f_level = 12;
	a_spells("init_spells", 64).f_duration = 0;
	a_spells("init_spells", 64).f_school = 55;
	a_spells("init_spells", 64).f_info_1[2] = "Zerst\366rt alle Fallen in";
	a_spells("init_spells", 64).f_info_2[2] = "der unmittelbaren Umgebung";
	a_spells("init_spells", 64).f_info_1[1] = "Destroys all traps around";
	a_spells("init_spells", 64).f_info_2[1] = "the magician";
	a_spells("init_spells", 64).f_info_1[3] = "Destruye todas las trampas ";
	a_spells("init_spells", 64).f_info_2[3] = "cerca del mago";
	a_spells("init_spells", 64).f_weavable = 1;
	a_spells("init_spells", 181).f_name[2] = "Schatz ausgraben";
	a_spells("init_spells", 181).f_name[1] = "Unearth Treasure";
	a_spells("init_spells", 181).f_name[3] = "Tesoro Enterrado";
	a_spells("init_spells", 181).f_cost = 5;
	a_spells("init_spells", 181).f_level = 13;
	a_spells("init_spells", 181).f_duration = 0;
	a_spells("init_spells", 181).f_school = 55;
	a_spells("init_spells", 181).f_info_1[2] = "Auf einem Feld graben";
	a_spells("init_spells", 181).f_info_2[2] = "";
	a_spells("init_spells", 181).f_info_1[1] = "Dig in one place";
	a_spells("init_spells", 181).f_info_2[1] = "";
	a_spells("init_spells", 181).f_info_1[3] = "Cava en ese sitio";
	a_spells("init_spells", 181).f_info_2[3] = "";
	a_spells("init_spells", 5).f_name[2] = "Funke";
	a_spells("init_spells", 5).f_name[1] = "Spark";
	a_spells("init_spells", 5).f_name[3] = "Chispa";
	a_spells("init_spells", 5).f_cost = 1;
	a_spells("init_spells", 5).f_level = 1;
	a_spells("init_spells", 5).f_duration = 0;
	a_spells("init_spells", 5).f_school = 53;
	a_spells("init_spells", 5).f_info_1[2] = "Beschw\366rt einen magischen Funken, ";
	a_spells("init_spells", 5).f_info_2[2] = "um ein Monster zu attackieren";
	a_spells("init_spells", 5).f_info_1[1] = "Summons a magic spark that ";
	a_spells("init_spells", 5).f_info_2[1] = "damages a nearby monster";
	a_spells("init_spells", 5).f_info_1[3] = "Crea una chispa magica que ";
	a_spells("init_spells", 5).f_info_2[3] = "dana un monstruo cercano";
	a_spells("init_spells", 5).f_weavable = 1;
	a_spells("init_spells", 7).f_name[2] = "Feuerschild";
	a_spells("init_spells", 7).f_name[1] = "Fire Shield";
	a_spells("init_spells", 7).f_name[3] = "Escudo de Fuego";
	a_spells("init_spells", 7).f_cost = 1;
	a_spells("init_spells", 7).f_level = 2;
	a_spells("init_spells", 7).f_duration = 5;
	a_spells("init_spells", 7).f_school = 53;
	a_spells("init_spells", 7).f_info_1[2] = "Sch\374tzt den Magier vor ";
	a_spells("init_spells", 7).f_info_2[2] = "Feuer und Hitze (aktiver Zauber)";
	a_spells("init_spells", 7).f_info_1[1] = "Wards against heat and ";
	a_spells("init_spells", 7).f_info_2[1] = "flame (active spell)";
	a_spells("init_spells", 7).f_info_1[3] = "Proteccion frente al calor y ";
	a_spells("init_spells", 7).f_info_2[3] = "las llamas (hechizo activo)";
	a_spells("init_spells", 7).f_weavable = 1;
	a_spells("init_spells", 9).f_name[2] = "Magische Flamme";
	a_spells("init_spells", 9).f_name[1] = "Magic Flame";
	a_spells("init_spells", 9).f_name[3] = "Llama Magica";
	a_spells("init_spells", 9).f_cost = 2;
	a_spells("init_spells", 9).f_level = 3;
	a_spells("init_spells", 9).f_duration = 4;
	a_spells("init_spells", 9).f_school = 53;
	a_spells("init_spells", 9).f_info_1[2] = "Eine magische Flamme spendet ";
	a_spells("init_spells", 9).f_info_2[2] = "dem Zauberer Licht (Aktiver Zauber)";
	a_spells("init_spells", 9).f_info_1[1] = "A magical flame gives light ";
	a_spells("init_spells", 9).f_info_2[1] = "to the magician (active spell)";
	a_spells("init_spells", 9).f_info_1[3] = "Una llama magica alumbra ";
	a_spells("init_spells", 9).f_info_2[3] = "al mago (hechizo activo)";
	a_spells("init_spells", 9).f_weavable = 1;
	a_spells("init_spells", 65).f_name[2] = "Feuerschlag";
	a_spells("init_spells", 65).f_name[1] = "Fire Bolt";
	a_spells("init_spells", 65).f_name[3] = "Rayo de Fuego";
	a_spells("init_spells", 65).f_cost = 2;
	a_spells("init_spells", 65).f_level = 4;
	a_spells("init_spells", 65).f_duration = 0;
	a_spells("init_spells", 65).f_school = 53;
	a_spells("init_spells", 65).f_info_1[2] = "Wirft einen Feuerball auf";
	a_spells("init_spells", 65).f_info_2[2] = "einen Gegner";
	a_spells("init_spells", 65).f_info_1[1] = "Throws a fireball on";
	a_spells("init_spells", 65).f_info_2[1] = "a nearby enemy";
	a_spells("init_spells", 65).f_info_1[3] = "Lanza una bola de fuego a ";
	a_spells("init_spells", 65).f_info_2[3] = "un enemigo cercano";
	a_spells("init_spells", 65).f_weavable = 1;
	a_spells("init_spells", 114).f_name[2] = "Feuerlanze";
	a_spells("init_spells", 114).f_name[1] = "Flameburst";
	a_spells("init_spells", 114).f_name[3] = "Lanza de Fuego";
	a_spells("init_spells", 114).f_cost = 2;
	a_spells("init_spells", 114).f_level = 5;
	a_spells("init_spells", 114).f_duration = 0;
	a_spells("init_spells", 114).f_school = 53;
	a_spells("init_spells", 114).f_info_1[2] = "Greift alle Monster in";
	a_spells("init_spells", 114).f_info_2[2] = "einer geraden an";
	a_spells("init_spells", 114).f_info_1[1] = "Attacks all monsters";
	a_spells("init_spells", 114).f_info_2[1] = "in a row";
	a_spells("init_spells", 114).f_info_1[3] = "Ataca todos los monstruos";
	a_spells("init_spells", 114).f_info_2[3] = "en una linea";
	a_spells("init_spells", 114).f_weavable = 1;
	a_spells("init_spells", 23).f_name[2] = "Flammenmeer";
	a_spells("init_spells", 23).f_name[1] = "Sea of Flames";
	a_spells("init_spells", 23).f_name[3] = "Mar de Fuego";
	a_spells("init_spells", 23).f_cost = 3;
	a_spells("init_spells", 23).f_level = 6;
	a_spells("init_spells", 23).f_duration = 0;
	a_spells("init_spells", 23).f_school = 53;
	a_spells("init_spells", 23).f_info_1[2] = "Verbrennt alle Monster in";
	a_spells("init_spells", 23).f_info_2[2] = "Sichtweite mit magischem Feuer";
	a_spells("init_spells", 23).f_info_1[1] = "Burns all monsters in";
	a_spells("init_spells", 23).f_info_2[1] = "sight with magical fire";
	a_spells("init_spells", 23).f_info_1[3] = "Quema a todos los monstruos ";
	a_spells("init_spells", 23).f_info_2[3] = "visibles con fuego magico";
	a_spells("init_spells", 23).f_weavable = 1;
	a_spells("init_spells", 71).f_name[2] = "Flammenaura";
	a_spells("init_spells", 71).f_name[1] = "Aura of Fire";
	a_spells("init_spells", 71).f_name[3] = "Aura de Fuego";
	a_spells("init_spells", 71).f_cost = 3;
	a_spells("init_spells", 71).f_level = 7;
	a_spells("init_spells", 71).f_duration = 5;
	a_spells("init_spells", 71).f_school = 53;
	a_spells("init_spells", 71).f_info_1[2] = "Umh\374llt den Magier mit einer";
	a_spells("init_spells", 71).f_info_2[2] = "Aura der Hitze (Aktiver Zauber)";
	a_spells("init_spells", 71).f_info_1[1] = "The magician receives an";
	a_spells("init_spells", 71).f_info_2[1] = "aura of fire (active spell)";
	a_spells("init_spells", 71).f_info_1[3] = "El mago recibe un aura de ";
	a_spells("init_spells", 71).f_info_2[3] = "fuego (hechizo activo)";
	a_spells("init_spells", 71).f_weavable = 1;
	a_spells("init_spells", 22).f_name[2] = "Drachenfeuer";
	a_spells("init_spells", 22).f_name[1] = "Dragon Fire";
	a_spells("init_spells", 22).f_name[3] = "Fuego de Dragon";
	a_spells("init_spells", 22).f_cost = 3;
	a_spells("init_spells", 22).f_level = 8;
	a_spells("init_spells", 22).f_duration = 0;
	a_spells("init_spells", 22).f_school = 53;
	a_spells("init_spells", 22).f_info_1[2] = "Wirft Drachenfeuer auf ein";
	a_spells("init_spells", 22).f_info_2[2] = "Monster";
	a_spells("init_spells", 22).f_info_1[1] = "Throws dragon fire onto one";
	a_spells("init_spells", 22).f_info_2[1] = "monster";
	a_spells("init_spells", 22).f_info_1[3] = "Lanza fuego de dragon ";
	a_spells("init_spells", 22).f_info_2[3] = "a un monstruo";
	a_spells("init_spells", 22).f_weavable = 1;
	a_spells("init_spells", 115).f_name[2] = "Feuerball";
	a_spells("init_spells", 115).f_name[1] = "Fireball";
	a_spells("init_spells", 115).f_name[3] = "Bola de Fuego";
	a_spells("init_spells", 115).f_cost = 3;
	a_spells("init_spells", 115).f_level = 10;
	a_spells("init_spells", 115).f_duration = 0;
	a_spells("init_spells", 115).f_school = 53;
	a_spells("init_spells", 115).f_info_1[2] = "Verbrennt ein Feld und";
	a_spells("init_spells", 115).f_info_2[2] = "alle umliegenden";
	a_spells("init_spells", 115).f_info_1[1] = "Burns one square and";
	a_spells("init_spells", 115).f_info_2[1] = "surrounding ones";
	a_spells("init_spells", 115).f_info_1[3] = "Quema un campo y todos";
	a_spells("init_spells", 115).f_info_2[3] = "los alrededores";
	a_spells("init_spells", 115).f_weavable = 1;
	a_spells("init_spells", 162).f_name[2] = "Feuerelementar Beschw\366ren";
	a_spells("init_spells", 162).f_name[1] = "Summon Fire Elemental";
	a_spells("init_spells", 162).f_name[3] = "Conjurar Elementar de Fuego";
	a_spells("init_spells", 162).f_cost = 15;
	a_spells("init_spells", 162).f_level = 11;
	a_spells("init_spells", 162).f_duration = 0;
	a_spells("init_spells", 162).f_school = 53;
	a_spells("init_spells", 162).f_summoning = 14;
	a_spells("init_spells", 162).f_info_1[2] = "Beschw\366rt einen magischen";
	a_spells("init_spells", 162).f_info_2[2] = "Diener auf dem Nexus";
	a_spells("init_spells", 162).f_info_1[1] = "Summons a magical";
	a_spells("init_spells", 162).f_info_2[1] = "servant in the Nexus";
	a_spells("init_spells", 162).f_info_1[3] = "Conjura un servidor";
	a_spells("init_spells", 162).f_info_2[3] = "magico en el Nexo";
	a_spells("init_spells", 116).f_name[2] = "Armageddon";
	a_spells("init_spells", 116).f_name[1] = "Armageddon";
	a_spells("init_spells", 116).f_name[3] = "Armagedon";
	a_spells("init_spells", 116).f_cost = 10;
	a_spells("init_spells", 116).f_level = 15;
	a_spells("init_spells", 116).f_duration = 0;
	a_spells("init_spells", 116).f_school = 53;
	a_spells("init_spells", 116).f_info_1[2] = "Greift alle Monster der Ebene an";
	a_spells("init_spells", 116).f_info_2[2] = "Kostet Gegenstand! 1 mal pro Ebene";
	a_spells("init_spells", 116).f_info_1[1] = "Attacks all monsters in the current";
	a_spells("init_spells", 116).f_info_2[1] = "level. Costs item! 1 time per level";
	a_spells("init_spells", 116).f_info_1[3] = "Ataaa a todos los monstruos en este";
	a_spells("init_spells", 116).f_info_2[3] = "nivel. Cuesta un objeto! 1 vez por nivel";
	a_spells("init_spells", 116).f_weavable = 1;
	a_spells("init_spells", 92).f_name[2] = "Skelett Beschw\366ren";
	a_spells("init_spells", 92).f_name[1] = "Summon Skeleton";
	a_spells("init_spells", 92).f_name[3] = "Conjurar Esqueleto";
	a_spells("init_spells", 92).f_cost = 3;
	a_spells("init_spells", 92).f_level = 1;
	a_spells("init_spells", 92).f_duration = 0;
	a_spells("init_spells", 92).f_school = 52;
	a_spells("init_spells", 92).f_summoning = 2;
	a_spells("init_spells", 92).f_info_1[2] = "Beschw\366rt einen Skelettkrieger";
	a_spells("init_spells", 92).f_info_2[2] = "aus einem Skelett";
	a_spells("init_spells", 92).f_info_1[1] = "Summons a skeleton warrior";
	a_spells("init_spells", 92).f_info_2[1] = "from bones";
	a_spells("init_spells", 92).f_info_1[3] = "Conjura un esqueleto luchador";
	a_spells("init_spells", 92).f_info_2[3] = "desde unos huesos";
	a_spells("init_spells", 24).f_name[2] = "Furcht";
	a_spells("init_spells", 24).f_name[1] = "Fear";
	a_spells("init_spells", 24).f_name[3] = "Miedo";
	a_spells("init_spells", 24).f_cost = 1;
	a_spells("init_spells", 24).f_level = 3;
	a_spells("init_spells", 24).f_duration = 0;
	a_spells("init_spells", 24).f_school = 52;
	a_spells("init_spells", 24).f_info_1[2] = "Bringt ein Monster dazu";
	a_spells("init_spells", 24).f_info_2[2] = "vor Furcht zu fliehen";
	a_spells("init_spells", 24).f_info_1[1] = "Causes a monster to flee";
	a_spells("init_spells", 24).f_info_2[1] = "from fear";
	a_spells("init_spells", 24).f_info_1[3] = "Hace que un monstruo ";
	a_spells("init_spells", 24).f_info_2[3] = "huya despavorido";
	a_spells("init_spells", 8).f_name[2] = "Totengold";
	a_spells("init_spells", 8).f_name[1] = "Dead Man's Gold";
	a_spells("init_spells", 8).f_name[3] = "Oro del Muerto";
	a_spells("init_spells", 8).f_cost = 3;
	a_spells("init_spells", 8).f_level = 3;
	a_spells("init_spells", 8).f_duration = 0;
	a_spells("init_spells", 8).f_school = 52;
	a_spells("init_spells", 8).f_info_1[2] = "Verwandelt ein Skelett ";
	a_spells("init_spells", 8).f_info_2[2] = "in einen Goldsack";
	a_spells("init_spells", 8).f_info_1[1] = "Turns a skeleton into ";
	a_spells("init_spells", 8).f_info_2[1] = "a bag of gold";
	a_spells("init_spells", 8).f_info_1[3] = "Convierte un esqueleto ";
	a_spells("init_spells", 8).f_info_2[3] = "en una bolsa de oro";
	a_spells("init_spells", 86).f_name[2] = "Fledermausgestalt";
	a_spells("init_spells", 86).f_name[1] = "Bat Shape";
	a_spells("init_spells", 86).f_name[3] = "Cuerpo de Murcielago";
	a_spells("init_spells", 86).f_cost = 2;
	a_spells("init_spells", 86).f_level = 4;
	a_spells("init_spells", 86).f_duration = 4;
	a_spells("init_spells", 86).f_school = 52;
	a_spells("init_spells", 86).f_info_1[2] = "Verwandelt den Magier in";
	a_spells("init_spells", 86).f_info_2[2] = "eine Fledermaus (aktiver Zauber)";
	a_spells("init_spells", 86).f_info_1[1] = "Turns the magician into a";
	a_spells("init_spells", 86).f_info_2[1] = "bat (active spell)";
	a_spells("init_spells", 86).f_info_1[3] = "Transforma el mago en un";
	a_spells("init_spells", 86).f_info_2[3] = "murcielago (hechizo activo)";
	a_spells("init_spells", 86).f_weavable = 1;
	a_spells("init_spells", 86).f_shapechanging = 1;
	a_spells("init_spells", 25).f_name[2] = "Dunkler Sog";
	a_spells("init_spells", 25).f_name[1] = "Drain Life";
	a_spells("init_spells", 25).f_name[3] = "Drenar Vida";
	a_spells("init_spells", 25).f_cost = 3;
	a_spells("init_spells", 25).f_level = 5;
	a_spells("init_spells", 25).f_duration = 0;
	a_spells("init_spells", 25).f_school = 52;
	a_spells("init_spells", 25).f_info_1[2] = "Stiehlt einem Monster";
	a_spells("init_spells", 25).f_info_2[2] = "Lebenspunkte";
	a_spells("init_spells", 25).f_info_1[1] = "Drains Life Points from a";
	a_spells("init_spells", 25).f_info_2[1] = "monster";
	a_spells("init_spells", 25).f_info_1[3] = "Drena Puntos de Vida ";
	a_spells("init_spells", 25).f_info_2[3] = "de un monstruo";
	a_spells("init_spells", 25).f_weavable = 1;
	a_spells("init_spells", 93).f_name[2] = "Todesritter Beschw\366ren";
	a_spells("init_spells", 93).f_name[1] = "Summon Deathknight";
	a_spells("init_spells", 93).f_name[3] = "Conjurar Caballero de Muerto";
	a_spells("init_spells", 93).f_cost = 7;
	a_spells("init_spells", 93).f_level = 6;
	a_spells("init_spells", 93).f_duration = 0;
	a_spells("init_spells", 93).f_school = 52;
	a_spells("init_spells", 93).f_summoning = 3;
	a_spells("init_spells", 93).f_info_1[2] = "Beschw\366rt einen Todesritter";
	a_spells("init_spells", 93).f_info_2[2] = "aus einem Skelett";
	a_spells("init_spells", 93).f_info_1[1] = "Summons a deathknight";
	a_spells("init_spells", 93).f_info_2[1] = "from bones";
	a_spells("init_spells", 93).f_info_1[3] = "Conjura un caballero de muerto";
	a_spells("init_spells", 93).f_info_2[3] = "desde unos huesos";
	a_spells("init_spells", 66).f_name[2] = "Dunkles Mana";
	a_spells("init_spells", 66).f_name[1] = "Dark Mana";
	a_spells("init_spells", 66).f_name[3] = "Mana Oscuro";
	a_spells("init_spells", 66).f_cost = 0;
	a_spells("init_spells", 66).f_level = 7;
	a_spells("init_spells", 66).f_duration = 0;
	a_spells("init_spells", 66).f_school = 52;
	a_spells("init_spells", 66).f_info_1[2] = "Verwandelt ein Skelett";
	a_spells("init_spells", 66).f_info_2[2] = "in Mana";
	a_spells("init_spells", 66).f_info_1[1] = "Turns a skeleton into";
	a_spells("init_spells", 66).f_info_2[1] = "Mana";
	a_spells("init_spells", 66).f_info_1[3] = "Convierte a un esqueleto ";
	a_spells("init_spells", 66).f_info_2[3] = "en Mana";
	a_spells("init_spells", 96).f_name[2] = "Mumie Beschw\366ren";
	a_spells("init_spells", 96).f_name[1] = "Summon Mummy";
	a_spells("init_spells", 96).f_name[3] = "Conjurar Momia";
	a_spells("init_spells", 96).f_cost = 12;
	a_spells("init_spells", 96).f_level = 8;
	a_spells("init_spells", 96).f_duration = 0;
	a_spells("init_spells", 96).f_school = 52;
	a_spells("init_spells", 96).f_summoning = 6;
	a_spells("init_spells", 96).f_info_1[2] = "Beschw\366rt eine uralte untote";
	a_spells("init_spells", 96).f_info_2[2] = "Mumie aus einem Skelett herbei";
	a_spells("init_spells", 96).f_info_1[1] = "Summons an ancient undead";
	a_spells("init_spells", 96).f_info_2[1] = "mummy from a skeleton";
	a_spells("init_spells", 96).f_info_1[3] = "Conjura una viejano muerto";
	a_spells("init_spells", 96).f_info_2[3] = "momia de un eskeleto";
	a_spells("init_spells", 149).f_name[2] = "Verdorren";
	a_spells("init_spells", 149).f_name[1] = "Wither";
	a_spells("init_spells", 149).f_name[3] = "Marchitarse";
	a_spells("init_spells", 149).f_cost = 2;
	a_spells("init_spells", 149).f_level = 9;
	a_spells("init_spells", 149).f_duration = 0;
	a_spells("init_spells", 149).f_school = 52;
	a_spells("init_spells", 149).f_info_1[2] = "Halbiert die Lebenspunkte";
	a_spells("init_spells", 149).f_info_2[2] = "eines Monsters";
	a_spells("init_spells", 149).f_info_1[1] = "Halves the Life Points of";
	a_spells("init_spells", 149).f_info_2[1] = "a monster";
	a_spells("init_spells", 149).f_info_1[3] = "Corta los Puntos de Vida";
	a_spells("init_spells", 149).f_info_2[3] = "por la mitad";
	a_spells("init_spells", 97).f_name[2] = "D\344mon Beschw\366ren";
	a_spells("init_spells", 97).f_name[1] = "Summon Demon";
	a_spells("init_spells", 97).f_name[3] = "Conjurar Demonio";
	a_spells("init_spells", 97).f_cost = 30;
	a_spells("init_spells", 97).f_level = 10;
	a_spells("init_spells", 97).f_duration = 0;
	a_spells("init_spells", 97).f_school = 52;
	a_spells("init_spells", 97).f_summoning = 7;
	a_spells("init_spells", 97).f_info_1[2] = "Beschw\366rt einen D\344mon";
	a_spells("init_spells", 97).f_info_2[2] = "aus den Tiefen Gehennas";
	a_spells("init_spells", 97).f_info_1[1] = "Summons a demon from";
	a_spells("init_spells", 97).f_info_2[1] = "the depths of hell";
	a_spells("init_spells", 97).f_info_1[3] = "Conjura un demonio";
	a_spells("init_spells", 97).f_info_2[3] = "del infierno";
	a_spells("init_spells", 67).f_name[2] = "Wort des Todes";
	a_spells("init_spells", 67).f_name[1] = "Word of Death";
	a_spells("init_spells", 67).f_name[3] = "Palabra de Muerte";
	a_spells("init_spells", 67).f_cost = 3;
	a_spells("init_spells", 67).f_level = 12;
	a_spells("init_spells", 67).f_duration = 0;
	a_spells("init_spells", 67).f_school = 52;
	a_spells("init_spells", 67).f_info_1[2] = "T\366tet einen Humaoiden";
	a_spells("init_spells", 67).f_info_2[2] = "(Mensch, Ork, Elf etc.)";
	a_spells("init_spells", 67).f_info_1[1] = "Kills a humanoid";
	a_spells("init_spells", 67).f_info_2[1] = "(Human, Orc, Elf etc.)";
	a_spells("init_spells", 67).f_info_1[3] = "Mata todo lo cercano ";
	a_spells("init_spells", 67).f_info_2[3] = "a un hombre";
	a_spells("init_spells", 150).f_name[2] = "Todeswolke";
	a_spells("init_spells", 150).f_name[1] = "Cloud of Death";
	a_spells("init_spells", 150).f_name[3] = "Nube de Muerte";
	a_spells("init_spells", 150).f_cost = 3;
	a_spells("init_spells", 150).f_level = 13;
	a_spells("init_spells", 150).f_duration = 0;
	a_spells("init_spells", 150).f_school = 52;
	a_spells("init_spells", 150).f_info_1[2] = "T\366tet alle Monster mit weniger";
	a_spells("init_spells", 150).f_info_2[2] = "als Zaubermacht*3 Lebenspunkten";
	a_spells("init_spells", 150).f_info_1[1] = "Kills all monsters with less";
	a_spells("init_spells", 150).f_info_2[1] = "then Spell Power*3 Life Points";
	a_spells("init_spells", 150).f_info_1[3] = "Mata a todos los monstruos con";
	a_spells("init_spells", 150).f_info_2[3] = "menos de Poder*3 Puntos de Vida";
	a_spells("init_spells", 150).f_weavable = 1;
	a_spells("init_spells", 146).f_name[2] = "Den Tod Austricksen";
	a_spells("init_spells", 146).f_name[1] = "Cheat Death";
	a_spells("init_spells", 146).f_name[3] = "Enganar al Muerte";
	a_spells("init_spells", 146).f_cost = 10;
	a_spells("init_spells", 146).f_level = 14;
	a_spells("init_spells", 146).f_duration = 0;
	a_spells("init_spells", 146).f_school = 52;
	a_spells("init_spells", 146).f_info_1[2] = "Verwandelt einen schwarzen";
	a_spells("init_spells", 146).f_info_2[2] = "Edelstein in steinernes Herz";
	a_spells("init_spells", 146).f_info_1[1] = "Transforms a black gem into";
	a_spells("init_spells", 146).f_info_2[1] = "a Heartstone";
	a_spells("init_spells", 146).f_info_1[3] = "Transforma una piedra preciosa";
	a_spells("init_spells", 146).f_info_2[3] = "negra en un corazon de piedra";
	a_spells("init_spells", 128).f_name[2] = "Pestilenz";
	a_spells("init_spells", 128).f_name[1] = "Pestilence";
	a_spells("init_spells", 128).f_name[3] = "Pestilencia";
	a_spells("init_spells", 128).f_cost = 10;
	a_spells("init_spells", 128).f_level = 15;
	a_spells("init_spells", 128).f_duration = 0;
	a_spells("init_spells", 128).f_school = 52;
	a_spells("init_spells", 128).f_info_1[2] = "Greift alle lebenden Monster der Ebene";
	a_spells("init_spells", 128).f_info_2[2] = "an. Kostet Gegenstand! 1 mal pro Ebene";
	a_spells("init_spells", 128).f_info_1[1] = "Attacks all living monsters in the";
	a_spells("init_spells", 128).f_info_2[1] = "current level. Costs item! 1 time per level";
	a_spells("init_spells", 128).f_info_1[3] = "Ataca a todos los monstruos viviendos en";
	a_spells("init_spells", 128).f_info_2[3] = "este nivel. Cuesta un objeto! 1 vez por nivel";
	a_spells("init_spells", 128).f_weavable = 1;
	a_spells("init_spells", 10).f_name[2] = "Magischer Apfel";
	a_spells("init_spells", 10).f_name[1] = "Magic Apple";
	a_spells("init_spells", 10).f_name[3] = "Manzana Magica";
	a_spells("init_spells", 10).f_cost = 1;
	a_spells("init_spells", 10).f_level = 1;
	a_spells("init_spells", 10).f_duration = 0;
	a_spells("init_spells", 10).f_school = 57;
	a_spells("init_spells", 10).f_info_1[2] = "Beschw\366rt einen magischen ";
	a_spells("init_spells", 10).f_info_2[2] = "Apfel zum Essen";
	a_spells("init_spells", 10).f_info_1[1] = "Conjures a magic apple for ";
	a_spells("init_spells", 10).f_info_2[1] = "the magician to eat";
	a_spells("init_spells", 10).f_info_1[3] = "Conjura una manzana ";
	a_spells("init_spells", 10).f_info_2[3] = "magica comestible";
	a_spells("init_spells", 16).f_name[2] = "Tiere Bannen";
	a_spells("init_spells", 16).f_name[1] = "Banish Animals";
	a_spells("init_spells", 16).f_name[3] = "Castigar Animales";
	a_spells("init_spells", 16).f_cost = 1;
	a_spells("init_spells", 16).f_level = 2;
	a_spells("init_spells", 16).f_duration = 0;
	a_spells("init_spells", 16).f_school = 57;
	a_spells("init_spells", 16).f_info_1[2] = "Vertreibt ein einzelnes";
	a_spells("init_spells", 16).f_info_2[2] = "Tier";
	a_spells("init_spells", 16).f_info_1[1] = "Banishes a single";
	a_spells("init_spells", 16).f_info_2[1] = "animal";
	a_spells("init_spells", 16).f_info_1[3] = "Castiga un solo animal";
	a_spells("init_spells", 16).f_info_2[3] = "";
	a_spells("init_spells", 147).f_name[2] = "Vogel Beschw\366ren";
	a_spells("init_spells", 147).f_name[1] = "Summon Bird";
	a_spells("init_spells", 147).f_name[3] = "Conjurar Pajaro";
	a_spells("init_spells", 147).f_cost = 3;
	a_spells("init_spells", 147).f_level = 4;
	a_spells("init_spells", 147).f_duration = 0;
	a_spells("init_spells", 147).f_school = 57;
	a_spells("init_spells", 147).f_summoning = 11;
	a_spells("init_spells", 147).f_info_1[2] = "Beschw\366rt einen Vogel";
	a_spells("init_spells", 147).f_info_2[2] = "herbei. (Fliegt)";
	a_spells("init_spells", 147).f_info_1[1] = "Summons a bird";
	a_spells("init_spells", 147).f_info_2[1] = "(Flying)";
	a_spells("init_spells", 147).f_info_1[3] = "Conjura un pajaro";
	a_spells("init_spells", 147).f_info_2[3] = "(Volando)";
	a_spells("init_spells", 27).f_name[2] = "\326ffnen";
	a_spells("init_spells", 27).f_name[1] = "Open";
	a_spells("init_spells", 27).f_name[3] = "Abrir";
	a_spells("init_spells", 27).f_cost = 3;
	a_spells("init_spells", 27).f_level = 5;
	a_spells("init_spells", 27).f_duration = 0;
	a_spells("init_spells", 27).f_school = 57;
	a_spells("init_spells", 27).f_info_1[2] = "\326ffnet eine verschlossene";
	a_spells("init_spells", 27).f_info_2[2] = "T\374r oder Truhe";
	a_spells("init_spells", 27).f_info_1[1] = "Opens a locked";
	a_spells("init_spells", 27).f_info_2[1] = "door or chest";
	a_spells("init_spells", 27).f_info_1[3] = "Abre una puerta o ";
	a_spells("init_spells", 27).f_info_2[3] = "cerradura";
	a_spells("init_spells", 87).f_name[2] = "Wolfsgestalt";
	a_spells("init_spells", 87).f_name[1] = "Wolf Shape";
	a_spells("init_spells", 87).f_name[3] = "Cuerpo de Lobo";
	a_spells("init_spells", 87).f_cost = 3;
	a_spells("init_spells", 87).f_level = 6;
	a_spells("init_spells", 87).f_duration = 5;
	a_spells("init_spells", 87).f_school = 57;
	a_spells("init_spells", 87).f_info_1[2] = "Verwandelt den Magier in";
	a_spells("init_spells", 87).f_info_2[2] = "einen Wolf (aktiver Zauber)";
	a_spells("init_spells", 87).f_info_1[1] = "Turns the magician into a";
	a_spells("init_spells", 87).f_info_2[1] = "wolf (active spell)";
	a_spells("init_spells", 87).f_info_1[3] = "Transforma el mago en un";
	a_spells("init_spells", 87).f_info_2[3] = "lobo (hechizo activo)";
	a_spells("init_spells", 87).f_weavable = 1;
	a_spells("init_spells", 87).f_shapechanging = 1;
	a_spells("init_spells", 153).f_name[2] = "Satyr Beschw\366ren";
	a_spells("init_spells", 153).f_name[1] = "Summon Satyr";
	a_spells("init_spells", 153).f_name[3] = "Conjurar Satiro";
	a_spells("init_spells", 153).f_cost = 15;
	a_spells("init_spells", 153).f_level = 7;
	a_spells("init_spells", 153).f_duration = 0;
	a_spells("init_spells", 153).f_school = 57;
	a_spells("init_spells", 153).f_summoning = 13;
	a_spells("init_spells", 153).f_info_1[2] = "Erschafft einen magischen";
	a_spells("init_spells", 153).f_info_2[2] = "Diener auf dem Nexus";
	a_spells("init_spells", 153).f_info_1[1] = "Summons a magical";
	a_spells("init_spells", 153).f_info_2[1] = "servant in the Nexus";
	a_spells("init_spells", 153).f_info_1[3] = "Conjura un servidor";
	a_spells("init_spells", 153).f_info_2[3] = "magico en el Nexo";
	a_spells("init_spells", 132).f_name[2] = "Pflanze Zerst\366ren";
	a_spells("init_spells", 132).f_name[1] = "Destroy Plant";
	a_spells("init_spells", 132).f_name[3] = "Destruir Planta";
	a_spells("init_spells", 132).f_cost = 1;
	a_spells("init_spells", 132).f_level = 8;
	a_spells("init_spells", 132).f_duration = 0;
	a_spells("init_spells", 132).f_school = 57;
	a_spells("init_spells", 132).f_info_1[2] = "Zerst\366rt eine Pflanze";
	a_spells("init_spells", 132).f_info_2[2] = "";
	a_spells("init_spells", 132).f_info_1[1] = "Destroys a plant";
	a_spells("init_spells", 132).f_info_2[1] = "";
	a_spells("init_spells", 132).f_info_1[3] = "Destruye una planta";
	a_spells("init_spells", 132).f_info_2[3] = "";
	a_spells("init_spells", 148).f_name[2] = "Gift Neutralisieren";
	a_spells("init_spells", 148).f_name[1] = "Neutralize Poison";
	a_spells("init_spells", 148).f_name[3] = "Neutralizar Veneno";
	a_spells("init_spells", 148).f_cost = 1;
	a_spells("init_spells", 148).f_level = 9;
	a_spells("init_spells", 148).f_duration = 0;
	a_spells("init_spells", 148).f_school = 57;
	a_spells("init_spells", 148).f_info_1[2] = "Entfernt Gift von einem";
	a_spells("init_spells", 148).f_info_2[2] = "Feld";
	a_spells("init_spells", 148).f_info_1[1] = "Removes poison from a";
	a_spells("init_spells", 148).f_info_2[1] = "field";
	a_spells("init_spells", 148).f_info_1[3] = "Remueve veneno de un";
	a_spells("init_spells", 148).f_info_2[3] = "campo";
	a_spells("init_spells", 129).f_name[2] = "Telekinesis";
	a_spells("init_spells", 129).f_name[1] = "Telekinesis";
	a_spells("init_spells", 129).f_name[3] = "Telequinesia";
	a_spells("init_spells", 129).f_cost = 2;
	a_spells("init_spells", 129).f_level = 10;
	a_spells("init_spells", 129).f_duration = 0;
	a_spells("init_spells", 129).f_school = 57;
	a_spells("init_spells", 129).f_info_1[2] = "Bef\366rdert einen Gegenstand";
	a_spells("init_spells", 129).f_info_2[2] = "in Sichtweite zum Magier";
	a_spells("init_spells", 129).f_info_1[1] = "Moves an item in view towards";
	a_spells("init_spells", 129).f_info_2[1] = "the magician";
	a_spells("init_spells", 129).f_info_1[3] = "Mueve una cosa que este en";
	a_spells("init_spells", 129).f_info_2[3] = "la vista del mago";
	a_spells("init_spells", 151).f_name[2] = "Regeneration";
	a_spells("init_spells", 151).f_name[1] = "Regeneration";
	a_spells("init_spells", 151).f_name[3] = "Regeneraci\363n";
	a_spells("init_spells", 151).f_cost = 5;
	a_spells("init_spells", 151).f_level = 11;
	a_spells("init_spells", 151).f_duration = 2;
	a_spells("init_spells", 151).f_school = 57;
	a_spells("init_spells", 151).f_info_1[2] = "Regeneriert einen Lebenspunkt";
	a_spells("init_spells", 151).f_info_2[2] = "pro Runde";
	a_spells("init_spells", 151).f_info_1[1] = "Regenerates one Life Point";
	a_spells("init_spells", 151).f_info_2[1] = "each round";
	a_spells("init_spells", 151).f_info_1[3] = "Regenera un Punto de Vida";
	a_spells("init_spells", 151).f_info_2[3] = "por turno";
	a_spells("init_spells", 151).f_weavable = 1;
	a_spells("init_spells", 155).f_name[2] = "Insektenschwarm";
	a_spells("init_spells", 155).f_name[1] = "Insect Swarm";
	a_spells("init_spells", 155).f_name[3] = "Nube de Insectos";
	a_spells("init_spells", 155).f_cost = 2;
	a_spells("init_spells", 155).f_level = 12;
	a_spells("init_spells", 155).f_duration = 1;
	a_spells("init_spells", 155).f_school = 57;
	a_spells("init_spells", 155).f_info_1[2] = "Sie attackieren ein Monster";
	a_spells("init_spells", 155).f_info_2[2] = "f\374r Zauberkraft Runden";
	a_spells("init_spells", 155).f_info_1[1] = "Attacks a monster for";
	a_spells("init_spells", 155).f_info_2[1] = "(Spell Power) turns";
	a_spells("init_spells", 155).f_info_1[3] = "Atacan a un monstruo durante";
	a_spells("init_spells", 155).f_info_2[3] = "(Poder de Hechizos) turnos";
	a_spells("init_spells", 155).f_weavable = 1;
	a_spells("init_spells", 133).f_name[2] = "Mit Tieren Reden";
	a_spells("init_spells", 133).f_name[1] = "Talk with Animals";
	a_spells("init_spells", 133).f_name[3] = "Hablar con Animales";
	a_spells("init_spells", 133).f_cost = 2;
	a_spells("init_spells", 133).f_level = 13;
	a_spells("init_spells", 133).f_duration = 0;
	a_spells("init_spells", 133).f_school = 57;
	a_spells("init_spells", 133).f_info_1[2] = "Das Tier wird freundlich und";
	a_spells("init_spells", 133).f_info_2[2] = "zeigt den Ausgang!";
	a_spells("init_spells", 133).f_info_1[1] = "The animal gets friendly";
	a_spells("init_spells", 133).f_info_2[1] = "and shows the exit!";
	a_spells("init_spells", 133).f_info_1[3] = "El animal se vuelve amistoso";
	a_spells("init_spells", 133).f_info_2[3] = "y te ense\361a la salida!";
	a_spells("init_spells", 13).f_name[2] = "Schmerzen Lindern";
	a_spells("init_spells", 13).f_name[1] = "Ease Pain";
	a_spells("init_spells", 13).f_name[3] = "Aliviar el Dolor";
	a_spells("init_spells", 13).f_cost = 1;
	a_spells("init_spells", 13).f_level = 1;
	a_spells("init_spells", 13).f_duration = 0;
	a_spells("init_spells", 13).f_school = 51;
	a_spells("init_spells", 13).f_info_1[2] = "Heilt die Wunden des Magiers";
	a_spells("init_spells", 13).f_info_2[2] = "";
	a_spells("init_spells", 13).f_info_1[1] = "Heals the wounds of the magician";
	a_spells("init_spells", 13).f_info_2[1] = "";
	a_spells("init_spells", 13).f_info_1[3] = "Cura las heridas del mago";
	a_spells("init_spells", 13).f_info_2[3] = "";
	a_spells("init_spells", 13).f_weavable = 1;
	a_spells("init_spells", 17).f_name[2] = "Untote Bannen";
	a_spells("init_spells", 17).f_name[1] = "Banish Undead";
	a_spells("init_spells", 17).f_name[3] = "Castigar No-Muertos";
	a_spells("init_spells", 17).f_cost = 2;
	a_spells("init_spells", 17).f_level = 2;
	a_spells("init_spells", 17).f_duration = 0;
	a_spells("init_spells", 17).f_school = 51;
	a_spells("init_spells", 17).f_info_1[2] = "Vertreibt einen einzelnen";
	a_spells("init_spells", 17).f_info_2[2] = "Untoten";
	a_spells("init_spells", 17).f_info_1[1] = "Banishes a single";
	a_spells("init_spells", 17).f_info_2[1] = "undead creature";
	a_spells("init_spells", 17).f_info_1[3] = "Castigar un solo no-muerto";
	a_spells("init_spells", 17).f_info_2[3] = "";
	a_spells("init_spells", 33).f_name[2] = "Weisser Schutz";
	a_spells("init_spells", 33).f_name[1] = "White Protection";
	a_spells("init_spells", 33).f_name[3] = "Proteccion Blanca";
	a_spells("init_spells", 33).f_cost = 2;
	a_spells("init_spells", 33).f_level = 3;
	a_spells("init_spells", 33).f_duration = 5;
	a_spells("init_spells", 33).f_school = 51;
	a_spells("init_spells", 33).f_info_1[2] = "Sch\374tzt vor Nahkampf-";
	a_spells("init_spells", 33).f_info_2[2] = "Attacken (aktiver Zauber)";
	a_spells("init_spells", 33).f_info_1[1] = "Wards against melee";
	a_spells("init_spells", 33).f_info_2[1] = "attacks (active spell)";
	a_spells("init_spells", 33).f_info_1[3] = "Proteccion contra ataques cuerpo ";
	a_spells("init_spells", 33).f_info_2[3] = "a cuerpo (hechizo activo)";
	a_spells("init_spells", 33).f_weavable = 1;
	a_spells("init_spells", 34).f_name[2] = "Vergiftung Heilen";
	a_spells("init_spells", 34).f_name[1] = "Heal Poison";
	a_spells("init_spells", 34).f_name[3] = "Curar Veneno";
	a_spells("init_spells", 34).f_cost = 2;
	a_spells("init_spells", 34).f_level = 4;
	a_spells("init_spells", 34).f_duration = 0;
	a_spells("init_spells", 34).f_school = 51;
	a_spells("init_spells", 34).f_info_1[2] = "Reduziert die Dauer einer";
	a_spells("init_spells", 34).f_info_2[2] = "Vergiftung";
	a_spells("init_spells", 34).f_info_1[1] = "Reduces the duration of";
	a_spells("init_spells", 34).f_info_2[1] = "poison";
	a_spells("init_spells", 34).f_info_1[3] = "Reduce la duracion ";
	a_spells("init_spells", 34).f_info_2[3] = "del veneno";
	a_spells("init_spells", 172).f_name[2] = "Heile Krankheit";
	a_spells("init_spells", 172).f_name[1] = "Heal Disease";
	a_spells("init_spells", 172).f_name[3] = "Curar Enfermedad";
	a_spells("init_spells", 172).f_cost = 2;
	a_spells("init_spells", 172).f_level = 5;
	a_spells("init_spells", 172).f_duration = 0;
	a_spells("init_spells", 172).f_school = 51;
	a_spells("init_spells", 172).f_info_1[2] = "Heilt jegliche Krankheit des weissen";
	a_spells("init_spells", 172).f_info_2[2] = "Magiers";
	a_spells("init_spells", 172).f_info_1[1] = "Cures all diseases";
	a_spells("init_spells", 172).f_info_2[1] = "";
	a_spells("init_spells", 172).f_info_1[3] = "Cura todos los enfermedades";
	a_spells("init_spells", 172).f_info_2[3] = "";
	a_spells("init_spells", 130).f_name[2] = "Giftschutz";
	a_spells("init_spells", 130).f_name[1] = "Poison Protection";
	a_spells("init_spells", 130).f_name[3] = "Proteccion Veneno";
	a_spells("init_spells", 130).f_cost = 2;
	a_spells("init_spells", 130).f_level = 6;
	a_spells("init_spells", 130).f_duration = 4;
	a_spells("init_spells", 130).f_school = 51;
	a_spells("init_spells", 130).f_info_1[2] = "Sch\374tzt vor Vergiftung";
	a_spells("init_spells", 130).f_info_2[2] = "";
	a_spells("init_spells", 130).f_info_1[1] = "Protects the mage from";
	a_spells("init_spells", 130).f_info_2[1] = "poison";
	a_spells("init_spells", 130).f_info_1[3] = "Protege de veneno";
	a_spells("init_spells", 130).f_info_2[3] = "";
	a_spells("init_spells", 130).f_weavable = 1;
	a_spells("init_spells", 100).f_name[2] = "Andere Heilen";
	a_spells("init_spells", 100).f_name[1] = "Heal Others";
	a_spells("init_spells", 100).f_name[3] = "Curar Otros";
	a_spells("init_spells", 100).f_cost = 2;
	a_spells("init_spells", 100).f_level = 7;
	a_spells("init_spells", 100).f_duration = 0;
	a_spells("init_spells", 100).f_school = 51;
	a_spells("init_spells", 100).f_info_1[2] = "Heilt einen anderen";
	a_spells("init_spells", 100).f_info_2[2] = "Spieler";
	a_spells("init_spells", 100).f_info_1[1] = "Heals another";
	a_spells("init_spells", 100).f_info_2[1] = "player";
	a_spells("init_spells", 100).f_info_1[3] = "Cura otro";
	a_spells("init_spells", 100).f_info_2[3] = "jugador";
	a_spells("init_spells", 100).f_weavable = 1;
	a_spells("init_spells", 123).f_name[2] = "Sanktum Finden";
	a_spells("init_spells", 123).f_name[1] = "Find Sanctum";
	a_spells("init_spells", 123).f_name[3] = "Encontrar Santuario";
	a_spells("init_spells", 123).f_cost = 2;
	a_spells("init_spells", 123).f_level = 8;
	a_spells("init_spells", 123).f_duration = 0;
	a_spells("init_spells", 123).f_school = 51;
	a_spells("init_spells", 123).f_info_1[2] = "Zeigt eine Karte mit";
	a_spells("init_spells", 123).f_info_2[2] = "dem Sanktum!";
	a_spells("init_spells", 123).f_info_1[1] = "Shows a map with the";
	a_spells("init_spells", 123).f_info_2[1] = "Sanctum!";
	a_spells("init_spells", 123).f_info_1[3] = "Muestra un mapa con";
	a_spells("init_spells", 123).f_info_2[3] = "los Santuarios!";
	a_spells("init_spells", 77).f_name[2] = "Fl\374che Brechen";
	a_spells("init_spells", 77).f_name[1] = "Remove Curses";
	a_spells("init_spells", 77).f_name[3] = "Quitar Maldiciones";
	a_spells("init_spells", 77).f_cost = 12;
	a_spells("init_spells", 77).f_level = 9;
	a_spells("init_spells", 77).f_duration = 0;
	a_spells("init_spells", 77).f_school = 51;
	a_spells("init_spells", 77).f_info_1[2] = "Befreit den Magier von";
	a_spells("init_spells", 77).f_info_2[2] = "allen Fl\374chen";
	a_spells("init_spells", 77).f_info_1[1] = "Removes all curses from";
	a_spells("init_spells", 77).f_info_2[1] = "the magician";
	a_spells("init_spells", 77).f_info_1[3] = "Quita todas las maldiciones ";
	a_spells("init_spells", 77).f_info_2[3] = "del mago";
	a_spells("init_spells", 78).f_name[2] = "Allheilung";
	a_spells("init_spells", 78).f_name[1] = "True Healing";
	a_spells("init_spells", 78).f_name[3] = "Cura Verdadera";
	a_spells("init_spells", 78).f_cost = 7;
	a_spells("init_spells", 78).f_level = 10;
	a_spells("init_spells", 78).f_duration = 0;
	a_spells("init_spells", 78).f_school = 51;
	a_spells("init_spells", 78).f_info_1[2] = "Der Magier erh\344lt alle verlorenen";
	a_spells("init_spells", 78).f_info_2[2] = "Lebenspunkte zur\374ck";
	a_spells("init_spells", 78).f_info_1[1] = "The magician regains all";
	a_spells("init_spells", 78).f_info_2[1] = "lost Life Points";
	a_spells("init_spells", 78).f_info_1[3] = "El mago recupera totos ";
	a_spells("init_spells", 78).f_info_2[3] = "los Puntos de Vida";
	a_spells("init_spells", 98).f_name[2] = "Engel Beschw\366ren";
	a_spells("init_spells", 98).f_name[1] = "Summon Angel";
	a_spells("init_spells", 98).f_name[3] = "Conjurar Angelo";
	a_spells("init_spells", 98).f_cost = 30;
	a_spells("init_spells", 98).f_level = 11;
	a_spells("init_spells", 98).f_duration = 0;
	a_spells("init_spells", 98).f_school = 51;
	a_spells("init_spells", 98).f_summoning = 8;
	a_spells("init_spells", 98).f_info_1[2] = "Beschw\366rt einen strahlenden";
	a_spells("init_spells", 98).f_info_2[2] = "Engel (ben\366tigt Sanktum)";
	a_spells("init_spells", 98).f_info_1[1] = "Summons a radiant";
	a_spells("init_spells", 98).f_info_2[1] = "angelic being (needs sanctum)";
	a_spells("init_spells", 98).f_info_1[3] = "Conjura un brillante";
	a_spells("init_spells", 98).f_info_2[3] = "angelo (de un sanctuario)";
	a_spells("init_spells", 101).f_name[2] = "Andere Entgiften";
	a_spells("init_spells", 101).f_name[1] = "Cure Poison of Others";
	a_spells("init_spells", 101).f_name[3] = "Curar Veneno de Otros";
	a_spells("init_spells", 101).f_cost = 2;
	a_spells("init_spells", 101).f_level = 12;
	a_spells("init_spells", 101).f_duration = 0;
	a_spells("init_spells", 101).f_school = 51;
	a_spells("init_spells", 101).f_info_1[2] = "Entfernt vergiftung eines";
	a_spells("init_spells", 101).f_info_2[2] = "anderen Spielers";
	a_spells("init_spells", 101).f_info_1[1] = "Cures another player's";
	a_spells("init_spells", 101).f_info_2[1] = "poison";
	a_spells("init_spells", 101).f_info_1[3] = "Cura veneno de otro";
	a_spells("init_spells", 101).f_info_2[3] = "jugador";
	a_spells("init_spells", 107).f_name[2] = "Andere Entfluchen";
	a_spells("init_spells", 107).f_name[1] = "Break Curse of Others";
	a_spells("init_spells", 107).f_name[3] = "Curar Maldicion de Otros";
	a_spells("init_spells", 107).f_cost = 15;
	a_spells("init_spells", 107).f_level = 13;
	a_spells("init_spells", 107).f_duration = 0;
	a_spells("init_spells", 107).f_school = 51;
	a_spells("init_spells", 107).f_info_1[2] = "Entfernt Fluch eines";
	a_spells("init_spells", 107).f_info_2[2] = "anderen Spielers";
	a_spells("init_spells", 107).f_info_1[1] = "Removes another character's";
	a_spells("init_spells", 107).f_info_2[1] = "curse";
	a_spells("init_spells", 107).f_info_1[3] = "Remueve la maldicion de";
	a_spells("init_spells", 107).f_info_2[3] = "otro jugador";
	a_spells("init_spells", 32).f_name[2] = "Exorzismus";
	a_spells("init_spells", 32).f_name[1] = "Exorcism";
	a_spells("init_spells", 32).f_name[3] = "Exorcismo";
	a_spells("init_spells", 32).f_cost = 4;
	a_spells("init_spells", 32).f_level = 14;
	a_spells("init_spells", 32).f_duration = 0;
	a_spells("init_spells", 32).f_school = 51;
	a_spells("init_spells", 32).f_info_1[2] = "Zerst\366rt alle Wiederg\344nger";
	a_spells("init_spells", 32).f_info_2[2] = "in der Umgebung";
	a_spells("init_spells", 32).f_info_1[1] = "Destroys all revenants";
	a_spells("init_spells", 32).f_info_2[1] = "around the caster";
	a_spells("init_spells", 32).f_info_1[3] = "Destruye todos los ";
	a_spells("init_spells", 32).f_info_2[3] = "espectros proximos";
	a_spells("init_spells", 126).f_name[2] = "Wiederbelebung";
	a_spells("init_spells", 126).f_name[1] = "Resurrection";
	a_spells("init_spells", 126).f_name[3] = "Resureccion";
	a_spells("init_spells", 126).f_cost = 5;
	a_spells("init_spells", 126).f_level = 15;
	a_spells("init_spells", 126).f_duration = 0;
	a_spells("init_spells", 126).f_school = 51;
	a_spells("init_spells", 126).f_info_1[2] = "Belebt alle toten";
	a_spells("init_spells", 126).f_info_2[2] = "Spieler wieder! (Mit LP/2)";
	a_spells("init_spells", 126).f_info_1[1] = "Resurrects all dead";
	a_spells("init_spells", 126).f_info_2[1] = "players! (With LP/2)";
	a_spells("init_spells", 126).f_info_1[3] = "Resucita todos los jugadores";
	a_spells("init_spells", 126).f_info_2[3] = "muertos! (Con PdV/2)";
	a_spells("init_spells", 14).f_name[2] = "Lied der Reise";
	a_spells("init_spells", 14).f_name[1] = "Song of Travels";
	a_spells("init_spells", 14).f_name[3] = "Cancion de Viaje";
	a_spells("init_spells", 14).f_cost = 0;
	a_spells("init_spells", 14).f_level = 1;
	a_spells("init_spells", 14).f_duration = -1;
	a_spells("init_spells", 14).f_school = 60;
	a_spells("init_spells", 14).f_info_1[2] = "Erh\366ht die Zugweite des Barden um +1";
	a_spells("init_spells", 14).f_info_2[2] = "";
	a_spells("init_spells", 14).f_info_1[1] = "Increases the movement of the ";
	a_spells("init_spells", 14).f_info_2[1] = "bard by +1";
	a_spells("init_spells", 14).f_info_1[3] = "Incrementa el movimiento ";
	a_spells("init_spells", 14).f_info_2[3] = "del bardo en +1";
	a_spells("init_spells", 35).f_name[2] = "Lied des Kampfes";
	a_spells("init_spells", 35).f_name[1] = "Song of Battle";
	a_spells("init_spells", 35).f_name[3] = "Cancion de Batalla";
	a_spells("init_spells", 35).f_cost = 0;
	a_spells("init_spells", 35).f_level = 2;
	a_spells("init_spells", 35).f_duration = -1;
	a_spells("init_spells", 35).f_school = 60;
	a_spells("init_spells", 35).f_info_1[2] = "+1 auf Angriff und";
	a_spells("init_spells", 35).f_info_2[2] = "+1 auf Schaden im Nahkampf";
	a_spells("init_spells", 35).f_info_1[1] = "Attack +1 and Damage +1";
	a_spells("init_spells", 35).f_info_2[1] = "in melee combat";
	a_spells("init_spells", 35).f_info_1[3] = "+1 al Ataque y +1 al Dano en ";
	a_spells("init_spells", 35).f_info_2[3] = "combate cuerpo a cuerpo";
	a_spells("init_spells", 36).f_name[2] = "Lied der Hoffnung";
	a_spells("init_spells", 36).f_name[1] = "Song of Hope";
	a_spells("init_spells", 36).f_name[3] = "Cancion de Esperanza";
	a_spells("init_spells", 36).f_cost = 0;
	a_spells("init_spells", 36).f_level = 3;
	a_spells("init_spells", 36).f_duration = -1;
	a_spells("init_spells", 36).f_school = 60;
	a_spells("init_spells", 36).f_info_1[2] = "+1 auf Lichtradius";
	a_spells("init_spells", 36).f_info_2[2] = "";
	a_spells("init_spells", 36).f_info_1[1] = "+1 to sight radius";
	a_spells("init_spells", 36).f_info_2[1] = "";
	a_spells("init_spells", 36).f_info_1[3] = "+1 al radio de luz";
	a_spells("init_spells", 36).f_info_2[3] = "";
	a_spells("init_spells", 37).f_name[2] = "Lied der Einsamkeit";
	a_spells("init_spells", 37).f_name[1] = "Song of Loneliness";
	a_spells("init_spells", 37).f_name[3] = "Cancion de Soledad";
	a_spells("init_spells", 37).f_cost = 0;
	a_spells("init_spells", 37).f_level = 4;
	a_spells("init_spells", 37).f_duration = -1;
	a_spells("init_spells", 37).f_school = 60;
	a_spells("init_spells", 37).f_info_1[2] = "Sch\374tzt gegen Hinterhalte";
	a_spells("init_spells", 37).f_info_2[2] = "";
	a_spells("init_spells", 37).f_info_1[1] = "Wards against ambushes";
	a_spells("init_spells", 37).f_info_2[1] = "";
	a_spells("init_spells", 37).f_info_1[3] = "Proteccion contra emboscadas";
	a_spells("init_spells", 37).f_info_2[3] = "";
	a_spells("init_spells", 38).f_name[2] = "Lied des Todes";
	a_spells("init_spells", 38).f_name[1] = "Song of Death";
	a_spells("init_spells", 38).f_name[3] = "Cancion de Muerte";
	a_spells("init_spells", 38).f_cost = 0;
	a_spells("init_spells", 38).f_level = 5;
	a_spells("init_spells", 38).f_duration = -1;
	a_spells("init_spells", 38).f_school = 60;
	a_spells("init_spells", 38).f_info_1[2] = "Hindert Skelette daran";
	a_spells("init_spells", 38).f_info_2[2] = "sich zu erheben";
	a_spells("init_spells", 38).f_info_1[1] = "Stops skeletons from";
	a_spells("init_spells", 38).f_info_2[1] = "changing into undead";
	a_spells("init_spells", 38).f_info_1[3] = "Priva a los esqueletos a convertirse ";
	a_spells("init_spells", 38).f_info_2[3] = "en no-muertos";
	a_spells("init_spells", 79).f_name[2] = "Lied der Magie";
	a_spells("init_spells", 79).f_name[1] = "Song of Magic";
	a_spells("init_spells", 79).f_name[3] = "Cancion de Magia";
	a_spells("init_spells", 79).f_cost = 0;
	a_spells("init_spells", 79).f_level = 6;
	a_spells("init_spells", 79).f_duration = -1;
	a_spells("init_spells", 79).f_school = 60;
	a_spells("init_spells", 79).f_info_1[2] = "Sch\374tzt den Barden gegen";
	a_spells("init_spells", 79).f_info_2[2] = "Runenfallen";
	a_spells("init_spells", 79).f_info_1[1] = "Wards against rune traps";
	a_spells("init_spells", 79).f_info_2[1] = "";
	a_spells("init_spells", 79).f_info_1[3] = "Proteccion frente a ";
	a_spells("init_spells", 79).f_info_2[3] = "trampas de runa";
	a_spells("init_spells", 80).f_name[2] = "Lied des Lebens";
	a_spells("init_spells", 80).f_name[1] = "Song of Life";
	a_spells("init_spells", 80).f_name[3] = "Cancion de Vida";
	a_spells("init_spells", 80).f_cost = 0;
	a_spells("init_spells", 80).f_level = 7;
	a_spells("init_spells", 80).f_duration = -1;
	a_spells("init_spells", 80).f_school = 60;
	a_spells("init_spells", 80).f_info_1[2] = "Der Barde gewinnt pro Runde einen";
	a_spells("init_spells", 80).f_info_2[2] = "verlorenen Lebenspunkt zurck";
	a_spells("init_spells", 80).f_info_1[1] = "The bard regains one lost";
	a_spells("init_spells", 80).f_info_2[1] = "Life Point per round";
	a_spells("init_spells", 80).f_info_1[3] = "El bardo gana un Punto ";
	a_spells("init_spells", 80).f_info_2[3] = "de Vida por turno";
	a_spells("init_spells", 121).f_name[2] = "Geistertanz";
	a_spells("init_spells", 121).f_name[1] = "Dance of Ghosts";
	a_spells("init_spells", 121).f_name[3] = "Danza de Fantasmas";
	a_spells("init_spells", 121).f_cost = 0;
	a_spells("init_spells", 121).f_level = 8;
	a_spells("init_spells", 121).f_duration = -1;
	a_spells("init_spells", 121).f_school = 60;
	a_spells("init_spells", 121).f_info_1[2] = "Der Barde kann";
	a_spells("init_spells", 121).f_info_2[2] = "Unsichtbares sehen!";
	a_spells("init_spells", 121).f_info_1[1] = "The bard can see the";
	a_spells("init_spells", 121).f_info_2[1] = "invisible!";
	a_spells("init_spells", 121).f_info_1[3] = "El cantante puede ver";
	a_spells("init_spells", 121).f_info_2[3] = "lo invisible!";
	a_spells("init_spells", 143).f_name[2] = "Lied des Schutzes";
	a_spells("init_spells", 143).f_name[1] = "Song of Protection";
	a_spells("init_spells", 143).f_name[3] = "Cancion de Protecion";
	a_spells("init_spells", 143).f_cost = 0;
	a_spells("init_spells", 143).f_level = 9;
	a_spells("init_spells", 143).f_duration = -1;
	a_spells("init_spells", 143).f_school = 60;
	a_spells("init_spells", 143).f_info_1[2] = "Verhindert 3 Punkte Schaden";
	a_spells("init_spells", 143).f_info_2[2] = "jeder Monsterattacke";
	a_spells("init_spells", 143).f_info_1[1] = "Prevents 3 points of damage";
	a_spells("init_spells", 143).f_info_2[1] = "each monster attack";
	a_spells("init_spells", 143).f_info_1[3] = "Previene 3 puntos dano de cada";
	a_spells("init_spells", 143).f_info_2[3] = "ataque de un monstro";
	a_spells("init_spells", 183).f_name[2] = "Lied des Reichtums";
	a_spells("init_spells", 183).f_name[1] = "Song of Wealth";
	a_spells("init_spells", 183).f_name[3] = "Cnacion de la Riqueza";
	a_spells("init_spells", 183).f_cost = 0;
	a_spells("init_spells", 183).f_level = 11;
	a_spells("init_spells", 183).f_duration = -1;
	a_spells("init_spells", 183).f_school = 60;
	a_spells("init_spells", 183).f_info_1[2] = "Der Barde bekommt ein";
	a_spells("init_spells", 183).f_info_2[2] = "Goldst\374ck pro Runde";
	a_spells("init_spells", 183).f_info_1[1] = "The bard gains one";
	a_spells("init_spells", 183).f_info_2[1] = "gold coin each turn";
	a_spells("init_spells", 183).f_info_1[3] = "El bardo recibe";
	a_spells("init_spells", 183).f_info_2[3] = "un oro por turno";
	a_spells("init_spells", 165).f_name[2] = "Lied des Schlafes";
	a_spells("init_spells", 165).f_name[1] = "Song of Sleep";
	a_spells("init_spells", 165).f_name[3] = "Cancion de Dormir";
	a_spells("init_spells", 165).f_cost = 0;
	a_spells("init_spells", 165).f_level = 13;
	a_spells("init_spells", 165).f_duration = -1;
	a_spells("init_spells", 165).f_school = 60;
	a_spells("init_spells", 165).f_info_1[2] = "L\344sst manche monster die ihn h\366ren";
	a_spells("init_spells", 165).f_info_2[2] = "einschlafen";
	a_spells("init_spells", 165).f_info_1[1] = "Puts some monsters that hear it to";
	a_spells("init_spells", 165).f_info_2[1] = "sleep";
	a_spells("init_spells", 165).f_info_1[3] = "Hace dormir a algunos monstruos que";
	a_spells("init_spells", 165).f_info_2[3] = "la oian";
	a_spells("init_spells", 166).f_name[2] = "Lied des Selbstmords";
	a_spells("init_spells", 166).f_name[1] = "Song of Suicide";
	a_spells("init_spells", 166).f_name[3] = "Cancion del Suicidio";
	a_spells("init_spells", 166).f_cost = 0;
	a_spells("init_spells", 166).f_level = 15;
	a_spells("init_spells", 166).f_duration = -1;
	a_spells("init_spells", 166).f_school = 60;
	a_spells("init_spells", 166).f_info_1[2] = "T\366tet einige monster die ihn";
	a_spells("init_spells", 166).f_info_2[2] = "h\366ren";
	a_spells("init_spells", 166).f_info_1[1] = "Kills some monsters that hear";
	a_spells("init_spells", 166).f_info_2[1] = "it";
	a_spells("init_spells", 166).f_info_1[3] = "Destruye algunos monstruos";
	a_spells("init_spells", 166).f_info_2[3] = "que la oian";
	a_spells("init_spells", 39).f_name[2] = "Winde Rufen";
	a_spells("init_spells", 39).f_name[1] = "Call Winds";
	a_spells("init_spells", 39).f_name[3] = "Llamar a los Vientos";
	a_spells("init_spells", 39).f_cost = 1;
	a_spells("init_spells", 39).f_level = 1;
	a_spells("init_spells", 39).f_duration = 0;
	a_spells("init_spells", 39).f_school = 56;
	a_spells("init_spells", 39).f_info_1[2] = "Ruft starke Winde herbei";
	a_spells("init_spells", 39).f_info_2[2] = "die fliegende Wesen attackieren";
	a_spells("init_spells", 39).f_info_1[1] = "Summons strong winds";
	a_spells("init_spells", 39).f_info_2[1] = "that damage flying monsters";
	a_spells("init_spells", 39).f_info_1[3] = "Crea fuertes vientos que danan ";
	a_spells("init_spells", 39).f_info_2[3] = "los monstruos voladores";
	a_spells("init_spells", 39).f_weavable = 1;
	a_spells("init_spells", 15).f_name[2] = "Federfall";
	a_spells("init_spells", 15).f_name[1] = "Featherfall";
	a_spells("init_spells", 15).f_name[3] = "Peso Pluma";
	a_spells("init_spells", 15).f_cost = 2;
	a_spells("init_spells", 15).f_level = 2;
	a_spells("init_spells", 15).f_duration = 0;
	a_spells("init_spells", 15).f_school = 56;
	a_spells("init_spells", 15).f_info_1[2] = "L\344sst den Magier einen Schacht ";
	a_spells("init_spells", 15).f_info_2[2] = "hinabschweben";
	a_spells("init_spells", 15).f_info_1[1] = "Lets the magician float down a ";
	a_spells("init_spells", 15).f_info_2[1] = "shaft or pit";
	a_spells("init_spells", 15).f_info_1[3] = "Permita al mago descender ";
	a_spells("init_spells", 15).f_info_2[3] = "una chimenea";
	a_spells("init_spells", 40).f_name[2] = "R\374ckenwind";
	a_spells("init_spells", 40).f_name[1] = "Helpful Winds";
	a_spells("init_spells", 40).f_name[3] = "Vientos amigos";
	a_spells("init_spells", 40).f_cost = 2;
	a_spells("init_spells", 40).f_level = 3;
	a_spells("init_spells", 40).f_duration = 5;
	a_spells("init_spells", 40).f_school = 56;
	a_spells("init_spells", 40).f_info_1[2] = "+3 Zugweite";
	a_spells("init_spells", 40).f_info_2[2] = "(aktiver Zauber)";
	a_spells("init_spells", 40).f_info_1[1] = "+3 Movement";
	a_spells("init_spells", 40).f_info_2[1] = "(active spell)";
	a_spells("init_spells", 40).f_info_1[3] = "+3 Movimiento";
	a_spells("init_spells", 40).f_info_2[3] = "(hechizo activo)";
	a_spells("init_spells", 40).f_weavable = 1;
	a_spells("init_spells", 46).f_name[2] = "Schutz vor Geschossen";
	a_spells("init_spells", 46).f_name[1] = "Ward Against Missiles";
	a_spells("init_spells", 46).f_name[3] = "Proteccion Contra Misiles";
	a_spells("init_spells", 46).f_cost = 2;
	a_spells("init_spells", 46).f_level = 4;
	a_spells("init_spells", 46).f_duration = 5;
	a_spells("init_spells", 46).f_school = 56;
	a_spells("init_spells", 46).f_info_1[2] = "Erh\366ht den Schutz des Magiers";
	a_spells("init_spells", 46).f_info_2[2] = "gegen Geschosse (aktiver Zauber)";
	a_spells("init_spells", 46).f_info_1[1] = "Increases the protection";
	a_spells("init_spells", 46).f_info_2[1] = "against arrows (active spell)";
	a_spells("init_spells", 46).f_info_1[3] = "Incrementa la proteccion contra ";
	a_spells("init_spells", 46).f_info_2[3] = "flechas (hechizo activo)";
	a_spells("init_spells", 46).f_weavable = 1;
	a_spells("init_spells", 48).f_name[2] = "Fliegen";
	a_spells("init_spells", 48).f_name[1] = "Fly";
	a_spells("init_spells", 48).f_name[3] = "Volar";
	a_spells("init_spells", 48).f_cost = 3;
	a_spells("init_spells", 48).f_level = 5;
	a_spells("init_spells", 48).f_duration = 5;
	a_spells("init_spells", 48).f_school = 56;
	a_spells("init_spells", 48).f_info_1[2] = "Der Zauberer schwebt \374ber Wasser";
	a_spells("init_spells", 48).f_info_2[2] = "und Fallgruben hinweg (Aktiver Zauber)";
	a_spells("init_spells", 48).f_info_1[1] = "The magician floats above";
	a_spells("init_spells", 48).f_info_2[1] = "water and pit traps (active spell)";
	a_spells("init_spells", 48).f_info_1[3] = "El mago vuela sobre agua y ";
	a_spells("init_spells", 48).f_info_2[3] = "trampas (hechizo activo)";
	a_spells("init_spells", 48).f_weavable = 1;
	a_spells("init_spells", 145).f_name[2] = "Schock";
	a_spells("init_spells", 145).f_name[1] = "Shocking Grasp";
	a_spells("init_spells", 145).f_name[3] = "Shock";
	a_spells("init_spells", 145).f_cost = 3;
	a_spells("init_spells", 145).f_level = 6;
	a_spells("init_spells", 145).f_duration = 2;
	a_spells("init_spells", 145).f_school = 56;
	a_spells("init_spells", 145).f_info_1[2] = "Die Zauberkraft des Magiers";
	a_spells("init_spells", 145).f_info_2[2] = "addiert sich zu Angriff und Schaden";
	a_spells("init_spells", 145).f_info_1[1] = "The Spell Power of the mage gets";
	a_spells("init_spells", 145).f_info_2[1] = "added to Attack and Damage";
	a_spells("init_spells", 145).f_info_1[3] = "El Poder de Hechizos del mago";
	a_spells("init_spells", 145).f_info_2[3] = "aumeta Ataque y Dano";
	a_spells("init_spells", 145).f_weavable = 1;
	a_spells("init_spells", 108).f_name[2] = "Orkan";
	a_spells("init_spells", 108).f_name[1] = "Hurricane";
	a_spells("init_spells", 108).f_name[3] = "Huracan";
	a_spells("init_spells", 108).f_cost = 1;
	a_spells("init_spells", 108).f_level = 7;
	a_spells("init_spells", 108).f_duration = 0;
	a_spells("init_spells", 108).f_school = 56;
	a_spells("init_spells", 108).f_info_1[2] = "Ruft einen Orkan herbei der ";
	a_spells("init_spells", 108).f_info_2[2] = "ein nahes Monster attackiert";
	a_spells("init_spells", 108).f_info_1[1] = "Summons a hurricane to ";
	a_spells("init_spells", 108).f_info_2[1] = "attack a nearby monster";
	a_spells("init_spells", 108).f_info_1[3] = "Crea un huracan para ";
	a_spells("init_spells", 108).f_info_2[3] = "atacar un monstruo cercano";
	a_spells("init_spells", 108).f_weavable = 1;
	a_spells("init_spells", 136).f_name[2] = "Wegblasen";
	a_spells("init_spells", 136).f_name[1] = "Blow Away";
	a_spells("init_spells", 136).f_name[3] = "Refaga de Viento";
	a_spells("init_spells", 136).f_cost = 3;
	a_spells("init_spells", 136).f_level = 10;
	a_spells("init_spells", 136).f_duration = 0;
	a_spells("init_spells", 136).f_school = 56;
	a_spells("init_spells", 136).f_info_1[2] = "Bl\344st ein Monster auf ein";
	a_spells("init_spells", 136).f_info_2[2] = "anderes Feld im Level";
	a_spells("init_spells", 136).f_info_1[1] = "Blows a monster to another";
	a_spells("init_spells", 136).f_info_2[1] = "field in the level";
	a_spells("init_spells", 136).f_info_1[3] = "Mueve un monstro a otro";
	a_spells("init_spells", 136).f_info_2[3] = "campo en el nivel";
	a_spells("init_spells", 131).f_name[2] = "Vakuum";
	a_spells("init_spells", 131).f_name[1] = "Vacuum";
	a_spells("init_spells", 131).f_name[3] = "Vacuum";
	a_spells("init_spells", 131).f_cost = 5;
	a_spells("init_spells", 131).f_level = 11;
	a_spells("init_spells", 131).f_duration = 0;
	a_spells("init_spells", 131).f_school = 56;
	a_spells("init_spells", 131).f_info_1[2] = "Entzieht einem Gegner";
	a_spells("init_spells", 131).f_info_2[2] = "jegliche Luft";
	a_spells("init_spells", 131).f_info_1[1] = "Sucks all air out of";
	a_spells("init_spells", 131).f_info_2[1] = "one enemy";
	a_spells("init_spells", 131).f_info_1[3] = "Roba todo el aire de";
	a_spells("init_spells", 131).f_info_2[3] = "un enemigo";
	a_spells("init_spells", 141).f_name[2] = "Windmeister";
	a_spells("init_spells", 141).f_name[1] = "Wind Master";
	a_spells("init_spells", 141).f_name[3] = "Maestro de Vientos";
	a_spells("init_spells", 141).f_cost = 4;
	a_spells("init_spells", 141).f_level = 12;
	a_spells("init_spells", 141).f_duration = 4;
	a_spells("init_spells", 141).f_school = 56;
	a_spells("init_spells", 141).f_info_1[2] = "Gibt allen Spielern";
	a_spells("init_spells", 141).f_info_2[2] = "+2 Zugweite";
	a_spells("init_spells", 141).f_info_1[1] = "Gives all players";
	a_spells("init_spells", 141).f_info_2[1] = "+2 Movement";
	a_spells("init_spells", 141).f_info_1[3] = "Da todos los jugadores";
	a_spells("init_spells", 141).f_info_2[3] = "+2 Movimiento";
	a_spells("init_spells", 141).f_weavable = 1;
	a_spells("init_spells", 144).f_name[2] = "Dimensionentausch";
	a_spells("init_spells", 144).f_name[1] = "Dimensional Swap";
	a_spells("init_spells", 144).f_name[3] = "Cambiar Dimensiones";
	a_spells("init_spells", 144).f_cost = 3;
	a_spells("init_spells", 144).f_level = 14;
	a_spells("init_spells", 144).f_duration = 0;
	a_spells("init_spells", 144).f_school = 56;
	a_spells("init_spells", 144).f_info_1[2] = "Der Magier tauscht den Platz";
	a_spells("init_spells", 144).f_info_2[2] = "mit einem Monster";
	a_spells("init_spells", 144).f_info_1[1] = "The mage switches places";
	a_spells("init_spells", 144).f_info_2[1] = "with a monster";
	a_spells("init_spells", 144).f_info_1[3] = "El mago cambia campos con";
	a_spells("init_spells", 144).f_info_2[3] = "un monstro";
	a_spells("init_spells", 112).f_name[2] = "Desintegration";
	a_spells("init_spells", 112).f_name[1] = "Disintegration";
	a_spells("init_spells", 112).f_name[3] = "Desintegracion";
	a_spells("init_spells", 112).f_cost = 5;
	a_spells("init_spells", 112).f_level = 15;
	a_spells("init_spells", 112).f_duration = 0;
	a_spells("init_spells", 112).f_school = 56;
	a_spells("init_spells", 112).f_info_1[2] = "L\366st ein Feld auf";
	a_spells("init_spells", 112).f_info_2[2] = "";
	a_spells("init_spells", 112).f_info_1[1] = "Destroys one field";
	a_spells("init_spells", 112).f_info_2[1] = "";
	a_spells("init_spells", 112).f_info_1[3] = "Limpia una zona";
	a_spells("init_spells", 112).f_info_2[3] = "";
	a_spells("init_spells", 127).f_name[2] = "Schlaf";
	a_spells("init_spells", 127).f_name[1] = "Sleep";
	a_spells("init_spells", 127).f_name[3] = "Dormir";
	a_spells("init_spells", 127).f_cost = 1;
	a_spells("init_spells", 127).f_level = 1;
	a_spells("init_spells", 127).f_duration = 0;
	a_spells("init_spells", 127).f_school = 49;
	a_spells("init_spells", 127).f_info_1[2] = "Versetzt ein Monster in";
	a_spells("init_spells", 127).f_info_2[2] = "schlafenden Zustand";
	a_spells("init_spells", 127).f_info_1[1] = "Puts a monster to";
	a_spells("init_spells", 127).f_info_2[1] = "sleep";
	a_spells("init_spells", 127).f_info_1[3] = "Hace dormir a un";
	a_spells("init_spells", 127).f_info_2[3] = "montruo";
	a_spells("init_spells", 41).f_name[2] = "Irrlicht";
	a_spells("init_spells", 41).f_name[1] = "Will-of-the-Whisp";
	a_spells("init_spells", 41).f_name[3] = "Voluntad de la Luciarnaga";
	a_spells("init_spells", 41).f_cost = 1;
	a_spells("init_spells", 41).f_level = 2;
	a_spells("init_spells", 41).f_duration = 4;
	a_spells("init_spells", 41).f_school = 49;
	a_spells("init_spells", 41).f_info_1[2] = "Beschw\366rt ein Irrlicht das";
	a_spells("init_spells", 41).f_info_2[2] = "Licht spendet (Akiver Zauber)";
	a_spells("init_spells", 41).f_info_1[1] = "Summons a Will-of-the-Whisp";
	a_spells("init_spells", 41).f_info_2[1] = "that gives light (active spell)";
	a_spells("init_spells", 41).f_info_1[3] = "Crea una Luciarnaga que ";
	a_spells("init_spells", 41).f_info_2[3] = "ilumina (hechizo activo)";
	a_spells("init_spells", 41).f_weavable = 1;
	a_spells("init_spells", 88).f_name[2] = "Vogelgestalt";
	a_spells("init_spells", 88).f_name[1] = "Bird Shape";
	a_spells("init_spells", 88).f_name[3] = "Cuerpo de Pajaro";
	a_spells("init_spells", 88).f_cost = 1;
	a_spells("init_spells", 88).f_level = 3;
	a_spells("init_spells", 88).f_duration = 5;
	a_spells("init_spells", 88).f_school = 49;
	a_spells("init_spells", 88).f_info_1[2] = "Verwandelt den Magier in";
	a_spells("init_spells", 88).f_info_2[2] = "einen Vogel (aktiver Zauber)";
	a_spells("init_spells", 88).f_info_1[1] = "Turns the magician into a";
	a_spells("init_spells", 88).f_info_2[1] = "bird (active spell)";
	a_spells("init_spells", 88).f_info_1[3] = "Transforma el mago en un";
	a_spells("init_spells", 88).f_info_2[3] = "pajaro (hechizo activo)";
	a_spells("init_spells", 88).f_weavable = 1;
	a_spells("init_spells", 88).f_shapechanging = 1;
	a_spells("init_spells", 26).f_name[2] = "Fallen Sp\374ren";
	a_spells("init_spells", 26).f_name[1] = "Sense Traps";
	a_spells("init_spells", 26).f_name[3] = "Sentir Trampas";
	a_spells("init_spells", 26).f_cost = 2;
	a_spells("init_spells", 26).f_level = 4;
	a_spells("init_spells", 26).f_duration = 10;
	a_spells("init_spells", 26).f_school = 49;
	a_spells("init_spells", 26).f_info_1[2] = "Erh\366ht die Chance eine";
	a_spells("init_spells", 26).f_info_2[2] = "Falle zu entdecken";
	a_spells("init_spells", 26).f_info_1[1] = "Increases the chance";
	a_spells("init_spells", 26).f_info_2[1] = "to spot a trap";
	a_spells("init_spells", 26).f_info_1[3] = "Incrementa las posibilidades ";
	a_spells("init_spells", 26).f_info_2[3] = "de detectar una trampa";
	a_spells("init_spells", 26).f_weavable = 1;
	a_spells("init_spells", 109).f_name[2] = "Unsichtbares sehen";
	a_spells("init_spells", 109).f_name[1] = "View Invisible";
	a_spells("init_spells", 109).f_name[3] = "Ver el Invisible";
	a_spells("init_spells", 109).f_cost = 1;
	a_spells("init_spells", 109).f_level = 5;
	a_spells("init_spells", 109).f_duration = 5;
	a_spells("init_spells", 109).f_school = 49;
	a_spells("init_spells", 109).f_info_1[2] = "Erm\366glicht dem Magier alles";
	a_spells("init_spells", 109).f_info_2[2] = "Unsichtbare zu sehen";
	a_spells("init_spells", 109).f_info_1[1] = "Reveals all invisible";
	a_spells("init_spells", 109).f_info_2[1] = "creatures to the magician";
	a_spells("init_spells", 109).f_info_1[3] = "El mago puede ver todo lo que";
	a_spells("init_spells", 109).f_info_2[3] = "es invisible";
	a_spells("init_spells", 109).f_weavable = 1;
	a_spells("init_spells", 42).f_name[2] = "Vergolden";
	a_spells("init_spells", 42).f_name[1] = "Midas Touch";
	a_spells("init_spells", 42).f_name[3] = "Convertir en Oro";
	a_spells("init_spells", 42).f_cost = 3;
	a_spells("init_spells", 42).f_level = 6;
	a_spells("init_spells", 42).f_duration = 0;
	a_spells("init_spells", 42).f_school = 49;
	a_spells("init_spells", 42).f_info_1[2] = "Verwandelt einen";
	a_spells("init_spells", 42).f_info_2[2] = "Gegenstand in Goldm\374nzen";
	a_spells("init_spells", 42).f_info_1[1] = "Turns an item into";
	a_spells("init_spells", 42).f_info_2[1] = "gold coins";
	a_spells("init_spells", 42).f_info_1[3] = "Convierte un objeto en ";
	a_spells("init_spells", 42).f_info_2[3] = "monedas de oro";
	a_spells("init_spells", 102).f_name[2] = "T\344uschung";
	a_spells("init_spells", 102).f_name[1] = "Illusion";
	a_spells("init_spells", 102).f_name[3] = "Illucion";
	a_spells("init_spells", 102).f_cost = 2;
	a_spells("init_spells", 102).f_level = 7;
	a_spells("init_spells", 102).f_duration = 4;
	a_spells("init_spells", 102).f_school = 49;
	a_spells("init_spells", 102).f_info_1[2] = "Monster treffen nur noch";
	a_spells("init_spells", 102).f_info_2[2] = "mit 50%";
	a_spells("init_spells", 102).f_info_1[1] = "Monsters hit you only";
	a_spells("init_spells", 102).f_info_2[1] = "half of the time";
	a_spells("init_spells", 102).f_info_1[3] = "Monstrues te alcanzan";
	a_spells("init_spells", 102).f_info_2[3] = "con 50% de las posibilidades";
	a_spells("init_spells", 102).f_weavable = 1;
	a_spells("init_spells", 43).f_name[2] = "Verschwinden";
	a_spells("init_spells", 43).f_name[1] = "Vanish";
	a_spells("init_spells", 43).f_name[3] = "Desvanecerse";
	a_spells("init_spells", 43).f_cost = 8;
	a_spells("init_spells", 43).f_level = 8;
	a_spells("init_spells", 43).f_duration = 0;
	a_spells("init_spells", 43).f_school = 49;
	a_spells("init_spells", 43).f_info_1[2] = "Der Magier verschwindet und";
	a_spells("init_spells", 43).f_info_2[2] = "taucht an einem anderen Ort auf";
	a_spells("init_spells", 43).f_info_1[1] = "The magician vanishes and";
	a_spells("init_spells", 43).f_info_2[1] = "appears in another place";
	a_spells("init_spells", 43).f_info_1[3] = "El mago se desvanece y ";
	a_spells("init_spells", 43).f_info_2[3] = "aparece en otro lugar";
	a_spells("init_spells", 103).f_name[2] = "Doppelg\344nger";
	a_spells("init_spells", 103).f_name[1] = "Doppelganger";
	a_spells("init_spells", 103).f_name[3] = "Gemelo";
	a_spells("init_spells", 103).f_cost = 12;
	a_spells("init_spells", 103).f_level = 9;
	a_spells("init_spells", 103).f_duration = 0;
	a_spells("init_spells", 103).f_school = 49;
	a_spells("init_spells", 103).f_info_1[2] = "Erschafft eine Kopie";
	a_spells("init_spells", 103).f_info_2[2] = "des Magiers auf dem Nexus";
	a_spells("init_spells", 103).f_info_1[1] = "Summons a copy of the";
	a_spells("init_spells", 103).f_info_2[1] = "magician in the Nexus";
	a_spells("init_spells", 103).f_info_1[3] = "Conjura una copia del";
	a_spells("init_spells", 103).f_info_2[3] = "mago en el Nexo";
	a_spells("init_spells", 110).f_name[2] = "Unsichtbarkeit";
	a_spells("init_spells", 110).f_name[1] = "Invisibility";
	a_spells("init_spells", 110).f_name[3] = "Invisibilidad";
	a_spells("init_spells", 110).f_cost = 2;
	a_spells("init_spells", 110).f_level = 10;
	a_spells("init_spells", 110).f_duration = 5;
	a_spells("init_spells", 110).f_school = 49;
	a_spells("init_spells", 110).f_info_1[2] = "Verhindert das Monster den";
	a_spells("init_spells", 110).f_info_2[2] = "Magier sehen";
	a_spells("init_spells", 110).f_info_1[1] = "Prevents monsters from seeing";
	a_spells("init_spells", 110).f_info_2[1] = "the magician";
	a_spells("init_spells", 110).f_info_1[3] = "Preventa que los monstuos";
	a_spells("init_spells", 110).f_info_2[3] = "miran el mago";
	a_spells("init_spells", 110).f_weavable = 1;
	a_spells("init_spells", 137).f_name[2] = "Blenden";
	a_spells("init_spells", 137).f_name[1] = "Blind";
	a_spells("init_spells", 137).f_name[3] = "Cegar";
	a_spells("init_spells", 137).f_cost = 2;
	a_spells("init_spells", 137).f_level = 11;
	a_spells("init_spells", 137).f_duration = 4;
	a_spells("init_spells", 137).f_school = 49;
	a_spells("init_spells", 137).f_info_1[2] = "Macht ein Monster blind";
	a_spells("init_spells", 137).f_info_2[2] = "(Trifft schlechter)";
	a_spells("init_spells", 137).f_info_1[1] = "Blinds a monster";
	a_spells("init_spells", 137).f_info_2[1] = "(lowers the chance of hitting)";
	a_spells("init_spells", 137).f_info_1[3] = "Deja ciego al monstro";
	a_spells("init_spells", 137).f_info_2[3] = "(alcanza peor en el combate)";
	a_spells("init_spells", 137).f_weavable = 1;
	a_spells("init_spells", 58).f_name[2] = "Teleport";
	a_spells("init_spells", 58).f_name[1] = "Teleport";
	a_spells("init_spells", 58).f_name[3] = "Teletransporte";
	a_spells("init_spells", 58).f_cost = 12;
	a_spells("init_spells", 58).f_level = 12;
	a_spells("init_spells", 58).f_duration = 0;
	a_spells("init_spells", 58).f_school = 49;
	a_spells("init_spells", 58).f_info_1[2] = "Versetzt den Magier";
	a_spells("init_spells", 58).f_info_2[2] = "an einen anderen Ort";
	a_spells("init_spells", 58).f_info_1[1] = "Moves the magician";
	a_spells("init_spells", 58).f_info_2[1] = "to another place";
	a_spells("init_spells", 58).f_info_1[3] = "Mueve el mago a ";
	a_spells("init_spells", 58).f_info_2[3] = "otro lugar";
	a_spells("init_spells", 138).f_name[2] = "Anker erschaffen";
	a_spells("init_spells", 138).f_name[1] = "Create Anchor";
	a_spells("init_spells", 138).f_name[3] = "Crear Ancla";
	a_spells("init_spells", 138).f_cost = 15;
	a_spells("init_spells", 138).f_level = 14;
	a_spells("init_spells", 138).f_duration = 0;
	a_spells("init_spells", 138).f_school = 49;
	a_spells("init_spells", 138).f_info_1[2] = "Erschafft einen Ankerpunkt";
	a_spells("init_spells", 138).f_info_2[2] = "f\374r Anker Teleportation";
	a_spells("init_spells", 138).f_info_1[1] = "Creates an anchor point";
	a_spells("init_spells", 138).f_info_2[1] = "for anchor teleport";
	a_spells("init_spells", 138).f_info_1[3] = "Crea an punto de ancla";
	a_spells("init_spells", 138).f_info_2[3] = "para ancla teleportacion";
	a_spells("init_spells", 139).f_name[2] = "Anker Teleportation";
	a_spells("init_spells", 139).f_name[1] = "Anchor Teleport";
	a_spells("init_spells", 139).f_name[3] = "Teleportacion a Ancla";
	a_spells("init_spells", 139).f_cost = 5;
	a_spells("init_spells", 139).f_level = 15;
	a_spells("init_spells", 139).f_duration = 0;
	a_spells("init_spells", 139).f_school = 49;
	a_spells("init_spells", 139).f_info_1[2] = "Teleportiert den Magier";
	a_spells("init_spells", 139).f_info_2[2] = "zum Ankerpunkt";
	a_spells("init_spells", 139).f_info_1[1] = "Teleports the magician";
	a_spells("init_spells", 139).f_info_2[1] = "to the anchor point";
	a_spells("init_spells", 139).f_info_1[3] = "Teleporta al mago al";
	a_spells("init_spells", 139).f_info_2[3] = "punto de ancla";
	a_spells("init_spells", 173).f_name[2] = "Chaos";
	a_spells("init_spells", 173).f_name[1] = "Chaos";
	a_spells("init_spells", 173).f_name[3] = "Chaos";
	a_spells("init_spells", 173).f_cost = 1;
	a_spells("init_spells", 173).f_level = 1;
	a_spells("init_spells", 173).f_duration = 0;
	a_spells("init_spells", 173).f_school = 59;
	a_spells("init_spells", 173).f_info_1[2] = "Zaubert einen zuf\344lligen Level 1 Spruch";
	a_spells("init_spells", 173).f_info_2[2] = "";
	a_spells("init_spells", 173).f_info_1[1] = "Casts a random level 1 spell";
	a_spells("init_spells", 173).f_info_2[1] = "";
	a_spells("init_spells", 173).f_info_1[3] = "Hechiza un hechizo de circulo 1 de suerte";
	a_spells("init_spells", 173).f_info_2[3] = "";
	a_spells("init_spells", 44).f_name[2] = "Terminus";
	a_spells("init_spells", 44).f_name[1] = "Dispell Magic";
	a_spells("init_spells", 44).f_name[3] = "Terminar";
	a_spells("init_spells", 44).f_cost = 0;
	a_spells("init_spells", 44).f_level = 2;
	a_spells("init_spells", 44).f_duration = 0;
	a_spells("init_spells", 44).f_school = 59;
	a_spells("init_spells", 44).f_info_1[2] = "Beendet alle aktiven Zauber. Der Magier";
	a_spells("init_spells", 44).f_info_2[2] = "erh\344lt 1 Punkt Mana pro Zauber zur\374ck";
	a_spells("init_spells", 44).f_info_1[1] = "Terminates all active spells. The";
	a_spells("init_spells", 44).f_info_2[1] = "magician regains 1 Mana Point per spell";
	a_spells("init_spells", 44).f_info_1[3] = "Finaliza todos los hechizos activos. El";
	a_spells("init_spells", 44).f_info_2[3] = "mago gana 1 Punto de Mana por hechizo.";
	a_spells("init_spells", 91).f_name[2] = "Homunkulus beschw\366ren";
	a_spells("init_spells", 91).f_name[1] = "Summon Homunkulus";
	a_spells("init_spells", 91).f_name[3] = "Conjurar Homunkulus";
	a_spells("init_spells", 91).f_cost = 3;
	a_spells("init_spells", 91).f_level = 3;
	a_spells("init_spells", 91).f_duration = 0;
	a_spells("init_spells", 91).f_school = 59;
	a_spells("init_spells", 91).f_summoning = 1;
	a_spells("init_spells", 91).f_info_1[2] = "Beschw\366rt einen magischen";
	a_spells("init_spells", 91).f_info_2[2] = "Diener";
	a_spells("init_spells", 91).f_info_1[1] = "Summons a magical";
	a_spells("init_spells", 91).f_info_2[1] = "servant";
	a_spells("init_spells", 91).f_info_1[3] = "Conjura un criado magico";
	a_spells("init_spells", 91).f_info_2[3] = "";
	a_spells("init_spells", 45).f_name[2] = "Magieschutz";
	a_spells("init_spells", 45).f_name[1] = "Ward Against Magic";
	a_spells("init_spells", 45).f_name[3] = "Proteccion Magica";
	a_spells("init_spells", 45).f_cost = 1;
	a_spells("init_spells", 45).f_level = 4;
	a_spells("init_spells", 45).f_duration = 5;
	a_spells("init_spells", 45).f_school = 59;
	a_spells("init_spells", 45).f_info_1[2] = "Erh\366ht den Schutz des Magiers";
	a_spells("init_spells", 45).f_info_2[2] = "gegen Magie (aktiver Zauber)";
	a_spells("init_spells", 45).f_info_1[1] = "Increases the protection";
	a_spells("init_spells", 45).f_info_2[1] = "against magic (active spell)";
	a_spells("init_spells", 45).f_info_1[3] = "Incrementa la proteccion contra";
	a_spells("init_spells", 45).f_info_2[3] = "la magia (hechizo activo)";
	a_spells("init_spells", 45).f_weavable = 1;
	a_spells("init_spells", 47).f_name[2] = "Verl\344ngern";
	a_spells("init_spells", 47).f_name[1] = "Extend";
	a_spells("init_spells", 47).f_name[3] = "Extender";
	a_spells("init_spells", 47).f_cost = 4;
	a_spells("init_spells", 47).f_level = 5;
	a_spells("init_spells", 47).f_duration = 0;
	a_spells("init_spells", 47).f_school = 59;
	a_spells("init_spells", 47).f_info_1[2] = "Verl\344ngert die Dauer";
	a_spells("init_spells", 47).f_info_2[2] = "aller aktiven Zauber";
	a_spells("init_spells", 47).f_info_1[1] = "Extends the duration";
	a_spells("init_spells", 47).f_info_2[1] = "of all active spells";
	a_spells("init_spells", 47).f_info_1[3] = "Extende la duracion de ";
	a_spells("init_spells", 47).f_info_2[3] = "los hechizos activos";
	a_spells("init_spells", 47).f_weavable = 1;
	a_spells("init_spells", 157).f_name[2] = "Stabilisieren";
	a_spells("init_spells", 157).f_name[1] = "Stabilize";
	a_spells("init_spells", 157).f_name[3] = "Persistente";
	a_spells("init_spells", 157).f_cost = 1;
	a_spells("init_spells", 157).f_level = 6;
	a_spells("init_spells", 157).f_duration = -2;
	a_spells("init_spells", 157).f_school = 59;
	a_spells("init_spells", 157).f_info_1[2] = "Verdoppelt die Dauer des n\344chsten";
	a_spells("init_spells", 157).f_info_2[2] = "Zaubers (Meta Magie)";
	a_spells("init_spells", 157).f_info_1[1] = "Double the duration of the next";
	a_spells("init_spells", 157).f_info_2[1] = "spell (meta magic)";
	a_spells("init_spells", 157).f_info_1[3] = "Dobla la duracion del hechizo";
	a_spells("init_spells", 157).f_info_2[3] = "proximo (meta magia)";
	a_spells("init_spells", 156).f_name[2] = "Tunnel";
	a_spells("init_spells", 156).f_name[1] = "Tunnel";
	a_spells("init_spells", 156).f_name[3] = "Tunel";
	a_spells("init_spells", 156).f_cost = 1;
	a_spells("init_spells", 156).f_level = 7;
	a_spells("init_spells", 156).f_duration = -2;
	a_spells("init_spells", 156).f_school = 59;
	a_spells("init_spells", 156).f_info_1[2] = "Erm\366glicht Zaubern durch";
	a_spells("init_spells", 156).f_info_2[2] = "W\344nde (Meta Magie)";
	a_spells("init_spells", 156).f_info_1[1] = "Permits casting a spell though";
	a_spells("init_spells", 156).f_info_2[1] = "walls (meta magic)";
	a_spells("init_spells", 156).f_info_1[3] = "Permite hechizar a traves de";
	a_spells("init_spells", 156).f_info_2[3] = "pareds (meta magia)";
	a_spells("init_spells", 122).f_name[2] = "Nexus Finden";
	a_spells("init_spells", 122).f_name[1] = "Find Nexus";
	a_spells("init_spells", 122).f_name[3] = "Encontrar Nexo";
	a_spells("init_spells", 122).f_cost = 2;
	a_spells("init_spells", 122).f_level = 8;
	a_spells("init_spells", 122).f_duration = 0;
	a_spells("init_spells", 122).f_school = 59;
	a_spells("init_spells", 122).f_info_1[2] = "Zeigt eine Karte mit";
	a_spells("init_spells", 122).f_info_2[2] = "dem Nexus!";
	a_spells("init_spells", 122).f_info_1[1] = "Shows a map with";
	a_spells("init_spells", 122).f_info_2[1] = "the Nexus!";
	a_spells("init_spells", 122).f_info_1[3] = "Muestra un mapa con";
	a_spells("init_spells", 122).f_info_2[3] = "los Nexo!";
	a_spells("init_spells", 159).f_name[2] = "Brecher";
	a_spells("init_spells", 159).f_name[1] = "Breaking";
	a_spells("init_spells", 159).f_name[3] = "Romper";
	a_spells("init_spells", 159).f_cost = 1;
	a_spells("init_spells", 159).f_level = 9;
	a_spells("init_spells", 159).f_duration = -2;
	a_spells("init_spells", 159).f_school = 59;
	a_spells("init_spells", 159).f_info_1[2] = "F\374r den n\344chsten Spruch wird die";
	a_spells("init_spells", 159).f_info_2[2] = "R\374stung des Monsters ignoriert (Meta Magie)";
	a_spells("init_spells", 159).f_info_1[1] = "For the next spell the armor of a";
	a_spells("init_spells", 159).f_info_2[1] = "monster is ignored (meta magic)";
	a_spells("init_spells", 159).f_info_1[3] = "Por el proximo hechizo se ignoran el";
	a_spells("init_spells", 159).f_info_2[3] = "armor del monstruo (meta magia)";
	a_spells("init_spells", 160).f_name[2] = "Penetration";
	a_spells("init_spells", 160).f_name[1] = "Penetration";
	a_spells("init_spells", 160).f_name[3] = "Penetracion";
	a_spells("init_spells", 160).f_cost = 1;
	a_spells("init_spells", 160).f_level = 10;
	a_spells("init_spells", 160).f_duration = -2;
	a_spells("init_spells", 160).f_school = 59;
	a_spells("init_spells", 160).f_info_1[2] = "Dispel und Immunit\344ten eines Monsters";
	a_spells("init_spells", 160).f_info_2[2] = "werden ignoriert (Meta Magie,keine Fl\344chenzauber)";
	a_spells("init_spells", 160).f_info_1[1] = "Dispel and Immunities of a monster do";
	a_spells("init_spells", 160).f_info_2[1] = "not work (meta magic,not for area spells)";
	a_spells("init_spells", 160).f_info_1[3] = "Dispel y Imunidades de un monstruo no";
	a_spells("init_spells", 160).f_info_2[3] = "funcionan (meta magia,not for area spells)";
	a_spells("init_spells", 161).f_name[2] = "Verdoppeln";
	a_spells("init_spells", 161).f_name[1] = "Fork";
	a_spells("init_spells", 161).f_name[3] = "Doblar";
	a_spells("init_spells", 161).f_cost = 1;
	a_spells("init_spells", 161).f_level = 11;
	a_spells("init_spells", 161).f_duration = -2;
	a_spells("init_spells", 161).f_school = 59;
	a_spells("init_spells", 161).f_info_1[2] = "Zaubert den n\344chsten Zauber zweimal";
	a_spells("init_spells", 161).f_info_2[2] = "(Meta Magie)";
	a_spells("init_spells", 161).f_info_1[1] = "Casts the next spell twice";
	a_spells("init_spells", 161).f_info_2[1] = "(meta magic)";
	a_spells("init_spells", 161).f_info_1[3] = "Hechiza el proximo hechizo dos veces";
	a_spells("init_spells", 161).f_info_2[3] = "(meta magia)";
	a_spells("init_spells", 158).f_name[2] = "Schnellzauber";
	a_spells("init_spells", 158).f_name[1] = "Quickening";
	a_spells("init_spells", 158).f_name[3] = "Hechizo Rapido";
	a_spells("init_spells", 158).f_cost = 1;
	a_spells("init_spells", 158).f_level = 12;
	a_spells("init_spells", 158).f_duration = 1;
	a_spells("init_spells", 158).f_school = 59;
	a_spells("init_spells", 158).f_info_1[2] = "Der n\344chste Spruch kostet nicht";
	a_spells("init_spells", 158).f_info_2[2] = "den Zug (Meta Magie)";
	a_spells("init_spells", 158).f_info_1[1] = "The next cast spell does not";
	a_spells("init_spells", 158).f_info_2[1] = "end the turn (meta magic)";
	a_spells("init_spells", 158).f_info_1[3] = "El hechizo proximo no te cuesta";
	a_spells("init_spells", 158).f_info_2[3] = "el turno (meta magia)";
	a_spells("init_spells", 59).f_name[2] = "Macht";
	a_spells("init_spells", 59).f_name[1] = "Might";
	a_spells("init_spells", 59).f_name[3] = "Poder";
	a_spells("init_spells", 59).f_cost = 5;
	a_spells("init_spells", 59).f_level = 13;
	a_spells("init_spells", 59).f_duration = 1;
	a_spells("init_spells", 59).f_school = 59;
	a_spells("init_spells", 59).f_info_1[2] = "Verdoppelt die Macht des";
	a_spells("init_spells", 59).f_info_2[2] = "Zauberers (aktiver Zauber)";
	a_spells("init_spells", 59).f_info_1[1] = "Doubles the power of the";
	a_spells("init_spells", 59).f_info_2[1] = "magician (active spell)";
	a_spells("init_spells", 59).f_info_1[3] = "Duplica el poder del mago ";
	a_spells("init_spells", 59).f_info_2[3] = "(hechizo activo)";
	a_spells("init_spells", 59).f_weavable = 1;
	a_spells("init_spells", 82).f_name[2] = "Syphon";
	a_spells("init_spells", 82).f_name[1] = "Syphon";
	a_spells("init_spells", 82).f_name[3] = "Sifon";
	a_spells("init_spells", 82).f_cost = 7;
	a_spells("init_spells", 82).f_level = 14;
	a_spells("init_spells", 82).f_duration = 4;
	a_spells("init_spells", 82).f_school = 59;
	a_spells("init_spells", 82).f_info_1[2] = "Halbiert Manakosten";
	a_spells("init_spells", 82).f_info_2[2] = "aller Zauber";
	a_spells("init_spells", 82).f_info_1[1] = "Halves the cost of";
	a_spells("init_spells", 82).f_info_2[1] = "all spells";
	a_spells("init_spells", 82).f_info_1[3] = "Reduce el coste de los ";
	a_spells("init_spells", 82).f_info_2[3] = "hechizos a la mitad";
	a_spells("init_spells", 82).f_weavable = 1;
	a_spells("init_spells", 83).f_name[2] = "Nexus";
	a_spells("init_spells", 83).f_name[1] = "Nexus";
	a_spells("init_spells", 83).f_name[3] = "Nexo";
	a_spells("init_spells", 83).f_cost = 5;
	a_spells("init_spells", 83).f_level = 15;
	a_spells("init_spells", 83).f_duration = 0;
	a_spells("init_spells", 83).f_school = 59;
	a_spells("init_spells", 83).f_info_1[2] = "Erschafft einen neuen";
	a_spells("init_spells", 83).f_info_2[2] = "Nexus";
	a_spells("init_spells", 83).f_info_1[1] = "Creates a new";
	a_spells("init_spells", 83).f_info_2[1] = "Nexus";
	a_spells("init_spells", 83).f_info_1[3] = "Crea un nuevo ";
	a_spells("init_spells", 83).f_info_2[3] = "Nexo";
	a_spells("init_spells", 12).f_name[2] = "Sternenlicht";
	a_spells("init_spells", 12).f_name[1] = "Starlight";
	a_spells("init_spells", 12).f_name[3] = "Luz Estelar";
	a_spells("init_spells", 12).f_cost = 1;
	a_spells("init_spells", 12).f_level = 1;
	a_spells("init_spells", 12).f_duration = 4;
	a_spells("init_spells", 12).f_school = 48;
	a_spells("init_spells", 12).f_info_1[2] = "Ruft das Licht der Sterne herbei und";
	a_spells("init_spells", 12).f_info_2[2] = "erhellt das Labyrinth (Aktiver Zauber)";
	a_spells("init_spells", 12).f_info_1[1] = "Summons the light of the stars to ";
	a_spells("init_spells", 12).f_info_2[1] = "follow the magician (active spell)";
	a_spells("init_spells", 12).f_info_1[3] = "Hace que la luz de las estrellas ";
	a_spells("init_spells", 12).f_info_2[3] = "siga al mago (hechizo activo)";
	a_spells("init_spells", 12).f_weavable = 1;
	a_spells("init_spells", 30).f_name[2] = "Nordlicht";
	a_spells("init_spells", 30).f_name[1] = "Polar Light";
	a_spells("init_spells", 30).f_name[3] = "Luz Polar";
	a_spells("init_spells", 30).f_cost = 1;
	a_spells("init_spells", 30).f_level = 3;
	a_spells("init_spells", 30).f_duration = 4;
	a_spells("init_spells", 30).f_school = 48;
	a_spells("init_spells", 30).f_info_1[2] = "Das helle Licht";
	a_spells("init_spells", 30).f_info_2[2] = "des Nordens (aktiver Zauber)";
	a_spells("init_spells", 30).f_info_1[1] = "The bright light";
	a_spells("init_spells", 30).f_info_2[1] = "of the north (active Spell)";
	a_spells("init_spells", 30).f_info_1[3] = "La luz clara del norte ";
	a_spells("init_spells", 30).f_info_2[3] = "(hechizo activo)";
	a_spells("init_spells", 30).f_weavable = 1;
	a_spells("init_spells", 31).f_name[2] = "Sonnenlicht";
	a_spells("init_spells", 31).f_name[1] = "Sunlight";
	a_spells("init_spells", 31).f_name[3] = "Luz Solar";
	a_spells("init_spells", 31).f_cost = 2;
	a_spells("init_spells", 31).f_level = 5;
	a_spells("init_spells", 31).f_duration = 4;
	a_spells("init_spells", 31).f_school = 48;
	a_spells("init_spells", 31).f_info_1[2] = "Ein starker Licht-";
	a_spells("init_spells", 31).f_info_2[2] = "zauber (aktiver Zauber)";
	a_spells("init_spells", 31).f_info_1[1] = "A strong light spell";
	a_spells("init_spells", 31).f_info_2[1] = "(active spell)";
	a_spells("init_spells", 31).f_info_1[3] = "Un fuerte hechizo luminoso ";
	a_spells("init_spells", 31).f_info_2[3] = "(hechizo activo)";
	a_spells("init_spells", 31).f_weavable = 1;
	a_spells("init_spells", 75).f_name[2] = "Gl\374ckszauber";
	a_spells("init_spells", 75).f_name[1] = "Luck Spell";
	a_spells("init_spells", 75).f_name[3] = "Conjuro de Suerte";
	a_spells("init_spells", 75).f_cost = 4;
	a_spells("init_spells", 75).f_level = 6;
	a_spells("init_spells", 75).f_duration = 4;
	a_spells("init_spells", 75).f_school = 48;
	a_spells("init_spells", 75).f_info_1[2] = "Erh\366ht den Gl\374ckswert";
	a_spells("init_spells", 75).f_info_2[2] = "(aktiver Zauber)";
	a_spells("init_spells", 75).f_info_1[1] = "Increases Luck";
	a_spells("init_spells", 75).f_info_2[1] = "(active spell)";
	a_spells("init_spells", 75).f_info_1[3] = "Incrementa la Suerte ";
	a_spells("init_spells", 75).f_info_2[3] = "(hechizo activo)";
	a_spells("init_spells", 75).f_weavable = 1;
	a_spells("init_spells", 94).f_name[2] = "Sternenfee beschw\366ren";
	a_spells("init_spells", 94).f_name[1] = "Summon Star Fairy";
	a_spells("init_spells", 94).f_name[3] = "Conjurar Hada de las Estrellas";
	a_spells("init_spells", 94).f_cost = 3;
	a_spells("init_spells", 94).f_level = 7;
	a_spells("init_spells", 94).f_duration = 0;
	a_spells("init_spells", 94).f_school = 48;
	a_spells("init_spells", 94).f_summoning = 4;
	a_spells("init_spells", 94).f_info_1[2] = "Beschw\366rt eine Sternenfee";
	a_spells("init_spells", 94).f_info_2[2] = "(Kann durch W\344nde laufen, Nur Nexus!)";
	a_spells("init_spells", 94).f_info_1[1] = "Summons a small Star Faerie";
	a_spells("init_spells", 94).f_info_2[1] = "(Can move through walls, Nexus only!)";
	a_spells("init_spells", 94).f_info_1[3] = "Conjura una Haga pequena";
	a_spells("init_spells", 94).f_info_2[3] = "(Solo puede atravesar paredes y Nexos!)";
	a_spells("init_spells", 74).f_name[2] = "Wahrlicht";
	a_spells("init_spells", 74).f_name[1] = "True Light";
	a_spells("init_spells", 74).f_name[3] = "Luz Verdadera";
	a_spells("init_spells", 74).f_cost = 3;
	a_spells("init_spells", 74).f_level = 8;
	a_spells("init_spells", 74).f_duration = 4;
	a_spells("init_spells", 74).f_school = 48;
	a_spells("init_spells", 74).f_info_1[2] = "Das einzig wahre Licht";
	a_spells("init_spells", 74).f_info_2[2] = "(aktiver Zauber)";
	a_spells("init_spells", 74).f_info_1[1] = "The only real light";
	a_spells("init_spells", 74).f_info_2[1] = "(active spell)";
	a_spells("init_spells", 74).f_info_1[3] = "La unica luz real ";
	a_spells("init_spells", 74).f_info_2[3] = "(hechizo activo)";
	a_spells("init_spells", 74).f_weavable = 1;
	a_spells("init_spells", 105).f_name[2] = "Sternensicht";
	a_spells("init_spells", 105).f_name[1] = "Starsight";
	a_spells("init_spells", 105).f_name[3] = "Vista de las Estrellas";
	a_spells("init_spells", 105).f_cost = 3;
	a_spells("init_spells", 105).f_level = 9;
	a_spells("init_spells", 105).f_duration = 0;
	a_spells("init_spells", 105).f_school = 48;
	a_spells("init_spells", 105).f_info_1[2] = "Zeigt eine Karte mit allen ";
	a_spells("init_spells", 105).f_info_2[2] = "Details des Labyrinths";
	a_spells("init_spells", 105).f_info_1[1] = "Shows a map containing all ";
	a_spells("init_spells", 105).f_info_2[1] = "details of the actual level";
	a_spells("init_spells", 105).f_info_1[3] = "Muestra un mapa con todos los ";
	a_spells("init_spells", 105).f_info_2[3] = "detalles del nivel";
	a_spells("init_spells", 117).f_name[2] = "Meteor";
	a_spells("init_spells", 117).f_name[1] = "Meteor";
	a_spells("init_spells", 117).f_name[3] = "Meteoro";
	a_spells("init_spells", 117).f_cost = 4;
	a_spells("init_spells", 117).f_level = 10;
	a_spells("init_spells", 117).f_duration = 0;
	a_spells("init_spells", 117).f_school = 48;
	a_spells("init_spells", 117).f_info_1[2] = "Zerst\366rt ein Feld und";
	a_spells("init_spells", 117).f_info_2[2] = "alle umliegenden (ohne LOS!)";
	a_spells("init_spells", 117).f_info_1[1] = "Destroys a field and all";
	a_spells("init_spells", 117).f_info_2[1] = "surrounding it (without LOS!)";
	a_spells("init_spells", 117).f_info_1[3] = "Destruye un campo y todos";
	a_spells("init_spells", 117).f_info_2[3] = "los alrededores (sin LOS!)";
	a_spells("init_spells", 117).f_weavable = 1;
	a_spells("init_spells", 76).f_name[2] = "Sternenfeuer";
	a_spells("init_spells", 76).f_name[1] = "Starfire";
	a_spells("init_spells", 76).f_name[3] = "Fuego Estelar";
	a_spells("init_spells", 76).f_cost = 4;
	a_spells("init_spells", 76).f_level = 12;
	a_spells("init_spells", 76).f_duration = 0;
	a_spells("init_spells", 76).f_school = 48;
	a_spells("init_spells", 76).f_info_1[2] = "Sternenfeuer attackiert alle";
	a_spells("init_spells", 76).f_info_2[2] = "nahen Monster";
	a_spells("init_spells", 76).f_info_1[1] = "Starfire attacks all";
	a_spells("init_spells", 76).f_info_2[1] = "nearby monsters";
	a_spells("init_spells", 76).f_info_1[3] = "Fuego estelar ataca todos ";
	a_spells("init_spells", 76).f_info_2[3] = "los monstruos cercanos";
	a_spells("init_spells", 76).f_weavable = 1;
	a_spells("init_spells", 11).f_name[2] = "Erfrischung";
	a_spells("init_spells", 11).f_name[1] = "Refresh";
	a_spells("init_spells", 11).f_name[3] = "Refrescar";
	a_spells("init_spells", 11).f_cost = 1;
	a_spells("init_spells", 11).f_level = 1;
	a_spells("init_spells", 11).f_duration = 0;
	a_spells("init_spells", 11).f_school = 54;
	a_spells("init_spells", 11).f_info_1[2] = "L\366scht den Durst ";
	a_spells("init_spells", 11).f_info_2[2] = "des Magiers";
	a_spells("init_spells", 11).f_info_1[1] = "Quenches the thirst ";
	a_spells("init_spells", 11).f_info_2[1] = "of the magician";
	a_spells("init_spells", 11).f_info_1[3] = "Calma la sed ";
	a_spells("init_spells", 11).f_info_2[3] = "del mago";
	a_spells("init_spells", 68).f_name[2] = "Eisschild";
	a_spells("init_spells", 68).f_name[1] = "Ice Shield";
	a_spells("init_spells", 68).f_name[3] = "Escudo Antihielo";
	a_spells("init_spells", 68).f_cost = 1;
	a_spells("init_spells", 68).f_level = 2;
	a_spells("init_spells", 68).f_duration = 5;
	a_spells("init_spells", 68).f_school = 54;
	a_spells("init_spells", 68).f_info_1[2] = "Sch\374tzt den Magier vor Schaden";
	a_spells("init_spells", 68).f_info_2[2] = "durch K\344lte (Aktiver Zauber)";
	a_spells("init_spells", 68).f_info_1[1] = "Wards against cold and ice";
	a_spells("init_spells", 68).f_info_2[1] = "(active spell)";
	a_spells("init_spells", 68).f_info_1[3] = "Proteccion contra el frio y ";
	a_spells("init_spells", 68).f_info_2[3] = "el hielo (hechizo activo)";
	a_spells("init_spells", 68).f_weavable = 1;
	a_spells("init_spells", 60).f_name[2] = "Feuer Bannen";
	a_spells("init_spells", 60).f_name[1] = "Banish Fire";
	a_spells("init_spells", 60).f_name[3] = "Extinguir Fuego";
	a_spells("init_spells", 60).f_cost = 2;
	a_spells("init_spells", 60).f_level = 3;
	a_spells("init_spells", 60).f_duration = 0;
	a_spells("init_spells", 60).f_school = 54;
	a_spells("init_spells", 60).f_info_1[2] = "L\366scht alle Feuerfelder";
	a_spells("init_spells", 60).f_info_2[2] = "in der n\344heren Umgebung";
	a_spells("init_spells", 60).f_info_1[1] = "Destroys all fire fields";
	a_spells("init_spells", 60).f_info_2[1] = "around the magician";
	a_spells("init_spells", 60).f_info_1[3] = "Apaga todos los fuegos ";
	a_spells("init_spells", 60).f_info_2[3] = "alrededor del mago";
	a_spells("init_spells", 60).f_weavable = 1;
	a_spells("init_spells", 28).f_name[2] = "Frostschlag";
	a_spells("init_spells", 28).f_name[1] = "Frost Bolt";
	a_spells("init_spells", 28).f_name[3] = "Bola de Hielo";
	a_spells("init_spells", 28).f_cost = 2;
	a_spells("init_spells", 28).f_level = 4;
	a_spells("init_spells", 28).f_duration = 0;
	a_spells("init_spells", 28).f_school = 54;
	a_spells("init_spells", 28).f_info_1[2] = "Wirft eine Kugel aus Eis";
	a_spells("init_spells", 28).f_info_2[2] = "auf einen Gegner";
	a_spells("init_spells", 28).f_info_1[1] = "Throws a ball of ice";
	a_spells("init_spells", 28).f_info_2[1] = "on a nearby enemy";
	a_spells("init_spells", 28).f_info_1[3] = "Lanza una bola de hielo ";
	a_spells("init_spells", 28).f_info_2[3] = "a un enemigo proximo";
	a_spells("init_spells", 28).f_weavable = 1;
	a_spells("init_spells", 49).f_name[2] = "\334bers Wasser gehen";
	a_spells("init_spells", 49).f_name[1] = "Walk on Water";
	a_spells("init_spells", 49).f_name[3] = "Caminar Sobre el Agua";
	a_spells("init_spells", 49).f_cost = 1;
	a_spells("init_spells", 49).f_level = 5;
	a_spells("init_spells", 49).f_duration = 5;
	a_spells("init_spells", 49).f_school = 54;
	a_spells("init_spells", 49).f_info_1[2] = "Der Magier kann \374ber Wasser-";
	a_spells("init_spells", 49).f_info_2[2] = "fl\344chen gehen (Aktiver Zauber)";
	a_spells("init_spells", 49).f_info_1[1] = "The magician can walk over";
	a_spells("init_spells", 49).f_info_2[1] = "bodies of water (active spell)";
	a_spells("init_spells", 49).f_info_1[3] = "El mago puede caminar sobre masas ";
	a_spells("init_spells", 49).f_info_2[3] = "de agua (hechizo activo)";
	a_spells("init_spells", 49).f_weavable = 1;
	a_spells("init_spells", 29).f_name[2] = "Dehydration";
	a_spells("init_spells", 29).f_name[1] = "Dehydration";
	a_spells("init_spells", 29).f_name[3] = "Deshidratacion";
	a_spells("init_spells", 29).f_cost = 2;
	a_spells("init_spells", 29).f_level = 6;
	a_spells("init_spells", 29).f_duration = 0;
	a_spells("init_spells", 29).f_school = 54;
	a_spells("init_spells", 29).f_info_1[2] = "Zerst\366rt das Wasser in einem Monster";
	a_spells("init_spells", 29).f_info_2[2] = "und f\374gt ihm damit Schaden zu";
	a_spells("init_spells", 29).f_info_1[1] = "Evaporates the water inside a";
	a_spells("init_spells", 29).f_info_2[1] = "monster and damages it";
	a_spells("init_spells", 29).f_info_1[3] = "Hace desaparecer el agua de un ";
	a_spells("init_spells", 29).f_info_2[3] = "monstruo y le dana";
	a_spells("init_spells", 29).f_weavable = 1;
	a_spells("init_spells", 70).f_name[2] = "Winteratem";
	a_spells("init_spells", 70).f_name[1] = "Breath of Winter";
	a_spells("init_spells", 70).f_name[3] = "Aliento Invernal";
	a_spells("init_spells", 70).f_cost = 3;
	a_spells("init_spells", 70).f_level = 7;
	a_spells("init_spells", 70).f_duration = 5;
	a_spells("init_spells", 70).f_school = 54;
	a_spells("init_spells", 70).f_info_1[2] = "Umh\374llt den Magier mit einer";
	a_spells("init_spells", 70).f_info_2[2] = "Aura der K\344lte (Aktiver Zauber)";
	a_spells("init_spells", 70).f_info_1[1] = "The magician receives an";
	a_spells("init_spells", 70).f_info_2[1] = "aura of coldness (active spell)";
	a_spells("init_spells", 70).f_info_1[3] = "El mago recibe un aura de ";
	a_spells("init_spells", 70).f_info_2[3] = "frescor (hechizho activo)";
	a_spells("init_spells", 70).f_weavable = 1;
	a_spells("init_spells", 72).f_name[2] = "Ewiger Winter";
	a_spells("init_spells", 72).f_name[1] = "Eternal Winter";
	a_spells("init_spells", 72).f_name[3] = "Invierno Eterno";
	a_spells("init_spells", 72).f_cost = 3;
	a_spells("init_spells", 72).f_level = 8;
	a_spells("init_spells", 72).f_duration = 0;
	a_spells("init_spells", 72).f_school = 54;
	a_spells("init_spells", 72).f_info_1[2] = "L\344sst ein Monster einfrieren";
	a_spells("init_spells", 72).f_info_2[2] = "";
	a_spells("init_spells", 72).f_info_1[1] = "Turns a monster into ice";
	a_spells("init_spells", 72).f_info_2[1] = "";
	a_spells("init_spells", 72).f_info_1[3] = "Convierte un monstruo en hielo";
	a_spells("init_spells", 72).f_info_2[3] = "";
	a_spells("init_spells", 73).f_name[2] = "Flutwelle";
	a_spells("init_spells", 73).f_name[1] = "Tidal Wave";
	a_spells("init_spells", 73).f_name[3] = "Ola de la Marea";
	a_spells("init_spells", 73).f_cost = 4;
	a_spells("init_spells", 73).f_level = 9;
	a_spells("init_spells", 73).f_duration = 0;
	a_spells("init_spells", 73).f_school = 54;
	a_spells("init_spells", 73).f_info_1[2] = "Beschw\366rt eine gewaltige";
	a_spells("init_spells", 73).f_info_2[2] = "Flutwelle herbei";
	a_spells("init_spells", 73).f_info_1[1] = "Summons a gigantic tidal";
	a_spells("init_spells", 73).f_info_2[1] = "wave";
	a_spells("init_spells", 73).f_info_1[3] = "Envia una inundacion en ";
	a_spells("init_spells", 73).f_info_2[3] = "forma de ola gigante";
	a_spells("init_spells", 73).f_weavable = 1;
	a_spells("init_spells", 179).f_name[2] = "Wasser Gefrieren";
	a_spells("init_spells", 179).f_name[1] = "Freeze Water";
	a_spells("init_spells", 179).f_name[3] = "Congelar Aqua";
	a_spells("init_spells", 179).f_cost = 2;
	a_spells("init_spells", 179).f_level = 10;
	a_spells("init_spells", 179).f_duration = 0;
	a_spells("init_spells", 179).f_school = 54;
	a_spells("init_spells", 179).f_info_1[2] = "Wandelt ein Wasser in Eis";
	a_spells("init_spells", 179).f_info_2[2] = "";
	a_spells("init_spells", 179).f_info_1[1] = "Transforms a water field to ice";
	a_spells("init_spells", 179).f_info_2[1] = "";
	a_spells("init_spells", 179).f_info_1[3] = "Transforma un campo de aqua";
	a_spells("init_spells", 179).f_info_2[3] = "a hielo";
	a_spells("init_spells", 163).f_name[2] = "Wasserelementar Beschw\366ren";
	a_spells("init_spells", 163).f_name[1] = "Summon Water Elemental";
	a_spells("init_spells", 163).f_name[3] = "Conjurar Elementar de Aqua";
	a_spells("init_spells", 163).f_cost = 15;
	a_spells("init_spells", 163).f_level = 11;
	a_spells("init_spells", 163).f_duration = 0;
	a_spells("init_spells", 163).f_school = 54;
	a_spells("init_spells", 163).f_summoning = 15;
	a_spells("init_spells", 163).f_info_1[2] = "Beschw\366rt einen magischen";
	a_spells("init_spells", 163).f_info_2[2] = "Diener auf dem Nexus";
	a_spells("init_spells", 163).f_info_1[1] = "Summons a magical";
	a_spells("init_spells", 163).f_info_2[1] = "servant in the Nexus";
	a_spells("init_spells", 163).f_info_1[3] = "Conjura un servidor";
	a_spells("init_spells", 163).f_info_2[3] = "magico en el Nexo";
	a_spells("init_spells", 164).f_name[2] = "Regen";
	a_spells("init_spells", 164).f_name[1] = "Rain";
	a_spells("init_spells", 164).f_name[3] = "Lluvia";
	a_spells("init_spells", 164).f_cost = 2;
	a_spells("init_spells", 164).f_level = 12;
	a_spells("init_spells", 164).f_duration = 0;
	a_spells("init_spells", 164).f_school = 54;
	a_spells("init_spells", 164).f_info_1[2] = "F\374llt das Labyrinth mit trinkbaren";
	a_spells("init_spells", 164).f_info_2[2] = "Wasserfeldern";
	a_spells("init_spells", 164).f_info_1[1] = "Fills the labyrinth with drinkable";
	a_spells("init_spells", 164).f_info_2[1] = "water tiles";
	a_spells("init_spells", 164).f_info_1[3] = "Llena el labirinto con campos de aqua";
	a_spells("init_spells", 164).f_info_2[3] = "bebibles";
	a_spells("init_spells", 164).f_weavable = 1;
	a_spells("init_spells", 50).f_name[2] = "Monster Auge";
	a_spells("init_spells", 50).f_name[1] = "Monster Eye";
	a_spells("init_spells", 50).f_name[3] = "Ojo de Monstruo";
	a_spells("init_spells", 50).f_cost = 1;
	a_spells("init_spells", 50).f_level = 1;
	a_spells("init_spells", 50).f_duration = 5;
	a_spells("init_spells", 50).f_school = 58;
	a_spells("init_spells", 50).f_info_1[2] = "Zeigt der Hexe alle Werte";
	a_spells("init_spells", 50).f_info_2[2] = "eines bestimmen Monsters";
	a_spells("init_spells", 50).f_info_1[1] = "Shows all attributes of";
	a_spells("init_spells", 50).f_info_2[1] = "one monster";
	a_spells("init_spells", 50).f_info_1[3] = "Muestra todas las caracteristicas ";
	a_spells("init_spells", 50).f_info_2[3] = "de un monstruo";
	a_spells("init_spells", 89).f_name[2] = "Katzengestalt";
	a_spells("init_spells", 89).f_name[1] = "Cat Shape";
	a_spells("init_spells", 89).f_name[3] = "Cuerpo de Gata";
	a_spells("init_spells", 89).f_cost = 1;
	a_spells("init_spells", 89).f_level = 2;
	a_spells("init_spells", 89).f_duration = 5;
	a_spells("init_spells", 89).f_school = 58;
	a_spells("init_spells", 89).f_info_1[2] = "Verwandelt die Hexe in";
	a_spells("init_spells", 89).f_info_2[2] = "eine Katze (aktiver Zauber)";
	a_spells("init_spells", 89).f_info_1[1] = "Turns the witch into a";
	a_spells("init_spells", 89).f_info_2[1] = "cat (active spell)";
	a_spells("init_spells", 89).f_info_1[3] = "Transforma la bruja en una";
	a_spells("init_spells", 89).f_info_2[3] = "gata (hechizo activo)";
	a_spells("init_spells", 89).f_weavable = 1;
	a_spells("init_spells", 89).f_shapechanging = 1;
	a_spells("init_spells", 51).f_name[2] = "Verhexen";
	a_spells("init_spells", 51).f_name[1] = "Charm";
	a_spells("init_spells", 51).f_name[3] = "Encanto";
	a_spells("init_spells", 51).f_cost = 2;
	a_spells("init_spells", 51).f_level = 3;
	a_spells("init_spells", 51).f_duration = 0;
	a_spells("init_spells", 51).f_school = 58;
	a_spells("init_spells", 51).f_info_1[2] = "Bringt ein Monster dazu";
	a_spells("init_spells", 51).f_info_2[2] = "die Hexe als Freund zu sehen";
	a_spells("init_spells", 51).f_info_1[1] = "Befriends a monster";
	a_spells("init_spells", 51).f_info_2[1] = "";
	a_spells("init_spells", 51).f_info_1[3] = "Convierte a un monstruo ";
	a_spells("init_spells", 51).f_info_2[3] = "en aliado";
	a_spells("init_spells", 52).f_name[2] = "Hexensicht";
	a_spells("init_spells", 52).f_name[1] = "Witch Sight";
	a_spells("init_spells", 52).f_name[3] = "Vista de Bruja";
	a_spells("init_spells", 52).f_cost = 2;
	a_spells("init_spells", 52).f_level = 4;
	a_spells("init_spells", 52).f_duration = 4;
	a_spells("init_spells", 52).f_school = 58;
	a_spells("init_spells", 52).f_info_1[2] = "Erh\366ht die Wahrnehmung";
	a_spells("init_spells", 52).f_info_2[2] = "(Aktiver Zauber)";
	a_spells("init_spells", 52).f_info_1[1] = "Increases the perception of";
	a_spells("init_spells", 52).f_info_2[1] = "the magician (active spell)";
	a_spells("init_spells", 52).f_info_1[3] = "Incrementa la percepcion ";
	a_spells("init_spells", 52).f_info_2[3] = "(hechizo activo)";
	a_spells("init_spells", 52).f_weavable = 1;
	a_spells("init_spells", 140).f_name[2] = "Wasser Stehlen";
	a_spells("init_spells", 140).f_name[1] = "Steal Water";
	a_spells("init_spells", 140).f_name[3] = "Robar Aqua";
	a_spells("init_spells", 140).f_cost = 2;
	a_spells("init_spells", 140).f_level = 5;
	a_spells("init_spells", 140).f_duration = 0;
	a_spells("init_spells", 140).f_school = 58;
	a_spells("init_spells", 140).f_info_1[2] = "Stiehlt einer Pflanze Wasser";
	a_spells("init_spells", 140).f_info_2[2] = "und richtet ein wenig Schaden an";
	a_spells("init_spells", 140).f_info_1[1] = "Robs a plant of its water";
	a_spells("init_spells", 140).f_info_2[1] = "and deals a little damage";
	a_spells("init_spells", 140).f_info_1[3] = "Roba el aqua de una planta";
	a_spells("init_spells", 140).f_info_2[3] = "y hace un poco de dano";
	a_spells("init_spells", 140).f_weavable = 1;
	a_spells("init_spells", 81).f_name[2] = "Blitzschlag";
	a_spells("init_spells", 81).f_name[1] = "Lightning Bolt";
	a_spells("init_spells", 81).f_name[3] = "Relampago";
	a_spells("init_spells", 81).f_cost = 2;
	a_spells("init_spells", 81).f_level = 6;
	a_spells("init_spells", 81).f_duration = 0;
	a_spells("init_spells", 81).f_school = 58;
	a_spells("init_spells", 81).f_info_1[2] = "Wirft einen t\366dlichen";
	a_spells("init_spells", 81).f_info_2[2] = "Blitz auf einen Gegner";
	a_spells("init_spells", 81).f_info_1[1] = "Throws a deadly lightning";
	a_spells("init_spells", 81).f_info_2[1] = "bolt at an enemy";
	a_spells("init_spells", 81).f_info_1[3] = "Lanza un relampago mortal";
	a_spells("init_spells", 81).f_info_2[3] = "contra un enemigo";
	a_spells("init_spells", 81).f_weavable = 1;
	a_spells("init_spells", 95).f_name[2] = "Tiger Beschw\366ren";
	a_spells("init_spells", 95).f_name[1] = "Summon Tiger";
	a_spells("init_spells", 95).f_name[3] = "Conjurar Tigre";
	a_spells("init_spells", 95).f_cost = 5;
	a_spells("init_spells", 95).f_level = 7;
	a_spells("init_spells", 95).f_duration = 0;
	a_spells("init_spells", 95).f_school = 58;
	a_spells("init_spells", 95).f_summoning = 5;
	a_spells("init_spells", 95).f_info_1[2] = "Beschw\366rt einen wilden";
	a_spells("init_spells", 95).f_info_2[2] = "Tiger auf dem Nexus herbei";
	a_spells("init_spells", 95).f_info_1[1] = "Summons a ferocious";
	a_spells("init_spells", 95).f_info_2[1] = "tiger on the Nexus";
	a_spells("init_spells", 95).f_info_1[3] = "Conjura un tigre";
	a_spells("init_spells", 95).f_info_2[3] = "feroz en el Nexo";
	a_spells("init_spells", 118).f_name[2] = "Schutz Gegen Blitze";
	a_spells("init_spells", 118).f_name[1] = "Protection: Lightning";
	a_spells("init_spells", 118).f_name[3] = "Proteccion: Rayos";
	a_spells("init_spells", 118).f_cost = 1;
	a_spells("init_spells", 118).f_level = 8;
	a_spells("init_spells", 118).f_duration = 5;
	a_spells("init_spells", 118).f_school = 58;
	a_spells("init_spells", 118).f_info_1[2] = "Besch\374tzt die Hexe";
	a_spells("init_spells", 118).f_info_2[2] = "vor Blitzen!";
	a_spells("init_spells", 118).f_info_1[1] = "Protects the witch";
	a_spells("init_spells", 118).f_info_2[1] = "against lightning!";
	a_spells("init_spells", 118).f_info_1[3] = "Protege la bruja de";
	a_spells("init_spells", 118).f_info_2[3] = "Rayos!";
	a_spells("init_spells", 118).f_weavable = 1;
	a_spells("init_spells", 125).f_name[2] = "Vergiften";
	a_spells("init_spells", 125).f_name[1] = "Poison";
	a_spells("init_spells", 125).f_name[3] = "Envenenar";
	a_spells("init_spells", 125).f_cost = 2;
	a_spells("init_spells", 125).f_level = 9;
	a_spells("init_spells", 125).f_duration = 5;
	a_spells("init_spells", 125).f_school = 58;
	a_spells("init_spells", 125).f_info_1[2] = "Vergiftet ein nahes";
	a_spells("init_spells", 125).f_info_2[2] = "Monster";
	a_spells("init_spells", 125).f_info_1[1] = "Poisons a nearby";
	a_spells("init_spells", 125).f_info_2[1] = "monster";
	a_spells("init_spells", 125).f_info_1[3] = "Envenena un monstruo";
	a_spells("init_spells", 125).f_info_2[3] = "cercano";
	a_spells("init_spells", 125).f_weavable = 1;
	a_spells("init_spells", 111).f_name[2] = "Geister Bannen";
	a_spells("init_spells", 111).f_name[1] = "Banish Ghosts";
	a_spells("init_spells", 111).f_name[3] = "Castigar Fantasman";
	a_spells("init_spells", 111).f_cost = 1;
	a_spells("init_spells", 111).f_level = 10;
	a_spells("init_spells", 111).f_duration = 0;
	a_spells("init_spells", 111).f_school = 58;
	a_spells("init_spells", 111).f_info_1[2] = "Vertreibt einen einzelnen";
	a_spells("init_spells", 111).f_info_2[2] = "Geist";
	a_spells("init_spells", 111).f_info_1[1] = "Banishes a single";
	a_spells("init_spells", 111).f_info_2[1] = "ghost";
	a_spells("init_spells", 111).f_info_1[3] = "Castiga una sola fantasma";
	a_spells("init_spells", 111).f_info_2[3] = "";
	a_spells("init_spells", 177).f_name[2] = "Erschaffe Besen";
	a_spells("init_spells", 177).f_name[1] = "Create Broomstick";
	a_spells("init_spells", 177).f_name[3] = "Crear Escoba";
	a_spells("init_spells", 177).f_cost = 10;
	a_spells("init_spells", 177).f_level = 11;
	a_spells("init_spells", 177).f_duration = 0;
	a_spells("init_spells", 177).f_school = 58;
	a_spells("init_spells", 177).f_info_1[2] = "Erschafft einen fliegenden";
	a_spells("init_spells", 177).f_info_2[2] = "Besen (nur f\374r Hexen)";
	a_spells("init_spells", 177).f_info_1[1] = "Creates a broomstick to";
	a_spells("init_spells", 177).f_info_2[1] = "fly (witches only)";
	a_spells("init_spells", 177).f_info_1[3] = "Crea un escoba volando";
	a_spells("init_spells", 177).f_info_2[3] = "Solo puede usar la bruja";
	a_spells("init_spells", 134).f_name[2] = "Energie der Steine";
	a_spells("init_spells", 134).f_name[1] = "Energy of the Stones";
	a_spells("init_spells", 134).f_name[3] = "Energia de las Piedras";
	a_spells("init_spells", 134).f_cost = 0;
	a_spells("init_spells", 134).f_level = 12;
	a_spells("init_spells", 134).f_duration = 0;
	a_spells("init_spells", 134).f_school = 58;
	a_spells("init_spells", 134).f_info_1[2] = "Die Hexe kann einen Edelstein";
	a_spells("init_spells", 134).f_info_2[2] = "in Mana verwandeln";
	a_spells("init_spells", 134).f_info_1[1] = "The witch can transform one";
	a_spells("init_spells", 134).f_info_2[1] = "gem into Mana";
	a_spells("init_spells", 134).f_info_1[3] = "La bruja puede transformar";
	a_spells("init_spells", 134).f_info_2[3] = "une piedra preciosa a Mana";
	a_spells("init_spells", 142).f_name[2] = "Selbsthypnose";
	a_spells("init_spells", 142).f_name[1] = "Self-Hypnosis";
	a_spells("init_spells", 142).f_name[3] = "Hypnotizar uno Mismo";
	a_spells("init_spells", 142).f_cost = 2;
	a_spells("init_spells", 142).f_level = 13;
	a_spells("init_spells", 142).f_duration = 5;
	a_spells("init_spells", 142).f_school = 58;
	a_spells("init_spells", 142).f_info_1[2] = "Verdoppelt die Zeit f\374r";
	a_spells("init_spells", 142).f_info_2[2] = "Verdursten/Verhungern der Hexe";
	a_spells("init_spells", 142).f_info_1[1] = "Halves the time the witch";
	a_spells("init_spells", 142).f_info_2[1] = "needs food and water";
	a_spells("init_spells", 142).f_info_1[3] = "Dobla el tiempo la bruja";
	a_spells("init_spells", 142).f_info_2[3] = "necesita aqua y comida";
	a_spells("init_spells", 142).f_weavable = 1;
	a_spells("init_spells", 154).f_name[2] = "Lebensbund";
	a_spells("init_spells", 154).f_name[1] = "Lifebond";
	a_spells("init_spells", 154).f_name[3] = "Bondo de Vida";
	a_spells("init_spells", 154).f_cost = 2;
	a_spells("init_spells", 154).f_level = 14;
	a_spells("init_spells", 154).f_duration = 5;
	a_spells("init_spells", 154).f_school = 58;
	a_spells("init_spells", 154).f_info_1[2] = "Angreifende Monster bekommen";
	a_spells("init_spells", 154).f_info_2[2] = "den selben Schaden wie die Hexe";
	a_spells("init_spells", 154).f_info_1[1] = "Attacking monsters receive the same";
	a_spells("init_spells", 154).f_info_2[1] = "damage as the witch";
	a_spells("init_spells", 154).f_info_1[3] = "Monstros que ataquan reciben el";
	a_spells("init_spells", 154).f_info_2[3] = "mismo dano como la bruja";
	a_spells("init_spells", 154).f_weavable = 1;
	a_spells("init_spells", 90).f_name[2] = "Drachengestalt";
	a_spells("init_spells", 90).f_name[1] = "Dragon Shape";
	a_spells("init_spells", 90).f_name[3] = "Cuerpo de Dragon";
	a_spells("init_spells", 90).f_cost = 30;
	a_spells("init_spells", 90).f_level = 15;
	a_spells("init_spells", 90).f_duration = 2;
	a_spells("init_spells", 90).f_school = 58;
	a_spells("init_spells", 90).f_info_1[2] = "Verwandelt die Hexe in";
	a_spells("init_spells", 90).f_info_2[2] = "einen Drachen (aktiver Zauber)";
	a_spells("init_spells", 90).f_info_1[1] = "Turns the witch into a";
	a_spells("init_spells", 90).f_info_2[1] = "dragon (active spell)";
	a_spells("init_spells", 90).f_info_1[3] = "Transforma la bruja en un";
	a_spells("init_spells", 90).f_info_2[3] = "dragon (hechizo activo)";
	a_spells("init_spells", 90).f_weavable = 1;
	a_spells("init_spells", 90).f_shapechanging = 1;
	a_spells("init_spells", 53).f_name[2] = "Zauberschwert";
	a_spells("init_spells", 53).f_name[1] = "Eldritch Sword";
	a_spells("init_spells", 53).f_name[3] = "Espada Superior";
	a_spells("init_spells", 53).f_cost = 3;
	a_spells("init_spells", 53).f_level = 2;
	a_spells("init_spells", 53).f_duration = 0;
	a_spells("init_spells", 53).f_school = 50;
	a_spells("init_spells", 53).f_info_1[2] = "Konjuriert ein magisches";
	a_spells("init_spells", 53).f_info_2[2] = "Schwert";
	a_spells("init_spells", 53).f_info_1[1] = "Conjures a magical";
	a_spells("init_spells", 53).f_info_2[1] = "sword";
	a_spells("init_spells", 53).f_info_1[3] = "Crea una espada ";
	a_spells("init_spells", 53).f_info_2[3] = "magica";
	a_spells("init_spells", 54).f_name[2] = "Zauberpfeile";
	a_spells("init_spells", 54).f_name[1] = "Magic Arrows";
	a_spells("init_spells", 54).f_name[3] = "Flechas Magicas";
	a_spells("init_spells", 54).f_cost = 2;
	a_spells("init_spells", 54).f_level = 3;
	a_spells("init_spells", 54).f_duration = 0;
	a_spells("init_spells", 54).f_school = 50;
	a_spells("init_spells", 54).f_info_1[2] = "Konjuriert einige magische Pfeile";
	a_spells("init_spells", 54).f_info_2[2] = "";
	a_spells("init_spells", 54).f_info_1[1] = "Conjures some magical arrows";
	a_spells("init_spells", 54).f_info_2[1] = "";
	a_spells("init_spells", 54).f_info_1[3] = "Creatunas cuantas ";
	a_spells("init_spells", 54).f_info_2[3] = "flechas magicas";
	a_spells("init_spells", 85).f_name[2] = "Schlagkraft";
	a_spells("init_spells", 85).f_name[1] = "Power Strike";
	a_spells("init_spells", 85).f_name[3] = "Golpe de Fuerza";
	a_spells("init_spells", 85).f_cost = 2;
	a_spells("init_spells", 85).f_level = 4;
	a_spells("init_spells", 85).f_duration = 4;
	a_spells("init_spells", 85).f_school = 50;
	a_spells("init_spells", 85).f_info_1[2] = "Erh\366ht den Schaden des";
	a_spells("init_spells", 85).f_info_2[2] = "Magiers (aktiver Zauber)";
	a_spells("init_spells", 85).f_info_1[1] = "Increases the damage of";
	a_spells("init_spells", 85).f_info_2[1] = "the magician (active spell)";
	a_spells("init_spells", 85).f_info_1[3] = "Aumenta el dano del";
	a_spells("init_spells", 85).f_info_2[3] = "mago (hechizo activo)";
	a_spells("init_spells", 85).f_weavable = 1;
	a_spells("init_spells", 120).f_name[2] = "1000 Klingen";
	a_spells("init_spells", 120).f_name[1] = "1000 Blades";
	a_spells("init_spells", 120).f_name[3] = "1000 Espadas";
	a_spells("init_spells", 120).f_cost = 1;
	a_spells("init_spells", 120).f_level = 5;
	a_spells("init_spells", 120).f_duration = 5;
	a_spells("init_spells", 120).f_school = 50;
	a_spells("init_spells", 120).f_info_1[2] = "Erh\366ht Chance auf";
	a_spells("init_spells", 120).f_info_2[2] = "kritische Treffer!";
	a_spells("init_spells", 120).f_info_1[1] = "Increases the chance to";
	a_spells("init_spells", 120).f_info_2[1] = "do critical hits!";
	a_spells("init_spells", 120).f_info_1[3] = "Aumenta la posibilidad";
	a_spells("init_spells", 120).f_info_2[3] = "de hacer un golpe critico!";
	a_spells("init_spells", 120).f_weavable = 1;
	a_spells("init_spells", 135).f_name[2] = "Magischer Bogen";
	a_spells("init_spells", 135).f_name[1] = "Magical Bow";
	a_spells("init_spells", 135).f_name[3] = "Arco Magico";
	a_spells("init_spells", 135).f_cost = 4;
	a_spells("init_spells", 135).f_level = 6;
	a_spells("init_spells", 135).f_duration = 0;
	a_spells("init_spells", 135).f_school = 50;
	a_spells("init_spells", 135).f_info_1[2] = "Erschafft einen";
	a_spells("init_spells", 135).f_info_2[2] = "magischen Bogen";
	a_spells("init_spells", 135).f_info_1[1] = "Summons a magical";
	a_spells("init_spells", 135).f_info_2[1] = "bow";
	a_spells("init_spells", 135).f_info_1[3] = "Conjura un arco";
	a_spells("init_spells", 135).f_info_2[3] = "magico";
	a_spells("init_spells", 84).f_name[2] = "Zauberschild";
	a_spells("init_spells", 84).f_name[1] = "Eldritch Shield";
	a_spells("init_spells", 84).f_name[3] = "Escudo Superior";
	a_spells("init_spells", 84).f_cost = 2;
	a_spells("init_spells", 84).f_level = 7;
	a_spells("init_spells", 84).f_duration = 0;
	a_spells("init_spells", 84).f_school = 50;
	a_spells("init_spells", 84).f_info_1[2] = "Konjuriert ein magisches";
	a_spells("init_spells", 84).f_info_2[2] = "Schild";
	a_spells("init_spells", 84).f_info_1[1] = "Conjures a magical";
	a_spells("init_spells", 84).f_info_2[1] = "shield";
	a_spells("init_spells", 84).f_info_1[3] = "Crea un escudo ";
	a_spells("init_spells", 84).f_info_2[3] = "magico";
	a_spells("init_spells", 113).f_name[2] = "Mentalschlag";
	a_spells("init_spells", 113).f_name[1] = "Mental Bolt";
	a_spells("init_spells", 113).f_name[3] = "Rayo Mental";
	a_spells("init_spells", 113).f_cost = 2;
	a_spells("init_spells", 113).f_level = 8;
	a_spells("init_spells", 113).f_duration = 0;
	a_spells("init_spells", 113).f_school = 50;
	a_spells("init_spells", 113).f_info_1[2] = "Greift ein einzelnes";
	a_spells("init_spells", 113).f_info_2[2] = "Monster an";
	a_spells("init_spells", 113).f_info_1[1] = "Attacks a single";
	a_spells("init_spells", 113).f_info_2[1] = "monster";
	a_spells("init_spells", 113).f_info_1[3] = "Ataca un monstruo";
	a_spells("init_spells", 113).f_info_2[3] = "";
	a_spells("init_spells", 113).f_weavable = 1;
	a_spells("init_spells", 175).f_name[2] = "Konzentration";
	a_spells("init_spells", 175).f_name[1] = "Concentration";
	a_spells("init_spells", 175).f_name[3] = "Concentracion";
	a_spells("init_spells", 175).f_cost = 1;
	a_spells("init_spells", 175).f_level = 9;
	a_spells("init_spells", 175).f_duration = 5;
	a_spells("init_spells", 175).f_school = 50;
	a_spells("init_spells", 175).f_info_1[2] = "Erh\366ht die Geschicklichkeit des Warlock";
	a_spells("init_spells", 175).f_info_2[2] = "";
	a_spells("init_spells", 175).f_info_1[1] = "Raises the Dexterity of the warlock";
	a_spells("init_spells", 175).f_info_2[1] = "";
	a_spells("init_spells", 175).f_info_1[3] = "Aumenta la Destreza del warlock";
	a_spells("init_spells", 175).f_info_2[3] = "";
	a_spells("init_spells", 175).f_weavable = 1;
	a_spells("init_spells", 104).f_name[2] = "Zauberr\374stung";
	a_spells("init_spells", 104).f_name[1] = "Magical Armor";
	a_spells("init_spells", 104).f_name[3] = "Armadura Magica";
	a_spells("init_spells", 104).f_cost = 5;
	a_spells("init_spells", 104).f_level = 10;
	a_spells("init_spells", 104).f_duration = 0;
	a_spells("init_spells", 104).f_school = 50;
	a_spells("init_spells", 104).f_info_1[2] = "Erschafft eine";
	a_spells("init_spells", 104).f_info_2[2] = "magische R\374stung";
	a_spells("init_spells", 104).f_info_1[1] = "Summons a magical";
	a_spells("init_spells", 104).f_info_2[1] = "armor";
	a_spells("init_spells", 104).f_info_1[3] = "Conjura una armadura";
	a_spells("init_spells", 104).f_info_2[3] = "magica";
	a_spells("init_spells", 176).f_name[2] = "Pr\344zision";
	a_spells("init_spells", 176).f_name[1] = "Precision";
	a_spells("init_spells", 176).f_name[3] = "Precicion";
	a_spells("init_spells", 176).f_cost = 1;
	a_spells("init_spells", 176).f_level = 11;
	a_spells("init_spells", 176).f_duration = 5;
	a_spells("init_spells", 176).f_school = 50;
	a_spells("init_spells", 176).f_info_1[2] = "Erh\366ht den Angriff des Warlock";
	a_spells("init_spells", 176).f_info_2[2] = "";
	a_spells("init_spells", 176).f_info_1[1] = "Raises the attack of the warlock";
	a_spells("init_spells", 176).f_info_2[1] = "";
	a_spells("init_spells", 176).f_info_1[3] = "Aumenta la ataque del warlock";
	a_spells("init_spells", 176).f_info_2[3] = "";
	a_spells("init_spells", 176).f_weavable = 1;
	a_spells("init_spells", 124).f_name[2] = "Unverwundbarkeit";
	a_spells("init_spells", 124).f_name[1] = "Invulnerability";
	a_spells("init_spells", 124).f_name[3] = "Invulnerabilidad";
	a_spells("init_spells", 124).f_cost = 5;
	a_spells("init_spells", 124).f_level = 15;
	a_spells("init_spells", 124).f_duration = 1;
	a_spells("init_spells", 124).f_school = 50;
	a_spells("init_spells", 124).f_info_1[2] = "Macht den Warlock f\374r kurze Zeit";
	a_spells("init_spells", 124).f_info_2[2] = "unverwundbar gegen physischen Schaden!";
	a_spells("init_spells", 124).f_info_1[1] = "The warlock becomes invulnerable";
	a_spells("init_spells", 124).f_info_2[1] = "to physical damage for a short time!";
	a_spells("init_spells", 124).f_info_1[3] = "Nadie puede danar al warlock";
	a_spells("init_spells", 124).f_info_2[3] = "por poco tiempo!";
	a_spells("init_spells", 124).f_weavable = 1;
	a_spells("init_spells", 167).f_name[2] = "Heile Kreatur";
	a_spells("init_spells", 167).f_name[1] = "Heal Creature";
	a_spells("init_spells", 167).f_name[3] = "Curar Kriatura";
	a_spells("init_spells", 167).f_cost = 1;
	a_spells("init_spells", 167).f_level = 3;
	a_spells("init_spells", 167).f_duration = 0;
	a_spells("init_spells", 167).f_school = 67;
	a_spells("init_spells", 167).f_info_1[2] = "Gibt einer Kreatur verlorene";
	a_spells("init_spells", 167).f_info_2[2] = "Lebenspunkte zur\374ck";
	a_spells("init_spells", 167).f_info_1[1] = "Gives a creature back lost";
	a_spells("init_spells", 167).f_info_2[1] = "Life Points";
	a_spells("init_spells", 167).f_info_1[3] = "Revuelve Puntos de Vida perdidas";
	a_spells("init_spells", 167).f_info_2[3] = "de una kriatura";
	a_spells("init_spells", 167).f_weavable = 1;
	a_spells("init_spells", 168).f_name[2] = "Verzaubere Kreatur 1";
	a_spells("init_spells", 168).f_name[1] = "Enchant Creature 1";
	a_spells("init_spells", 168).f_name[3] = "Mejorar Kriatura 1";
	a_spells("init_spells", 168).f_cost = 1;
	a_spells("init_spells", 168).f_level = 5;
	a_spells("init_spells", 168).f_duration = 10;
	a_spells("init_spells", 168).f_school = 67;
	a_spells("init_spells", 168).f_info_1[2] = "Gibt einer Kreatur schaden +1";
	a_spells("init_spells", 168).f_info_2[2] = "und attacke +1";
	a_spells("init_spells", 168).f_info_1[1] = "Gives a creature Damage +1";
	a_spells("init_spells", 168).f_info_2[1] = "and Attack +1";
	a_spells("init_spells", 168).f_info_1[3] = "Mejora una criatura de";
	a_spells("init_spells", 168).f_info_2[3] = "Ataque +1 and Dano +1";
	a_spells("init_spells", 168).f_weavable = 1;
	a_spells("init_spells", 69).f_name[2] = "Kreatur entgiften";
	a_spells("init_spells", 69).f_name[1] = "Cure Creature Poison";
	a_spells("init_spells", 69).f_name[3] = "Curar Criatura Envenenada";
	a_spells("init_spells", 69).f_cost = 1;
	a_spells("init_spells", 69).f_level = 6;
	a_spells("init_spells", 69).f_duration = 0;
	a_spells("init_spells", 69).f_school = 67;
	a_spells("init_spells", 69).f_info_1[2] = "Heilt Vergiftungen einer Kreatur";
	a_spells("init_spells", 69).f_info_2[2] = "";
	a_spells("init_spells", 69).f_info_1[1] = "Cures a creature from poison";
	a_spells("init_spells", 69).f_info_2[1] = "";
	a_spells("init_spells", 69).f_info_1[3] = "Cura una criatura envenenada";
	a_spells("init_spells", 69).f_info_2[3] = "";
	a_spells("init_spells", 169).f_name[2] = "Verzaubere Kreatur 2";
	a_spells("init_spells", 169).f_name[1] = "Enchant Creature 2";
	a_spells("init_spells", 169).f_name[3] = "Mejorar Kriatura 2";
	a_spells("init_spells", 169).f_cost = 1;
	a_spells("init_spells", 169).f_level = 8;
	a_spells("init_spells", 169).f_duration = 10;
	a_spells("init_spells", 169).f_school = 67;
	a_spells("init_spells", 169).f_info_1[2] = "Gibt einer Kreatur Schaden +2,";
	a_spells("init_spells", 169).f_info_2[2] = "Attacke +2 und Geschwindigkeit +1";
	a_spells("init_spells", 169).f_info_1[1] = "Gives a creature Damage +2,";
	a_spells("init_spells", 169).f_info_2[1] = "Attack +2, Speed +1";
	a_spells("init_spells", 169).f_info_1[3] = "Mejora una criatura de";
	a_spells("init_spells", 169).f_info_2[3] = "Ataque +2, Dano +2 y Velocidad +1";
	a_spells("init_spells", 169).f_weavable = 1;
	a_spells("init_spells", 184).f_name[2] = "Runen entfernen";
	a_spells("init_spells", 184).f_name[1] = "Remove Runes";
	a_spells("init_spells", 184).f_name[3] = "Destruya Runas";
	a_spells("init_spells", 184).f_cost = 5;
	a_spells("init_spells", 184).f_level = 9;
	a_spells("init_spells", 184).f_duration = 0;
	a_spells("init_spells", 184).f_school = 67;
	a_spells("init_spells", 184).f_info_1[2] = "Entfernt alle Runen in der";
	a_spells("init_spells", 184).f_info_2[2] = "Umgebung des Magiers";
	a_spells("init_spells", 184).f_info_1[1] = "Removes all runes";
	a_spells("init_spells", 184).f_info_2[1] = "near the caster";
	a_spells("init_spells", 184).f_info_1[3] = "Borra todas la runas";
	a_spells("init_spells", 184).f_info_2[3] = "alrededor del mago";
	a_spells("init_spells", 184).f_weavable = 1;
	a_spells("init_spells", 170).f_name[2] = "Verzaubere Kreatur 3";
	a_spells("init_spells", 170).f_name[1] = "Enchant Creature 3";
	a_spells("init_spells", 170).f_name[3] = "Mejorar Kriatura 3";
	a_spells("init_spells", 170).f_cost = 1;
	a_spells("init_spells", 170).f_level = 11;
	a_spells("init_spells", 170).f_duration = 10;
	a_spells("init_spells", 170).f_school = 67;
	a_spells("init_spells", 170).f_info_1[2] = "Gibt einer Kreatur schaden +3,";
	a_spells("init_spells", 170).f_info_2[2] = "attacke +3 und Geschwindigkeit +2";
	a_spells("init_spells", 170).f_info_1[1] = "Gives a creature Damage +3,";
	a_spells("init_spells", 170).f_info_2[1] = "Attack +3, Speed +2";
	a_spells("init_spells", 170).f_info_1[3] = "Mejora una criatura de";
	a_spells("init_spells", 170).f_info_2[3] = "Ataque +3, Dano +3 y Velocidad +2";
	a_spells("init_spells", 170).f_weavable = 1;
	a_spells("init_spells", 171).f_name[2] = "Verzaubere Kreatur 4";
	a_spells("init_spells", 171).f_name[1] = "Enchant Creature 4";
	a_spells("init_spells", 171).f_name[3] = "Mejorar Kriatura 4";
	a_spells("init_spells", 171).f_cost = 1;
	a_spells("init_spells", 171).f_level = 14;
	a_spells("init_spells", 171).f_duration = 10;
	a_spells("init_spells", 171).f_school = 67;
	a_spells("init_spells", 171).f_info_1[2] = "Gibt einer Kreatur Schaden +4,";
	a_spells("init_spells", 171).f_info_2[2] = "Attacke +4 und Geschwindigkeit +3";
	a_spells("init_spells", 171).f_info_1[1] = "Gives a creature Damage +4,";
	a_spells("init_spells", 171).f_info_2[1] = "Attack +4 and Speed +3";
	a_spells("init_spells", 171).f_info_1[3] = "Mejora una criatura de";
	a_spells("init_spells", 171).f_info_2[3] = "Ataque +4, Dano +4 y Velocidad +3";
	a_spells("init_spells", 171).f_weavable = 1;
	a_spells("init_spells", 99).f_name[2] = "Drache Beschw\366ren";
	a_spells("init_spells", 99).f_name[1] = "Summon Dragon";
	a_spells("init_spells", 99).f_name[3] = "Conjurar Dragon";
	a_spells("init_spells", 99).f_cost = 30;
	a_spells("init_spells", 99).f_level = 15;
	a_spells("init_spells", 99).f_duration = 0;
	a_spells("init_spells", 99).f_school = 67;
	a_spells("init_spells", 99).f_summoning = 9;
	a_spells("init_spells", 99).f_info_1[2] = "Beschw\366rt einen Drachen";
	a_spells("init_spells", 99).f_info_2[2] = "(Dieser schl\344gt T\374ren ein!)";
	a_spells("init_spells", 99).f_info_1[1] = "Summons a dragon";
	a_spells("init_spells", 99).f_info_2[1] = "(He breaks down doors!)";
	a_spells("init_spells", 99).f_info_1[3] = "Conjura un dragon";
	a_spells("init_spells", 99).f_info_2[3] = "(El quebra puertas!)";
	a_spells("init_spells", 200).f_name[2] = "Lichtzauber";
	a_spells("init_spells", 200).f_name[1] = "Light Spell";
	a_spells("init_spells", 200).f_name[3] = "Hechizo de Luz";
	a_spells("init_spells", 200).f_cost = 0;
	a_spells("init_spells", 200).f_level = 0;
	a_spells("init_spells", 200).f_duration = 0;
	a_spells("init_spells", 200).f_school = 99;
	a_spells("init_spells", 200).f_info_1[2] = "";
	a_spells("init_spells", 200).f_info_2[2] = "";
	a_spells("init_spells", 200).f_info_1[1] = "";
	a_spells("init_spells", 200).f_info_2[1] = "";
	a_spells("init_spells", 200).f_info_1[3] = "";
	a_spells("init_spells", 200).f_info_2[3] = "";
}

static intptr_t p_initjoystick() {
if (SDL_InitSubSystem(SDL_INIT_JOYSTICK) != 0)
    return 0;
if (SDL_NumJoysticks() == 0)
    return 0;
joystick = SDL_JoystickOpen(0);
if (!joystick)
    return 0;
return 1;

}

static intptr_t p_initkeyboard() {
keystate = SDL_GetKeyState(&numkeys);
return 1;

}

static intptr_t p_initmouse() {
return 1;

}

static intptr_t p_initnetwork() {
return 1;

}

static intptr_t p_initsound() {
SDL_InitSubSystem(SDL_INIT_AUDIO);
Mix_OpenAudio(44100, AUDIO_S16SYS, 2, 4096);

}

static intptr_t p_initsprite() {
return SDL_Init(SDL_INIT_VIDEO) == 0;

}

static char * p_insertelement(LinkedList& p1) {
struct ListElement *newelem = p1.alloc_elem();
if (!newelem)
    return 0;
if (p1.length == 0) {
    insertonly(p1, newelem);
} else if (!p1.current || p1.current == p1.root) {
    insertfirst(p1, newelem);
} else {
    newelem->next = p1.current;
    newelem->prev = p1.current->prev;
    newelem->next->prev = newelem;
    newelem->prev->next = newelem;
    p1.current = newelem;
    p1.length += 1;
}
return reinterpret_cast<char *>(p1.current);

}

static intptr_t p_int(float p1) {
return p1;

}

static intptr_t p_is_floor(int16_t v_feld) {
	if (v_feld == 4 || v_feld == 89 || (v_feld >= 113 && v_feld <= 116) || v_feld == 91 || v_feld == 133 || v_feld == 134 || v_feld == 204 || (v_feld >= 195 && v_feld <= 198)) {
		return 1;
	}
	return 0;
}

static intptr_t p_is_waterfield(int16_t v_x, int16_t v_y, int16_t v_level) {
	int16_t v_testfeld = 0;
	if (!v_level) {
		v_level = a_spieler("is_waterfield", g_akt_spieler).f_level;
	}
	v_testfeld = a_labyrinth("is_waterfield", v_level, v_x, v_y).f_feld;
	if (a_fields("is_waterfield", v_testfeld).f_water == 1) {
		return 1;
	} else {
		return 0;
	}
}

static intptr_t p_isthydra(int16_t v_x, int16_t v_y) {
	int16_t v_f = 0;
	v_f = a_labyrinth("isthydra", a_spieler("isthydra", g_akt_spieler).f_level, v_x, v_y).f_feld;
	if (v_f == 137 || v_f == 138 || v_f == 139 || v_f == 140 || v_f == 141 || v_f == 142 || v_f == 143 || v_f == 144 || v_f == 145 || v_f == 146 || v_f == 147 || v_f == 148) {
		return 1;
	} else {
		return 0;
	}
}

static intptr_t p_istknochen(int16_t v_feld) {
	if (v_feld == 5 || v_feld == 150 || v_feld == 151 || v_feld == 152 || v_feld == 153 || v_feld == 154 || v_feld == 155 || v_feld == 156 || v_feld == 157 || v_feld == 163 || v_feld == 191) {
		return 1;
	}
	return 0;
}

static intptr_t p_istmauer(int16_t v_feld) {
	if (v_feld == 1 || v_feld == 20 || (v_feld >= 101 && v_feld <= 104) || v_feld == 165 || v_feld == 88 || v_feld == 90 || v_feld == 55) {
		return 1;
	}
	return 0;
}

static intptr_t p_istoutdoor() {
	if (a_sonderlevel("istoutdoor", a_spieler("istoutdoor", g_akt_spieler).f_level) == 9 || a_sonderlevel("istoutdoor", a_spieler("istoutdoor", g_akt_spieler).f_level) == 6 || a_sonderlevel("istoutdoor", a_spieler("istoutdoor", g_akt_spieler).f_level) == 11 || a_sonderlevel("istoutdoor", a_spieler("istoutdoor", g_akt_spieler).f_level) == 10) {
		return 1;
	}
	return 0;
}

static intptr_t p_joystickaxisx() {
int x = SDL_JoystickGetAxis(joystick, 0);
if (x < -100) return -1;
if (x > 100) return 1;
return 0;

}

static intptr_t p_joystickaxisy() {
int y = SDL_JoystickGetAxis(joystick, 1);
if (y < -100) return -1;
if (y > 100) return 1;
return 0;

}

static intptr_t p_joystickbutton(intptr_t p1) {
return SDL_JoystickGetButton(joystick, p1-1);

}

static intptr_t p_keyboardpushed(intptr_t p1) {
if (p1 >= numkeys)
  return 0;
if (p1 < 0)
  return 0;
return keystate[p1] != 0;

}

static intptr_t p_keyboardreleased(intptr_t p1) {
if (p1 >= numkeys)
  return 0;
if (p1 < 0)
  return 0;
return keyrel[p1] != 0;

}

static intptr_t p_keydelay(int16_t v_mode) {
	static int32_t v_timeold;
	if (v_mode == 1) {
		if ((p_elapsedmilliseconds() - v_timeold) > 200) {
			v_timeold = (p_elapsedmilliseconds() + 200);
		} else {
			v_timeold = p_elapsedmilliseconds();
		}
		return 2;
	} else {
		if ((p_elapsedmilliseconds() - v_timeold) > g_key_repeat_delay) {
			return 1;
		} else {
			return 0;
		}
	}
}

static intptr_t p_kopiere_matrix() {
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	for (v_y = 1; v_y <= 13; v_y += 1) {
		for (v_x = 1; v_x <= 13; v_x += 1) {
			if (((a_spieler("kopiere_matrix", g_akt_spieler).f_character_x - 7) + v_x) > 0 && ((a_spieler("kopiere_matrix", g_akt_spieler).f_character_y - 7) + v_y) > 0) {
				if (!p_blockiert(((a_spieler("kopiere_matrix", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("kopiere_matrix", g_akt_spieler).f_character_y - 7) + v_y), a_spieler("kopiere_matrix", g_akt_spieler).f_level)) {
					a_matrix("kopiere_matrix", v_x, v_y) = 9998;
				} else {
					a_matrix("kopiere_matrix", v_x, v_y) = 9999;
				}
			}
		}
	}
}

static intptr_t p_kopiere_matrix2() {
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	for (v_y = 1; v_y <= 13; v_y += 1) {
		for (v_x = 1; v_x <= 13; v_x += 1) {
			if (((a_spieler("kopiere_matrix2", g_akt_spieler).f_creature_x - 7) + v_x) > 0 && ((a_spieler("kopiere_matrix2", g_akt_spieler).f_creature_y - 7) + v_y) > 0) {
				if (!p_blockiert(((a_spieler("kopiere_matrix2", g_akt_spieler).f_creature_x - 7) + v_x), ((a_spieler("kopiere_matrix2", g_akt_spieler).f_creature_y - 7) + v_y), a_spieler("kopiere_matrix2", g_akt_spieler).f_level)) {
					a_matrix("kopiere_matrix2", v_x, v_y) = 9998;
				} else {
					a_matrix("kopiere_matrix2", v_x, v_y) = 9999;
				}
			}
		}
	}
}

static char * p_lastelement(LinkedList& p1) {
if (!p1.last)
    return 0;
p1.current = p1.last;
p1.index = p1.length - 1;
return reinterpret_cast<char *>(p1.current);

}

static std::string p_lcase(std::string p1) {
std::string::iterator it;
for (it = p1.begin(); it < p1.end(); it++) {
  *it = tolower(*it);
}
return p1;

}

static intptr_t p_len(std::string p1) {
return p1.length();

}

static void p_line(intptr_t p1, intptr_t p2, intptr_t p3, intptr_t p4, intptr_t p5) {
Uint32 color;
if (p5 < 0) {
  color = SDL_MapRGB(screen->format, frontcolor.r, frontcolor.g, frontcolor.b);
} else {
  color = SDL_MapRGB(screen->format, (p5 >> 16) && 0xff, (p5 >> 8) && 0xff, p5 && 0xff);
}
linedraw(p1, p2, p3, p4, color);

}

static void p_linexy(intptr_t p1, intptr_t p2, intptr_t p3, intptr_t p4) {
linedraw(p1, p2, p3 - p1, p4 - p2, -1);

}

static intptr_t p_liste_leeren() {
	int16_t v_i = 0;
	for (v_i = 1; v_i <= 184; v_i += 1) {
		a_zauberliste("liste_leeren", v_i) = 0;
	}
}

static intptr_t p_loadmodule(intptr_t p1, std::string p2) {
if (p1 < 0)
    p1 = --modmap_last_dynamic;
if (modmap.count(p1) > 0) {
    Mix_FreeMusic(modmap[p1]);
    modmap.erase(p1);
}
Mix_Music *music = Mix_LoadMUS(p2.c_str());
if (!music)
    return 0;
modmap[p1] = music;
return (p1 < 0) ? p1 : 1;

}

static intptr_t p_locken(int16_t v_welche) {
	int16_t v_iii = 0;
	int16_t v_jjj = 0;
	for (v_iii = 1; v_iii <= 216; v_iii += 1) {
		if (a_unmoeglich("locken", v_iii).f_name == a_skills("locken", v_welche, g_akt_spieler).f_nummer) {
			for (v_jjj = 0; v_jjj <= 143; v_jjj += 1) {
				if (a_unmoeglich("locken", v_iii).f_locked == a_skills("locken", v_jjj, g_akt_spieler).f_nummer) {
					a_skills("locken", v_jjj, g_akt_spieler).f_gelocked += 1;
				}
			}
		}
	}
}

static intptr_t p_los(int16_t v_no_tunnel) {
	intptr_t v_i = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	g_blocked = 0;
	if (!g_spell_x || !g_spell_y) {
		if (g_spell_x < -1) {
			v_x = (((intptr_t) a_spieler("los", g_akt_spieler).f_character_x + g_spell_x) + 1);
			v_y = a_spieler("los", g_akt_spieler).f_character_y;
			for (v_i = v_x; v_i <= a_spieler("los", g_akt_spieler).f_character_x; v_i += 1) {
				if (p_blockiert(v_x, v_y, a_spieler("los", g_akt_spieler).f_level) == 1) {
					g_blocked = 1;
				}
				v_x = (v_x + 1);
			}
		}
		if (g_spell_x > 1) {
			v_x = a_spieler("los", g_akt_spieler).f_character_x;
			v_y = a_spieler("los", g_akt_spieler).f_character_y;
			for (v_i = v_x; v_i <= ((a_spieler("los", g_akt_spieler).f_character_x + g_spell_x) - 1); v_i += 1) {
				if (p_blockiert(v_x, v_y, a_spieler("los", g_akt_spieler).f_level) == 1) {
					g_blocked = 1;
				}
				v_x = (v_x + 1);
			}
		}
		if (g_spell_y < -1) {
			v_x = a_spieler("los", g_akt_spieler).f_character_x;
			v_y = (((intptr_t) a_spieler("los", g_akt_spieler).f_character_y + g_spell_y) + 1);
			for (v_i = v_y; v_i <= a_spieler("los", g_akt_spieler).f_character_y; v_i += 1) {
				if (p_blockiert(v_x, v_y, a_spieler("los", g_akt_spieler).f_level) == 1) {
					g_blocked = 1;
				}
				v_y = (v_y + 1);
			}
		}
		if (g_spell_y > 1) {
			v_x = a_spieler("los", g_akt_spieler).f_character_x;
			v_y = a_spieler("los", g_akt_spieler).f_character_y;
			for (v_i = v_y; v_i <= ((a_spieler("los", g_akt_spieler).f_character_y + g_spell_y) - 1); v_i += 1) {
				if (p_blockiert(v_x, v_y, a_spieler("los", g_akt_spieler).f_level) == 1) {
					g_blocked = 1;
				}
				v_y = (v_y + 1);
			}
		}
	} else {
		g_blocked = 1;
	}
	if (p_habich(156) > 0 && !v_no_tunnel) {
		g_blocked = 0;
	}
	return g_blocked;
}

static intptr_t p_los2() {
	intptr_t v_i = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	g_blocked = 0;
	if (!g_spell_x || !g_spell_y) {
		if (g_spell_x < -1) {
			v_x = (((intptr_t) a_spieler("los2", g_akt_spieler).f_creature_x + g_spell_x) + 1);
			v_y = a_spieler("los2", g_akt_spieler).f_creature_y;
			for (v_i = v_x; v_i <= a_spieler("los2", g_akt_spieler).f_creature_x; v_i += 1) {
				if (p_blockiert(v_x, v_y, a_spieler("los2", g_akt_spieler).f_level) == 1) {
					g_blocked = 1;
				}
				v_x = (v_x + 1);
			}
		}
		if (g_spell_x > 1) {
			v_x = a_spieler("los2", g_akt_spieler).f_creature_x;
			v_y = a_spieler("los2", g_akt_spieler).f_creature_y;
			for (v_i = v_x; v_i <= ((a_spieler("los2", g_akt_spieler).f_creature_x + g_spell_x) - 1); v_i += 1) {
				if (p_blockiert(v_x, v_y, a_spieler("los2", g_akt_spieler).f_level) == 1) {
					g_blocked = 1;
				}
				v_x = (v_x + 1);
			}
		}
		if (g_spell_y < -1) {
			v_x = a_spieler("los2", g_akt_spieler).f_creature_x;
			v_y = (((intptr_t) a_spieler("los2", g_akt_spieler).f_creature_y + g_spell_y) + 1);
			for (v_i = v_y; v_i <= a_spieler("los2", g_akt_spieler).f_creature_y; v_i += 1) {
				if (p_blockiert(v_x, v_y, a_spieler("los2", g_akt_spieler).f_level) == 1) {
					g_blocked = 1;
				}
				v_y = (v_y + 1);
			}
		}
		if (g_spell_y > 1) {
			v_x = a_spieler("los2", g_akt_spieler).f_creature_x;
			v_y = a_spieler("los2", g_akt_spieler).f_creature_y;
			for (v_i = v_y; v_i <= ((a_spieler("los2", g_akt_spieler).f_creature_y + g_spell_y) - 1); v_i += 1) {
				if (p_blockiert(v_x, v_y, a_spieler("los2", g_akt_spieler).f_level) == 1) {
					g_blocked = 1;
				}
				v_y = (v_y + 1);
			}
		}
	} else {
		g_blocked = 1;
	}
	return g_blocked;
}

static intptr_t p_luck() {
	int16_t v_akt_luck = 0;
	v_akt_luck = a_spieler("luck", g_akt_spieler).f_luck_score;
	if (p_habich(75) > 0) {
		v_akt_luck = (v_akt_luck + p_habich(75));
	}
	v_akt_luck = (v_akt_luck + a_spieler("luck", g_akt_spieler).f_gluecksgegenstand);
	if (v_akt_luck > 15) {
		v_akt_luck = 15;
	}
	return v_akt_luck;
}

static intptr_t p_manhatten(int16_t v_x, int16_t v_y, int16_t v_target_x, int16_t v_target_y) {
	return (p_abs(((float) v_x - v_target_x)) + p_abs(((float) v_y - v_target_y)));
}

static intptr_t p_max(int16_t v_zahl1, int16_t v_zahl2) {
	if (v_zahl1 < v_zahl2) {
		return v_zahl2;
	} else {
		return v_zahl1;
	}
}

static intptr_t p_maxlife() {
	int16_t v_akt_maxlife = 0;
	intptr_t v_okay = 0;
	v_akt_maxlife = a_spieler("maxlife", g_akt_spieler).f_maxlifepoints;
	v_okay = 0;
	if (a_spieler("maxlife", g_akt_spieler).f_fluch == 23) {
		v_akt_maxlife = 1;
		v_okay = 1;
	}
	if (p_habich(86) > 0 && !v_okay) {
		v_akt_maxlife = (a_spieler("maxlife", g_akt_spieler).f_maxlifepoints / 3);
		v_okay = 1;
	}
	if (p_habich(88) > 0 && !v_okay) {
		v_akt_maxlife = (a_spieler("maxlife", g_akt_spieler).f_maxlifepoints / 3);
		v_okay = 1;
	}
	if (p_habich(89) > 0 && !v_okay) {
		v_akt_maxlife = (a_spieler("maxlife", g_akt_spieler).f_maxlifepoints / 2);
		v_okay = 1;
	}
	if (p_habich(90) > 0 && !v_okay) {
		v_akt_maxlife = (a_spieler("maxlife", g_akt_spieler).f_maxlifepoints * 3);
	}
	v_akt_maxlife = (v_akt_maxlife + a_spieler("maxlife", g_akt_spieler).f_lifepointgegenstand);
	if (a_skills("maxlife", 100, g_akt_spieler).f_gewaehlt == 1) {
		v_akt_maxlife = (v_akt_maxlife + (a_spieler("maxlife", g_akt_spieler).f_strength * 2));
	}
	if (v_akt_maxlife > 150) {
		v_akt_maxlife = 150;
	}
	if (a_skills("maxlife", 124, g_akt_spieler).f_gewaehlt == 1) {
		if (v_akt_maxlife > 50) {
			v_akt_maxlife = 50;
		}
	}
	return v_akt_maxlife;
}

static intptr_t p_maxmana() {
	int16_t v_akt_maxmana = 0;
	v_akt_maxmana = a_spieler("maxmana", g_akt_spieler).f_maxmana;
	v_akt_maxmana = (v_akt_maxmana + a_spieler("maxmana", g_akt_spieler).f_managegenstand);
	if (v_akt_maxmana > 150) {
		v_akt_maxmana = 150;
	}
	if (a_skills("maxmana", 127, g_akt_spieler).f_gewaehlt == 1) {
		if (v_akt_maxmana > 50) {
			v_akt_maxmana = 50;
		}
	}
	return v_akt_maxmana;
}

static std::string p_mid(std::string p1, intptr_t p2, intptr_t p3) {
if (p2 > (int32_t) p1.length())
  return "";
if (p2 <= 0)
  p2 = 1;
if (p3 < 0)
  p3 = 0;
return p1.substr(p2 - 1, p3);

}

static intptr_t p_min(int16_t v_zahl1, int16_t v_zahl2) {
	if (v_zahl1 > v_zahl2) {
		return v_zahl2;
	} else {
		return v_zahl1;
	}
}

static intptr_t p_mousebutton(intptr_t p1) {
if (p1 == 1)
    return (mousebuttons & SDL_BUTTON(SDL_BUTTON_LEFT)) != 0;
if (p1 == 2)
    return (mousebuttons & SDL_BUTTON(SDL_BUTTON_RIGHT)) != 0;

}

static void p_mouselocate(intptr_t p1, intptr_t p2) {
SDL_WarpMouse(p1, p2);

}

static intptr_t p_mousex() {
return mousex;

}

static intptr_t p_mousey() {
return mousey;

}

static std::string p_nachricht4(int16_t v_text) {
	std::string v_ausgabe;
	v_ausgabe = a_message_text("nachricht4", v_text, (1 + g_language));
	return v_ausgabe;
}

static std::string p_nachricht5(int16_t v_text, int16_t v_mon) {
	std::string v_ausgabe;
	v_ausgabe = a_message_text("nachricht5", v_text, (1 + g_language)) + a_monster("nachricht5", v_mon).f_name[(1 + g_language)];
	return v_ausgabe;
}

static std::string p_nachricht6(int16_t v_text, std::string v_text2) {
	std::string v_ausgabe;
	v_ausgabe = a_message_text("nachricht6", v_text, (1 + g_language)) + v_text2;
	return v_ausgabe;
}

static intptr_t p_neighbour_offset(int16_t v_nr, int8_t v_xy) {
	int16_t v_x = 0;
	int16_t v_y = 0;
	v_x = 0;
	v_y = 0;
	switch (v_nr) {
	case 0:
		v_x = 0;
		v_y = 0;
		break;
	case 1:
		v_x = 0;
		v_y = -1;
		break;
	case 2:
		v_x = 1;
		v_y = 0;
		break;
	case 3:
		v_x = 0;
		v_y = 1;
		break;
	case 4:
		v_x = -1;
		v_y = 0;
		break;
	case 5:
		v_x = 1;
		v_y = -1;
		break;
	case 6:
		v_x = 1;
		v_y = 1;
		break;
	case 7:
		v_x = -1;
		v_y = 1;
		break;
	case 8:
		v_x = -1;
		v_y = -1;
		break;
	case 9:
		v_x = 0;
		v_y = -2;
		break;
	case 10:
		v_x = 2;
		v_y = 0;
		break;
	case 11:
		v_x = 0;
		v_y = 2;
		break;
	case 12:
		v_x = -2;
		v_y = 0;
		break;
	}
	if (!v_xy) {
		return v_x;
	} else {
		return v_y;
	}
}

static char * p_nextelement(LinkedList& p1) {
if (!p1.current) {
  p1.current = p1.root;
  p1.index = 0;
  return reinterpret_cast<char *>(p1.current);
}
if (!p1.current->next)
  return 0; /* Don't walk off the end */
p1.current = p1.current->next;
if (p1.index != LISTINDEX_INVALID)
  p1.index += 1;
return reinterpret_cast<char *>(p1.current);

}

static intptr_t p_nextpackfile() {
return nextpack();

}

static intptr_t p_old_message(std::string v_ausgabe, int16_t v_farbe) {
	intptr_t v_frei = 0;
	intptr_t v_i = 0;
	v_ausgabe = p_formatdate("%hh:%ii:%ss", p_date()) + "  " + v_ausgabe;
	v_i = 1;
	v_frei = 0;
	do {
		if (a_old_messages("old_message", v_i, g_akt_spieler).f_nachricht == " ") {
			v_frei = v_i;
		}
		v_i = (v_i + 1);
	} while (!(v_frei > 0 || v_i > 25));
	if (v_frei > 0) {
		a_old_messages("old_message", v_frei, g_akt_spieler).f_nachricht = v_ausgabe;
		a_old_messages("old_message", v_frei, g_akt_spieler).f_farbe = v_farbe;
	} else {
		for (v_i = 1; v_i <= 24; v_i += 1) {
			a_old_messages("old_message", v_i, g_akt_spieler).f_nachricht = a_old_messages("old_message", (v_i + 1), g_akt_spieler).f_nachricht;
			a_old_messages("old_message", v_i, g_akt_spieler).f_farbe = a_old_messages("old_message", (v_i + 1), g_akt_spieler).f_farbe;
		}
		a_old_messages("old_message", 25, g_akt_spieler).f_nachricht = v_ausgabe;
		a_old_messages("old_message", 25, g_akt_spieler).f_farbe = v_farbe;
	}
}

static intptr_t p_openconsole() {
return 1;

}

static intptr_t p_opennetworkconnection(std::string p1, int16_t p2) {
char service[10];
struct addrinfo hints = {0, };
struct addrinfo *addrs;
struct addrinfo *addr;
int sockfd;
sprintf(service, "%d", p2);
hints.ai_flags = AI_ADDRCONFIG | AI_V4MAPPED | AI_NUMERICSERV;
hints.ai_family = AF_UNSPEC; /* allow IPv4 or IPv6 addresses */
hints.ai_socktype = SOCK_STREAM;
hints.ai_protocol = 0; /* allow any stream protocol */
if (getaddrinfo(p1.c_str(), service, &hints, &addrs) < 0)
    return 0;
/* getaddrinfo can return multiple addresses.
 * Try each in turn until one succeeds. */
for (addr = addrs; addr; addr = addr->ai_next) {
    sockfd = socket(addr->ai_family, addr->ai_socktype, addr->ai_protocol);
    if (sockfd < 0)
        continue;
    if (connect(sockfd, addr->ai_addr, addr->ai_addrlen) >= 0)
        break; /* got one */
    close(sockfd);
}
freeaddrinfo(addrs);
if (!addr)
    return 0; /* all addresses failed */
return sockfd + 1;  /* offset by one because sockfd might be 0 */

}

static intptr_t p_openpack(std::string p1) {
closepack();
packfd = open(p1.c_str(), O_RDONLY);
return packfd >= 0;

}

static intptr_t p_openscreen(intptr_t p1, intptr_t p2, intptr_t p3, std::string p4) {
uint32_t flags = SDL_HWSURFACE | SDL_DOUBLEBUF | SDL_FULLSCREEN;
if (!SDL_WasInit(SDL_INIT_VIDEO)) {
    SDL_InitSubSystem(SDL_INIT_VIDEO);
}
screen = SDL_SetVideoMode(p1, p2, p3, flags);
if (!screen)
    return 0;
SDL_WM_SetCaption(p4.c_str(), "");
SDL_ShowCursor(SDL_DISABLE);
return 1;

}

static intptr_t p_openwindowedscreen(intptr_t p1, intptr_t p2, intptr_t p3, intptr_t p4, intptr_t p5, intptr_t p6, intptr_t p7, intptr_t p8) {
uint32_t flags = SDL_HWSURFACE | SDL_DOUBLEBUF;
if (p6) {
    flags |= SDL_RESIZABLE;
}
if (!SDL_WasInit(SDL_INIT_VIDEO)) {
    SDL_InitSubSystem(SDL_INIT_VIDEO);
}
screen = SDL_SetVideoMode(p4, p5, 0, flags);
if (!screen)
    return 0;
SDL_ShowCursor(SDL_DISABLE);
/* SDL_WM_GrabInput(SDL_GRAB_ON);    too annoying while debugging */
return 1;

}

static int32_t p_parsedate(std::string p1, std::string p2) {
char c;
int n;
int v;
struct tm tm = { 0, 0, 0, 1, 0, 0, 0, 0, 0 };
const char *q = p1.c_str();
const char *r = p2.c_str();
while (c = *q++) {
    if (c == '%') {
        if (q[0] == 'y' && q[1] == 'y' && q[2] == 'y' && q[3] == 'y') {
            n = sscanf(r, "%4d", &v);
            tm.tm_year = v - 1900;
        } else if (q[0] == 'y' && q[1] == 'y') {
            n = sscanf(r, "%2d", &v);
            tm.tm_year = v + 100;
        } else if (q[0] == 'm' && q[1] == 'm') {
            n = sscanf(r, "%2d", &v);
            tm.tm_mon = v - 1;
        } else if (q[0] == 'd' && q[1] == 'd') {
            n = sscanf(r, "%2d", &v);
            tm.tm_mday = v;
        } else if (q[0] == 'h' && q[1] == 'h') {
            n = sscanf(r, "%2d", &v);
            tm.tm_hour = v;
        } else if (q[0] == 'i' && q[1] == 'i') {
            n = sscanf(r, "%2d", &v);
            tm.tm_min = v;
        } else if (q[0] == 's' && q[1] == 's') {
            n = sscanf(r, "%2d", &v);
            tm.tm_sec = v;
        } else {
            n = 1;
        }
        if (n == EOF)
            return -1;
        r += n;
        q += n;
    } else {
        r++;
    }
}
return mktime(&tm);

}

static uint8_t p_peekc(char * p1) {
return * (uint8_t *) p1;

}

static intptr_t p_player_to_template() {
	int16_t v_i = 0;
	for (v_i = 144; v_i >= 1; v_i -= 1) {
		if (a_skills("player_to_template", v_i, g_akt_spieler).f_nummer) {
			LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[v_i] = a_skills("player_to_template", v_i, g_akt_spieler).f_gewaehlt;
		} else {
			LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[v_i] = 0;
		}
	}
}

static void p_playmodule(intptr_t p1) {
if (modmap.count(p1) == 0)
    return;
Mix_PlayMusic(modmap[p1], -1);

}

static void p_playsound(intptr_t p1) {
if (soundmap.count(p1) == 0)
    return;
Mix_PlayChannel(-1, soundmap[p1], 0);

}

static intptr_t p_pm(int16_t v_p_numb) {
	int16_t v_result = 0;
	if (!v_p_numb) {
		v_p_numb = g_akt_spieler;
	}
	v_result = 1;
	while (v_p_numb > 1) {
		v_p_numb -= 1;
		v_result = (v_result * 2);
	}
	return v_result;
}

static intptr_t p_power(int16_t v_spell) {
	int16_t v_akt_power = 0;
	intptr_t v_i = 0;
	int16_t v_magelord = 0;
	intptr_t v_okay = 0;
	v_akt_power = a_spieler("power", g_akt_spieler).f_power_score;
	if (v_spell > 0) {
		if (a_skills("power", 35, g_akt_spieler).f_gewaehlt == 1) {
			v_akt_power = (v_akt_power + a_spells("power", v_spell).f_level);
		}
	}
	if (a_skills("power", 46, g_akt_spieler).f_gewaehlt == 1) {
		v_okay = 0;
		if (a_spieler("power", g_akt_spieler).f_lifepoints <= (p_maxlife() / 4) && !v_okay) {
			v_akt_power = (v_akt_power * 5);
			v_okay = 1;
		}
		if (a_spieler("power", g_akt_spieler).f_lifepoints <= (p_maxlife() / 3) && !v_okay) {
			v_akt_power = (v_akt_power * 4);
			v_okay = 1;
		}
		if (a_spieler("power", g_akt_spieler).f_lifepoints <= (p_maxlife() / 2) && !v_okay) {
			v_akt_power = (v_akt_power * 3);
			v_okay = 1;
		}
		if (a_spieler("power", g_akt_spieler).f_lifepoints <= (p_maxlife() / 1.5) && !v_okay) {
			v_akt_power = (v_akt_power * 2);
			v_okay = 1;
		}
	}
	if (p_habich(59) > 0) {
		v_akt_power = (v_akt_power * 2);
	}
	if (g_item_spell) {
		v_akt_power = g_item_spell;
	}
	v_akt_power = (v_akt_power + a_spieler("power", g_akt_spieler).f_powergegenstand);
	if (a_spieler("power", g_akt_spieler).f_fluch == 3) {
		v_akt_power = 1;
	}
	v_magelord = 0;
	for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
		if (a_skills("power", 63, v_i).f_gewaehlt == 1 && a_spieler("power", v_i).f_status == 1) {
			v_magelord = 2;
		}
	}
	v_akt_power = (v_akt_power + v_magelord);
	if (v_akt_power > 15) {
		v_akt_power = 15;
	}
	return v_akt_power;
}

static char * p_previouselement(LinkedList& p1) {
if (!p1.current || !p1.current->prev)
  return 0;
p1.current = p1.current->prev;
if (p1.index != LISTINDEX_INVALID)
  p1.index -= 1;
return reinterpret_cast<char *>(p1.current);

}

static void p_print(std::string p1) {
fputs(p1.c_str(), stdout);

}

static void p_printn(std::string p1) {
puts(p1.c_str());

}

static intptr_t p_punkte() {
	int16_t v_punkte = 0;
	int16_t v_x1 = 0;
	int16_t v_x2 = 0;
	int16_t v_x3 = 0;
	v_x1 = (a_spieler("punkte", g_akt_spieler).f_level * 10);
	v_x2 = (p_gold_anzahl() / 10);
	v_x3 = (a_spieler("punkte", g_akt_spieler).f_mks / 5);
	if (v_x2 > v_x1) {
		v_x2 = v_x1;
	}
	if (v_x3 > v_x1) {
		v_x3 = v_x1;
	}
	v_punkte = ((v_x1 + v_x2) + v_x3);
	v_punkte = (v_punkte + (p_anz_staffpieces() * 100));
	return v_punkte;
}

static intptr_t p_radius() {
	intptr_t v_levelmod = 0;
	intptr_t v_nachtsicht = 0;
	intptr_t v_nachtsichtw = 0;
	intptr_t v_sicht = 0;
	if (p_habich(86) > 0) {
		v_sicht = 7;
	} else {
		if (p_habich(88) > 0) {
			v_sicht = 4;
		} else {
			if (p_habich(89) > 0) {
				v_sicht = 6;
			} else {
				if (p_habich(87) > 0) {
					v_sicht = 5;
				} else {
					if (p_habich(90) > 0) {
						v_sicht = 4;
					} else {
						v_nachtsichtw = 0;
						if (a_skills("radius", 71, g_akt_spieler).f_gewaehlt == 1) {
							v_nachtsicht = 2;
						}
						v_sicht = (((p_max(a_spieler("radius", g_akt_spieler).f_light, p_habich(200)) + a_spieler("radius", g_akt_spieler).f_lichtgegenstand) + v_nachtsicht) + p_habich(36));
					}
				}
			}
		}
	}
	if (p_istoutdoor() == 1 || p_habich(200) == -1) {
		v_sicht = 8;
	}
	if (a_skills("radius", 132, g_akt_spieler).f_gewaehlt == 1) {
		v_sicht = (v_sicht / 2);
	}
	if (v_levelmod == 1) {
		v_sicht = (v_sicht / 2);
	}
	if (v_sicht < 1 || a_spieler("radius", g_akt_spieler).f_fluch == 8) {
		v_sicht = 1;
	}
	return v_sicht;
}

static intptr_t p_radius2() {
	int16_t v_sight = 0;
	v_sight = 0;
	switch (a_spieler("radius2", g_akt_spieler).f_creature_typ) {
	case 1:
		v_sight = 4;
		break;
	case 2:
		v_sight = 3;
		break;
	case 3:
		v_sight = 3;
		break;
	case 4:
		v_sight = 6;
		break;
	case 5:
		v_sight = 4;
		break;
	case 6:
		v_sight = 3;
		break;
	case 7:
		v_sight = 4;
		break;
	case 8:
		v_sight = 6;
		break;
	case 9:
		v_sight = 5;
		break;
	case 10:
		v_sight = 5;
		break;
	case 11:
		v_sight = 6;
		break;
	case 12:
		v_sight = 4;
		break;
	case 13:
		v_sight = 4;
		break;
	case 14:
		v_sight = 6;
		break;
	case 15:
		v_sight = 5;
		break;
	case 20:
		v_sight = 5;
		break;
	}
	if (p_istoutdoor() == 1) {
		v_sight = 8;
	}
	return v_sight;
}

static intptr_t p_random(intptr_t p1) {
/* Generate a random integer from 0..p1 inclusive */
/* Strategy: Use libc random(), which returns 0..RAND_MAX inclusive,
 * and take the result modulo (p1+1). Avoid bias if p1+1 does not
 * divide evenly into RAND_MAX+1. Be very careful about overflow. */
long v, limit, top;
if (p1 <= 0)
  return 0;
if (p1 == 0x7FFFFFFF)  /* avoid overflow in p1+1 */
  return random() & 0x7FFFFFFF;
limit = p1 + 1;
if (RAND_MAX % limit == p1)  /* divides evenly? */
  return random() % limit;
/* RAND_MAX + 1 would overflow, so move the +1 out of the modulo */
/* This is safe because of the "divides evenly" check above. */
top = RAND_MAX - ((RAND_MAX % limit) + 1);
do { v = random(); } while (v > top);
return v % limit;

}

static intptr_t p_read_joystick() {
	intptr_t v_i = 0;
	if (g_joystick_used == 1) {
		p_examinejoystick();
		g_jax = p_joystickaxisx();
		g_jay = p_joystickaxisy();
		for (v_i = 1; v_i <= 12; v_i += 1) {
			a_jb("read_joystick", v_i) = p_joystickbutton(v_i);
		}
	}
}

static intptr_t p_readfile(intptr_t p1, std::string p2) {
if (p1 < 0)
    p1 = --filemap_last_dynamic;
if (filemap.count(p1) > 0) {
    fclose(filemap[p1]);
    filemap.erase(p1);
}
FILE *fp = fopen(p2.c_str(), "r");
if (!fp)
    return 0;
filemap[p1] = fp;
return (p1 < 0) ? p1 : 1;

}

static int32_t p_readlong(intptr_t p1) {
int b1, b2, b3, b4;
if (filemap.count(p1) == 0)
    return 0;
FILE *fp = filemap[p1];
b1 = fgetc(fp);
if (b1 == EOF)
  b1 = 0;
b2 = fgetc(fp);
if (b2 == EOF)
  b2 = 0;
b3 = fgetc(fp);
if (b3 == EOF)
  b3 = 0;
b4 = fgetc(fp);
if (b4 == EOF)
  b4 = 0;
return b1 + b2 * 256 + b3 * 256 * 256 + b4 * 256 * 256 * 256;

}

static std::string p_readstring(intptr_t p1) {
size_t bufsz = 1024;
size_t n = 0;
char *buffer = 0;
if (filemap.count(p1) == 0)
    return 0;
for (;;) {
    buffer = (char *) realloc(buffer, bufsz);
    if (fgets(buffer + n, bufsz - n, filemap[p1])) {
        n += strlen(buffer + n);
        if (buffer[n - 1] == '\n') {
            buffer[--n] = 0;
            break;
        }
    } else {
        break;
    }
    bufsz = bufsz * 2;
}
if (n > 1 && buffer[n - 1] == '\r')
  buffer[--n] = 0;
std::string r (buffer, n);
free(buffer);
return r;

}

static int16_t p_readword(intptr_t p1) {
int b1, b2;
if (filemap.count(p1) == 0)
    return 0;
FILE *fp = filemap[p1];
b1 = fgetc(fp);
if (b1 == EOF)
  b1 = 0;
b2 = fgetc(fp);
if (b2 == EOF)
  b2 = 0;
return b1 + b2 * 256;

}

static intptr_t p_ready_for_attack(int16_t v_status) {
	if (v_status == 2 || v_status == 3 || v_status == 5 || v_status == 7) {
		return 0;
	} else {
		return 1;
	}
}

static intptr_t p_reflexe() {
	int16_t v_akt_reflexe = 0;
	intptr_t v_okay = 0;
	v_akt_reflexe = a_spieler("reflexe", g_akt_spieler).f_dexterity;
	v_akt_reflexe = (v_akt_reflexe + a_spieler("reflexe", g_akt_spieler).f_dexteritygegenstand);
	v_okay = 0;
	if (a_spieler("reflexe", g_akt_spieler).f_fluch == 6) {
		v_akt_reflexe = 1;
		v_okay = 1;
	}
	if (a_spieler("reflexe", g_akt_spieler).f_fluch == 23 && !v_okay) {
		v_akt_reflexe = 1;
		v_okay = 1;
	}
	if (p_habich(86) > 0 && !v_okay) {
		v_akt_reflexe = 6;
		v_okay = 1;
	}
	if (p_habich(88) > 0 && !v_okay) {
		v_akt_reflexe = 6;
		v_okay = 1;
	}
	if (p_habich(89) > 0 && !v_okay) {
		v_akt_reflexe = 10;
		v_okay = 1;
	}
	if (p_habich(87) > 0 && !v_okay) {
		v_akt_reflexe = 6;
		v_okay = 1;
	}
	if (p_habich(90) > 0 && !v_okay) {
		v_akt_reflexe = 1;
	}
	v_akt_reflexe = (v_akt_reflexe + p_habich(175));
	v_akt_reflexe = (v_akt_reflexe - a_spieler("reflexe", g_akt_spieler).f_krankheit);
	if (v_akt_reflexe > 15) {
		v_akt_reflexe = 15;
	}
	return v_akt_reflexe;
}

static intptr_t p_releasemouse(intptr_t p1) {
SDL_WM_GrabInput(p1 ? SDL_GRAB_OFF : SDL_GRAB_ON);

}

static std::string p_replacestring(std::string p1, std::string p2, std::string p3) {
size_t pos;
if (p2.empty()) /* avoid infinite loop */
    return p1;
pos = p1.find(p2);
while (pos != std::string::npos) {
    p1.replace(pos, p2.length(), p3);
    pos = p1.find(p2, pos + p3.length());
}
return p1;

}

static void p_resetlist(LinkedList& p1) {
p1.current = 0;
p1.index = -1;

}

static intptr_t p_rgb(int8_t p1, int8_t p2, int8_t p3) {
return ((uint8_t) p1 << 16) | ((uint8_t) p2 << 8) | (uint8_t) p3;

}

static std::string p_right(std::string p1, intptr_t p2) {
if (p2 >= (int32_t) p1.length())
  return p1;
if (p2 <= 0)
  return "";
return p1.substr(p1.length() - p2);

}

static std::string p_rset(std::string p1, intptr_t p2) {
int spaces;
spaces = p2 - p1.length();
if (spaces < 0)
  spaces = 0;
return std::string(spaces, ' ') + p1.substr(0, p2);

}

static void p_runprogram(std::string p1) {
/* stub */

}

static intptr_t p_schutz_behinderung(intptr_t v_i) {
	int16_t v_bonus_behinderung = 0;
	v_bonus_behinderung = 0;
	v_bonus_behinderung = a_item("schutz_behinderung", a_inventory("schutz_behinderung", v_i, g_akt_spieler).f_name).f_attri1;
	return v_bonus_behinderung;
}

static intptr_t p_schutz_max(intptr_t v_i) {
	int16_t v_bonus_max = 0;
	v_bonus_max = 0;
	if (!a_inventory("schutz_max", v_i, g_akt_spieler).f_status) {
		v_bonus_max = a_item("schutz_max", a_inventory("schutz_max", v_i, g_akt_spieler).f_name).f_attri3;
	}
	if (a_inventory("schutz_max", v_i, g_akt_spieler).f_status == 1) {
		v_bonus_max = (a_item("schutz_max", a_inventory("schutz_max", v_i, g_akt_spieler).f_name).f_attri3 / 2);
	}
	return v_bonus_max;
}

static intptr_t p_schutz_min(intptr_t v_i) {
	int16_t v_bonus_min = 0;
	v_bonus_min = 0;
	if (!a_inventory("schutz_min", v_i, g_akt_spieler).f_status) {
		v_bonus_min = a_item("schutz_min", a_inventory("schutz_min", v_i, g_akt_spieler).f_name).f_attri2;
	}
	if (a_inventory("schutz_min", v_i, g_akt_spieler).f_status == 1) {
		v_bonus_min = (a_item("schutz_min", a_inventory("schutz_min", v_i, g_akt_spieler).f_name).f_attri2 / 2);
	}
	return v_bonus_min;
}

static intptr_t p_screenoutput() {
return 1;  /* cheat -- all output to main screen */

}

static void p_sdl_wm_setcaption_(std::string p1, std::string p2) {
SDL_WM_SetCaption(p1.c_str(), p2.c_str());

}

static void p_selectelement(LinkedList& p1, intptr_t p2) {
int i;
struct ListElement *p = p1.root;
for (i = 0; p && i < p2; i++) {
    p = p->next;
}
if (p) {
    p1.current = p;
    p1.index = i;
}

}

static void p_sendnetworkstring(intptr_t p1, std::string p2) {
size_t count = p2.length();
ssize_t r = 0;
size_t n = 0;
while (n < count) {
    /* p1 is a sockfd that was offset by one in OpenNetworkConnection */
    r = write(p1 - 1, p2.data() + n, count - n);
    if (r < 0 && errno == EINTR)
        continue;
    if (r < 0)
        return;
    /* What should happen if write() returns 0 all the time?
     * I assume it can sometimes return 0 legitimately,
     * if it failed to write anything this time. */
    n += r;
 }

}

static void p_setframerate(intptr_t p1) {
framerate = p1;

}

static intptr_t p_setlaby(int16_t v_x, int16_t v_y, int16_t v_ebene, int16_t v_was, int16_t v_s1, int16_t v_s2) {
	a_labyrinth("setlaby", v_ebene, v_x, v_y).f_feld = v_was;
	a_labyrinth("setlaby", v_ebene, v_x, v_y).f_stat1 = v_s1;
	if (a_fields("setlaby", v_was).f_attri_floor && !v_s2) {
		v_s2 = a_inhalt("setlaby", v_ebene);
	}
	a_labyrinth("setlaby", v_ebene, v_x, v_y).f_stat2 = v_s2;
}

static intptr_t p_show_logo() {
	p_clipsprite(12, 1, 1, 200, 58);
	p_displaytransparentsprite(12, 400, 25);
}

static intptr_t p_show_sight() {
	int16_t v_sicht = 0;
	v_sicht = p_radius();
	switch (v_sicht) {
	case 1:
		p_clipsprite(16, 1, 1, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	case 2:
		p_clipsprite(16, 335, 1, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	case 3:
		p_clipsprite(16, 670, 1, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	case 4:
		p_clipsprite(16, 1, 335, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	case 5:
		p_clipsprite(16, 335, 335, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	case 6:
		p_clipsprite(16, 670, 335, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	case 7:
		p_clipsprite(16, 1, 670, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	default:
		break;
	}
}

static intptr_t p_show_sight2() {
	int16_t v_sight = 0;
	v_sight = p_radius2();
	if (g_levelmod == 1) {
		v_sight = (v_sight - 2);
		if (v_sight < 2) {
			v_sight = 1;
		}
	}
	switch (v_sight) {
	case 1:
		p_clipsprite(16, 1, 1, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	case 2:
		p_clipsprite(16, 335, 1, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	case 3:
		p_clipsprite(16, 670, 1, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	case 4:
		p_clipsprite(16, 1, 335, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	case 5:
		p_clipsprite(16, 335, 335, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	case 6:
		p_clipsprite(16, 670, 335, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	case 7:
		p_clipsprite(16, 1, 670, 335, 335);
		p_displaytransparentsprite(16, 16, 15);
		break;
	default:
		break;
	}
}

static float p_sin(float p1) {
return sinf(p1);

}

static void p_sortstructuredlist(LinkedList& p1, intptr_t p2, intptr_t p3, intptr_t p4) {
ordered_fn ordering = comparator(p4, p2);
if (!ordering)
    return;
listsort(p1, ordering, p3);

}

static intptr_t p_sound(int16_t v_welchen) {
	if (g_sound == 1) {
		p_playsound(v_welchen);
	}
}

static intptr_t p_split(int16_t v_reverse) {
	int16_t v_i = 0;
	int16_t v_target = 0;
	if (g_first_empty > 0 && a_inventory("split", g_feld, g_akt_spieler).f_anzahl > 0) {
		a_inventory("split", g_first_empty, g_akt_spieler).f_status = a_inventory("split", g_feld, g_akt_spieler).f_status;
		if (!v_reverse) {
			a_inventory("split", g_feld, g_akt_spieler).f_anzahl -= 1;
			a_inventory("split", g_first_empty, g_akt_spieler).f_anzahl = 0;
			if (a_item("split", a_inventory("split", g_feld, g_akt_spieler).f_name).f_type == 13) {
				a_inventory("split", g_first_empty, g_akt_spieler).f_status = a_item("split", a_inventory("split", g_feld, g_akt_spieler).f_name).f_attri1;
			}
		} else {
			a_inventory("split", g_first_empty, g_akt_spieler).f_anzahl = (a_inventory("split", g_feld, g_akt_spieler).f_anzahl - 1);
			a_inventory("split", g_feld, g_akt_spieler).f_anzahl = 0;
			if (a_item("split", a_inventory("split", g_feld, g_akt_spieler).f_name).f_type == 13) {
				a_inventory("split", g_feld, g_akt_spieler).f_status = a_item("split", a_inventory("split", g_feld, g_akt_spieler).f_name).f_attri1;
			}
		}
		a_inventory("split", g_first_empty, g_akt_spieler).f_name = a_inventory("split", g_feld, g_akt_spieler).f_name;
		a_inventory("split", g_first_empty, g_akt_spieler).f_attri5 = a_inventory("split", g_feld, g_akt_spieler).f_attri5;
		v_target = g_first_empty;
		g_first_empty = 0;
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (!a_inventory("split", v_i, g_akt_spieler).f_name) {
				g_first_empty = v_i;
				break;
			}
		}
		return v_target;
	} else {
		return 0;
	}
}

static intptr_t p_staerke() {
	int16_t v_akt_strength = 0;
	int16_t v_dragon = 0;
	intptr_t v_okay = 0;
	v_dragon = 0;
	v_akt_strength = a_spieler("staerke", g_akt_spieler).f_strength;
	v_okay = 0;
	if (a_spieler("staerke", g_akt_spieler).f_fluch == 23) {
		v_akt_strength = 1;
		v_okay = 1;
	}
	if (p_habich(86) > 0 && !v_okay) {
		v_akt_strength = 1;
		v_okay = 1;
	}
	if (p_habich(88) > 0 && !v_okay) {
		v_akt_strength = 1;
		v_okay = 1;
	}
	if (p_habich(89) > 0 && !v_okay) {
		v_akt_strength = 1;
		v_okay = 1;
	}
	if (p_habich(87) > 0 && !v_okay) {
		v_akt_strength = 5;
		v_okay = 1;
	}
	if (p_habich(90) > 0 && !v_okay) {
		v_akt_strength = 30;
		v_dragon = 1;
	}
	v_akt_strength = ((v_akt_strength + a_spieler("staerke", g_akt_spieler).f_staerkegegenstand) + p_habich(6));
	v_akt_strength = (v_akt_strength - a_spieler("staerke", g_akt_spieler).f_krankheit);
	if (v_akt_strength > 15 && !v_dragon) {
		v_akt_strength = 15;
	}
	if (v_akt_strength < 1) {
		v_akt_strength = 1;
	}
	return v_akt_strength;
}

static void p_startdrawing(intptr_t p1) {
;  /* cheat -- all output to main screen */

}

static intptr_t p_stop_songs() {
	int16_t v_i = 0;
	for (v_i = 1; v_i <= 30; v_i += 1) {
		if (a_aktive("stop_songs", v_i, g_akt_spieler).f_source == -1) {
			a_aktive("stop_songs", v_i, g_akt_spieler).f_nr = 0;
			a_aktive("stop_songs", v_i, g_akt_spieler).f_staerke = 0;
			a_aktive("stop_songs", v_i, g_akt_spieler).f_dauer = 0;
		}
	}
}

static void p_stopdrawing() {
;  /* cheat -- all output to main screen */

}

static void p_stopmodule(intptr_t p1) {
Mix_HaltMusic();

}

static std::string p_str(int64_t p1) {
char s[256];
sprintf(s, "%lld", (long long) p1);
return s;

}

static intptr_t p_teleporter_icon(int16_t v_nr) {
	if (v_nr == 2 && a_sonderlevel("teleporter_icon", (a_spieler("teleporter_icon", g_akt_spieler).f_level + 1)) == 9) {
		v_nr = 174;
	}
	if (v_nr == 2 && a_sonderlevel("teleporter_icon", (a_spieler("teleporter_icon", g_akt_spieler).f_level + 1)) == 6) {
		v_nr = 166;
	}
	if (v_nr == 2 && a_sonderlevel("teleporter_icon", (a_spieler("teleporter_icon", g_akt_spieler).f_level + 1)) == 10) {
		v_nr = 173;
	}
	if (v_nr == 2 && a_sonderlevel("teleporter_icon", (a_spieler("teleporter_icon", g_akt_spieler).f_level + 1)) == 11) {
		v_nr = 188;
	}
	if (v_nr == 2 && a_sonderlevel("teleporter_icon", a_spieler("teleporter_icon", g_akt_spieler).f_level) == 9) {
		v_nr = 167;
	}
	if (v_nr == 2 && a_sonderlevel("teleporter_icon", a_spieler("teleporter_icon", g_akt_spieler).f_level) == 6) {
		v_nr = 167;
	}
	if (v_nr == 2 && a_sonderlevel("teleporter_icon", a_spieler("teleporter_icon", g_akt_spieler).f_level) == 10) {
		v_nr = 167;
	}
	if (v_nr == 2 && a_sonderlevel("teleporter_icon", a_spieler("teleporter_icon", g_akt_spieler).f_level) == 11) {
		v_nr = 167;
	}
	if (a_spieler("teleporter_icon", g_akt_spieler).f_level > 1) {
		if (v_nr == 3 && a_sonderlevel("teleporter_icon", (a_spieler("teleporter_icon", g_akt_spieler).f_level - 1)) == 9) {
			v_nr = 174;
		}
		if (v_nr == 3 && a_sonderlevel("teleporter_icon", (a_spieler("teleporter_icon", g_akt_spieler).f_level - 1)) == 6) {
			v_nr = 166;
		}
		if (v_nr == 3 && a_sonderlevel("teleporter_icon", (a_spieler("teleporter_icon", g_akt_spieler).f_level - 1)) == 10) {
			v_nr = 173;
		}
		if (v_nr == 3 && a_sonderlevel("teleporter_icon", (a_spieler("teleporter_icon", g_akt_spieler).f_level - 1)) == 11) {
			v_nr = 188;
		}
	}
	if (v_nr == 3 && a_sonderlevel("teleporter_icon", a_spieler("teleporter_icon", g_akt_spieler).f_level) == 9) {
		v_nr = 167;
	}
	if (v_nr == 3 && a_sonderlevel("teleporter_icon", a_spieler("teleporter_icon", g_akt_spieler).f_level) == 6) {
		v_nr = 167;
	}
	if (v_nr == 3 && a_sonderlevel("teleporter_icon", a_spieler("teleporter_icon", g_akt_spieler).f_level) == 10) {
		v_nr = 167;
	}
	if (v_nr == 3 && a_sonderlevel("teleporter_icon", a_spieler("teleporter_icon", g_akt_spieler).f_level) == 11) {
		v_nr = 167;
	}
	return v_nr;
}

static intptr_t p_terminate(int16_t v_welchen, int16_t v_source) {
	intptr_t v_i = 0;
	for (v_i = 1; v_i <= 30; v_i += 1) {
		if (a_aktive("terminate", v_i, g_akt_spieler).f_nr == v_welchen && a_aktive("terminate", v_i, g_akt_spieler).f_source == v_source) {
			a_aktive("terminate", v_i, g_akt_spieler).f_nr = 0;
			a_aktive("terminate", v_i, g_akt_spieler).f_staerke = 0;
			a_aktive("terminate", v_i, g_akt_spieler).f_dauer = 0;
		}
	}
}

static intptr_t p_terminate_meta_magic() {
	intptr_t v_i = 0;
	for (v_i = 1; v_i <= 30; v_i += 1) {
		if (a_aktive("terminate_meta_magic", v_i, g_akt_spieler).f_dauer == -2) {
			a_aktive("terminate_meta_magic", v_i, g_akt_spieler).f_nr = 0;
			a_aktive("terminate_meta_magic", v_i, g_akt_spieler).f_staerke = 0;
			a_aktive("terminate_meta_magic", v_i, g_akt_spieler).f_dauer = 0;
		}
	}
}

static intptr_t p_test_for_wall() {
	int16_t v_lauf = 0;
	int16_t v_okay = 0;
	v_lauf = 1;
	v_okay = 0;
	while (!v_okay && v_lauf < 5) {
		g_spell_x = p_neighbour_offset(v_lauf, 0);
		g_spell_y = p_neighbour_offset(v_lauf, 1);
		if (a_labyrinth("test_for_wall", a_spieler("test_for_wall", g_akt_spieler).f_level, (a_spieler("test_for_wall", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("test_for_wall", g_akt_spieler).f_character_y + g_spell_y)).f_feld == a_mit_was("test_for_wall", a_spieler("test_for_wall", g_akt_spieler).f_level)) {
			v_okay = 1;
		}
		v_lauf = (v_lauf + 1);
	}
	p_sound(33);
}

static intptr_t p_textheight(std::string p1) {
int h = 0;
TTF_SizeText(font, p1.c_str(), 0, &h);
return h;

}

static intptr_t p_textwidth(std::string p1) {
int w = 0;
TTF_SizeText(font, p1.c_str(), &w, 0);
return w;

}

static intptr_t p_todesblick() {
	intptr_t v_akt_zeile = 0;
	intptr_t v_wohin = 0;
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	p_frontcolor(p_rgb(0, 0, 0));
	for (v_akt_zeile = 32; v_akt_zeile >= 1; v_akt_zeile -= 1) {
		p_line((160 + (g_spell_x * 32)), ((160 + v_akt_zeile) + (g_spell_y * 32)), 32, 0, -1);
		p_flipbuffers(1);
		p_delay(20);
	}
	p_stopdrawing();
}

static std::string p_ucase(std::string p1) {
std::string::iterator it;
for (it = p1.begin(); it < p1.end(); it++) {
  *it = toupper(*it);
}
return p1;

}

static intptr_t p_un_equip(int16_t v_slot) {
	int16_t v_item = 0;
	v_item = a_inventory("un_equip", v_slot, g_akt_spieler).f_name;
	if (a_inventory("un_equip", v_slot, g_akt_spieler).f_benutzt == 1) {
		g_aktion = 1;
		a_inventory("un_equip", v_slot, g_akt_spieler).f_benutzt = 0;
		if (v_item == 46 || v_item == 47) {
			a_spieler("un_equip", g_akt_spieler).f_light = (a_spieler("un_equip", g_akt_spieler).f_light - 3);
		} else {
			if (v_item == 39 || v_item == 40) {
				a_spieler("un_equip", g_akt_spieler).f_light = (a_spieler("un_equip", g_akt_spieler).f_light - 4);
			} else {
				if (a_item("un_equip", v_item).f_type == 8) {
					switch (v_item) {
					case 200:
						a_spieler("un_equip", g_akt_spieler).f_zugweitegegenstand = (a_spieler("un_equip", g_akt_spieler).f_zugweitegegenstand - 3);
						break;
					case 347:
						p_terminate(49, 347);
						break;
					case 349:
						p_terminate(7, 349);
						break;
					case 348:
						p_terminate(68, 348);
						break;
					}
				} else {
					if (a_item("un_equip", v_item).f_type == 6) {
						switch (v_item) {
						case 260:
							a_spieler("un_equip", g_akt_spieler).f_bogentreffergegenstand = (a_spieler("un_equip", g_akt_spieler).f_bogentreffergegenstand - 10);
							break;
						case 51:
							a_spieler("un_equip", g_akt_spieler).f_lifepointgegenstand = (a_spieler("un_equip", g_akt_spieler).f_lifepointgegenstand - 7);
							break;
						case 54:
							a_spieler("un_equip", g_akt_spieler).f_managegenstand = (a_spieler("un_equip", g_akt_spieler).f_managegenstand - 7);
							break;
						case 229:
							a_spieler("un_equip", g_akt_spieler).f_powergegenstand = (a_spieler("un_equip", g_akt_spieler).f_powergegenstand - a_inventory("un_equip", v_slot, g_akt_spieler).f_attri5);
							break;
						case 230:
							a_spieler("un_equip", g_akt_spieler).f_staerkegegenstand = (a_spieler("un_equip", g_akt_spieler).f_staerkegegenstand - 2);
							break;
						}
					} else {
						if (a_item("un_equip", v_item).f_type == 1) {
							if (v_item == 237 || v_item == 49 || v_item == 236 || v_item == 385) {
								a_spieler("un_equip", g_akt_spieler).f_lichtgegenstand = (a_spieler("un_equip", g_akt_spieler).f_lichtgegenstand - 2);
							}
							if (v_item == 142 || v_item == 376 || v_item == 377 || v_item == 233) {
								p_terminate(71, v_item);
							}
							if (v_item == 143 || v_item == 378 || v_item == 379 || v_item == 235) {
								p_terminate(70, v_item);
							}
						} else {
							if (a_item("un_equip", v_item).f_type == 9) {
								switch (v_item) {
								case 222:
									a_spieler("un_equip", g_akt_spieler).f_powergegenstand = (a_spieler("un_equip", g_akt_spieler).f_powergegenstand - a_inventory("un_equip", v_slot, g_akt_spieler).f_attri5);
									break;
								case 223:
									a_spieler("un_equip", g_akt_spieler).f_lifepointgegenstand = (a_spieler("un_equip", g_akt_spieler).f_lifepointgegenstand - 1);
									break;
								case 153:
									a_spieler("un_equip", g_akt_spieler).f_stealthgegenstand = (a_spieler("un_equip", g_akt_spieler).f_stealthgegenstand - 2);
									break;
								case 228:
									a_spieler("un_equip", g_akt_spieler).f_staerkegegenstand = (a_spieler("un_equip", g_akt_spieler).f_staerkegegenstand - a_inventory("un_equip", v_slot, g_akt_spieler).f_attri5);
									break;
								case 224:
									a_spieler("un_equip", g_akt_spieler).f_magieresistenz = (a_spieler("un_equip", g_akt_spieler).f_magieresistenz - 20);
									break;
								case 225:
									p_terminate(70, 225);
									break;
								}
							} else {
								if (a_item("un_equip", v_item).f_type == 7) {
									if (v_item == 239) {
										a_spieler("un_equip", g_akt_spieler).f_staerkegegenstand = (a_spieler("un_equip", g_akt_spieler).f_staerkegegenstand - 2);
									}
								} else {
									if (a_item("un_equip", v_item).f_type == 18) {
										switch (v_item) {
										case 149:
											a_spieler("un_equip", g_akt_spieler).f_managegenstand = (a_spieler("un_equip", g_akt_spieler).f_managegenstand - 4);
											break;
										case 220:
											p_terminate(61, 220);
											break;
										case 221:
											p_terminate(80, 221);
											break;
										case 255:
											a_spieler("un_equip", g_akt_spieler).f_powergegenstand = (a_spieler("un_equip", g_akt_spieler).f_powergegenstand - a_inventory("un_equip", v_slot, g_akt_spieler).f_attri5);
											break;
										case 256:
											a_spieler("un_equip", g_akt_spieler).f_perceptiongegenstand = (a_spieler("un_equip", g_akt_spieler).f_perceptiongegenstand - a_inventory("un_equip", v_slot, g_akt_spieler).f_attri5);
											break;
										case 257:
											a_spieler("un_equip", g_akt_spieler).f_damagegegenstand = (a_spieler("un_equip", g_akt_spieler).f_damagegegenstand - a_inventory("un_equip", v_slot, g_akt_spieler).f_attri5);
											break;
										case 253:
											a_spieler("un_equip", g_akt_spieler).f_staerkegegenstand = (a_spieler("un_equip", g_akt_spieler).f_staerkegegenstand - a_inventory("un_equip", v_slot, g_akt_spieler).f_attri5);
											break;
										case 302:
											a_spieler("un_equip", g_akt_spieler).f_stealthgegenstand = (a_spieler("un_equip", g_akt_spieler).f_stealthgegenstand - a_inventory("un_equip", v_slot, g_akt_spieler).f_attri5);
											break;
										case 303:
											a_spieler("un_equip", g_akt_spieler).f_bogentreffergegenstand = (a_spieler("un_equip", g_akt_spieler).f_bogentreffergegenstand - a_inventory("un_equip", v_slot, g_akt_spieler).f_attri5);
											break;
										case 304:
											a_spieler("un_equip", g_akt_spieler).f_bogenschadengegenstand = (a_spieler("un_equip", g_akt_spieler).f_bogenschadengegenstand - a_inventory("un_equip", v_slot, g_akt_spieler).f_attri5);
											break;
										case 305:
											a_spieler("un_equip", g_akt_spieler).f_magieresistenz = (a_spieler("un_equip", g_akt_spieler).f_magieresistenz - (a_inventory("un_equip", v_slot, g_akt_spieler).f_attri5 * 10));
											break;
										case 306:
											p_terminate(71, 306);
											break;
										case 307:
											p_terminate(70, 307);
											break;
										}
									} else {
										if (a_item("un_equip", v_item).f_type == 20) {
											switch (v_item) {
											case 135:
												p_terminate(109, 135);
												break;
											case 136:
												p_terminate(118, 136);
												break;
											case 137:
												p_terminate(119, 137);
												break;
											case 138:
												a_spieler("un_equip", g_akt_spieler).f_powergegenstand = (a_spieler("un_equip", g_akt_spieler).f_powergegenstand - a_inventory("un_equip", v_slot, g_akt_spieler).f_attri5);
												break;
											case 139:
												p_terminate(70, 139);
												break;
											case 140:
												p_terminate(71, 140);
												break;
											case 261:
												p_terminate(61, 261);
												break;
											case 262:
												p_terminate(75, 262);
												break;
											case 263:
												p_terminate(103, 263);
												break;
											case 264:
												p_terminate(110, 264);
												break;
											case 265:
												p_terminate(40, 265);
												break;
											case 266:
												p_terminate(49, 266);
												break;
											}
										} else {
											if (a_item("un_equip", v_item).f_type == 21) {
												a_spieler("un_equip", g_akt_spieler).f_perceptiongegenstand = (a_spieler("un_equip", g_akt_spieler).f_perceptiongegenstand - 2);
											} else {
												if (a_item("un_equip", v_item).f_type == 19) {
													switch (v_item) {
													case 201:
														a_spieler("un_equip", g_akt_spieler).f_stealthgegenstand = (a_spieler("un_equip", g_akt_spieler).f_stealthgegenstand - 10);
														break;
													case 145:
														a_spieler("un_equip", g_akt_spieler).f_staerkegegenstand = (a_spieler("un_equip", g_akt_spieler).f_staerkegegenstand - a_inventory("un_equip", v_slot, g_akt_spieler).f_attri5);
														break;
													}
												} else {
													if (v_item == 400) {
														p_terminate(48, 400);
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

static intptr_t p_unlocken(int16_t v_welche) {
	int16_t v_i = 0;
	int16_t v_j = 0;
	for (v_i = 1; v_i <= 216; v_i += 1) {
		if (a_unmoeglich("unlocken", v_i).f_name == a_skills("unlocken", v_welche, g_akt_spieler).f_nummer) {
			for (v_j = 0; v_j <= 143; v_j += 1) {
				if (a_unmoeglich("unlocken", v_i).f_locked == a_skills("unlocken", v_j, g_akt_spieler).f_nummer) {
					a_skills("unlocken", v_j, g_akt_spieler).f_gelocked -= 1;
				}
			}
		}
	}
}

static intptr_t p_update_automap() {
	a_automap("update_automap", a_spieler("update_automap", g_akt_spieler).f_character_x, a_spieler("update_automap", g_akt_spieler).f_character_y).f_feld[a_spieler("update_automap", g_akt_spieler).f_level] = 1;
	a_automap("update_automap", (a_spieler("update_automap", g_akt_spieler).f_character_x + 1), a_spieler("update_automap", g_akt_spieler).f_character_y).f_feld[a_spieler("update_automap", g_akt_spieler).f_level] = 1;
	if (a_spieler("update_automap", g_akt_spieler).f_character_x > 1) {
		a_automap("update_automap", (a_spieler("update_automap", g_akt_spieler).f_character_x - 1), a_spieler("update_automap", g_akt_spieler).f_character_y).f_feld[a_spieler("update_automap", g_akt_spieler).f_level] = 1;
		if (a_spieler("update_automap", g_akt_spieler).f_character_y > 1) {
			a_automap("update_automap", (a_spieler("update_automap", g_akt_spieler).f_character_x - 1), (a_spieler("update_automap", g_akt_spieler).f_character_y - 1)).f_feld[a_spieler("update_automap", g_akt_spieler).f_level] = 1;
		}
		a_automap("update_automap", (a_spieler("update_automap", g_akt_spieler).f_character_x - 1), (a_spieler("update_automap", g_akt_spieler).f_character_y + 1)).f_feld[a_spieler("update_automap", g_akt_spieler).f_level] = 1;
	}
	a_automap("update_automap", a_spieler("update_automap", g_akt_spieler).f_character_x, (a_spieler("update_automap", g_akt_spieler).f_character_y + 1)).f_feld[a_spieler("update_automap", g_akt_spieler).f_level] = 1;
	a_automap("update_automap", (a_spieler("update_automap", g_akt_spieler).f_character_x + 1), (a_spieler("update_automap", g_akt_spieler).f_character_y + 1)).f_feld[a_spieler("update_automap", g_akt_spieler).f_level] = 1;
	if (a_spieler("update_automap", g_akt_spieler).f_character_y > 1) {
		a_automap("update_automap", a_spieler("update_automap", g_akt_spieler).f_character_x, (a_spieler("update_automap", g_akt_spieler).f_character_y - 1)).f_feld[a_spieler("update_automap", g_akt_spieler).f_level] = 1;
		a_automap("update_automap", (a_spieler("update_automap", g_akt_spieler).f_character_x + 1), (a_spieler("update_automap", g_akt_spieler).f_character_y - 1)).f_feld[a_spieler("update_automap", g_akt_spieler).f_level] = 1;
	}
}

static intptr_t p_update_automap2() {
	a_automap("update_automap2", a_spieler("update_automap2", g_akt_spieler).f_creature_x, a_spieler("update_automap2", g_akt_spieler).f_creature_y).f_feld[a_spieler("update_automap2", g_akt_spieler).f_level] = 1;
	a_automap("update_automap2", (a_spieler("update_automap2", g_akt_spieler).f_creature_x + 1), a_spieler("update_automap2", g_akt_spieler).f_creature_y).f_feld[a_spieler("update_automap2", g_akt_spieler).f_level] = 1;
	if (a_spieler("update_automap2", g_akt_spieler).f_creature_x > 1) {
		a_automap("update_automap2", (a_spieler("update_automap2", g_akt_spieler).f_creature_x - 1), a_spieler("update_automap2", g_akt_spieler).f_creature_y).f_feld[a_spieler("update_automap2", g_akt_spieler).f_level] = 1;
		if (a_spieler("update_automap2", g_akt_spieler).f_creature_y > 1) {
			a_automap("update_automap2", (a_spieler("update_automap2", g_akt_spieler).f_creature_x - 1), (a_spieler("update_automap2", g_akt_spieler).f_creature_y - 1)).f_feld[a_spieler("update_automap2", g_akt_spieler).f_level] = 1;
		}
		a_automap("update_automap2", (a_spieler("update_automap2", g_akt_spieler).f_creature_x - 1), (a_spieler("update_automap2", g_akt_spieler).f_creature_y + 1)).f_feld[a_spieler("update_automap2", g_akt_spieler).f_level] = 1;
	}
	a_automap("update_automap2", a_spieler("update_automap2", g_akt_spieler).f_creature_x, (a_spieler("update_automap2", g_akt_spieler).f_creature_y + 1)).f_feld[a_spieler("update_automap2", g_akt_spieler).f_level] = 1;
	a_automap("update_automap2", (a_spieler("update_automap2", g_akt_spieler).f_creature_x + 1), (a_spieler("update_automap2", g_akt_spieler).f_creature_y + 1)).f_feld[a_spieler("update_automap2", g_akt_spieler).f_level] = 1;
	if (a_spieler("update_automap2", g_akt_spieler).f_creature_y > 1) {
		a_automap("update_automap2", a_spieler("update_automap2", g_akt_spieler).f_creature_x, (a_spieler("update_automap2", g_akt_spieler).f_creature_y - 1)).f_feld[a_spieler("update_automap2", g_akt_spieler).f_level] = 1;
		a_automap("update_automap2", (a_spieler("update_automap2", g_akt_spieler).f_creature_x + 1), (a_spieler("update_automap2", g_akt_spieler).f_creature_y - 1)).f_feld[a_spieler("update_automap2", g_akt_spieler).f_level] = 1;
	}
}

static intptr_t p_usejpegimagedecoder() {
return 1;

}

static intptr_t p_usepngimagedecoder() {
return 1;

}

static int64_t p_val(std::string p1) {
return strtoll(p1.c_str(), 0, 10);

}

static intptr_t p_versteinern() {
	intptr_t v_akt_zeile = 0;
	intptr_t v_wohin = 0;
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	p_frontcolor(p_rgb(255, 255, 255));
	for (v_akt_zeile = 32; v_akt_zeile >= 1; v_akt_zeile -= 1) {
		p_line((160 + (g_spell_x * 32)), ((160 + v_akt_zeile) + (g_spell_y * 32)), 32, 0, -1);
		p_flipbuffers(1);
		p_delay(20);
	}
	p_stopdrawing();
}

static intptr_t p_vertikal(int16_t v_akt_level) {
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	int16_t v_save_anzahl = 0;
	int16_t v_save_feld = 0;
	int16_t v_save_name2 = 0;
	int16_t v_save_stat1 = 0;
	int16_t v_save_stat2 = 0;
	int16_t v_save_status2 = 0;
	for (v_i = 1; v_i <= a_groesse("vertikal", v_akt_level); v_i += 1) {
		for (v_j = 1; v_j <= (a_groesse("vertikal", v_akt_level) / 2); v_j += 1) {
			v_save_feld = a_labyrinth("vertikal", v_akt_level, v_i, v_j).f_feld;
			v_save_stat1 = a_labyrinth("vertikal", v_akt_level, v_i, v_j).f_stat1;
			v_save_stat2 = a_labyrinth("vertikal", v_akt_level, v_i, v_j).f_stat2;
			v_save_name2 = a_laby_item("vertikal", v_i, v_j).f_name[v_akt_level];
			v_save_anzahl = a_laby_item("vertikal", v_i, v_j).f_anzahl[v_akt_level];
			v_save_status2 = a_laby_item("vertikal", v_i, v_j).f_status[v_akt_level];
			a_labyrinth("vertikal", v_akt_level, v_i, v_j).f_feld = a_labyrinth("vertikal", v_akt_level, v_i, ((a_groesse("vertikal", v_akt_level) + 1) - v_j)).f_feld;
			a_labyrinth("vertikal", v_akt_level, v_i, v_j).f_stat1 = a_labyrinth("vertikal", v_akt_level, v_i, ((a_groesse("vertikal", v_akt_level) + 1) - v_j)).f_stat1;
			a_labyrinth("vertikal", v_akt_level, v_i, v_j).f_stat2 = a_labyrinth("vertikal", v_akt_level, v_i, ((a_groesse("vertikal", v_akt_level) + 1) - v_j)).f_stat2;
			a_laby_item("vertikal", v_i, v_j).f_name[v_akt_level] = a_laby_item("vertikal", v_i, ((a_groesse("vertikal", v_akt_level) + 1) - v_j)).f_name[v_akt_level];
			a_laby_item("vertikal", v_i, v_j).f_anzahl[v_akt_level] = a_laby_item("vertikal", v_i, ((a_groesse("vertikal", v_akt_level) + 1) - v_j)).f_anzahl[v_akt_level];
			a_laby_item("vertikal", v_i, v_j).f_status[v_akt_level] = a_laby_item("vertikal", v_i, ((a_groesse("vertikal", v_akt_level) + 1) - v_j)).f_status[v_akt_level];
			a_labyrinth("vertikal", v_akt_level, v_i, ((a_groesse("vertikal", v_akt_level) + 1) - v_j)).f_feld = v_save_feld;
			a_labyrinth("vertikal", v_akt_level, v_i, ((a_groesse("vertikal", v_akt_level) + 1) - v_j)).f_stat1 = v_save_stat1;
			a_labyrinth("vertikal", v_akt_level, v_i, ((a_groesse("vertikal", v_akt_level) + 1) - v_j)).f_stat2 = v_save_stat2;
			a_laby_item("vertikal", v_i, ((a_groesse("vertikal", v_akt_level) + 1) - v_j)).f_name[v_akt_level] = v_save_name2;
			a_laby_item("vertikal", v_i, ((a_groesse("vertikal", v_akt_level) + 1) - v_j)).f_anzahl[v_akt_level] = v_save_anzahl;
			a_laby_item("vertikal", v_i, ((a_groesse("vertikal", v_akt_level) + 1) - v_j)).f_status[v_akt_level] = v_save_status2;
		}
	}
	for (v_i = 1; v_i <= a_groesse("vertikal", v_akt_level); v_i += 1) {
		for (v_j = 1; v_j <= a_groesse("vertikal", v_akt_level); v_j += 1) {
			if (a_labyrinth("vertikal", v_akt_level, v_i, v_j).f_feld == 74) {
				a_labyrinth("vertikal", v_akt_level, v_i, v_j).f_stat2 = ((a_groesse("vertikal", v_akt_level) + 1) - a_labyrinth("vertikal", v_akt_level, v_i, v_j).f_stat2);
			}
		}
	}
	p_resetlist(ll_room_list);
	while (p_nextelement(ll_room_list)) {
		if (LIST_CURRENT(ll_room_list,struct st_room_type).f_level == v_akt_level) {
			LIST_CURRENT(ll_room_list,struct st_room_type).f_y = (((-1 * LIST_CURRENT(ll_room_list,struct st_room_type).f_y) + a_groesse("vertikal", v_akt_level)) - 8);
		}
	}
	a_eingangy("vertikal", v_akt_level) = a_groesse("vertikal", v_akt_level);
	a_ausgangy("vertikal", v_akt_level) = ((a_groesse("vertikal", v_akt_level) + 1) - a_ausgangy("vertikal", v_akt_level));
	p_changecurrentelement(ll_monster_list, a_first_monster("vertikal", v_akt_level).f_p);
	while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == v_akt_level) {
		LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y = ((a_groesse("vertikal", v_akt_level) + 1) - LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y);
		p_nextelement(ll_monster_list);
	}
}

static intptr_t p_waehlen(int16_t v_welche, int16_t v_from_template) {
	if (a_skills("waehlen", v_welche, g_akt_spieler).f_nummer) {
		if (v_welche == 82 || v_welche == 83) {
			if (a_skills("waehlen", 134, g_akt_spieler).f_gewaehlt == 1) {
				if (!v_from_template) {
					a_spieler("waehlen", g_akt_spieler).f_skill_points = (a_spieler("waehlen", g_akt_spieler).f_skill_points - a_skills("waehlen", v_welche, g_akt_spieler).f_kosten);
				}
				a_skills("waehlen", v_welche, g_akt_spieler).f_gewaehlt = 1;
				p_locken(v_welche);
			}
		} else {
			if (!v_from_template) {
				a_spieler("waehlen", g_akt_spieler).f_skill_points = (a_spieler("waehlen", g_akt_spieler).f_skill_points - a_skills("waehlen", v_welche, g_akt_spieler).f_kosten);
			}
			a_skills("waehlen", v_welche, g_akt_spieler).f_gewaehlt = 1;
			p_locken(v_welche);
		}
	}
}

static intptr_t p_waffe_attack() {
	intptr_t v_i = 0;
	int16_t v_waffe = 0;
	int16_t v_waffe_attack = 0;
	v_waffe_attack = 0;
	v_waffe = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_item("waffe_attack", a_inventory("waffe_attack", v_i, g_akt_spieler).f_name).f_type == 1 && a_inventory("waffe_attack", v_i, g_akt_spieler).f_benutzt == 1) {
			v_waffe = (v_waffe + a_item("waffe_attack", a_inventory("waffe_attack", v_i, g_akt_spieler).f_name).f_attri1);
		}
	}
	if (v_waffe > 0) {
		v_waffe_attack = v_waffe;
	}
	if (a_skills("waffe_attack", 21, g_akt_spieler).f_gewaehlt == 1 && p_ich_trage(1) == 1) {
		v_waffe_attack = (v_waffe_attack + 2);
	}
	if (a_skills("waffe_attack", 22, g_akt_spieler).f_gewaehlt == 1 && p_ich_trage(2) == 1) {
		v_waffe_attack = (v_waffe_attack + 2);
	}
	if (a_skills("waffe_attack", 23, g_akt_spieler).f_gewaehlt == 1 && p_ich_trage(3) == 1) {
		v_waffe_attack = (v_waffe_attack + 2);
	}
	if (a_skills("waffe_attack", 24, g_akt_spieler).f_gewaehlt == 1 && p_ich_trage(4) == 1) {
		v_waffe_attack = (v_waffe_attack + 2);
	}
	if (a_skills("waffe_attack", 25, g_akt_spieler).f_gewaehlt == 1 && !p_ich_trage(10)) {
		v_waffe_attack = (v_waffe_attack + 3);
	}
	if (!p_ich_trage(10) && !a_skills("waffe_attack", 25, g_akt_spieler).f_gewaehlt) {
		v_waffe_attack = (v_waffe_attack / 2);
	}
	return v_waffe_attack;
}

static intptr_t p_wahrnehmung() {
	int16_t v_akt_wahrnehmung = 0;
	v_akt_wahrnehmung = a_spieler("wahrnehmung", g_akt_spieler).f_perception;
	v_akt_wahrnehmung = (v_akt_wahrnehmung + (p_habich(52) * 10));
	v_akt_wahrnehmung = (v_akt_wahrnehmung + a_spieler("wahrnehmung", g_akt_spieler).f_perceptiongegenstand);
	if (v_akt_wahrnehmung > 15) {
		v_akt_wahrnehmung = 15;
	}
	return v_akt_wahrnehmung;
}

static intptr_t p_wassermonster_random(int16_t v_level) {
	int16_t v_hugo = 0;
	int16_t v_zaehler = 0;
	v_zaehler = 1;
	do {
		v_hugo = (p_random(169) + 1);
		v_zaehler = (v_zaehler + 1);
	} while (!((a_monster("wassermonster_random", v_hugo).f_minlevel <= v_level && p_has_trait2(v_hugo, 30)) || v_zaehler > 500));
	if (v_zaehler > 500) {
		v_hugo = 145;
	}
	return v_hugo;
}

static intptr_t p_wassermonster_setzen(intptr_t v_level, intptr_t v_welches) {
	intptr_t v_hugo = 0;
	int16_t v_monstat = 0;
	int16_t v_x = 0;
	int16_t v_y = 0;
	int16_t v_zaehler = 0;
	v_x = 0;
	v_y = 0;
	v_zaehler = 1;
	do {
		v_x = (p_random((a_groesse("wassermonster_setzen", v_level) - 3)) + 2);
		v_y = (p_random((a_groesse("wassermonster_setzen", v_level) - 3)) + 2);
		v_zaehler = (v_zaehler + 1);
	} while (!(a_labyrinth("wassermonster_setzen", v_level, v_x, v_y).f_feld == 53 || v_zaehler > 500));
	if (v_zaehler <= 500) {
		v_monstat = 0;
		if (p_random(100) > 90 || a_levelmod("wassermonster_setzen", v_level) == 11) {
			if (p_random(100) > 50 && a_levelmod("wassermonster_setzen", v_level) != 11) {
				if (p_has_trait2(v_hugo, 29) == 1) {
					v_monstat = 2;
				} else {
					v_monstat = 1;
				}
			} else {
				v_monstat = 1;
			}
		}
		p_setlaby(v_x, v_y, v_level, 72, v_welches, v_monstat);
	}
}

static intptr_t p_wr_txt(intptr_t v_what, intptr_t v_nr1, intptr_t v_nr2, intptr_t v_x, intptr_t v_y) {
	std::string v_q1;
	std::string v_q2;
	v_q1 = "";
	v_q2 = "";
	if (v_nr1 > 0) {
		v_q1 = "(" + p_str(v_nr1) + ")";
	}
	if (v_nr2 > 0) {
		v_q2 = "(B" + p_str(v_nr2) + ")";
	}
	v_what = a_zauberliste("wr_txt", v_what);
	if (v_what == -2) {
		p_drawtext(v_x, v_y, a_message_text("wr_txt", 650, (1 + g_language)), -1, 0);
	} else {
		p_drawtext(v_x, v_y, a_spells("wr_txt", v_what).f_name[(1 + g_language)] + " " + v_q1 + v_q2, -1, 0);
	}
}

static void p_writelong(intptr_t p1, int32_t p2) {
if (filemap.count(p1) == 0)
    return;
FILE *fp = filemap[p1];
fputc(p2, fp);
fputc((p2 >> 8), fp);
fputc((p2 >> 16), fp);
fputc((p2 >> 24), fp);

}

static void p_writestringn(intptr_t p1, std::string p2) {
if (filemap.count(p1) == 0)
    return;
FILE *fp = filemap[p1];
fputs(p2.c_str(), fp);
fputc('\n', fp);

}

static void p_writeword(intptr_t p1, int16_t p2) {
if (filemap.count(p1) == 0)
    return;
FILE *fp = filemap[p1];
fputc(p2, fp);
fputc((p2 >> 8), fp);

}

static intptr_t p_zauber_nehmen(int16_t v_i) {
	int16_t v_nehmen = 0;
	v_nehmen = 0;
	if (a_spells("zauber_nehmen", v_i).f_level <= a_spieler("zauber_nehmen", g_akt_spieler).f_circle) {
		v_nehmen = p_aus_schule(v_i);
	}
	return v_nehmen;
}

static intptr_t p_zauberkosten(int16_t v_spell) {
	int16_t v_kosten = 0;
	v_kosten = a_spells("zauberkosten", v_spell).f_cost;
	if (a_skills("zauberkosten", 41, g_akt_spieler).f_gewaehlt == 1 && v_kosten > 1) {
		v_kosten -= 1;
	}
	if (p_habich(82) > 0 && v_kosten > 0) {
		v_kosten = (v_kosten / 2);
		if (v_kosten < 1) {
			v_kosten = 1;
		}
	}
	if (a_spells("zauberkosten", v_spell).f_weavable) {
		v_kosten = (v_kosten + (p_get_weaving(-1) - 1));
	}
	return v_kosten;
}

static intptr_t p_zug_verlieren() {
	if (!p_habich(158)) {
		g_aktion = 1;
	} else {
		p_terminate_meta_magic();
	}
}

static intptr_t p_add_poison(int16_t v_amount) {
	if (!p_habich(130)) {
		v_amount = (v_amount - a_spieler("add_poison", g_akt_spieler).f_giftlehre);
		if (v_amount > 0) {
			a_spieler("add_poison", g_akt_spieler).f_poison += v_amount;
		}
	}
}

static intptr_t p_angriff() {
	int16_t v_akt_angriff = 0;
	int16_t v_anfuehrer = 0;
	intptr_t v_angriff = 0;
	intptr_t v_i = 0;
	v_akt_angriff = a_spieler("angriff", g_akt_spieler).f_attack;
	v_akt_angriff = (v_akt_angriff + a_spieler("angriff", g_akt_spieler).f_attackgegenstand);
	v_akt_angriff = (v_akt_angriff + p_habich(176));
	v_anfuehrer = 0;
	for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
		if (a_skills("angriff", 26, v_i).f_gewaehlt == 1 && a_spieler("angriff", v_i).f_status == 1) {
			v_anfuehrer = 2;
		}
	}
	if (a_skills("angriff", 10, g_akt_spieler).f_gewaehlt == 1) {
		v_akt_angriff = (v_akt_angriff + (p_reflexe() / 2));
	}
	if (a_skills("angriff", 11, g_akt_spieler).f_gewaehlt == 1) {
		v_akt_angriff = (v_akt_angriff + (p_staerke() / 2));
	}
	v_akt_angriff = (v_akt_angriff + v_anfuehrer);
	v_akt_angriff = (v_akt_angriff - a_spieler("angriff", g_akt_spieler).f_krankheit);
	if (a_skills("angriff", 25, g_akt_spieler).f_gewaehlt == 1 && !p_ich_trage(10)) {
		v_akt_angriff = (v_akt_angriff + 3);
	}
	if (a_spieler("angriff", g_akt_spieler).f_style == 1) {
		v_akt_angriff = (v_akt_angriff + 2);
	}
	if (a_spieler("angriff", g_akt_spieler).f_style == 2 || a_spieler("angriff", g_akt_spieler).f_style == 4 || a_spieler("angriff", g_akt_spieler).f_style == 7 || a_spieler("angriff", g_akt_spieler).f_style == 9) {
		v_akt_angriff = (v_akt_angriff - 2);
	}
	if (a_spieler("angriff", g_akt_spieler).f_style == 3) {
		v_akt_angriff = ((v_akt_angriff + 1) / 2);
	}
	v_angriff = (v_angriff + p_habich(145));
	if (v_akt_angriff < 1) {
		v_akt_angriff = 1;
	}
	return v_akt_angriff;
}

static intptr_t p_ausweichen() {
	int16_t v_akt_ausweichen = 0;
	v_akt_ausweichen = ((p_reflexe() * 10) - (a_spieler("ausweichen", g_akt_spieler).f_level / 2));
	v_akt_ausweichen = (v_akt_ausweichen + (a_spieler("ausweichen", g_akt_spieler).f_fallenlehre * 2));
	return v_akt_ausweichen;
}

static intptr_t p_autodelay(int32_t v_adinput, int8_t v_adwhat, int32_t v_addelaymaxinput) {
	int32_t v_delaynull = 0;
	intptr_t v_iii = 0;
	static int32_t v_timeold;
	v_delaynull = 0;
	if (v_addelaymaxinput != -2) {
		if (v_adwhat == -1) {
			if (!a_addelaymax("autodelay", v_adinput)) {
				a_addelaymax("autodelay", v_adinput) = v_addelaymaxinput;
			}
		} else {
			a_addelaymax("autodelay", v_adinput) = v_addelaymaxinput;
		}
	}
	if (v_adwhat == 1) {
		if (!v_timeold) {
			v_timeold = p_elapsedmilliseconds();
		}
		if (a_addelay("autodelay", v_adinput) > 0) {
			a_addelay("autodelay", v_adinput) -= (p_elapsedmilliseconds() - v_timeold);
			v_timeold = p_elapsedmilliseconds();
			if (a_addelay("autodelay", v_adinput) < 0) {
				a_addelay("autodelay", v_adinput) = 0;
			}
		}
	}
	if (v_adwhat == 2) {
		a_addelay("autodelay", v_adinput) = a_addelaymax("autodelay", v_adinput);
		v_timeold = 0;
	}
	if (v_adwhat == 3) {
		a_addelay("autodelay", v_adinput) = 0;
	}
	if (v_adwhat == 5) {
		for (v_iii = 0; v_iii <= 10; v_iii += 1) {
			a_addelaymax("autodelay", v_iii) = 0;
			a_addelay("autodelay", v_iii) = 0;
		}
	}
	if (a_addelay("autodelay", v_adinput) <= 0 && a_addelay("autodelay", v_adinput) != -999) {
		v_delaynull = 1;
	} else {
		v_delaynull = 0;
	}
	return v_delaynull;
}

static intptr_t p_belastung() {
	int16_t v_belastung = 0;
	int16_t v_gewicht = 0;
	intptr_t v_i = 0;
	v_belastung = 0;
	if (!a_skills("belastung", 119, g_akt_spieler).f_gewaehlt) {
		v_gewicht = (p_gewicht() / 10);
		if (a_spieler("belastung", g_akt_spieler).f_fluch == 24) {
			v_gewicht = (v_gewicht * 2);
		}
		for (v_i = 2; v_i <= 9; v_i += 1) {
			if (v_gewicht > (v_i * 10)) {
				v_belastung = (v_belastung + 1);
			}
		}
		if (v_belastung > 0) {
			v_belastung = (v_belastung - (p_staerke() / 2));
			if (v_belastung < 0) {
				v_belastung = 0;
			}
		}
	}
	return v_belastung;
}

static intptr_t p_cleanup_monsters() {
	struct st_monster_pointer v_act_mon;
	if (g_dead_monsters) {
		p_changecurrentelement(ll_monster_list, a_first_monster("cleanup_monsters", g_dead_monsters).f_p);
		while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == g_dead_monsters) {
			v_act_mon.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
			if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 7) {
				if (v_act_mon.f_p == a_first_monster("cleanup_monsters", g_dead_monsters).f_p) {
					p_nextelement(ll_monster_list);
					a_first_monster("cleanup_monsters", g_dead_monsters).f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
					p_previouselement(ll_monster_list);
				}
				p_deleteelement(ll_monster_list, 0);
			}
			p_nextelement(ll_monster_list);
		}
		g_dead_monsters = 0;
	} else {
		return 0;
	}
}

static intptr_t p_clear_highscores() {
	p_init_highscores();
}

static intptr_t p_clearmessagewindow() {
	p_frontcolor(p_rgb(0, 0, 0));
	p_box(17, 367, 332, 46, -1);
}

static intptr_t p_creature_info() {
	int16_t v_but_x = 0;
	int16_t v_but_y = 0;
	int16_t v_first_line = 0;
	intptr_t v_frame = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_offset = 0;
	int16_t v_raus = 0;
	int16_t v_released1 = 0;
	intptr_t v_result = 0;
	int16_t v_skillnum = 0;
	std::string v_title;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	v_released1 = 0;
	v_raus = 0;
	v_skillnum = p_count_skills(g_akt_spieler);
	v_first_line = 1;
	do {
		p_fenster(0);
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			g_mmouse_x = p_mousex();
			g_mmouse_y = p_mousey();
			g_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
		}
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(0);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		v_x = 55;
		v_y = 80;
		p_frontcolor(p_rgb(255, 255, 255));
		v_title = a_creature("creature_info", a_spieler("creature_info", g_akt_spieler).f_creature_typ).f_creature_name[(1 + g_language)];
		p_drawtext((320 - (p_textwidth(v_title) / 2)), 25, v_title, -1, 0);
		p_frontcolor(p_rgb(247, 36, 61));
		p_drawtext(v_x, v_y, a_message_text("creature_info", 55, (1 + g_language)), -1, 0);
		p_drawtext((v_x + 170), v_y, p_str(a_spieler("creature_info", g_akt_spieler).f_creature_lifepoints) + " (" + p_str(a_spieler("creature_info", g_akt_spieler).f_creature_maxlifepoints) + ")", -1, 0);
		if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
			p_drawtext(30, 430, a_message_text("creature_info", 919, (1 + g_language)), -1, 0);
		}
		v_y = (v_y + 15);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(v_x, v_y, a_message_text("creature_info", 52, (1 + g_language)), -1, 0);
		p_drawtext((v_x + 170), v_y, p_str(a_spieler("creature_info", g_akt_spieler).f_creature_attack), -1, 0);
		if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
			p_drawtext(30, 430, a_message_text("creature_info", 921, (1 + g_language)), -1, 0);
		}
		v_y = (v_y + 15);
		p_frontcolor(p_rgb(239, 131, 44));
		p_drawtext(v_x, v_y, a_message_text("creature_info", 56, (1 + g_language)), -1, 0);
		p_drawtext((v_x + 170), v_y, p_str(a_spieler("creature_info", g_akt_spieler).f_creature_speed) + " (" + p_str(a_spieler("creature_info", g_akt_spieler).f_creature_maxspeed) + ")", -1, 0);
		if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
			p_drawtext(30, 430, a_message_text("creature_info", 926, (1 + g_language)), -1, 0);
		}
		v_y = (v_y + 15);
		p_frontcolor(p_rgb(255, 1, 1));
		p_drawtext(v_x, v_y, a_message_text("creature_info", 88, (1 + g_language)), -1, 0);
		p_drawtext((v_x + 170), v_y, p_str(a_spieler("creature_info", g_akt_spieler).f_creature_schaden_min) + "-" + p_str(a_spieler("creature_info", g_akt_spieler).f_creature_schaden_max), -1, 0);
		if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
			p_drawtext(30, 430, a_message_text("creature_info", 933, (1 + g_language)), -1, 0);
		}
		v_y = (v_y + 15);
		if (a_spieler("creature_info", g_akt_spieler).f_creature_typ == 9) {
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext((v_x + 170), v_y, a_message_text("creature_info", 762, (1 + g_language)), -1, 0);
			v_y = (v_y + 15);
		}
		if (a_spieler("creature_info", g_akt_spieler).f_creature_typ == 4) {
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext((v_x + 170), v_y, a_message_text("creature_info", 761, (1 + g_language)), -1, 0);
			v_y = (v_y + 15);
		}
		p_stopdrawing();
		if (a_spieler("creature_info", g_akt_spieler).f_creature_typ == 10) {
			p_clipsprite(0, (((a_spieler("creature_info", g_akt_spieler).f_creature_heading * 32) * 2) + (v_frame * 32)), ((a_spieler("creature_info", g_akt_spieler).f_maennchen * 32) - 32), 32, 32);
			p_displaytransparentsprite(0, 160, (160 + v_offset));
		} else {
			if (a_spieler("creature_info", g_akt_spieler).f_creature_typ == 16) {
				p_clipsprite(0, (((a_spieler("creature_info", g_akt_spieler).f_creature_heading * 32) * 2) + (v_frame * 32)), 608, 32, 32);
				p_displaytransparentsprite(0, 160, (160 + v_offset));
			} else {
				p_clipsprite(34, 128, ((a_creature("creature_info", a_spieler("creature_info", g_akt_spieler).f_creature_typ).f_creature_graphic * 32) - 32), 32, 32);
				p_displaytransparentsprite(34, (a_creature("creature_info", a_spieler("creature_info", g_akt_spieler).f_creature_typ).f_creature_graphic * 32), (160 + v_offset));
			}
		}
		v_but_x = 593;
		v_but_y = 16;
		if (g_mmouse_x >= v_but_x && g_mmouse_x <= (v_but_x + 32) && g_mmouse_y >= v_but_y && g_mmouse_y <= (v_but_y + 32)) {
			p_clipsprite(6, 96, 32, 31, 31);
			if (g_mmouse_links == 1) {
				v_raus = 1;
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, v_but_x, v_but_y);
		p_examinekeyboard();
		if (p_keyboardpushed(27) || v_mmouse_rechts == 1) {
			v_raus = 1;
		}
		if (p_keyboardpushed(100)) {
			if (v_released1 == 1) {
				v_released1 = 2;
			}
		} else {
			if (!v_released1) {
				v_released1 = 1;
			}
			if (v_released1 == 2) {
				v_raus = 1;
			}
		}
		p_draw_mousepointer(g_mmouse_x, g_mmouse_y);
		p_flipbuffers(1);
	} while (!(v_raus == 1));
}

static intptr_t p_creature_speed() {
	int16_t v_akt_speed = 0;
	v_akt_speed = a_spieler("creature_speed", g_akt_spieler).f_creature_maxspeed;
	if (p_habich(169) > 0) {
		v_akt_speed = (v_akt_speed + 1);
	}
	if (p_habich(170) > 0) {
		v_akt_speed = (v_akt_speed + 2);
	}
	if (p_habich(171) > 0) {
		v_akt_speed = (v_akt_speed + 3);
	}
	return v_akt_speed;
}

static intptr_t p_describe(int16_t v_feld, int16_t v_x, int16_t v_y, int16_t v_sx, int16_t v_sy) {
	int16_t v_attack = 0;
	int16_t v_critical = 0;
	int16_t v_damage = 0;
	int16_t v_foodvalue = 0;
	int16_t v_frc = 0;
	int16_t v_gew = 0;
	std::string v_line1;
	std::string v_line2;
	std::string v_line3;
	int16_t v_max = 0;
	int16_t v_min = 0;
	int16_t v_name = 0;
	int16_t v_scrollspell = 0;
	int16_t v_type = 0;
	intptr_t v_wohin = 0;
	v_name = a_inventory("describe", v_feld, g_akt_spieler).f_name;
	v_type = a_item("describe", v_name).f_type;
	v_line1 = "";
	v_line2 = "";
	v_line3 = "";
	if (!v_name) {
		return 0;
	}
	if (a_item("describe", v_name).f_qualitaet == 1) {
		v_line3 = v_line3 + " +" + p_str(a_inventory("describe", v_feld, g_akt_spieler).f_attri5);
	}
	v_line3 = v_line3 + a_item("describe", v_name).f_info[(1 + g_language)];
	if (a_item("describe", v_name).f_qualitaet == 2) {
		v_line3 = a_item("describe", v_name).f_info[(1 + g_language)] + ". " + a_message_text("describe", 548, (g_language + 1)) + p_str(a_inventory("describe", v_feld, g_akt_spieler).f_status) + " / " + p_str(a_item("describe", v_name).f_attri1);
	}
	if (v_name >= 75 && v_name <= 112) {
		if ((a_mischen("describe", (a_inventory("describe", v_feld, g_akt_spieler).f_name - 75)).f_learned & p_pm(0)) || a_inventory("describe", v_feld, g_akt_spieler).f_status == 1) {
			a_inventory("describe", v_feld, g_akt_spieler).f_status = 1;
		} else {
			v_line1 = a_message_text("describe", 586, (1 + g_language));
		}
	}
	if (v_name >= 65 && v_name <= 74) {
		if ((a_mush_known("describe", (a_inventory("describe", v_feld, g_akt_spieler).f_name - 65)) & p_pm(0)) || a_inventory("describe", v_feld, g_akt_spieler).f_status == 1) {
			a_inventory("describe", v_feld, g_akt_spieler).f_status = 1;
		} else {
			v_line1 = a_message_text("describe", 585, (1 + g_language));
		}
	}
	v_scrollspell = 0;
	if (v_name == 38) {
		if ((a_learned("describe", g_akt_spieler, a_inventory("describe", v_feld, g_akt_spieler).f_status) & 512) || (a_inventory("describe", v_feld, g_akt_spieler).f_attri5 & 256)) {
			v_line1 = a_message_text("describe", 658, (1 + g_language)) + " (" + a_message_text("describe", 91, (1 + g_language)) + " " + p_str(((int64_t) a_inventory("describe", v_feld, g_akt_spieler).f_attri5 & 255)) + ")";
			a_inventory("describe", v_feld, g_akt_spieler).f_attri5 = (a_inventory("describe", v_feld, g_akt_spieler).f_attri5 | 256);
			v_line2 = a_spells("describe", a_inventory("describe", v_feld, g_akt_spieler).f_status).f_name[(1 + g_language)];
			if ((a_learned("describe", g_akt_spieler, a_inventory("describe", v_feld, g_akt_spieler).f_status) & 384) || p_zauber_nehmen(a_inventory("describe", v_feld, g_akt_spieler).f_status)) {
				v_line2 += "+";
			}
			v_line2 += " (" + p_str(a_spells("describe", a_inventory("describe", v_feld, g_akt_spieler).f_status).f_level) + ")";
			if (v_sy > -1) {
				v_scrollspell = a_inventory("describe", v_feld, g_akt_spieler).f_status;
			}
		} else {
			v_line1 = a_message_text("describe", 584, (1 + g_language));
		}
	}
	if (v_name == 46 || v_name == 47 || v_name == 39 || v_name == 40) {
		v_line2 = a_message_text("describe", 526, (g_language + 1)) + p_str(a_inventory("describe", v_feld, g_akt_spieler).f_status);
		v_line3 = "";
	}
	if (v_type == 3) {
		v_foodvalue = a_item("describe", a_inventory("describe", v_feld, g_akt_spieler).f_name).f_attri1;
		if (a_skills("describe", 95, g_akt_spieler).f_gewaehlt == 1) {
			v_foodvalue = (v_foodvalue * 2);
		}
		v_line2 = a_message_text("describe", 530, (g_language + 1)) + p_str(v_foodvalue);
		if (g_test == 1) {
			v_line3 = "status: " + p_str(a_inventory("describe", v_feld, g_akt_spieler).f_status) + " attri5: " + p_str(a_inventory("describe", v_feld, g_akt_spieler).f_attri5);
		}
	}
	if (v_type == 23 || v_name == 167) {
		v_foodvalue = a_item("describe", a_inventory("describe", v_feld, g_akt_spieler).f_name).f_attri1;
		if (a_skills("describe", 95, g_akt_spieler).f_gewaehlt == 1) {
			v_foodvalue = (v_foodvalue * 2);
		}
		v_line2 = a_message_text("describe", 530, (g_language + 1)) + p_str(v_foodvalue);
		v_line3 = "";
	}
	if (v_name == 353 || v_name == 351 || v_name == 354) {
		if (v_name == 354) {
			v_line2 = a_message_text("describe", 610, (g_language + 1));
		} else {
			v_line2 = a_message_text("describe", 531, (g_language + 1));
		}
		v_line3 = "";
	}
	if (v_type == 8 || v_type == 6 || v_type == 9 || v_type == 7 || v_type == 11 || v_type == 21) {
		v_min = a_item("describe", a_inventory("describe", v_feld, g_akt_spieler).f_name).f_attri2;
		v_max = a_item("describe", a_inventory("describe", v_feld, g_akt_spieler).f_name).f_attri3;
		if (a_inventory("describe", v_feld, g_akt_spieler).f_status == 1) {
			v_line2 = a_message_text("describe", 536, (g_language + 1));
			v_min = (v_min / 2);
			v_max = (v_max / 2);
		}
		if (a_inventory("describe", v_feld, g_akt_spieler).f_status == 2) {
			v_line2 = a_message_text("describe", 537, (g_language + 1));
			v_min = 0;
			v_max = 0;
		}
		if (a_inventory("describe", v_feld, g_akt_spieler).f_status == 3) {
			v_line2 = a_message_text("describe", 538, (g_language + 1));
		}
		v_line2 = v_line2 + a_message_text("describe", 534, (g_language + 1)) + p_str(a_item("describe", v_name).f_attri1) + a_message_text("describe", 535, (g_language + 1)) + p_str(v_min) + "/" + p_str(v_max);
	}
	if (v_type == 1 || v_type == 10) {
		v_attack = a_item("describe", v_name).f_attri1;
		v_damage = a_item("describe", v_name).f_attri2;
		v_critical = a_item("describe", v_name).f_attri3;
		if (a_inventory("describe", v_feld, g_akt_spieler).f_status == 1) {
			v_line2 = a_message_text("describe", 536, (g_language + 1));
			v_attack = (v_attack / 2);
			v_damage = (v_damage / 2);
			v_critical = (v_critical / 2);
		}
		if (a_inventory("describe", v_feld, g_akt_spieler).f_status == 2) {
			v_line2 = a_message_text("describe", 537, (g_language + 1));
			v_attack = 0;
			v_damage = 0;
			v_critical = 0;
		}
		if (a_inventory("describe", v_feld, g_akt_spieler).f_status == 3) {
			v_line2 = a_message_text("describe", 538, (g_language + 1));
		}
		if (a_inventory("describe", v_feld, g_akt_spieler).f_status == 4) {
			v_line2 = a_message_text("describe", 539, (g_language + 1));
		}
		v_line2 = v_line2 + a_message_text("describe", 543, (g_language + 1)) + p_str(v_attack) + a_message_text("describe", 544, (g_language + 1)) + p_str(v_damage) + a_message_text("describe", 545, (g_language + 1)) + p_str(v_critical);
	}
	if (v_type == 13) {
		if (a_inventory("describe", v_feld, g_akt_spieler).f_attri5 == 4) {
			v_line2 = a_message_text("describe", 539, (g_language + 1));
		}
		v_line2 = v_line2 + a_message_text("describe", 546, (g_language + 1)) + p_str(a_inventory("describe", v_feld, g_akt_spieler).f_status) + " " + a_message_text("describe", 543, (g_language + 1)) + p_str(a_item("describe", v_name).f_attri2) + a_message_text("describe", 544, (g_language + 1)) + p_str(a_item("describe", v_name).f_attri3) + a_message_text("describe", 545, (g_language + 1)) + p_str(a_item("describe", v_name).f_attri4);
		v_line3 = "";
	}
	if (v_name == 150) {
		v_line2 = p_str(a_spieler("describe", g_akt_spieler).f_gold) + a_message_text("describe", 8, (g_language + 1));
	}
	if (v_name == 193) {
		v_line2 = p_str(a_inventory("describe", v_feld, g_akt_spieler).f_status) + a_message_text("describe", 550, (g_language + 1));
		v_line3 = "";
	}
	if (a_inventory("describe", v_feld, g_akt_spieler).f_name == 267) {
		v_line2 = a_spells("describe", a_item("describe", a_inventory("describe", v_feld, g_akt_spieler).f_name).f_attri1).f_name[(1 + g_language)];
		v_line3 = "";
	}
	if (v_type == 22) {
		v_line2 = a_message_text("describe", (694 + a_inventory("describe", v_feld, g_akt_spieler).f_attri5), (1 + g_language));
		v_line2 = v_line2 + a_spells("describe", a_item("describe", a_inventory("describe", v_feld, g_akt_spieler).f_name).f_attri1).f_name[(1 + g_language)];
		v_line3 = "";
		if (v_sy > -1) {
			v_scrollspell = a_item("describe", a_inventory("describe", v_feld, g_akt_spieler).f_name).f_attri1;
		}
	}
	if (v_type == 24) {
		v_line2 = a_message_text("describe", 771, (1 + g_language)) + p_str(a_item("describe", a_inventory("describe", v_feld, g_akt_spieler).f_name).f_attri1);
		v_line3 = "";
	}
	if (v_name == 249) {
		switch (a_inventory("describe", v_feld, g_akt_spieler).f_status) {
		case 1:
			v_line2 = a_message_text("describe", 618, (1 + g_language));
			break;
		case 2:
			v_line2 = a_message_text("describe", 619, (1 + g_language));
			break;
		case 3:
			v_line2 = a_message_text("describe", 620, (1 + g_language));
			break;
		case 4:
			v_line2 = a_message_text("describe", 621, (1 + g_language));
			break;
		case 5:
			v_line2 = a_message_text("describe", 622, (1 + g_language));
			break;
		case 6:
			v_line2 = a_message_text("describe", 623, (1 + g_language));
			break;
		case 7:
			v_line2 = a_message_text("describe", 628, (1 + g_language));
			break;
		}
		v_line3 = "";
	}
	if (v_line2 == "") {
		v_line2 = v_line3;
		v_line3 = "";
	}
	if (v_line1 == "") {
		v_line1 = a_item("describe", a_inventory("describe", v_feld, g_akt_spieler).f_name).f_name[(1 + g_language)];
	}
	v_gew = (a_item("describe", a_inventory("describe", v_feld, g_akt_spieler).f_name).f_gewicht / 5);
	v_frc = ((a_item("describe", a_inventory("describe", v_feld, g_akt_spieler).f_name).f_gewicht % 5) * 2);
	if (a_inventory("describe", v_feld, g_akt_spieler).f_name == 150) {
		v_gew = ((a_spieler("describe", g_akt_spieler).f_gold * 3) / 1000);
		v_frc = (((a_spieler("describe", g_akt_spieler).f_gold * 3) % 1000) / 100);
	}
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	p_frontcolor(p_rgb(255, 255, 1));
	p_drawtext(v_x, v_y, v_line1 + " (" + p_str(v_gew) + "." + p_str(v_frc) + " Kg)", -1, 0);
	p_frontcolor(p_rgb(160, 160, 160));
	p_drawtext(v_x, (v_y + 15), v_line2, -1, 0);
	p_drawtext(v_x, (v_y + 30), v_line3, -1, 0);
	if (v_scrollspell) {
		p_frontcolor(p_rgb(0, 0, 50));
		p_box((v_sx - 8), (v_sy - 8), 332, 46, -1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(v_sx, v_sy, a_spells("describe", v_scrollspell).f_info_1[(1 + g_language)], -1, 0);
		p_drawtext(v_sx, (v_sy + 15), a_spells("describe", v_scrollspell).f_info_2[(1 + g_language)], -1, 0);
	}
	p_stopdrawing();
}

static intptr_t p_diagonal(int16_t v_akt_level) {
	int16_t v_hugo = 0;
	intptr_t v_i = 0;
	int16_t v_j = 0;
	int16_t v_save = 0;
	int16_t v_save_anzahl = 0;
	int16_t v_save_feld = 0;
	int16_t v_save_name2 = 0;
	int16_t v_save_stat1 = 0;
	int16_t v_save_stat2 = 0;
	int16_t v_save_status2 = 0;
	int16_t v_save_x = 0;
	intptr_t v_xxx = 0;
	intptr_t v_yyy = 0;
	v_j = 1;
	v_hugo = 1;
	do {
		v_i = (1 + v_hugo);
		do {
			v_save_feld = a_labyrinth("diagonal", v_akt_level, v_i, v_j).f_feld;
			v_save_stat1 = a_labyrinth("diagonal", v_akt_level, v_i, v_j).f_stat1;
			v_save_stat2 = a_labyrinth("diagonal", v_akt_level, v_i, v_j).f_stat2;
			v_save_name2 = a_laby_item("diagonal", v_i, v_j).f_name[v_akt_level];
			v_save_anzahl = a_laby_item("diagonal", v_i, v_j).f_anzahl[v_akt_level];
			v_save_status2 = a_laby_item("diagonal", v_i, v_j).f_status[v_akt_level];
			a_labyrinth("diagonal", v_akt_level, v_i, v_j).f_feld = a_labyrinth("diagonal", v_akt_level, v_j, v_i).f_feld;
			a_labyrinth("diagonal", v_akt_level, v_i, v_j).f_stat1 = a_labyrinth("diagonal", v_akt_level, v_j, v_i).f_stat1;
			a_labyrinth("diagonal", v_akt_level, v_i, v_j).f_stat2 = a_labyrinth("diagonal", v_akt_level, v_j, v_i).f_stat2;
			a_laby_item("diagonal", v_i, v_j).f_name[v_akt_level] = a_laby_item("diagonal", v_j, v_i).f_name[v_akt_level];
			a_laby_item("diagonal", v_i, v_j).f_anzahl[v_akt_level] = a_laby_item("diagonal", v_j, v_i).f_anzahl[v_akt_level];
			a_laby_item("diagonal", v_i, v_j).f_status[v_akt_level] = a_laby_item("diagonal", v_j, v_i).f_status[v_akt_level];
			a_labyrinth("diagonal", v_akt_level, v_j, v_i).f_feld = v_save_feld;
			a_labyrinth("diagonal", v_akt_level, v_j, v_i).f_stat1 = v_save_stat1;
			a_labyrinth("diagonal", v_akt_level, v_j, v_i).f_stat2 = v_save_stat2;
			a_laby_item("diagonal", v_j, v_i).f_name[v_akt_level] = v_save_name2;
			a_laby_item("diagonal", v_j, v_i).f_anzahl[v_akt_level] = v_save_anzahl;
			a_laby_item("diagonal", v_j, v_i).f_status[v_akt_level] = v_save_status2;
			v_i = (v_i + 1);
		} while (!(v_i > a_groesse("diagonal", v_akt_level)));
		v_hugo = (v_hugo + 1);
		v_j = (v_j + 1);
	} while (!(v_j > a_groesse("diagonal", v_akt_level)));
	for (v_i = 1; v_i <= a_groesse("diagonal", v_akt_level); v_i += 1) {
		for (v_j = 1; v_j <= a_groesse("diagonal", v_akt_level); v_j += 1) {
			if (a_labyrinth("diagonal", v_akt_level, v_i, v_j).f_feld == 74) {
				v_save = a_labyrinth("diagonal", v_akt_level, v_i, v_j).f_stat1;
				a_labyrinth("diagonal", v_akt_level, v_i, v_j).f_stat1 = a_labyrinth("diagonal", v_akt_level, v_i, v_j).f_stat2;
				a_labyrinth("diagonal", v_akt_level, v_i, v_j).f_stat2 = v_save;
			}
		}
	}
	p_resetlist(ll_room_list);
	while (p_nextelement(ll_room_list)) {
		if (LIST_CURRENT(ll_room_list,struct st_room_type).f_level == v_akt_level) {
			v_save_x = LIST_CURRENT(ll_room_list,struct st_room_type).f_x;
			LIST_CURRENT(ll_room_list,struct st_room_type).f_x = LIST_CURRENT(ll_room_list,struct st_room_type).f_y;
			LIST_CURRENT(ll_room_list,struct st_room_type).f_y = v_save_x;
		}
	}
	v_save = a_ausgangy("diagonal", v_akt_level);
	a_ausgangy("diagonal", v_akt_level) = a_ausgangx("diagonal", v_akt_level);
	a_ausgangx("diagonal", v_akt_level) = v_save;
	p_changecurrentelement(ll_monster_list, a_first_monster("diagonal", v_akt_level).f_p);
	while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == v_akt_level) {
		v_xxx = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x;
		v_yyy = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y;
		LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x = v_yyy;
		LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y = v_xxx;
		p_nextelement(ll_monster_list);
	}
}

static intptr_t p_doubleclick() {
	intptr_t v_doppelklick = 0;
	static int32_t v_klicks;
	static int32_t v_mmouse_links_old;
	static int32_t v_time;
	static int32_t v_timer;
	v_timer = (v_time - p_elapsedmilliseconds());
	if (v_timer < 0) {
		v_timer = 0;
		v_klicks = 0;
	}
	if (g_mmouse_links) {
		if (!v_klicks) {
			v_klicks += 1;
			v_time = (p_elapsedmilliseconds() + 220);
		} else {
			if (!v_mmouse_links_old) {
				v_klicks += 1;
			}
		}
	}
	if (v_klicks > 1) {
		v_klicks = 0;
		v_doppelklick = 1;
		v_time = p_elapsedmilliseconds();
	} else {
		v_doppelklick = 0;
	}
	v_mmouse_links_old = g_mmouse_links;
	return v_doppelklick;
}

static intptr_t p_draw_advancements() {
	intptr_t v_aktuell = 0;
	intptr_t v_i = 0;
	intptr_t v_mauszauber = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_mouse_links = 0;
	intptr_t v_mouse_rechts = 0;
	intptr_t v_result = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	intptr_t v_yy = 0;
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	p_frontcolor(p_rgb(255, 255, 255));
	v_x = 90;
	v_y = 101;
	p_drawtext(v_x, v_y, a_message_text("draw_advancements", 50, (1 + g_language)), -1, 0);
	v_y = (v_y + g_yplus);
	p_drawtext(v_x, v_y, a_message_text("draw_advancements", 51, (1 + g_language)), -1, 0);
	v_y = ((v_y + g_yplus) + g_yplus);
	v_result = p_examinemouse();
	v_mmouse_x = p_mousex();
	v_mmouse_y = p_mousey();
	v_mouse_links = p_mousebutton(1);
	v_mouse_rechts = p_mousebutton(2);
	v_mauszauber = 0;
	g_mauszauber2 = 0;
	v_aktuell = 1;
	v_yy = v_y;
	if (v_mmouse_x > 25 && v_mmouse_x < 350) {
		for (v_i = 1; v_i <= g_anzz; v_i += 1) {
			if (v_mmouse_y >= v_yy && v_mmouse_y <= (v_yy + g_yplus)) {
				v_mauszauber = v_aktuell;
				if (v_mouse_links == 1) {
					g_mauszauber2 = v_aktuell;
				}
			}
			v_yy = (v_yy + g_yplus);
			v_aktuell = (v_aktuell + 1);
		}
	}
	p_frontcolor(p_rgb(255, 255, 255));
	if (v_mauszauber == 1) {
		p_frontcolor(p_rgb(1, 1, 255));
	}
	p_drawtext(v_x, v_y, a_message_text("draw_advancements", 52, (1 + g_language)), -1, 0);
	p_drawtext((v_x + 135), v_y, p_str(a_spieler("draw_advancements", g_akt_spieler).f_attack), -1, 0);
	p_drawtext((v_x + 165), v_y, "+1", -1, 0);
	v_y = (v_y + g_yplus);
	p_frontcolor(p_rgb(255, 255, 255));
	if (v_mauszauber == 2) {
		p_frontcolor(p_rgb(1, 1, 255));
	}
	p_drawtext(v_x, v_y, a_message_text("draw_advancements", 53, (1 + g_language)), -1, 0);
	p_drawtext((v_x + 135), v_y, p_str(a_spieler("draw_advancements", g_akt_spieler).f_dexterity), -1, 0);
	p_drawtext((v_x + 165), v_y, "+1", -1, 0);
	v_y = (v_y + g_yplus);
	p_frontcolor(p_rgb(255, 255, 255));
	if (v_mauszauber == 3) {
		p_frontcolor(p_rgb(1, 1, 255));
	}
	p_drawtext(v_x, v_y, a_message_text("draw_advancements", 54, (1 + g_language)), -1, 0);
	p_drawtext((v_x + 135), v_y, p_str(a_spieler("draw_advancements", g_akt_spieler).f_strength), -1, 0);
	p_drawtext((v_x + 165), v_y, "+1", -1, 0);
	v_y = (v_y + g_yplus);
	p_frontcolor(p_rgb(255, 255, 255));
	if (v_mauszauber == 4) {
		p_frontcolor(p_rgb(1, 1, 255));
	}
	p_drawtext(v_x, v_y, a_message_text("draw_advancements", 55, (1 + g_language)), -1, 0);
	p_drawtext((v_x + 135), v_y, p_str(a_spieler("draw_advancements", g_akt_spieler).f_maxlifepoints), -1, 0);
	p_drawtext((v_x + 165), v_y, "+" + p_str(a_spieler("draw_advancements", g_akt_spieler).f_lifegain), -1, 0);
	v_y = (v_y + g_yplus);
	p_frontcolor(p_rgb(255, 255, 255));
	if (v_mauszauber == 5) {
		p_frontcolor(p_rgb(1, 1, 255));
	}
	p_drawtext(v_x, v_y, a_message_text("draw_advancements", 56, (1 + g_language)), -1, 0);
	p_drawtext((v_x + 135), v_y, p_str(a_spieler("draw_advancements", g_akt_spieler).f_maxspeed), -1, 0);
	p_drawtext((v_x + 165), v_y, "+1", -1, 0);
	v_y = (v_y + g_yplus);
	p_frontcolor(p_rgb(255, 255, 255));
	if (v_mauszauber == 6) {
		p_frontcolor(p_rgb(1, 1, 255));
	}
	p_drawtext(v_x, v_y, a_message_text("draw_advancements", 57, (1 + g_language)), -1, 0);
	p_drawtext((v_x + 135), v_y, p_str(a_spieler("draw_advancements", g_akt_spieler).f_perception), -1, 0);
	p_drawtext((v_x + 165), v_y, "+1", -1, 0);
	v_y = (v_y + g_yplus);
	p_frontcolor(p_rgb(255, 255, 255));
	if (v_mauszauber == 7) {
		p_frontcolor(p_rgb(1, 1, 255));
	}
	p_drawtext(v_x, v_y, a_message_text("draw_advancements", 58, (1 + g_language)), -1, 0);
	p_drawtext((v_x + 135), v_y, p_str(a_spieler("draw_advancements", g_akt_spieler).f_luck_score), -1, 0);
	p_drawtext((v_x + 165), v_y, "+1", -1, 0);
	v_y = (v_y + g_yplus);
	p_frontcolor(p_rgb(255, 255, 255));
	if (v_mauszauber == 8) {
		p_frontcolor(p_rgb(1, 1, 255));
	}
	p_drawtext(v_x, v_y, a_message_text("draw_advancements", 59, (1 + g_language)), -1, 0);
	p_drawtext((v_x + 135), v_y, p_str(a_spieler("draw_advancements", g_akt_spieler).f_maxmana), -1, 0);
	p_drawtext((v_x + 165), v_y, "+" + p_str(a_spieler("draw_advancements", g_akt_spieler).f_managain), -1, 0);
	v_y = (v_y + g_yplus);
	p_frontcolor(p_rgb(255, 255, 255));
	if (v_mauszauber == 9) {
		p_frontcolor(p_rgb(1, 1, 255));
	}
	p_drawtext(v_x, v_y, a_message_text("draw_advancements", 60, (1 + g_language)), -1, 0);
	p_drawtext((v_x + 135), v_y, p_str(a_spieler("draw_advancements", g_akt_spieler).f_power_score), -1, 0);
	p_drawtext((v_x + 165), v_y, "+1", -1, 0);
	v_y = (v_y + g_yplus);
	p_frontcolor(p_rgb(255, 255, 255));
	if (v_mauszauber == 10) {
		p_frontcolor(p_rgb(1, 1, 255));
	}
	p_drawtext(v_x, v_y, a_message_text("draw_advancements", 61, (1 + g_language)), -1, 0);
	p_drawtext((v_x + 135), v_y, p_str(a_spieler("draw_advancements", g_akt_spieler).f_circle), -1, 0);
	p_drawtext((v_x + 165), v_y, "+1", -1, 0);
	p_stopdrawing();
}

static intptr_t p_draw_character(int8_t v_face, int8_t v_frame, int16_t v_offset) {
	intptr_t v_uebermalen = 0;
	int16_t v_yoff = 0;
	int16_t v_ysize = 0;
	if (a_spieler("draw_character", g_akt_spieler).f_in_water) {
		v_ysize = 16;
		v_yoff = 8;
	} else {
		v_ysize = 32;
		v_yoff = 0;
	}
	if (a_spieler("draw_character", g_akt_spieler).f_fluch == 23) {
		p_clipsprite(34, (((v_face * 32) * 2) + (v_frame * 32)), 0, 32, v_ysize);
		p_displaytransparentsprite(34, 160, ((160 + v_offset) + v_yoff));
	} else {
		if (p_habich(86)) {
			p_clipsprite(34, (((v_face * 32) * 2) + (v_frame * 32)), 128, 32, 32);
			p_displaytransparentsprite(34, 160, (160 + v_offset));
		} else {
			if (p_habich(87)) {
				p_clipsprite(34, (((v_face * 32) * 2) + (v_frame * 32)), 64, 32, v_ysize);
				p_displaytransparentsprite(34, 160, ((160 + v_offset) + v_yoff));
			} else {
				if (p_habich(88)) {
					p_clipsprite(34, (((v_face * 32) * 2) + (v_frame * 32)), 96, 32, 32);
					p_displaytransparentsprite(34, 160, (160 + v_offset));
				} else {
					if (p_habich(89)) {
						p_clipsprite(34, (((v_face * 32) * 2) + (v_frame * 32)), 32, 32, v_ysize);
						p_displaytransparentsprite(34, 160, ((160 + v_offset) + v_yoff));
					} else {
						if (p_habich(90)) {
							p_clipsprite(34, (((v_face * 32) * 2) + (v_frame * 32)), 160, 32, v_ysize);
							p_displaytransparentsprite(34, 160, ((160 + v_offset) + v_yoff));
						} else {
							p_clipsprite(0, (((v_face * 32) * 2) + (v_frame * 32)), ((a_spieler("draw_character", g_akt_spieler).f_maennchen * 32) - 32), 32, v_ysize);
							p_displaytransparentsprite(0, 160, ((160 + v_offset) + v_yoff));
							v_uebermalen = 1;
						}
					}
				}
			}
		}
	}
}

static intptr_t p_draw_characters(int8_t v_x_offset, int8_t v_y_offset) {
	intptr_t v_okay = 0;
	int16_t v_radius = 0;
	intptr_t v_x = 0;
	intptr_t v_xx = 0;
	intptr_t v_y = 0;
	int16_t v_yoff = 0;
	int16_t v_ysize = 0;
	v_radius = p_radius();
	for (v_y = 1; v_y <= 13; v_y += 1) {
		for (v_x = 1; v_x <= 13; v_x += 1) {
			if (((a_spieler("draw_characters", g_akt_spieler).f_character_x - 7) + v_x) > 0 && ((a_spieler("draw_characters", g_akt_spieler).f_character_y - 7) + v_y) > 0 && (a_matrix("draw_characters", v_x, v_y) <= v_radius || p_istoutdoor() == 1 || p_habich(200) == -1)) {
				for (v_xx = 1; v_xx <= g_nr_of_players; v_xx += 1) {
					if (v_xx != g_akt_spieler) {
						if (((a_spieler("draw_characters", g_akt_spieler).f_character_x - 7) + v_x) == a_spieler("draw_characters", v_xx).f_character_x && ((a_spieler("draw_characters", g_akt_spieler).f_character_y - 7) + v_y) == a_spieler("draw_characters", v_xx).f_character_y) {
							if (a_spieler("draw_characters", v_xx).f_status == 1 && a_spieler("draw_characters", v_xx).f_level == a_spieler("draw_characters", g_akt_spieler).f_level) {
								if (a_spieler("draw_characters", v_xx).f_in_water) {
									v_ysize = 16;
									v_yoff = 8;
								} else {
									v_ysize = 32;
									v_yoff = 0;
								}
								if (a_spieler("draw_characters", v_xx).f_fluch == 23) {
									p_clipsprite(34, ((a_spieler("draw_characters", v_xx).f_face * 32) * 2), 0, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								} else {
									if (p_hater(86, v_xx)) {
										p_clipsprite(34, ((a_spieler("draw_characters", v_xx).f_face * 32) * 2), 128, 32, 32);
										p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
										v_okay = 1;
									} else {
										if (p_hater(87, v_xx)) {
											p_clipsprite(34, ((a_spieler("draw_characters", v_xx).f_face * 32) * 2), 64, 32, v_ysize);
											p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), ((((v_y * 32) + v_y_offset) - 64) + v_yoff));
										} else {
											if (p_hater(88, v_xx)) {
												p_clipsprite(34, ((a_spieler("draw_characters", v_xx).f_face * 32) * 2), 96, 32, 32);
												p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
											} else {
												if (p_hater(89, v_xx)) {
													p_clipsprite(34, ((a_spieler("draw_characters", v_xx).f_face * 32) * 2), 32, 32, v_ysize);
													p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), ((((v_y * 32) + v_y_offset) - 64) + v_yoff));
												} else {
													if (p_hater(90, v_xx)) {
														p_clipsprite(34, ((a_spieler("draw_characters", v_xx).f_face * 32) * 2), 160, 32, v_ysize);
														p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), ((((v_y * 32) + v_y_offset) - 64) + v_yoff));
													} else {
														p_clipsprite(0, ((a_spieler("draw_characters", v_xx).f_face * 32) * 2), ((a_spieler("draw_characters", v_xx).f_maennchen * 32) - 32), 32, v_ysize);
														p_displaytransparentsprite(0, (((v_x * 32) + v_x_offset) - 64), ((((v_y * 32) + v_y_offset) - 64) + v_yoff));
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

static intptr_t p_draw_monster(intptr_t v_x, intptr_t v_y, int16_t v_offset_x, int16_t v_offset_y) {
	int16_t v_sprite_x = 0;
	int16_t v_sprite_y = 0;
	int16_t v_testfeld = 0;
	if (p_has_trait2(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number, 19) == 1 && !p_habich(109) && !p_habich(121) && !a_skills("draw_monster", 81, g_akt_spieler).f_gewaehlt) {
	} else {
		v_sprite_x = (a_monster("draw_monster", LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number).f_nr - 1);
		v_sprite_y = (v_sprite_x / 10);
		v_sprite_x = (v_sprite_x % 10);
		p_clipsprite(9, (v_sprite_x * 32), (v_sprite_y * 32), 32, 32);
		p_displaytransparentsprite(9, (((v_x * 32) - 64) + v_offset_x), (((v_y * 32) - 64) + v_offset_y));
		v_testfeld = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status;
		if (v_testfeld == 1) {
			p_clipsprite(47, 0, 0, 8, 9);
			p_displaytransparentsprite(47, ((((v_x * 32) - 64) + v_offset_x) + 23), (((v_y * 32) - 64) + v_offset_y));
		} else {
			if (v_testfeld == 2) {
				p_clipsprite(47, 8, 0, 8, 9);
				p_displaytransparentsprite(47, ((((v_x * 32) - 64) + v_offset_x) + 23), (((v_y * 32) - 64) + v_offset_y));
			} else {
				if (v_testfeld == 3) {
					p_clipsprite(47, 16, 0, 8, 9);
					p_displaytransparentsprite(47, ((((v_x * 32) - 64) + v_offset_x) + 23), (((v_y * 32) - 64) + v_offset_y));
				} else {
					if (v_testfeld == 4) {
						p_clipsprite(47, 24, 0, 8, 9);
						p_displaytransparentsprite(47, ((((v_x * 32) - 64) + v_offset_x) + 23), (((v_y * 32) - 64) + v_offset_y));
					} else {
						if (v_testfeld == 5) {
							p_clipsprite(47, 32, 0, 8, 9);
							p_displaytransparentsprite(47, ((((v_x * 32) - 64) + v_offset_x) + 23), (((v_y * 32) - 64) + v_offset_y));
						} else {
							if (v_testfeld == 6) {
								p_clipsprite(37, 0, 448, 32, 32);
								p_displaytransparentsprite(37, (((v_x * 32) - 64) + v_offset_x), (((v_y * 32) - 64) + v_offset_y));
							}
						}
					}
				}
			}
		}
	}
}

static intptr_t p_draw_monster2(int16_t v_offset_x, int16_t v_offset_y) {
	int16_t v_sprite_x = 0;
	int16_t v_sprite_y = 0;
	int16_t v_testfeld = 0;
	if (p_has_trait2(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number, 19) == 1) {
	} else {
		v_sprite_x = (a_monster("draw_monster2", LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number).f_nr - 1);
		v_sprite_y = (v_sprite_x / 10);
		v_sprite_x = (v_sprite_x % 10);
		p_clipsprite(9, (v_sprite_x * 32), (v_sprite_y * 32), 32, 32);
		p_displaytransparentsprite(9, v_offset_x, v_offset_y);
		v_testfeld = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status;
		if (v_testfeld == 1) {
			p_clipsprite(47, 0, 0, 8, 9);
			p_displaytransparentsprite(47, (v_offset_x + 23), v_offset_y);
		} else {
			if (v_testfeld == 2) {
				p_clipsprite(47, 8, 0, 8, 9);
				p_displaytransparentsprite(47, (v_offset_x + 23), v_offset_y);
			} else {
				if (v_testfeld == 3) {
					p_clipsprite(47, 16, 0, 8, 9);
					p_displaytransparentsprite(47, (v_offset_x + 23), v_offset_y);
				} else {
					if (v_testfeld == 4) {
						p_clipsprite(47, 24, 0, 8, 9);
						p_displaytransparentsprite(47, (v_offset_x + 23), v_offset_y);
					} else {
						if (v_testfeld == 5) {
							p_clipsprite(47, 32, 0, 8, 9);
							p_displaytransparentsprite(47, (v_offset_x + 23), v_offset_y);
						} else {
							if (v_testfeld == 6) {
								p_clipsprite(37, 0, 448, 32, 32);
								p_displaytransparentsprite(47, (v_offset_x + 23), v_offset_y);
							}
						}
					}
				}
			}
		}
	}
}

static intptr_t p_draw_screen7(int8_t v_x_offset, int8_t v_y_offset) {
	int16_t v_r = 0;
	int16_t v_radius = 0;
	int16_t v_testfeld = 0;
	int16_t v_x = 0;
	int16_t v_y = 0;
	v_radius = p_radius();
	p_changecurrentelement(ll_monster_list, a_first_monster("draw_screen7", a_spieler("draw_screen7", g_akt_spieler).f_level).f_p);
	v_r = 7;
	while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == a_spieler("draw_screen7", g_akt_spieler).f_level) {
		if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x > (a_spieler("draw_screen7", g_akt_spieler).f_character_x - v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x < (a_spieler("draw_screen7", g_akt_spieler).f_character_x + v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y > (a_spieler("draw_screen7", g_akt_spieler).f_character_y - v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y < (a_spieler("draw_screen7", g_akt_spieler).f_character_y + v_r)) {
			v_x = ((LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x - a_spieler("draw_screen7", g_akt_spieler).f_character_x) + 7);
			v_y = ((LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y - a_spieler("draw_screen7", g_akt_spieler).f_character_y) + 7);
			if (a_matrix("draw_screen7", v_x, v_y) <= v_radius || p_istoutdoor() == 1 || p_habich(200) == -1 || a_skills("draw_screen7", 81, g_akt_spieler).f_gewaehlt) {
				v_testfeld = a_labyrinth("draw_screen7", a_spieler("draw_screen7", g_akt_spieler).f_level, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y).f_feld;
				if (!a_skills("draw_screen7", 81, g_akt_spieler).f_gewaehlt && a_skills("draw_screen7", 79, g_akt_spieler).f_gewaehlt == 1 && (v_testfeld == 9 || v_testfeld == 67 || v_testfeld == 68 || v_testfeld == 6 || v_testfeld == 75 || v_testfeld == 93 || v_testfeld == 69 || v_testfeld == 62 || v_testfeld == 63)) {
				} else {
					p_draw_monster(v_x, v_y, v_x_offset, v_y_offset);
				}
			}
		}
		p_nextelement(ll_monster_list);
	}
}

static intptr_t p_draw_screen8(int8_t v_x_offset, int8_t v_y_offset) {
	int16_t v_r = 0;
	int16_t v_radius = 0;
	int16_t v_x = 0;
	int16_t v_y = 0;
	v_radius = p_radius2();
	p_changecurrentelement(ll_monster_list, a_first_monster("draw_screen8", a_spieler("draw_screen8", g_akt_spieler).f_level).f_p);
	v_r = 7;
	while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == a_spieler("draw_screen8", g_akt_spieler).f_level) {
		if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x > (a_spieler("draw_screen8", g_akt_spieler).f_creature_x - v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x < (a_spieler("draw_screen8", g_akt_spieler).f_creature_x + v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y > (a_spieler("draw_screen8", g_akt_spieler).f_creature_y - v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y < (a_spieler("draw_screen8", g_akt_spieler).f_creature_y + v_r)) {
			v_x = ((LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x - a_spieler("draw_screen8", g_akt_spieler).f_creature_x) + 7);
			v_y = ((LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y - a_spieler("draw_screen8", g_akt_spieler).f_creature_y) + 7);
			if (a_matrix("draw_screen8", v_x, v_y) <= v_radius || p_istoutdoor() == 1 || p_habich(200) == -1) {
				p_draw_monster(v_x, v_y, v_x_offset, v_y_offset);
			}
		}
		p_nextelement(ll_monster_list);
	}
}

static intptr_t p_draw_screen9(int8_t v_x_offset, int8_t v_y_offset) {
	int16_t v_monsterx = 0;
	int16_t v_monstery = 0;
	int16_t v_r = 0;
	int16_t v_testfeld = 0;
	p_changecurrentelement(ll_monster_list, a_first_monster("draw_screen9", a_spieler("draw_screen9", g_akt_spieler).f_level).f_p);
	v_r = 7;
	while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == a_spieler("draw_screen9", g_akt_spieler).f_level) {
		v_r = 7;
		if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x > (a_spieler("draw_screen9", g_akt_spieler).f_character_x - v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x < (a_spieler("draw_screen9", g_akt_spieler).f_character_x + v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y > (a_spieler("draw_screen9", g_akt_spieler).f_character_y - v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y < (a_spieler("draw_screen9", g_akt_spieler).f_character_y + v_r)) {
			v_monsterx = ((LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x - a_spieler("draw_screen9", g_akt_spieler).f_character_x) + 7);
			v_monstery = ((LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y - a_spieler("draw_screen9", g_akt_spieler).f_character_y) + 7);
			v_testfeld = a_labyrinth("draw_screen9", a_spieler("draw_screen9", g_akt_spieler).f_level, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y).f_feld;
			if (v_testfeld == 9 || v_testfeld == 67 || v_testfeld == 68 || v_testfeld == 6 || v_testfeld == 75 || v_testfeld == 93 || v_testfeld == 69 || v_testfeld == 62 || v_testfeld == 63) {
				p_draw_monster(v_monsterx, v_monstery, v_x_offset, v_y_offset);
			}
		}
		p_nextelement(ll_monster_list);
	}
}

static intptr_t p_draw_skill_list(intptr_t v_player_num, intptr_t v_x, intptr_t v_y, intptr_t v_maxlines, intptr_t v_firstline) {
	int16_t v_actline = 0;
	intptr_t v_b = 0;
	intptr_t v_g = 0;
	intptr_t v_i = 0;
	static int16_t v_ml_old;
	static int16_t v_my_old;
	intptr_t v_num_skills = 0;
	static int16_t v_oldfirstline;
	intptr_t v_r = 0;
	v_actline = 0;
	v_num_skills = p_count_skills(v_player_num);
	if (v_num_skills > v_maxlines) {
		if (g_mmouse_links && g_mmouse_x > v_x && g_mmouse_x < (v_x + 100)) {
			if (!v_ml_old) {
				v_ml_old = 1;
				v_my_old = g_mmouse_y;
			} else {
				v_firstline = (v_oldfirstline + (((intptr_t) v_my_old - g_mmouse_y) / 15));
				if (v_firstline < 1) {
					v_firstline = 1;
				}
				if (v_firstline > ((v_num_skills - v_maxlines) + 1)) {
					v_firstline = ((v_num_skills - v_maxlines) + 1);
				}
			}
		} else {
			v_ml_old = 0;
			v_oldfirstline = v_firstline;
		}
	}
	for (v_i = 1; v_i <= 144; v_i += 1) {
		if (a_skills("draw_skill_list", v_i, v_player_num).f_gewaehlt == 1 && a_skills("draw_skill_list", v_i, v_player_num).f_nummer) {
			v_actline += 1;
			if (v_actline > ((v_maxlines + v_firstline) - 1)) {
				break;
			}
			if (v_firstline > v_actline) {
				continue;
			} else {
				if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 100) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 14)) {
					p_frontcolor(p_rgb(255, 255, 255));
					p_drawtext(30, 430, a_skills("draw_skill_list", v_i, g_akt_spieler).f_beschreibung_1[(1 + g_language)] + " (" + p_str(a_skills("draw_skill_list", v_i, g_akt_spieler).f_kosten) + " CP)", -1, 0);
					p_drawtext(30, 445, a_skills("draw_skill_list", v_i, g_akt_spieler).f_beschreibung_2[(1 + g_language)], -1, 0);
				}
				switch (a_skills("draw_skill_list", v_i, v_player_num).f_gruppe) {
				case 1:
					v_r = 255;
					v_g = 1;
					v_b = 1;
					break;
				case 2:
					v_r = 138;
					v_g = 11;
					v_b = 88;
					break;
				case 3:
					v_r = 255;
					v_g = 1;
					v_b = 255;
					break;
				case 4:
					v_r = 1;
					v_g = 1;
					v_b = 255;
					break;
				case 5:
					v_r = 1;
					v_g = 255;
					v_b = 1;
					break;
				case 6:
					v_r = 1;
					v_g = 255;
					v_b = 255;
					break;
				case 7:
					v_r = 130;
					v_g = 115;
					v_b = 32;
					break;
				case 8:
					v_r = 150;
					v_g = 150;
					v_b = 150;
					break;
				case 9:
					v_r = 97;
					v_g = 56;
					v_b = 36;
					break;
				}
				p_frontcolor(p_rgb(v_r, v_g, v_b));
				p_drawtext(v_x, v_y, a_skills("draw_skill_list", v_i, g_akt_spieler).f_name[(1 + g_language)], -1, 0);
				v_y = (v_y + 15);
			}
		}
	}
	return v_firstline;
}

static intptr_t p_draw_skills(intptr_t v_spalte, intptr_t v_zeile, intptr_t v_pos_aktuell, intptr_t v_besch) {
	std::string v_act_text;
	intptr_t v_aktuell = 0;
	intptr_t v_b = 0;
	int16_t v_blockshow = 0;
	intptr_t v_g = 0;
	intptr_t v_i = 0;
	int16_t v_iii = 0;
	intptr_t v_j_art = 0;
	intptr_t v_lighting = 0;
	std::string v_line1;
	std::string v_line2;
	intptr_t v_r = 0;
	int16_t v_scount = 0;
	intptr_t v_shortcut_temp = 0;
	intptr_t v_spalte_temp = 0;
	int16_t v_taken = 0;
	int16_t v_temp = 0;
	intptr_t v_welche = 0;
	int16_t v_which_skill = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	intptr_t v_zeile_temp = 0;
	p_clearscreen(p_rgb(0, 0, 0));
	p_draw_plain_frame(33);
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	p_frontcolor(p_rgb(255, 255, 1));
	p_drawtext(170, 17, a_message_text("draw_skills", 114, (1 + g_language)) + p_str(g_akt_spieler) + ") :", -1, 0);
	p_stopdrawing();
	a_skilltyp_range.dim("skilltyp_range", 10);
	a_skilltyp_offset.dim("skilltyp_offset", 10);
	g_skillrow_offset = 13;
	a_skilltyp_offset("draw_skills", 0) = 0;
	a_skilltyp_range("draw_skills", 0) = 66;
	a_skilltyp_range("draw_skills", 1) = 28;
	a_skilltyp_range("draw_skills", 2) = 4;
	a_skilltyp_range("draw_skills", 3) = 33;
	a_skilltyp_range("draw_skills", 4) = 15;
	a_skilltyp_range("draw_skills", 5) = 18;
	a_skilltyp_range("draw_skills", 6) = 7;
	a_skilltyp_range("draw_skills", 7) = 11;
	a_skilltyp_range("draw_skills", 8) = 16;
	a_skilltyp_range("draw_skills", 9) = 3;
	a_skilltyp_offset("draw_skills", 1) = 0;
	a_skilltyp_offset("draw_skills", 2) = ((a_skilltyp_offset("draw_skills", 1) + a_skilltyp_range("draw_skills", 1)) + 1);
	a_skilltyp_offset("draw_skills", 3) = ((a_skilltyp_offset("draw_skills", 2) + a_skilltyp_range("draw_skills", 2)) + 1);
	a_skilltyp_offset("draw_skills", 4) = ((a_skilltyp_offset("draw_skills", 3) + a_skilltyp_range("draw_skills", 3)) + 1);
	a_skilltyp_offset("draw_skills", 5) = ((a_skilltyp_offset("draw_skills", 4) + a_skilltyp_range("draw_skills", 4)) + 1);
	a_skilltyp_offset("draw_skills", 6) = ((a_skilltyp_offset("draw_skills", 5) + a_skilltyp_range("draw_skills", 5)) + 1);
	a_skilltyp_offset("draw_skills", 7) = ((a_skilltyp_offset("draw_skills", 6) + a_skilltyp_range("draw_skills", 6)) + 1);
	a_skilltyp_offset("draw_skills", 8) = ((a_skilltyp_offset("draw_skills", 7) + a_skilltyp_range("draw_skills", 7)) + 1);
	a_skilltyp_offset("draw_skills", 9) = ((a_skilltyp_offset("draw_skills", 8) + a_skilltyp_range("draw_skills", 8)) + 1);
	v_x = 40;
	v_y = 50;
	for (v_shortcut_temp = -1; v_shortcut_temp <= 9; v_shortcut_temp += 1) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		v_temp = 1;
		if (!v_shortcut_temp) {
			v_welche = 0;
			p_frontcolor(p_rgb(255, 255, 255));
			v_j_art = 1;
		}
		if (v_shortcut_temp == 1) {
			v_welche = v_temp;
			p_frontcolor(p_rgb(255, 1, 1));
			v_j_art = 1;
		}
		v_temp = (v_temp + 28);
		if (v_shortcut_temp == 2) {
			v_welche = v_temp;
			p_frontcolor(p_rgb(138, 11, 88));
			v_j_art = 8;
		}
		v_temp = (v_temp + 4);
		if (v_shortcut_temp == 3) {
			v_welche = v_temp;
			p_frontcolor(p_rgb(255, 1, 255));
			v_j_art = 2;
		}
		v_temp = (v_temp + 33);
		if (v_shortcut_temp == 4) {
			v_welche = v_temp;
			p_frontcolor(p_rgb(1, 1, 255));
			v_j_art = 4;
		}
		v_temp = (v_temp + 15);
		if (v_shortcut_temp == 5) {
			v_welche = v_temp;
			p_frontcolor(p_rgb(1, 255, 1));
			v_j_art = 3;
		}
		v_temp = (v_temp + 18);
		if (v_shortcut_temp == 6) {
			v_welche = v_temp;
			p_frontcolor(p_rgb(1, 255, 255));
			v_j_art = 6;
		}
		v_temp = (v_temp + 7);
		if (v_shortcut_temp == 7) {
			v_welche = v_temp;
			p_frontcolor(p_rgb(130, 115, 32));
			v_j_art = 7;
		}
		v_temp = (v_temp + 11);
		if (v_shortcut_temp == 8) {
			v_welche = v_temp;
			p_frontcolor(p_rgb(150, 150, 150));
			v_j_art = 5;
		}
		v_temp = (v_temp + 16);
		if (v_shortcut_temp == 9) {
			v_welche = v_temp;
			p_frontcolor(p_rgb(97, 56, 36));
			v_j_art = 9;
		}
		if (v_shortcut_temp >= 1) {
			v_welche = a_skilltyp_offset("draw_skills", v_shortcut_temp);
		}
		if (v_shortcut_temp >= 1) {
			p_drawtext(v_x, v_y, a_skills("draw_skills", v_welche, g_akt_spieler).f_name[(1 + g_language)], -1, 0);
		}
		if (!v_shortcut_temp) {
			p_drawtext(v_x, v_y, a_message_text("draw_skills", 639, (1 + g_language)), -1, 0);
		}
		p_frontcolor(p_rgb(v_r, v_g, v_b));
		p_stopdrawing();
		if (v_shortcut_temp >= 1) {
			if (v_shortcut_temp != g_currentstyp) {
				p_clipsprite(11, ((v_j_art * 16) - 16), 1, 15, 15);
				p_displaysprite(11, (v_x - 20), (v_y + 2));
			}
			if (v_shortcut_temp == g_currentstyp) {
				p_clipsprite(11, ((v_j_art * 16) - 16), 33, 15, 15);
				p_displaysprite(11, (v_x - 20), (v_y + 2));
			}
		}
		if (!v_shortcut_temp) {
			if (v_shortcut_temp != g_currentstyp) {
				p_clipsprite(11, 192, 1, 15, 15);
				p_displaysprite(11, (v_x - 20), (v_y + 2));
			}
			if (v_shortcut_temp == g_currentstyp) {
				p_clipsprite(11, 192, 33, 15, 15);
				p_displaysprite(11, (v_x - 20), (v_y + 2));
			}
		}
		v_y = (v_y + 14);
	}
	v_welche = a_skilltyp_offset("draw_skills", g_currentstyp);
	v_x = 40;
	v_y = 50;
	if (!g_currentstyp) {
		v_welche = (27 * (g_skills_menu - 1));
	}
	v_aktuell = 0;
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	for (v_spalte_temp = 1; v_spalte_temp <= 3; v_spalte_temp += 1) {
		for (v_zeile_temp = 1; v_zeile_temp <= 27; v_zeile_temp += 1) {
			if (v_zeile_temp < g_skillrow_offset && v_spalte_temp == 1) {
				v_zeile_temp = g_skillrow_offset;
				v_y = (50 + (14 * (g_skillrow_offset - 1)));
				v_aktuell = g_skillrow_offset;
			}
			v_blockshow = 0;
			v_which_skill = 0;
			if (v_besch == 2) {
				if (a_skills("draw_skills", v_pos_aktuell, g_akt_spieler).f_nummer && v_welche == v_pos_aktuell) {
					v_which_skill = v_pos_aktuell;
					if (a_skills("draw_skills", v_welche, g_akt_spieler).f_gelocked > 0 && (p_keyboardpushed(304) || p_keyboardpushed(303))) {
						v_blockshow = 1;
					}
				}
			} else {
				if (v_spalte_temp == v_spalte && v_zeile_temp == v_zeile && a_skills("draw_skills", v_welche, g_akt_spieler).f_nummer) {
					v_which_skill = v_welche;
					if (v_besch == 3 && a_skills("draw_skills", v_welche, g_akt_spieler).f_gelocked > 0) {
						v_blockshow = 1;
					}
				}
			}
			if (v_which_skill > 0) {
				p_frontcolor(p_rgb(255, 255, 255));
				if (v_blockshow) {
					v_scount = 0;
					v_line1 = a_message_text("draw_skills", 884, (1 + g_language));
					v_line2 = "";
					for (v_iii = 1; v_iii <= 216; v_iii += 1) {
						if (a_unmoeglich("draw_skills", v_iii).f_locked == a_skills("draw_skills", v_welche, g_akt_spieler).f_nummer) {
							if (a_skills("draw_skills", a_unmoeglich("draw_skills", v_iii).f_name, g_akt_spieler).f_gewaehlt == 1) {
								switch (v_scount) {
								case 0:
									v_line1 = v_line1 + a_skills("draw_skills", a_unmoeglich("draw_skills", v_iii).f_name, g_akt_spieler).f_name[(1 + g_language)];
									break;
								case 1:
									v_line1 = v_line1 + "," + a_skills("draw_skills", a_unmoeglich("draw_skills", v_iii).f_name, g_akt_spieler).f_name[(1 + g_language)];
									break;
								case 2:
									v_line1 = v_line1 + ",";
									v_line2 = a_skills("draw_skills", a_unmoeglich("draw_skills", v_iii).f_name, g_akt_spieler).f_name[(1 + g_language)];
									break;
								default:
									v_line2 = v_line2 + "," + a_skills("draw_skills", a_unmoeglich("draw_skills", v_iii).f_name, g_akt_spieler).f_name[(1 + g_language)];
									break;
								}
								v_scount = (v_scount + 1);
							}
						}
					}
					if (a_skills("draw_skills", v_which_skill, g_akt_spieler).f_unique == 1) {
						v_taken = 0;
						for (v_i = 1; v_i <= (g_akt_spieler - 1); v_i += 1) {
							if (a_skills("draw_skills", v_which_skill, v_i).f_gewaehlt == 1) {
								v_line1 = a_message_text("draw_skills", 113, (1 + g_language)) + " " + p_str(v_i);
							}
						}
					}
					p_drawtext(30, 430, v_line1, -1, 0);
					p_drawtext(30, 445, v_line2, -1, 0);
				} else {
					p_drawtext(30, 430, a_skills("draw_skills", v_which_skill, g_akt_spieler).f_beschreibung_1[(1 + g_language)] + " (" + p_str(a_skills("draw_skills", v_which_skill, g_akt_spieler).f_kosten) + " CP)", -1, 0);
					v_act_text = a_skills("draw_skills", v_which_skill, g_akt_spieler).f_beschreibung_2[(1 + g_language)];
					if (a_skills("draw_skills", v_which_skill, g_akt_spieler).f_unique == 1) {
						v_act_text = v_act_text + "  (" + a_message_text("draw_skills", 669, (1 + g_language)) + "!)";
					}
					p_drawtext(30, 445, v_act_text, -1, 0);
				}
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 1)) {
				v_r = 255;
				v_g = 1;
				v_b = 1;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 2)) {
				v_r = 138;
				v_g = 11;
				v_b = 88;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 3)) {
				v_r = 255;
				v_g = 1;
				v_b = 255;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 4)) {
				v_r = 1;
				v_g = 1;
				v_b = 255;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 5)) {
				v_r = 1;
				v_g = 255;
				v_b = 1;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 6)) {
				v_r = 1;
				v_g = 255;
				v_b = 255;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 7)) {
				v_r = 130;
				v_g = 115;
				v_b = 32;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 8)) {
				v_r = 150;
				v_g = 150;
				v_b = 150;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 9)) {
				v_r = 97;
				v_g = 56;
				v_b = 36;
			}
			p_frontcolor(p_rgb(v_r, v_g, v_b));
			if (!a_skills("draw_skills", v_welche, g_akt_spieler).f_nummer) {
				p_frontcolor(p_rgb(255, 255, 1));
			}
			if ((v_spalte_temp == v_spalte && v_zeile_temp == v_zeile) || v_welche == v_pos_aktuell) {
				p_frontcolor(p_rgb(255, 255, 255));
				v_lighting = 1;
			} else {
				v_lighting = 0;
			}
			p_drawtext(v_x, v_y, a_skills("draw_skills", v_welche, g_akt_spieler).f_name[(1 + g_language)], -1, 0);
			p_frontcolor(p_rgb(v_r, v_g, v_b));
			v_y = (v_y + 14);
			v_welche = (v_welche + 1);
			v_aktuell = (v_aktuell + 1);
			if (v_welche > 143 || v_aktuell > ((intptr_t) a_skilltyp_range("draw_skills", g_currentstyp) + g_skillrow_offset)) {
				goto L_raushier_1;
			}
		}
		v_x = (v_x + 180);
		v_y = 50;
	}
L_raushier_1: ;
	p_stopdrawing();
	v_welche = a_skilltyp_offset("draw_skills", g_currentstyp);
	v_x = 40;
	v_y = 50;
	if (!g_currentstyp) {
		v_welche = (27 * (g_skills_menu - 1));
	}
	for (v_spalte_temp = 1; v_spalte_temp <= 3; v_spalte_temp += 1) {
		for (v_zeile_temp = 1; v_zeile_temp <= 27; v_zeile_temp += 1) {
			if (v_zeile_temp < g_skillrow_offset && v_spalte_temp == 1) {
				v_zeile_temp = g_skillrow_offset;
				v_y = (50 + (14 * (g_skillrow_offset - 1)));
				v_aktuell = g_skillrow_offset;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 1)) {
				v_j_art = 1;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 2)) {
				v_j_art = 8;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 3)) {
				v_j_art = 2;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 4)) {
				v_j_art = 4;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 5)) {
				v_j_art = 3;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 6)) {
				v_j_art = 6;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 7)) {
				v_j_art = 7;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 8)) {
				v_j_art = 5;
			}
			if (v_welche > a_skilltyp_offset("draw_skills", 9)) {
				v_j_art = 9;
			}
			if (a_skills("draw_skills", v_welche, g_akt_spieler).f_gelocked > 0) {
				p_clipsprite(11, 144, 1, 15, 15);
				p_displaytransparentsprite(11, (v_x - 20), (v_y + 2));
			} else {
				if (a_skills("draw_skills", v_welche, g_akt_spieler).f_nummer && !a_skills("draw_skills", v_welche, g_akt_spieler).f_gewaehlt) {
					p_clipsprite(11, ((v_j_art * 16) - 16), 1, 15, 15);
					p_displaytransparentsprite(11, (v_x - 20), (v_y + 2));
				}
				if (a_skills("draw_skills", v_welche, g_akt_spieler).f_nummer && a_skills("draw_skills", v_welche, g_akt_spieler).f_gewaehlt == 1) {
					p_clipsprite(11, ((v_j_art * 16) - 16), 33, 15, 15);
					p_displaytransparentsprite(11, (v_x - 20), (v_y + 2));
				}
			}
			v_y = (v_y + 14);
			v_welche = (v_welche + 1);
			v_aktuell = (v_aktuell + 1);
			if (v_welche > 143 || v_aktuell > ((intptr_t) a_skilltyp_range("draw_skills", g_currentstyp) + g_skillrow_offset)) {
				goto L_raushier_2;
			}
		}
		v_x = (v_x + 180);
		v_y = 50;
	}
L_raushier_2: ;
}

static intptr_t p_draw_small_monster(int16_t v_nr, int16_t v_x, int16_t v_y, int8_t v_offset_x, int8_t v_offset_y) {
	int16_t v_sprite_x = 0;
	int16_t v_sprite_y = 0;
	v_sprite_x = (v_nr - 1);
	v_sprite_y = (v_sprite_x / 10);
	v_sprite_x = (v_sprite_x % 10);
	if (!p_has_trait2(v_nr, 19)) {
		p_clipsprite(23, (v_sprite_x * 16), (v_sprite_y * 16), 16, 16);
		p_displaytransparentsprite(23, ((v_x * 16) + v_offset_x), ((v_y * 16) + v_offset_y));
	}
}

static intptr_t p_draw_small_tile(int16_t v_nr, int16_t v_x, int16_t v_y, int8_t v_offset_x, int8_t v_offset_y, int16_t v_map_level, int16_t v_bg) {
	int16_t v_sprite_xx = 0;
	int16_t v_sprite_yy = 0;
	int16_t v_zw = 0;
	if (!v_map_level) {
		v_map_level = a_spieler("draw_small_tile", g_akt_spieler).f_level;
	}
	if (v_nr == 75 || (v_nr >= 22 && v_nr <= 30)) {
		v_nr = a_inhalt("draw_small_tile", v_map_level);
	}
	if (v_nr == 20) {
		v_nr = a_mit_was("draw_small_tile", v_map_level);
	}
	if (v_nr == 2 && g_karten_typ == 5) {
		g_sprite_x = 2;
		g_sprite_y = 0;
		p_clipsprite(22, (g_sprite_x * 16), (g_sprite_y * 16), 16, 16);
		p_displaysprite(22, ((v_x * 16) + v_offset_x), ((v_y * 16) + v_offset_y));
	}
	v_nr = p_teleporter_icon(v_nr);
	g_sprite_x = v_nr;
	g_sprite_y = (g_sprite_x / 10);
	g_sprite_x = (g_sprite_x % 10);
	if (p_istmauer(v_nr) == 1) {
		p_clipsprite(22, (g_sprite_x * 16), (g_sprite_y * 16), 16, 16);
		p_displaysprite(22, ((v_x * 16) + v_offset_x), ((v_y * 16) + v_offset_y));
	}
	if (g_karten_typ == 2) {
		if (v_map_level > 0) {
			if (v_bg > 0) {
				v_sprite_xx = v_bg;
			} else {
				v_sprite_xx = a_inhalt("draw_small_tile", v_map_level);
			}
			v_sprite_yy = (v_sprite_xx / 10);
			v_sprite_xx = (v_sprite_xx % 10);
			p_clipsprite(22, (v_sprite_xx * 16), (v_sprite_yy * 16), 16, 16);
			p_displaysprite(22, ((v_x * 16) + v_offset_x), ((v_y * 16) + v_offset_y));
		}
		p_clipsprite(22, (g_sprite_x * 16), (g_sprite_y * 16), 16, 16);
		p_displaytransparentsprite(22, ((v_x * 16) + v_offset_x), ((v_y * 16) + v_offset_y));
	}
	if (v_nr == 8 && g_karten_typ == 3) {
		g_sprite_x = 8;
		g_sprite_y = 0;
		p_clipsprite(22, (g_sprite_x * 16), (g_sprite_y * 16), 16, 16);
		p_displaysprite(22, ((v_x * 16) + v_offset_x), ((v_y * 16) + v_offset_y));
	}
	if (v_nr == 7 && g_karten_typ == 4) {
		g_sprite_x = 7;
		g_sprite_y = 0;
		p_clipsprite(22, (g_sprite_x * 16), (g_sprite_y * 16), 16, 16);
		p_displaysprite(22, ((v_x * 16) + v_offset_x), ((v_y * 16) + v_offset_y));
	}
}

static intptr_t p_draw_tile(int16_t v_nr, int16_t v_x, int16_t v_y, int16_t v_offset_x, int16_t v_offset_y, int16_t v_bg) {
	int16_t v_inhalt_x = 0;
	int16_t v_inhalt_y = 0;
	int16_t v_sprite_x = 0;
	int16_t v_sprite_y = 0;
	int16_t v_zw = 0;
	if (v_bg > 0) {
		v_inhalt_x = v_bg;
	} else {
		v_inhalt_x = a_inhalt("draw_tile", a_spieler("draw_tile", g_akt_spieler).f_level);
	}
	v_inhalt_y = (v_inhalt_x / 10);
	v_inhalt_x = (v_inhalt_x % 10);
	if (v_nr == 75 || (v_nr >= 22 && v_nr <= 30)) {
		v_nr = a_inhalt("draw_tile", a_spieler("draw_tile", g_akt_spieler).f_level);
	}
	if (v_nr == 20) {
		v_nr = a_mit_was("draw_tile", a_spieler("draw_tile", g_akt_spieler).f_level);
	}
	v_nr = p_teleporter_icon(v_nr);
	if (v_bg != -1) {
		p_clipsprite(1, (v_inhalt_x * 32), (v_inhalt_y * 32), 32, 32);
		p_displaysprite(1, (((v_x * 32) - 64) + v_offset_x), (((v_y * 32) - 64) + v_offset_y));
	}
	v_sprite_x = (v_nr % 10);
	v_sprite_y = (v_nr / 10);
	p_clipsprite(1, (v_sprite_x * 32), (v_sprite_y * 32), 32, 32);
	p_displaytransparentsprite(1, (((v_x * 32) - 64) + v_offset_x), (((v_y * 32) - 64) + v_offset_y));
	if (v_nr == 9) {
		p_clipsprite(1, 288, 0, 32, 32);
		p_displaytransparentsprite(1, (((v_x * 32) - 64) + v_offset_x), (((v_y * 32) - 64) + v_offset_y));
	}
}

static intptr_t p_drawbitmapfont(int32_t v_s, int32_t v_x, int32_t v_y, int32_t v_w, int32_t v_h, std::string v_t) {
	intptr_t v_a = 0;
	uint8_t v_b = 0;
	v_a = 0;
	do {
		v_b = p_peekc((char *) v_t.data() + v_a);
		p_clipsprite(v_s, ((v_b - 32) * v_w), 0, v_w, v_h);
		p_displaytransparentsprite(v_s, (v_x + (v_a * v_w)), v_y);
		v_a += 1;
	} while (v_b);
}

static intptr_t p_drawbuttonnotpressed(int32_t v_s, int32_t v_x, int32_t v_y, int32_t v_w, int32_t v_h, std::string v_t) {
	p_startdrawing(p_screenoutput());
	p_line((v_x - 6), (v_y - 6), ((p_len(v_t) * v_w) + 10), 0, 11184810);
	p_line((v_x - 6), ((v_y - 6) + v_h), ((p_len(v_t) * v_w) + 10), 0, 3355443);
	p_line((v_x - 6), (v_y - 6), 0, v_h, 11184810);
	p_line((((v_x - 6) + (p_len(v_t) * v_w)) + 10), (v_y - 6), 0, v_h, 3355443);
	p_box((((v_x - 6) + (p_len(v_t) * v_w)) + 10), (v_y - 6), 0, v_h, 8947848);
	p_stopdrawing();
	p_drawbitmapfont(v_s, v_x, v_y, v_w, v_h, v_t);
}

static intptr_t p_drawbuttonpressed(int32_t v_s, int32_t v_x, int32_t v_y, int32_t v_w, int32_t v_h, std::string v_t) {
	p_startdrawing(p_screenoutput());
	p_box((v_x - 6), (v_y - 6), ((p_len(v_t) * v_w) + 10), v_h, 4473924);
	p_stopdrawing();
	p_drawbitmapfont(v_s, v_x, v_y, v_w, v_h, v_t);
}

static intptr_t p_eintragen(int16_t v_nr, int16_t v_staerke, int16_t v_dauer, int16_t v_source) {
	intptr_t v_i = 0;
	intptr_t v_pos = 0;
	for (v_i = 1; v_i <= 30; v_i += 1) {
		if (a_aktive("eintragen", v_i, g_akt_spieler).f_nr == v_nr && a_aktive("eintragen", v_i, g_akt_spieler).f_source == v_source) {
			a_aktive("eintragen", v_i, g_akt_spieler).f_nr = 0;
			a_aktive("eintragen", v_i, g_akt_spieler).f_staerke = 0;
			a_aktive("eintragen", v_i, g_akt_spieler).f_dauer = 0;
		}
	}
	if (v_nr >= 86 && v_nr <= 90) {
		for (v_i = 1; v_i <= 30; v_i += 1) {
			if (a_aktive("eintragen", v_i, g_akt_spieler).f_nr == 86 || a_aktive("eintragen", v_i, g_akt_spieler).f_nr == 87 || a_aktive("eintragen", v_i, g_akt_spieler).f_nr == 88 || a_aktive("eintragen", v_i, g_akt_spieler).f_nr == 89 || a_aktive("eintragen", v_i, g_akt_spieler).f_nr == 90) {
				a_aktive("eintragen", v_i, g_akt_spieler).f_nr = 0;
				a_aktive("eintragen", v_i, g_akt_spieler).f_staerke = 0;
				a_aktive("eintragen", v_i, g_akt_spieler).f_dauer = 0;
			}
		}
	}
	if (v_nr >= 168 && v_nr <= 171) {
		for (v_i = 1; v_i <= 30; v_i += 1) {
			if (a_aktive("eintragen", v_i, g_akt_spieler).f_nr == 168 || a_aktive("eintragen", v_i, g_akt_spieler).f_nr == 169 || a_aktive("eintragen", v_i, g_akt_spieler).f_nr == 170 || a_aktive("eintragen", v_i, g_akt_spieler).f_nr == 171) {
				a_aktive("eintragen", v_i, g_akt_spieler).f_nr = 0;
				a_aktive("eintragen", v_i, g_akt_spieler).f_staerke = 0;
				a_aktive("eintragen", v_i, g_akt_spieler).f_dauer = 0;
			}
		}
	}
	v_i = 1;
	v_pos = 0;
	do {
		if (!a_aktive("eintragen", v_i, g_akt_spieler).f_nr) {
			v_pos = v_i;
		}
		v_i = (v_i + 1);
	} while (!(v_i > 30 || v_pos > 0));
	if (v_i <= 30) {
		a_aktive("eintragen", v_pos, g_akt_spieler).f_nr = v_nr;
		a_aktive("eintragen", v_pos, g_akt_spieler).f_staerke = v_staerke;
		if (v_dauer == -2) {
			a_aktive("eintragen", v_pos, g_akt_spieler).f_dauer = -2;
		} else {
			if (v_dauer != -1) {
				if (p_habich(157) > 0) {
					v_dauer = (v_dauer * 2);
				}
				if (a_skills("eintragen", 61, g_akt_spieler).f_gewaehlt == 1) {
					v_dauer = (v_dauer * 2);
				}
				if (a_skills("eintragen", 137, g_akt_spieler).f_gewaehlt == 1) {
					v_dauer = (v_dauer / 2);
				}
				if (a_spieler("eintragen", g_akt_spieler).f_fluch == 20) {
					v_dauer = (v_dauer / 2);
				}
			}
			a_aktive("eintragen", v_pos, g_akt_spieler).f_dauer = v_dauer;
			a_aktive("eintragen", v_pos, g_akt_spieler).f_source = v_source;
		}
	}
}

static intptr_t p_entdecken() {
	intptr_t v_akt_entdecken = 0;
	v_akt_entdecken = (p_wahrnehmung() * 10);
	v_akt_entdecken = (v_akt_entdecken - a_spieler("entdecken", g_akt_spieler).f_level);
	if (a_skills("entdecken", 126, g_akt_spieler).f_gewaehlt == 1) {
		v_akt_entdecken = 0;
	}
	if (v_akt_entdecken > 90) {
		v_akt_entdecken = 90;
	}
	return v_akt_entdecken;
}

static intptr_t p_erstelle_liste(int16_t v_reset_pos) {
	int16_t v_i = 0;
	int16_t v_lmasq = 0;
	int16_t v_nehmen = 0;
	p_liste_leeren();
	g_anz_zauber = 1;
	for (v_i = 1; v_i <= 184; v_i += 1) {
		v_nehmen = p_zauber_nehmen(v_i);
		if ((a_learned("erstelle_liste", g_akt_spieler, v_i) & 256)) {
			v_nehmen = 1;
		}
		v_lmasq = (a_learned("erstelle_liste", g_akt_spieler, v_i) & 384);
		if ((a_spieler("erstelle_liste", g_akt_spieler).f_schule == 64 && v_lmasq == 256) || (a_spieler("erstelle_liste", g_akt_spieler).f_schule == 65 && v_lmasq == 384) || (a_spieler("erstelle_liste", g_akt_spieler).f_schule == 67 && a_spells("erstelle_liste", v_i).f_summoning == 1)) {
		} else {
			if (a_spieler("erstelle_liste", g_akt_spieler).f_schule) {
				if (a_spells("erstelle_liste", v_i).f_school != a_spieler("erstelle_liste", g_akt_spieler).f_schule) {
					v_nehmen = 0;
				}
			}
		}
		if (v_nehmen == 1) {
			a_zauberliste("erstelle_liste", (g_anz_zauber + g_akt_zauber_offset2)) = v_i;
			g_anz_zauber = (g_anz_zauber + 1);
		}
	}
	p_bubblesort();
	a_zauberliste("erstelle_liste", (g_anz_zauber + g_akt_zauber_offset2)) = -2;
	if (v_reset_pos) {
		g_akt_zauber = p_max(0, (g_anz_zauber - 13));
		a_spieler("erstelle_liste", g_akt_spieler).f_pos_zaubermenue = g_akt_zauber;
	}
}

static intptr_t p_explain(int16_t v_was, int16_t v_pos) {
	intptr_t v_nr = 0;
	switch (v_was) {
	case 1:
		v_nr = 349;
		break;
	case 2:
		v_nr = 350;
		break;
	case 3:
		v_nr = 351;
		break;
	case 4:
		v_nr = 352;
		break;
	case 5:
		v_nr = 353;
		break;
	case 6:
		v_nr = 354;
		break;
	case 7:
		v_nr = 355;
		break;
	case 8:
		v_nr = 356;
		break;
	case 9:
		v_nr = 357;
		break;
	case 10:
		v_nr = 358;
		break;
	case 11:
		v_nr = 359;
		break;
	case 12:
		v_nr = 360;
		break;
	case 13:
		v_nr = 361;
		break;
	case 14:
		v_nr = 362;
		break;
	case 15:
		v_nr = 363;
		break;
	case 16:
		v_nr = 364;
		break;
	case 17:
		v_nr = 365;
		break;
	case 18:
		v_nr = 366;
		break;
	case 19:
		v_nr = 367;
		break;
	case 20:
		v_nr = 368;
		break;
	case 21:
		v_nr = 369;
		break;
	case 22:
		v_nr = 370;
		break;
	case 23:
		v_nr = 371;
		break;
	case 24:
		v_nr = 372;
		break;
	case 25:
		v_nr = 373;
		break;
	case 26:
		v_nr = 374;
		break;
	case 27:
		v_nr = 375;
		break;
	case 28:
		v_nr = 376;
		break;
	case 29:
		v_nr = 481;
		break;
	case 30:
		v_nr = 668;
		break;
	case 31:
		v_nr = 669;
		break;
	case 32:
		v_nr = 670;
		break;
	case 33:
		v_nr = 671;
		break;
	case 34:
		v_nr = 672;
		break;
	case 35:
		v_nr = 673;
		break;
	case 36:
		v_nr = 674;
		break;
	case 37:
		v_nr = 675;
		break;
	case 38:
		v_nr = 676;
		break;
	case 39:
		v_nr = 677;
		break;
	case 40:
		v_nr = 678;
		break;
	case 41:
		v_nr = 821;
		break;
	case 42:
		v_nr = 822;
		break;
	case 43:
		v_nr = 823;
		break;
	case 44:
		v_nr = 824;
		break;
	case 45:
		v_nr = 834;
		break;
	}
	p_drawtext(175, v_pos, p_nachricht4(v_nr), -1, 0);
}

static intptr_t p_find1() {
	int16_t v_egon = 0;
	intptr_t v_hugo = 0;
	int16_t v_obje = 0;
	int16_t v_willi = 0;
	v_obje = 0;
	v_hugo = (p_random(12) + 1);
	if (g_test == 1) {
		v_hugo = 5;
	}
	switch (v_hugo) {
	case 1:
		if (p_random(15) < 15) {
			v_hugo = p_random(14);
			v_obje = (24 + v_hugo);
		} else {
			v_obje = 41;
		}
		break;
	case 2:
		v_hugo = p_random(20);
		v_obje = (1 + v_hugo);
		break;
	case 3:
		v_hugo = (p_random(2) + 1);
		if (v_hugo == 1) {
			v_obje = (56 + p_random(9));
		}
		if (v_hugo == 2) {
			v_obje = (42 + p_random(2));
		}
		if (v_hugo == 3) {
			v_willi = (p_random(3) + 1);
			switch (v_willi) {
			case 1:
				v_obje = 53;
				break;
			case 2:
				v_obje = 383;
				break;
			case 3:
				v_obje = 384;
				break;
			case 4:
				v_obje = 396;
				break;
			}
		}
		break;
	case 4:
		do {
			v_egon = (p_random(410) + 1);
			if (a_item("find1", v_egon).f_type == 16) {
				v_obje = v_egon;
			}
		} while (!(v_obje > 0));
		break;
	case 5:
		v_obje = (p_random(37) + 75);
		break;
	case 6:
		v_hugo = p_random(100);
		if (v_hugo < 51) {
			v_obje = 270;
		} else {
			v_obje = 269;
		}
		break;
	case 7:
		v_hugo = (p_random(6) + 1);
		switch (v_hugo) {
		case 1:
			v_obje = 291;
			break;
		case 2:
			v_obje = 292;
			break;
		case 3:
			v_obje = 190;
			break;
		case 4:
			v_obje = 170;
			break;
		case 5:
			v_obje = 171;
			break;
		case 6:
			v_obje = 172;
			break;
		case 7:
			v_obje = 173;
			break;
		}
		break;
	case 8:
		v_hugo = p_random(100);
		if (v_hugo < 51) {
			v_obje = 231;
		} else {
			v_obje = 219;
		}
		break;
	case 9:
		v_obje = 38;
		break;
	case 10:
		v_hugo = p_random(100);
		if (v_hugo < 61) {
			v_obje = 46;
		}
		if (v_hugo > 60 && v_hugo < 85) {
			v_obje = 39;
		}
		if (v_hugo > 84) {
			v_obje = 134;
		}
		break;
	case 11:
		if (p_random(100) < 50) {
			v_obje = 353;
		} else {
			v_obje = 249;
		}
		break;
	case 12:
		do {
			v_hugo = p_random(18);
			v_obje = (357 + v_hugo);
		} while (!(v_obje != 367));
		break;
	case 13:
		v_obje = (75 + p_random(37));
		break;
	}
	return v_obje;
}

static intptr_t p_find_trap() {
	int16_t v_entdecken = 0;
	v_entdecken = (p_entdecken() + (p_habich(61) * 10));
	if (a_skills("find_trap", 77, g_akt_spieler).f_gewaehlt == 1) {
		v_entdecken = (v_entdecken + 70);
	}
	if (a_skills("find_trap", 97, g_akt_spieler).f_gewaehlt == 1) {
		v_entdecken = (v_entdecken + 30);
	}
	if (v_entdecken > 90) {
		v_entdecken = 90;
	}
	if (p_habich(26) > 0) {
		v_entdecken = 90;
	}
	if (a_skills("find_trap", 126, g_akt_spieler).f_gewaehlt == 1) {
		v_entdecken = 0;
	}
	return v_entdecken;
}

static intptr_t p_find_treasure() {
	int16_t v_entdecken = 0;
	v_entdecken = p_entdecken();
	if (a_skills("find_treasure", 97, g_akt_spieler).f_gewaehlt == 1) {
		v_entdecken = (v_entdecken + 30);
	}
	if (v_entdecken > 90) {
		v_entdecken = 90;
	}
	if (a_skills("find_treasure", 126, g_akt_spieler).f_gewaehlt == 1) {
		v_entdecken = 0;
	}
	if (a_skills("find_treasure", 79, g_akt_spieler).f_gewaehlt == 1) {
		v_entdecken = 100;
	}
	return v_entdecken;
}

static intptr_t p_finden2() {
	int16_t v_egon = 0;
	intptr_t v_hugo = 0;
	int16_t v_mag_geg = 0;
	intptr_t v_obje = 0;
	intptr_t v_willi = 0;
	v_mag_geg = 0;
	v_egon = 0;
	v_hugo = (p_random(5) + 1);
	if (g_test == 1) {
		v_hugo = 1;
	}
	switch (v_hugo) {
	case 1:
		do {
			v_egon = (p_random(410) + 1);
			if (a_item("finden2", v_egon).f_type == 18) {
				v_mag_geg = v_egon;
			}
		} while (!(v_mag_geg > 0));
		break;
	case 2:
		do {
			v_egon = (p_random(410) + 1);
			if (a_item("finden2", v_egon).f_type == 22) {
				v_mag_geg = v_egon;
			}
		} while (!(v_mag_geg > 0));
		break;
	case 3:
		do {
			v_egon = (p_random(410) + 1);
			if (a_item("finden2", v_egon).f_type == 20) {
				v_mag_geg = v_egon;
			}
		} while (!(v_mag_geg > 0));
		break;
	case 4:
		v_willi = (p_random(27) + 1);
		switch (v_willi) {
		case 1:
			v_mag_geg = 142;
			break;
		case 2:
			v_mag_geg = 143;
			break;
		case 3:
			v_mag_geg = 144;
			break;
		case 4:
			v_mag_geg = 237;
			break;
		case 5:
			v_mag_geg = 377;
			break;
		case 6:
			v_mag_geg = 379;
			break;
		case 7:
			v_mag_geg = 382;
			break;
		case 8:
			v_mag_geg = 49;
			break;
		case 9:
			v_mag_geg = 233;
			break;
		case 10:
			v_mag_geg = 235;
			break;
		case 11:
			v_mag_geg = 238;
			break;
		case 12:
			v_mag_geg = 236;
			break;
		case 13:
			v_mag_geg = 376;
			break;
		case 14:
			v_mag_geg = 378;
			break;
		case 15:
			v_mag_geg = 381;
			break;
		case 16:
			v_mag_geg = 385;
			break;
		case 17:
			v_mag_geg = 187;
			break;
		case 18:
			v_mag_geg = 288;
			break;
		case 19:
			v_mag_geg = 161;
			break;
		case 20:
			v_mag_geg = 162;
			break;
		case 21:
			v_mag_geg = 155;
			break;
		case 22:
			v_mag_geg = 380;
			break;
		case 23:
			v_mag_geg = 164;
			break;
		case 24:
			v_mag_geg = 157;
			break;
		case 25:
			v_mag_geg = 284;
			break;
		case 26:
			v_mag_geg = 286;
			break;
		case 27:
			v_mag_geg = 281;
			break;
		case 28:
			v_mag_geg = 280;
			break;
		}
		break;
	case 5:
		v_willi = (p_random(18) + 1);
		switch (v_willi) {
		case 1:
			v_mag_geg = 239;
			break;
		case 2:
			v_mag_geg = 200;
			break;
		case 3:
			v_mag_geg = 51;
			break;
		case 4:
			v_mag_geg = 201;
			break;
		case 5:
			v_mag_geg = 222;
			break;
		case 6:
			v_mag_geg = 153;
			break;
		case 7:
			v_mag_geg = 223;
			break;
		case 8:
			v_mag_geg = 229;
			break;
		case 9:
			v_mag_geg = 230;
			break;
		case 10:
			v_mag_geg = 224;
			break;
		case 11:
			v_mag_geg = 225;
			break;
		case 12:
			v_mag_geg = 156;
			break;
		case 13:
			v_mag_geg = 347;
			break;
		case 14:
			v_mag_geg = 348;
			break;
		case 15:
			v_mag_geg = 349;
			break;
		case 16:
			v_mag_geg = 160;
			break;
		case 17:
			v_mag_geg = 54;
			break;
		case 18:
			v_mag_geg = 260;
			break;
		case 19:
			v_mag_geg = 228;
			break;
		}
		break;
	case 6:
		v_willi = (p_random(12) + 1);
		switch (v_willi) {
		case 1:
			v_mag_geg = 212;
			break;
		case 2:
			v_mag_geg = 146;
			break;
		case 3:
			v_mag_geg = 148;
			break;
		case 4:
			v_mag_geg = 247;
			break;
		case 5:
			v_mag_geg = 244;
			break;
		case 6:
			v_mag_geg = 241;
			break;
		case 7:
			v_mag_geg = 158;
			break;
		case 8:
			v_mag_geg = 165;
			break;
		case 9:
			v_mag_geg = 289;
			break;
		case 10:
			v_mag_geg = 248;
			break;
		case 11:
			v_mag_geg = 159;
			break;
		case 12:
			v_mag_geg = 399;
			break;
		case 13:
			v_mag_geg = 400;
			break;
		}
		break;
	}
	p_resetlist(ll_unique_items);
	while (p_nextelement(ll_unique_items)) {
		if (LIST_CURRENT(ll_unique_items,struct st_unique_item).f_name == v_obje) {
			v_mag_geg = 200;
		}
	}
	return v_mag_geg;
}

static intptr_t p_freigeben(int16_t v_welche) {
	if (v_welche == 134) {
		if (!a_skills("freigeben", 82, g_akt_spieler).f_gewaehlt && !a_skills("freigeben", 83, g_akt_spieler).f_gewaehlt) {
			a_skills("freigeben", v_welche, g_akt_spieler).f_gewaehlt = 0;
			a_spieler("freigeben", g_akt_spieler).f_skill_points = (a_spieler("freigeben", g_akt_spieler).f_skill_points + a_skills("freigeben", v_welche, g_akt_spieler).f_kosten);
			p_unlocken(v_welche);
		}
	} else {
		a_skills("freigeben", v_welche, g_akt_spieler).f_gewaehlt = 0;
		a_spieler("freigeben", g_akt_spieler).f_skill_points = (a_spieler("freigeben", g_akt_spieler).f_skill_points + a_skills("freigeben", v_welche, g_akt_spieler).f_kosten);
		p_unlocken(v_welche);
	}
}

static intptr_t p_fullscreen() {
	intptr_t v_windowid = 0;
	if (g_win_mode == 2) {
		g_win_mode = 1;
		if (!p_openscreen(640, 480, 16, "Lost Labyrinth")) {
		}
	} else {
		g_win_mode = 2;
		if (!p_openwindowedscreen(v_windowid, 0, 0, 640, 480, 0, 0, 0)) {
		}
	}
}

static intptr_t p_gamespeed() {
	intptr_t v_gewaehlt_animationen = 0;
	int16_t v_gewaehlt_message = 0;
	int16_t v_gewaehlt_scrolling = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_result = 0;
	intptr_t v_wohin = 0;
	int16_t v_xx = 0;
	int16_t v_xxx = 0;
	int16_t v_xxxx = 0;
	intptr_t v_y = 0;
	int16_t v_yy = 0;
	int16_t v_yyy = 0;
	int16_t v_yyyy = 0;
	v_gewaehlt_message = 0;
	v_gewaehlt_scrolling = 0;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 1));
		p_drawtext(195, 25, a_message_text("gamespeed", 664, (1 + g_language)), -1, 0);
		v_xxx = 195;
		v_yyy = 100;
		p_drawtext(v_xxx, v_yyy, a_message_text("gamespeed", 665, (1 + g_language)), -1, 0);
		v_xx = 195;
		v_yy = 200;
		p_drawtext(v_xx, v_yy, "Scrolling", -1, 0);
		v_xxxx = 195;
		v_yyyy = 300;
		p_drawtext(v_xxxx, v_yyyy, a_message_text("gamespeed", 702, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_draw_plain_frame(-1);
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
		}
		v_yyy = (v_yyy + 25);
		for (v_y = 1; v_y <= 9; v_y += 1) {
			if (v_mmouse_x > (50 + (v_y * 50)) && v_mmouse_x < (100 + (v_y * 50)) && v_mmouse_y > v_yyy && v_mmouse_y < (v_yyy + 50)) {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_frontcolor(p_rgb(100, 100, 100));
				p_box((50 + (v_y * 50)), v_yyy, 50, 50, -1);
				p_drawingmode(1);
				p_frontcolor(p_rgb(255, 255, 255));
				if (v_y == (g_mydelay / 200)) {
					p_frontcolor(p_rgb(1, 1, 255));
				}
				p_drawtext((75 + (v_y * 50)), (17 + v_yyy), p_str(((int64_t) 10 - v_y)), -1, 0);
				p_stopdrawing();
				if (v_mmouse_links == 1) {
					v_gewaehlt_message = v_y;
				}
			} else {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_frontcolor(p_rgb(255, 255, 255));
				p_drawingmode(1);
				if (v_y == (g_mydelay / 200)) {
					p_frontcolor(p_rgb(1, 1, 255));
				}
				p_drawtext((75 + (v_y * 50)), (17 + v_yyy), p_str(((int64_t) 10 - v_y)), -1, 0);
				p_stopdrawing();
			}
		}
		v_yy = (v_yy + 25);
		for (v_y = 1; v_y <= 5; v_y += 1) {
			if (v_mmouse_x > (50 + (v_y * 50)) && v_mmouse_x < (100 + (v_y * 50)) && v_mmouse_y > v_yy && v_mmouse_y < (v_yy + 50)) {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_frontcolor(p_rgb(100, 100, 100));
				p_box((50 + (v_y * 50)), v_yy, 50, 50, -1);
				p_drawingmode(1);
				p_frontcolor(p_rgb(255, 255, 255));
				if (v_y == ((g_mydelay2 / 10) + 1)) {
					p_frontcolor(p_rgb(1, 1, 255));
				}
				p_drawtext((75 + (v_y * 50)), (17 + v_yy), p_str(((int64_t) 6 - v_y)), -1, 0);
				p_stopdrawing();
				if (v_mmouse_links == 1) {
					v_gewaehlt_scrolling = v_y;
				}
			} else {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_frontcolor(p_rgb(255, 255, 255));
				p_drawingmode(1);
				if (v_y == ((g_mydelay2 / 10) + 1)) {
					p_frontcolor(p_rgb(1, 1, 255));
				}
				p_drawtext((75 + (v_y * 50)), (17 + v_yy), p_str(((int64_t) 6 - v_y)), -1, 0);
				p_stopdrawing();
			}
		}
		v_yyyy = (v_yyyy + 25);
		for (v_y = 1; v_y <= 4; v_y += 1) {
			if (v_mmouse_x > (50 + (v_y * 50)) && v_mmouse_x < (100 + (v_y * 50)) && v_mmouse_y > v_yyyy && v_mmouse_y < (v_yyyy + 50)) {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_frontcolor(p_rgb(100, 100, 100));
				p_box((50 + (v_y * 50)), v_yyyy, 50, 50, -1);
				p_drawingmode(1);
				p_frontcolor(p_rgb(255, 255, 255));
				if ((4 - v_y) == g_mydelay4) {
					p_frontcolor(p_rgb(1, 1, 255));
				}
				p_drawtext((75 + (v_y * 50)), (17 + v_yyyy), p_str((4 - ((int64_t) v_y - 1))), -1, 0);
				p_stopdrawing();
				if (v_mmouse_links == 1) {
					v_gewaehlt_animationen = v_y;
				}
			} else {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_frontcolor(p_rgb(255, 255, 255));
				p_drawingmode(1);
				if ((4 - v_y) == g_mydelay4) {
					p_frontcolor(p_rgb(1, 1, 255));
				}
				p_drawtext((75 + (v_y * 50)), (17 + v_yyyy), p_str((4 - ((int64_t) v_y - 1))), -1, 0);
				p_stopdrawing();
			}
		}
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		p_delay(50);
	} while (!(v_gewaehlt_message > 0 || v_gewaehlt_scrolling > 0 || v_gewaehlt_animationen > 0 || v_mmouse_rechts == 1));
	if (v_gewaehlt_message > 0) {
		g_mydelay = (v_gewaehlt_message * 200);
	}
	if (v_gewaehlt_scrolling > 0) {
		g_mydelay2 = ((v_gewaehlt_scrolling - 1) * 10);
	}
	if (v_gewaehlt_animationen > 0) {
		g_mydelay4 = (4 - v_gewaehlt_animationen);
	}
	p_delay(g_mydelay);
}

static intptr_t p_get_actual_options() {
	intptr_t v_i = 0;
	if (g_no_mouse == 1) {
		g_no_mouse_text = a_message_text("get_actual_options", 956, (g_language + 1));
	} else {
		g_no_mouse_text = a_message_text("get_actual_options", 957, (g_language + 1));
	}
	if (g_autopickup == 1) {
		g_autopickup_text = a_message_text("get_actual_options", 958, (g_language + 1));
	} else {
		g_autopickup_text = a_message_text("get_actual_options", 959, (g_language + 1));
	}
	if (g_sound == 1) {
		g_sound_text = a_message_text("get_actual_options", 958, (g_language + 1));
	} else {
		g_sound_text = a_message_text("get_actual_options", 959, (g_language + 1));
	}
	if (g_music == 1) {
		g_music_text = a_message_text("get_actual_options", 958, (g_language + 1));
	} else {
		g_music_text = a_message_text("get_actual_options", 959, (g_language + 1));
	}
	if (g_klicking == 1) {
		g_klicking_text = a_message_text("get_actual_options", 958, (g_language + 1));
	} else {
		g_klicking_text = a_message_text("get_actual_options", 959, (g_language + 1));
	}
	if (g_knopf5 == 1) {
		g_knopf5_text = a_message_text("get_actual_options", 958, (g_language + 1));
	} else {
		g_knopf5_text = a_message_text("get_actual_options", 959, (g_language + 1));
	}
	if (g_flaschen == 1) {
		g_flaschen_text = a_message_text("get_actual_options", 958, (g_language + 1));
	} else {
		g_flaschen_text = a_message_text("get_actual_options", 959, (g_language + 1));
	}
	for (v_i = 1; v_i <= 30; v_i += 1) {
		a_optionenliste("get_actual_options", v_i) = "";
	}
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 1)) = a_message_text("get_actual_options", 960, (g_language + 1));
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 2)) = a_message_text("get_actual_options", 961, (g_language + 1));
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 3)) = a_message_text("get_actual_options", 962, (g_language + 1));
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 4)) = a_message_text("get_actual_options", 963, (g_language + 1));
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 5)) = a_message_text("get_actual_options", 964, (g_language + 1));
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 6)) = a_message_text("get_actual_options", 965, (g_language + 1));
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 7)) = a_message_text("get_actual_options", 966, (g_language + 1)) + ": " + g_no_mouse_text;
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 8)) = a_message_text("get_actual_options", 967, (g_language + 1)) + ": " + g_autopickup_text;
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 9)) = a_message_text("get_actual_options", 968, (g_language + 1)) + ": " + g_sound_text;
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 10)) = a_message_text("get_actual_options", 969, (g_language + 1)) + ": " + g_music_text;
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 11)) = a_message_text("get_actual_options", 970, (g_language + 1)) + ": " + g_klicking_text;
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 12)) = a_message_text("get_actual_options", 971, (g_language + 1)) + ": " + g_knopf5_text;
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 13)) = a_message_text("get_actual_options", 972, (g_language + 1)) + ": " + g_flaschen_text;
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 14)) = a_message_text("get_actual_options", 975, (g_language + 1)) + ": " + p_str(a_spieler("get_actual_options", g_akt_spieler).f_mousepointer);
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 15)) = a_message_text("get_actual_options", 405, (g_language + 1));
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 16)) = a_message_text("get_actual_options", 974, (g_language + 1));
	a_optionenliste("get_actual_options", (g_akt_zauber_offset2 + 17)) = a_message_text("get_actual_options", 650, (g_language + 1));
}

static intptr_t p_get_creature(int16_t v_typ) {
	a_spieler("get_creature", g_akt_spieler).f_creature_typ = v_typ;
	a_spieler("get_creature", g_akt_spieler).f_creature_lifepoints = a_creature("get_creature", v_typ).f_creature_lifepoints;
	a_spieler("get_creature", g_akt_spieler).f_creature_maxlifepoints = a_creature("get_creature", v_typ).f_creature_maxlifepoints;
	a_spieler("get_creature", g_akt_spieler).f_creature_attack = a_creature("get_creature", v_typ).f_creature_attack;
	a_spieler("get_creature", g_akt_spieler).f_creature_schaden_min = a_creature("get_creature", v_typ).f_creature_schaden_min;
	a_spieler("get_creature", g_akt_spieler).f_creature_schaden_max = a_creature("get_creature", v_typ).f_creature_schaden_max;
	a_spieler("get_creature", g_akt_spieler).f_creature_speed = p_creature_speed();
	a_spieler("get_creature", g_akt_spieler).f_creature_maxspeed = a_creature("get_creature", v_typ).f_creature_maxspeed;
	a_spieler("get_creature", g_akt_spieler).f_creature_x = (a_spieler("get_creature", g_akt_spieler).f_character_x + g_spell_x);
	a_spieler("get_creature", g_akt_spieler).f_creature_y = (a_spieler("get_creature", g_akt_spieler).f_character_y + g_spell_y);
	a_spieler("get_creature", g_akt_spieler).f_creature_heading = 2;
}

static intptr_t p_get_enchant_creature() {
	if (p_habich(171) > 0) {
		return 4;
	}
	if (p_habich(170) > 0) {
		return 3;
	}
	if (p_habich(169) > 0) {
		return 2;
	}
	if (p_habich(168) > 0) {
		return 1;
	}
	return 0;
}

static intptr_t p_getmonster(int16_t v_xx, int16_t v_yy, int16_t v_level) {
	if (v_level == -1) {
		v_level = a_spieler("getmonster", g_akt_spieler).f_level;
	}
	p_changecurrentelement(ll_monster_list, a_first_monster("getmonster", v_level).f_p);
	while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == v_level) {
		if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x == v_xx && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y == v_yy) {
			return LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number;
		}
		p_nextelement(ll_monster_list);
	}
	return 0;
}

static intptr_t p_horizontal(int16_t v_akt_level) {
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	int16_t v_save_anzahl = 0;
	int16_t v_save_feld = 0;
	int16_t v_save_name2 = 0;
	int16_t v_save_stat1 = 0;
	int16_t v_save_stat2 = 0;
	int16_t v_save_status2 = 0;
	for (v_i = 1; v_i <= (a_groesse("horizontal", v_akt_level) / 2); v_i += 1) {
		for (v_j = 1; v_j <= a_groesse("horizontal", v_akt_level); v_j += 1) {
			v_save_feld = a_labyrinth("horizontal", v_akt_level, v_i, v_j).f_feld;
			v_save_stat1 = a_labyrinth("horizontal", v_akt_level, v_i, v_j).f_stat1;
			v_save_stat2 = a_labyrinth("horizontal", v_akt_level, v_i, v_j).f_stat2;
			v_save_name2 = a_laby_item("horizontal", v_i, v_j).f_name[v_akt_level];
			v_save_anzahl = a_laby_item("horizontal", v_i, v_j).f_anzahl[v_akt_level];
			v_save_status2 = a_laby_item("horizontal", v_i, v_j).f_status[v_akt_level];
			a_labyrinth("horizontal", v_akt_level, v_i, v_j).f_feld = a_labyrinth("horizontal", v_akt_level, ((a_groesse("horizontal", v_akt_level) + 1) - v_i), v_j).f_feld;
			a_labyrinth("horizontal", v_akt_level, v_i, v_j).f_stat1 = a_labyrinth("horizontal", v_akt_level, ((a_groesse("horizontal", v_akt_level) + 1) - v_i), v_j).f_stat1;
			a_labyrinth("horizontal", v_akt_level, v_i, v_j).f_stat2 = a_labyrinth("horizontal", v_akt_level, ((a_groesse("horizontal", v_akt_level) + 1) - v_i), v_j).f_stat2;
			a_laby_item("horizontal", v_i, v_j).f_name[v_akt_level] = a_laby_item("horizontal", ((a_groesse("horizontal", v_akt_level) + 1) - v_i), v_j).f_name[v_akt_level];
			a_laby_item("horizontal", v_i, v_j).f_anzahl[v_akt_level] = a_laby_item("horizontal", ((a_groesse("horizontal", v_akt_level) + 1) - v_i), v_j).f_anzahl[v_akt_level];
			a_laby_item("horizontal", v_i, v_j).f_status[v_akt_level] = a_laby_item("horizontal", ((a_groesse("horizontal", v_akt_level) + 1) - v_i), v_j).f_status[v_akt_level];
			a_labyrinth("horizontal", v_akt_level, ((a_groesse("horizontal", v_akt_level) + 1) - v_i), v_j).f_feld = v_save_feld;
			a_labyrinth("horizontal", v_akt_level, ((a_groesse("horizontal", v_akt_level) + 1) - v_i), v_j).f_stat1 = v_save_stat1;
			a_labyrinth("horizontal", v_akt_level, ((a_groesse("horizontal", v_akt_level) + 1) - v_i), v_j).f_stat2 = v_save_stat2;
			a_laby_item("horizontal", ((a_groesse("horizontal", v_akt_level) + 1) - v_i), v_j).f_name[v_akt_level] = v_save_name2;
			a_laby_item("horizontal", ((a_groesse("horizontal", v_akt_level) + 1) - v_i), v_j).f_anzahl[v_akt_level] = v_save_anzahl;
			a_laby_item("horizontal", ((a_groesse("horizontal", v_akt_level) + 1) - v_i), v_j).f_status[v_akt_level] = v_save_status2;
		}
	}
	for (v_i = 1; v_i <= a_groesse("horizontal", v_akt_level); v_i += 1) {
		for (v_j = 1; v_j <= a_groesse("horizontal", v_akt_level); v_j += 1) {
			if (a_labyrinth("horizontal", v_akt_level, v_i, v_j).f_feld == 74) {
				a_labyrinth("horizontal", v_akt_level, v_i, v_j).f_stat1 = ((a_groesse("horizontal", v_akt_level) + 1) - a_labyrinth("horizontal", v_akt_level, v_i, v_j).f_stat1);
			}
		}
	}
	p_resetlist(ll_room_list);
	while (p_nextelement(ll_room_list)) {
		if (LIST_CURRENT(ll_room_list,struct st_room_type).f_level == v_akt_level) {
			LIST_CURRENT(ll_room_list,struct st_room_type).f_x = (((-1 * LIST_CURRENT(ll_room_list,struct st_room_type).f_x) + a_groesse("horizontal", v_akt_level)) - 8);
		}
	}
	a_eingangx("horizontal", v_akt_level) = a_groesse("horizontal", v_akt_level);
	a_ausgangx("horizontal", v_akt_level) = ((a_groesse("horizontal", v_akt_level) + 1) - a_ausgangx("horizontal", v_akt_level));
	p_changecurrentelement(ll_monster_list, a_first_monster("horizontal", v_akt_level).f_p);
	while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == v_akt_level) {
		LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x = ((a_groesse("horizontal", v_akt_level) + 1) - LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x);
		p_nextelement(ll_monster_list);
	}
}

static intptr_t p_init_pilze() {
	intptr_t v_i = 0;
	intptr_t v_k = 0;
	intptr_t v_nach = 0;
	intptr_t v_von = 0;
	struct st_gs v_zw_geg;
	for (v_i = 0; v_i <= 8; v_i += 1) {
		v_von = (65 + v_i);
		v_nach = ((65 + v_i) + p_random((9 - v_i)));
		for (v_k = 1; v_k <= 3; v_k += 1) {
			v_zw_geg.f_name[v_k] = a_item("init_pilze", v_von).f_name[v_k];
		}
		v_zw_geg.f_attri1 = a_item("init_pilze", v_von).f_attri1;
		v_zw_geg.f_einkauf = a_item("init_pilze", v_von).f_einkauf;
		v_zw_geg.f_verkauf = a_item("init_pilze", v_von).f_verkauf;
		for (v_k = 1; v_k <= 3; v_k += 1) {
			a_item("init_pilze", v_von).f_name[v_k] = a_item("init_pilze", v_nach).f_name[v_k];
		}
		a_item("init_pilze", v_von).f_attri1 = a_item("init_pilze", v_nach).f_attri1;
		a_item("init_pilze", v_von).f_einkauf = a_item("init_pilze", v_nach).f_einkauf;
		a_item("init_pilze", v_von).f_verkauf = a_item("init_pilze", v_nach).f_verkauf;
		for (v_k = 1; v_k <= 3; v_k += 1) {
			a_item("init_pilze", v_nach).f_name[v_k] = v_zw_geg.f_name[v_k];
		}
		a_item("init_pilze", v_nach).f_attri1 = v_zw_geg.f_attri1;
		a_item("init_pilze", v_nach).f_einkauf = v_zw_geg.f_einkauf;
		a_item("init_pilze", v_nach).f_verkauf = v_zw_geg.f_verkauf;
	}
	for (v_i = 0; v_i <= 9; v_i += 1) {
		a_mush_known("init_pilze", v_i) = 0;
	}
}

static intptr_t p_init_skills() {
	intptr_t v_i = 0;
	if (!g_combi) {
		for (v_i = 1; v_i <= 144; v_i += 1) {
			a_skills("init_skills", v_i, g_akt_spieler).f_gewaehlt = 0;
			a_skills("init_skills", v_i, g_akt_spieler).f_gelocked = 0;
		}
	}
	a_skills("init_skills", 0, g_akt_spieler).f_name[2] = "Weg des Schwertes";
	a_skills("init_skills", 0, g_akt_spieler).f_name[1] = "Way of the Sword";
	a_skills("init_skills", 0, g_akt_spieler).f_name[3] = "Camino de la Espada";
	a_skills("init_skills", 0, g_akt_spieler).f_nummer = 0;
	a_skills("init_skills", 0, g_akt_spieler).f_kosten = 0;
	a_skills("init_skills", 0, g_akt_spieler).f_beschreibung_1[2] = "";
	a_skills("init_skills", 0, g_akt_spieler).f_beschreibung_1[1] = "";
	a_skills("init_skills", 0, g_akt_spieler).f_beschreibung_1[3] = "";
	a_skills("init_skills", 0, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 0, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 0, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 1, g_akt_spieler).f_name[2] = "Kampftraining";
	a_skills("init_skills", 1, g_akt_spieler).f_name[1] = "Combat Training";
	a_skills("init_skills", 1, g_akt_spieler).f_name[3] = "Entrenamiento de Combate";
	a_skills("init_skills", 1, g_akt_spieler).f_nummer = 1;
	a_skills("init_skills", 1, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 1, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 1, g_akt_spieler).f_beschreibung_1[2] = "Angriff: 4 (normalerweise 1)";
	a_skills("init_skills", 1, g_akt_spieler).f_beschreibung_1[1] = "Attack: 4 (normally 1)";
	a_skills("init_skills", 1, g_akt_spieler).f_beschreibung_1[3] = "Ataque: 4 (normalmente 1)";
	a_skills("init_skills", 1, g_akt_spieler).f_beschreibung_2[2] = "(Angriff = Chance im Kampf zu treffen)";
	a_skills("init_skills", 1, g_akt_spieler).f_beschreibung_2[1] = "(Attack = Chance to hit in combat)";
	a_skills("init_skills", 1, g_akt_spieler).f_beschreibung_2[3] = "(Ataque = Chance de alcanzar en combate)";
	a_skills("init_skills", 2, g_akt_spieler).f_name[2] = "Konstitution";
	a_skills("init_skills", 2, g_akt_spieler).f_name[1] = "Constitution";
	a_skills("init_skills", 2, g_akt_spieler).f_name[3] = "Constituci\363n";
	a_skills("init_skills", 2, g_akt_spieler).f_nummer = 2;
	a_skills("init_skills", 2, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 2, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 2, g_akt_spieler).f_beschreibung_1[2] = "15 Lebenspunkte (normalerweise 12)";
	a_skills("init_skills", 2, g_akt_spieler).f_beschreibung_1[1] = "15 Life Points (normally 12)";
	a_skills("init_skills", 2, g_akt_spieler).f_beschreibung_1[3] = "15 Puntos de Vida (normalmente 12)";
	a_skills("init_skills", 2, g_akt_spieler).f_beschreibung_2[2] = "+4 Lebenspunkte bei Erfahrungsgewinn (normalerweise +3)";
	a_skills("init_skills", 2, g_akt_spieler).f_beschreibung_2[1] = "+4 Life Points per experience gain (normally +3)";
	a_skills("init_skills", 2, g_akt_spieler).f_beschreibung_2[3] = "+4 Puntos de Vida al ganar experiencia (normalmente +3)";
	a_skills("init_skills", 3, g_akt_spieler).f_name[2] = "St\344rke";
	a_skills("init_skills", 3, g_akt_spieler).f_name[1] = "Strength";
	a_skills("init_skills", 3, g_akt_spieler).f_name[3] = "Fuerza";
	a_skills("init_skills", 3, g_akt_spieler).f_nummer = 3;
	a_skills("init_skills", 3, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 3, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 3, g_akt_spieler).f_beschreibung_1[2] = "St\344rke: 4 (normalerweise 1)";
	a_skills("init_skills", 3, g_akt_spieler).f_beschreibung_1[1] = "Strength: 4 (normally 1)";
	a_skills("init_skills", 3, g_akt_spieler).f_beschreibung_1[3] = "Fuerza: 4 (normalmente 1)";
	a_skills("init_skills", 3, g_akt_spieler).f_beschreibung_2[2] = "(Richtet Schaden im Nahkampf an)";
	a_skills("init_skills", 3, g_akt_spieler).f_beschreibung_2[1] = "(Deals damage in close combat)";
	a_skills("init_skills", 3, g_akt_spieler).f_beschreibung_2[3] = "(Hace da\361o en combate cerca)";
	a_skills("init_skills", 4, g_akt_spieler).f_name[2] = "Berserker";
	a_skills("init_skills", 4, g_akt_spieler).f_name[1] = "Berserk";
	a_skills("init_skills", 4, g_akt_spieler).f_name[3] = "Berserker";
	a_skills("init_skills", 4, g_akt_spieler).f_nummer = 4;
	a_skills("init_skills", 4, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 4, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 4, g_akt_spieler).f_beschreibung_1[2] = "St\344rke z\344hlt im Nahkampf doppelt";
	a_skills("init_skills", 4, g_akt_spieler).f_beschreibung_1[1] = "Strength counts twice in melee combat";
	a_skills("init_skills", 4, g_akt_spieler).f_beschreibung_1[3] = "La Fuerza se duplica en cuerpo a cuerpo";
	a_skills("init_skills", 4, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 4, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 4, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 5, g_akt_spieler).f_name[2] = "Gewandtheit";
	a_skills("init_skills", 5, g_akt_spieler).f_name[1] = "Dexterity";
	a_skills("init_skills", 5, g_akt_spieler).f_name[3] = "Destreza";
	a_skills("init_skills", 5, g_akt_spieler).f_nummer = 5;
	a_skills("init_skills", 5, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 5, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 5, g_akt_spieler).f_beschreibung_1[2] = "Reflexe: 4 (normalerweise 1)";
	a_skills("init_skills", 5, g_akt_spieler).f_beschreibung_1[1] = "Dexterity: 4 (normally 1)";
	a_skills("init_skills", 5, g_akt_spieler).f_beschreibung_1[3] = "Destreza: 4 (normalmente 1)";
	a_skills("init_skills", 5, g_akt_spieler).f_beschreibung_2[2] = "(Verhindert Monster Treffer und weicht Fallen aus)";
	a_skills("init_skills", 5, g_akt_spieler).f_beschreibung_2[1] = "(Prevents getting hit by monsters and traps)";
	a_skills("init_skills", 5, g_akt_spieler).f_beschreibung_2[3] = "(Preventa que monstuos y trampas alcanzan)";
	a_skills("init_skills", 6, g_akt_spieler).f_name[2] = "Ausweichen";
	a_skills("init_skills", 6, g_akt_spieler).f_name[1] = "Dodging";
	a_skills("init_skills", 6, g_akt_spieler).f_name[3] = "Evasi\363n";
	a_skills("init_skills", 6, g_akt_spieler).f_nummer = 6;
	a_skills("init_skills", 6, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 6, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 6, g_akt_spieler).f_beschreibung_1[2] = "50% aller Monsterattacken verfehlen den Charakter";
	a_skills("init_skills", 6, g_akt_spieler).f_beschreibung_1[1] = "50% of all monster attacks miss the character";
	a_skills("init_skills", 6, g_akt_spieler).f_beschreibung_1[3] = "El 50% de ataques de monstruos fallan";
	a_skills("init_skills", 6, g_akt_spieler).f_beschreibung_2[2] = "(Im Nah- und Fernkampf)";
	a_skills("init_skills", 6, g_akt_spieler).f_beschreibung_2[1] = "(in close and ranged combat)";
	a_skills("init_skills", 6, g_akt_spieler).f_beschreibung_2[3] = "(en combate cerca y lejos)";
	a_skills("init_skills", 7, g_akt_spieler).f_name[2] = "Kampf in R\374stung";
	a_skills("init_skills", 7, g_akt_spieler).f_name[1] = "Fighting in Armor";
	a_skills("init_skills", 7, g_akt_spieler).f_name[3] = "Luchar con Armadura";
	a_skills("init_skills", 7, g_akt_spieler).f_nummer = 7;
	a_skills("init_skills", 7, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 7, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 7, g_akt_spieler).f_beschreibung_1[2] = "Keine Behinderung durch R\374stung";
	a_skills("init_skills", 7, g_akt_spieler).f_beschreibung_1[1] = "No Encumbrance through armor";
	a_skills("init_skills", 7, g_akt_spieler).f_beschreibung_1[3] = "Sin estorbos con armadura";
	a_skills("init_skills", 7, g_akt_spieler).f_beschreibung_2[2] = "(Behinderung wird normalerweise von Angriff abgezogen)";
	a_skills("init_skills", 7, g_akt_spieler).f_beschreibung_2[1] = "(Encumbrance is normally subtracted from Attack)";
	a_skills("init_skills", 7, g_akt_spieler).f_beschreibung_2[3] = "(Los estorbos normalmente disminuyen el Ataque)";
	a_skills("init_skills", 8, g_akt_spieler).f_name[2] = "H\344rte";
	a_skills("init_skills", 8, g_akt_spieler).f_name[1] = "Toughness";
	a_skills("init_skills", 8, g_akt_spieler).f_name[3] = "Dureza";
	a_skills("init_skills", 8, g_akt_spieler).f_nummer = 8;
	a_skills("init_skills", 8, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 8, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 8, g_akt_spieler).f_beschreibung_1[2] = "Jeglicher Schaden wird um 1 Punkt reduziert";
	a_skills("init_skills", 8, g_akt_spieler).f_beschreibung_1[1] = "All damage is reduced by 1 point";
	a_skills("init_skills", 8, g_akt_spieler).f_beschreibung_1[3] = "Todos los da\361os se reducen en 1 punto";
	a_skills("init_skills", 8, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 8, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 8, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 9, g_akt_spieler).f_name[2] = "Veteran";
	a_skills("init_skills", 9, g_akt_spieler).f_name[1] = "Veteran";
	a_skills("init_skills", 9, g_akt_spieler).f_name[3] = "Veterano";
	a_skills("init_skills", 9, g_akt_spieler).f_nummer = 9;
	a_skills("init_skills", 9, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 9, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 9, g_akt_spieler).f_beschreibung_1[2] = "Beginnt das Spiel mit Schwert, Schild, R\374stung,";
	a_skills("init_skills", 9, g_akt_spieler).f_beschreibung_1[1] = "Starts with sword, shield, armour,";
	a_skills("init_skills", 9, g_akt_spieler).f_beschreibung_1[3] = "Empieza con espada, escudo, armadura,";
	a_skills("init_skills", 9, g_akt_spieler).f_beschreibung_2[2] = "Lederhelm,  Lederschuhen und +2 den Lehren";
	a_skills("init_skills", 9, g_akt_spieler).f_beschreibung_2[1] = "leather helmet, leather shoes and +2 in all lore fields";
	a_skills("init_skills", 9, g_akt_spieler).f_beschreibung_2[3] = "casco, zapatos de cuero y +2 en todos los conocimientos";
	a_skills("init_skills", 10, g_akt_spieler).f_name[2] = "Duelist";
	a_skills("init_skills", 10, g_akt_spieler).f_name[1] = "Duelist";
	a_skills("init_skills", 10, g_akt_spieler).f_name[3] = "Duelista";
	a_skills("init_skills", 10, g_akt_spieler).f_nummer = 10;
	a_skills("init_skills", 10, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 10, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 10, g_akt_spieler).f_beschreibung_1[2] = "Angriffs-Bonus: Reflexe/2 ";
	a_skills("init_skills", 10, g_akt_spieler).f_beschreibung_1[1] = "Attack bonus: Dexterity/2";
	a_skills("init_skills", 10, g_akt_spieler).f_beschreibung_1[3] = "Bonus en ataque: Destreza/2";
	a_skills("init_skills", 10, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 10, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 10, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 11, g_akt_spieler).f_name[2] = "Kampfeswut";
	a_skills("init_skills", 11, g_akt_spieler).f_name[1] = "Battlelust";
	a_skills("init_skills", 11, g_akt_spieler).f_name[3] = "Sed de Batalla";
	a_skills("init_skills", 11, g_akt_spieler).f_nummer = 11;
	a_skills("init_skills", 11, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 11, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 11, g_akt_spieler).f_beschreibung_1[2] = "Angriffs-Bonus: St\344rke/2";
	a_skills("init_skills", 11, g_akt_spieler).f_beschreibung_1[1] = "Attack bonus: Strength/2";
	a_skills("init_skills", 11, g_akt_spieler).f_beschreibung_1[3] = "Bonus en ataque: Fuerza/2";
	a_skills("init_skills", 11, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 11, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 11, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 12, g_akt_spieler).f_name[2] = "Zweih\344ndiger Kampf";
	a_skills("init_skills", 12, g_akt_spieler).f_name[1] = "Two-Handed Fighting";
	a_skills("init_skills", 12, g_akt_spieler).f_name[3] = "Combate con Dos Manos";
	a_skills("init_skills", 12, g_akt_spieler).f_nummer = 12;
	a_skills("init_skills", 12, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 12, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 12, g_akt_spieler).f_beschreibung_1[2] = "Zwei Waffen tragen und Vorteile beider Nutzen";
	a_skills("init_skills", 12, g_akt_spieler).f_beschreibung_1[1] = "Wield two weapons at once with both advantages";
	a_skills("init_skills", 12, g_akt_spieler).f_beschreibung_1[3] = "Puede luchar con dos armas de forma eficiente";
	a_skills("init_skills", 12, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 12, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 12, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 13, g_akt_spieler).f_name[2] = "J\344ger";
	a_skills("init_skills", 13, g_akt_spieler).f_name[1] = "Hunter";
	a_skills("init_skills", 13, g_akt_spieler).f_name[3] = "Cazador";
	a_skills("init_skills", 13, g_akt_spieler).f_nummer = 13;
	a_skills("init_skills", 13, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 13, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 13, g_akt_spieler).f_beschreibung_1[2] = "+3 Angriff und Schaden gegen Tiere. ";
	a_skills("init_skills", 13, g_akt_spieler).f_beschreibung_1[1] = "+3 Attack and Damage against animals.";
	a_skills("init_skills", 13, g_akt_spieler).f_beschreibung_1[3] = "+3 Ataque y Da\361o contra animales.";
	a_skills("init_skills", 13, g_akt_spieler).f_beschreibung_2[2] = "Diese lassen mit 50% Nahrung oder Gold zur\374ck";
	a_skills("init_skills", 13, g_akt_spieler).f_beschreibung_2[1] = "50% chance for animals to leave food or gold behind";
	a_skills("init_skills", 13, g_akt_spieler).f_beschreibung_2[3] = "50% de que dejen carne o oro";
	a_skills("init_skills", 14, g_akt_spieler).f_name[2] = "Paladin";
	a_skills("init_skills", 14, g_akt_spieler).f_name[1] = "Paladin";
	a_skills("init_skills", 14, g_akt_spieler).f_name[3] = "Paladin";
	a_skills("init_skills", 14, g_akt_spieler).f_nummer = 14;
	a_skills("init_skills", 14, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 14, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 14, g_akt_spieler).f_beschreibung_1[2] = "+3 Angriff und Schaden gegen Untote.";
	a_skills("init_skills", 14, g_akt_spieler).f_beschreibung_1[1] = "+3 Attack and Damage against undead.";
	a_skills("init_skills", 14, g_akt_spieler).f_beschreibung_1[3] = "+3 Ataque y Da\361o contra no-muertos.";
	a_skills("init_skills", 14, g_akt_spieler).f_beschreibung_2[2] = "Diese lassen mit 50% Gold zur\374ck";
	a_skills("init_skills", 14, g_akt_spieler).f_beschreibung_2[1] = "50% chance for undead to leave gold behind";
	a_skills("init_skills", 14, g_akt_spieler).f_beschreibung_2[3] = "50% de que dejen oro";
	a_skills("init_skills", 15, g_akt_spieler).f_name[2] = "Kopfgeldj\344ger";
	a_skills("init_skills", 15, g_akt_spieler).f_name[1] = "Headhunter";
	a_skills("init_skills", 15, g_akt_spieler).f_name[3] = "Cazador de Cabezas";
	a_skills("init_skills", 15, g_akt_spieler).f_nummer = 15;
	a_skills("init_skills", 15, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 15, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 15, g_akt_spieler).f_beschreibung_1[2] = "+3 Angriff und Schaden gegen Humanoide.";
	a_skills("init_skills", 15, g_akt_spieler).f_beschreibung_1[1] = "+3 Attack and Damage against humanoids.";
	a_skills("init_skills", 15, g_akt_spieler).f_beschreibung_1[3] = "+3 Ataque y Da\361o contra humanoides.";
	a_skills("init_skills", 15, g_akt_spieler).f_beschreibung_2[2] = "Diese lassen mit 60% Gold zur\374ck";
	a_skills("init_skills", 15, g_akt_spieler).f_beschreibung_2[1] = "60% chance for humanoids to leave gold behind";
	a_skills("init_skills", 15, g_akt_spieler).f_beschreibung_2[3] = "60% de que dejen oro";
	a_skills("init_skills", 16, g_akt_spieler).f_name[2] = "Geisterj\344ger";
	a_skills("init_skills", 16, g_akt_spieler).f_name[1] = "Ghosthunter";
	a_skills("init_skills", 16, g_akt_spieler).f_name[3] = "Cazador de Fantasmas";
	a_skills("init_skills", 16, g_akt_spieler).f_nummer = 16;
	a_skills("init_skills", 16, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 16, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 16, g_akt_spieler).f_beschreibung_1[2] = "+5 Angriff und Schaden gegen Geister.";
	a_skills("init_skills", 16, g_akt_spieler).f_beschreibung_1[1] = "+5 Attack and Damage against ghosts.";
	a_skills("init_skills", 16, g_akt_spieler).f_beschreibung_1[3] = "+5 Ataque y Da\361o contra fantasmas.";
	a_skills("init_skills", 16, g_akt_spieler).f_beschreibung_2[2] = "(Und diese sind mit normalen Waffen angreifbar)";
	a_skills("init_skills", 16, g_akt_spieler).f_beschreibung_2[1] = "(And you can attack them with normal weapons)";
	a_skills("init_skills", 16, g_akt_spieler).f_beschreibung_2[3] = "(Y son afectados con armas normales)";
	a_skills("init_skills", 17, g_akt_spieler).f_name[2] = "Blutrausch";
	a_skills("init_skills", 17, g_akt_spieler).f_name[1] = "Bloodlust";
	a_skills("init_skills", 17, g_akt_spieler).f_name[3] = "Sed de Sangre";
	a_skills("init_skills", 17, g_akt_spieler).f_nummer = 17;
	a_skills("init_skills", 17, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 17, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 17, g_akt_spieler).f_beschreibung_1[2] = "Grad deiner Verwundung erh\366ht deinen Schaden.";
	a_skills("init_skills", 17, g_akt_spieler).f_beschreibung_1[1] = "The more you are hurt, the more damage you do.";
	a_skills("init_skills", 17, g_akt_spieler).f_beschreibung_1[3] = "Cuanto mas herido estes mas da\361o haces.";
	a_skills("init_skills", 17, g_akt_spieler).f_beschreibung_2[2] = "(LP/1.5->Schaden*2,LP/2->Schaden*3,LP/3->Schaden*4,LP/5->Schaden*5)";
	a_skills("init_skills", 17, g_akt_spieler).f_beschreibung_2[1] = "(LP/1.5->Dam*2,LP/2->Damage*3,LP/3->Damage*4,LP/5->Damage*5)";
	a_skills("init_skills", 17, g_akt_spieler).f_beschreibung_2[3] = "(PdV/1.5->Dano*2,PdV/2->Dano*3,PdV/3->Dano*4,PdV/5->Dano*5)";
	a_skills("init_skills", 18, g_akt_spieler).f_name[2] = "Rundschlag";
	a_skills("init_skills", 18, g_akt_spieler).f_name[1] = "Round Attack";
	a_skills("init_skills", 18, g_akt_spieler).f_name[3] = "Ataque Alrededor";
	a_skills("init_skills", 18, g_akt_spieler).f_nummer = 18;
	a_skills("init_skills", 18, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 18, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 18, g_akt_spieler).f_beschreibung_1[2] = "Du greifst alle Monster um dich an";
	a_skills("init_skills", 18, g_akt_spieler).f_beschreibung_1[1] = "You attack all monsters that surround you";
	a_skills("init_skills", 18, g_akt_spieler).f_beschreibung_1[3] = "Atacas a todos los monstruos de tu alrededor";
	a_skills("init_skills", 18, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 18, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 18, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 19, g_akt_spieler).f_name[2] = "Sturmangriff";
	a_skills("init_skills", 19, g_akt_spieler).f_name[1] = "Charge Attack";
	a_skills("init_skills", 19, g_akt_spieler).f_name[3] = "Ataque Continuo";
	a_skills("init_skills", 19, g_akt_spieler).f_nummer = 19;
	a_skills("init_skills", 19, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 19, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 19, g_akt_spieler).f_beschreibung_1[2] = "Angriffe auf Monster kosten nur einen Bewegungspunkt";
	a_skills("init_skills", 19, g_akt_spieler).f_beschreibung_1[1] = "Attacking a monster costs a movement point";
	a_skills("init_skills", 19, g_akt_spieler).f_beschreibung_1[3] = "Atacar a un monstruo cuesta un punto movimiento";
	a_skills("init_skills", 19, g_akt_spieler).f_beschreibung_2[2] = "statt den Zug";
	a_skills("init_skills", 19, g_akt_spieler).f_beschreibung_2[1] = "instead of ending the turn";
	a_skills("init_skills", 19, g_akt_spieler).f_beschreibung_2[3] = "en vez de terminar el turno";
	a_skills("init_skills", 20, g_akt_spieler).f_name[2] = "Flinke Attacke";
	a_skills("init_skills", 20, g_akt_spieler).f_name[1] = "Fast Attack";
	a_skills("init_skills", 20, g_akt_spieler).f_name[3] = "Ataque R\341pido";
	a_skills("init_skills", 20, g_akt_spieler).f_nummer = 20;
	a_skills("init_skills", 20, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 20, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 20, g_akt_spieler).f_beschreibung_1[2] = "Zwei Angriffe pro Runde";
	a_skills("init_skills", 20, g_akt_spieler).f_beschreibung_1[1] = "Two attacks per turn";
	a_skills("init_skills", 20, g_akt_spieler).f_beschreibung_1[3] = "Dos ataques por turno";
	a_skills("init_skills", 20, g_akt_spieler).f_beschreibung_2[2] = "(Kombiniert sich mit 2h Kampf + Sturmangriff)";
	a_skills("init_skills", 20, g_akt_spieler).f_beschreibung_2[1] = "(Works together with Two-Handed Fighting and Charge Attack)";
	a_skills("init_skills", 20, g_akt_spieler).f_beschreibung_2[3] = "(Funciona con 2 Manos y Ataque Continuo)";
	a_skills("init_skills", 21, g_akt_spieler).f_name[2] = "Schwertkampf";
	a_skills("init_skills", 21, g_akt_spieler).f_name[1] = "Swordfighting";
	a_skills("init_skills", 21, g_akt_spieler).f_name[3] = "Luchar con Espadas";
	a_skills("init_skills", 21, g_akt_spieler).f_nummer = 21;
	a_skills("init_skills", 21, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 21, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 21, g_akt_spieler).f_beschreibung_1[2] = "+2 Angriff und Schaden mit Schwertern. Beginnt mit Schwert";
	a_skills("init_skills", 21, g_akt_spieler).f_beschreibung_1[1] = "+2 Attack and Damage with swords. Begins with sword";
	a_skills("init_skills", 21, g_akt_spieler).f_beschreibung_1[3] = "+2 Ataque y Da\361o con espadas. Empiezas con espada";
	a_skills("init_skills", 21, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 21, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 21, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 22, g_akt_spieler).f_name[2] = "Axtkampf";
	a_skills("init_skills", 22, g_akt_spieler).f_name[1] = "Axefighting";
	a_skills("init_skills", 22, g_akt_spieler).f_name[3] = "Luchar con Hachas";
	a_skills("init_skills", 22, g_akt_spieler).f_nummer = 22;
	a_skills("init_skills", 22, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 22, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 22, g_akt_spieler).f_beschreibung_1[2] = "+2 Angriff und Schaden mit \304xten. Beginnt mit Axt";
	a_skills("init_skills", 22, g_akt_spieler).f_beschreibung_1[1] = "+2 Attack and Damage with axes. Begins with axe";
	a_skills("init_skills", 22, g_akt_spieler).f_beschreibung_1[3] = "+2 Ataque y Da\361o con hachas. Empiezas con hacha";
	a_skills("init_skills", 22, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 22, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 22, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 23, g_akt_spieler).f_name[2] = "Speerkampf";
	a_skills("init_skills", 23, g_akt_spieler).f_name[1] = "Spearfighting";
	a_skills("init_skills", 23, g_akt_spieler).f_name[3] = "Luchar con Lanzas";
	a_skills("init_skills", 23, g_akt_spieler).f_nummer = 23;
	a_skills("init_skills", 23, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 23, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 23, g_akt_spieler).f_beschreibung_1[2] = "+2 Angriff und Schaden mit Speeren. Beginnt mit Speer";
	a_skills("init_skills", 23, g_akt_spieler).f_beschreibung_1[1] = "+2 Attack and Damage with spears. Begins with spear";
	a_skills("init_skills", 23, g_akt_spieler).f_beschreibung_1[3] = "+2 Ataque y Da\361o con lanzas. Empiezas con lanza";
	a_skills("init_skills", 23, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 23, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 23, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 24, g_akt_spieler).f_name[2] = "Hammerkampf";
	a_skills("init_skills", 24, g_akt_spieler).f_name[1] = "Hammerfighting";
	a_skills("init_skills", 24, g_akt_spieler).f_name[3] = "Luchar con Martillos";
	a_skills("init_skills", 24, g_akt_spieler).f_nummer = 24;
	a_skills("init_skills", 24, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 24, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 24, g_akt_spieler).f_beschreibung_1[2] = "+2 Angriff und Schaden mit H\344mmern. Beginnt mit Hammer";
	a_skills("init_skills", 24, g_akt_spieler).f_beschreibung_1[1] = "+2 Attack and Damage with hammers. Begins with hammer";
	a_skills("init_skills", 24, g_akt_spieler).f_beschreibung_1[3] = "+2 Ataque y Da\361o con martillos. Empiezas con martillo";
	a_skills("init_skills", 24, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 24, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 24, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 25, g_akt_spieler).f_name[2] = "Waffenloser Kampf";
	a_skills("init_skills", 25, g_akt_spieler).f_name[1] = "Unarmed Combat";
	a_skills("init_skills", 25, g_akt_spieler).f_name[3] = "Luchar sin Armas";
	a_skills("init_skills", 25, g_akt_spieler).f_nummer = 25;
	a_skills("init_skills", 25, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 25, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 25, g_akt_spieler).f_beschreibung_1[2] = "+3 Angriff und Schaden ohne Waffe";
	a_skills("init_skills", 25, g_akt_spieler).f_beschreibung_1[1] = "+3 Attack and Damage without a weapon";
	a_skills("init_skills", 25, g_akt_spieler).f_beschreibung_1[3] = "+3 Ataque y Da\361o sin Armas";
	a_skills("init_skills", 25, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 25, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 25, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 26, g_akt_spieler).f_name[2] = "Anf\374hrer";
	a_skills("init_skills", 26, g_akt_spieler).f_name[1] = "Leader";
	a_skills("init_skills", 26, g_akt_spieler).f_name[3] = "Comandante";
	a_skills("init_skills", 26, g_akt_spieler).f_nummer = 26;
	a_skills("init_skills", 26, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 26, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 26, g_akt_spieler).f_unique = 1;
	a_skills("init_skills", 26, g_akt_spieler).f_beschreibung_1[2] = "Alle Spieler erhalten +2 Angriff";
	a_skills("init_skills", 26, g_akt_spieler).f_beschreibung_1[1] = "All players get +2 Attack";
	a_skills("init_skills", 26, g_akt_spieler).f_beschreibung_1[3] = "Todos jugadores reciben Ataque +2";
	a_skills("init_skills", 26, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 26, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 26, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 27, g_akt_spieler).f_name[2] = "S\366ldner";
	a_skills("init_skills", 27, g_akt_spieler).f_name[1] = "Mercenary";
	a_skills("init_skills", 27, g_akt_spieler).f_name[3] = "Mercenario";
	a_skills("init_skills", 27, g_akt_spieler).f_nummer = 27;
	a_skills("init_skills", 27, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 27, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 27, g_akt_spieler).f_beschreibung_1[2] = "Jeder Level gibt dir Ebene*5 Gold";
	a_skills("init_skills", 27, g_akt_spieler).f_beschreibung_1[1] = "Every level gives you Level*5 Gold";
	a_skills("init_skills", 27, g_akt_spieler).f_beschreibung_1[3] = "Cada nivel te da Nivel*5 Oro";
	a_skills("init_skills", 27, g_akt_spieler).f_beschreibung_2[2] = "Jedes erchlagene Monster Level Gold (max. 5)";
	a_skills("init_skills", 27, g_akt_spieler).f_beschreibung_2[1] = "Every killed monster Level Gold (max. 5)";
	a_skills("init_skills", 27, g_akt_spieler).f_beschreibung_2[3] = "Cada monstruo que matas Nivel Oro (max. 5)";
	a_skills("init_skills", 28, g_akt_spieler).f_name[2] = "Kampftechniken";
	a_skills("init_skills", 28, g_akt_spieler).f_name[1] = "Fighting Styles";
	a_skills("init_skills", 28, g_akt_spieler).f_name[3] = "Estilos de Combate";
	a_skills("init_skills", 28, g_akt_spieler).f_nummer = 28;
	a_skills("init_skills", 28, g_akt_spieler).f_gruppe = 1;
	a_skills("init_skills", 28, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 28, g_akt_spieler).f_beschreibung_1[2] = "Du beherrscht verschiedene Kampftechniken";
	a_skills("init_skills", 28, g_akt_spieler).f_beschreibung_1[1] = "You mastered several different fighting styles";
	a_skills("init_skills", 28, g_akt_spieler).f_beschreibung_1[3] = "Dominas diferentes estilos de combate";
	a_skills("init_skills", 28, g_akt_spieler).f_beschreibung_2[2] = "(Siehe FAQ f\374r Beschreibung)";
	a_skills("init_skills", 28, g_akt_spieler).f_beschreibung_2[1] = "(See FAQ for details)";
	a_skills("init_skills", 28, g_akt_spieler).f_beschreibung_2[3] = "(El FAQ contiene detalles)";
	a_skills("init_skills", 29, g_akt_spieler).f_name[1] = "Way of the Bow";
	a_skills("init_skills", 29, g_akt_spieler).f_name[2] = "Weg des Bogens";
	a_skills("init_skills", 29, g_akt_spieler).f_name[3] = "Camino del Arco";
	a_skills("init_skills", 29, g_akt_spieler).f_nummer = 0;
	a_skills("init_skills", 29, g_akt_spieler).f_kosten = 0;
	a_skills("init_skills", 29, g_akt_spieler).f_beschreibung_1[2] = "";
	a_skills("init_skills", 29, g_akt_spieler).f_beschreibung_1[1] = "";
	a_skills("init_skills", 29, g_akt_spieler).f_beschreibung_1[3] = "";
	a_skills("init_skills", 29, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 29, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 29, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 30, g_akt_spieler).f_name[2] = "Bogenschiessen";
	a_skills("init_skills", 30, g_akt_spieler).f_name[1] = "Archery";
	a_skills("init_skills", 30, g_akt_spieler).f_name[3] = "Arqueria";
	a_skills("init_skills", 30, g_akt_spieler).f_nummer = 30;
	a_skills("init_skills", 30, g_akt_spieler).f_gruppe = 2;
	a_skills("init_skills", 30, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 30, g_akt_spieler).f_beschreibung_1[2] = "Beginnt das Spiel mit Bogen und Pfeilen; +50% Trefferchance";
	a_skills("init_skills", 30, g_akt_spieler).f_beschreibung_1[1] = "Starts with bow and arrows; +50% success chance";
	a_skills("init_skills", 30, g_akt_spieler).f_beschreibung_1[3] = "Empiezas con arco y flechas; +50% de acierto";
	a_skills("init_skills", 30, g_akt_spieler).f_beschreibung_2[2] = "(Du bekommst 10 neue Pfeile jeden Level)";
	a_skills("init_skills", 30, g_akt_spieler).f_beschreibung_2[1] = "(You get 10 new arrows every level)";
	a_skills("init_skills", 30, g_akt_spieler).f_beschreibung_2[3] = "(Recibes 10 flechas nuevas cada nivel)";
	a_skills("init_skills", 31, g_akt_spieler).f_name[2] = "Zen Bogenschiessen";
	a_skills("init_skills", 31, g_akt_spieler).f_name[1] = "Zen Bowmastery";
	a_skills("init_skills", 31, g_akt_spieler).f_name[3] = "Zen Arcomaestro";
	a_skills("init_skills", 31, g_akt_spieler).f_nummer = 31;
	a_skills("init_skills", 31, g_akt_spieler).f_gruppe = 2;
	a_skills("init_skills", 31, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 31, g_akt_spieler).f_beschreibung_1[2] = "Wenn ein Monster deinen ersten Pfeil \374berlebt schiesst du";
	a_skills("init_skills", 31, g_akt_spieler).f_beschreibung_1[1] = "If a monster survives your first shot you shoot";
	a_skills("init_skills", 31, g_akt_spieler).f_beschreibung_1[3] = "Si un monstruo sobrevive a la primera flecha atacas otra vez.";
	a_skills("init_skills", 31, g_akt_spieler).f_beschreibung_2[2] = "gleich nochmal. Das zweitemal kostet keinen Pfeil";
	a_skills("init_skills", 31, g_akt_spieler).f_beschreibung_2[1] = "another arrow. The second one does not cost an arrow";
	a_skills("init_skills", 31, g_akt_spieler).f_beschreibung_2[3] = "La segunda vez no gastas flecha";
	a_skills("init_skills", 32, g_akt_spieler).f_name[2] = "Pfeilmacher";
	a_skills("init_skills", 32, g_akt_spieler).f_name[1] = "Fletching";
	a_skills("init_skills", 32, g_akt_spieler).f_name[3] = "Flecheria";
	a_skills("init_skills", 32, g_akt_spieler).f_nummer = 32;
	a_skills("init_skills", 32, g_akt_spieler).f_gruppe = 2;
	a_skills("init_skills", 32, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 32, g_akt_spieler).f_beschreibung_1[2] = "Jede Ebene bekommst du einen Pack Spezialpfeile";
	a_skills("init_skills", 32, g_akt_spieler).f_beschreibung_1[1] = "Every level you get one pack of special arrows";
	a_skills("init_skills", 32, g_akt_spieler).f_beschreibung_1[3] = "Cada nivel te da un par de flechas magicas";
	a_skills("init_skills", 32, g_akt_spieler).f_beschreibung_2[2] = "Beginnt mit Naga, Oger und Explodierenden Pfeilen";
	a_skills("init_skills", 32, g_akt_spieler).f_beschreibung_2[1] = "Starts the game with Naga, Ogre and Exploding Arrows";
	a_skills("init_skills", 32, g_akt_spieler).f_beschreibung_2[3] = "Empiece el juego con flechas Naga, Ogro y Explosivas";
	a_skills("init_skills", 33, g_akt_spieler).f_name[2] = "Scharfsch\374tze";
	a_skills("init_skills", 33, g_akt_spieler).f_name[1] = "Sharpshooter";
	a_skills("init_skills", 33, g_akt_spieler).f_name[3] = "Francotirador";
	a_skills("init_skills", 33, g_akt_spieler).f_nummer = 33;
	a_skills("init_skills", 33, g_akt_spieler).f_gruppe = 2;
	a_skills("init_skills", 33, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 33, g_akt_spieler).f_beschreibung_1[2] = "Doppelte Chance f\374r kritischen Treffer im Fernkampf. Max 45%";
	a_skills("init_skills", 33, g_akt_spieler).f_beschreibung_1[1] = "Percentage for critical hits in ranged combat doubled. Max 45%";
	a_skills("init_skills", 33, g_akt_spieler).f_beschreibung_1[3] = "Porcentage de golpe critico duplicado con armas a distancia. Max 45%";
	a_skills("init_skills", 33, g_akt_spieler).f_beschreibung_2[2] = "(Chance=(Geschicklichkeit+Gl\374ck)*2% + Waffe)";
	a_skills("init_skills", 33, g_akt_spieler).f_beschreibung_2[1] = "(Chance=(Dexterity+Luck)*2% + Weapon)";
	a_skills("init_skills", 33, g_akt_spieler).f_beschreibung_2[3] = "(Chance=(Destreza+Suerte)*2% + Arma)";
	a_skills("init_skills", 34, g_akt_spieler).f_name[1] = "Way of Magic";
	a_skills("init_skills", 34, g_akt_spieler).f_name[2] = "Weg der Magie";
	a_skills("init_skills", 34, g_akt_spieler).f_name[3] = "Camino de la Magia";
	a_skills("init_skills", 34, g_akt_spieler).f_nummer = 0;
	a_skills("init_skills", 34, g_akt_spieler).f_kosten = 0;
	a_skills("init_skills", 34, g_akt_spieler).f_beschreibung_1[2] = "";
	a_skills("init_skills", 34, g_akt_spieler).f_beschreibung_1[1] = "";
	a_skills("init_skills", 34, g_akt_spieler).f_beschreibung_1[3] = "";
	a_skills("init_skills", 34, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 34, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 34, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 35, g_akt_spieler).f_name[2] = "Arkane Gabe";
	a_skills("init_skills", 35, g_akt_spieler).f_name[1] = "Arcane Power";
	a_skills("init_skills", 35, g_akt_spieler).f_name[3] = "Poder Secreto";
	a_skills("init_skills", 35, g_akt_spieler).f_nummer = 35;
	a_skills("init_skills", 35, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 35, g_akt_spieler).f_kosten = 3;
	a_skills("init_skills", 35, g_akt_spieler).f_beschreibung_1[2] = "Der Level des Zaubers z\344hlt als Bonus auf die Zaubermacht";
	a_skills("init_skills", 35, g_akt_spieler).f_beschreibung_1[1] = "The level of a spell counts as bonus to the Spell Power";
	a_skills("init_skills", 35, g_akt_spieler).f_beschreibung_1[3] = "El nivel de un hechizo bonifica el Poder de Hechizo";
	a_skills("init_skills", 35, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 35, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 35, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 36, g_akt_spieler).f_name[2] = "Ley Kontakt";
	a_skills("init_skills", 36, g_akt_spieler).f_name[1] = "Leylines Contact";
	a_skills("init_skills", 36, g_akt_spieler).f_name[3] = "Contacto Sobrenatural";
	a_skills("init_skills", 36, g_akt_spieler).f_nummer = 36;
	a_skills("init_skills", 36, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 36, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 36, g_akt_spieler).f_beschreibung_1[2] = "Beim Betreten einer neuen Ebene wird dein Mana regeneriert";
	a_skills("init_skills", 36, g_akt_spieler).f_beschreibung_1[1] = "Upon entering a new level all Mana is restored";
	a_skills("init_skills", 36, g_akt_spieler).f_beschreibung_1[3] = "Al empezar un nivel se recupera todo el Mana";
	a_skills("init_skills", 36, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 36, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 36, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 37, g_akt_spieler).f_name[2] = "Magielehre";
	a_skills("init_skills", 37, g_akt_spieler).f_name[1] = "Magic Training";
	a_skills("init_skills", 37, g_akt_spieler).f_name[3] = "Entrenamiento Magico";
	a_skills("init_skills", 37, g_akt_spieler).f_nummer = 37;
	a_skills("init_skills", 37, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 37, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 37, g_akt_spieler).f_beschreibung_1[2] = "Zirkel: 3 (normalerweise 0)";
	a_skills("init_skills", 37, g_akt_spieler).f_beschreibung_1[1] = "Spell Circle: 3 (normally 0)";
	a_skills("init_skills", 37, g_akt_spieler).f_beschreibung_1[3] = "C\355rculo M\341gico: 3 (normalmente 0)";
	a_skills("init_skills", 37, g_akt_spieler).f_beschreibung_2[2] = "(Du bist ein ausgebildeter Magier)";
	a_skills("init_skills", 37, g_akt_spieler).f_beschreibung_2[1] = "(You are a trained magician)";
	a_skills("init_skills", 37, g_akt_spieler).f_beschreibung_2[3] = "(Eres un mago entrenado)";
	a_skills("init_skills", 38, g_akt_spieler).f_name[2] = "Zaubermacht";
	a_skills("init_skills", 38, g_akt_spieler).f_name[1] = "Spell Power";
	a_skills("init_skills", 38, g_akt_spieler).f_name[3] = "Poder de Hechizos";
	a_skills("init_skills", 38, g_akt_spieler).f_nummer = 38;
	a_skills("init_skills", 38, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 38, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 38, g_akt_spieler).f_beschreibung_1[2] = "Zaubermacht: 4";
	a_skills("init_skills", 38, g_akt_spieler).f_beschreibung_1[1] = "Spell Power: 4";
	a_skills("init_skills", 38, g_akt_spieler).f_beschreibung_1[3] = "Poder de Hechizo: 4";
	a_skills("init_skills", 38, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 38, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 38, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 39, g_akt_spieler).f_name[2] = "Mana";
	a_skills("init_skills", 39, g_akt_spieler).f_name[1] = "Mana";
	a_skills("init_skills", 39, g_akt_spieler).f_name[3] = "Mana";
	a_skills("init_skills", 39, g_akt_spieler).f_nummer = 39;
	a_skills("init_skills", 39, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 39, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 39, g_akt_spieler).f_beschreibung_1[2] = "Mana: 12 (normalerweise 3)";
	a_skills("init_skills", 39, g_akt_spieler).f_beschreibung_1[1] = "Mana: 12 (normally 3)";
	a_skills("init_skills", 39, g_akt_spieler).f_beschreibung_1[3] = "Mana: 12 (normalmente 3)";
	a_skills("init_skills", 39, g_akt_spieler).f_beschreibung_2[2] = "+4 Mana bei Erfahrungsgewinn (normalerweise +3)";
	a_skills("init_skills", 39, g_akt_spieler).f_beschreibung_2[1] = "+4 Mana per experience gain (normally +3)";
	a_skills("init_skills", 39, g_akt_spieler).f_beschreibung_2[3] = "+4 Mana por gano de experiencia (normalmente +3)";
	a_skills("init_skills", 40, g_akt_spieler).f_name[2] = "Zauberkunst";
	a_skills("init_skills", 40, g_akt_spieler).f_name[1] = "Sorcery";
	a_skills("init_skills", 40, g_akt_spieler).f_name[3] = "Hechizeria";
	a_skills("init_skills", 40, g_akt_spieler).f_nummer = 40;
	a_skills("init_skills", 40, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 40, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 40, g_akt_spieler).f_beschreibung_1[2] = "Die Erfolgschance bei Zaubern aus gew\344hlten Schulen betr\344gt 99%";
	a_skills("init_skills", 40, g_akt_spieler).f_beschreibung_1[1] = "The casting success for spells from selected schools is 99%";
	a_skills("init_skills", 40, g_akt_spieler).f_beschreibung_1[3] = "La probabilidad de acierto para hechizos de las escuelas es del 99%";
	a_skills("init_skills", 40, g_akt_spieler).f_beschreibung_2[2] = "(statt 50% + 5% pro Anwendung) (Unwirksam bei Scrollwissen+Freie Magie)";
	a_skills("init_skills", 40, g_akt_spieler).f_beschreibung_2[1] = "(instead of 50% + 5% per casting) (Not for Scroll Lore + Free Magic)";
	a_skills("init_skills", 40, g_akt_spieler).f_beschreibung_2[3] = "(Normalmente es 50% y aumenta en un 5% por hechizo lanzado con exito)";
	a_skills("init_skills", 41, g_akt_spieler).f_name[2] = "Alte Magie";
	a_skills("init_skills", 41, g_akt_spieler).f_name[1] = "Elder Magic";
	a_skills("init_skills", 41, g_akt_spieler).f_name[3] = "Magia Antigua";
	a_skills("init_skills", 41, g_akt_spieler).f_nummer = 41;
	a_skills("init_skills", 41, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 41, g_akt_spieler).f_kosten = 4;
	a_skills("init_skills", 41, g_akt_spieler).f_beschreibung_1[2] = "Alle Zauber kosten einen Manapunkt weniger (min.1)";
	a_skills("init_skills", 41, g_akt_spieler).f_beschreibung_1[1] = "All spells cost 1 less Mana Point (min.1)";
	a_skills("init_skills", 41, g_akt_spieler).f_beschreibung_1[3] = "Los hechizos cuestan 1 punto menos de Mana (min.1)";
	a_skills("init_skills", 41, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 41, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 41, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 42, g_akt_spieler).f_name[2] = "Magieresistenz";
	a_skills("init_skills", 42, g_akt_spieler).f_name[1] = "Magic Resistance";
	a_skills("init_skills", 42, g_akt_spieler).f_name[3] = "Resistencia a la Magia";
	a_skills("init_skills", 42, g_akt_spieler).f_nummer = 42;
	a_skills("init_skills", 42, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 42, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 42, g_akt_spieler).f_beschreibung_1[2] = "Mit 70% Resistenz gegen feindliche Magie";
	a_skills("init_skills", 42, g_akt_spieler).f_beschreibung_1[1] = "70% Resistance against hostile magic";
	a_skills("init_skills", 42, g_akt_spieler).f_beschreibung_1[3] = "70% Resistencia ante magia hostil";
	a_skills("init_skills", 42, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 42, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 42, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 43, g_akt_spieler).f_name[2] = "Alchemie";
	a_skills("init_skills", 43, g_akt_spieler).f_name[1] = "Alchemy";
	a_skills("init_skills", 43, g_akt_spieler).f_name[3] = "Alquimia";
	a_skills("init_skills", 43, g_akt_spieler).f_nummer = 43;
	a_skills("init_skills", 43, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 43, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 43, g_akt_spieler).f_beschreibung_1[2] = "Zaubertr\344nke aus Pilzen brauen und Tr\344nke mischen";
	a_skills("init_skills", 43, g_akt_spieler).f_beschreibung_1[1] = "Create potions from mushrooms and mix potions";
	a_skills("init_skills", 43, g_akt_spieler).f_beschreibung_1[3] = "Crear pociones de hongos y mezclar pociones";
	a_skills("init_skills", 43, g_akt_spieler).f_beschreibung_2[2] = "(Startet mit 5 Pilzen)";
	a_skills("init_skills", 43, g_akt_spieler).f_beschreibung_2[1] = "(Starts with 5 mushrooms)";
	a_skills("init_skills", 43, g_akt_spieler).f_beschreibung_2[3] = "(Empiece con 5 hongos)";
	a_skills("init_skills", 44, g_akt_spieler).f_name[2] = "Thaumaturgie";
	a_skills("init_skills", 44, g_akt_spieler).f_name[1] = "Thaumaturgy";
	a_skills("init_skills", 44, g_akt_spieler).f_name[3] = "Taumaturgia";
	a_skills("init_skills", 44, g_akt_spieler).f_nummer = 44;
	a_skills("init_skills", 44, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 44, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 44, g_akt_spieler).f_beschreibung_1[2] = "Erlaubt die Herstellung von Zauberst\344ben aus Edelsteinen";
	a_skills("init_skills", 44, g_akt_spieler).f_beschreibung_1[1] = "Allows the creation of spell wands from gems";
	a_skills("init_skills", 44, g_akt_spieler).f_beschreibung_1[3] = "Permite crear varitas magicas con gemas";
	a_skills("init_skills", 44, g_akt_spieler).f_beschreibung_2[2] = "(Startet mit 5 Edelsteinen oder St\344ben)";
	a_skills("init_skills", 44, g_akt_spieler).f_beschreibung_2[1] = "(Starts with 5 Gems or Wands)";
	a_skills("init_skills", 44, g_akt_spieler).f_beschreibung_2[3] = "(Empiece con 5 Piedras Preciosas)";
	a_skills("init_skills", 45, g_akt_spieler).f_name[2] = "Zaubern in R\374stung";
	a_skills("init_skills", 45, g_akt_spieler).f_name[1] = "Casting in Armor";
	a_skills("init_skills", 45, g_akt_spieler).f_name[3] = "Hechizar con Armadura";
	a_skills("init_skills", 45, g_akt_spieler).f_nummer = 45;
	a_skills("init_skills", 45, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 45, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 45, g_akt_spieler).f_beschreibung_1[2] = "Kein Abzug beim Zaubern durch R\374stungen";
	a_skills("init_skills", 45, g_akt_spieler).f_beschreibung_1[1] = "No reduction to spellcasting ability when wearing armor";
	a_skills("init_skills", 45, g_akt_spieler).f_beschreibung_1[3] = "No se reduce la habilidad de hechizar al llevar armadura";
	a_skills("init_skills", 45, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 45, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 45, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 46, g_akt_spieler).f_name[2] = "Blutmagie";
	a_skills("init_skills", 46, g_akt_spieler).f_name[1] = "Blood Magic";
	a_skills("init_skills", 46, g_akt_spieler).f_name[3] = "Magia Sangrienta";
	a_skills("init_skills", 46, g_akt_spieler).f_nummer = 46;
	a_skills("init_skills", 46, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 46, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 46, g_akt_spieler).f_beschreibung_1[2] = "Grad deiner Verwundung erh\366ht deine Zauberkraft";
	a_skills("init_skills", 46, g_akt_spieler).f_beschreibung_1[1] = "The more you are hurt the more Spell Power you have.";
	a_skills("init_skills", 46, g_akt_spieler).f_beschreibung_1[3] = "Cuanto mas herido estes mas poder tienen tus hechizos.";
	a_skills("init_skills", 46, g_akt_spieler).f_beschreibung_2[2] = "(LP/2 -> Zauberkraft*2, LP/3 -> Zauberkraft*3, LP/5 -> Zauberkraft*5)";
	a_skills("init_skills", 46, g_akt_spieler).f_beschreibung_2[1] = "(LP/2 -> Spell Power*2, LP/3 -> Spell Power*3, LP/5 -> Spell Power*5)";
	a_skills("init_skills", 46, g_akt_spieler).f_beschreibung_2[3] = "(PdV/2 -> Poder*2, PdV/3 -> Poder*3, PdV/5 -> Poder*5)";
	a_skills("init_skills", 47, g_akt_spieler).f_name[2] = "Zauberschrift";
	a_skills("init_skills", 47, g_akt_spieler).f_name[1] = "Arcane Writings";
	a_skills("init_skills", 47, g_akt_spieler).f_name[3] = "Escritos Secretos";
	a_skills("init_skills", 47, g_akt_spieler).f_nummer = 47;
	a_skills("init_skills", 47, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 47, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 47, g_akt_spieler).f_beschreibung_1[2] = "Beginnt das Spiel mit dem Libram der tausend Zauber und 5 Schriftrollen";
	a_skills("init_skills", 47, g_akt_spieler).f_beschreibung_1[1] = "Start the game with the Libram of Thousand Spells and 5 magic scrolls";
	a_skills("init_skills", 47, g_akt_spieler).f_beschreibung_1[3] = "Empieza el juego con el Codice de los Mil Hechizos y 5 pergaminos magicos";
	a_skills("init_skills", 47, g_akt_spieler).f_beschreibung_2[2] = "(Dieser kann eine Schriftrolle pro Level erzeugen)";
	a_skills("init_skills", 47, g_akt_spieler).f_beschreibung_2[1] = "(It can produce one scroll per level)";
	a_skills("init_skills", 47, g_akt_spieler).f_beschreibung_2[3] = "(Puede crear un pergamino por nivel)";
	a_skills("init_skills", 48, g_akt_spieler).f_name[2] = "Sternenmagie";
	a_skills("init_skills", 48, g_akt_spieler).f_name[1] = "Star Magic";
	a_skills("init_skills", 48, g_akt_spieler).f_name[3] = "Magia Estelar";
	a_skills("init_skills", 48, g_akt_spieler).f_nummer = 48;
	a_skills("init_skills", 48, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 48, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 48, g_akt_spieler).f_beschreibung_1[2] = "Alle Zauber der Sterne und der Himmelsk\366rper";
	a_skills("init_skills", 48, g_akt_spieler).f_beschreibung_1[1] = "All spells of the stars and the heavenly bodies";
	a_skills("init_skills", 48, g_akt_spieler).f_beschreibung_1[3] = "Hechizos de las estrellas y los cuerpos celestes";
	a_skills("init_skills", 48, g_akt_spieler).f_beschreibung_2[2] = "(Die besten Lichtzauber, Sternenfeuer, Sternenfee beschw\366ren)";
	a_skills("init_skills", 48, g_akt_spieler).f_beschreibung_2[1] = "(The best light spells, Starfire, Summon Starfaerie)";
	a_skills("init_skills", 48, g_akt_spieler).f_beschreibung_2[3] = "(Los mejores hechizos de luz, Fuego de las Estrellas, Hada de las Estrellas)";
	a_skills("init_skills", 49, g_akt_spieler).f_name[2] = "Illusionsmagie";
	a_skills("init_skills", 49, g_akt_spieler).f_name[1] = "Illusion Magic";
	a_skills("init_skills", 49, g_akt_spieler).f_name[3] = "Ilusionismo";
	a_skills("init_skills", 49, g_akt_spieler).f_nummer = 49;
	a_skills("init_skills", 49, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 49, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 49, g_akt_spieler).f_beschreibung_1[2] = "Alle Zauber der Illusion und der T\344uschung";
	a_skills("init_skills", 49, g_akt_spieler).f_beschreibung_1[1] = "All spells of illusion and deception";
	a_skills("init_skills", 49, g_akt_spieler).f_beschreibung_1[3] = "Hechizos de ilusion y confusi\363n";
	a_skills("init_skills", 49, g_akt_spieler).f_beschreibung_2[2] = "(Verschwinden, Doppelg\344nger, Unsichtbarkeit)";
	a_skills("init_skills", 49, g_akt_spieler).f_beschreibung_2[1] = "(Vanish, Doppelganger, Invisibility)";
	a_skills("init_skills", 49, g_akt_spieler).f_beschreibung_2[3] = "(Desvanecerse, Gemelo, Invisibilidad)";
	a_skills("init_skills", 50, g_akt_spieler).f_name[2] = "Warlock";
	a_skills("init_skills", 50, g_akt_spieler).f_name[1] = "Warlock";
	a_skills("init_skills", 50, g_akt_spieler).f_name[3] = "Arsenal";
	a_skills("init_skills", 50, g_akt_spieler).f_nummer = 50;
	a_skills("init_skills", 50, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 50, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 50, g_akt_spieler).f_beschreibung_1[2] = "Alle Zauber des Krieges und der Kampfmagie";
	a_skills("init_skills", 50, g_akt_spieler).f_beschreibung_1[1] = "All spells of warfare and combat magic";
	a_skills("init_skills", 50, g_akt_spieler).f_beschreibung_1[3] = "Hechizos de guerra y magia combativa";
	a_skills("init_skills", 50, g_akt_spieler).f_beschreibung_2[2] = "(Magische R\374stungen+Waffen, Mentalschlag, Unverwundbarkeit)";
	a_skills("init_skills", 50, g_akt_spieler).f_beschreibung_2[1] = "(Magical Weapons+Armor, Mentalbolt, Invulnerability)";
	a_skills("init_skills", 50, g_akt_spieler).f_beschreibung_2[3] = "(Armaduras+Armas magicas, Rayo Mental, Invulnerabilidad)";
	a_skills("init_skills", 51, g_akt_spieler).f_name[2] = "Weisse Magie";
	a_skills("init_skills", 51, g_akt_spieler).f_name[1] = "White Magic";
	a_skills("init_skills", 51, g_akt_spieler).f_name[3] = "Magia Blanca";
	a_skills("init_skills", 51, g_akt_spieler).f_nummer = 51;
	a_skills("init_skills", 51, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 51, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 51, g_akt_spieler).f_beschreibung_1[2] = "Alle Zauber der Heilung und des Schutzes";
	a_skills("init_skills", 51, g_akt_spieler).f_beschreibung_1[1] = "All spells of healing and protection";
	a_skills("init_skills", 51, g_akt_spieler).f_beschreibung_1[3] = "Hechizos de curaci\363n y protecci\363n";
	a_skills("init_skills", 51, g_akt_spieler).f_beschreibung_2[2] = "(Untote bannen, Andere heilen, Engel)";
	a_skills("init_skills", 51, g_akt_spieler).f_beschreibung_2[1] = "(Banish Undead, Heal Others, Angel)";
	a_skills("init_skills", 51, g_akt_spieler).f_beschreibung_2[3] = "(Ahuyentar No-Muertos, Curar Otros, Angelito)";
	a_skills("init_skills", 52, g_akt_spieler).f_name[2] = "Schwarze Magie";
	a_skills("init_skills", 52, g_akt_spieler).f_name[1] = "Black Magic";
	a_skills("init_skills", 52, g_akt_spieler).f_name[3] = "Magia Negra";
	a_skills("init_skills", 52, g_akt_spieler).f_nummer = 52;
	a_skills("init_skills", 52, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 52, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 52, g_akt_spieler).f_beschreibung_1[2] = "Alle Zauber des Todes und der Zerst\366rung";
	a_skills("init_skills", 52, g_akt_spieler).f_beschreibung_1[1] = "All spells of death and destruction";
	a_skills("init_skills", 52, g_akt_spieler).f_beschreibung_1[3] = "Hechizos de muerte y destrucci\363n";
	a_skills("init_skills", 52, g_akt_spieler).f_beschreibung_2[2] = "(Dunkles Mana, D\344mon, Wort des Todes)";
	a_skills("init_skills", 52, g_akt_spieler).f_beschreibung_2[1] = "(Dark Mana, Demon, Word of Death)";
	a_skills("init_skills", 52, g_akt_spieler).f_beschreibung_2[3] = "(Mana Oscuro, Demonio, Palabra de Muerte)";
	a_skills("init_skills", 53, g_akt_spieler).f_name[2] = "Feuermagie";
	a_skills("init_skills", 53, g_akt_spieler).f_name[1] = "Fire Magic";
	a_skills("init_skills", 53, g_akt_spieler).f_name[3] = "Magia de Fuego";
	a_skills("init_skills", 53, g_akt_spieler).f_nummer = 53;
	a_skills("init_skills", 53, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 53, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 53, g_akt_spieler).f_beschreibung_1[2] = "Alle Zauber der Hitze und des Feuers";
	a_skills("init_skills", 53, g_akt_spieler).f_beschreibung_1[1] = "All spells of the realm of fire";
	a_skills("init_skills", 53, g_akt_spieler).f_beschreibung_1[3] = "Hechizos del reino del fuego";
	a_skills("init_skills", 53, g_akt_spieler).f_beschreibung_2[2] = "(Funke, Feuerball, Flammenmeer)";
	a_skills("init_skills", 53, g_akt_spieler).f_beschreibung_2[1] = "(Spark, Fireball, Sea of Flames)";
	a_skills("init_skills", 53, g_akt_spieler).f_beschreibung_2[3] = "(Chispa, Bola de Fuego, Mar de Fuego)";
	a_skills("init_skills", 54, g_akt_spieler).f_name[2] = "Wassermagie";
	a_skills("init_skills", 54, g_akt_spieler).f_name[1] = "Water Magic";
	a_skills("init_skills", 54, g_akt_spieler).f_name[3] = "Magia de Agua";
	a_skills("init_skills", 54, g_akt_spieler).f_nummer = 54;
	a_skills("init_skills", 54, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 54, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 54, g_akt_spieler).f_beschreibung_1[2] = "Alle Zauber der Fl\374sse und des Wassers";
	a_skills("init_skills", 54, g_akt_spieler).f_beschreibung_1[1] = "All spells of the realm of water";
	a_skills("init_skills", 54, g_akt_spieler).f_beschreibung_1[3] = "Hechizos del reino del agua";
	a_skills("init_skills", 54, g_akt_spieler).f_beschreibung_2[2] = "(Erfrischung, Dehydration, Flutwelle)";
	a_skills("init_skills", 54, g_akt_spieler).f_beschreibung_2[1] = "(Refresh, Dehydration, Tidal Wave)";
	a_skills("init_skills", 54, g_akt_spieler).f_beschreibung_2[3] = "(Refrescar, Deshidrataci\363n, Ola de la Marea)";
	a_skills("init_skills", 55, g_akt_spieler).f_name[2] = "Erdmagie";
	a_skills("init_skills", 55, g_akt_spieler).f_name[1] = "Earth Magic";
	a_skills("init_skills", 55, g_akt_spieler).f_name[3] = "Magia de Tierra";
	a_skills("init_skills", 55, g_akt_spieler).f_nummer = 55;
	a_skills("init_skills", 55, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 55, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 55, g_akt_spieler).f_beschreibung_1[2] = "Alle Zauber des Gesteins und der Erde";
	a_skills("init_skills", 55, g_akt_spieler).f_beschreibung_1[1] = "All spells of the realm of the earth";
	a_skills("init_skills", 55, g_akt_spieler).f_beschreibung_1[3] = "Hechizos del reino de la tierra";
	a_skills("init_skills", 55, g_akt_spieler).f_beschreibung_2[2] = "(Portal, Fallensinn, Versteinern)";
	a_skills("init_skills", 55, g_akt_spieler).f_beschreibung_2[1] = "(Portal, Trap Sense, Petrify)";
	a_skills("init_skills", 55, g_akt_spieler).f_beschreibung_2[3] = "(Portal, Sentir Trampas, Petrificar)";
	a_skills("init_skills", 56, g_akt_spieler).f_name[2] = "Luftmagie";
	a_skills("init_skills", 56, g_akt_spieler).f_name[1] = "Air Magic";
	a_skills("init_skills", 56, g_akt_spieler).f_name[3] = "Magia de Aire";
	a_skills("init_skills", 56, g_akt_spieler).f_nummer = 56;
	a_skills("init_skills", 56, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 56, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 56, g_akt_spieler).f_beschreibung_1[2] = "Alle Zauber der Winde und der St\374rme";
	a_skills("init_skills", 56, g_akt_spieler).f_beschreibung_1[1] = "All spells of the realm of the air";
	a_skills("init_skills", 56, g_akt_spieler).f_beschreibung_1[3] = "Hechizos del reino del aire";
	a_skills("init_skills", 56, g_akt_spieler).f_beschreibung_2[2] = "(Federfall, R\374ckenwind, Fliegen)";
	a_skills("init_skills", 56, g_akt_spieler).f_beschreibung_2[1] = "(Featherfall, Helpful Winds, Flying)";
	a_skills("init_skills", 56, g_akt_spieler).f_beschreibung_2[3] = "(Peso Pluma, Vientos Amigos, Volar)";
	a_skills("init_skills", 57, g_akt_spieler).f_name[2] = "Druidenmagie";
	a_skills("init_skills", 57, g_akt_spieler).f_name[1] = "Druid Magic";
	a_skills("init_skills", 57, g_akt_spieler).f_name[3] = "Magia de Druida";
	a_skills("init_skills", 57, g_akt_spieler).f_nummer = 57;
	a_skills("init_skills", 57, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 57, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 57, g_akt_spieler).f_beschreibung_1[2] = "Alle Zauber der W\344lder und der Natur";
	a_skills("init_skills", 57, g_akt_spieler).f_beschreibung_1[1] = "All spells of the realm of nature";
	a_skills("init_skills", 57, g_akt_spieler).f_beschreibung_1[3] = "Hechizos del reino de la naturaleza";
	a_skills("init_skills", 57, g_akt_spieler).f_beschreibung_2[2] = "(Magic Apple, Tiere bannen, Wolfsform)";
	a_skills("init_skills", 57, g_akt_spieler).f_beschreibung_2[1] = "(Magic Apple, Banish Animals, Form of the Wolf)";
	a_skills("init_skills", 57, g_akt_spieler).f_beschreibung_2[3] = "(Manazana Magica, Ahuyentar Animales, Forma de Lobo)";
	a_skills("init_skills", 58, g_akt_spieler).f_name[2] = "Hexerei";
	a_skills("init_skills", 58, g_akt_spieler).f_name[1] = "Witchcraft";
	a_skills("init_skills", 58, g_akt_spieler).f_name[3] = "Brujeria";
	a_skills("init_skills", 58, g_akt_spieler).f_nummer = 58;
	a_skills("init_skills", 58, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 58, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 58, g_akt_spieler).f_beschreibung_1[2] = "Alle Zauber der Kontrolle und Verfluchung";
	a_skills("init_skills", 58, g_akt_spieler).f_beschreibung_1[1] = "All spells of control and cursing";
	a_skills("init_skills", 58, g_akt_spieler).f_beschreibung_1[3] = "Hechizos de control y maldici\363n";
	a_skills("init_skills", 58, g_akt_spieler).f_beschreibung_2[2] = "(Blitze werfen, Vergiften, Tiger beschw\366ren)";
	a_skills("init_skills", 58, g_akt_spieler).f_beschreibung_2[1] = "(Throw Lightning, Poison, Summon Tiger)";
	a_skills("init_skills", 58, g_akt_spieler).f_beschreibung_2[3] = "(Relampago, Envenenar, Conjurar Tigre)";
	a_skills("init_skills", 59, g_akt_spieler).f_name[2] = "Hohe Magie";
	a_skills("init_skills", 59, g_akt_spieler).f_name[1] = "High Magic";
	a_skills("init_skills", 59, g_akt_spieler).f_name[3] = "Alta Magia";
	a_skills("init_skills", 59, g_akt_spieler).f_nummer = 59;
	a_skills("init_skills", 59, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 59, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 59, g_akt_spieler).f_beschreibung_1[2] = "Alle Zauber, die die Magie selbst beeinflussen";
	a_skills("init_skills", 59, g_akt_spieler).f_beschreibung_1[1] = "All spells which influence magic itself";
	a_skills("init_skills", 59, g_akt_spieler).f_beschreibung_1[3] = "Hechizos que influyen en la magia";
	a_skills("init_skills", 59, g_akt_spieler).f_beschreibung_2[2] = "(Nexus Finden, Nexus, Metamagie)";
	a_skills("init_skills", 59, g_akt_spieler).f_beschreibung_2[1] = "(Find Nexus, Nexus, Metamagic)";
	a_skills("init_skills", 59, g_akt_spieler).f_beschreibung_2[3] = "(Encontrar Nexo, Nexo, Meta Magia)";
	a_skills("init_skills", 60, g_akt_spieler).f_name[2] = "Zauberlieder";
	a_skills("init_skills", 60, g_akt_spieler).f_name[1] = "Spellsongs";
	a_skills("init_skills", 60, g_akt_spieler).f_name[3] = "Canciones Magicas";
	a_skills("init_skills", 60, g_akt_spieler).f_nummer = 60;
	a_skills("init_skills", 60, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 60, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 60, g_akt_spieler).f_beschreibung_1[2] = "Magische Lieder der Barden (brauchen weder Mana noch Zaubermacht)";
	a_skills("init_skills", 60, g_akt_spieler).f_beschreibung_1[1] = "Magic songs of the Bards (need neither Mana nor Might)";
	a_skills("init_skills", 60, g_akt_spieler).f_beschreibung_1[3] = "Canciones magicas de los Bardos";
	a_skills("init_skills", 60, g_akt_spieler).f_beschreibung_2[2] = "(Reise: +1 Bewegung, Einsamkeit: Keine Hinterhalte, Magie: Keine Runenfallen)";
	a_skills("init_skills", 60, g_akt_spieler).f_beschreibung_2[1] = "(Travel: +1 Movement, Loneliness: No Ambushes, Magic: No Rune Traps)";
	a_skills("init_skills", 60, g_akt_spieler).f_beschreibung_2[3] = "(Viaje: +1 Velocidad, Soledad: No Emboscadas, Magia: No Trampas Runas)";
	a_skills("init_skills", 61, g_akt_spieler).f_name[2] = "Best\344ndige Magie";
	a_skills("init_skills", 61, g_akt_spieler).f_name[1] = "Stable Magic";
	a_skills("init_skills", 61, g_akt_spieler).f_name[3] = "Magia Persistente";
	a_skills("init_skills", 61, g_akt_spieler).f_nummer = 61;
	a_skills("init_skills", 61, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 61, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 61, g_akt_spieler).f_beschreibung_1[2] = "Spruchdauer doppelt so lange";
	a_skills("init_skills", 61, g_akt_spieler).f_beschreibung_1[1] = "Doubles the duration of spells";
	a_skills("init_skills", 61, g_akt_spieler).f_beschreibung_1[3] = "Doble duraci\363n de hechizos";
	a_skills("init_skills", 61, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 61, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 61, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 62, g_akt_spieler).f_name[2] = "Elementarmagie";
	a_skills("init_skills", 62, g_akt_spieler).f_name[1] = "Elementary Magic";
	a_skills("init_skills", 62, g_akt_spieler).f_name[3] = "Magia de los Elementos";
	a_skills("init_skills", 62, g_akt_spieler).f_nummer = 62;
	a_skills("init_skills", 62, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 62, g_akt_spieler).f_kosten = 6;
	a_skills("init_skills", 62, g_akt_spieler).f_beschreibung_1[2] = "Erd, Feuer, Luft und Wassermagie";
	a_skills("init_skills", 62, g_akt_spieler).f_beschreibung_1[1] = "Air, Earth, Fire and Water magic";
	a_skills("init_skills", 62, g_akt_spieler).f_beschreibung_1[3] = "Magia de Aire, Tierra, Fuego y Aqua";
	a_skills("init_skills", 62, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 62, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 62, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 63, g_akt_spieler).f_name[2] = "Zauberf\374rst";
	a_skills("init_skills", 63, g_akt_spieler).f_name[1] = "Mage Lord";
	a_skills("init_skills", 63, g_akt_spieler).f_name[3] = "Rey Mago";
	a_skills("init_skills", 63, g_akt_spieler).f_nummer = 63;
	a_skills("init_skills", 63, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 63, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 63, g_akt_spieler).f_unique = 1;
	a_skills("init_skills", 63, g_akt_spieler).f_beschreibung_1[2] = "Alle Spieler erhalten +2 Zauberkraft";
	a_skills("init_skills", 63, g_akt_spieler).f_beschreibung_1[1] = "All players get +2 Spell Power";
	a_skills("init_skills", 63, g_akt_spieler).f_beschreibung_1[3] = "Todos jugadores reciben Poder de Hechizos +2";
	a_skills("init_skills", 63, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 63, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 63, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 64, g_akt_spieler).f_name[2] = "Scrollwissen";
	a_skills("init_skills", 64, g_akt_spieler).f_name[1] = "Scroll Lore";
	a_skills("init_skills", 64, g_akt_spieler).f_name[3] = "Rata de biblioteca";
	a_skills("init_skills", 64, g_akt_spieler).f_nummer = 64;
	a_skills("init_skills", 64, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 64, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 64, g_akt_spieler).f_beschreibung_1[2] = "Erm\366glicht erlernen von 15 Zaubern von Schriftrollen.";
	a_skills("init_skills", 64, g_akt_spieler).f_beschreibung_1[1] = "Learn up to 15 spells from scrolls";
	a_skills("init_skills", 64, g_akt_spieler).f_beschreibung_1[3] = "Puedes aprender 15 hechizos de pergaminos";
	a_skills("init_skills", 64, g_akt_spieler).f_beschreibung_2[2] = "(Max Level eigener Zirkel -2)";
	a_skills("init_skills", 64, g_akt_spieler).f_beschreibung_2[1] = "(Max Level: current Spell Circle -2)";
	a_skills("init_skills", 64, g_akt_spieler).f_beschreibung_2[3] = "(Max Nivel: actual C\355rculo de Hechizos -2)";
	a_skills("init_skills", 65, g_akt_spieler).f_name[2] = "Freie Magie";
	a_skills("init_skills", 65, g_akt_spieler).f_name[1] = "Free Magic";
	a_skills("init_skills", 65, g_akt_spieler).f_name[3] = "Magia Libre";
	a_skills("init_skills", 65, g_akt_spieler).f_nummer = 65;
	a_skills("init_skills", 65, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 65, g_akt_spieler).f_kosten = 4;
	a_skills("init_skills", 65, g_akt_spieler).f_beschreibung_1[2] = "Erm\366glicht das lernen beliebiger Zauber aller Schulen";
	a_skills("init_skills", 65, g_akt_spieler).f_beschreibung_1[1] = "Allows you to learn spells from all spell schools,";
	a_skills("init_skills", 65, g_akt_spieler).f_beschreibung_1[3] = "Permite aprender hechizos de todas las escuelas";
	a_skills("init_skills", 65, g_akt_spieler).f_beschreibung_2[2] = "Allerdings nur einen pro Zirkel";
	a_skills("init_skills", 65, g_akt_spieler).f_beschreibung_2[1] = "but only one per Spell Circle";
	a_skills("init_skills", 65, g_akt_spieler).f_beschreibung_2[3] = "Pero solo uno por C\355rculo de Hechizos";
	a_skills("init_skills", 66, g_akt_spieler).f_name[2] = "Zauberweben";
	a_skills("init_skills", 66, g_akt_spieler).f_name[1] = "Spellweaving";
	a_skills("init_skills", 66, g_akt_spieler).f_name[3] = "Fortificar Hechizos";
	a_skills("init_skills", 66, g_akt_spieler).f_nummer = 66;
	a_skills("init_skills", 66, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 66, g_akt_spieler).f_kosten = 3;
	a_skills("init_skills", 66, g_akt_spieler).f_beschreibung_1[2] = "Je mehr Mana der Magier einsetzt desto";
	a_skills("init_skills", 66, g_akt_spieler).f_beschreibung_1[1] = "The more Mana the mage invests the";
	a_skills("init_skills", 66, g_akt_spieler).f_beschreibung_1[3] = "Cuanto mas Mana invierta el mago,";
	a_skills("init_skills", 66, g_akt_spieler).f_beschreibung_2[2] = "st\344rker sind seine Spr\374che";
	a_skills("init_skills", 66, g_akt_spieler).f_beschreibung_2[1] = "stronger his spells are";
	a_skills("init_skills", 66, g_akt_spieler).f_beschreibung_2[3] = "mas fuertes seran sus hechizos";
	a_skills("init_skills", 67, g_akt_spieler).f_name[2] = "Beschw\366rer";
	a_skills("init_skills", 67, g_akt_spieler).f_name[1] = "Summoner";
	a_skills("init_skills", 67, g_akt_spieler).f_name[3] = "Conjurador";
	a_skills("init_skills", 67, g_akt_spieler).f_nummer = 67;
	a_skills("init_skills", 67, g_akt_spieler).f_gruppe = 3;
	a_skills("init_skills", 67, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 67, g_akt_spieler).f_beschreibung_1[2] = "Alle Beschw\366rungszauber";
	a_skills("init_skills", 67, g_akt_spieler).f_beschreibung_1[1] = "All summon creature spells";
	a_skills("init_skills", 67, g_akt_spieler).f_beschreibung_1[3] = "Todos los hechizos de conjuraci\363n";
	a_skills("init_skills", 67, g_akt_spieler).f_beschreibung_2[2] = "(Kreatur heilen)";
	a_skills("init_skills", 67, g_akt_spieler).f_beschreibung_2[1] = "(Heal Creature)";
	a_skills("init_skills", 67, g_akt_spieler).f_beschreibung_2[3] = "(Curar Kriatura)";
	a_skills("init_skills", 68, g_akt_spieler).f_name[1] = "Way of Shadows";
	a_skills("init_skills", 68, g_akt_spieler).f_name[2] = "Weg der Schatten";
	a_skills("init_skills", 68, g_akt_spieler).f_name[3] = "Camino de las Sombras";
	a_skills("init_skills", 68, g_akt_spieler).f_nummer = 0;
	a_skills("init_skills", 68, g_akt_spieler).f_kosten = 0;
	a_skills("init_skills", 68, g_akt_spieler).f_beschreibung_1[2] = "";
	a_skills("init_skills", 68, g_akt_spieler).f_beschreibung_1[1] = "";
	a_skills("init_skills", 68, g_akt_spieler).f_beschreibung_1[3] = "";
	a_skills("init_skills", 68, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 68, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 68, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 69, g_akt_spieler).f_name[2] = "Fallenkunde";
	a_skills("init_skills", 69, g_akt_spieler).f_name[1] = "Trap Lore";
	a_skills("init_skills", 69, g_akt_spieler).f_name[3] = "Conocimiento de Trampas";
	a_skills("init_skills", 69, g_akt_spieler).f_nummer = 69;
	a_skills("init_skills", 69, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 69, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 69, g_akt_spieler).f_beschreibung_1[2] = "Automatisches Entsch\344rfen von entdeckten Fallen";
	a_skills("init_skills", 69, g_akt_spieler).f_beschreibung_1[1] = "Detected traps are automatically disarmed";
	a_skills("init_skills", 69, g_akt_spieler).f_beschreibung_1[3] = "Las trampas detectadas se desactivan autom\341ticamente";
	a_skills("init_skills", 69, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 69, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 69, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 70, g_akt_spieler).f_name[2] = "Wahrnehmung";
	a_skills("init_skills", 70, g_akt_spieler).f_name[1] = "Perception";
	a_skills("init_skills", 70, g_akt_spieler).f_name[3] = "Percepci\363n";
	a_skills("init_skills", 70, g_akt_spieler).f_nummer = 70;
	a_skills("init_skills", 70, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 70, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 70, g_akt_spieler).f_beschreibung_1[2] = "Wahrnehmung: 4 (normalerweise 1)";
	a_skills("init_skills", 70, g_akt_spieler).f_beschreibung_1[1] = "Perception: 4 (normally 1)";
	a_skills("init_skills", 70, g_akt_spieler).f_beschreibung_1[3] = "Percepci\363n: 4 (normalmente 1)";
	a_skills("init_skills", 70, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 70, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 70, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 71, g_akt_spieler).f_name[2] = "Nachtsicht";
	a_skills("init_skills", 71, g_akt_spieler).f_name[1] = "Night Vision";
	a_skills("init_skills", 71, g_akt_spieler).f_name[3] = "Visi\363n Nocturna";
	a_skills("init_skills", 71, g_akt_spieler).f_nummer = 71;
	a_skills("init_skills", 71, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 71, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 71, g_akt_spieler).f_beschreibung_1[2] = "Sichtradius +2 Feld";
	a_skills("init_skills", 71, g_akt_spieler).f_beschreibung_1[1] = "Sight radius +2";
	a_skills("init_skills", 71, g_akt_spieler).f_beschreibung_1[3] = "Radio de visi\363n incrementado en +2";
	a_skills("init_skills", 71, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 71, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 71, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 72, g_akt_spieler).f_name[2] = "Schnelligkeit";
	a_skills("init_skills", 72, g_akt_spieler).f_name[1] = "Speed";
	a_skills("init_skills", 72, g_akt_spieler).f_name[3] = "Velocidad";
	a_skills("init_skills", 72, g_akt_spieler).f_nummer = 72;
	a_skills("init_skills", 72, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 72, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 72, g_akt_spieler).f_beschreibung_1[2] = "Schnelligkeit: 11 (normalerweise 7)";
	a_skills("init_skills", 72, g_akt_spieler).f_beschreibung_1[1] = "Speed: 11 (normally 7)";
	a_skills("init_skills", 72, g_akt_spieler).f_beschreibung_1[3] = "Velocidad: 11 (normalmente 7)";
	a_skills("init_skills", 72, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 72, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 72, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 73, g_akt_spieler).f_name[2] = "Schleichen";
	a_skills("init_skills", 73, g_akt_spieler).f_name[1] = "Stealth";
	a_skills("init_skills", 73, g_akt_spieler).f_name[3] = "Furtivo";
	a_skills("init_skills", 73, g_akt_spieler).f_nummer = 73;
	a_skills("init_skills", 73, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 73, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 73, g_akt_spieler).f_beschreibung_1[2] = "An Monstern vorbeischleichen";
	a_skills("init_skills", 73, g_akt_spieler).f_beschreibung_1[1] = "Sneak by monsters";
	a_skills("init_skills", 73, g_akt_spieler).f_beschreibung_1[3] = "Escabullirse de los monstruos";
	a_skills("init_skills", 73, g_akt_spieler).f_beschreibung_2[2] = "(Chance=Gl\374ck*5%+Geschicklichkeit*10%+25%-Monsterlevel)";
	a_skills("init_skills", 73, g_akt_spieler).f_beschreibung_2[1] = "(Chance=Luck*5%+Dexterity*10%+25%-Monster Level)";
	a_skills("init_skills", 73, g_akt_spieler).f_beschreibung_2[3] = "(Chance=Suerte*5%+Destreza*10%+25%-Nivel del Monstruo)";
	a_skills("init_skills", 74, g_akt_spieler).f_name[2] = "Schl\366sser \366ffnen";
	a_skills("init_skills", 74, g_akt_spieler).f_name[1] = "Pick Locks";
	a_skills("init_skills", 74, g_akt_spieler).f_name[3] = "Cerrajero";
	a_skills("init_skills", 74, g_akt_spieler).f_nummer = 74;
	a_skills("init_skills", 74, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 74, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 74, g_akt_spieler).f_beschreibung_1[2] = "\326ffnet jede T\374r automatisch";
	a_skills("init_skills", 74, g_akt_spieler).f_beschreibung_1[1] = "You open every door with ease";
	a_skills("init_skills", 74, g_akt_spieler).f_beschreibung_1[3] = "Puedes forzar las puertas";
	a_skills("init_skills", 74, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 74, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 74, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 75, g_akt_spieler).f_name[2] = "Diebstahl";
	a_skills("init_skills", 75, g_akt_spieler).f_name[1] = "Thievery";
	a_skills("init_skills", 75, g_akt_spieler).f_name[3] = "Ladr\363n";
	a_skills("init_skills", 75, g_akt_spieler).f_nummer = 75;
	a_skills("init_skills", 75, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 75, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 75, g_akt_spieler).f_beschreibung_1[2] = "2 mal pro Ebene bestimmte Monster bestehlen";
	a_skills("init_skills", 75, g_akt_spieler).f_beschreibung_1[1] = "You can steal from certain monsters two times per level";
	a_skills("init_skills", 75, g_akt_spieler).f_beschreibung_1[3] = "Puedes robar 2 veces por nivel a algunos monstruos";
	a_skills("init_skills", 75, g_akt_spieler).f_beschreibung_2[2] = "(Chance=Geschicklichkeit*8%+Gl\374ck*6%)";
	a_skills("init_skills", 75, g_akt_spieler).f_beschreibung_2[1] = "(Chance=Dexterity*8%+Luck*6%)";
	a_skills("init_skills", 75, g_akt_spieler).f_beschreibung_2[3] = "(Chance=Suerte*8%+Destreza*6%)";
	a_skills("init_skills", 76, g_akt_spieler).f_name[2] = "Assassine";
	a_skills("init_skills", 76, g_akt_spieler).f_name[1] = "Assassination";
	a_skills("init_skills", 76, g_akt_spieler).f_name[3] = "Asesino";
	a_skills("init_skills", 76, g_akt_spieler).f_nummer = 76;
	a_skills("init_skills", 76, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 76, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 76, g_akt_spieler).f_beschreibung_1[2] = "Doppelte Chance f\374r kritischen Treffer im Nahkampf. Max 45%";
	a_skills("init_skills", 76, g_akt_spieler).f_beschreibung_1[1] = "Percentage for critical hits in close combat doubled. Max 45%";
	a_skills("init_skills", 76, g_akt_spieler).f_beschreibung_1[3] = "Porcentage de golpe cr\355tico duplicado con armas de filo. Max 45%";
	a_skills("init_skills", 76, g_akt_spieler).f_beschreibung_2[2] = "(Chance=(Geschicklichkeit+Gl\374ck)*2% + Waffe)";
	a_skills("init_skills", 76, g_akt_spieler).f_beschreibung_2[1] = "(Chance=(Dexterity+Luck)*2% + Weapon)";
	a_skills("init_skills", 76, g_akt_spieler).f_beschreibung_2[3] = "(Chance=(Destreza+Suerte)*2% + Arma)";
	a_skills("init_skills", 77, g_akt_spieler).f_name[2] = "Gefahren sp\374ren";
	a_skills("init_skills", 77, g_akt_spieler).f_name[1] = "Danger Sense";
	a_skills("init_skills", 77, g_akt_spieler).f_name[3] = "Percepci\363n de Peligros";
	a_skills("init_skills", 77, g_akt_spieler).f_nummer = 77;
	a_skills("init_skills", 77, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 77, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 77, g_akt_spieler).f_beschreibung_1[2] = "+70% Fallen finden. 50% weniger Hinterhalte";
	a_skills("init_skills", 77, g_akt_spieler).f_beschreibung_1[1] = "+70% Find Traps. 50% less ambushes";
	a_skills("init_skills", 77, g_akt_spieler).f_beschreibung_1[3] = "+70% Encontrar Trampas. 50% menos emboscadas";
	a_skills("init_skills", 77, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 77, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 77, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 78, g_akt_spieler).f_name[2] = "Spion";
	a_skills("init_skills", 78, g_akt_spieler).f_name[1] = "Spy";
	a_skills("init_skills", 78, g_akt_spieler).f_name[3] = "Esp\355a";
	a_skills("init_skills", 78, g_akt_spieler).f_nummer = 78;
	a_skills("init_skills", 78, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 78, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 78, g_akt_spieler).f_unique = 1;
	a_skills("init_skills", 78, g_akt_spieler).f_beschreibung_1[2] = "Alle Spieler erhalten +2 Zugweite";
	a_skills("init_skills", 78, g_akt_spieler).f_beschreibung_1[1] = "All players get +2 Movement";
	a_skills("init_skills", 78, g_akt_spieler).f_beschreibung_1[3] = "Todos jugadores reciben Velocidad +2";
	a_skills("init_skills", 78, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 78, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 78, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 79, g_akt_spieler).f_name[2] = "Schatzj\344ger";
	a_skills("init_skills", 79, g_akt_spieler).f_name[1] = "Treasure Hunter";
	a_skills("init_skills", 79, g_akt_spieler).f_name[3] = "Cazador de Tesoros";
	a_skills("init_skills", 79, g_akt_spieler).f_nummer = 79;
	a_skills("init_skills", 79, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 79, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 79, g_akt_spieler).f_beschreibung_1[2] = "Sieht Sch\344tze ausserhalb Sichtweite und findet alle verborgenen Sch\344tze";
	a_skills("init_skills", 79, g_akt_spieler).f_beschreibung_1[1] = "Sees treasures outside sight radius and finds all hidden treasures";
	a_skills("init_skills", 79, g_akt_spieler).f_beschreibung_1[3] = "Ve tesoros afuera de su vista y enuentra todos tesoros esondidos";
	a_skills("init_skills", 79, g_akt_spieler).f_beschreibung_2[2] = "(Startet mit Schaufel, 3 Schl\374sseln und Peitsche) Er zerbricht keine Schaufel";
	a_skills("init_skills", 79, g_akt_spieler).f_beschreibung_2[1] = "(Starts with shovel, 3 keys and whip) Shovels never break";
	a_skills("init_skills", 79, g_akt_spieler).f_beschreibung_2[3] = "(Empiece con pala, 3 llave y latigo)";
	a_skills("init_skills", 80, g_akt_spieler).f_name[2] = "Erde sp\374ren";
	a_skills("init_skills", 80, g_akt_spieler).f_name[1] = "Sense Earth";
	a_skills("init_skills", 80, g_akt_spieler).f_name[3] = "Sentir la Tierra";
	a_skills("init_skills", 80, g_akt_spieler).f_nummer = 80;
	a_skills("init_skills", 80, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 80, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 80, g_akt_spieler).f_beschreibung_1[2] = "Sieht auch Mauern ausserhalb des Sichtradiuses";
	a_skills("init_skills", 80, g_akt_spieler).f_beschreibung_1[1] = "Sees walls outside sight radius";
	a_skills("init_skills", 80, g_akt_spieler).f_beschreibung_1[3] = "Ves paredes fuera de tu vista";
	a_skills("init_skills", 80, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 80, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 80, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 81, g_akt_spieler).f_name[2] = "Monster sp\374ren";
	a_skills("init_skills", 81, g_akt_spieler).f_name[1] = "Monstersense";
	a_skills("init_skills", 81, g_akt_spieler).f_name[3] = "Sentir Monstruos";
	a_skills("init_skills", 81, g_akt_spieler).f_nummer = 81;
	a_skills("init_skills", 81, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 81, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 81, g_akt_spieler).f_beschreibung_1[2] = "Sieht auch Monster ausserhalb des Sichtradiuses";
	a_skills("init_skills", 81, g_akt_spieler).f_beschreibung_1[1] = "Sees monsters outside sight radius";
	a_skills("init_skills", 81, g_akt_spieler).f_beschreibung_1[3] = "Ves monstruos fuera de tu vista";
	a_skills("init_skills", 81, g_akt_spieler).f_beschreibung_2[2] = "Kann auch unsichbare Monster sp\374ren";
	a_skills("init_skills", 81, g_akt_spieler).f_beschreibung_2[1] = "Can detect invisible creatures";
	a_skills("init_skills", 81, g_akt_spieler).f_beschreibung_2[3] = "Puede idendificar monstruos invisibles";
	a_skills("init_skills", 82, g_akt_spieler).f_name[2] = "Kannibale";
	a_skills("init_skills", 82, g_akt_spieler).f_name[1] = "Cannibal";
	a_skills("init_skills", 82, g_akt_spieler).f_name[3] = "Can\355bal";
	a_skills("init_skills", 82, g_akt_spieler).f_nummer = 82;
	a_skills("init_skills", 82, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 82, g_akt_spieler).f_kosten = 3;
	a_skills("init_skills", 82, g_akt_spieler).f_beschreibung_1[2] = "Besiegte humanoide Gegner hinterlassen mit 60%";
	a_skills("init_skills", 82, g_akt_spieler).f_beschreibung_1[1] = "Killed humanoids leave (with 60% chance) blood";
	a_skills("init_skills", 82, g_akt_spieler).f_beschreibung_1[3] = "Humanoides matados dejan con 60% chance sangre";
	a_skills("init_skills", 82, g_akt_spieler).f_beschreibung_2[2] = "Menschenfleisch oder Blut. Mu\337 Ausgestossen sein!";
	a_skills("init_skills", 82, g_akt_spieler).f_beschreibung_2[1] = "or human meat behind. Has to be outcast!";
	a_skills("init_skills", 82, g_akt_spieler).f_beschreibung_2[3] = "o carne. Tiene que estar abandonado!";
	a_skills("init_skills", 83, g_akt_spieler).f_name[2] = "Untot";
	a_skills("init_skills", 83, g_akt_spieler).f_name[1] = "Undead";
	a_skills("init_skills", 83, g_akt_spieler).f_name[3] = "No muerto";
	a_skills("init_skills", 83, g_akt_spieler).f_nummer = 83;
	a_skills("init_skills", 83, g_akt_spieler).f_gruppe = 4;
	a_skills("init_skills", 83, g_akt_spieler).f_kosten = 4;
	a_skills("init_skills", 83, g_akt_spieler).f_beschreibung_1[2] = "Braucht weder Nahrung noch Wasser";
	a_skills("init_skills", 83, g_akt_spieler).f_beschreibung_1[1] = "Does not need food and water";
	a_skills("init_skills", 83, g_akt_spieler).f_beschreibung_1[3] = "No necesita comida y aqua";
	a_skills("init_skills", 83, g_akt_spieler).f_beschreibung_2[2] = "Mu\337 Ausgesto\337en sein!";
	a_skills("init_skills", 83, g_akt_spieler).f_beschreibung_2[1] = "Has to be outcast!";
	a_skills("init_skills", 83, g_akt_spieler).f_beschreibung_2[3] = "Tiene que estar abandonado!";
	a_skills("init_skills", 84, g_akt_spieler).f_name[2] = "Weg der Abenteuer";
	a_skills("init_skills", 84, g_akt_spieler).f_name[1] = "Way of Adventure";
	a_skills("init_skills", 84, g_akt_spieler).f_name[3] = "Camino de la Aventura";
	a_skills("init_skills", 84, g_akt_spieler).f_nummer = 0;
	a_skills("init_skills", 84, g_akt_spieler).f_kosten = 0;
	a_skills("init_skills", 84, g_akt_spieler).f_beschreibung_1[2] = "";
	a_skills("init_skills", 84, g_akt_spieler).f_beschreibung_1[1] = "";
	a_skills("init_skills", 84, g_akt_spieler).f_beschreibung_1[3] = "";
	a_skills("init_skills", 84, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 84, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 84, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 85, g_akt_spieler).f_name[2] = "Gl\374ck";
	a_skills("init_skills", 85, g_akt_spieler).f_name[1] = "Luck";
	a_skills("init_skills", 85, g_akt_spieler).f_name[3] = "Suerte";
	a_skills("init_skills", 85, g_akt_spieler).f_nummer = 85;
	a_skills("init_skills", 85, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 85, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 85, g_akt_spieler).f_beschreibung_1[2] = "Gl\374ck: 4 (normalerweise 1)";
	a_skills("init_skills", 85, g_akt_spieler).f_beschreibung_1[1] = "Luck: 4 (normally 1)";
	a_skills("init_skills", 85, g_akt_spieler).f_beschreibung_1[3] = "Suerte: 4 (normalmente 1)";
	a_skills("init_skills", 85, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 85, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 85, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 86, g_akt_spieler).f_name[2] = "Giftresistenz";
	a_skills("init_skills", 86, g_akt_spieler).f_name[1] = "Poison Resistance";
	a_skills("init_skills", 86, g_akt_spieler).f_name[3] = "Resistencia al Veneno";
	a_skills("init_skills", 86, g_akt_spieler).f_nummer = 86;
	a_skills("init_skills", 86, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 86, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 86, g_akt_spieler).f_beschreibung_1[2] = "Du erholst dich doppelt so schnell von Gift";
	a_skills("init_skills", 86, g_akt_spieler).f_beschreibung_1[1] = "You recover twice as fast from poison";
	a_skills("init_skills", 86, g_akt_spieler).f_beschreibung_1[3] = "Te mejoras con doble velocidad de venenos";
	a_skills("init_skills", 86, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 86, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 86, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 87, g_akt_spieler).f_name[2] = "Heilkunde";
	a_skills("init_skills", 87, g_akt_spieler).f_name[1] = "First Aid";
	a_skills("init_skills", 87, g_akt_spieler).f_name[3] = "Primeros Auxilios";
	a_skills("init_skills", 87, g_akt_spieler).f_nummer = 87;
	a_skills("init_skills", 87, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 87, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 87, g_akt_spieler).f_beschreibung_1[2] = "Heilt alle Wunden beim Betreten einer neuen Ebene";
	a_skills("init_skills", 87, g_akt_spieler).f_beschreibung_1[1] = "Heals all wounds when entering a new level";
	a_skills("init_skills", 87, g_akt_spieler).f_beschreibung_1[3] = "Curas todas las heridas al empezar un nivel";
	a_skills("init_skills", 87, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 87, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 87, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 88, g_akt_spieler).f_name[2] = "Kartographie";
	a_skills("init_skills", 88, g_akt_spieler).f_name[1] = "Cartography";
	a_skills("init_skills", 88, g_akt_spieler).f_name[3] = "Cartografia";
	a_skills("init_skills", 88, g_akt_spieler).f_nummer = 88;
	a_skills("init_skills", 88, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 88, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 88, g_akt_spieler).f_beschreibung_1[2] = "Beginnt das Spiel mit einer Karte";
	a_skills("init_skills", 88, g_akt_spieler).f_beschreibung_1[1] = "Starts the game with a map";
	a_skills("init_skills", 88, g_akt_spieler).f_beschreibung_1[3] = "Empiezas el juego con un mapa";
	a_skills("init_skills", 88, g_akt_spieler).f_beschreibung_2[2] = "(Diese zeigt immer den aktuellen Level)";
	a_skills("init_skills", 88, g_akt_spieler).f_beschreibung_2[1] = "(Always shows the actual level)";
	a_skills("init_skills", 88, g_akt_spieler).f_beschreibung_2[3] = "(Siempre muestra el nivel actual)";
	a_skills("init_skills", 89, g_akt_spieler).f_name[2] = "Spelunker";
	a_skills("init_skills", 89, g_akt_spieler).f_name[1] = "Spelunker";
	a_skills("init_skills", 89, g_akt_spieler).f_name[3] = "Viajero";
	a_skills("init_skills", 89, g_akt_spieler).f_nummer = 89;
	a_skills("init_skills", 89, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 89, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 89, g_akt_spieler).f_beschreibung_1[2] = "Beginnt das Spiel mit Lampe, \326l, Seil";
	a_skills("init_skills", 89, g_akt_spieler).f_beschreibung_1[1] = "Starts with lamp, oil, rope, shovel and pickaxe";
	a_skills("init_skills", 89, g_akt_spieler).f_beschreibung_1[3] = "Empiezas con lampara, aceite, cuerda, ";
	a_skills("init_skills", 89, g_akt_spieler).f_beschreibung_2[2] = "Schaufel und Spitzhacke";
	a_skills("init_skills", 89, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 89, g_akt_spieler).f_beschreibung_2[3] = "pala y pico";
	a_skills("init_skills", 90, g_akt_spieler).f_name[2] = "Erbschaft";
	a_skills("init_skills", 90, g_akt_spieler).f_name[1] = "Heirloom";
	a_skills("init_skills", 90, g_akt_spieler).f_name[3] = "Herencia";
	a_skills("init_skills", 90, g_akt_spieler).f_nummer = 90;
	a_skills("init_skills", 90, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 90, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 90, g_akt_spieler).f_beschreibung_1[2] = "Beginnt das Spiel mit 1000 Gold";
	a_skills("init_skills", 90, g_akt_spieler).f_beschreibung_1[1] = "Starts with 1,000 gold";
	a_skills("init_skills", 90, g_akt_spieler).f_beschreibung_1[3] = "Empiezas con 1000 monedas de oro";
	a_skills("init_skills", 90, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 90, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 90, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 91, g_akt_spieler).f_name[2] = "Udjat-Auge";
	a_skills("init_skills", 91, g_akt_spieler).f_name[1] = "Udjat Eye";
	a_skills("init_skills", 91, g_akt_spieler).f_name[3] = "Ojo de Udjat";
	a_skills("init_skills", 91, g_akt_spieler).f_nummer = 91;
	a_skills("init_skills", 91, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 91, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 91, g_akt_spieler).f_unique = 1;
	a_skills("init_skills", 91, g_akt_spieler).f_beschreibung_1[2] = "Beginnt das Spiel mit einem Udjat-Auge mit 3 Ladungen.";
	a_skills("init_skills", 91, g_akt_spieler).f_beschreibung_1[1] = "Starts with an Udjat Eye and 3 charges.";
	a_skills("init_skills", 91, g_akt_spieler).f_beschreibung_1[3] = "Empiezas con un Ojo de Udjat y 3 cargas.";
	a_skills("init_skills", 91, g_akt_spieler).f_beschreibung_2[2] = "(Jede gibt einen zus\344tzlichen Erfahrungsgewinn)";
	a_skills("init_skills", 91, g_akt_spieler).f_beschreibung_2[1] = "(Each charge provides an additional experience gain)";
	a_skills("init_skills", 91, g_akt_spieler).f_beschreibung_2[3] = "(Una avance mas de experiencia cada uno)";
	a_skills("init_skills", 92, g_akt_spieler).f_name[2] = "Weisheit";
	a_skills("init_skills", 92, g_akt_spieler).f_name[1] = "Wisdom";
	a_skills("init_skills", 92, g_akt_spieler).f_name[3] = "Sabidur\355a";
	a_skills("init_skills", 92, g_akt_spieler).f_nummer = 92;
	a_skills("init_skills", 92, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 92, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 92, g_akt_spieler).f_beschreibung_1[2] = "Ein zus\344tzlicher Erfahrungsgewinn alle 4 Levels";
	a_skills("init_skills", 92, g_akt_spieler).f_beschreibung_1[1] = "Provides an additional experience gain every 4 dungeon levels";
	a_skills("init_skills", 92, g_akt_spieler).f_beschreibung_1[3] = "Produce un gano de experiencia adicional cada 4 niveles";
	a_skills("init_skills", 92, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 92, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 92, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 93, g_akt_spieler).f_name[2] = "Ringmeisterung";
	a_skills("init_skills", 93, g_akt_spieler).f_name[1] = "Ringmastery";
	a_skills("init_skills", 93, g_akt_spieler).f_name[3] = "Maestro de Anillos";
	a_skills("init_skills", 93, g_akt_spieler).f_nummer = 93;
	a_skills("init_skills", 93, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 93, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 93, g_akt_spieler).f_beschreibung_1[2] = "Beliebig viele Ringe gleichzeitig tragen.";
	a_skills("init_skills", 93, g_akt_spieler).f_beschreibung_1[1] = "You can wear all rings at the same time.";
	a_skills("init_skills", 93, g_akt_spieler).f_beschreibung_1[3] = "Puedes ponerte todos anillos al mismo tiempo.";
	a_skills("init_skills", 93, g_akt_spieler).f_beschreibung_2[2] = "F\344ngt mit einem Ring an";
	a_skills("init_skills", 93, g_akt_spieler).f_beschreibung_2[1] = "Starts with a ring";
	a_skills("init_skills", 93, g_akt_spieler).f_beschreibung_2[3] = "Empiezas con un Anillo";
	a_skills("init_skills", 94, g_akt_spieler).f_name[2] = "Mystische Attacke";
	a_skills("init_skills", 94, g_akt_spieler).f_name[1] = "Mystic Attack";
	a_skills("init_skills", 94, g_akt_spieler).f_name[3] = "Ataque M\355stico";
	a_skills("init_skills", 94, g_akt_spieler).f_nummer = 94;
	a_skills("init_skills", 94, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 94, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 94, g_akt_spieler).f_beschreibung_1[2] = "Mentaler Schlag die dir und einem Monster Schaden zuf\374gt";
	a_skills("init_skills", 94, g_akt_spieler).f_beschreibung_1[1] = "Mental attack that damages you and a monster";
	a_skills("init_skills", 94, g_akt_spieler).f_beschreibung_1[3] = "Ataque Mental que te da\361a a ti y a un monstruo";
	a_skills("init_skills", 94, g_akt_spieler).f_beschreibung_2[2] = "(Kostet einen LP und macht level-level*5 Schaden)";
	a_skills("init_skills", 94, g_akt_spieler).f_beschreibung_2[1] = "(Costs a Life Point and does level-level*5 Damage)";
	a_skills("init_skills", 94, g_akt_spieler).f_beschreibung_2[3] = "(Cuesta un PdV y hace nivel-nivel*5 da\361o)";
	a_skills("init_skills", 95, g_akt_spieler).f_name[2] = "\334berlebensk\374nstler";
	a_skills("init_skills", 95, g_akt_spieler).f_name[1] = "Survival Expert";
	a_skills("init_skills", 95, g_akt_spieler).f_name[3] = "Supervivencia";
	a_skills("init_skills", 95, g_akt_spieler).f_nummer = 95;
	a_skills("init_skills", 95, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 95, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 95, g_akt_spieler).f_beschreibung_1[2] = "N\344hrwert aller Lebensmittel verdoppelt. Findet mit 10% Nahrung";
	a_skills("init_skills", 95, g_akt_spieler).f_beschreibung_1[1] = "Value of all food is doubled. 10% chance to find food";
	a_skills("init_skills", 95, g_akt_spieler).f_beschreibung_1[3] = "Valor de todos los alimentos cuenta doble. Encuentras comida en cada";
	a_skills("init_skills", 95, g_akt_spieler).f_beschreibung_2[2] = " bei erschlagenen Tieren. Beginnt mit Angel und Fallenwerkzeug";
	a_skills("init_skills", 95, g_akt_spieler).f_beschreibung_2[1] = "with each slain animal. Starts with a Fishing Rod and Trap Toolkit";
	a_skills("init_skills", 95, g_akt_spieler).f_beschreibung_2[3] = " animal con 10%. Empiezas con ca\361a de pescar y herramientas para trampas";
	a_skills("init_skills", 96, g_akt_spieler).f_name[2] = "H\344ndler";
	a_skills("init_skills", 96, g_akt_spieler).f_name[1] = "Merchant";
	a_skills("init_skills", 96, g_akt_spieler).f_name[3] = "Comerciante";
	a_skills("init_skills", 96, g_akt_spieler).f_nummer = 96;
	a_skills("init_skills", 96, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 96, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 96, g_akt_spieler).f_beschreibung_1[2] = "Beim erreichen einer neuen Ebene 20% einen H\344ndler ";
	a_skills("init_skills", 96, g_akt_spieler).f_beschreibung_1[1] = "20% chance to meet a merchant when you reach a new level";
	a_skills("init_skills", 96, g_akt_spieler).f_beschreibung_1[3] = "Cuando entras en un nuevo nivel tienes 20% para encontrarte";
	a_skills("init_skills", 96, g_akt_spieler).f_beschreibung_2[2] = "zu treffen";
	a_skills("init_skills", 96, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 96, g_akt_spieler).f_beschreibung_2[3] = "a un comerciante";
	a_skills("init_skills", 97, g_akt_spieler).f_name[2] = "Visionen";
	a_skills("init_skills", 97, g_akt_spieler).f_name[1] = "Visions";
	a_skills("init_skills", 97, g_akt_spieler).f_name[3] = "Visiones";
	a_skills("init_skills", 97, g_akt_spieler).f_nummer = 97;
	a_skills("init_skills", 97, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 97, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 97, g_akt_spieler).f_beschreibung_1[2] = "Erkennt R\344ume bevor er sie betritt";
	a_skills("init_skills", 97, g_akt_spieler).f_beschreibung_1[1] = "Identifies rooms before entering them";
	a_skills("init_skills", 97, g_akt_spieler).f_beschreibung_1[3] = "Identificas habitaciones antes de entrar";
	a_skills("init_skills", 97, g_akt_spieler).f_beschreibung_2[2] = "(+30% Fallen entdecken + Verborgene Sch\344tze finden)";
	a_skills("init_skills", 97, g_akt_spieler).f_beschreibung_2[1] = "(+30% Find Traps + find hidden treasure)";
	a_skills("init_skills", 97, g_akt_spieler).f_beschreibung_2[3] = "(+30% Encontrar Trampas + tesoros escondidos)";
	a_skills("init_skills", 98, g_akt_spieler).f_name[2] = "Schmiedekunst";
	a_skills("init_skills", 98, g_akt_spieler).f_name[1] = "Crafting";
	a_skills("init_skills", 98, g_akt_spieler).f_name[3] = "Forjar";
	a_skills("init_skills", 98, g_akt_spieler).f_nummer = 98;
	a_skills("init_skills", 98, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 98, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 98, g_akt_spieler).f_beschreibung_1[2] = "F\344higkeit besch\344digte/zerst\366rte Ausr\374stung zu reparieren";
	a_skills("init_skills", 98, g_akt_spieler).f_beschreibung_1[1] = "Ability to repair damaged/broken weapons/armor";
	a_skills("init_skills", 98, g_akt_spieler).f_beschreibung_1[3] = "Abilidad de arreglar armas/armaduras danados/rompios";
	a_skills("init_skills", 98, g_akt_spieler).f_beschreibung_2[2] = "(und magische Waffen/Pfeile aus Edelsteinen erschaffen)";
	a_skills("init_skills", 98, g_akt_spieler).f_beschreibung_2[1] = "(With gem stones  you can create magical weapons/arrows)";
	a_skills("init_skills", 98, g_akt_spieler).f_beschreibung_2[3] = "(Con piedras preciosas podemos crear armas/flechas magicas)";
	a_skills("init_skills", 99, g_akt_spieler).f_name[2] = "Elfenblut";
	a_skills("init_skills", 99, g_akt_spieler).f_name[1] = "Elf Blood";
	a_skills("init_skills", 99, g_akt_spieler).f_name[3] = "Sangre \311lfica";
	a_skills("init_skills", 99, g_akt_spieler).f_nummer = 99;
	a_skills("init_skills", 99, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 99, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 99, g_akt_spieler).f_beschreibung_1[2] = "Alle deine Attribute sind um eins besser";
	a_skills("init_skills", 99, g_akt_spieler).f_beschreibung_1[1] = "+1 to all attributes";
	a_skills("init_skills", 99, g_akt_spieler).f_beschreibung_1[3] = "*1 a todos los atributos";
	a_skills("init_skills", 99, g_akt_spieler).f_beschreibung_2[2] = "ang, st\344, ges, wah, gl\374ck, zmacht";
	a_skills("init_skills", 99, g_akt_spieler).f_beschreibung_2[1] = "(Attack, Strength, Dexterity, Perception, Luck, Spell Power)";
	a_skills("init_skills", 99, g_akt_spieler).f_beschreibung_2[3] = "(Ataque, Fuerza, Destreza, Percepci\363n, Suerte, Poder de Hechizos)";
	a_skills("init_skills", 100, g_akt_spieler).f_name[2] = "St\344mmig";
	a_skills("init_skills", 100, g_akt_spieler).f_name[1] = "Sturdy";
	a_skills("init_skills", 100, g_akt_spieler).f_name[3] = "Duro";
	a_skills("init_skills", 100, g_akt_spieler).f_nummer = 100;
	a_skills("init_skills", 100, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 100, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 100, g_akt_spieler).f_beschreibung_1[2] = "Jeder Punkt St\344rke gibt zus\344tzlich +2 Lebenspunkte";
	a_skills("init_skills", 100, g_akt_spieler).f_beschreibung_1[1] = "Each point of Strength gives +2 Life Points";
	a_skills("init_skills", 100, g_akt_spieler).f_beschreibung_1[3] = "Cada punto de Fuerza te da +2 Puntos de Vida tambien";
	a_skills("init_skills", 100, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 100, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 100, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 101, g_akt_spieler).f_name[2] = "Fingerfertigkeit";
	a_skills("init_skills", 101, g_akt_spieler).f_name[1] = "Swift Fingers";
	a_skills("init_skills", 101, g_akt_spieler).f_name[3] = "Agil";
	a_skills("init_skills", 101, g_akt_spieler).f_nummer = 101;
	a_skills("init_skills", 101, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 101, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 101, g_akt_spieler).f_beschreibung_1[2] = "Gegenst\344nde aufnehmen kostet nicht den Zug";
	a_skills("init_skills", 101, g_akt_spieler).f_beschreibung_1[1] = "Picking up items does not cause the turn to end";
	a_skills("init_skills", 101, g_akt_spieler).f_beschreibung_1[3] = "Recoger cosas no hace que termine el turno";
	a_skills("init_skills", 101, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 101, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 101, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 102, g_akt_spieler).f_name[2] = "Aufmerksamkeit";
	a_skills("init_skills", 102, g_akt_spieler).f_name[1] = "Awareness";
	a_skills("init_skills", 102, g_akt_spieler).f_name[3] = "Atento";
	a_skills("init_skills", 102, g_akt_spieler).f_nummer = 102;
	a_skills("init_skills", 102, g_akt_spieler).f_gruppe = 5;
	a_skills("init_skills", 102, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 102, g_akt_spieler).f_beschreibung_1[2] = "Halbiert alle Chancen beklaut zu werden";
	a_skills("init_skills", 102, g_akt_spieler).f_beschreibung_1[1] = "Halves all chances to get robbed";
	a_skills("init_skills", 102, g_akt_spieler).f_beschreibung_1[3] = "La probabilidad para ser robado es";
	a_skills("init_skills", 102, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 102, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 102, g_akt_spieler).f_beschreibung_2[3] = "la mitad";
	a_skills("init_skills", 103, g_akt_spieler).f_name[2] = "Weg der G\366tter";
	a_skills("init_skills", 103, g_akt_spieler).f_name[1] = "Way of the Gods";
	a_skills("init_skills", 103, g_akt_spieler).f_name[3] = "Camino de los Dioses";
	a_skills("init_skills", 103, g_akt_spieler).f_nummer = 0;
	a_skills("init_skills", 103, g_akt_spieler).f_kosten = 0;
	a_skills("init_skills", 103, g_akt_spieler).f_beschreibung_1[2] = "";
	a_skills("init_skills", 103, g_akt_spieler).f_beschreibung_1[1] = "";
	a_skills("init_skills", 103, g_akt_spieler).f_beschreibung_1[3] = "";
	a_skills("init_skills", 103, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 103, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 103, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 104, g_akt_spieler).f_name[2] = "Akolyth";
	a_skills("init_skills", 104, g_akt_spieler).f_name[1] = "Akolyth";
	a_skills("init_skills", 104, g_akt_spieler).f_name[3] = "Acolito";
	a_skills("init_skills", 104, g_akt_spieler).f_nummer = 104;
	a_skills("init_skills", 104, g_akt_spieler).f_gruppe = 6;
	a_skills("init_skills", 104, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 104, g_akt_spieler).f_beschreibung_1[2] = "Sanktum regeneriert verlorenes Mana und heilt Gifte, Krankheiten";
	a_skills("init_skills", 104, g_akt_spieler).f_beschreibung_1[1] = "The Sanctum regenerates lost Mana and heals poison, diseases";
	a_skills("init_skills", 104, g_akt_spieler).f_beschreibung_1[3] = "El Santuario regenera el Mana y cura veneno, enfermedades";
	a_skills("init_skills", 104, g_akt_spieler).f_beschreibung_2[2] = "und Fl\374che";
	a_skills("init_skills", 104, g_akt_spieler).f_beschreibung_2[1] = "and curses";
	a_skills("init_skills", 104, g_akt_spieler).f_beschreibung_2[3] = "y maldiciones";
	a_skills("init_skills", 105, g_akt_spieler).f_name[2] = "Gott des Krieges";
	a_skills("init_skills", 105, g_akt_spieler).f_name[1] = "God of War";
	a_skills("init_skills", 105, g_akt_spieler).f_name[3] = "Dios de la Guerra";
	a_skills("init_skills", 105, g_akt_spieler).f_nummer = 105;
	a_skills("init_skills", 105, g_akt_spieler).f_gruppe = 6;
	a_skills("init_skills", 105, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 105, g_akt_spieler).f_beschreibung_1[2] = "Bei jedem get\366teten Monster chance auf +1 LP";
	a_skills("init_skills", 105, g_akt_spieler).f_beschreibung_1[1] = "For each killed monster, chance to get +1 Life Point";
	a_skills("init_skills", 105, g_akt_spieler).f_beschreibung_1[3] = "Cada monstruo que matas te da una chance para +1 PdV";
	a_skills("init_skills", 105, g_akt_spieler).f_beschreibung_2[2] = "(Chance=200/Maximale Lebenspunkte in %)";
	a_skills("init_skills", 105, g_akt_spieler).f_beschreibung_2[1] = "(Chance=200/Maximum Life Points in %)";
	a_skills("init_skills", 105, g_akt_spieler).f_beschreibung_2[3] = "(Chance=200/Maximos Puntos de Vida en %)";
	a_skills("init_skills", 106, g_akt_spieler).f_name[2] = "Gott des Todes";
	a_skills("init_skills", 106, g_akt_spieler).f_name[1] = "God of Death";
	a_skills("init_skills", 106, g_akt_spieler).f_name[3] = "Dios del Muerto";
	a_skills("init_skills", 106, g_akt_spieler).f_nummer = 106;
	a_skills("init_skills", 106, g_akt_spieler).f_gruppe = 6;
	a_skills("init_skills", 106, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 106, g_akt_spieler).f_beschreibung_1[2] = "Bei jedem get\366tetem Monster chance auf +1 Mana";
	a_skills("init_skills", 106, g_akt_spieler).f_beschreibung_1[1] = "For each killed monster, chance to get +1 Mana";
	a_skills("init_skills", 106, g_akt_spieler).f_beschreibung_1[3] = "Cada monstruo que matas te da una probab. de +1 Mana";
	a_skills("init_skills", 106, g_akt_spieler).f_beschreibung_2[2] = "(Chance=200/Maximale Manapunkte in %)";
	a_skills("init_skills", 106, g_akt_spieler).f_beschreibung_2[1] = "(Chance=200/Maximum Mana Points in %)";
	a_skills("init_skills", 106, g_akt_spieler).f_beschreibung_2[3] = "(Probabilidad=200/M\341ximos Puntos de Mana en %)";
	a_skills("init_skills", 107, g_akt_spieler).f_name[2] = "G\366ttin der Weisheit";
	a_skills("init_skills", 107, g_akt_spieler).f_name[1] = "Goddess of Wisdom";
	a_skills("init_skills", 107, g_akt_spieler).f_name[3] = "Diosa de la Sabiduria";
	a_skills("init_skills", 107, g_akt_spieler).f_nummer = 107;
	a_skills("init_skills", 107, g_akt_spieler).f_gruppe = 6;
	a_skills("init_skills", 107, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 107, g_akt_spieler).f_beschreibung_1[2] = "+1 Mana pro Sanktum";
	a_skills("init_skills", 107, g_akt_spieler).f_beschreibung_1[1] = "+1 Mana per Sanctum";
	a_skills("init_skills", 107, g_akt_spieler).f_beschreibung_1[3] = "+1 Mana cada Santuario";
	a_skills("init_skills", 107, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 107, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 107, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 108, g_akt_spieler).f_name[2] = "G\366ttin der Heilung";
	a_skills("init_skills", 108, g_akt_spieler).f_name[1] = "Goddess of Healing";
	a_skills("init_skills", 108, g_akt_spieler).f_name[3] = "Diosa de la Curaci\363n";
	a_skills("init_skills", 108, g_akt_spieler).f_nummer = 108;
	a_skills("init_skills", 108, g_akt_spieler).f_gruppe = 6;
	a_skills("init_skills", 108, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 108, g_akt_spieler).f_beschreibung_1[2] = "+1 LP pro Sanktum";
	a_skills("init_skills", 108, g_akt_spieler).f_beschreibung_1[1] = "+1 Life Point per Sanctum";
	a_skills("init_skills", 108, g_akt_spieler).f_beschreibung_1[3] = "+1 Punto de Vida cada Santuario";
	a_skills("init_skills", 108, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 108, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 108, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 109, g_akt_spieler).f_name[2] = "Gott der Geheimnisse";
	a_skills("init_skills", 109, g_akt_spieler).f_name[1] = "God of Secrets";
	a_skills("init_skills", 109, g_akt_spieler).f_name[3] = "Dios de los Secretos";
	a_skills("init_skills", 109, g_akt_spieler).f_nummer = 109;
	a_skills("init_skills", 109, g_akt_spieler).f_gruppe = 6;
	a_skills("init_skills", 109, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 109, g_akt_spieler).f_beschreibung_1[2] = "+1 LP pro Geheimt\374r";
	a_skills("init_skills", 109, g_akt_spieler).f_beschreibung_1[1] = "Chance of +1 Life Point per secret door";
	a_skills("init_skills", 109, g_akt_spieler).f_beschreibung_1[3] = "+1 Punto de Vida cada puerta secreta";
	a_skills("init_skills", 109, g_akt_spieler).f_beschreibung_2[2] = "(Chance=100%-Ebene*2)";
	a_skills("init_skills", 109, g_akt_spieler).f_beschreibung_2[1] = "(Chance=100%-Level*2)";
	a_skills("init_skills", 109, g_akt_spieler).f_beschreibung_2[3] = "(Probabilidad=100%-Nivel*2)";
	a_skills("init_skills", 110, g_akt_spieler).f_name[2] = "Gott des Reichtums";
	a_skills("init_skills", 110, g_akt_spieler).f_name[1] = "God of Wealth";
	a_skills("init_skills", 110, g_akt_spieler).f_name[3] = "Dios de la Riqueza";
	a_skills("init_skills", 110, g_akt_spieler).f_nummer = 110;
	a_skills("init_skills", 110, g_akt_spieler).f_gruppe = 6;
	a_skills("init_skills", 110, g_akt_spieler).f_kosten = 2;
	a_skills("init_skills", 110, g_akt_spieler).f_beschreibung_1[2] = "Chance auf +1 LP pro Goldsack";
	a_skills("init_skills", 110, g_akt_spieler).f_beschreibung_1[1] = "Chance of +1 Life Point per gold bag";
	a_skills("init_skills", 110, g_akt_spieler).f_beschreibung_1[3] = "Posibilidad +1 Punto de Vida cada bolsa de oro";
	a_skills("init_skills", 110, g_akt_spieler).f_beschreibung_2[2] = "(Chance=500/Maximale Lebenspunkte in %)";
	a_skills("init_skills", 110, g_akt_spieler).f_beschreibung_2[1] = "(Chance=500/Maximum Life Points in %)";
	a_skills("init_skills", 110, g_akt_spieler).f_beschreibung_2[3] = "(Probabilidad=500/Maximos Puntos de Vida en %)";
	a_skills("init_skills", 111, g_akt_spieler).f_name[2] = "Sekund\344re Fertigkeiten";
	a_skills("init_skills", 111, g_akt_spieler).f_name[1] = "Secondary Skills";
	a_skills("init_skills", 111, g_akt_spieler).f_name[3] = "Habilidades Secundarias";
	a_skills("init_skills", 111, g_akt_spieler).f_nummer = 0;
	a_skills("init_skills", 111, g_akt_spieler).f_kosten = 0;
	a_skills("init_skills", 111, g_akt_spieler).f_beschreibung_1[2] = "";
	a_skills("init_skills", 111, g_akt_spieler).f_beschreibung_1[1] = "";
	a_skills("init_skills", 111, g_akt_spieler).f_beschreibung_1[3] = "";
	a_skills("init_skills", 111, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 111, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 111, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 112, g_akt_spieler).f_name[2] = "Wurfwaffen";
	a_skills("init_skills", 112, g_akt_spieler).f_name[1] = "Throwing Weapons";
	a_skills("init_skills", 112, g_akt_spieler).f_name[3] = "Armas para Lanzar";
	a_skills("init_skills", 112, g_akt_spieler).f_nummer = 112;
	a_skills("init_skills", 112, g_akt_spieler).f_gruppe = 7;
	a_skills("init_skills", 112, g_akt_spieler).f_kosten = 1;
	a_skills("init_skills", 112, g_akt_spieler).f_beschreibung_1[2] = "+50% Angriff und +2 Schaden mit Wurfwaffen";
	a_skills("init_skills", 112, g_akt_spieler).f_beschreibung_1[1] = "+50% Attack and +2 Damage with throwing weapons";
	a_skills("init_skills", 112, g_akt_spieler).f_beschreibung_1[3] = "+50% Ataque y +2 Da\361o con armas para lanzar";
	a_skills("init_skills", 112, g_akt_spieler).f_beschreibung_2[2] = "5 extra Dolche";
	a_skills("init_skills", 112, g_akt_spieler).f_beschreibung_2[1] = "Start with 5 extra Daggers";
	a_skills("init_skills", 112, g_akt_spieler).f_beschreibung_2[3] = "5 Dagas mas";
	a_skills("init_skills", 113, g_akt_spieler).f_name[2] = "Klettern";
	a_skills("init_skills", 113, g_akt_spieler).f_name[1] = "Climbing";
	a_skills("init_skills", 113, g_akt_spieler).f_name[3] = "Escalador";
	a_skills("init_skills", 113, g_akt_spieler).f_nummer = 113;
	a_skills("init_skills", 113, g_akt_spieler).f_gruppe = 7;
	a_skills("init_skills", 113, g_akt_spieler).f_kosten = 1;
	a_skills("init_skills", 113, g_akt_spieler).f_beschreibung_1[2] = "Erlaubt das Klettern ohne Seil";
	a_skills("init_skills", 113, g_akt_spieler).f_beschreibung_1[1] = "Allows climbing without rope";
	a_skills("init_skills", 113, g_akt_spieler).f_beschreibung_1[3] = "Permite escalar sin cuerda";
	a_skills("init_skills", 113, g_akt_spieler).f_beschreibung_2[2] = "(Du kannst durch Sch\344chte in den n\344chsten Level klettern)";
	a_skills("init_skills", 113, g_akt_spieler).f_beschreibung_2[1] = "(You can climb through holes to the next level)";
	a_skills("init_skills", 113, g_akt_spieler).f_beschreibung_2[3] = "(Puedes escalar a traves de agujeros al proximo nivel)";
	a_skills("init_skills", 114, g_akt_spieler).f_name[2] = "Schwimmen";
	a_skills("init_skills", 114, g_akt_spieler).f_name[1] = "Swimming";
	a_skills("init_skills", 114, g_akt_spieler).f_name[3] = "Nataci\363n";
	a_skills("init_skills", 114, g_akt_spieler).f_nummer = 114;
	a_skills("init_skills", 114, g_akt_spieler).f_gruppe = 7;
	a_skills("init_skills", 114, g_akt_spieler).f_kosten = 1;
	a_skills("init_skills", 114, g_akt_spieler).f_beschreibung_1[2] = "Erlaubt das \374berqueren von Fl\374ssen und Seen ohne Schaden";
	a_skills("init_skills", 114, g_akt_spieler).f_beschreibung_1[1] = "Allows the crossing of rivers and lakes without problems";
	a_skills("init_skills", 114, g_akt_spieler).f_beschreibung_1[3] = "Permite cruzar rios y lagos sin problemas";
	a_skills("init_skills", 114, g_akt_spieler).f_beschreibung_2[2] = "(Und Wasserfelder kosten nicht den Zug)";
	a_skills("init_skills", 114, g_akt_spieler).f_beschreibung_2[1] = "(And water tiles do not end the turn)";
	a_skills("init_skills", 114, g_akt_spieler).f_beschreibung_2[3] = "(Y campos con agua no te cuestan el turno)";
	a_skills("init_skills", 115, g_akt_spieler).f_name[2] = "Kr\344uterkunde";
	a_skills("init_skills", 115, g_akt_spieler).f_name[1] = "Herb Lore";
	a_skills("init_skills", 115, g_akt_spieler).f_name[3] = "Conocimiento de Hierbas";
	a_skills("init_skills", 115, g_akt_spieler).f_nummer = 115;
	a_skills("init_skills", 115, g_akt_spieler).f_gruppe = 7;
	a_skills("init_skills", 115, g_akt_spieler).f_kosten = 1;
	a_skills("init_skills", 115, g_akt_spieler).f_beschreibung_1[2] = "Kennt Wirkung aller Tr\344nke, Kr\344uter und Pilze im Labyrinth.";
	a_skills("init_skills", 115, g_akt_spieler).f_beschreibung_1[1] = "Knows effects of all potions, herbs and mushrooms in the labyrinth";
	a_skills("init_skills", 115, g_akt_spieler).f_beschreibung_1[3] = "Conoce los efectos de todas las pociones, hierbas y hongos en el laberinto";
	a_skills("init_skills", 115, g_akt_spieler).f_beschreibung_2[2] = "Beginnt mit 5 Pilzen und 5 Heilk\344utern";
	a_skills("init_skills", 115, g_akt_spieler).f_beschreibung_2[1] = "Starts with 5 mushrooms and 5 Healing Herbs";
	a_skills("init_skills", 115, g_akt_spieler).f_beschreibung_2[3] = "Empiezas con 5 hongos y 5 hierbas de curaci\363n";
	a_skills("init_skills", 116, g_akt_spieler).f_name[2] = "Feilschen";
	a_skills("init_skills", 116, g_akt_spieler).f_name[1] = "Haggle";
	a_skills("init_skills", 116, g_akt_spieler).f_name[3] = "Regateo";
	a_skills("init_skills", 116, g_akt_spieler).f_nummer = 116;
	a_skills("init_skills", 116, g_akt_spieler).f_gruppe = 7;
	a_skills("init_skills", 116, g_akt_spieler).f_kosten = 1;
	a_skills("init_skills", 116, g_akt_spieler).f_beschreibung_1[2] = "Reduziert die Kosten von Gegenst\344nden beim Einkauf und Lehrer um 25%";
	a_skills("init_skills", 116, g_akt_spieler).f_beschreibung_1[1] = "Reduces the cost of goods and training by 25%";
	a_skills("init_skills", 116, g_akt_spieler).f_beschreibung_1[3] = "Reduce el coste de los objetos y del entrenamiento en un 25%";
	a_skills("init_skills", 116, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 116, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 116, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 117, g_akt_spieler).f_name[2] = "Monsterkunde";
	a_skills("init_skills", 117, g_akt_spieler).f_name[1] = "Monster Lore";
	a_skills("init_skills", 117, g_akt_spieler).f_name[3] = "Conocimiento de Monstruos";
	a_skills("init_skills", 117, g_akt_spieler).f_nummer = 117;
	a_skills("init_skills", 117, g_akt_spieler).f_gruppe = 7;
	a_skills("init_skills", 117, g_akt_spieler).f_kosten = 1;
	a_skills("init_skills", 117, g_akt_spieler).f_beschreibung_1[2] = "Gibt alle Werte eines Monsters preis";
	a_skills("init_skills", 117, g_akt_spieler).f_beschreibung_1[1] = "Shows all attributes of a monster";
	a_skills("init_skills", 117, g_akt_spieler).f_beschreibung_1[3] = "Muestra todos los atributos de un monstruo";
	a_skills("init_skills", 117, g_akt_spieler).f_beschreibung_2[2] = "(Benutzung mit Umsehen Knopf)";
	a_skills("init_skills", 117, g_akt_spieler).f_beschreibung_2[1] = "(Use with Look around button)";
	a_skills("init_skills", 117, g_akt_spieler).f_beschreibung_2[3] = "(Usa con mirar buton)";
	a_skills("init_skills", 118, g_akt_spieler).f_name[2] = "Giftkenntnis";
	a_skills("init_skills", 118, g_akt_spieler).f_name[1] = "Poisonlore";
	a_skills("init_skills", 118, g_akt_spieler).f_name[3] = "Conocimiento de Venenos";
	a_skills("init_skills", 118, g_akt_spieler).f_nummer = 118;
	a_skills("init_skills", 118, g_akt_spieler).f_gruppe = 7;
	a_skills("init_skills", 118, g_akt_spieler).f_kosten = 1;
	a_skills("init_skills", 118, g_akt_spieler).f_beschreibung_1[2] = "Erkennt Gifte. Beginnt mit 5 starken Giften. Giftkunde + 2";
	a_skills("init_skills", 118, g_akt_spieler).f_beschreibung_1[1] = "Identifies poisons. Starts with 5 Strong Poisons. Poisonlore + 2";
	a_skills("init_skills", 118, g_akt_spieler).f_beschreibung_1[3] = "Identifica Venenos. Empiece con 5 Venenos Fuertes. Conocimiento de Venenos + 2";
	a_skills("init_skills", 118, g_akt_spieler).f_beschreibung_2[2] = "(Damit k\366nnen Waffen und Munition vergiftet werden)";
	a_skills("init_skills", 118, g_akt_spieler).f_beschreibung_2[1] = "(You can poison weapons and amunition)";
	a_skills("init_skills", 118, g_akt_spieler).f_beschreibung_2[3] = "(Puedes envenenar armas y munici\363n)";
	a_skills("init_skills", 119, g_akt_spieler).f_name[2] = "Tr\344ger";
	a_skills("init_skills", 119, g_akt_spieler).f_name[1] = "Heavy Carrier";
	a_skills("init_skills", 119, g_akt_spieler).f_name[3] = "Porteador";
	a_skills("init_skills", 119, g_akt_spieler).f_nummer = 119;
	a_skills("init_skills", 119, g_akt_spieler).f_gruppe = 7;
	a_skills("init_skills", 119, g_akt_spieler).f_kosten = 1;
	a_skills("init_skills", 119, g_akt_spieler).f_beschreibung_1[2] = "Unbegrenzte Tragekraft";
	a_skills("init_skills", 119, g_akt_spieler).f_beschreibung_1[1] = "No Encumberance penalty, regardless of carried weight";
	a_skills("init_skills", 119, g_akt_spieler).f_beschreibung_1[3] = "Peso de las cosas portadas no importa";
	a_skills("init_skills", 119, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 119, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 119, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 120, g_akt_spieler).f_name[2] = "Native Magie";
	a_skills("init_skills", 120, g_akt_spieler).f_name[1] = "Native Sorcery";
	a_skills("init_skills", 120, g_akt_spieler).f_name[3] = "Magia Nativo";
	a_skills("init_skills", 120, g_akt_spieler).f_nummer = 120;
	a_skills("init_skills", 120, g_akt_spieler).f_gruppe = 7;
	a_skills("init_skills", 120, g_akt_spieler).f_kosten = 1;
	a_skills("init_skills", 120, g_akt_spieler).f_beschreibung_1[2] = "Zirkel: 1 (normalerweise 0)";
	a_skills("init_skills", 120, g_akt_spieler).f_beschreibung_1[1] = "Spell Circle: 1 (normally 0)";
	a_skills("init_skills", 120, g_akt_spieler).f_beschreibung_1[3] = "C\355rculo M\341gico: 1 (normalmente 0)";
	a_skills("init_skills", 120, g_akt_spieler).f_beschreibung_2[2] = "(Du bist schwach Magiebegabt)";
	a_skills("init_skills", 120, g_akt_spieler).f_beschreibung_2[1] = "(You know how to use a little magic)";
	a_skills("init_skills", 120, g_akt_spieler).f_beschreibung_2[3] = "(Sabes un poco de magia)";
	a_skills("init_skills", 121, g_akt_spieler).f_name[2] = "Starke H\344nde";
	a_skills("init_skills", 121, g_akt_spieler).f_name[1] = "Monkey Grip";
	a_skills("init_skills", 121, g_akt_spieler).f_name[3] = "Manos Fuertes";
	a_skills("init_skills", 121, g_akt_spieler).f_nummer = 121;
	a_skills("init_skills", 121, g_akt_spieler).f_gruppe = 7;
	a_skills("init_skills", 121, g_akt_spieler).f_kosten = 1;
	a_skills("init_skills", 121, g_akt_spieler).f_beschreibung_1[2] = "Zweihandwaffen mit einer Hand f\374hren";
	a_skills("init_skills", 121, g_akt_spieler).f_beschreibung_1[1] = "Use two-handed weapons with one hand";
	a_skills("init_skills", 121, g_akt_spieler).f_beschreibung_1[3] = "Puedes usar armas de 2 manos con un mano";
	a_skills("init_skills", 121, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 121, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 121, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 122, g_akt_spieler).f_name[2] = "Nat\374rliches Mana";
	a_skills("init_skills", 122, g_akt_spieler).f_name[1] = "Natural Mana";
	a_skills("init_skills", 122, g_akt_spieler).f_name[3] = "Mana Natural";
	a_skills("init_skills", 122, g_akt_spieler).f_nummer = 122;
	a_skills("init_skills", 122, g_akt_spieler).f_gruppe = 7;
	a_skills("init_skills", 122, g_akt_spieler).f_kosten = 1;
	a_skills("init_skills", 122, g_akt_spieler).f_beschreibung_1[2] = "+2 Mana";
	a_skills("init_skills", 122, g_akt_spieler).f_beschreibung_1[1] = "+2 Mana";
	a_skills("init_skills", 122, g_akt_spieler).f_beschreibung_1[3] = "+2 Mana";
	a_skills("init_skills", 122, g_akt_spieler).f_beschreibung_2[2] = "+1 Mana jeden zweiten Level";
	a_skills("init_skills", 122, g_akt_spieler).f_beschreibung_2[1] = "+1 Mana every second level";
	a_skills("init_skills", 122, g_akt_spieler).f_beschreibung_2[3] = "+1 Mana cada 2 niveles";
	a_skills("init_skills", 123, g_akt_spieler).f_name[2] = "Nachteile";
	a_skills("init_skills", 123, g_akt_spieler).f_name[1] = "Flaws";
	a_skills("init_skills", 123, g_akt_spieler).f_name[3] = "Defectos";
	a_skills("init_skills", 123, g_akt_spieler).f_nummer = 0;
	a_skills("init_skills", 123, g_akt_spieler).f_kosten = 0;
	a_skills("init_skills", 123, g_akt_spieler).f_beschreibung_1[2] = "";
	a_skills("init_skills", 123, g_akt_spieler).f_beschreibung_1[1] = "";
	a_skills("init_skills", 123, g_akt_spieler).f_beschreibung_1[3] = "";
	a_skills("init_skills", 123, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 123, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 123, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 124, g_akt_spieler).f_name[2] = "Schw\344chlich";
	a_skills("init_skills", 124, g_akt_spieler).f_name[1] = "Weak";
	a_skills("init_skills", 124, g_akt_spieler).f_name[3] = "Debil";
	a_skills("init_skills", 124, g_akt_spieler).f_nummer = 124;
	a_skills("init_skills", 124, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 124, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 124, g_akt_spieler).f_beschreibung_1[2] = "Beginnt das Spiel mit 10 Lebenspunkten (normalerweise 12)";
	a_skills("init_skills", 124, g_akt_spieler).f_beschreibung_1[1] = "Starts with 10 Life Points (normally 12)";
	a_skills("init_skills", 124, g_akt_spieler).f_beschreibung_1[3] = "Empieza con 10 puntos de vida (normalmente 12)";
	a_skills("init_skills", 124, g_akt_spieler).f_beschreibung_2[2] = "+2 pro Erfahrungsgewinn (normalerweise +3) (Maximal 50 Lebenspunkte)";
	a_skills("init_skills", 124, g_akt_spieler).f_beschreibung_2[1] = "+2 per experience gain (normally +3) (Maximum 50 Life Points)";
	a_skills("init_skills", 124, g_akt_spieler).f_beschreibung_2[3] = "+2 per experiencia (normalmente +3) (Maximum 50 Puntos de Vida)";
	a_skills("init_skills", 125, g_akt_spieler).f_name[2] = "Armut";
	a_skills("init_skills", 125, g_akt_spieler).f_name[1] = "Poverty";
	a_skills("init_skills", 125, g_akt_spieler).f_name[3] = "Pobre";
	a_skills("init_skills", 125, g_akt_spieler).f_nummer = 125;
	a_skills("init_skills", 125, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 125, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 125, g_akt_spieler).f_beschreibung_1[2] = "Beginnt das Spiel ohne Gold und Ausr\374stung";
	a_skills("init_skills", 125, g_akt_spieler).f_beschreibung_1[1] = "Starts without any gold or equipment";
	a_skills("init_skills", 125, g_akt_spieler).f_beschreibung_1[3] = "Empieza sin oro ni equipamiento";
	a_skills("init_skills", 125, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 125, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 125, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 126, g_akt_spieler).f_name[2] = "Unaufmerksam";
	a_skills("init_skills", 126, g_akt_spieler).f_name[1] = "Unobservant";
	a_skills("init_skills", 126, g_akt_spieler).f_name[3] = "Despistado";
	a_skills("init_skills", 126, g_akt_spieler).f_nummer = 126;
	a_skills("init_skills", 126, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 126, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 126, g_akt_spieler).f_beschreibung_1[2] = "Charakter findet keine Fallen, Geheimt\374ren,";
	a_skills("init_skills", 126, g_akt_spieler).f_beschreibung_1[1] = "The character can't find traps, secret doors,";
	a_skills("init_skills", 126, g_akt_spieler).f_beschreibung_1[3] = "El personaje no encuentra trampas, puertas secretas,";
	a_skills("init_skills", 126, g_akt_spieler).f_beschreibung_2[2] = "Pilze und verborgene Sch\344tze";
	a_skills("init_skills", 126, g_akt_spieler).f_beschreibung_2[1] = "mushrooms and hidden treasure";
	a_skills("init_skills", 126, g_akt_spieler).f_beschreibung_2[3] = "hongos y tesoros escondidos";
	a_skills("init_skills", 127, g_akt_spieler).f_name[2] = "Geringes Mana";
	a_skills("init_skills", 127, g_akt_spieler).f_name[1] = "Low Mana";
	a_skills("init_skills", 127, g_akt_spieler).f_name[3] = "Bajo Mana";
	a_skills("init_skills", 127, g_akt_spieler).f_nummer = 127;
	a_skills("init_skills", 127, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 127, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 127, g_akt_spieler).f_beschreibung_1[2] = "Beginnt das Spiel mit einem Manapunkt (normalerweise 3)";
	a_skills("init_skills", 127, g_akt_spieler).f_beschreibung_1[1] = "Starts with 1 Mana Point (normally 3)";
	a_skills("init_skills", 127, g_akt_spieler).f_beschreibung_1[3] = "Empiezas con 1 punto de Mana (normalmente 3)";
	a_skills("init_skills", 127, g_akt_spieler).f_beschreibung_2[2] = "+2 pro Erfahrungsgewinn (normalerweise +3) (Maximal 50 Manapunkte)";
	a_skills("init_skills", 127, g_akt_spieler).f_beschreibung_2[1] = "+2 per experience gain (normally +3) (Maximum 50 Mana Points)";
	a_skills("init_skills", 127, g_akt_spieler).f_beschreibung_2[3] = "+2 con experiencia (normalmente +3) (Maximo 50 Puntos de Mana)";
	a_skills("init_skills", 128, g_akt_spieler).f_name[2] = "Schw\344che: Gift";
	a_skills("init_skills", 128, g_akt_spieler).f_name[1] = "Poison Weakness";
	a_skills("init_skills", 128, g_akt_spieler).f_name[3] = "Debilidad al Veneno";
	a_skills("init_skills", 128, g_akt_spieler).f_nummer = 128;
	a_skills("init_skills", 128, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 128, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 128, g_akt_spieler).f_beschreibung_1[2] = "Doppelter Schaden durch Gift";
	a_skills("init_skills", 128, g_akt_spieler).f_beschreibung_1[1] = "Poison does double damage";
	a_skills("init_skills", 128, g_akt_spieler).f_beschreibung_1[3] = "El veneno hace el doble de da\361o";
	a_skills("init_skills", 128, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 128, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 128, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 129, g_akt_spieler).f_name[2] = "Schw\344che: Magie";
	a_skills("init_skills", 129, g_akt_spieler).f_name[1] = "Magic Weakness";
	a_skills("init_skills", 129, g_akt_spieler).f_name[3] = "Debilidad a la Magia";
	a_skills("init_skills", 129, g_akt_spieler).f_nummer = 129;
	a_skills("init_skills", 129, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 129, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 129, g_akt_spieler).f_beschreibung_1[2] = "Doppelter Schaden durch feindliche Magie";
	a_skills("init_skills", 129, g_akt_spieler).f_beschreibung_1[1] = "Hostile magic does double damage";
	a_skills("init_skills", 129, g_akt_spieler).f_beschreibung_1[3] = "La magia hostil hace el doble de da\361o";
	a_skills("init_skills", 129, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 129, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 129, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 130, g_akt_spieler).f_name[2] = "Verflucht";
	a_skills("init_skills", 130, g_akt_spieler).f_name[1] = "Cursed";
	a_skills("init_skills", 130, g_akt_spieler).f_name[3] = "Maldito";
	a_skills("init_skills", 130, g_akt_spieler).f_nummer = 130;
	a_skills("init_skills", 130, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 130, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 130, g_akt_spieler).f_beschreibung_1[2] = "Fl\374che haben doppelte Dauer.";
	a_skills("init_skills", 130, g_akt_spieler).f_beschreibung_1[1] = "Double duration for all curses.";
	a_skills("init_skills", 130, g_akt_spieler).f_beschreibung_1[3] = "Doble duraci\363n para las maldiciones.";
	a_skills("init_skills", 130, g_akt_spieler).f_beschreibung_2[2] = "Mit 20%+Level neuen Fluch in neuer Ebene";
	a_skills("init_skills", 130, g_akt_spieler).f_beschreibung_2[1] = "With 20%+Level chance for a new curse every level";
	a_skills("init_skills", 130, g_akt_spieler).f_beschreibung_2[3] = "Con 20%+Nivel nuevo maldici\363n en nuevo nivel";
	a_skills("init_skills", 131, g_akt_spieler).f_name[2] = "Gottlos";
	a_skills("init_skills", 131, g_akt_spieler).f_name[1] = "Forsaken";
	a_skills("init_skills", 131, g_akt_spieler).f_name[3] = "Desamparado";
	a_skills("init_skills", 131, g_akt_spieler).f_nummer = 131;
	a_skills("init_skills", 131, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 131, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 131, g_akt_spieler).f_beschreibung_1[2] = "Keine Heilung im Sanktum";
	a_skills("init_skills", 131, g_akt_spieler).f_beschreibung_1[1] = "No healing in the Sanctum";
	a_skills("init_skills", 131, g_akt_spieler).f_beschreibung_1[3] = "El Santuario no cura";
	a_skills("init_skills", 131, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 131, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 131, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 132, g_akt_spieler).f_name[2] = "Kurzsichtig";
	a_skills("init_skills", 132, g_akt_spieler).f_name[1] = "Short Sighted";
	a_skills("init_skills", 132, g_akt_spieler).f_name[3] = "Corto de Vista";
	a_skills("init_skills", 132, g_akt_spieler).f_nummer = 132;
	a_skills("init_skills", 132, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 132, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 132, g_akt_spieler).f_beschreibung_1[2] = "Sichtradius ist immer halbiert";
	a_skills("init_skills", 132, g_akt_spieler).f_beschreibung_1[1] = "Sight radius is halved";
	a_skills("init_skills", 132, g_akt_spieler).f_beschreibung_1[3] = "El radio de visi\363n se reduce de la mitad";
	a_skills("init_skills", 132, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 132, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 132, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 133, g_akt_spieler).f_name[2] = "Dumm";
	a_skills("init_skills", 133, g_akt_spieler).f_name[1] = "Stupid";
	a_skills("init_skills", 133, g_akt_spieler).f_name[3] = "Estupido";
	a_skills("init_skills", 133, g_akt_spieler).f_nummer = 133;
	a_skills("init_skills", 133, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 133, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 133, g_akt_spieler).f_beschreibung_1[2] = "Gewinnt 3 mal keine Erfahrung";
	a_skills("init_skills", 133, g_akt_spieler).f_beschreibung_1[1] = "No experience gains for the first 3 levels";
	a_skills("init_skills", 133, g_akt_spieler).f_beschreibung_1[3] = "No se gana experiencia durante 3 veces";
	a_skills("init_skills", 133, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 133, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 133, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 134, g_akt_spieler).f_name[2] = "Ausgestossen";
	a_skills("init_skills", 134, g_akt_spieler).f_name[1] = "Outcast";
	a_skills("init_skills", 134, g_akt_spieler).f_name[3] = "Abandonado";
	a_skills("init_skills", 134, g_akt_spieler).f_nummer = 134;
	a_skills("init_skills", 134, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 134, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 134, g_akt_spieler).f_beschreibung_1[2] = "Alle H\344ndler und Lehrer fl\374chten vor dir";
	a_skills("init_skills", 134, g_akt_spieler).f_beschreibung_1[1] = "All merchants and trainers flee from you";
	a_skills("init_skills", 134, g_akt_spieler).f_beschreibung_1[3] = "Todos los comerciantes y profesores se escapan de ti";
	a_skills("init_skills", 134, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 134, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 134, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 135, g_akt_spieler).f_name[2] = "Disjunct";
	a_skills("init_skills", 135, g_akt_spieler).f_name[1] = "Disjunct";
	a_skills("init_skills", 135, g_akt_spieler).f_name[3] = "Antirecarga";
	a_skills("init_skills", 135, g_akt_spieler).f_nummer = 135;
	a_skills("init_skills", 135, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 135, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 135, g_akt_spieler).f_beschreibung_1[2] = "Dein Mana wird nicht am Nexus regeneriert";
	a_skills("init_skills", 135, g_akt_spieler).f_beschreibung_1[1] = "Your Mana does not replenish at the Nexus";
	a_skills("init_skills", 135, g_akt_spieler).f_beschreibung_1[3] = "Tu Mana no se recarga en el Nexo";
	a_skills("init_skills", 135, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 135, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 135, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 136, g_akt_spieler).f_name[2] = "Keine Basismagie";
	a_skills("init_skills", 136, g_akt_spieler).f_name[1] = "No Basic Magic";
	a_skills("init_skills", 136, g_akt_spieler).f_name[3] = "No Magia Basica";
	a_skills("init_skills", 136, g_akt_spieler).f_nummer = 136;
	a_skills("init_skills", 136, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 136, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 136, g_akt_spieler).f_beschreibung_1[2] = "Du kannst keine Basismagie lernen";
	a_skills("init_skills", 136, g_akt_spieler).f_beschreibung_1[1] = "You can't learn Basic Magic";
	a_skills("init_skills", 136, g_akt_spieler).f_beschreibung_1[3] = "No puedes aprender Magia Basica";
	a_skills("init_skills", 136, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 136, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 136, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 137, g_akt_spieler).f_name[2] = "Kurze Magie";
	a_skills("init_skills", 137, g_akt_spieler).f_name[1] = "Short Magic";
	a_skills("init_skills", 137, g_akt_spieler).f_name[3] = "Magia Corta";
	a_skills("init_skills", 137, g_akt_spieler).f_nummer = 137;
	a_skills("init_skills", 137, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 137, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 137, g_akt_spieler).f_beschreibung_1[2] = "Die Dauer deiner Spr\374che ist halbiert";
	a_skills("init_skills", 137, g_akt_spieler).f_beschreibung_1[1] = "The duration of your spells is halved";
	a_skills("init_skills", 137, g_akt_spieler).f_beschreibung_1[3] = "La duraci\363n de tus hechizos es la mitad";
	a_skills("init_skills", 137, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 137, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 137, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 138, g_akt_spieler).f_name[2] = "Lahm";
	a_skills("init_skills", 138, g_akt_spieler).f_name[1] = "Lame";
	a_skills("init_skills", 138, g_akt_spieler).f_name[3] = "Postrado";
	a_skills("init_skills", 138, g_akt_spieler).f_nummer = 138;
	a_skills("init_skills", 138, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 138, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 138, g_akt_spieler).f_beschreibung_1[2] = "Zugweite halbiert";
	a_skills("init_skills", 138, g_akt_spieler).f_beschreibung_1[1] = "Speed is halved";
	a_skills("init_skills", 138, g_akt_spieler).f_beschreibung_1[3] = "La velocidad se reduce a la mitad";
	a_skills("init_skills", 138, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 138, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 138, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 139, g_akt_spieler).f_name[2] = "Kein Angriff";
	a_skills("init_skills", 139, g_akt_spieler).f_name[1] = "No Attacking";
	a_skills("init_skills", 139, g_akt_spieler).f_name[3] = "No Ataque";
	a_skills("init_skills", 139, g_akt_spieler).f_nummer = 139;
	a_skills("init_skills", 139, g_akt_spieler).f_gruppe = 8;
	a_skills("init_skills", 139, g_akt_spieler).f_kosten = -2;
	a_skills("init_skills", 139, g_akt_spieler).f_beschreibung_1[2] = "Du kannst nie einen Gegner";
	a_skills("init_skills", 139, g_akt_spieler).f_beschreibung_1[1] = "You can never attack in close range combat";
	a_skills("init_skills", 139, g_akt_spieler).f_beschreibung_1[3] = "Nunca puedes atacar en";
	a_skills("init_skills", 139, g_akt_spieler).f_beschreibung_2[2] = "im Nahkampf angreifen";
	a_skills("init_skills", 139, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 139, g_akt_spieler).f_beschreibung_2[3] = "combate cuerpo a cuerpo";
	a_skills("init_skills", 140, g_akt_spieler).f_name[2] = "Sekund\344re Nachteile";
	a_skills("init_skills", 140, g_akt_spieler).f_name[1] = "Secondary Flaws";
	a_skills("init_skills", 140, g_akt_spieler).f_name[3] = "Defectos Secundarios";
	a_skills("init_skills", 140, g_akt_spieler).f_nummer = 0;
	a_skills("init_skills", 140, g_akt_spieler).f_kosten = 0;
	a_skills("init_skills", 140, g_akt_spieler).f_beschreibung_1[2] = "";
	a_skills("init_skills", 140, g_akt_spieler).f_beschreibung_1[1] = "";
	a_skills("init_skills", 140, g_akt_spieler).f_beschreibung_1[3] = "";
	a_skills("init_skills", 140, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 140, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 140, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 141, g_akt_spieler).f_name[2] = "Schwache Arme";
	a_skills("init_skills", 141, g_akt_spieler).f_name[1] = "Weak Arms";
	a_skills("init_skills", 141, g_akt_spieler).f_name[3] = "Brazos D\351biles";
	a_skills("init_skills", 141, g_akt_spieler).f_nummer = 141;
	a_skills("init_skills", 141, g_akt_spieler).f_gruppe = 9;
	a_skills("init_skills", 141, g_akt_spieler).f_kosten = -1;
	a_skills("init_skills", 141, g_akt_spieler).f_beschreibung_1[2] = "Du kannst keine Waffen f\374hren";
	a_skills("init_skills", 141, g_akt_spieler).f_beschreibung_1[1] = "You can't use weapons";
	a_skills("init_skills", 141, g_akt_spieler).f_beschreibung_1[3] = "No puedes usar armas";
	a_skills("init_skills", 141, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 141, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 141, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 142, g_akt_spieler).f_name[2] = "Schwache finger";
	a_skills("init_skills", 142, g_akt_spieler).f_name[1] = "Weak Fingers";
	a_skills("init_skills", 142, g_akt_spieler).f_name[3] = "Dedos D\351biles";
	a_skills("init_skills", 142, g_akt_spieler).f_nummer = 142;
	a_skills("init_skills", 142, g_akt_spieler).f_gruppe = 9;
	a_skills("init_skills", 142, g_akt_spieler).f_kosten = -1;
	a_skills("init_skills", 142, g_akt_spieler).f_beschreibung_1[2] = "Du kannst keine Bogen f\374hren";
	a_skills("init_skills", 142, g_akt_spieler).f_beschreibung_1[1] = "You can't use bows";
	a_skills("init_skills", 142, g_akt_spieler).f_beschreibung_1[3] = "No puedes usar arcos";
	a_skills("init_skills", 142, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 142, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 142, g_akt_spieler).f_beschreibung_2[3] = "";
	a_skills("init_skills", 143, g_akt_spieler).f_name[2] = "Verunstaltet";
	a_skills("init_skills", 143, g_akt_spieler).f_name[1] = "Disfigured";
	a_skills("init_skills", 143, g_akt_spieler).f_name[3] = "Desfigurado";
	a_skills("init_skills", 143, g_akt_spieler).f_nummer = 143;
	a_skills("init_skills", 143, g_akt_spieler).f_gruppe = 9;
	a_skills("init_skills", 143, g_akt_spieler).f_kosten = -1;
	a_skills("init_skills", 143, g_akt_spieler).f_beschreibung_1[2] = "Du kannst keine R\374stung anziehen";
	a_skills("init_skills", 143, g_akt_spieler).f_beschreibung_1[1] = "You can't use armor";
	a_skills("init_skills", 143, g_akt_spieler).f_beschreibung_1[3] = "No puedes usar armadura";
	a_skills("init_skills", 143, g_akt_spieler).f_beschreibung_2[2] = "";
	a_skills("init_skills", 143, g_akt_spieler).f_beschreibung_2[1] = "";
	a_skills("init_skills", 143, g_akt_spieler).f_beschreibung_2[3] = "";
	a_unmoeglich("init_skills", 1).f_name = 51;
	a_unmoeglich("init_skills", 1).f_locked = 131;
	a_unmoeglich("init_skills", 2).f_name = 131;
	a_unmoeglich("init_skills", 2).f_locked = 51;
	a_unmoeglich("init_skills", 3).f_name = 104;
	a_unmoeglich("init_skills", 3).f_locked = 131;
	a_unmoeglich("init_skills", 4).f_name = 131;
	a_unmoeglich("init_skills", 4).f_locked = 104;
	a_unmoeglich("init_skills", 5).f_name = 104;
	a_unmoeglich("init_skills", 5).f_locked = 130;
	a_unmoeglich("init_skills", 6).f_name = 130;
	a_unmoeglich("init_skills", 6).f_locked = 104;
	a_unmoeglich("init_skills", 7).f_name = 51;
	a_unmoeglich("init_skills", 7).f_locked = 130;
	a_unmoeglich("init_skills", 8).f_name = 130;
	a_unmoeglich("init_skills", 8).f_locked = 51;
	a_unmoeglich("init_skills", 9).f_name = 129;
	a_unmoeglich("init_skills", 9).f_locked = 42;
	a_unmoeglich("init_skills", 10).f_name = 42;
	a_unmoeglich("init_skills", 10).f_locked = 129;
	a_unmoeglich("init_skills", 11).f_name = 129;
	a_unmoeglich("init_skills", 11).f_locked = 59;
	a_unmoeglich("init_skills", 12).f_name = 59;
	a_unmoeglich("init_skills", 12).f_locked = 129;
	a_unmoeglich("init_skills", 13).f_name = 128;
	a_unmoeglich("init_skills", 13).f_locked = 86;
	a_unmoeglich("init_skills", 14).f_name = 86;
	a_unmoeglich("init_skills", 14).f_locked = 128;
	a_unmoeglich("init_skills", 15).f_name = 128;
	a_unmoeglich("init_skills", 15).f_locked = 51;
	a_unmoeglich("init_skills", 16).f_name = 51;
	a_unmoeglich("init_skills", 16).f_locked = 128;
	a_unmoeglich("init_skills", 17).f_name = 127;
	a_unmoeglich("init_skills", 17).f_locked = 39;
	a_unmoeglich("init_skills", 18).f_name = 39;
	a_unmoeglich("init_skills", 18).f_locked = 127;
	a_unmoeglich("init_skills", 19).f_name = 126;
	a_unmoeglich("init_skills", 19).f_locked = 70;
	a_unmoeglich("init_skills", 20).f_name = 70;
	a_unmoeglich("init_skills", 20).f_locked = 126;
	a_unmoeglich("init_skills", 21).f_name = 126;
	a_unmoeglich("init_skills", 21).f_locked = 69;
	a_unmoeglich("init_skills", 22).f_name = 69;
	a_unmoeglich("init_skills", 22).f_locked = 126;
	a_unmoeglich("init_skills", 23).f_name = 125;
	a_unmoeglich("init_skills", 23).f_locked = 90;
	a_unmoeglich("init_skills", 24).f_name = 90;
	a_unmoeglich("init_skills", 24).f_locked = 125;
	a_unmoeglich("init_skills", 25).f_name = 125;
	a_unmoeglich("init_skills", 25).f_locked = 89;
	a_unmoeglich("init_skills", 26).f_name = 89;
	a_unmoeglich("init_skills", 26).f_locked = 125;
	a_unmoeglich("init_skills", 27).f_name = 125;
	a_unmoeglich("init_skills", 27).f_locked = 9;
	a_unmoeglich("init_skills", 28).f_name = 9;
	a_unmoeglich("init_skills", 28).f_locked = 125;
	a_unmoeglich("init_skills", 29).f_name = 124;
	a_unmoeglich("init_skills", 29).f_locked = 3;
	a_unmoeglich("init_skills", 30).f_name = 3;
	a_unmoeglich("init_skills", 30).f_locked = 124;
	a_unmoeglich("init_skills", 31).f_name = 124;
	a_unmoeglich("init_skills", 31).f_locked = 2;
	a_unmoeglich("init_skills", 32).f_name = 2;
	a_unmoeglich("init_skills", 32).f_locked = 124;
	a_unmoeglich("init_skills", 33).f_name = 124;
	a_unmoeglich("init_skills", 33).f_locked = 8;
	a_unmoeglich("init_skills", 34).f_name = 8;
	a_unmoeglich("init_skills", 34).f_locked = 124;
	a_unmoeglich("init_skills", 35).f_name = 124;
	a_unmoeglich("init_skills", 35).f_locked = 4;
	a_unmoeglich("init_skills", 36).f_name = 4;
	a_unmoeglich("init_skills", 36).f_locked = 124;
	a_unmoeglich("init_skills", 37).f_name = 132;
	a_unmoeglich("init_skills", 37).f_locked = 70;
	a_unmoeglich("init_skills", 38).f_name = 70;
	a_unmoeglich("init_skills", 38).f_locked = 132;
	a_unmoeglich("init_skills", 39).f_name = 132;
	a_unmoeglich("init_skills", 39).f_locked = 71;
	a_unmoeglich("init_skills", 40).f_name = 71;
	a_unmoeglich("init_skills", 40).f_locked = 132;
	a_unmoeglich("init_skills", 41).f_name = 132;
	a_unmoeglich("init_skills", 41).f_locked = 48;
	a_unmoeglich("init_skills", 42).f_name = 48;
	a_unmoeglich("init_skills", 42).f_locked = 132;
	a_unmoeglich("init_skills", 43).f_name = 133;
	a_unmoeglich("init_skills", 43).f_locked = 92;
	a_unmoeglich("init_skills", 44).f_name = 92;
	a_unmoeglich("init_skills", 44).f_locked = 133;
	a_unmoeglich("init_skills", 45).f_name = 52;
	a_unmoeglich("init_skills", 45).f_locked = 51;
	a_unmoeglich("init_skills", 46).f_name = 51;
	a_unmoeglich("init_skills", 46).f_locked = 52;
	a_unmoeglich("init_skills", 47).f_name = 134;
	a_unmoeglich("init_skills", 47).f_locked = 116;
	a_unmoeglich("init_skills", 48).f_name = 116;
	a_unmoeglich("init_skills", 48).f_locked = 134;
	a_unmoeglich("init_skills", 49).f_name = 135;
	a_unmoeglich("init_skills", 49).f_locked = 36;
	a_unmoeglich("init_skills", 50).f_name = 36;
	a_unmoeglich("init_skills", 50).f_locked = 135;
	a_unmoeglich("init_skills", 51).f_name = 126;
	a_unmoeglich("init_skills", 51).f_locked = 77;
	a_unmoeglich("init_skills", 52).f_name = 77;
	a_unmoeglich("init_skills", 52).f_locked = 126;
	a_unmoeglich("init_skills", 53).f_name = 131;
	a_unmoeglich("init_skills", 53).f_locked = 105;
	a_unmoeglich("init_skills", 54).f_name = 105;
	a_unmoeglich("init_skills", 54).f_locked = 131;
	a_unmoeglich("init_skills", 55).f_name = 131;
	a_unmoeglich("init_skills", 55).f_locked = 106;
	a_unmoeglich("init_skills", 56).f_name = 106;
	a_unmoeglich("init_skills", 56).f_locked = 131;
	a_unmoeglich("init_skills", 57).f_name = 131;
	a_unmoeglich("init_skills", 57).f_locked = 107;
	a_unmoeglich("init_skills", 58).f_name = 107;
	a_unmoeglich("init_skills", 58).f_locked = 131;
	a_unmoeglich("init_skills", 59).f_name = 131;
	a_unmoeglich("init_skills", 59).f_locked = 108;
	a_unmoeglich("init_skills", 60).f_name = 108;
	a_unmoeglich("init_skills", 60).f_locked = 131;
	a_unmoeglich("init_skills", 61).f_name = 131;
	a_unmoeglich("init_skills", 61).f_locked = 109;
	a_unmoeglich("init_skills", 62).f_name = 109;
	a_unmoeglich("init_skills", 62).f_locked = 131;
	a_unmoeglich("init_skills", 63).f_name = 131;
	a_unmoeglich("init_skills", 63).f_locked = 110;
	a_unmoeglich("init_skills", 64).f_name = 110;
	a_unmoeglich("init_skills", 64).f_locked = 131;
	a_unmoeglich("init_skills", 65).f_name = 137;
	a_unmoeglich("init_skills", 65).f_locked = 61;
	a_unmoeglich("init_skills", 66).f_name = 61;
	a_unmoeglich("init_skills", 66).f_locked = 137;
	a_unmoeglich("init_skills", 67).f_name = 105;
	a_unmoeglich("init_skills", 67).f_locked = 106;
	a_unmoeglich("init_skills", 68).f_name = 106;
	a_unmoeglich("init_skills", 68).f_locked = 105;
	a_unmoeglich("init_skills", 69).f_name = 105;
	a_unmoeglich("init_skills", 69).f_locked = 108;
	a_unmoeglich("init_skills", 70).f_name = 108;
	a_unmoeglich("init_skills", 70).f_locked = 105;
	a_unmoeglich("init_skills", 71).f_name = 105;
	a_unmoeglich("init_skills", 71).f_locked = 107;
	a_unmoeglich("init_skills", 72).f_name = 107;
	a_unmoeglich("init_skills", 72).f_locked = 105;
	a_unmoeglich("init_skills", 73).f_name = 105;
	a_unmoeglich("init_skills", 73).f_locked = 109;
	a_unmoeglich("init_skills", 74).f_name = 109;
	a_unmoeglich("init_skills", 74).f_locked = 105;
	a_unmoeglich("init_skills", 75).f_name = 105;
	a_unmoeglich("init_skills", 75).f_locked = 110;
	a_unmoeglich("init_skills", 76).f_name = 110;
	a_unmoeglich("init_skills", 76).f_locked = 105;
	a_unmoeglich("init_skills", 77).f_name = 106;
	a_unmoeglich("init_skills", 77).f_locked = 107;
	a_unmoeglich("init_skills", 78).f_name = 107;
	a_unmoeglich("init_skills", 78).f_locked = 106;
	a_unmoeglich("init_skills", 79).f_name = 106;
	a_unmoeglich("init_skills", 79).f_locked = 108;
	a_unmoeglich("init_skills", 80).f_name = 108;
	a_unmoeglich("init_skills", 80).f_locked = 106;
	a_unmoeglich("init_skills", 81).f_name = 106;
	a_unmoeglich("init_skills", 81).f_locked = 109;
	a_unmoeglich("init_skills", 82).f_name = 109;
	a_unmoeglich("init_skills", 82).f_locked = 106;
	a_unmoeglich("init_skills", 83).f_name = 106;
	a_unmoeglich("init_skills", 83).f_locked = 110;
	a_unmoeglich("init_skills", 84).f_name = 110;
	a_unmoeglich("init_skills", 84).f_locked = 106;
	a_unmoeglich("init_skills", 85).f_name = 108;
	a_unmoeglich("init_skills", 85).f_locked = 107;
	a_unmoeglich("init_skills", 86).f_name = 107;
	a_unmoeglich("init_skills", 86).f_locked = 108;
	a_unmoeglich("init_skills", 87).f_name = 108;
	a_unmoeglich("init_skills", 87).f_locked = 109;
	a_unmoeglich("init_skills", 88).f_name = 109;
	a_unmoeglich("init_skills", 88).f_locked = 108;
	a_unmoeglich("init_skills", 89).f_name = 108;
	a_unmoeglich("init_skills", 89).f_locked = 110;
	a_unmoeglich("init_skills", 90).f_name = 110;
	a_unmoeglich("init_skills", 90).f_locked = 108;
	a_unmoeglich("init_skills", 91).f_name = 107;
	a_unmoeglich("init_skills", 91).f_locked = 109;
	a_unmoeglich("init_skills", 92).f_name = 109;
	a_unmoeglich("init_skills", 92).f_locked = 107;
	a_unmoeglich("init_skills", 93).f_name = 107;
	a_unmoeglich("init_skills", 93).f_locked = 110;
	a_unmoeglich("init_skills", 94).f_name = 110;
	a_unmoeglich("init_skills", 94).f_locked = 107;
	a_unmoeglich("init_skills", 95).f_name = 109;
	a_unmoeglich("init_skills", 95).f_locked = 110;
	a_unmoeglich("init_skills", 96).f_name = 110;
	a_unmoeglich("init_skills", 96).f_locked = 109;
	a_unmoeglich("init_skills", 97).f_name = 62;
	a_unmoeglich("init_skills", 97).f_locked = 55;
	a_unmoeglich("init_skills", 98).f_name = 55;
	a_unmoeglich("init_skills", 98).f_locked = 62;
	a_unmoeglich("init_skills", 99).f_name = 62;
	a_unmoeglich("init_skills", 99).f_locked = 53;
	a_unmoeglich("init_skills", 100).f_name = 53;
	a_unmoeglich("init_skills", 100).f_locked = 62;
	a_unmoeglich("init_skills", 101).f_name = 62;
	a_unmoeglich("init_skills", 101).f_locked = 54;
	a_unmoeglich("init_skills", 102).f_name = 54;
	a_unmoeglich("init_skills", 102).f_locked = 62;
	a_unmoeglich("init_skills", 103).f_name = 62;
	a_unmoeglich("init_skills", 103).f_locked = 56;
	a_unmoeglich("init_skills", 104).f_name = 56;
	a_unmoeglich("init_skills", 104).f_locked = 62;
	a_unmoeglich("init_skills", 105).f_name = 96;
	a_unmoeglich("init_skills", 105).f_locked = 134;
	a_unmoeglich("init_skills", 106).f_name = 134;
	a_unmoeglich("init_skills", 106).f_locked = 96;
	a_unmoeglich("init_skills", 107).f_name = 42;
	a_unmoeglich("init_skills", 107).f_locked = 130;
	a_unmoeglich("init_skills", 108).f_name = 130;
	a_unmoeglich("init_skills", 108).f_locked = 42;
	a_unmoeglich("init_skills", 109).f_name = 13;
	a_unmoeglich("init_skills", 109).f_locked = 14;
	a_unmoeglich("init_skills", 110).f_name = 14;
	a_unmoeglich("init_skills", 110).f_locked = 13;
	a_unmoeglich("init_skills", 111).f_name = 13;
	a_unmoeglich("init_skills", 111).f_locked = 16;
	a_unmoeglich("init_skills", 112).f_name = 16;
	a_unmoeglich("init_skills", 112).f_locked = 13;
	a_unmoeglich("init_skills", 113).f_name = 13;
	a_unmoeglich("init_skills", 113).f_locked = 15;
	a_unmoeglich("init_skills", 114).f_name = 15;
	a_unmoeglich("init_skills", 114).f_locked = 13;
	a_unmoeglich("init_skills", 115).f_name = 14;
	a_unmoeglich("init_skills", 115).f_locked = 16;
	a_unmoeglich("init_skills", 116).f_name = 16;
	a_unmoeglich("init_skills", 116).f_locked = 14;
	a_unmoeglich("init_skills", 117).f_name = 14;
	a_unmoeglich("init_skills", 117).f_locked = 15;
	a_unmoeglich("init_skills", 118).f_name = 15;
	a_unmoeglich("init_skills", 118).f_locked = 14;
	a_unmoeglich("init_skills", 119).f_name = 16;
	a_unmoeglich("init_skills", 119).f_locked = 15;
	a_unmoeglich("init_skills", 120).f_name = 15;
	a_unmoeglich("init_skills", 120).f_locked = 16;
	a_unmoeglich("init_skills", 121).f_name = 26;
	a_unmoeglich("init_skills", 121).f_locked = 78;
	a_unmoeglich("init_skills", 122).f_name = 78;
	a_unmoeglich("init_skills", 122).f_locked = 26;
	a_unmoeglich("init_skills", 123).f_name = 26;
	a_unmoeglich("init_skills", 123).f_locked = 63;
	a_unmoeglich("init_skills", 124).f_name = 63;
	a_unmoeglich("init_skills", 124).f_locked = 26;
	a_unmoeglich("init_skills", 125).f_name = 26;
	a_unmoeglich("init_skills", 125).f_locked = 134;
	a_unmoeglich("init_skills", 126).f_name = 134;
	a_unmoeglich("init_skills", 126).f_locked = 26;
	a_unmoeglich("init_skills", 127).f_name = 78;
	a_unmoeglich("init_skills", 127).f_locked = 63;
	a_unmoeglich("init_skills", 128).f_name = 63;
	a_unmoeglich("init_skills", 128).f_locked = 78;
	a_unmoeglich("init_skills", 129).f_name = 78;
	a_unmoeglich("init_skills", 129).f_locked = 134;
	a_unmoeglich("init_skills", 130).f_name = 134;
	a_unmoeglich("init_skills", 130).f_locked = 78;
	a_unmoeglich("init_skills", 131).f_name = 63;
	a_unmoeglich("init_skills", 131).f_locked = 134;
	a_unmoeglich("init_skills", 132).f_name = 134;
	a_unmoeglich("init_skills", 132).f_locked = 63;
	a_unmoeglich("init_skills", 133).f_name = 78;
	a_unmoeglich("init_skills", 133).f_locked = 138;
	a_unmoeglich("init_skills", 134).f_name = 138;
	a_unmoeglich("init_skills", 134).f_locked = 78;
	a_unmoeglich("init_skills", 135).f_name = 56;
	a_unmoeglich("init_skills", 135).f_locked = 138;
	a_unmoeglich("init_skills", 136).f_name = 138;
	a_unmoeglich("init_skills", 136).f_locked = 56;
	a_unmoeglich("init_skills", 137).f_name = 72;
	a_unmoeglich("init_skills", 137).f_locked = 138;
	a_unmoeglich("init_skills", 138).f_name = 138;
	a_unmoeglich("init_skills", 138).f_locked = 72;
	a_unmoeglich("init_skills", 139).f_name = 97;
	a_unmoeglich("init_skills", 139).f_locked = 126;
	a_unmoeglich("init_skills", 140).f_name = 126;
	a_unmoeglich("init_skills", 140).f_locked = 97;
	a_unmoeglich("init_skills", 141).f_name = 97;
	a_unmoeglich("init_skills", 141).f_locked = 132;
	a_unmoeglich("init_skills", 142).f_name = 132;
	a_unmoeglich("init_skills", 142).f_locked = 97;
	a_unmoeglich("init_skills", 143).f_name = 17;
	a_unmoeglich("init_skills", 143).f_locked = 124;
	a_unmoeglich("init_skills", 144).f_name = 124;
	a_unmoeglich("init_skills", 144).f_locked = 17;
	a_unmoeglich("init_skills", 145).f_name = 136;
	a_unmoeglich("init_skills", 145).f_locked = 137;
	a_unmoeglich("init_skills", 146).f_name = 137;
	a_unmoeglich("init_skills", 146).f_locked = 136;
	a_unmoeglich("init_skills", 147).f_name = 119;
	a_unmoeglich("init_skills", 147).f_locked = 124;
	a_unmoeglich("init_skills", 148).f_name = 124;
	a_unmoeglich("init_skills", 148).f_locked = 119;
	a_unmoeglich("init_skills", 149).f_name = 137;
	a_unmoeglich("init_skills", 149).f_locked = 99;
	a_unmoeglich("init_skills", 150).f_name = 99;
	a_unmoeglich("init_skills", 150).f_locked = 137;
	a_unmoeglich("init_skills", 151).f_name = 137;
	a_unmoeglich("init_skills", 151).f_locked = 42;
	a_unmoeglich("init_skills", 152).f_name = 42;
	a_unmoeglich("init_skills", 152).f_locked = 137;
	a_unmoeglich("init_skills", 153).f_name = 65;
	a_unmoeglich("init_skills", 153).f_locked = 136;
	a_unmoeglich("init_skills", 154).f_name = 136;
	a_unmoeglich("init_skills", 154).f_locked = 65;
	a_unmoeglich("init_skills", 155).f_name = 72;
	a_unmoeglich("init_skills", 155).f_locked = 78;
	a_unmoeglich("init_skills", 156).f_name = 78;
	a_unmoeglich("init_skills", 156).f_locked = 72;
	a_unmoeglich("init_skills", 157).f_name = 4;
	a_unmoeglich("init_skills", 157).f_locked = 139;
	a_unmoeglich("init_skills", 158).f_name = 139;
	a_unmoeglich("init_skills", 158).f_locked = 4;
	a_unmoeglich("init_skills", 159).f_name = 11;
	a_unmoeglich("init_skills", 159).f_locked = 139;
	a_unmoeglich("init_skills", 160).f_name = 139;
	a_unmoeglich("init_skills", 160).f_locked = 11;
	a_unmoeglich("init_skills", 161).f_name = 17;
	a_unmoeglich("init_skills", 161).f_locked = 139;
	a_unmoeglich("init_skills", 162).f_name = 139;
	a_unmoeglich("init_skills", 162).f_locked = 17;
	a_unmoeglich("init_skills", 163).f_name = 18;
	a_unmoeglich("init_skills", 163).f_locked = 139;
	a_unmoeglich("init_skills", 164).f_name = 139;
	a_unmoeglich("init_skills", 164).f_locked = 18;
	a_unmoeglich("init_skills", 165).f_name = 19;
	a_unmoeglich("init_skills", 165).f_locked = 139;
	a_unmoeglich("init_skills", 166).f_name = 139;
	a_unmoeglich("init_skills", 166).f_locked = 19;
	a_unmoeglich("init_skills", 167).f_name = 20;
	a_unmoeglich("init_skills", 167).f_locked = 139;
	a_unmoeglich("init_skills", 168).f_name = 139;
	a_unmoeglich("init_skills", 168).f_locked = 20;
	a_unmoeglich("init_skills", 169).f_name = 21;
	a_unmoeglich("init_skills", 169).f_locked = 139;
	a_unmoeglich("init_skills", 170).f_name = 139;
	a_unmoeglich("init_skills", 170).f_locked = 21;
	a_unmoeglich("init_skills", 171).f_name = 22;
	a_unmoeglich("init_skills", 171).f_locked = 139;
	a_unmoeglich("init_skills", 172).f_name = 139;
	a_unmoeglich("init_skills", 172).f_locked = 22;
	a_unmoeglich("init_skills", 173).f_name = 23;
	a_unmoeglich("init_skills", 173).f_locked = 139;
	a_unmoeglich("init_skills", 174).f_name = 139;
	a_unmoeglich("init_skills", 174).f_locked = 23;
	a_unmoeglich("init_skills", 175).f_name = 24;
	a_unmoeglich("init_skills", 175).f_locked = 139;
	a_unmoeglich("init_skills", 176).f_name = 139;
	a_unmoeglich("init_skills", 176).f_locked = 24;
	a_unmoeglich("init_skills", 177).f_name = 25;
	a_unmoeglich("init_skills", 177).f_locked = 139;
	a_unmoeglich("init_skills", 178).f_name = 139;
	a_unmoeglich("init_skills", 178).f_locked = 25;
	a_unmoeglich("init_skills", 179).f_name = 21;
	a_unmoeglich("init_skills", 179).f_locked = 141;
	a_unmoeglich("init_skills", 180).f_name = 141;
	a_unmoeglich("init_skills", 180).f_locked = 21;
	a_unmoeglich("init_skills", 181).f_name = 22;
	a_unmoeglich("init_skills", 181).f_locked = 141;
	a_unmoeglich("init_skills", 182).f_name = 141;
	a_unmoeglich("init_skills", 182).f_locked = 22;
	a_unmoeglich("init_skills", 183).f_name = 23;
	a_unmoeglich("init_skills", 183).f_locked = 141;
	a_unmoeglich("init_skills", 184).f_name = 141;
	a_unmoeglich("init_skills", 184).f_locked = 23;
	a_unmoeglich("init_skills", 185).f_name = 24;
	a_unmoeglich("init_skills", 185).f_locked = 141;
	a_unmoeglich("init_skills", 186).f_name = 141;
	a_unmoeglich("init_skills", 186).f_locked = 24;
	a_unmoeglich("init_skills", 187).f_name = 83;
	a_unmoeglich("init_skills", 187).f_locked = 82;
	a_unmoeglich("init_skills", 188).f_name = 82;
	a_unmoeglich("init_skills", 188).f_locked = 83;
	a_unmoeglich("init_skills", 189).f_name = 0;
	a_unmoeglich("init_skills", 189).f_locked = 0;
	a_unmoeglich("init_skills", 190).f_name = 0;
	a_unmoeglich("init_skills", 190).f_locked = 0;
	a_unmoeglich("init_skills", 191).f_name = 0;
	a_unmoeglich("init_skills", 191).f_locked = 0;
	a_unmoeglich("init_skills", 192).f_name = 0;
	a_unmoeglich("init_skills", 192).f_locked = 0;
	a_unmoeglich("init_skills", 193).f_name = 0;
	a_unmoeglich("init_skills", 193).f_locked = 0;
	a_unmoeglich("init_skills", 194).f_name = 0;
	a_unmoeglich("init_skills", 194).f_locked = 0;
	a_unmoeglich("init_skills", 195).f_name = 91;
	a_unmoeglich("init_skills", 195).f_locked = 133;
	a_unmoeglich("init_skills", 196).f_name = 133;
	a_unmoeglich("init_skills", 196).f_locked = 91;
	a_unmoeglich("init_skills", 197).f_name = 138;
	a_unmoeglich("init_skills", 197).f_locked = 72;
	a_unmoeglich("init_skills", 198).f_name = 72;
	a_unmoeglich("init_skills", 198).f_locked = 138;
	a_unmoeglich("init_skills", 199).f_name = 138;
	a_unmoeglich("init_skills", 199).f_locked = 78;
	a_unmoeglich("init_skills", 200).f_name = 78;
	a_unmoeglich("init_skills", 200).f_locked = 138;
	a_unmoeglich("init_skills", 201).f_name = 79;
	a_unmoeglich("init_skills", 201).f_locked = 126;
	a_unmoeglich("init_skills", 202).f_name = 126;
	a_unmoeglich("init_skills", 202).f_locked = 79;
	a_unmoeglich("init_skills", 203).f_name = 37;
	a_unmoeglich("init_skills", 203).f_locked = 120;
	a_unmoeglich("init_skills", 204).f_name = 120;
	a_unmoeglich("init_skills", 204).f_locked = 37;
	a_unmoeglich("init_skills", 205).f_name = 139;
	a_unmoeglich("init_skills", 205).f_locked = 141;
	a_unmoeglich("init_skills", 206).f_name = 141;
	a_unmoeglich("init_skills", 206).f_locked = 139;
	a_unmoeglich("init_skills", 207).f_name = 121;
	a_unmoeglich("init_skills", 207).f_locked = 141;
	a_unmoeglich("init_skills", 208).f_name = 141;
	a_unmoeglich("init_skills", 208).f_locked = 121;
	a_unmoeglich("init_skills", 209).f_name = 102;
	a_unmoeglich("init_skills", 209).f_locked = 126;
	a_unmoeglich("init_skills", 210).f_name = 126;
	a_unmoeglich("init_skills", 210).f_locked = 102;
	a_unmoeglich("init_skills", 211).f_name = 102;
	a_unmoeglich("init_skills", 211).f_locked = 132;
	a_unmoeglich("init_skills", 212).f_name = 132;
	a_unmoeglich("init_skills", 212).f_locked = 102;
	a_unmoeglich("init_skills", 213).f_name = 126;
	a_unmoeglich("init_skills", 213).f_locked = 43;
	a_unmoeglich("init_skills", 214).f_name = 43;
	a_unmoeglich("init_skills", 214).f_locked = 126;
	a_unmoeglich("init_skills", 215).f_name = 7;
	a_unmoeglich("init_skills", 215).f_locked = 143;
	a_unmoeglich("init_skills", 216).f_name = 143;
	a_unmoeglich("init_skills", 216).f_locked = 7;
}

static intptr_t p_insert_light(int16_t v_radius) {
	intptr_t v_i = 0;
	intptr_t v_k = 0;
	intptr_t v_x = 0;
	int16_t v_x_offs = 0;
	intptr_t v_y = 0;
	int16_t v_y_offs = 0;
	a_matrix("insert_light", 7, 7) = 1;
	for (v_i = 1; v_i <= (v_radius + 1); v_i += 1) {
		for (v_x = p_max((7 - v_radius), 0); v_x <= p_min((7 + v_radius), 13); v_x += 1) {
			for (v_y = p_max((7 - v_radius), 0); v_y <= p_min((7 + v_radius), 13); v_y += 1) {
				if (a_matrix("insert_light", v_x, v_y) == 9998) {
					for (v_k = 1; v_k <= 4; v_k += 1) {
						v_x_offs = p_neighbour_offset(v_k, 0);
						v_y_offs = p_neighbour_offset(v_k, 1);
						if ((v_x + v_x_offs) > 0 && (v_x + v_x_offs) <= 13 && (v_y + v_y_offs) > 0 && (v_y + v_y_offs) <= 13) {
							if (a_matrix("insert_light", v_x, v_y) > (a_matrix("insert_light", (v_x + v_x_offs), (v_y + v_y_offs)) + 1)) {
								a_matrix("insert_light", v_x, v_y) = (a_matrix("insert_light", (v_x + v_x_offs), (v_y + v_y_offs)) + 1);
							}
						}
					}
				}
			}
		}
	}
}

static intptr_t p_insert_light2(int16_t v_radius) {
	intptr_t v_k = 0;
	intptr_t v_x = 0;
	int16_t v_x_offs = 0;
	intptr_t v_y = 0;
	int16_t v_y_offs = 0;
	for (v_x = 1; v_x <= 13; v_x += 1) {
		for (v_y = 1; v_y <= 13; v_y += 1) {
			a_matrix2("insert_light2", v_x, v_y) = 0;
		}
	}
	for (v_x = 1; v_x <= 13; v_x += 1) {
		for (v_y = 1; v_y <= 13; v_y += 1) {
			for (v_k = 1; v_k <= 8; v_k += 1) {
				v_x_offs = p_neighbour_offset(v_k, 0);
				v_y_offs = p_neighbour_offset(v_k, 1);
				if ((v_x + v_x_offs) > 0 && (v_x + v_x_offs) <= 13 && (v_y + v_y_offs) > 0 && (v_y + v_y_offs) <= 13) {
					if (a_matrix("insert_light2", (v_x + v_x_offs), (v_y + v_y_offs)) <= v_radius) {
						a_matrix2("insert_light2", v_x, v_y) = 1;
					}
				}
			}
		}
	}
	for (v_x = 1; v_x <= 13; v_x += 1) {
		for (v_y = 1; v_y <= 13; v_y += 1) {
			if (a_matrix2("insert_light2", v_x, v_y) == 1) {
				a_matrix("insert_light2", v_x, v_y) = v_radius;
			}
		}
	}
}

static intptr_t p_isinclosedlist(int16_t v_x, int16_t v_y) {
	p_resetlist(ll_closedlist);
	while (p_nextelement(ll_closedlist)) {
		if (LIST_CURRENT(ll_closedlist,struct st_knot).f_x == v_x && LIST_CURRENT(ll_closedlist,struct st_knot).f_y == v_y) {
			return 1;
		}
	}
	return 0;
}

static intptr_t p_isinopenlist(int16_t v_x, int16_t v_y) {
	p_resetlist(ll_openlist);
	while (p_nextelement(ll_openlist)) {
		if (LIST_CURRENT(ll_openlist,struct st_knot).f_x == v_x && LIST_CURRENT(ll_openlist,struct st_knot).f_y == v_y) {
			return 1;
		}
	}
	return 0;
}

static std::string p_keyboard_string(std::string v_text, int8_t v_typ) {
	static int8_t v_counter;
	std::string v_key;
	intptr_t v_keychoice = 0;
	std::string v_letter;
	std::string v_neu_letter;
	static std::string v_oldkey;
	std::string v_tkey;
	static int32_t v_wait;
	p_examinekeyboard();
	if (!v_typ) {
		if (p_keyboardpushed(97)) {
			v_key = "A";
		}
		if (p_keyboardpushed(98)) {
			v_key = "B";
		}
		if (p_keyboardpushed(99)) {
			v_key = "C";
		}
		if (p_keyboardpushed(100)) {
			v_key = "D";
		}
		if (p_keyboardpushed(101)) {
			v_key = "E";
		}
		if (p_keyboardpushed(102)) {
			v_key = "F";
		}
		if (p_keyboardpushed(103)) {
			v_key = "G";
		}
		if (p_keyboardpushed(104)) {
			v_key = "H";
		}
		if (p_keyboardpushed(105)) {
			v_key = "I";
		}
		if (p_keyboardpushed(106)) {
			v_key = "J";
		}
		if (p_keyboardpushed(107)) {
			v_key = "K";
		}
		if (p_keyboardpushed(108)) {
			v_key = "L";
		}
		if (p_keyboardpushed(109)) {
			v_key = "M";
		}
		if (p_keyboardpushed(110)) {
			v_key = "N";
		}
		if (p_keyboardpushed(111)) {
			v_key = "O";
		}
		if (p_keyboardpushed(112)) {
			v_key = "P";
		}
		if (p_keyboardpushed(113)) {
			v_key = "Q";
		}
		if (p_keyboardpushed(114)) {
			v_key = "R";
		}
		if (p_keyboardpushed(115)) {
			v_key = "S";
		}
		if (p_keyboardpushed(116)) {
			v_key = "T";
		}
		if (p_keyboardpushed(117)) {
			v_key = "U";
		}
		if (p_keyboardpushed(118)) {
			v_key = "V";
		}
		if (p_keyboardpushed(119)) {
			v_key = "W";
		}
		if (p_keyboardpushed(120)) {
			v_key = "X";
		}
		if (p_keyboardpushed(121)) {
			v_key = "Y";
		}
		if (p_keyboardpushed(122)) {
			v_key = "Z";
		}
		if (p_keyboardpushed(45)) {
			v_key = "-";
		}
	}
	if (p_keyboardpushed(49)) {
		v_key = "1";
	}
	if (p_keyboardpushed(50)) {
		v_key = "2";
	}
	if (p_keyboardpushed(51)) {
		v_key = "3";
	}
	if (p_keyboardpushed(52)) {
		v_key = "4";
	}
	if (p_keyboardpushed(53)) {
		v_key = "5";
	}
	if (p_keyboardpushed(54)) {
		v_key = "6";
	}
	if (p_keyboardpushed(55)) {
		v_key = "7";
	}
	if (p_keyboardpushed(56)) {
		v_key = "8";
	}
	if (p_keyboardpushed(57)) {
		v_key = "9";
	}
	if (p_keyboardpushed(48)) {
		v_key = "0";
	}
	v_key = p_lcase(v_key);
	if (!v_typ) {
		if (p_keyboardpushed(301) || p_keyboardpushed(303) || p_keyboardpushed(304)) {
			v_key = p_ucase(v_key);
		}
		if (p_keyboardpushed(32)) {
			v_key = "_";
		}
	}
	if (p_keyboardpushed(127)) {
		v_key = "DEL";
	}
	if (p_keyboardpushed(8)) {
		v_key = "BACK";
	}
	v_tkey = v_key;
	v_keychoice = 1;
	if (!v_wait) {
		if (v_key == "") {
			v_counter = 0;
			v_keychoice = 0;
		} else {
			if (!v_counter && v_oldkey == v_key && v_key != "") {
				v_wait = g_keydelay;
				v_key = "";
				v_counter = 1;
			} else {
				if (v_counter == 1 && v_oldkey == v_key && v_key != "") {
					v_wait = g_keydelay2;
				}
			}
		}
	} else {
		p_delay(10);
		v_wait -= 1;
		if (v_oldkey != v_key) {
			v_wait = 0;
			v_counter = 0;
		}
		if (v_oldkey == v_key) {
			v_key = "";
		}
	}
	v_oldkey = v_tkey;
	if (v_key == "DEL" || v_key == "BACK") {
		v_text = p_mid(v_text, 1, (p_len(v_text) - 1));
	} else {
		v_text = v_text + v_key;
	}
	if (v_typ > 0) {
		while (p_mid(v_text, 1, 1) == "0" || p_mid(v_text, 1, 1) == "0") {
			v_text = p_mid(v_text, 2, p_len(v_text));
		}
		if (!p_len(v_text) && v_typ > 0) {
			v_text = "0";
		}
	}
	if (v_typ > 0) {
		if (g_joystick_used == 1) {
			p_read_joystick();
			if (!p_len(v_text) && v_typ <= 0) {
				v_text = "A";
			}
			v_letter = p_mid(v_text, p_len(v_text), 1);
			v_neu_letter = "";
			if ((g_jay == -1 || p_keyboardpushed(273)) && !v_wait) {
				v_text = p_mid(v_text, 1, (p_len(v_text) - 1));
				v_letter = p_ucase(v_letter);
				if (v_typ <= 0) {
					{
						std::string selector = v_letter;
						if (selector == "A") {
							v_neu_letter = "B";
						} else if (selector == "B") {
							v_neu_letter = "C";
						} else if (selector == "C") {
							v_neu_letter = "D";
						} else if (selector == "D") {
							v_neu_letter = "E";
						} else if (selector == "E") {
							v_neu_letter = "F";
						} else if (selector == "F") {
							v_neu_letter = "G";
						} else if (selector == "G") {
							v_neu_letter = "H";
						} else if (selector == "H") {
							v_neu_letter = "I";
						} else if (selector == "I") {
							v_neu_letter = "J";
						} else if (selector == "J") {
							v_neu_letter = "K";
						} else if (selector == "K") {
							v_neu_letter = "L";
						} else if (selector == "L") {
							v_neu_letter = "M";
						} else if (selector == "M") {
							v_neu_letter = "N";
						} else if (selector == "N") {
							v_neu_letter = "O";
						} else if (selector == "O") {
							v_neu_letter = "P";
						} else if (selector == "P") {
							v_neu_letter = "Q";
						} else if (selector == "Q") {
							v_neu_letter = "R";
						} else if (selector == "R") {
							v_neu_letter = "S";
						} else if (selector == "S") {
							v_neu_letter = "T";
						} else if (selector == "T") {
							v_neu_letter = "U";
						} else if (selector == "U") {
							v_neu_letter = "V";
						} else if (selector == "V") {
							v_neu_letter = "W";
						} else if (selector == "W") {
							v_neu_letter = "X";
						} else if (selector == "X") {
							v_neu_letter = "Y";
						} else if (selector == "Y") {
							v_neu_letter = "Z";
						} else if (selector == "Z") {
							v_neu_letter = "A";
						} else {}
					}
					if (a_jb("keyboard_string", 2) == 1) {
						v_letter = p_lcase(v_letter);
					}
				}
				if (v_typ > 0 || a_jb("keyboard_string", 3) == 1) {
					{
						std::string selector = v_letter;
						if (selector == "1") {
							v_neu_letter = "2";
						} else if (selector == "2") {
							v_neu_letter = "3";
						} else if (selector == "3") {
							v_neu_letter = "4";
						} else if (selector == "4") {
							v_neu_letter = "5";
						} else if (selector == "5") {
							v_neu_letter = "6";
						} else if (selector == "6") {
							v_neu_letter = "7";
						} else if (selector == "7") {
							v_neu_letter = "8";
						} else if (selector == "8") {
							v_neu_letter = "9";
						} else if (selector == "9") {
							v_neu_letter = "0";
						} else if (selector == "0") {
							v_neu_letter = "1";
						} else {}
					}
				}
				v_text = v_text + v_neu_letter;
			}
			if ((g_jay == 1 || p_keyboardpushed(274)) && !v_wait) {
				v_text = p_mid(v_text, 1, (p_len(v_text) - 1));
				v_letter = p_ucase(v_letter);
				if (v_typ <= 0) {
					{
						std::string selector = v_letter;
						if (selector == "A") {
							v_neu_letter = "Z";
						} else if (selector == "B") {
							v_neu_letter = "A";
						} else if (selector == "C") {
							v_neu_letter = "B";
						} else if (selector == "D") {
							v_neu_letter = "C";
						} else if (selector == "E") {
							v_neu_letter = "D";
						} else if (selector == "F") {
							v_neu_letter = "E";
						} else if (selector == "G") {
							v_neu_letter = "F";
						} else if (selector == "H") {
							v_neu_letter = "G";
						} else if (selector == "I") {
							v_neu_letter = "H";
						} else if (selector == "J") {
							v_neu_letter = "I";
						} else if (selector == "K") {
							v_neu_letter = "J";
						} else if (selector == "L") {
							v_neu_letter = "K";
						} else if (selector == "M") {
							v_neu_letter = "L";
						} else if (selector == "N") {
							v_neu_letter = "M";
						} else if (selector == "O") {
							v_neu_letter = "N";
						} else if (selector == "P") {
							v_neu_letter = "O";
						} else if (selector == "Q") {
							v_neu_letter = "P";
						} else if (selector == "R") {
							v_neu_letter = "Q";
						} else if (selector == "S") {
							v_neu_letter = "R";
						} else if (selector == "T") {
							v_neu_letter = "S";
						} else if (selector == "U") {
							v_neu_letter = "T";
						} else if (selector == "V") {
							v_neu_letter = "U";
						} else if (selector == "W") {
							v_neu_letter = "V";
						} else if (selector == "X") {
							v_neu_letter = "W";
						} else if (selector == "Y") {
							v_neu_letter = "X";
						} else if (selector == "Z") {
							v_neu_letter = "Y";
						} else {}
					}
					if (a_jb("keyboard_string", 2) == 1) {
						v_letter = p_lcase(v_letter);
					}
				}
				if (v_typ > 0 || a_jb("keyboard_string", 3) == 1) {
					{
						std::string selector = v_letter;
						if (selector == "1") {
							v_neu_letter = "0";
						} else if (selector == "2") {
							v_neu_letter = "1";
						} else if (selector == "3") {
							v_neu_letter = "2";
						} else if (selector == "4") {
							v_neu_letter = "3";
						} else if (selector == "5") {
							v_neu_letter = "4";
						} else if (selector == "6") {
							v_neu_letter = "5";
						} else if (selector == "7") {
							v_neu_letter = "6";
						} else if (selector == "8") {
							v_neu_letter = "7";
						} else if (selector == "9") {
							v_neu_letter = "8";
						} else if (selector == "0") {
							v_neu_letter = "9";
						} else {}
					}
				}
				v_text = v_text + v_neu_letter;
			}
			if (v_neu_letter != "" && !g_jay) {
				v_wait = (g_keydelay2 + 5);
			}
			if ((g_jax == 1 || p_keyboardpushed(275)) && !v_wait && !g_jay && v_text != "0") {
				if (v_typ <= 0) {
					v_text += "A";
				} else {
					if (v_typ > 0) {
						v_text += "0";
					}
				}
			}
			if ((g_jax == -1 || p_keyboardpushed(276)) && !v_wait && !g_jay) {
				v_text = p_mid(v_text, 1, 1) + p_mid(v_text, 2, (p_len(v_text) - 2));
			}
			if (!v_wait) {
				if ((g_jay || g_jax || p_keyboardpushed(275) || p_keyboardpushed(276)) && !v_counter) {
					v_wait = g_keydelay;
					v_counter = 1;
				} else {
					if ((g_jay || g_jax || p_keyboardpushed(275) || p_keyboardpushed(276)) && v_counter == 1) {
						v_wait = (g_keydelay2 + 5);
					} else {
						if (!v_keychoice) {
							v_counter = 0;
						}
					}
				}
			}
		}
	}
	if (v_typ > 0) {
		v_text = p_mid(v_text, 1, v_typ);
		while (p_len(v_text) < v_typ) {
			v_text = "0" + v_text;
		}
	}
	return v_text;
}

static intptr_t p_laby_rahmen(int16_t v_skipdiv) {
	intptr_t v_wohin = 0;
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_frontcolor(p_rgb(0, 0, 0));
	p_box(365, 15, 51, 449, -1);
	p_box(15, 365, 335, 51, -1);
	p_stopdrawing();
	if (!v_skipdiv) {
		p_clipsprite(63, 0, 0, 640, 17);
		p_displaysprite(63, 0, 350);
	} else {
		if (v_skipdiv == 2) {
			p_clipsprite(63, 0, 0, 352, 17);
			p_displaysprite(63, 0, 350);
		}
	}
	p_clipsprite(63, 0, 0, 365, 17);
	p_displaysprite(63, 0, 414);
	p_clipsprite(61, 0, 0, 274, 16);
	p_displaysprite(61, 350, 87);
	p_clipsprite(62, 0, 0, 274, 16);
	p_displaysprite(62, 350, 167);
	p_clipsprite(60, 0, 0, 17, 480);
	p_displaysprite(60, 350, 0);
	p_clipsprite(54, 0, 0, 640, 17);
	p_displaysprite(54, 0, 0);
	p_clipsprite(57, 0, 0, 640, 17);
	p_displaysprite(57, 0, 464);
	p_clipsprite(56, 0, 0, 17, 480);
	p_displaysprite(56, 0, 0);
	p_clipsprite(59, 0, 0, 17, 480);
	p_displaysprite(59, 624, 0);
}

static intptr_t p_last_message(int16_t v_which, int16_t v_where) {
	intptr_t v_wohin = 0;
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	p_frontcolor(p_rgb(0, 0, 0));
	switch (a_old_messages("last_message", v_which, g_akt_spieler).f_farbe) {
	case 1:
		p_frontcolor(p_rgb(255, 255, 255));
		break;
	case 2:
		p_frontcolor(p_rgb(1, 1, 255));
		break;
	case 3:
		p_frontcolor(p_rgb(255, 1, 1));
		break;
	case 4:
		p_frontcolor(p_rgb(1, 255, 1));
		break;
	case 5:
		p_frontcolor(p_rgb(255, 255, 1));
		break;
	case 6:
		p_frontcolor(p_rgb(150, 150, 150));
		break;
	default:
		p_frontcolor(p_rgb(255, 255, 255));
		break;
	}
	p_drawtext(25, v_where, a_old_messages("last_message", v_which, g_akt_spieler).f_nachricht, -1, 0);
	p_stopdrawing();
}

static intptr_t p_leeren(intptr_t v_feld) {
	if (a_inventory("leeren", v_feld, g_akt_spieler).f_anzahl > 0) {
		a_inventory("leeren", v_feld, g_akt_spieler).f_anzahl = (a_inventory("leeren", v_feld, g_akt_spieler).f_anzahl - 1);
		if (a_item("leeren", a_inventory("leeren", v_feld, g_akt_spieler).f_name).f_type == 13) {
			a_inventory("leeren", v_feld, g_akt_spieler).f_status = a_item("leeren", a_inventory("leeren", v_feld, g_akt_spieler).f_name).f_attri1;
		}
	} else {
		if (a_inventory("leeren", v_feld, g_akt_spieler).f_name == 150) {
			a_spieler("leeren", g_akt_spieler).f_gold -= (p_random((a_spieler("leeren", g_akt_spieler).f_level * 2)) + 1);
			if (a_spieler("leeren", g_akt_spieler).f_gold < 1) {
				a_spieler("leeren", g_akt_spieler).f_gold = 0;
			}
		} else {
			if (a_item("leeren", a_inventory("leeren", v_feld, g_akt_spieler).f_name).f_unique == 1) {
				p_resetlist(ll_unique_items);
				while (p_nextelement(ll_unique_items)) {
					if (LIST_CURRENT(ll_unique_items,struct st_unique_item).f_name == a_inventory("leeren", v_feld, g_akt_spieler).f_name) {
						p_deleteelement(ll_unique_items, 0);
					}
				}
			}
			a_inventory("leeren", v_feld, g_akt_spieler).f_name = 0;
			a_inventory("leeren", v_feld, g_akt_spieler).f_benutzt = 0;
			a_inventory("leeren", v_feld, g_akt_spieler).f_status = 0;
			a_inventory("leeren", v_feld, g_akt_spieler).f_anzahl = 0;
			a_inventory("leeren", v_feld, g_akt_spieler).f_attri5 = 0;
		}
	}
}

static intptr_t p_load_graphics() {
	if (p_openpack("graphics.pak")) {
		p_usejpegimagedecoder();
		p_usepngimagedecoder();
		p_catchsprite(17, p_nextpackfile());
		p_catchsprite(2, p_nextpackfile());
		p_catchsprite(3, p_nextpackfile());
		p_catchsprite(4, p_nextpackfile());
		p_catchsprite(5, p_nextpackfile());
		p_catchsprite(6, p_nextpackfile());
		p_catchsprite(7, p_nextpackfile());
		p_catchsprite(0, p_nextpackfile());
		p_catchsprite(19, p_nextpackfile());
		p_catchsprite(35, p_nextpackfile());
		p_catchsprite(14, p_nextpackfile());
		p_catchsprite(15, p_nextpackfile());
		p_catchsprite(27, p_nextpackfile());
		p_catchsprite(28, p_nextpackfile());
		p_catchsprite(29, p_nextpackfile());
		p_catchsprite(30, p_nextpackfile());
		p_catchsprite(31, p_nextpackfile());
		p_catchsprite(32, p_nextpackfile());
		p_catchsprite(33, p_nextpackfile());
		p_catchsprite(39, p_nextpackfile());
		p_catchsprite(40, p_nextpackfile());
		p_catchsprite(41, p_nextpackfile());
		p_catchsprite(42, p_nextpackfile());
		p_catchsprite(43, p_nextpackfile());
		p_catchsprite(44, p_nextpackfile());
		p_catchsprite(48, p_nextpackfile());
		p_catchsprite(49, p_nextpackfile());
		p_catchsprite(50, p_nextpackfile());
		p_catchsprite(51, p_nextpackfile());
		p_catchsprite(52, p_nextpackfile());
		p_catchsprite(11, p_nextpackfile());
		p_catchsprite(12, p_nextpackfile());
		p_catchsprite(9, p_nextpackfile());
		p_catchsprite(16, p_nextpackfile());
		p_catchsprite(25, p_nextpackfile());
		p_catchsprite(23, p_nextpackfile());
		p_catchsprite(46, p_nextpackfile());
		p_catchsprite(22, p_nextpackfile());
		p_catchsprite(20, p_nextpackfile());
		p_catchsprite(1, p_nextpackfile());
		p_catchsprite(18, p_nextpackfile());
		p_catchsprite(26, p_nextpackfile());
		p_catchsprite(8, p_nextpackfile());
		p_catchsprite(34, p_nextpackfile());
		p_catchsprite(36, p_nextpackfile());
		p_catchsprite(37, p_nextpackfile());
		p_catchsprite(38, p_nextpackfile());
		p_catchsprite(45, p_nextpackfile());
		p_catchsprite(47, p_nextpackfile());
		p_catchsprite(54, p_nextpackfile());
		p_catchsprite(55, p_nextpackfile());
		p_catchsprite(56, p_nextpackfile());
		p_catchsprite(57, p_nextpackfile());
		p_catchsprite(58, p_nextpackfile());
		p_catchsprite(59, p_nextpackfile());
		p_catchsprite(60, p_nextpackfile());
		p_catchsprite(61, p_nextpackfile());
		p_catchsprite(62, p_nextpackfile());
		p_catchsprite(63, p_nextpackfile());
		p_catchsprite(64, p_nextpackfile());
		p_catchsprite(65, p_nextpackfile());
		p_catchsprite(66, p_nextpackfile());
		p_catchsprite(67, p_nextpackfile());
		p_catchsprite(68, p_nextpackfile());
		p_catchsprite(69, p_nextpackfile());
		p_catchsprite(70, p_nextpackfile());
		p_catchsprite(71, p_nextpackfile());
		p_catchsprite(72, p_nextpackfile());
		p_catchsprite(73, p_nextpackfile());
		p_catchsprite(74, p_nextpackfile());
		p_catchsprite(75, p_nextpackfile());
	} else {
		exit(0);
	}
}

static intptr_t p_load_settings() {
	int16_t v_load = 0;
	std::string v_zw;
	std::string v_zw2;
	v_load = 0;
	if (p_readfile(0, g_environment + "/settings.txt")) {
		v_load = 1;
	} else {
		if (p_readfile(0, "./settings.txt")) {
			v_load = 1;
		}
	}
	g_key_repeat_delay = 90;
	if (v_load == 1) {
		while (!p_eof(0)) {
			v_zw = p_readstring(0);
			if (p_mid(v_zw, 1, 1) != "#") {
				if (p_mid(v_zw, 1, 11) == "language = ") {
					if (p_mid(v_zw, 12, 7) == "english") {
						g_language = 0;
					}
					if (p_mid(v_zw, 12, 6) == "german") {
						g_language = 1;
					}
					if (p_mid(v_zw, 12, 7) == "spanish") {
						g_language = 2;
					}
				} else {
					if (p_mid(v_zw, 1, 11) == "mydelay  = ") {
						v_zw2 = p_mid(v_zw, 12, 5);
						g_mydelay = p_val(v_zw2);
					} else {
						if (p_mid(v_zw, 1, 11) == "mydelay2 = ") {
							v_zw2 = p_mid(v_zw, 12, 5);
							g_mydelay2 = p_val(v_zw2);
						} else {
							if (p_mid(v_zw, 1, 11) == "mydelay3 = ") {
								v_zw2 = p_mid(v_zw, 12, 5);
								g_mydelay3 = p_val(v_zw2);
							} else {
								if (p_mid(v_zw, 1, 11) == "mydelay4 = ") {
									v_zw2 = p_mid(v_zw, 12, 5);
									g_mydelay4 = p_val(v_zw2);
								} else {
									if (p_mid(v_zw, 1, 13) == "key_repeat = ") {
										v_zw2 = p_mid(v_zw, 14, 4);
										g_key_repeat_delay = p_val(v_zw2);
									} else {
										if (p_mid(v_zw, 1, 11) == "joystick = ") {
											if (p_mid(v_zw, 12, 2) == "no") {
												g_joystick_used = 0;
											}
											if (p_mid(v_zw, 12, 3) == "yes") {
												g_joystick_used = 1;
											}
										} else {
											if (p_mid(v_zw, 1, 11) == "no_mouse = ") {
												if (p_mid(v_zw, 12, 2) == "no") {
													g_no_mouse = 0;
												}
												if (p_mid(v_zw, 12, 3) == "yes") {
													g_no_mouse = 1;
												}
											} else {
												if (p_mid(v_zw, 1, 11) == "windowed = ") {
													if (p_mid(v_zw, 12, 2) == "no") {
														g_win_mode = 1;
													}
													if (p_mid(v_zw, 12, 3) == "yes") {
														g_win_mode = 2;
													}
												} else {
													if (p_mid(v_zw, 1, 8) == "sound = ") {
														if (p_mid(v_zw, 9, 3) == "yes") {
															g_sound = 1;
														}
														if (p_mid(v_zw, 9, 2) == "no") {
															g_sound = 0;
														}
													} else {
														if (p_mid(v_zw, 1, 8) == "music = ") {
															if (p_mid(v_zw, 9, 3) == "yes") {
																g_music = 1;
															}
															if (p_mid(v_zw, 9, 2) == "no") {
																g_music = 0;
															}
														} else {
															if (p_mid(v_zw, 1, 11) == "klicking = ") {
																if (p_mid(v_zw, 12, 3) == "yes") {
																	g_klicking = 1;
																}
																if (p_mid(v_zw, 12, 2) == "no") {
																	g_klicking = 0;
																}
															} else {
																if (p_mid(v_zw, 1, 14) == "auto-toggle = ") {
																	if (p_mid(v_zw, 15, 3) == "yes") {
																		g_autopickup = 1;
																	}
																	if (p_mid(v_zw, 15, 2) == "no") {
																		g_autopickup = 0;
																	}
																} else {
																	if (p_mid(v_zw, 1, 10) == "button5 = ") {
																		if (p_mid(v_zw, 11, 3) == "yes") {
																			g_knopf5 = 1;
																		}
																		if (p_mid(v_zw, 11, 2) == "no") {
																			g_knopf5 = 0;
																		}
																	} else {
																		if (p_mid(v_zw, 1, 7) == "jars = ") {
																			if (p_mid(v_zw, 8, 3) == "yes") {
																				g_flaschen = 1;
																			}
																			if (p_mid(v_zw, 8, 2) == "no") {
																				g_flaschen = 0;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		p_closefile(0);
		if (g_joystick_used == 1) {
			if (!p_initjoystick()) {
			}
		}
	}
}

static intptr_t p_load_sounds() {
	if (p_openpack("sounds.pak")) {
		p_catchsound(0, p_nextpackfile());
		p_catchsound(1, p_nextpackfile());
		p_catchsound(2, p_nextpackfile());
		p_catchsound(3, p_nextpackfile());
		p_catchsound(4, p_nextpackfile());
		p_catchsound(5, p_nextpackfile());
		p_catchsound(6, p_nextpackfile());
		p_catchsound(7, p_nextpackfile());
		p_catchsound(8, p_nextpackfile());
		p_catchsound(9, p_nextpackfile());
		p_catchsound(10, p_nextpackfile());
		p_catchsound(11, p_nextpackfile());
		p_catchsound(12, p_nextpackfile());
		p_catchsound(33, p_nextpackfile());
		p_catchsound(27, p_nextpackfile());
		p_catchsound(32, p_nextpackfile());
		p_catchsound(31, p_nextpackfile());
		p_catchsound(28, p_nextpackfile());
		p_catchsound(23, p_nextpackfile());
		p_catchsound(24, p_nextpackfile());
		p_catchsound(25, p_nextpackfile());
		p_catchsound(18, p_nextpackfile());
		p_catchsound(19, p_nextpackfile());
		p_catchsound(20, p_nextpackfile());
		p_catchsound(17, p_nextpackfile());
		p_catchsound(16, p_nextpackfile());
		p_catchsound(26, p_nextpackfile());
		p_catchsound(29, p_nextpackfile());
		p_catchsound(22, p_nextpackfile());
		p_catchsound(15, p_nextpackfile());
		p_catchsound(13, p_nextpackfile());
		p_catchsound(34, p_nextpackfile());
		p_catchsound(35, p_nextpackfile());
		p_catchsound(36, p_nextpackfile());
		p_catchsound(14, p_nextpackfile());
		p_catchsound(21, p_nextpackfile());
		p_catchsound(30, p_nextpackfile());
		p_catchsound(37, p_nextpackfile());
		p_catchsound(38, p_nextpackfile());
		p_catchsound(39, p_nextpackfile());
		p_catchsound(40, p_nextpackfile());
		p_catchsound(41, p_nextpackfile());
		p_catchsound(42, p_nextpackfile());
		p_catchsound(43, p_nextpackfile());
		p_catchsound(44, p_nextpackfile());
		p_catchsound(45, p_nextpackfile());
		p_catchsound(46, p_nextpackfile());
		p_catchsound(47, p_nextpackfile());
		p_catchsound(48, p_nextpackfile());
		p_catchsound(49, p_nextpackfile());
		p_catchsound(50, p_nextpackfile());
		p_catchsound(51, p_nextpackfile());
		p_catchsound(52, p_nextpackfile());
		p_catchsound(53, p_nextpackfile());
		p_catchsound(54, p_nextpackfile());
		p_catchsound(55, p_nextpackfile());
		p_catchsound(56, p_nextpackfile());
		p_catchsound(57, p_nextpackfile());
		p_catchsound(58, p_nextpackfile());
		p_catchsound(59, p_nextpackfile());
		p_catchsound(60, p_nextpackfile());
		p_catchsound(61, p_nextpackfile());
		p_catchsound(62, p_nextpackfile());
		p_catchsound(63, p_nextpackfile());
		p_catchsound(64, p_nextpackfile());
		p_loadmodule(0, "archonsoflight.xm");
		p_loadmodule(1, "ballada.mod");
	}
}

static intptr_t p_lock_unique() {
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	for (v_i = 1; v_i <= 144; v_i += 1) {
		for (v_j = 1; v_j <= (g_akt_spieler - 1); v_j += 1) {
			if (a_skills("lock_unique", v_i, v_j).f_unique == 1 && a_skills("lock_unique", v_i, v_j).f_gewaehlt == 1) {
				a_skills("lock_unique", v_i, g_akt_spieler).f_gelocked += 1;
				p_locken(v_i);
			}
		}
	}
}

static intptr_t p_maennchen_auswaehlen() {
	int16_t v_back_button = 0;
	int16_t v_face = 0;
	int16_t v_frame = 0;
	int16_t v_gew = 0;
	int16_t v_gewaehlt = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_k = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_nr = 0;
	int16_t v_pos_aktuell_x = 0;
	int16_t v_pos_aktuell_y = 0;
	intptr_t v_result = 0;
	int16_t v_warten = 0;
	int16_t v_warten2 = 0;
	int16_t v_warten3 = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	v_pos_aktuell_x = 1;
	v_pos_aktuell_y = 1;
	v_warten2 = 0;
	v_warten3 = 0;
	v_frame = 0;
	v_face = 2;
	v_gewaehlt = 0;
	v_warten = 0;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_read_joystick();
		p_examinekeyboard();
		if (p_keyboardpushed(27)) {
			if (!g_released) {
				v_result = p_releasemouse(1);
				g_released = 1;
				p_delay(g_mydelay);
			} else {
				v_result = p_releasemouse(0);
				g_released = 0;
				p_delay(g_mydelay);
			}
		}
		if (p_keyboardpushed(275) || g_jax == 1) {
			if (v_warten2 > 0) {
				v_warten2 = (v_warten2 - 1);
			} else {
				v_pos_aktuell_x = (v_pos_aktuell_x + 1);
				if (v_pos_aktuell_x > 7) {
					v_pos_aktuell_x = 1;
					if (g_maennchen_menu == 1) {
						g_maennchen_menu = 2;
					}
				}
				v_warten2 = 5;
			}
		}
		if (p_keyboardpushed(276) || g_jax == -1) {
			if (v_warten2 > 0) {
				v_warten2 = (v_warten2 - 1);
			} else {
				v_pos_aktuell_x = (v_pos_aktuell_x - 1);
				if (v_pos_aktuell_x < 1) {
					v_pos_aktuell_x = 7;
					if (g_maennchen_menu == 2) {
						g_maennchen_menu = 1;
					}
				}
				v_warten2 = 5;
			}
		}
		if (p_keyboardpushed(274) || g_jay == 1) {
			if (v_warten2 > 0) {
				v_warten2 = (v_warten2 - 1);
			} else {
				v_pos_aktuell_y = (v_pos_aktuell_y + 1);
				if (v_pos_aktuell_y > 4) {
					v_pos_aktuell_y = 1;
				}
				v_warten2 = 5;
			}
		}
		if (p_keyboardpushed(273) || g_jay == -1) {
			if (v_warten2 > 0) {
				v_warten2 = (v_warten2 - 1);
			} else {
				v_pos_aktuell_y = (v_pos_aktuell_y - 1);
				if (v_pos_aktuell_y < 1) {
					v_pos_aktuell_y = 4;
				}
				v_warten2 = 5;
			}
		}
		if (!(g_jax || g_jay || p_keyboardpushed(273) || p_keyboardpushed(274) || p_keyboardpushed(276) || p_keyboardpushed(275))) {
			v_warten2 = 0;
		}
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 1));
		p_drawtext(195, 25, a_message_text("maennchen_auswaehlen", 644, (1 + g_language)) + p_str(g_akt_spieler) + ")", -1, 0);
		p_stopdrawing();
		p_draw_plain_frame(0);
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
			if (v_mmouse_links == 1) {
				if (g_maennchen_menu == 1) {
					for (v_x = 1; v_x <= 7; v_x += 1) {
						for (v_y = 1; v_y <= 4; v_y += 1) {
							if (v_mmouse_x > (34 + (v_x * 64)) && v_mmouse_x < (98 + (v_x * 64)) && v_mmouse_y > (8 + (v_y * 64)) && v_mmouse_y < (72 + (v_y * 64))) {
								v_wohin = p_screenoutput();
								p_startdrawing(v_wohin);
								p_frontcolor(p_rgb(255, 255, 1));
								p_box((34 + (v_x * 64)), (8 + (v_y * 64)), 64, 64, -1);
								p_stopdrawing();
								a_spieler("maennchen_auswaehlen", g_akt_spieler).f_maennchen = (((v_y - 1) * 7) + v_x);
								v_gewaehlt = 1;
							}
						}
					}
				} else {
					for (v_x = 1; v_x <= 7; v_x += 1) {
						for (v_y = 1; v_y <= 4; v_y += 1) {
							if (v_mmouse_x > (34 + (v_x * 64)) && v_mmouse_x < (98 + (v_x * 64)) && v_mmouse_y > (8 + (v_y * 64)) && v_mmouse_y < (72 + (v_y * 64))) {
								v_wohin = p_screenoutput();
								p_startdrawing(v_wohin);
								p_frontcolor(p_rgb(255, 255, 1));
								p_box((34 + (v_x * 64)), (8 + (v_y * 64)), 64, 64, -1);
								p_stopdrawing();
								a_spieler("maennchen_auswaehlen", g_akt_spieler).f_maennchen = (((v_y + 3) * 7) + v_x);
								v_gewaehlt = 1;
							}
						}
					}
				}
			}
		}
		if (p_keyboardreleased(13) || a_jb("maennchen_auswaehlen", 1) == 1) {
			if (g_maennchen_menu == 1) {
				for (v_x = 1; v_x <= 7; v_x += 1) {
					for (v_y = 1; v_y <= 4; v_y += 1) {
						if (v_x == v_pos_aktuell_x && v_y == v_pos_aktuell_y) {
							v_wohin = p_screenoutput();
							p_startdrawing(v_wohin);
							p_frontcolor(p_rgb(255, 255, 1));
							p_box((34 + (v_x * 64)), (8 + (v_y * 64)), 64, 64, -1);
							p_stopdrawing();
							a_spieler("maennchen_auswaehlen", g_akt_spieler).f_maennchen = (((v_y - 1) * 7) + v_x);
							v_gewaehlt = 1;
						}
					}
				}
			} else {
				for (v_x = 1; v_x <= 7; v_x += 1) {
					for (v_y = 1; v_y <= 4; v_y += 1) {
						if (v_x == v_pos_aktuell_x && v_y == v_pos_aktuell_y) {
							v_wohin = p_screenoutput();
							p_startdrawing(v_wohin);
							p_frontcolor(p_rgb(255, 255, 1));
							p_box((34 + (v_x * 64)), (8 + (v_y * 64)), 64, 64, -1);
							p_stopdrawing();
							a_spieler("maennchen_auswaehlen", g_akt_spieler).f_maennchen = (((v_y + 3) * 7) + v_x);
							v_gewaehlt = 1;
						}
					}
				}
			}
		}
		if (g_maennchen_menu == 1) {
			v_nr = 1;
			for (v_j = 1; v_j <= 4; v_j += 1) {
				for (v_i = 1; v_i <= 7; v_i += 1) {
					v_gew = 0;
					for (v_k = 1; v_k <= (g_akt_spieler - 1); v_k += 1) {
						if (v_nr == a_spieler("maennchen_auswaehlen", v_k).f_maennchen) {
							v_gew = 1;
						}
					}
					if (!v_gew) {
						p_clipsprite(0, (((v_face * 32) * 2) + (v_frame * 32)), ((v_nr * 32) - 32), 32, 32);
						p_displaytransparentsprite(0, (50 + ((32 * v_i) * 2)), (25 + ((32 * v_j) * 2)));
					}
					v_nr = (v_nr + 1);
				}
			}
		} else {
			v_nr = 29;
			for (v_j = 1; v_j <= 4; v_j += 1) {
				for (v_i = 1; v_i <= 7; v_i += 1) {
					v_gew = 0;
					for (v_k = 1; v_k <= (g_akt_spieler - 1); v_k += 1) {
						if (v_nr == a_spieler("maennchen_auswaehlen", v_k).f_maennchen) {
							v_gew = 1;
						}
					}
					if (!v_gew) {
						p_clipsprite(0, (((v_face * 32) * 2) + (v_frame * 32)), ((v_nr * 32) - 32), 32, 32);
						p_displaytransparentsprite(0, (50 + ((32 * v_i) * 2)), (25 + ((32 * v_j) * 2)));
					}
					v_nr = (v_nr + 1);
				}
			}
		}
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_frontcolor(p_rgb(255, 255, 1));
		p_line((86 + (64 * v_pos_aktuell_x)), (22 + (64 * v_pos_aktuell_y)), -38, 0, -1);
		p_line((86 + (64 * v_pos_aktuell_x)), (22 + (64 * v_pos_aktuell_y)), 0, 39, -1);
		p_line((48 + (64 * v_pos_aktuell_x)), (60 + (64 * v_pos_aktuell_y)), 38, 0, -1);
		p_line((48 + (64 * v_pos_aktuell_x)), (60 + (64 * v_pos_aktuell_y)), 0, -38, -1);
		p_stopdrawing();
		v_warten = (v_warten + 1);
		p_delay(1);
		if (v_warten > 3) {
			v_warten = 1;
			v_frame = (v_frame + 1);
			if (v_frame > 1) {
				v_frame = 0;
			}
		}
		if (g_maennchen_menu == 2) {
			if (v_mmouse_x > 550 && v_mmouse_x < 582 && v_mmouse_y > 350 && v_mmouse_y < 382) {
				p_clipsprite(6, 96, 0, 32, 31);
				if (v_mmouse_links == 1) {
					g_maennchen_menu = 1;
				}
			} else {
				p_clipsprite(6, 32, 0, 32, 31);
			}
		} else {
			p_clipsprite(6, 288, 0, 32, 31);
		}
		p_displaytransparentsprite(6, 550, 350);
		if (g_maennchen_menu == 1) {
			if (v_mmouse_x > 584 && v_mmouse_x < 616 && v_mmouse_y > 350 && v_mmouse_y < 382) {
				p_clipsprite(6, 64, 0, 32, 31);
				if (v_mmouse_links == 1) {
					g_maennchen_menu = 2;
				}
			} else {
				p_clipsprite(6, 0, 0, 32, 31);
			}
		} else {
			p_clipsprite(6, 256, 0, 32, 31);
		}
		p_displaytransparentsprite(6, 584, 350);
		v_back_button = 0;
		if (v_mmouse_x > 529 && v_mmouse_x < 616 && v_mmouse_y > 409 && v_mmouse_y < 439) {
			p_clipsprite(4, 88, 0, 87, 32);
			if (v_mmouse_links == 1) {
				if (v_warten3 > 0) {
					v_warten3 = (v_warten3 - 1);
				} else {
					v_face += 1;
					if (v_face > 3) {
						v_face = 0;
					}
					v_warten3 = 5;
				}
			}
		} else {
			p_clipsprite(4, 88, 31, 87, 32);
		}
		p_displaytransparentsprite(4, 530, 410);
		if (p_keyboardpushed(304)) {
			if (v_warten3 > 0) {
				v_warten3 = (v_warten3 - 1);
			} else {
				v_face += 1;
				if (v_face > 3) {
					v_face = 0;
				}
				v_warten3 = 5;
			}
		}
		if (p_keyboardpushed(303)) {
			if (v_warten3 > 0) {
				v_warten3 = (v_warten3 - 1);
			} else {
				v_face -= 1;
				if (v_face < 0) {
					v_face = 3;
				}
				v_warten3 = 5;
			}
		}
		if (!(p_keyboardpushed(304) || p_keyboardpushed(303) || v_mmouse_links)) {
			v_warten3 = 0;
		}
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		p_delay(50);
	} while (!(v_gewaehlt == 1 || v_back_button == 1));
	p_delay(g_mydelay);
	if (v_back_button == 1) {
		throw Lv_again;
	}
}

static intptr_t p_make_potion(int16_t v_allpotions) {
	int16_t v_potion = 0;
	if (v_allpotions == 1) {
		return (p_random(37) + 75);
	}
	v_potion = (p_random(35) + 75);
	if (a_item("make_potion", v_potion).f_attri1 == 6) {
		v_potion = 111;
		if (a_item("make_potion", v_potion).f_attri1 == 5) {
			v_potion = 112;
		}
	}
	if (a_item("make_potion", v_potion).f_attri1 == 5) {
		v_potion = 112;
		if (a_item("make_potion", v_potion).f_attri1 == 6) {
			v_potion = 111;
		}
	}
	return v_potion;
}

static intptr_t p_mana_verlieren(int16_t v_spell) {
	int16_t v_kosten = 0;
	if (!g_item_spell) {
		v_kosten = p_zauberkosten(v_spell);
		a_spieler("mana_verlieren", g_akt_spieler).f_mana = (a_spieler("mana_verlieren", g_akt_spieler).f_mana - v_kosten);
	}
}

static intptr_t p_maxspeed() {
	int16_t v_akt_maxspeed = 0;
	intptr_t v_i = 0;
	int16_t v_kundschafter = 0;
	int16_t v_meister = 0;
	intptr_t v_okay = 0;
	v_akt_maxspeed = a_spieler("maxspeed", g_akt_spieler).f_maxspeed;
	v_okay = 0;
	if (p_habich(86) > 0 && !v_okay) {
		v_akt_maxspeed = 10;
		v_okay = 1;
	}
	if (p_habich(88) > 0 && !v_okay) {
		v_akt_maxspeed = 10;
		v_okay = 1;
	}
	if (p_habich(89) > 0 && !v_okay) {
		v_akt_maxspeed = 10;
		v_okay = 1;
	}
	if (p_habich(87) > 0 && !v_okay) {
		v_akt_maxspeed = 10;
		v_okay = 1;
	}
	if (p_habich(90) > 0 && !v_okay) {
		v_akt_maxspeed = 5;
	}
	v_akt_maxspeed = (v_akt_maxspeed + p_habich(40));
	v_akt_maxspeed = (v_akt_maxspeed + a_spieler("maxspeed", g_akt_spieler).f_zugweitegegenstand);
	v_kundschafter = 0;
	for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
		if (a_skills("maxspeed", 78, v_i).f_gewaehlt == 1 && a_spieler("maxspeed", v_i).f_status == 1) {
			v_kundschafter = 2;
		}
	}
	v_akt_maxspeed = (v_akt_maxspeed + v_kundschafter);
	v_meister = 0;
	for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
		if (a_spieler("maxspeed", v_i).f_status != 1) {
			continue;
		}
		if (p_hater(141, v_i) > 0) {
			v_meister = 2;
		}
	}
	v_akt_maxspeed = (v_akt_maxspeed + v_meister);
	if (a_spieler("maxspeed", g_akt_spieler).f_schleichen > 0) {
		v_akt_maxspeed = (v_akt_maxspeed / 2);
	}
	v_akt_maxspeed = (v_akt_maxspeed - p_belastung());
	v_akt_maxspeed = (v_akt_maxspeed - a_spieler("maxspeed", g_akt_spieler).f_krankheit);
	if (a_skills("maxspeed", 138, g_akt_spieler).f_gewaehlt == 1) {
		v_akt_maxspeed = (v_akt_maxspeed / 2);
		if (v_akt_maxspeed < 1) {
			v_akt_maxspeed = 1;
		}
	}
	if (a_spieler("maxspeed", g_akt_spieler).f_fluch == 5) {
		v_akt_maxspeed = 1;
	}
	if (v_akt_maxspeed <= 1) {
		v_akt_maxspeed = 1;
	}
	if (v_akt_maxspeed > 25) {
		v_akt_maxspeed = 25;
	}
	return v_akt_maxspeed;
}

static intptr_t p_message(int16_t v_text, int16_t v_farbe) {
	p_old_message(a_message_text("message", v_text, (1 + g_language)), v_farbe);
	p_flipbuffers(1);
	p_delay(g_mydelay);
}

static intptr_t p_monster_random(int16_t v_level, int16_t v_sonderlevel) {
	int16_t v_hugo = 0;
	intptr_t v_i = 0;
	int16_t v_zaehler = 0;
	switch (v_sonderlevel) {
	case 0:
		v_zaehler = 1;
		do {
			v_hugo = (p_random(169) + 1);
			v_zaehler = (v_zaehler + 1);
		} while (!((a_monster("monster_random", v_hugo).f_minlevel <= v_level && p_has_trait2(v_hugo, 30) != 1) || v_zaehler > 500));
		if (v_zaehler > 500) {
			v_hugo = 1;
		}
		if (v_hugo == 121) {
			if (a_spinnenkoenigin("monster_random", v_level) == 1) {
				v_hugo = 19;
			} else {
				a_spinnenkoenigin("monster_random", v_level) = 1;
			}
		}
		if (v_hugo == 122) {
			if (a_goblinkoenig("monster_random", v_level) == 1) {
				v_hugo = 155;
			} else {
				a_goblinkoenig("monster_random", v_level) = 1;
			}
		}
		if (v_hugo == 123) {
			if (a_untotenherr("monster_random", v_level) == 1) {
				v_hugo = 4;
			} else {
				a_untotenherr("monster_random", v_level) = 1;
			}
		}
		break;
	case 1:
		v_i = (p_random(3) + 1);
		switch ((p_random(3) + 1)) {
		case 1:
			v_hugo = 51;
			break;
		case 2:
			v_hugo = 57;
			break;
		case 3:
			v_hugo = 64;
			break;
		case 4:
			v_hugo = 142;
			break;
		}
		break;
	case 2:
		switch ((p_random(5) + 1)) {
		case 1:
			v_hugo = 32;
			break;
		case 2:
			v_hugo = 35;
			break;
		case 3:
			v_hugo = 51;
			break;
		case 4:
			v_hugo = 53;
			break;
		case 5:
			v_hugo = 56;
			break;
		case 6:
			v_hugo = 67;
			break;
		}
		break;
	case 3:
		switch ((p_random(13) + 1)) {
		case 1:
			v_hugo = 4;
			break;
		case 2:
			v_hugo = 16;
			break;
		case 3:
			v_hugo = 20;
			break;
		case 4:
			v_hugo = 26;
			break;
		case 5:
			v_hugo = 29;
			break;
		case 6:
			v_hugo = 33;
			break;
		case 7:
			v_hugo = 40;
			break;
		case 8:
			v_hugo = 41;
			break;
		case 9:
			v_hugo = 42;
			break;
		case 10:
			v_hugo = 44;
			break;
		case 11:
			v_hugo = 54;
			break;
		case 12:
			v_hugo = 65;
			break;
		case 13:
			v_hugo = 99;
			break;
		case 14:
			v_hugo = 104;
			break;
		}
		break;
	case 4:
		switch ((p_random(15) + 1)) {
		case 1:
			v_hugo = 3;
			break;
		case 2:
			v_hugo = 5;
			break;
		case 3:
			v_hugo = 15;
			break;
		case 4:
			v_hugo = 21;
			break;
		case 5:
			v_hugo = 27;
			break;
		case 6:
			v_hugo = 67;
			break;
		case 7:
			v_hugo = 132;
			break;
		case 8:
			v_hugo = 133;
			break;
		case 9:
			v_hugo = 134;
			break;
		case 10:
			v_hugo = 135;
			break;
		case 11:
			v_hugo = 136;
			break;
		case 12:
			v_hugo = 137;
			break;
		case 13:
			v_hugo = 138;
			break;
		case 14:
			v_hugo = 139;
			break;
		case 15:
			v_hugo = 140;
			break;
		case 16:
			v_hugo = 141;
			break;
		}
		break;
	case 5:
		switch ((p_random(2) + 1)) {
		case 1:
			v_hugo = 9;
			break;
		case 2:
			v_hugo = 34;
			break;
		case 3:
			v_hugo = 100;
			break;
		}
		break;
	case 6:
		switch ((p_random(7) + 1)) {
		case 1:
			v_hugo = 7;
			break;
		case 2:
			v_hugo = 8;
			break;
		case 3:
			v_hugo = 10;
			break;
		case 4:
			v_hugo = 28;
			break;
		case 5:
			v_hugo = 31;
			break;
		case 6:
			v_hugo = 102;
			break;
		case 7:
			v_hugo = 39;
			break;
		case 8:
			v_hugo = 128;
			break;
		}
		break;
	case 7:
		switch ((p_random(7) + 1)) {
		case 1:
			v_hugo = 12;
			break;
		case 2:
			v_hugo = 20;
			break;
		case 3:
			v_hugo = 29;
			break;
		case 4:
			v_hugo = 37;
			break;
		case 5:
			v_hugo = 40;
			break;
		case 6:
			v_hugo = 47;
			break;
		case 7:
			v_hugo = 80;
			break;
		case 8:
			v_hugo = 131;
			break;
		}
		break;
	case 8:
		switch ((p_random(4) + 1)) {
		case 1:
			v_hugo = 19;
			break;
		case 2:
			v_hugo = 101;
			break;
		case 3:
			v_hugo = 46;
			break;
		case 4:
			v_hugo = 124;
			break;
		case 5:
			v_hugo = 125;
			break;
		}
		break;
	case 9:
		switch ((p_random(6) + 1)) {
		case 1:
			v_hugo = 6;
			break;
		case 2:
			v_hugo = 10;
			break;
		case 3:
			v_hugo = 18;
			break;
		case 4:
			v_hugo = 36;
			break;
		case 5:
			v_hugo = 90;
			break;
		case 6:
			v_hugo = 98;
			break;
		case 7:
			v_hugo = 106;
			break;
		}
		break;
	case 10:
		switch ((p_random(9) + 1)) {
		case 1:
			v_hugo = 38;
			break;
		case 2:
			v_hugo = 43;
			break;
		case 3:
			v_hugo = 48;
			break;
		case 4:
			v_hugo = 75;
			break;
		case 5:
			v_hugo = 76;
			break;
		case 6:
			v_hugo = 116;
			break;
		case 7:
			v_hugo = 117;
			break;
		case 8:
			v_hugo = 118;
			break;
		case 9:
			v_hugo = 119;
			break;
		case 10:
			v_hugo = 120;
			break;
		}
		break;
	case 11:
		switch ((p_random(11) + 1)) {
		case 1:
			v_hugo = 8;
			break;
		case 2:
			v_hugo = 10;
			break;
		case 3:
			v_hugo = 11;
			break;
		case 4:
			v_hugo = 13;
			break;
		case 5:
			v_hugo = 14;
			break;
		case 6:
			v_hugo = 16;
			break;
		case 7:
			v_hugo = 20;
			break;
		case 8:
			v_hugo = 28;
			break;
		case 9:
			v_hugo = 42;
			break;
		case 10:
			v_hugo = 113;
			break;
		case 11:
			v_hugo = 143;
			break;
		case 12:
			v_hugo = 150;
			break;
		}
		break;
	}
	return v_hugo;
}

static intptr_t p_move_int(int16_t v_a, int16_t v_b) {
	int16_t v_s_size = 0;
	int16_t v_sav = 0;
	int16_t v_source = 0;
	int16_t v_target = 0;
	if (v_a == v_b || !v_a || !v_b) {
		return 0;
	}
	if (a_inventory("move_int", v_b, g_akt_spieler).f_name == a_inventory("move_int", v_a, g_akt_spieler).f_name && a_inventory("move_int", v_b, g_akt_spieler).f_status == a_inventory("move_int", v_a, g_akt_spieler).f_status && a_inventory("move_int", v_b, g_akt_spieler).f_name && !a_inventory("move_int", v_b, g_akt_spieler).f_benutzt && !a_inventory("move_int", v_a, g_akt_spieler).f_benutzt && a_inventory("move_int", v_b, g_akt_spieler).f_attri5 == a_inventory("move_int", v_a, g_akt_spieler).f_attri5 && a_inventory("move_int", v_a, g_akt_spieler).f_name != 193 && a_item("move_int", a_inventory("move_int", v_b, g_akt_spieler).f_name).f_type != 13) {
		a_inventory("move_int", v_b, g_akt_spieler).f_anzahl = (a_inventory("move_int", v_b, g_akt_spieler).f_anzahl + 1);
		p_leeren(v_a);
	} else {
		if (a_inventory("move_int", v_b, g_akt_spieler).f_name == a_inventory("move_int", v_a, g_akt_spieler).f_name && a_item("move_int", a_inventory("move_int", v_b, g_akt_spieler).f_name).f_type == 13 && !a_inventory("move_int", v_b, g_akt_spieler).f_benutzt && !a_inventory("move_int", v_a, g_akt_spieler).f_benutzt && a_inventory("move_int", v_b, g_akt_spieler).f_attri5 == a_inventory("move_int", v_a, g_akt_spieler).f_attri5) {
			v_s_size = a_item("move_int", a_inventory("move_int", v_b, g_akt_spieler).f_name).f_attri1;
			v_source = (a_inventory("move_int", v_a, g_akt_spieler).f_status + (a_inventory("move_int", v_a, g_akt_spieler).f_anzahl * v_s_size));
			v_target = (a_inventory("move_int", v_b, g_akt_spieler).f_status + (a_inventory("move_int", v_b, g_akt_spieler).f_anzahl * v_s_size));
			v_target = (v_target + v_source);
			if (!(v_target % v_s_size)) {
				a_inventory("move_int", v_b, g_akt_spieler).f_status = v_s_size;
				a_inventory("move_int", v_b, g_akt_spieler).f_anzahl = ((v_target / v_s_size) - 1);
			} else {
				a_inventory("move_int", v_b, g_akt_spieler).f_status = (v_target % v_s_size);
				a_inventory("move_int", v_b, g_akt_spieler).f_anzahl = (v_target / v_s_size);
			}
			a_inventory("move_int", v_a, g_akt_spieler).f_anzahl = 0;
			a_inventory("move_int", v_a, g_akt_spieler).f_status = 0;
			p_leeren(v_a);
		} else {
			v_sav = a_inventory("move_int", v_b, g_akt_spieler).f_name;
			a_inventory("move_int", v_b, g_akt_spieler).f_name = a_inventory("move_int", v_a, g_akt_spieler).f_name;
			a_inventory("move_int", v_a, g_akt_spieler).f_name = v_sav;
			v_sav = a_inventory("move_int", v_b, g_akt_spieler).f_status;
			a_inventory("move_int", v_b, g_akt_spieler).f_status = a_inventory("move_int", v_a, g_akt_spieler).f_status;
			a_inventory("move_int", v_a, g_akt_spieler).f_status = v_sav;
			v_sav = a_inventory("move_int", v_b, g_akt_spieler).f_benutzt;
			a_inventory("move_int", v_b, g_akt_spieler).f_benutzt = a_inventory("move_int", v_a, g_akt_spieler).f_benutzt;
			a_inventory("move_int", v_a, g_akt_spieler).f_benutzt = v_sav;
			v_sav = a_inventory("move_int", v_b, g_akt_spieler).f_anzahl;
			a_inventory("move_int", v_b, g_akt_spieler).f_anzahl = a_inventory("move_int", v_a, g_akt_spieler).f_anzahl;
			a_inventory("move_int", v_a, g_akt_spieler).f_anzahl = v_sav;
			v_sav = a_inventory("move_int", v_b, g_akt_spieler).f_attri5;
			a_inventory("move_int", v_b, g_akt_spieler).f_attri5 = a_inventory("move_int", v_a, g_akt_spieler).f_attri5;
			a_inventory("move_int", v_a, g_akt_spieler).f_attri5 = v_sav;
		}
	}
}

static intptr_t p_nachricht2(int16_t v_text, int16_t v_geg) {
	std::string v_ausgabe;
	intptr_t v_fertig = 0;
	v_fertig = 0;
	if (v_geg == 998) {
		v_fertig = 1;
		v_ausgabe = a_message_text("nachricht2", v_text, (1 + g_language)) + a_message_text("nachricht2", 734, (1 + g_language));
	}
	if (v_geg == 997 || v_geg == 38) {
		v_fertig = 1;
		v_ausgabe = a_message_text("nachricht2", v_text, (1 + g_language)) + a_message_text("nachricht2", 658, (1 + g_language));
	}
	if (!v_fertig) {
		if (a_item("nachricht2", v_geg).f_type == 4) {
			v_ausgabe = a_message_text("nachricht2", v_text, (1 + g_language)) + a_message_text("nachricht2", 734, (1 + g_language));
		} else {
			v_ausgabe = a_message_text("nachricht2", v_text, (1 + g_language)) + a_item("nachricht2", v_geg).f_name[(1 + g_language)];
		}
	}
	p_old_message(v_ausgabe, 5);
	p_flipbuffers(1);
	p_delay(g_mydelay);
}

static intptr_t p_nachricht3(int16_t v_text1, int16_t v_anz, int16_t v_text2) {
	std::string v_ausgabe;
	v_ausgabe = a_message_text("nachricht3", v_text1, (1 + g_language)) + p_str(v_anz) + a_message_text("nachricht3", v_text2, (1 + g_language));
	p_old_message(v_ausgabe, 5);
	p_flipbuffers(1);
	p_delay(g_mydelay);
}

static intptr_t p_nachricht7(std::string v_text, int16_t v_farbe) {
	p_old_message(v_text, v_farbe);
	p_flipbuffers(1);
	p_delay(g_mydelay);
}

static intptr_t p_nachricht8(int16_t v_x, int16_t v_y, int32_t v_anz) {
	std::string v_ausgabe;
	intptr_t v_wohin = 0;
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	p_frontcolor(p_rgb(255, 255, 1));
	v_ausgabe = a_message_text("nachricht8", 883, (1 + g_language)) + p_str(v_anz);
	p_drawtext(v_x, v_y, v_ausgabe, -1, 0);
	p_stopdrawing();
}

static intptr_t p_optionen_rahmen() {
	intptr_t v_i = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_frontcolor(p_rgb(0, 0, 0));
	p_box(365, 15, 260, 449, -1);
	p_box(15, 365, 335, 51, -1);
	p_stopdrawing();
	p_clipsprite(54, 0, 0, 640, 17);
	p_displaytransparentsprite(54, 0, 0);
	p_clipsprite(56, 0, 0, 17, 480);
	p_displaytransparentsprite(56, 0, 0);
	p_clipsprite(57, 0, 0, 640, 17);
	p_displaytransparentsprite(57, 0, 464);
	p_clipsprite(59, 0, 0, 17, 480);
	p_displaytransparentsprite(59, 624, 0);
	p_clipsprite(63, 0, 0, 365, 17);
	p_displaysprite(63, 0, 350);
	p_clipsprite(60, 0, 0, 17, 480);
	p_displaysprite(60, 350, 0);
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	p_frontcolor(p_rgb(255, 255, 255));
	p_drawtext(440, 19, a_message_text("optionen_rahmen", 76, (1 + g_language)), -1, 0);
	p_frontcolor(p_rgb(150, 150, 150));
	p_box(365, (200 + g_yplus2), 260, g_yplus, -1);
	p_frontcolor(p_rgb(255, 255, 255));
	v_x = 400;
	v_y = 52;
	for (v_i = 1; v_i <= (g_anzz - 3); v_i += 1) {
		p_frontcolor(p_rgb(255, 255, 255));
		if (v_i == g_mauszauber) {
			p_frontcolor(p_rgb(1, 1, 255));
		}
		p_drawtext(v_x, v_y, a_optionenliste("optionen_rahmen", (v_i + g_akt_option)), -1, 0);
		v_y = (v_y + g_yplus);
	}
	p_stopdrawing();
}

static intptr_t p_ork() {
	intptr_t v_mon = 0;
	do {
		v_mon = (p_random(176) + 1);
	} while (!p_has_trait2(v_mon, 33));
	return v_mon;
}

static intptr_t p_preset_template(int16_t v_type) {
	switch (v_type) {
	case 0:
		p_waehlen(135, 1);
		p_waehlen(136, 1);
		p_waehlen(127, 1);
		p_waehlen(87, 1);
		p_waehlen(2, 1);
		p_waehlen(19, 1);
		p_waehlen(20, 1);
		p_waehlen(6, 1);
		p_waehlen(21, 1);
		p_waehlen(89, 1);
		p_waehlen(77, 1);
		p_waehlen(95, 1);
		p_waehlen(1, 1);
		break;
	case 1:
		p_waehlen(5, 1);
		p_waehlen(20, 1);
		p_waehlen(71, 1);
		p_waehlen(73, 1);
		p_waehlen(75, 1);
		p_waehlen(76, 1);
		p_waehlen(79, 1);
		p_waehlen(85, 1);
		p_waehlen(87, 1);
		p_waehlen(44, 1);
		p_waehlen(96, 1);
		p_waehlen(124, 1);
		p_waehlen(135, 1);
		p_waehlen(136, 1);
		p_waehlen(127, 1);
		break;
	case 2:
		p_waehlen(36, 1);
		p_waehlen(37, 1);
		p_waehlen(38, 1);
		p_waehlen(39, 1);
		p_waehlen(40, 1);
		p_waehlen(51, 1);
		p_waehlen(53, 1);
		p_waehlen(54, 1);
		p_waehlen(57, 1);
		p_waehlen(64, 1);
		p_waehlen(91, 1);
		p_waehlen(124, 1);
		p_waehlen(125, 1);
		p_waehlen(134, 1);
		p_waehlen(136, 1);
		break;
	case 3:
		p_waehlen(1, 1);
		p_waehlen(2, 1);
		p_waehlen(6, 1);
		p_waehlen(30, 1);
		p_waehlen(31, 1);
		p_waehlen(32, 1);
		p_waehlen(43, 1);
		p_waehlen(69, 1);
		p_waehlen(70, 1);
		p_waehlen(87, 1);
		p_waehlen(137, 1);
		p_waehlen(127, 1);
		p_waehlen(135, 1);
		break;
	case 4:
		p_waehlen(36, 1);
		p_waehlen(37, 1);
		p_waehlen(38, 1);
		p_waehlen(39, 1);
		p_waehlen(40, 1);
		p_waehlen(41, 1);
		p_waehlen(46, 1);
		p_waehlen(52, 1);
		p_waehlen(53, 1);
		p_waehlen(55, 1);
		p_waehlen(91, 1);
		p_waehlen(92, 1);
		p_waehlen(93, 1);
		p_waehlen(124, 1);
		p_waehlen(125, 1);
		p_waehlen(126, 1);
		p_waehlen(130, 1);
		p_waehlen(131, 1);
		p_waehlen(134, 1);
		p_waehlen(137, 1);
		break;
	}
}

static intptr_t p_read_highscores() {
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	int16_t v_load = 0;
	v_load = 0;
	if (p_readfile(0, g_environment + "/highscores.dat")) {
		v_load = 1;
	} else {
		if (p_readfile(0, "./highscores.dat")) {
			v_load = 1;
		}
	}
	if (v_load == 1) {
		for (v_i = 1; v_i <= 30; v_i += 1) {
			a_hscores("read_highscores", v_i).f_version = p_readstring(0);
			a_hscores("read_highscores", v_i).f_name = p_readstring(0);
			a_hscores("read_highscores", v_i).f_level = p_readword(0);
			a_hscores("read_highscores", v_i).f_gold = p_readword(0);
			a_hscores("read_highscores", v_i).f_mks = p_readword(0);
			a_hscores("read_highscores", v_i).f_punkte = p_readword(0);
			a_hscores("read_highscores", v_i).f_maennchen = p_readword(0);
			a_hscores("read_highscores", v_i).f_anfangszeit = p_readstring(0);
			a_hscores("read_highscores", v_i).f_endezeit = p_readstring(0);
			a_hscores("read_highscores", v_i).f_maxlifepoints = p_readword(0);
			a_hscores("read_highscores", v_i).f_maxmana = p_readword(0);
			a_hscores("read_highscores", v_i).f_attack = p_readword(0);
			a_hscores("read_highscores", v_i).f_dexterity = p_readword(0);
			a_hscores("read_highscores", v_i).f_strength = p_readword(0);
			a_hscores("read_highscores", v_i).f_maxspeed = p_readword(0);
			a_hscores("read_highscores", v_i).f_perception = p_readword(0);
			a_hscores("read_highscores", v_i).f_luck_score = p_readword(0);
			a_hscores("read_highscores", v_i).f_power_score = p_readword(0);
			a_hscores("read_highscores", v_i).f_circle = p_readword(0);
			a_hscores("read_highscores", v_i).f_stabteile = p_readword(0);
			a_hscores("read_highscores", v_i).f_moves = p_readword(0);
			a_hscores("read_highscores", v_i).f_cause_of_death = p_readword(0);
			a_hscores("read_highscores", v_i).f_cause_of_death_monster = p_readword(0);
			for (v_j = 1; v_j <= 30; v_j += 1) {
				a_hscores("read_highscores", v_i).f_skills[v_j] = p_readword(0);
			}
		}
		p_closefile(0);
	}
}

static intptr_t p_remove_monster() {
	int16_t v_act_room = 0;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x = -1000;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y = -1000;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 7;
	g_dead_monsters = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z;
	v_act_room = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_room;
	if (v_act_room > 0) {
		p_resetlist(ll_room_list);
		do {
			p_nextelement(ll_room_list);
		} while (!(LIST_CURRENT(ll_room_list,struct st_room_type).f_nr_in_level == v_act_room && LIST_CURRENT(ll_room_list,struct st_room_type).f_level == a_spieler("remove_monster", g_akt_spieler).f_level));
		p_sound(17);
		p_setlaby(LIST_CURRENT(ll_room_list,struct st_room_type).f_exit_x, LIST_CURRENT(ll_room_list,struct st_room_type).f_exit_y, a_spieler("remove_monster", g_akt_spieler).f_level, 71, 0, 0);
	}
}

static intptr_t p_reparieren(int16_t v_feld) {
	a_inventory("reparieren", v_feld, g_akt_spieler).f_status = 0;
	p_sound(46);
	g_aktion = 1;
	p_delay(g_mydelay);
}

static intptr_t p_reset_skills() {
	int16_t v_i = 0;
	for (v_i = 1; v_i <= 144; v_i += 1) {
		a_skills("reset_skills", v_i, g_akt_spieler).f_gewaehlt = 0;
		a_skills("reset_skills", v_i, g_akt_spieler).f_gelocked = 0;
	}
	a_spieler("reset_skills", g_akt_spieler).f_skill_points = 14;
	p_lock_unique();
}

static intptr_t p_save(std::string v_name) {
	intptr_t v_act_piece = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_k = 0;
	int16_t v_save = 0;
	intptr_t v_y = 0;
	v_save = 0;
	if (p_createfile(0, g_environment + "/" + v_name)) {
		p_writestringn(0, "09.10.2010");
		g_nr_of_saves = (g_nr_of_saves + 1);
		p_writeword(0, g_nr_of_saves);
		p_writeword(0, g_nr_of_players);
		p_writeword(0, g_akt_spieler);
		p_writestringn(0, g_anfangszeit);
		g_anz_levels = 0;
		for (v_j = 1; v_j <= 150; v_j += 1) {
			if (a_groesse("save", v_j) > 0) {
				g_anz_levels = (g_anz_levels + 1);
			}
		}
		p_writeword(0, g_anz_levels);
		for (v_j = 0; v_j <= 37; v_j += 1) {
			for (v_k = 1; v_k <= 3; v_k += 1) {
				p_writestringn(0, a_item("save", (75 + v_j)).f_name[v_k]);
			}
			p_writeword(0, a_item("save", (75 + v_j)).f_attri1);
			p_writeword(0, a_item("save", (75 + v_j)).f_einkauf);
			p_writeword(0, a_item("save", (75 + v_j)).f_verkauf);
		}
		for (v_j = 0; v_j <= 9; v_j += 1) {
			for (v_k = 1; v_k <= 3; v_k += 1) {
				p_writestringn(0, a_item("save", (65 + v_j)).f_name[v_k]);
			}
			p_writeword(0, a_item("save", (65 + v_j)).f_attri1);
			p_writeword(0, a_item("save", (65 + v_j)).f_einkauf);
			p_writeword(0, a_item("save", (65 + v_j)).f_verkauf);
			p_writeword(0, a_mush_known("save", v_j));
		}
		for (v_j = 0; v_j <= 37; v_j += 1) {
			p_writeword(0, a_mischen("save", v_j).f_result);
			p_writeword(0, a_mischen("save", v_j).f_learned);
		}
		for (v_j = 0; v_j <= 50; v_j += 1) {
			p_writeword(0, a_alch_buff("save", v_j));
			p_writeword(0, a_spell_chance_buff("save", v_j));
			p_writeword(0, a_lore_chance_buff("save", v_j));
			p_writeword(0, a_hit_chance_buff("save", v_j));
			p_writeword(0, a_critical_chance_buff("save", v_j));
			p_writeword(0, a_damage_buff("save", v_j));
			p_writeword(0, a_damage_buff2("save", v_j));
			p_writeword(0, a_wand_buff("save", v_j));
			p_writeword(0, a_scroll_buff("save", v_j));
			p_writeword(0, a_break_chance_buff("save", v_j));
			p_writeword(0, a_gold_buff("save", v_j));
			p_writeword(0, a_herb_buff("save", v_j));
			p_writeword(0, a_crysolit_buff("save", v_j));
			p_writeword(0, a_god_bonus_buff("save", v_j));
			p_writeword(0, a_fish_buff("save", v_j));
			p_writeword(0, a_general_percent_buff("save", v_j));
			p_writeword(0, a_boulder_buff("save", v_j));
		}
		p_writelong(0, g_item_break20);
		p_writelong(0, g_item_break15);
		p_writelong(0, g_item_break10);
		p_writelong(0, g_item_break05);
		p_writelong(0, g_next_qual);
		p_writelong(0, g_coin_toss);
		p_writeword(0, p_countlist(ll_room_list));
		p_resetlist(ll_room_list);
		while (p_nextelement(ll_room_list)) {
			p_writeword(0, LIST_CURRENT(ll_room_list,struct st_room_type).f_level);
			p_writeword(0, LIST_CURRENT(ll_room_list,struct st_room_type).f_nr_in_level);
			p_writeword(0, LIST_CURRENT(ll_room_list,struct st_room_type).f_type);
			p_writeword(0, LIST_CURRENT(ll_room_list,struct st_room_type).f_visions);
			p_writeword(0, LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1);
			p_writeword(0, LIST_CURRENT(ll_room_list,struct st_room_type).f_stat2);
			p_writeword(0, LIST_CURRENT(ll_room_list,struct st_room_type).f_x);
			p_writeword(0, LIST_CURRENT(ll_room_list,struct st_room_type).f_y);
			p_writeword(0, LIST_CURRENT(ll_room_list,struct st_room_type).f_exit_x);
			p_writeword(0, LIST_CURRENT(ll_room_list,struct st_room_type).f_exit_y);
			for (v_i = 1; v_i <= 4; v_i += 1) {
				p_writeword(0, LIST_CURRENT(ll_room_list,struct st_room_type).f_only_once[v_i]);
			}
		}
		for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
			p_writeword(0, a_ausgangx("save", v_j));
		}
		for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
			p_writeword(0, a_ausgangy("save", v_j));
		}
		for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
			p_writeword(0, a_eingangx("save", v_j));
		}
		for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
			p_writeword(0, a_eingangy("save", v_j));
		}
		for (v_j = 1; v_j <= 150; v_j += 1) {
			p_writeword(0, a_sonderlevel("save", v_j));
			p_writeword(0, a_levelmod("save", v_j));
			p_writeword(0, a_skill_trader("save", v_j));
			p_writeword(0, a_small_trader("save", v_j));
			p_writeword(0, a_level_curse("save", v_j));
		}
		for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
			p_writeword(0, a_groesse("save", v_j));
		}
		for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
			p_writeword(0, a_inhalt("save", v_j));
		}
		for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
			p_writeword(0, a_mit_was("save", v_j));
		}
		for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
			p_writeword(0, a_visionen("save", v_j));
		}
		for (v_j = 1; v_j <= 150; v_j += 1) {
			p_writeword(0, a_fluss("save", v_j));
		}
		for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
			p_writeword(0, a_spinnenkoenigin("save", v_j));
		}
		for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
			p_writeword(0, a_goblinkoenig("save", v_j));
		}
		for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
			p_writeword(0, a_untotenherr("save", v_j));
		}
		for (v_y = 1; v_y <= g_anz_levels; v_y += 1) {
			for (v_j = 1; v_j <= a_groesse("save", v_y); v_j += 1) {
				for (v_k = 1; v_k <= a_groesse("save", v_y); v_k += 1) {
					p_writeword(0, a_labyrinth("save", v_y, v_j, v_k).f_feld);
					p_writeword(0, a_labyrinth("save", v_y, v_j, v_k).f_stat1);
					p_writeword(0, a_labyrinth("save", v_y, v_j, v_k).f_stat2);
					p_writeword(0, a_automap("save", v_j, v_k).f_feld[v_y]);
					p_writeword(0, a_laby_item("save", v_j, v_k).f_name[v_y]);
					p_writeword(0, a_laby_item("save", v_j, v_k).f_anzahl[v_y]);
					p_writeword(0, a_laby_item("save", v_j, v_k).f_status[v_y]);
				}
			}
		}
		p_writelong(0, (p_countlist(ll_monster_list) - 2));
		p_selectelement(ll_monster_list, 1);
		while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z <= 150) {
			p_writeword(0, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number);
			p_writeword(0, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp);
			p_writeword(0, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status);
			p_writeword(0, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration);
			p_writeword(0, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x);
			p_writeword(0, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y);
			p_writeword(0, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z);
			p_writeword(0, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_container);
			p_writeword(0, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_item);
			p_writeword(0, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_skilldrop);
			p_nextelement(ll_monster_list);
		}
		p_writeword(0, p_countlist(ll_merchants));
		p_resetlist(ll_merchants);
		while (p_nextelement(ll_merchants)) {
			p_writeword(0, LIST_CURRENT(ll_merchants,struct st_merch_items).f_face);
			for (v_i = 0; v_i <= 55; v_i += 1) {
				p_writeword(0, LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id);
				p_writeword(0, LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_spell);
				p_writeword(0, LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_power);
			}
		}
		for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
			p_writeword(0, a_spieler("save", v_i).f_status);
			p_writestringn(0, a_spieler("save", v_i).f_verifikation);
			p_writestringn(0, a_spieler("save", v_i).f_name);
			p_writeword(0, a_spieler("save", v_i).f_skill_points);
			p_writeword(0, a_spieler("save", v_i).f_level);
			p_writeword(0, a_spieler("save", v_i).f_maxlevel);
			p_writeword(0, a_spieler("save", v_i).f_maennchen);
			p_writeword(0, a_spieler("save", v_i).f_mousepointer);
			p_writeword(0, a_spieler("save", v_i).f_lifepoints);
			p_writeword(0, a_spieler("save", v_i).f_maxlifepoints);
			p_writeword(0, a_spieler("save", v_i).f_lifegain);
			p_writeword(0, a_spieler("save", v_i).f_mana);
			p_writeword(0, a_spieler("save", v_i).f_maxmana);
			p_writeword(0, a_spieler("save", v_i).f_managain);
			p_writeword(0, a_spieler("save", v_i).f_attack);
			p_writeword(0, a_spieler("save", v_i).f_dexterity);
			p_writeword(0, a_spieler("save", v_i).f_strength);
			p_writeword(0, a_spieler("save", v_i).f_maxspeed);
			p_writeword(0, a_spieler("save", v_i).f_speed);
			p_writeword(0, a_spieler("save", v_i).f_perception);
			p_writeword(0, a_spieler("save", v_i).f_luck_score);
			p_writeword(0, a_spieler("save", v_i).f_power_score);
			p_writeword(0, a_spieler("save", v_i).f_circle);
			p_writelong(0, a_spieler("save", v_i).f_gold);
			p_writeword(0, a_spieler("save", v_i).f_magieresistenz);
			p_writeword(0, a_spieler("save", v_i).f_spellweaving);
			p_writeword(0, a_spieler("save", v_i).f_style);
			p_writeword(0, a_spieler("save", v_i).f_light);
			p_writeword(0, a_spieler("save", v_i).f_hunger);
			p_writeword(0, a_spieler("save", v_i).f_durst);
			p_writeword(0, a_spieler("save", v_i).f_betrunken);
			p_writeword(0, a_spieler("save", v_i).f_weisheit);
			p_writeword(0, a_spieler("save", v_i).f_schleichen);
			p_writelong(0, a_spieler("save", v_i).f_mks);
			p_writeword(0, a_spieler("save", v_i).f_fluch);
			p_writeword(0, a_spieler("save", v_i).f_fluchdauer);
			p_writeword(0, a_spieler("save", v_i).f_krankheit);
			p_writeword(0, a_spieler("save", v_i).f_krankheitdauer);
			p_writeword(0, a_spieler("save", v_i).f_poison);
			p_writeword(0, a_spieler("save", v_i).f_verhungern);
			p_writeword(0, a_spieler("save", v_i).f_verdursten);
			p_writeword(0, a_spieler("save", v_i).f_lifepointgegenstand);
			p_writeword(0, a_spieler("save", v_i).f_managegenstand);
			p_writeword(0, a_spieler("save", v_i).f_staerkegegenstand);
			p_writeword(0, a_spieler("save", v_i).f_zugweitegegenstand);
			p_writeword(0, a_spieler("save", v_i).f_dexteritygegenstand);
			p_writeword(0, a_spieler("save", v_i).f_gluecksgegenstand);
			p_writeword(0, a_spieler("save", v_i).f_bogentreffergegenstand);
			p_writeword(0, a_spieler("save", v_i).f_bogenschadengegenstand);
			p_writeword(0, a_spieler("save", v_i).f_powergegenstand);
			p_writeword(0, a_spieler("save", v_i).f_perceptiongegenstand);
			p_writeword(0, a_spieler("save", v_i).f_attackgegenstand);
			p_writeword(0, a_spieler("save", v_i).f_stealthgegenstand);
			p_writeword(0, a_spieler("save", v_i).f_damagegegenstand);
			p_writeword(0, a_spieler("save", v_i).f_lichtgegenstand);
			p_writeword(0, a_spieler("save", v_i).f_diebstahlgegenstand);
			p_writeword(0, a_spieler("save", v_i).f_goblinlehre);
			p_writeword(0, a_spieler("save", v_i).f_spinnenlehre);
			p_writeword(0, a_spieler("save", v_i).f_untotenlehre);
			p_writeword(0, a_spieler("save", v_i).f_pflanzenlehre);
			p_writeword(0, a_spieler("save", v_i).f_tierkunde);
			p_writeword(0, a_spieler("save", v_i).f_fallenlehre);
			p_writeword(0, a_spieler("save", v_i).f_giftlehre);
			p_writeword(0, a_spieler("save", v_i).f_pos_zaubermenue);
			p_writeword(0, a_spieler("save", v_i).f_dumm);
			p_writeword(0, a_spieler("save", v_i).f_face);
			p_writeword(0, a_spieler("save", v_i).f_hinterhalt);
			p_writeword(0, a_spieler("save", v_i).f_portal);
			p_writeword(0, a_spieler("save", v_i).f_teleport);
			p_writeword(0, a_spieler("save", v_i).f_nexus);
			p_writeword(0, a_spieler("save", v_i).f_stehlen);
			p_writeword(0, a_spieler("save", v_i).f_schriftrolle);
			p_writeword(0, a_spieler("save", v_i).f_zauberbuch);
			p_writeword(0, a_spieler("save", v_i).f_kessel);
			p_writeword(0, a_spieler("save", v_i).f_armageddon);
			p_writeword(0, a_spieler("save", v_i).f_pestilence);
			p_writeword(0, a_spieler("save", v_i).f_drachenform);
			p_writeword(0, a_spieler("save", v_i).f_macht);
			p_writeword(0, a_spieler("save", v_i).f_magic_apple);
			p_writeword(0, a_spieler("save", v_i).f_heal);
			p_writeword(0, a_spieler("save", v_i).f_ease_pain);
			p_writeword(0, a_spieler("save", v_i).f_heal_others);
			p_writeword(0, a_spieler("save", v_i).f_full_healing);
			p_writeword(0, a_spieler("save", v_i).f_udjat_ben);
			p_writeword(0, a_spieler("save", v_i).f_akt_zauber);
			p_writeword(0, a_spieler("save", v_i).f_schule);
			p_writeword(0, a_spieler("save", v_i).f_moves);
			p_writeword(0, a_spieler("save", v_i).f_anker_x);
			p_writeword(0, a_spieler("save", v_i).f_anker_y);
			p_writeword(0, a_spieler("save", v_i).f_anker_level);
			p_writeword(0, a_spieler("save", v_i).f_old_pos_x);
			p_writeword(0, a_spieler("save", v_i).f_old_pos_y);
			p_writeword(0, a_spieler("save", v_i).f_old_lp);
			p_writeword(0, a_spieler("save", v_i).f_old_max_lp);
			p_writeword(0, a_spieler("save", v_i).f_old_mp);
			p_writeword(0, a_spieler("save", v_i).f_old_max_mp);
			p_writeword(0, a_spieler("save", v_i).f_cause_of_death);
			p_writeword(0, a_spieler("save", v_i).f_cause_of_death_monster);
			p_writeword(0, a_spieler("save", v_i).f_character_x);
			p_writeword(0, a_spieler("save", v_i).f_character_y);
			for (v_act_piece = 1; v_act_piece <= 9; v_act_piece += 1) {
				p_writeword(0, a_spieler("save", v_i).f_staff_pieces[v_act_piece]);
			}
			p_writeword(0, a_spieler("save", v_i).f_creature_typ);
			p_writeword(0, a_spieler("save", v_i).f_creature_lifepoints);
			p_writeword(0, a_spieler("save", v_i).f_creature_maxlifepoints);
			p_writeword(0, a_spieler("save", v_i).f_creature_attack);
			p_writeword(0, a_spieler("save", v_i).f_creature_schaden_min);
			p_writeword(0, a_spieler("save", v_i).f_creature_schaden_max);
			p_writeword(0, a_spieler("save", v_i).f_creature_speed);
			p_writeword(0, a_spieler("save", v_i).f_creature_maxspeed);
			p_writeword(0, a_spieler("save", v_i).f_creature_x);
			p_writeword(0, a_spieler("save", v_i).f_creature_y);
			p_writeword(0, a_spieler("save", v_i).f_creature_heading);
			p_writeword(0, a_spieler("save", v_i).f_creature_poison);
			p_writeword(0, a_spieler("save", v_i).f_in_water);
			for (v_j = 1; v_j <= 30; v_j += 1) {
				p_writeword(0, a_aktive("save", v_j, v_i).f_nr);
				p_writeword(0, a_aktive("save", v_j, v_i).f_staerke);
				p_writeword(0, a_aktive("save", v_j, v_i).f_dauer);
				p_writeword(0, a_aktive("save", v_j, v_i).f_source);
			}
			for (v_j = 1; v_j <= 144; v_j += 1) {
				for (v_k = 1; v_k <= 3; v_k += 1) {
					p_writestringn(0, a_skills("save", v_j, v_i).f_name[v_k]);
				}
				p_writeword(0, a_skills("save", v_j, v_i).f_nummer);
				p_writeword(0, a_skills("save", v_j, v_i).f_kosten);
				p_writeword(0, a_skills("save", v_j, v_i).f_gruppe);
				for (v_k = 1; v_k <= 3; v_k += 1) {
					p_writestringn(0, a_skills("save", v_j, v_i).f_beschreibung_1[v_k]);
					p_writestringn(0, a_skills("save", v_j, v_i).f_beschreibung_2[v_k]);
				}
				p_writeword(0, a_skills("save", v_j, v_i).f_gewaehlt);
				p_writeword(0, a_skills("save", v_j, v_i).f_gelocked);
			}
			for (v_j = 1; v_j <= 50; v_j += 1) {
				p_writeword(0, a_inventory("save", v_j, v_i).f_name);
				p_writeword(0, a_inventory("save", v_j, v_i).f_benutzt);
				p_writeword(0, a_inventory("save", v_j, v_i).f_anzahl);
				p_writeword(0, a_inventory("save", v_j, v_i).f_status);
				p_writeword(0, a_inventory("save", v_j, v_i).f_attri5);
			}
			for (v_j = 1; v_j <= 184; v_j += 1) {
				p_writeword(0, a_learned("save", v_i, v_j));
			}
			for (v_j = 1; v_j <= 10; v_j += 1) {
				p_writeword(0, a_quickspells("save", v_j, v_i));
			}
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_writeword(0, a_quickspells2("save", v_j, v_i));
			}
		}
		p_closefile(0);
	} else {
		p_message(407, 3);
	}
	p_message(298, 1);
}

static intptr_t p_save_settings() {
	intptr_t v_joystick_only = 0;
	int16_t v_save = 0;
	v_save = 0;
	if (p_createfile(0, g_environment + "/settings.txt")) {
		p_writestringn(0, "# Lost Labyrinth Settings File");
		if (!g_language) {
			p_writestringn(0, "language = english   # english, german, spanish");
		}
		if (g_language == 1) {
			p_writestringn(0, "language = german   # english, german, spanish");
		}
		if (g_language == 2) {
			p_writestringn(0, "language = spanish   # english, german, spanish");
		}
		p_writestringn(0, "mydelay  = " + p_rset(p_str(g_mydelay), 5) + "   # Messages    (5 Digits!)");
		p_writestringn(0, "mydelay2 = " + p_rset(p_str(g_mydelay2), 5) + "   # Scrolling   (5 Digits!)");
		p_writestringn(0, "mydelay3 = " + p_rset(p_str(g_mydelay3), 5) + "   # Mouserefesh (5 Digits!)");
		p_writestringn(0, "mydelay4 = " + p_rset(p_str(g_mydelay4), 5) + "   # Animationen (5 Digits!)");
		p_writestringn(0, "key_repeat = " + p_rset(p_str(g_key_repeat_delay), 4) + "   # in milliseconds");
		if (!g_joystick_used) {
			p_writestringn(0, "joystick = no   # yes, no");
		}
		if (g_joystick_used == 1) {
			p_writestringn(0, "joystick = yes   # yes, no");
		}
		if (!v_joystick_only) {
			p_writestringn(0, "no_mouse = no   # yes, no");
		}
		if (v_joystick_only == 1) {
			p_writestringn(0, "no_mouse = yes   # yes, no");
		}
		if (g_win_mode == 1) {
			p_writestringn(0, "windowed = no   # yes, no");
		}
		if (g_win_mode == 2) {
			p_writestringn(0, "windowed = yes    # yes, no");
		}
		if (g_sound == 1) {
			p_writestringn(0, "sound = yes   # yes, no");
		}
		if (!g_sound) {
			p_writestringn(0, "sound = no    # yes, no");
		}
		if (g_music == 1) {
			p_writestringn(0, "music = yes   # yes, no");
		}
		if (!g_music) {
			p_writestringn(0, "music = no    # yes, no");
		}
		if (g_klicking == 1) {
			p_writestringn(0, "klicking = yes   # yes, no");
		}
		if (!g_klicking) {
			p_writestringn(0, "klicking = no    # yes, no");
		}
		if (g_autopickup == 1) {
			p_writestringn(0, "auto-toggle = yes   # yes, no");
		}
		if (!g_autopickup) {
			p_writestringn(0, "auto-toggle = no    # yes, no");
		}
		if (g_knopf5 == 1) {
			p_writestringn(0, "button5 = yes   # yes, no");
		}
		if (!g_knopf5) {
			p_writestringn(0, "button5 = no    # yes, no");
		}
		if (g_flaschen == 1) {
			p_writestringn(0, "jars = yes   # yes, no");
		}
		if (!g_flaschen) {
			p_writestringn(0, "jars = no    # yes, no");
		}
		p_closefile(0);
		return 1;
	} else {
		return 0;
	}
}

static intptr_t p_save_templates() {
	int16_t v_i = 0;
	int16_t v_tpl_count = 0;
	if (p_createfile(2, g_environment + "/templates.dat")) {
		p_writeword(2, -1);
		p_writeword(2, 2);
		v_tpl_count = p_countlist(ll_template_list);
		p_writeword(2, v_tpl_count);
		p_resetlist(ll_template_list);
		while (p_nextelement(ll_template_list)) {
			for (v_i = 144; v_i >= 1; v_i -= 1) {
				p_writeword(2, LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[v_i]);
			}
			p_writestringn(2, LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name);
		}
		p_closefile(2);
	} else {
		p_print("error creating templates file");
	}
}

static intptr_t p_saving_screen() {
	std::string v_akt_datum;
	intptr_t v_egon = 0;
	intptr_t v_i = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_mouse_x_old = 0;
	intptr_t v_mouse_y_old = 0;
	std::string v_myname;
	int16_t v_raus = 0;
	intptr_t v_result = 0;
	int16_t v_save = 0;
	intptr_t v_sel = 0;
	intptr_t v_warten = 0;
	intptr_t v_willi = 0;
	intptr_t v_wohin = 0;
	intptr_t v_yy = 0;
	v_raus = 0;
	v_save = 0;
	if (p_readfile(0, g_environment + "/savenames.sav")) {
		v_save = 1;
	} else {
		if (p_readfile(0, "./savenames.sav")) {
			v_save = 1;
		}
	}
	if (v_save == 1) {
		for (v_i = 1; v_i <= 10; v_i += 1) {
			a_savenames("saving_screen", v_i) = p_readstring(0);
			a_savedatum("saving_screen", v_i) = p_readstring(0);
		}
		p_closefile(0);
	}
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(-1);
		v_yy = 65;
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(190, v_yy, a_message_text("saving_screen", 568, (1 + g_language)), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(190, v_yy, a_message_text("saving_screen", 569, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_read_joystick();
		p_examinekeyboard();
		if (p_keyboardpushed(273) || g_jay == -1) {
			v_sel = (v_sel - 1);
			if (v_sel < 1) {
				v_sel = 1;
			}
		}
		if (p_keyboardpushed(274) || g_jay == 1) {
			v_sel = (v_sel + 1);
			if (v_sel > 10) {
				v_sel = 10;
			}
		}
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
		}
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		for (v_willi = 1; v_willi <= 10; v_willi += 1) {
			if (v_mmouse_x > 40 && v_mmouse_x < 600 && v_mmouse_y > (100 + (v_willi * 20)) && v_mmouse_y < (120 + (v_willi * 20))) {
				p_frontcolor(p_rgb(150, 150, 150));
				p_box(40, (100 + (v_willi * 20)), 400, 20, -1);
				if (v_sel == 1) {
					p_frontcolor(p_rgb(1, 1, 255));
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(40, (100 + (v_willi * 20)), p_str(v_willi), -1, 0);
				if (v_mmouse_links == 1) {
					v_raus = 1;
					v_save = v_willi;
				}
			} else {
				if (v_sel == v_willi) {
					p_frontcolor(p_rgb(1, 1, 255));
					if (p_keyboardpushed(13) || a_jb("saving_screen", 1)) {
						v_raus = 1;
						v_save = v_willi;
					}
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(40, (100 + (v_willi * 20)), p_str(v_willi), -1, 0);
			}
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(150, (100 + (v_willi * 20)), a_savenames("saving_screen", v_willi), -1, 0);
			if (a_savedatum("saving_screen", v_willi) != "") {
				v_akt_datum = p_formatdate("%dd.%mm.%yyyy %hh:%ii", p_parsedate("%yyyy%mm%dd%hh%ii%ss", a_savedatum("saving_screen", v_willi)));
				p_drawtext(450, (100 + (v_willi * 20)), v_akt_datum, -1, 0);
			}
		}
		p_stopdrawing();
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		p_delay(50);
	} while (!(v_mmouse_rechts == 1 || v_raus == 1 || p_keyboardpushed(27)));
	if (v_save > 0) {
		v_myname = a_savenames("saving_screen", v_save);
		do {
			p_fenster(0);
			p_clearscreen(p_rgb(0, 0, 0));
			v_yy = 65;
			p_draw_plain_frame(-1);
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(190, v_yy, a_message_text("saving_screen", 568, (1 + g_language)), -1, 0);
			v_yy = (v_yy + 15);
			p_drawtext(190, v_yy, a_message_text("saving_screen", 569, (1 + g_language)), -1, 0);
			for (v_willi = 1; v_willi <= 10; v_willi += 1) {
				if (v_willi == v_save) {
					p_frontcolor(p_rgb(150, 150, 150));
					p_box(40, (100 + (v_save * 20)), 550, 20, -1);
				}
				p_frontcolor(p_rgb(255, 255, 255));
				p_drawtext(40, (100 + (v_willi * 20)), p_str(v_willi), -1, 0);
			}
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(100, (100 + (v_save * 20)), a_message_text("saving_screen", 571, (1 + g_language)), -1, 0);
			p_drawtext(200, (100 + (v_save * 20)), v_myname, -1, 0);
			p_stopdrawing();
			if (!g_no_mouse) {
				v_result = p_examinemouse();
				v_mmouse_x = p_mousex();
				v_mmouse_y = p_mousey();
				v_mmouse_links = p_mousebutton(1);
				v_mmouse_rechts = p_mousebutton(2);
				p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
				v_mouse_x_old = v_mmouse_x;
				v_mouse_y_old = v_mmouse_y;
			}
			p_read_joystick();
			v_myname = p_keyboard_string(v_myname, 0);
			if (p_len(v_myname) > 25) {
				v_myname = p_mid(v_myname, 1, 25);
			}
			v_warten = (v_warten + 1);
			if (v_warten < 3) {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_drawingmode(1);
				p_frontcolor(p_rgb(255, 255, 255));
				p_line((200 + p_textwidth(v_myname)), (102 + (v_save * 20)), 0, 15, -1);
				p_line((201 + p_textwidth(v_myname)), (102 + (v_save * 20)), 0, 15, -1);
				p_stopdrawing();
			}
			if (v_warten > 4) {
				v_warten = 0;
			}
			p_flipbuffers(1);
			p_delay(1);
		} while (!(((p_keyboardpushed(13) || a_jb("saving_screen", 2) == 1) && v_myname != "") || p_keyboardpushed(27) || v_mmouse_rechts == 1));
		if (v_myname != "" && !p_keyboardpushed(27) && !v_mmouse_rechts) {
			a_savenames("saving_screen", v_save) = v_myname;
			a_savedatum("saving_screen", v_save) = p_formatdate("%yyyy%mm%dd%hh%ii%ss", p_date());
			if (p_createfile(0, g_environment + "/savenames.sav")) {
				for (v_egon = 1; v_egon <= 10; v_egon += 1) {
					p_writestringn(0, a_savenames("saving_screen", v_egon));
					p_writestringn(0, a_savedatum("saving_screen", v_egon));
				}
				p_closefile(0);
			}
			p_save("laby" + p_str(v_save) + ".sav");
		}
	}
}

static intptr_t p_schaden_critical() {
	int16_t v_bonus = 0;
	intptr_t v_i = 0;
	int16_t v_mon_no = 0;
	int16_t v_schaden_critical = 0;
	int16_t v_waffe = 0;
	v_schaden_critical = 0;
	v_waffe = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_item("schaden_critical", a_inventory("schaden_critical", v_i, g_akt_spieler).f_name).f_type == 1 && a_inventory("schaden_critical", v_i, g_akt_spieler).f_benutzt == 1) {
			v_bonus = 0;
			if (!a_inventory("schaden_critical", v_i, g_akt_spieler).f_status) {
				v_bonus = a_item("schaden_critical", a_inventory("schaden_critical", v_i, g_akt_spieler).f_name).f_attri3;
			}
			if (a_inventory("schaden_critical", v_i, g_akt_spieler).f_status == 1) {
				v_bonus = (a_item("schaden_critical", a_inventory("schaden_critical", v_i, g_akt_spieler).f_name).f_attri3 / 2);
			}
			if (a_inventory("schaden_critical", v_i, g_akt_spieler).f_status == 2) {
				v_bonus = 0;
			}
			v_waffe = (v_waffe + v_bonus);
		}
	}
	if (v_waffe > 0) {
		v_schaden_critical = v_waffe;
	}
	v_schaden_critical = (v_schaden_critical + (p_reflexe() + p_luck()));
	if (a_spieler("schaden_critical", g_akt_spieler).f_style == 4) {
		v_schaden_critical = (v_schaden_critical * 2);
	}
	if (a_skills("schaden_critical", 76, g_akt_spieler).f_gewaehlt == 1) {
		v_schaden_critical = (v_schaden_critical * 2);
	}
	if (p_habich(120) > 0) {
		v_schaden_critical = (v_schaden_critical + (p_habich(120) * 4));
	}
	if (a_skills("schaden_critical", 76, g_akt_spieler).f_gewaehlt == 1) {
		if (v_schaden_critical > 45) {
			v_schaden_critical = 45;
		}
	} else {
		if (v_schaden_critical > 30) {
			v_schaden_critical = 30;
		}
	}
	v_mon_no = p_getmonster((a_spieler("schaden_critical", g_akt_spieler).f_character_x + g_xmod), (a_spieler("schaden_critical", g_akt_spieler).f_character_y + g_ymod), -1);
	if (p_has_trait2(v_mon_no, 28) == 1) {
		v_schaden_critical = 0;
	}
	return v_schaden_critical;
}

static intptr_t p_schaden_max() {
	int16_t v_akt_str = 0;
	int16_t v_bonus = 0;
	intptr_t v_i = 0;
	intptr_t v_okay = 0;
	int16_t v_schaden_max = 0;
	int16_t v_waffe = 0;
	v_schaden_max = 0;
	v_waffe = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_item("schaden_max", a_inventory("schaden_max", v_i, g_akt_spieler).f_name).f_type == 1 && a_inventory("schaden_max", v_i, g_akt_spieler).f_benutzt == 1) {
			v_bonus = 0;
			if (!a_inventory("schaden_max", v_i, g_akt_spieler).f_status) {
				v_bonus = a_item("schaden_max", a_inventory("schaden_max", v_i, g_akt_spieler).f_name).f_attri2;
			}
			if (a_inventory("schaden_max", v_i, g_akt_spieler).f_status == 1) {
				v_bonus = (a_item("schaden_max", a_inventory("schaden_max", v_i, g_akt_spieler).f_name).f_attri2 / 2);
			}
			if (a_inventory("schaden_max", v_i, g_akt_spieler).f_status == 2) {
				v_bonus = 0;
			}
			v_waffe = (v_waffe + v_bonus);
		}
	}
	v_akt_str = p_staerke();
	if (a_skills("schaden_max", 4, g_akt_spieler).f_gewaehlt == 1) {
		v_akt_str = (v_akt_str * 2);
	}
	if (v_waffe > 0) {
		v_schaden_max = ((2 + v_akt_str) + v_waffe);
	} else {
		v_schaden_max = (2 + v_akt_str);
	}
	v_schaden_max = ((v_schaden_max + p_habich(35)) + p_habich(85));
	if (a_skills("schaden_max", 17, g_akt_spieler).f_gewaehlt == 1) {
		v_okay = 0;
		if (a_spieler("schaden_max", g_akt_spieler).f_lifepoints <= (p_maxlife() / 4) && !v_okay) {
			v_schaden_max = (v_schaden_max * 5);
			v_okay = 1;
		}
		if (a_spieler("schaden_max", g_akt_spieler).f_lifepoints <= (p_maxlife() / 3) && !v_okay) {
			v_schaden_max = (v_schaden_max * 4);
			v_okay = 1;
		}
		if (a_spieler("schaden_max", g_akt_spieler).f_lifepoints <= (p_maxlife() / 2) && !v_okay) {
			v_schaden_max = (v_schaden_max * 3);
			v_okay = 1;
		}
		if (a_spieler("schaden_max", g_akt_spieler).f_lifepoints <= (p_maxlife() / 1.5) && !v_okay) {
			v_schaden_max = (v_schaden_max * 2);
			v_okay = 1;
		}
	}
	v_schaden_max = (v_schaden_max + a_spieler("schaden_max", g_akt_spieler).f_damagegegenstand);
	if (a_skills("schaden_max", 21, g_akt_spieler).f_gewaehlt == 1 && p_ich_trage(1) == 1) {
		v_schaden_max = (v_schaden_max + 2);
	}
	if (a_skills("schaden_max", 22, g_akt_spieler).f_gewaehlt == 1 && p_ich_trage(2) == 1) {
		v_schaden_max = (v_schaden_max + 2);
	}
	if (a_skills("schaden_max", 23, g_akt_spieler).f_gewaehlt == 1 && p_ich_trage(3) == 1) {
		v_schaden_max = (v_schaden_max + 2);
	}
	if (a_skills("schaden_max", 24, g_akt_spieler).f_gewaehlt == 1 && p_ich_trage(4) == 1) {
		v_schaden_max = (v_schaden_max + 2);
	}
	if (!p_ich_trage(10)) {
		if (!a_skills("schaden_max", 25, g_akt_spieler).f_gewaehlt) {
			v_schaden_max = (v_schaden_max / 2);
		} else {
			v_schaden_max = (v_schaden_max + 3);
		}
	}
	v_schaden_max = (v_schaden_max + p_habich(145));
	return v_schaden_max;
}

static intptr_t p_schaden_min() {
	int16_t v_akt_str = 0;
	int16_t v_bonus = 0;
	intptr_t v_i = 0;
	intptr_t v_okay = 0;
	int16_t v_schaden_min = 0;
	int16_t v_waffe = 0;
	v_schaden_min = 0;
	v_waffe = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_item("schaden_min", a_inventory("schaden_min", v_i, g_akt_spieler).f_name).f_type == 1 && a_inventory("schaden_min", v_i, g_akt_spieler).f_benutzt == 1) {
			v_bonus = 0;
			if (!a_inventory("schaden_min", v_i, g_akt_spieler).f_status) {
				v_bonus = a_item("schaden_min", a_inventory("schaden_min", v_i, g_akt_spieler).f_name).f_attri2;
			}
			if (a_inventory("schaden_min", v_i, g_akt_spieler).f_status == 1) {
				v_bonus = (a_item("schaden_min", a_inventory("schaden_min", v_i, g_akt_spieler).f_name).f_attri2 / 2);
			}
			if (a_inventory("schaden_min", v_i, g_akt_spieler).f_status == 2) {
				v_bonus = 0;
			}
			v_waffe = (v_waffe + v_bonus);
		}
	}
	v_akt_str = p_staerke();
	if (a_skills("schaden_min", 4, g_akt_spieler).f_gewaehlt == 1) {
		v_akt_str = (v_akt_str * 2);
	}
	if (v_waffe > 0) {
		v_schaden_min = ((v_akt_str / 2) + v_waffe);
	} else {
		v_schaden_min = (v_akt_str / 2);
	}
	v_schaden_min = ((v_schaden_min + p_habich(35)) + p_habich(85));
	if (a_skills("schaden_min", 17, g_akt_spieler).f_gewaehlt == 1) {
		v_okay = 0;
		if (a_spieler("schaden_min", g_akt_spieler).f_lifepoints <= (p_maxlife() / 4) && !v_okay) {
			v_schaden_min = (v_schaden_min * 5);
			v_okay = 1;
		}
		if (a_spieler("schaden_min", g_akt_spieler).f_lifepoints <= (p_maxlife() / 3) && !v_okay) {
			v_schaden_min = (v_schaden_min * 4);
			v_okay = 1;
		}
		if (a_spieler("schaden_min", g_akt_spieler).f_lifepoints <= (p_maxlife() / 2) && !v_okay) {
			v_schaden_min = (v_schaden_min * 3);
			v_okay = 1;
		}
		if (a_spieler("schaden_min", g_akt_spieler).f_lifepoints <= (p_maxlife() / 1.5) && !v_okay) {
			v_schaden_min = (v_schaden_min * 2);
			v_okay = 1;
		}
	}
	v_schaden_min = (v_schaden_min + a_spieler("schaden_min", g_akt_spieler).f_damagegegenstand);
	if (a_skills("schaden_min", 21, g_akt_spieler).f_gewaehlt == 1 && p_ich_trage(1) == 1) {
		v_schaden_min = (v_schaden_min + 2);
	}
	if (a_skills("schaden_min", 22, g_akt_spieler).f_gewaehlt == 1 && p_ich_trage(2) == 1) {
		v_schaden_min = (v_schaden_min + 2);
	}
	if (a_skills("schaden_min", 23, g_akt_spieler).f_gewaehlt == 1 && p_ich_trage(3) == 1) {
		v_schaden_min = (v_schaden_min + 2);
	}
	if (a_skills("schaden_min", 24, g_akt_spieler).f_gewaehlt == 1 && p_ich_trage(4) == 1) {
		v_schaden_min = (v_schaden_min + 2);
	}
	if (!p_ich_trage(10)) {
		if (!a_skills("schaden_min", 25, g_akt_spieler).f_gewaehlt) {
			v_schaden_min = (v_schaden_min / 2);
		} else {
			v_schaden_min = (v_schaden_min + 3);
		}
	}
	v_schaden_min = (v_schaden_min + p_habich(145));
	return v_schaden_min;
}

static intptr_t p_schulenicons() {
	int16_t v_clip_x = 0;
	int16_t v_clip_y = 0;
	intptr_t v_i = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_mouse_links = 0;
	intptr_t v_mouse_rechts = 0;
	intptr_t v_result = 0;
	int16_t v_schooln = 0;
	int16_t v_x = 0;
	int16_t v_y = 0;
	if (!g_no_mouse) {
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mouse_links = p_mousebutton(1);
		v_mouse_rechts = p_mousebutton(2);
	}
	v_x = 350;
	v_y = 358;
	v_schooln = 0;
	for (v_i = g_min_icon_pos; v_i <= 16; v_i += 1) {
		if (v_i == g_icon_pos) {
			v_schooln = a_school_numbers("schulenicons", v_i);
			v_clip_y = 17;
		} else {
			v_clip_y = 0;
		}
		if (v_mmouse_x >= v_x && v_mmouse_x <= (v_x + 16) && v_mmouse_y >= v_y && v_mmouse_y <= (v_y + 16)) {
			v_clip_y = 33;
			if (v_mouse_links == 1) {
				a_spieler("schulenicons", g_akt_spieler).f_schule = a_school_numbers("schulenicons", v_i);
				v_schooln = a_school_numbers("schulenicons", v_i);
				g_icon_pos = v_i;
				p_erstelle_liste(1);
			}
		}
		v_clip_x = a_school_clip_icon_pos("schulenicons", v_i);
		p_clipsprite(64, v_clip_x, v_clip_y, 15, 15);
		p_displaytransparentsprite(64, v_x, v_y);
		v_x += 0;
		v_y += -17;
	}
	return v_schooln;
}

static intptr_t p_schutz() {
	intptr_t v_i = 0;
	int16_t v_okay = 0;
	int16_t v_type = 0;
	g_schutz_min = 0;
	g_schutz_max = 0;
	g_behinderung = 0;
	v_okay = 0;
	if (a_spieler("schutz", g_akt_spieler).f_fluch == 23) {
		v_okay = 1;
		g_schutz_min = 0;
		g_schutz_max = 1;
	}
	if (p_habich(86) > 0 && !v_okay) {
		v_okay = 1;
		g_schutz_min = 0;
		g_schutz_max = 4;
	}
	if (p_habich(88) > 0 && !v_okay) {
		v_okay = 1;
		g_schutz_min = 0;
		g_schutz_max = 5;
	}
	if (p_habich(89) > 0 && !v_okay) {
		v_okay = 1;
		g_schutz_min = 1;
		g_schutz_max = 6;
	}
	if (p_habich(87) > 0 && !v_okay) {
		v_okay = 1;
		g_schutz_min = 1;
		g_schutz_max = 6;
	}
	if (p_habich(90) > 0 && !v_okay) {
		v_okay = 1;
		g_schutz_min = 3;
		g_schutz_max = 12;
	}
	if (!v_okay) {
		for (v_i = 1; v_i <= 50; v_i += 1) {
			v_type = a_item("schutz", a_inventory("schutz", v_i, g_akt_spieler).f_name).f_type;
			if (a_inventory("schutz", v_i, g_akt_spieler).f_benutzt == 1 && (v_type == 6 || v_type == 7 || v_type == 8 || v_type == 9 || v_type == 11)) {
				g_schutz_min = (g_schutz_min + p_schutz_min(v_i));
				g_schutz_max = (g_schutz_max + p_schutz_max(v_i));
				g_behinderung = (g_behinderung + p_schutz_behinderung(v_i));
			}
		}
	}
}

static intptr_t p_select_inventory(int16_t v_nachricht) {
	int16_t v_a = 0;
	int16_t v_b = 0;
	int16_t v_bew_geg_x = 0;
	int16_t v_bew_geg_y = 0;
	int16_t v_c = 0;
	int16_t v_d = 0;
	intptr_t v_gewaehlt = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	int16_t v_mmouse_x = 0;
	int16_t v_mmouse_x_old = 0;
	int16_t v_mmouse_y = 0;
	int16_t v_mmouse_y_old = 0;
	intptr_t v_pos = 0;
	intptr_t v_raus_hier = 0;
	intptr_t v_result = 0;
	int16_t v_savepos = 0;
	int16_t v_sel_x = 0;
	int16_t v_sel_x_old = 0;
	int16_t v_sel_y = 0;
	int16_t v_sel_y_old = 0;
	int16_t v_sprite_x = 0;
	int16_t v_sprite_y = 0;
	intptr_t v_verkauf = 0;
	intptr_t v_verkaufobjekt = 0;
	int16_t v_wait_release2 = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	v_sel_x = 1;
	v_sel_y = 1;
	v_sel_x_old = v_sel_x;
	v_sel_y_old = v_sel_y;
	v_bew_geg_x = 0;
	v_bew_geg_y = 0;
	v_mmouse_x = p_mousex();
	v_mmouse_y = p_mousey();
	v_mmouse_x_old = v_mmouse_x;
	v_mmouse_y_old = v_mmouse_y;
	v_wait_release2 = 0;
	p_delay(g_mydelay);
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(-1);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext((319 - (p_textwidth(p_nachricht4(v_nachricht)) / 2)), 40, p_nachricht4(v_nachricht), -1, 0);
		p_stopdrawing();
		p_read_joystick();
		p_examinekeyboard();
		if (v_wait_release2 == 1) {
			if (p_keyboardpushed(275) || g_jax == 1) {
				p_keydelay(1);
				v_wait_release2 = 0;
				v_sel_x = (v_sel_x + 1);
				if (v_sel_x > 8) {
					v_sel_x = 8;
				}
			} else {
				if (p_keyboardpushed(276) || g_jax == -1) {
					p_keydelay(1);
					v_wait_release2 = 0;
					v_sel_x = (v_sel_x - 1);
					if (v_sel_x < 1) {
						v_sel_x = 1;
					}
				} else {
					if (p_keyboardpushed(274) || g_jay == 1) {
						p_keydelay(1);
						v_wait_release2 = 0;
						v_sel_y = (v_sel_y + 1);
						if (v_sel_y > 5) {
							v_sel_y = 5;
						}
					} else {
						if (p_keyboardpushed(273) || g_jay == -1) {
							p_keydelay(1);
							v_wait_release2 = 0;
							v_sel_y = (v_sel_y - 1);
							if (v_sel_y < 1) {
								v_sel_y = 1;
							}
						}
					}
				}
			}
		} else {
			if (p_keydelay(0) || !(g_jax || g_jay || p_keyboardpushed(273) || p_keyboardpushed(274) || p_keyboardpushed(276) || p_keyboardpushed(275))) {
				v_wait_release2 = 1;
			}
		}
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mmouse_links = p_mousebutton(1);
		v_mmouse_rechts = p_mousebutton(2);
		v_x = 200;
		v_y = 60;
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 5; v_j += 1) {
				v_a = (v_x + ((v_i * 32) - 32));
				v_b = (v_x + (v_i * 32));
				v_c = (v_y + ((v_j * 32) - 32));
				v_d = (v_y + (v_j * 32));
				v_pos = (v_i + ((8 * v_j) - 8));
				if (a_inventory("select_inventory", v_pos, g_akt_spieler).f_benutzt == 1) {
					v_wohin = p_screenoutput();
					p_startdrawing(v_wohin);
					p_drawingmode(1);
					p_frontcolor(p_rgb(255, 0, 0));
					p_box((v_x + ((v_i * 32) - 31)), (v_y + ((v_j * 32) - 31)), 30, 30, -1);
					p_stopdrawing();
				}
				if (v_mmouse_x > v_a && v_mmouse_x < v_b && v_mmouse_y > v_c && v_mmouse_y < v_d) {
					if (v_sel_x == v_i && v_sel_y == v_j) {
						p_clipsprite(1, 0, 32, 32, 32);
						p_displaytransparentsprite(1, (v_x + ((v_i * 32) - 32)), (v_y + ((v_j * 32) - 32)));
					} else {
						p_clipsprite(8, 224, 320, 32, 32);
						p_displaytransparentsprite(8, (v_x + ((v_i * 32) - 32)), (v_y + ((v_j * 32) - 32)));
					}
					if (v_mmouse_x_old != v_mmouse_x || v_mmouse_y_old != v_mmouse_y) {
						v_mmouse_x_old = v_mmouse_x;
						v_mmouse_y_old = v_mmouse_y;
						v_verkaufobjekt = a_inventory("select_inventory", (v_i + ((8 * v_j) - 8)), g_akt_spieler).f_name;
						v_savepos = (v_i + ((8 * v_j) - 8));
					}
					if (v_mmouse_links == 1) {
						v_verkauf = v_savepos;
					}
				} else {
					p_clipsprite(8, 480, 64, 32, 32);
					p_displaytransparentsprite(8, (v_x + ((v_i * 32) - 32)), (v_y + ((v_j * 32) - 32)));
				}
				if (v_i == v_sel_x && v_j == v_sel_y && !v_gewaehlt) {
					p_clipsprite(1, 0, 32, 32, 32);
					p_displaytransparentsprite(1, (v_x + ((v_i * 32) - 32)), (v_y + ((v_j * 32) - 32)));
					v_gewaehlt = 0;
					if (v_sel_x_old != v_sel_x || v_sel_y_old != v_sel_y) {
						v_sel_x_old = v_sel_x;
						v_sel_y_old = v_sel_y;
						v_verkaufobjekt = a_inventory("select_inventory", (v_i + ((8 * v_j) - 8)), g_akt_spieler).f_name;
						v_savepos = (v_i + ((8 * v_j) - 8));
					}
					if (p_keyboardpushed(13) || a_jb("select_inventory", 1)) {
						v_verkauf = v_savepos;
						v_gewaehlt = 1;
					}
				}
				v_sprite_x = a_inventory("select_inventory", v_pos, g_akt_spieler).f_name;
				if (v_sprite_x > 0) {
					if (v_sprite_x == 46 && a_inventory("select_inventory", v_pos, g_akt_spieler).f_benutzt == 1) {
						v_sprite_x = 47;
					}
					if (v_sprite_x == 39 && a_inventory("select_inventory", v_pos, g_akt_spieler).f_benutzt == 1) {
						v_sprite_x = 40;
					}
					v_sprite_x -= 1;
					v_sprite_y = (v_sprite_x / 16);
					v_sprite_x = (v_sprite_x % 16);
					p_clipsprite(8, (v_sprite_x * 32), (v_sprite_y * 32), 32, 32);
					p_displaytransparentsprite(8, (v_x + ((v_i * 32) - 32)), (v_y + ((v_j * 32) - 32)));
					if (a_inventory("select_inventory", v_pos, g_akt_spieler).f_anzahl > 0) {
						v_wohin = p_screenoutput();
						p_startdrawing(v_wohin);
						p_frontcolor(p_rgb(255, 255, 255));
						p_drawingmode(1);
						p_drawtext(((((v_x + (v_i * 32)) + 30) - 32) - p_textwidth(p_str(((int64_t) a_inventory("select_inventory", v_pos, g_akt_spieler).f_anzahl + 1)))), (((v_y + (v_j * 32)) + 18) - 32), p_str(((int64_t) a_inventory("select_inventory", v_pos, g_akt_spieler).f_anzahl + 1)), -1, 0);
						p_stopdrawing();
					}
				}
			}
		}
		if (v_verkaufobjekt) {
			if (a_inventory("select_inventory", v_savepos, g_akt_spieler).f_benutzt) {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_frontcolor(p_rgb(255, 0, 0));
				p_drawingmode(1);
				p_drawtext((319 - (p_textwidth(p_nachricht4(556)) / 2)), 230, p_nachricht4(556), -1, 0);
				p_stopdrawing();
			}
			p_describe(v_savepos, 200, 250, -1, -1);
		}
		if (v_verkauf > 0 && !a_inventory("select_inventory", v_verkauf, g_akt_spieler).f_benutzt && a_inventory("select_inventory", v_verkauf, g_akt_spieler).f_name) {
			v_raus_hier = 1;
		}
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		p_delay(g_mydelay3);
	} while (!(v_mmouse_rechts == 1 || v_raus_hier > 0 || a_jb("select_inventory", 2) || v_gewaehlt > 0));
	p_delay(g_mydelay);
	return v_savepos;
}

static intptr_t p_select_spieler() {
	int16_t v_back_button = 0;
	intptr_t v_frame = 0;
	intptr_t v_gewaehlt = 0;
	intptr_t v_i = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_nr = 0;
	int16_t v_pos_aktuell = 0;
	intptr_t v_result = 0;
	int16_t v_warten = 0;
	int16_t v_warten2 = 0;
	intptr_t v_wohin = 0;
	v_pos_aktuell = 1;
	v_warten = 0;
	v_warten2 = 0;
	v_gewaehlt = 0;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		if (v_warten2 > 0) {
			v_warten2 = (v_warten2 - 1);
		}
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 1));
		p_drawtext(225, 25, p_nachricht4(112), -1, 0);
		p_stopdrawing();
		p_draw_plain_frame(0);
		p_read_joystick();
		p_examinekeyboard();
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
			if (v_mmouse_links == 1) {
				for (v_i = 1; v_i <= 4; v_i += 1) {
					if (v_mmouse_x > (40 + ((v_i * 32) * 3)) && v_mmouse_x < (108 + ((v_i * 32) * 3)) && v_mmouse_y > 180 && v_mmouse_y < 240) {
						v_wohin = p_screenoutput();
						p_startdrawing(v_wohin);
						p_frontcolor(p_rgb(120, 120, 120));
						p_box((30 + ((v_i * 32) * 3)), 170, 84, 74, -1);
						p_stopdrawing();
						g_nr_of_players = v_i;
						v_gewaehlt = 1;
					}
				}
			}
		}
		if (p_keyboardpushed(49) && !v_warten2) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_frontcolor(p_rgb(120, 120, 120));
			p_box(126, 170, 84, 74, -1);
			p_stopdrawing();
			g_nr_of_players = 1;
			v_gewaehlt = 1;
		}
		if (p_keyboardpushed(50) && !v_warten2) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_frontcolor(p_rgb(120, 120, 120));
			p_box(222, 170, 84, 74, -1);
			p_stopdrawing();
			g_nr_of_players = 2;
			v_gewaehlt = 1;
		}
		if (p_keyboardpushed(51) && !v_warten2) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_frontcolor(p_rgb(120, 120, 120));
			p_box(318, 170, 84, 74, -1);
			p_stopdrawing();
			g_nr_of_players = 3;
			v_gewaehlt = 1;
		}
		if (p_keyboardpushed(52) && !v_warten2) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_frontcolor(p_rgb(120, 120, 120));
			p_box(414, 170, 84, 74, -1);
			p_stopdrawing();
			g_nr_of_players = 4;
			v_gewaehlt = 1;
		}
		v_nr = 1;
		for (v_i = 1; v_i <= 4; v_i += 1) {
			p_clipsprite(68, 32, 0, 32, 32);
			p_displaytransparentsprite(68, (50 + ((32 * v_i) * 3)), 200);
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(0, 0, 0));
			p_box(20, 380, 330, 60, -1);
			if (v_mmouse_x > (40 + ((v_i * 32) * 3)) && v_mmouse_x < (108 + ((v_i * 32) * 3)) && v_mmouse_y > 180 && v_mmouse_y < 240) {
				p_frontcolor(p_rgb(0, 0, 255));
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			p_drawtext((40 + ((32 * v_i) * 3)), 180, p_str(v_i), -1, 0);
			p_drawtext((55 + ((32 * v_i) * 3)), 180, p_nachricht4(113), -1, 0);
			p_stopdrawing();
			v_nr = (v_nr + 1);
		}
		v_frame = (v_frame + 1);
		if (v_frame > 1) {
			v_frame = 0;
		}
		v_back_button = 0;
		if (v_mmouse_x > 529 && v_mmouse_x < 616 && v_mmouse_y > 409 && v_mmouse_y < 439) {
			p_clipsprite(4, 0, 0, 87, 32);
			if (v_mmouse_links == 1) {
				v_back_button = 1;
			}
		} else {
			p_clipsprite(4, 0, 31, 87, 32);
		}
		p_displaytransparentsprite(4, 530, 410);
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		p_delay(g_mydelay3);
	} while (!(v_gewaehlt == 1 || v_back_button == 1));
	p_delay(g_mydelay);
	if (v_back_button == 1) {
		throw Lv_again;
	}
}

static intptr_t p_setmonster(int16_t v_xx, int16_t v_yy, int16_t v_level, int16_t v_name, int16_t v_graphic, int16_t v_lifepoints, int16_t v_status, int16_t v_duration, int16_t v_room) {
	int16_t v_container = 0;
	int16_t v_item = 0;
	int16_t v_tresaure = 0;
	p_changecurrentelement(ll_monster_list, a_first_monster("setmonster", v_level).f_p);
	p_insertelement(ll_monster_list);
	a_first_monster("setmonster", v_level).f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x = v_xx;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y = v_yy;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z = v_level;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number = v_name;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = v_lifepoints;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = v_status;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration = v_duration;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_room = v_room;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_container = 0;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_item = 0;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_skilldrop = p_random(999);
	v_container = 0;
	v_item = 0;
	if (v_name == 121) {
		if (p_random(99) < 70) {
			switch ((p_random(3) + 1)) {
			case 1:
				v_item = 144;
				break;
			case 2:
				v_item = 219;
				break;
			case 3:
				v_item = 171;
				break;
			case 4:
				v_item = 304;
				break;
			}
		}
	}
	if (v_name == 122) {
		if (p_random(99) < 70) {
			switch ((p_random(4) + 1)) {
			case 1:
				v_item = 257;
				break;
			case 2:
				v_item = 148;
				break;
			case 3:
				v_item = 261;
				break;
			case 4:
				v_item = 137;
				break;
			case 5:
				v_item = 220;
				break;
			}
		}
	}
	if (v_name == 123) {
		if (p_random(99) < 70) {
			switch ((p_random(1) + 1)) {
			case 1:
				v_item = 135;
				break;
			case 2:
				v_item = 136;
				break;
			}
		}
	}
	if (v_name == 102) {
		if (p_random(99) < 10) {
			v_item = 351;
		}
	}
	if (p_has_trait2(v_name, 27) == 1 && p_random(1) && !v_item) {
		v_tresaure = p_random(99);
		if (v_tresaure < 60) {
			v_container = 9;
			v_item = -1;
		} else {
			if (v_tresaure < 80) {
				v_container = 6;
				v_item = p_find1();
			} else {
				if (v_tresaure < 90) {
					if (p_random(1)) {
						v_container = 62;
					} else {
						v_container = 63;
					}
					if (p_random(1)) {
						v_item = p_find1();
					} else {
						v_item = p_finden2();
					}
				} else {
					v_container = 68;
					v_item = p_finden2();
				}
			}
		}
	}
	if (p_has_trait2(v_name, 26) == 1 && p_random(1) && !v_item) {
		v_tresaure = p_random(99);
		if (v_tresaure < 75) {
			v_container = 9;
			v_item = -1;
		} else {
			if (v_tresaure < 95) {
				v_container = 6;
				v_item = p_find1();
			} else {
				if (p_random(1)) {
					v_container = 62;
				} else {
					v_container = 63;
				}
				if (p_random(1)) {
					v_item = p_find1();
				} else {
					v_item = p_finden2();
				}
			}
		}
	}
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_container = v_container;
	LIST_CURRENT(ll_monster_list,struct st_monster_type).f_item = v_item;
}

static intptr_t p_show_buttons() {
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_ok_button = 0;
	intptr_t v_result = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	v_x = 378;
	v_y = 373;
	g_zw_bild = 0;
	if (!g_no_mouse) {
		v_result = p_examinemouse();
		g_mmouse_x = p_mousex();
		g_mmouse_y = p_mousey();
		g_mmouse_links = p_mousebutton(1);
		v_mmouse_rechts = p_mousebutton(2);
	}
	p_examinekeyboard();
	p_read_joystick();
	if (g_flaschen == 1) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(247, 36, 61));
		p_drawtext(371, 152, p_str(a_spieler("show_buttons", g_akt_spieler).f_lifepoints) + "/" + p_str(p_maxlife()), -1, 0);
		p_frontcolor(p_rgb(130, 125, 250));
		p_drawtext(428, 152, p_str(a_spieler("show_buttons", g_akt_spieler).f_mana) + "/" + p_str(p_maxmana()), -1, 0);
		p_stopdrawing();
	}
	p_clipsprite(7, 0, 0, 256, 96);
	p_displaysprite(7, (v_x - 12), (v_y - 5));
	if (p_keyboardpushed(104)) {
		g_zw_bild = 1;
	}
	if (g_mmouse_x > (40 + v_x) && g_mmouse_x < (81 + v_x) && g_mmouse_y > v_y && g_mmouse_y < (40 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 330, 224, 15, -1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons", 572, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 204, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x + 38), (v_y - 2));
		if (g_mmouse_links == 1) {
			g_zw_bild = 1;
		}
	} else {
		p_clipsprite(2, 204, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x + 38), (v_y - 2));
		v_ok_button = 0;
	}
	if (p_keyboardpushed(108)) {
		g_zw_bild = 7;
	}
	if (g_mmouse_x > (80 + v_x) && g_mmouse_x < (121 + v_x) && g_mmouse_y > v_y && g_mmouse_y < (40 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 330, 224, 15, -1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons", 573, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 238, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x + 78), (v_y - 2));
		if (g_mmouse_links == 1) {
			g_zw_bild = 7;
		}
	} else {
		p_clipsprite(2, 238, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x + 78), (v_y - 2));
	}
	if (p_keyboardpushed(115)) {
		g_zw_bild = 8;
	}
	if (g_mmouse_x > (120 + v_x) && g_mmouse_x < (161 + v_x) && g_mmouse_y > v_y && g_mmouse_y < (40 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 330, 224, 15, -1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons", 574, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 272, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x + 118), (v_y - 2));
		if (g_mmouse_links == 1) {
			g_zw_bild = 8;
		}
	} else {
		p_clipsprite(2, 272, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x + 118), (v_y - 2));
	}
	if (p_keyboardpushed(107)) {
		g_zw_bild = 4;
	}
	if (g_mmouse_x > (160 + v_x) && g_mmouse_x < (201 + v_x) && g_mmouse_y > v_y && g_mmouse_y < (40 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 330, 224, 15, -1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons", 575, (1 + g_language)), -1, 0);
		p_clipsprite(2, 306, 1, 34, 42);
		p_stopdrawing();
		p_displaytransparentsprite(2, (v_x + 157), (v_y - 2));
		if (g_mmouse_links == 1) {
			g_zw_bild = 4;
		}
	} else {
		p_clipsprite(2, 306, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x + 157), (v_y - 2));
	}
	if (p_keyboardpushed(103)) {
		if (a_skills("show_buttons", 75, g_akt_spieler).f_gewaehlt == 1) {
			g_zw_bild = 10;
		}
	}
	if (g_mmouse_x > (200 + v_x) && g_mmouse_x < (241 + v_x) && g_mmouse_y > v_y && g_mmouse_y < (40 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 330, 224, 15, -1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons", 576, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 340, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x + 196), (v_y - 2));
		if (g_mmouse_links == 1) {
			if (a_skills("show_buttons", 75, g_akt_spieler).f_gewaehlt == 1) {
				g_zw_bild = 10;
			}
		}
	} else {
		p_clipsprite(2, 340, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x + 196), (v_y - 2));
	}
	if (p_keyboardpushed(105) || p_keyboardpushed(114) || p_keyboardpushed(98) || a_jb("show_buttons", 3)) {
		g_zw_bild = 2;
	}
	if (g_mmouse_x > (40 + v_x) && g_mmouse_x < (81 + v_x) && g_mmouse_y > (50 + v_y) && g_mmouse_y < (90 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 330, 224, 15, -1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons", 577, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 374, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x + 38), (v_y + 47));
		if (g_mmouse_links == 1) {
			g_zw_bild = 2;
		}
	} else {
		p_clipsprite(2, 374, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x + 38), (v_y + 47));
	}
	if (p_keyboardpushed(100)) {
		g_zw_bild = 6;
	}
	if (g_mmouse_x > (80 + v_x) && g_mmouse_x < (121 + v_x) && g_mmouse_y > (50 + v_y) && g_mmouse_y < (90 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 330, 224, 15, -1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons", 578, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 476, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x + 78), (v_y + 46));
		if (g_mmouse_links == 1) {
			g_zw_bild = 6;
		}
	} else {
		p_clipsprite(2, 476, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x + 78), (v_y + 46));
	}
	if (g_knopf5 == 1 && g_joystick_used == 1) {
		if (a_jb("show_buttons", 5)) {
			g_zw_bild = 9;
		}
	}
	if (p_keyboardpushed(102)) {
		g_zw_bild = 9;
	}
	if (g_mmouse_x > (120 + v_x) && g_mmouse_x < (161 + v_x) && g_mmouse_y > (50 + v_y) && g_mmouse_y < (90 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 330, 224, 15, -1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons", 579, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 442, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x + 117), (v_y + 46));
		if (g_mmouse_links == 1) {
			g_zw_bild = 9;
		}
	} else {
		p_clipsprite(2, 442, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x + 117), (v_y + 46));
	}
	if (p_keyboardpushed(122) || p_keyboardpushed(121) || p_keyboardpushed(99) || a_jb("show_buttons", 4)) {
		g_zw_bild = 3;
	}
	if (g_mmouse_x > (160 + v_x) && g_mmouse_x < (201 + v_x) && g_mmouse_y > (50 + v_y) && g_mmouse_y < (90 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 330, 224, 15, -1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons", 580, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 408, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x + 157), (v_y + 46));
		if (g_mmouse_links == 1) {
			g_zw_bild = 3;
		}
	} else {
		p_clipsprite(2, 408, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x + 157), (v_y + 46));
	}
	if (p_keyboardpushed(111) || a_jb("show_buttons", 2) == 1) {
		g_zw_bild = 5;
	}
	if (g_mmouse_x > (200 + v_x) && g_mmouse_x < (241 + v_x) && g_mmouse_y > (50 + v_y) && g_mmouse_y < (90 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 330, 224, 15, -1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons", 581, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 510, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x + 196), (v_y + 46));
		if (g_mmouse_links == 1) {
			g_zw_bild = 5;
		}
	} else {
		p_clipsprite(2, 510, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x + 196), (v_y + 46));
		v_ok_button = 0;
	}
	if (p_keyboardpushed(120)) {
		g_aktion = 1;
		a_spieler("show_buttons", g_akt_spieler).f_speed = p_maxspeed();
		a_spieler("show_buttons", g_akt_spieler).f_creature_speed = a_spieler("show_buttons", g_akt_spieler).f_creature_maxspeed;
		if (g_nr_of_players == 1) {
			p_message(947, 1);
		}
	}
	if (g_mmouse_x > v_x && g_mmouse_x < (41 + v_x) && g_mmouse_y > v_y && g_mmouse_y < (40 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 330, 224, 15, -1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons", 582, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 578, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x - 2), (v_y - 2));
		if (g_mmouse_links == 1) {
			g_aktion = 1;
			a_spieler("show_buttons", g_akt_spieler).f_speed = p_maxspeed();
			a_spieler("show_buttons", g_akt_spieler).f_creature_speed = a_spieler("show_buttons", g_akt_spieler).f_creature_maxspeed;
			if (g_nr_of_players == 1) {
				p_message(947, 1);
			}
		}
	} else {
		p_clipsprite(2, 578, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x - 2), (v_y - 2));
		v_ok_button = 0;
	}
	if (p_keyboardpushed(109)) {
		g_zw_bild = 12;
	}
	if (g_mmouse_x > v_x && g_mmouse_x < (41 + v_x) && g_mmouse_y > (50 + v_y) && g_mmouse_y < (90 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 330, 224, 15, -1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons", 518, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 544, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x - 2), (v_y + 47));
		if (g_mmouse_links == 1) {
			g_zw_bild = 12;
		}
	} else {
		p_clipsprite(2, 544, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x - 2), (v_y + 47));
	}
	if (p_keyboardpushed(113)) {
		g_zw_bild = 13;
	}
	if (g_mmouse_x > 16 && g_mmouse_x < 350 && g_mmouse_y > 367 && g_mmouse_y < 414) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 0));
		p_line(17, 367, 332, 0, -1);
		p_line(17, 414, 332, 0, -1);
		p_line(17, 367, 0, 48, -1);
		p_line(349, 367, 0, 48, -1);
		p_stopdrawing();
		if (g_mmouse_links == 1) {
			g_zw_bild = 13;
		}
	}
	if (p_keyboardpushed(97)) {
		g_zw_bild = 11;
	}
}

static intptr_t p_show_credits() {
	intptr_t v_a = 0;
	intptr_t v_credits = 0;
	intptr_t v_elapsedtime = 0;
	intptr_t v_farbe = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_mouse_rechts = 0;
	intptr_t v_result = 0;
	intptr_t v_rgb = 0;
	intptr_t v_sin = 0;
	intptr_t v_starttime = 0;
	intptr_t v_warten = 0;
	intptr_t v_wohin = 0;
	intptr_t v_xx = 0;
	intptr_t v_yyy = 0;
	a_credits.dim("credits", 60);
	p_credit(1, "Thanks to the most important people for the project:", 400);
	p_credit(2, "Martine 'Seedydeedee' Davies - Most of the artwork", 280);
	p_credit(3, "Cyril van der Haegen - end screen artwork", 280);
	p_credit(4, "Camille Kuo - Dark elf and Lich artwork", 280);
	p_credit(5, "Jimmy Gustafsson - Dark Wizard artwork", 280);
	p_credit(6, "Caitlin Brenna Johnston - Staff of the last covenant", 280);
	p_credit(7, "Frank Malota - For the original Version of this game", 280);
	p_credit(8, "Frederik Laboreur - For Purebasic", 280);
	p_credit(9, "Gabriel Szilagyi - For hosting the game", 280);
	p_credit(10, "Roger R\366sch - For additional programming", 280);
	p_credit(11, "Rasmus Klette - For improving the skill selection menu", 280);
	p_credit(12, "Peter Eismann - For conversion to new compiler", 280);
	p_credit(13, "David Gervais - For all the nice item graphics", 280);
	p_credit(14, "Patrik Broberg - For all the nice item graphics", 280);
	p_credit(15, "Massimiliano De Ruvo - border artwork", 280);
	p_credit(16, "Michael Wieland - For inventing the Labyrinth Algorithm", 280);
	p_credit(17, "xtd - For the laby ingame song", 280);
	p_credit(18, "archangel - For the laby title song", 280);
	p_credit(19, "Dominik D\366bele - For helping me with the creatures", 280);
	p_credit(20, "Marc Vinals - For the Spanish Translation", 280);
	p_credit(21, "Linus Torvalds - For the best Operating System", 280);
	p_credit(22, "The whole KDE Team - For the best Desktop", 280);
	p_credit(23, "Sound artists from www.freesound.org:", 100);
	p_credit(24, "smidoid - cracking.wav", 100);
	p_credit(25, "mad-monkey - power06.wav", 100);
	p_credit(26, "reinsamba - crystal_glass.wav,moan.wav", 100);
	p_credit(27, "Erdie - bow.wav,lightning.wav", 100);
	p_credit(28, "Percy Duke - open.wav", 100);
	p_credit(29, "Syna Max - fall.wav,woman_screaming.wav,blow4.wav-blow13.wav", 100);
	p_credit(30, "Benboncan - buy.wav,metal.wav,wolf.wav,earth.wav", 100);
	p_credit(31, "engreitz - gold.wav,gold1.wav", 100);
	p_credit(32, "Ekokubza123 - blow1.wav", 100);
	p_credit(33, "nextmaking - blow2.wav,blow3.wav", 100);
	p_credit(34, "dobroide - insect.wav", 100);
	p_credit(35, "Sea Fury - roar.wav", 100);
	p_credit(36, "plagasul - jawa.wav", 100);
	p_credit(37, "grunz - huh.wav,deathcry.wav,ow.wav,success.wav,chaos.wav,darkness.wav,harp.wav", 100);
	p_credit(38, "ERH - howl.wav", 100);
	p_credit(39, "axiyee - horse.wav", 100);
	p_credit(40, "Miselaineous - blackcat.wav", 100);
	p_credit(41, "inferno.wav - cannon.wav,cannon2.wav", 100);
	p_credit(42, "Dynamicell - flame2.wav", 100);
	p_credit(43, "homejrande - flame.wav", 100);
	p_credit(44, "wildweasel - fireball.wav", 100);
	p_credit(45, "daveincamas - frog.wav", 100);
	p_credit(46, "timtube - hohoho.wav", 100);
	p_credit(47, "Robinhood76 - chicken.wav,boar.wav,splish.wav", 100);
	p_credit(48, "Timbre - glass.wav", 100);
	p_credit(49, "jaimedaniel - wind.wav", 100);
	p_credit(50, "duckboy80 - splash.wav", 100);
	p_credit(51, "Heigh hoo - fillup.wav", 100);
	p_credit(52, "Pogotron - evasion.wav", 100);
	p_credit(53, "luffy - gulp.wav", 100);
	p_credit(54, "ggctuk - bite.wav", 100);
	p_credit(55, "joedeshon - missed.wav", 100);
	p_credit(56, "junggle - select.wav", 100);
	p_credit(57, "FreqMan - open_door.wav", 100);
	p_credit(58, "pagancow - open_chest.wav", 100);
	p_credit(59, "acclivity - ding.wav", 100);
	v_credits = 59;
	for (v_a = 1; v_a <= v_credits; v_a += 1) {
		if (p_random(1)) {
			a_credits("show_credits", v_a).f_max = (p_random(40) + 80);
		} else {
			a_credits("show_credits", v_a).f_max = (-1 * (p_random(40) + 80));
		}
		a_credits("show_credits", v_a).f_div = (p_random(20) + 60);
		a_credits("show_credits", v_a).f_sinstart = (60.0 / p_random(200));
	}
	do {
		v_starttime = p_elapsedmilliseconds();
		p_fenster(0);
		v_i += 1;
		p_clearscreen(p_rgb(0, 0, 0));
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		for (v_j = 1; v_j <= v_credits; v_j += 1) {
			if (a_credits("show_credits", v_j).f_y < 400 && a_credits("show_credits", v_j).f_y > 50) {
				if (a_credits("show_credits", v_j).f_y > 300) {
					a_credits("show_credits", v_j).f_fade = (400 - a_credits("show_credits", v_j).f_y);
				} else {
					if (a_credits("show_credits", v_j).f_y < 150) {
						a_credits("show_credits", v_j).f_fade = (a_credits("show_credits", v_j).f_y - 50);
					} else {
						a_credits("show_credits", v_j).f_fade = 100;
					}
				}
				v_xx = (320 - (p_textwidth(a_credits("show_credits", v_j).f_text) / 2));
				v_sin = (p_sin((((float) v_i / a_credits("show_credits", v_j).f_div) + a_credits("show_credits", v_j).f_sinstart)) * a_credits("show_credits", v_j).f_max);
				v_yyy = (a_credits("show_credits", v_j).f_y + (p_textheight("JT") / 2));
				for (v_a = 5; v_a >= 1; v_a -= 1) {
					v_farbe = (((51 * (5 - v_a)) / 100) * a_credits("show_credits", v_j).f_fade);
					p_circle(((v_xx - 55) + v_sin), v_yyy, v_a, p_rgb(0, 0, v_farbe));
					p_circle(((v_xx - 35) + v_sin), v_yyy, v_a, p_rgb(v_farbe, v_farbe, 0));
					p_circle(((v_xx - 15) + v_sin), v_yyy, v_a, p_rgb(0, v_farbe, 0));
					p_circle((((v_xx + p_textwidth(a_credits("show_credits", v_j).f_text)) + 10) + v_sin), v_yyy, v_a, p_rgb(0, v_farbe, 0));
					p_circle((((v_xx + p_textwidth(a_credits("show_credits", v_j).f_text)) + 30) + v_sin), v_yyy, v_a, p_rgb(v_farbe, v_farbe, 0));
					p_circle((((v_xx + p_textwidth(a_credits("show_credits", v_j).f_text)) + 50) + v_sin), v_yyy, v_a, p_rgb(0, 0, v_farbe));
				}
				p_drawingmode(1);
				p_frontcolor(p_rgb(150, 150, 150));
				v_rgb = (2 * a_credits("show_credits", v_j).f_fade);
				p_drawtext((v_xx + v_sin), a_credits("show_credits", v_j).f_y, a_credits("show_credits", v_j).f_text, p_rgb(v_rgb, v_rgb, v_rgb), 0);
			}
			a_credits("show_credits", v_j).f_y = (a_credits("show_credits", v_j).f_y - 1);
		}
		if (a_credits("show_credits", v_credits).f_y < 0) {
			break;
		}
		p_stopdrawing();
		p_draw_plain_frame(-1);
		p_flipbuffers(1);
		p_read_joystick();
		v_result = p_examinemouse();
		v_mouse_rechts = p_mousebutton(2);
		p_examinekeyboard();
		if ((v_mouse_rechts == 1 || a_jb("show_credits", 1) == 1 || p_keyboardpushed(32) || p_keyboardpushed(13) || p_keyboardpushed(27)) && !v_warten) {
			break;
		}
		v_elapsedtime = (p_elapsedmilliseconds() - v_starttime);
		if (v_elapsedtime < 15) {
			p_delay((15 - v_elapsedtime));
		}
	} while (1);
	a_credits.dim("credits", 1);
}

static intptr_t p_show_detail(intptr_t v_akt_eintrag) {
	intptr_t v_esc_but_x = 0;
	intptr_t v_esc_but_y = 0;
	int16_t v_get_out = 0;
	intptr_t v_i = 0;
	int16_t v_j = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	std::string v_reason_string;
	intptr_t v_result = 0;
	intptr_t v_wohin = 0;
	intptr_t v_xx = 0;
	intptr_t v_ysave = 0;
	intptr_t v_yy = 0;
	v_get_out = 0;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(33);
		p_clipsprite(0, 128, ((a_hscores("show_detail", v_akt_eintrag).f_maennchen * 32) - 32), 32, 32);
		p_displaytransparentsprite(0, 50, 100);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawingmode(1);
		v_xx = 150;
		v_yy = 65;
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 115, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, a_hscores("show_detail", v_akt_eintrag).f_name, -1, 0);
		v_yy = (v_yy + 15);
		p_frontcolor(p_rgb(154, 251, 120));
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 525, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_level), -1, 0);
		v_yy = (v_yy + 15);
		p_frontcolor(p_rgb(255, 255, 1));
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 156, (1 + g_language)) + ":", -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_gold), -1, 0);
		v_yy = (v_yy + 15);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 155, (1 + g_language)) + ":", -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_mks), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 93, (1 + g_language)) + ":", -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_punkte), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 52, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_attack), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 53, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_dexterity), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 54, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_strength), -1, 0);
		v_yy = (v_yy + 15);
		p_frontcolor(p_rgb(247, 36, 61));
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 55, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_maxlifepoints), -1, 0);
		v_yy = (v_yy + 15);
		p_frontcolor(p_rgb(239, 131, 44));
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 56, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_maxspeed), -1, 0);
		v_yy = (v_yy + 15);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 57, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_perception), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 58, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_luck_score), -1, 0);
		v_yy = (v_yy + 15);
		p_frontcolor(p_rgb(130, 125, 250));
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 59, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_maxmana), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 60, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_power_score), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 61, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_circle), -1, 0);
		v_yy = (v_yy + 15);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 239, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_stabteile) + "/9", -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 436, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, p_str(a_hscores("show_detail", v_akt_eintrag).f_moves), -1, 0);
		v_yy = (v_yy + 15);
		switch (a_hscores("show_detail", v_akt_eintrag).f_cause_of_death) {
		case 1:
			v_reason_string = a_message_text("show_detail", 680, (1 + g_language));
			break;
		case 2:
			v_reason_string = a_message_text("show_detail", 681, (1 + g_language));
			break;
		case 3:
			v_reason_string = a_message_text("show_detail", 682, (1 + g_language));
			break;
		case 4:
			v_reason_string = a_message_text("show_detail", 683, (1 + g_language));
			break;
		case 5:
			v_reason_string = a_message_text("show_detail", 684, (1 + g_language));
			break;
		case 6:
			v_reason_string = a_message_text("show_detail", 685, (1 + g_language));
			break;
		case 7:
			v_reason_string = a_message_text("show_detail", 686, (1 + g_language));
			break;
		case 8:
			v_reason_string = a_message_text("show_detail", 687, (1 + g_language));
			break;
		case 9:
			v_reason_string = a_message_text("show_detail", 688, (1 + g_language));
			break;
		case 10:
			v_reason_string = a_message_text("show_detail", 689, (1 + g_language));
			break;
		case 11:
			v_reason_string = a_message_text("show_detail", 690, (1 + g_language));
			break;
		case 12:
			v_reason_string = a_message_text("show_detail", 691, (1 + g_language));
			break;
		case 13:
			v_reason_string = a_message_text("show_detail", 692, (1 + g_language));
			break;
		case 14:
			v_reason_string = a_message_text("show_detail", 693, (1 + g_language));
			break;
		case 15:
			v_reason_string = a_message_text("show_detail", 707, (1 + g_language));
			break;
		case 16:
			v_reason_string = a_message_text("show_detail", 739, (1 + g_language));
			break;
		case 17:
			v_reason_string = a_message_text("show_detail", 830, (1 + g_language));
			break;
		case 18:
			v_reason_string = a_message_text("show_detail", 132, (1 + g_language));
			break;
		case 19:
			v_reason_string = a_message_text("show_detail", 372, (1 + g_language));
			break;
		case 20:
			v_reason_string = a_message_text("show_detail", 631, (1 + g_language));
			break;
		case 21:
			v_reason_string = a_message_text("show_detail", 626, (1 + g_language)) + " " + a_monster("show_detail", a_hscores("show_detail", v_akt_eintrag).f_cause_of_death_monster).f_name[(1 + g_language)];
			break;
		case 22:
			v_reason_string = a_message_text("show_detail", 630, (1 + g_language));
			break;
		case 23:
			v_reason_string = a_message_text("show_detail", 630, (1 + g_language));
			break;
		default:
			v_reason_string = "";
			break;
		}
		p_drawtext(v_xx, v_yy, a_message_text("show_detail", 249, (1 + g_language)), -1, 0);
		p_drawtext((v_xx + 200), v_yy, v_reason_string, -1, 0);
		v_yy = (v_yy + 5);
		v_yy = (v_yy + 15);
		v_ysave = v_yy;
		p_drawtext((v_xx - 100), v_yy, a_message_text("show_detail", 250, (1 + g_language)), -1, 0);
		v_j = 1;
		for (v_i = 1; v_i <= 30; v_i += 1) {
			if (a_hscores("show_detail", v_akt_eintrag).f_skills[v_i] > 0) {
				if (a_skills("show_detail", a_hscores("show_detail", v_akt_eintrag).f_skills[v_i], 1).f_gruppe == 1) {
					p_frontcolor(p_rgb(255, 1, 1));
				}
				if (a_skills("show_detail", a_hscores("show_detail", v_akt_eintrag).f_skills[v_i], 1).f_gruppe == 2) {
					p_frontcolor(p_rgb(138, 11, 88));
				}
				if (a_skills("show_detail", a_hscores("show_detail", v_akt_eintrag).f_skills[v_i], 1).f_gruppe == 3) {
					p_frontcolor(p_rgb(255, 1, 255));
				}
				if (a_skills("show_detail", a_hscores("show_detail", v_akt_eintrag).f_skills[v_i], 1).f_gruppe == 4) {
					p_frontcolor(p_rgb(1, 1, 255));
				}
				if (a_skills("show_detail", a_hscores("show_detail", v_akt_eintrag).f_skills[v_i], 1).f_gruppe == 5) {
					p_frontcolor(p_rgb(1, 255, 1));
				}
				if (a_skills("show_detail", a_hscores("show_detail", v_akt_eintrag).f_skills[v_i], 1).f_gruppe == 6) {
					p_frontcolor(p_rgb(1, 255, 255));
				}
				if (a_skills("show_detail", a_hscores("show_detail", v_akt_eintrag).f_skills[v_i], 1).f_gruppe == 7) {
					p_frontcolor(p_rgb(130, 115, 30));
				}
				if (a_skills("show_detail", a_hscores("show_detail", v_akt_eintrag).f_skills[v_i], 1).f_gruppe == 8) {
					p_frontcolor(p_rgb(150, 150, 150));
				}
				p_drawtext((v_xx + 50), v_yy, a_skills("show_detail", a_hscores("show_detail", v_akt_eintrag).f_skills[v_i], 1).f_name[(1 + g_language)], -1, 0);
			}
			v_yy = (v_yy + 15);
			v_j = (v_j + 1);
			if (v_j == 9) {
				v_xx = (v_xx + 150);
				v_yy = v_ysave;
				v_j = 1;
			}
		}
		p_stopdrawing();
		p_read_joystick();
		p_examinekeyboard();
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mmouse_links = p_mousebutton(1);
		v_mmouse_rechts = p_mousebutton(2);
		v_esc_but_x = 593;
		v_esc_but_y = 49;
		if (v_mmouse_x >= v_esc_but_x && v_mmouse_x <= (v_esc_but_x + 32) && v_mmouse_y >= v_esc_but_y && v_mmouse_y <= (v_esc_but_y + 32)) {
			p_clipsprite(6, 96, 32, 31, 31);
			if (v_mmouse_links == 1) {
				v_get_out = 4;
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, v_esc_but_x, v_esc_but_y);
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		if (v_get_out == 4 && !v_mmouse_links) {
			v_get_out = 3;
		}
		if (p_keyboardpushed(27) || p_keyboardpushed(32) || v_mmouse_rechts == 1 || a_jb("show_detail", 2) == 1 || p_keyboardpushed(13)) {
			if (v_get_out == 1) {
				v_get_out = 2;
			}
		} else {
			switch (v_get_out) {
			case 0:
				v_get_out = 1;
				break;
			case 2:
				v_get_out = 3;
				break;
			}
		}
	} while (!(v_get_out == 3));
}

static intptr_t p_show_highscore() {
	int16_t v_akt_eintrag = 0;
	int16_t v_akt_pos = 0;
	int16_t v_clicked = 0;
	intptr_t v_esc_but_x = 0;
	intptr_t v_esc_but_y = 0;
	int16_t v_get_out = 0;
	int16_t v_hs_delete_x = 0;
	int16_t v_hs_delete_y = 0;
	intptr_t v_i = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_result = 0;
	int16_t v_ret = 0;
	intptr_t v_wait_release1 = 0;
	intptr_t v_wohin = 0;
	intptr_t v_yy = 0;
	v_akt_pos = 1;
	v_wait_release1 = 1;
	v_ret = 0;
L_wieder_high: ;
	v_akt_eintrag = 0;
	v_get_out = 0;
	v_clicked = 0;
	do {
		v_akt_eintrag = 0;
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(33);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(1, 255, 1));
		p_drawtext(260, 18, "Highscores", -1, 0);
		v_yy = 75;
		p_drawtext(50, v_yy, "Nr", -1, 0);
		p_drawtext(100, v_yy, a_message_text("show_highscore", 154, (1 + g_language)), -1, 0);
		p_drawtext(400, v_yy, "Level", -1, 0);
		p_drawtext(450, v_yy, "MKS", -1, 0);
		p_drawtext(500, v_yy, a_message_text("show_highscore", 156, (1 + g_language)), -1, 0);
		p_drawtext(550, v_yy, a_message_text("show_highscore", 93, (1 + g_language)), -1, 0);
		v_yy = 95;
		for (v_i = 1; v_i <= 30; v_i += 1) {
			p_frontcolor(p_rgb(255, 255, 255));
			if (v_i == v_akt_pos) {
				p_frontcolor(p_rgb(150, 150, 150));
				p_box(16, (v_yy + 1), 608, (p_textheight("Iq") - 2), -1);
				p_frontcolor(p_rgb(0, 0, 0));
			}
			if (v_i == g_letzter_eintrag) {
				p_frontcolor(p_rgb(255, 1, 1));
			}
			if (v_mmouse_y > ((v_i * 12) + 85) && v_mmouse_y < ((v_i * 12) + 98)) {
				p_frontcolor(p_rgb(1, 1, 255));
				if (v_mmouse_links == 1) {
					v_akt_eintrag = v_i;
				}
			}
			p_drawtext(50, v_yy, p_str(v_i), -1, 0);
			p_drawtext(100, v_yy, a_hscores("show_highscore", v_i).f_name, -1, 0);
			p_drawtext(400, v_yy, p_str(a_hscores("show_highscore", v_i).f_level), -1, 0);
			p_drawtext(450, v_yy, p_str(a_hscores("show_highscore", v_i).f_mks), -1, 0);
			p_drawtext(500, v_yy, p_str(a_hscores("show_highscore", v_i).f_gold), -1, 0);
			p_drawtext(550, v_yy, p_str(a_hscores("show_highscore", v_i).f_punkte), -1, 0);
			v_yy = (v_yy + 12);
		}
		p_stopdrawing();
		p_read_joystick();
		p_examinekeyboard();
		if (p_keyboardpushed(274) || g_jay == 1) {
			if (v_wait_release1 == 1) {
				p_keydelay(1);
				v_wait_release1 = 0;
				v_akt_pos = (v_akt_pos + 1);
				if (v_akt_pos > 30) {
					v_akt_pos = 30;
				}
			}
		}
		if (p_keyboardpushed(273) || g_jay == -1) {
			if (v_wait_release1 == 1) {
				p_keydelay(1);
				v_wait_release1 = 0;
				v_akt_pos = (v_akt_pos - 1);
				if (v_akt_pos < 1) {
					v_akt_pos = 1;
				}
			}
		}
		if (!(p_keyboardpushed(273) || p_keyboardpushed(274) || g_jay) || p_keydelay(0)) {
			v_wait_release1 = 1;
		}
		if (p_keyboardpushed(120)) {
			p_clear_highscores();
		}
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mmouse_links = p_mousebutton(1);
		v_mmouse_rechts = p_mousebutton(2);
		v_esc_but_x = 593;
		v_esc_but_y = 49;
		if (v_mmouse_x >= v_esc_but_x && v_mmouse_x <= (v_esc_but_x + 32) && v_mmouse_y >= v_esc_but_y && v_mmouse_y <= (v_esc_but_y + 32)) {
			p_clipsprite(6, 96, 32, 31, 31);
			if (v_mmouse_links == 1) {
				v_get_out = 1;
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, v_esc_but_x, v_esc_but_y);
		v_hs_delete_x = 525;
		v_hs_delete_y = 55;
		if (v_mmouse_x >= v_hs_delete_x && v_mmouse_x <= (v_hs_delete_x + 16) && v_mmouse_y >= v_hs_delete_y && v_mmouse_y <= (v_hs_delete_y + 16)) {
			p_clipsprite(36, 144, 48, 14, 14);
			p_displaysprite(36, v_hs_delete_x, v_hs_delete_y);
			if (v_mmouse_links == 1) {
				v_clicked = 1;
			}
			if (v_clicked == 1) {
				if (!v_mmouse_links) {
					v_clicked = 0;
					p_clear_highscores();
				}
			}
		} else {
			p_clipsprite(36, 32, 32, 14, 14);
			p_displaysprite(36, v_hs_delete_x, v_hs_delete_y);
		}
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		if (p_keyboardpushed(13) || a_jb("show_highscore", 1) == 1 || p_keyboardpushed(32)) {
			if (v_ret == 1) {
				v_ret = 2;
			}
		} else {
			if (!v_ret) {
				v_ret = 1;
			}
		}
		if (p_keyboardpushed(27) || a_jb("show_highscore", 2) == 1 || v_mmouse_rechts == 1) {
			v_get_out = 1;
		}
	} while (!((v_mmouse_links == 1 && v_akt_eintrag > 0) || v_ret == 2 || v_get_out == 1));
	if (v_get_out == 1) {
		return 0;
	}
	if (v_mmouse_links == 1) {
		p_show_detail(v_akt_eintrag);
		goto L_wieder_high;
	}
	if (v_ret == 2) {
		p_show_detail(v_akt_pos);
		v_ret = 0;
		goto L_wieder_high;
	}
	if (v_mmouse_rechts == 1) {
		g_letzter_eintrag = 0;
	}
}

static intptr_t p_show_old_messages() {
	int16_t v_but_x = 0;
	int16_t v_but_y = 0;
	intptr_t v_i = 0;
	intptr_t v_mouse_links = 0;
	intptr_t v_mouse_rechts = 0;
	intptr_t v_mouse_x = 0;
	intptr_t v_mouse_y = 0;
	int16_t v_raus = 0;
	int16_t v_released = 0;
	intptr_t v_result = 0;
	intptr_t v_wohin = 0;
	int16_t v_y = 0;
	v_released = 0;
	v_raus = 0;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(-1);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(250, 30, a_message_text("show_old_messages", 660, (1 + g_language)), -1, 0);
		v_y = 60;
		for (v_i = 1; v_i <= 25; v_i += 1) {
			switch (a_old_messages("show_old_messages", v_i, g_akt_spieler).f_farbe) {
			case 1:
				p_frontcolor(p_rgb(255, 255, 255));
				break;
			case 2:
				p_frontcolor(p_rgb(1, 1, 255));
				break;
			case 3:
				p_frontcolor(p_rgb(255, 1, 1));
				break;
			case 4:
				p_frontcolor(p_rgb(1, 255, 1));
				break;
			case 5:
				p_frontcolor(p_rgb(255, 255, 1));
				break;
			case 6:
				p_frontcolor(p_rgb(150, 150, 150));
				break;
			}
			p_drawtext(50, v_y, a_old_messages("show_old_messages", v_i, g_akt_spieler).f_nachricht, -1, 0);
			v_y = (v_y + 15);
		}
		p_stopdrawing();
		v_result = p_examinemouse();
		v_mouse_x = p_mousex();
		v_mouse_y = p_mousey();
		v_mouse_links = 0;
		v_mouse_rechts = 0;
		v_mouse_links = p_mousebutton(1);
		v_mouse_rechts = p_mousebutton(2);
		v_but_x = 593;
		v_but_y = 16;
		if (v_mouse_x >= v_but_x && v_mouse_x <= (v_but_x + 32) && v_mouse_y >= v_but_y && v_mouse_y <= (v_but_y + 32)) {
			p_clipsprite(6, 96, 32, 31, 31);
			if (v_mouse_links == 1) {
				v_raus = 1;
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, v_but_x, v_but_y);
		p_examinekeyboard();
		if (p_keyboardpushed(27) || v_mouse_rechts == 1) {
			v_raus = 1;
		}
		if (p_keyboardpushed(113)) {
			if (v_released == 1) {
				v_released = 2;
			}
		} else {
			if (!v_released) {
				v_released = 1;
			}
			if (v_released == 2) {
				v_raus = 1;
			}
		}
		p_draw_mousepointer(v_mouse_x, v_mouse_y);
		p_flipbuffers(1);
	} while (!(v_raus == 1));
}

static intptr_t p_show_varys(int16_t v_skip_effects) {
	std::string v_dauer;
	int16_t v_erkl = 0;
	float v_faktor = 0.0;
	int16_t v_gibts = 0;
	intptr_t v_i = 0;
	int16_t v_last_msg = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	int16_t v_pos = 0;
	int16_t v_pos2 = 0;
	intptr_t v_result = 0;
	int16_t v_ruestung_kaputt = 0;
	std::string v_tmptxt;
	int16_t v_waffe_kaputt = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	intptr_t v_zz = 0;
	v_result = p_examinemouse();
	v_mmouse_x = p_mousex();
	v_mmouse_y = p_mousey();
	v_mmouse_rechts = p_mousebutton(2);
	v_x = 400;
	v_y = 104;
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	p_frontcolor(p_rgb(0, 0, 0));
	p_box(v_x, v_y, 160, 55, -1);
	p_stopdrawing();
	if (a_spieler("show_varys", g_akt_spieler).f_lifepoints > p_maxlife()) {
		a_spieler("show_varys", g_akt_spieler).f_lifepoints = p_maxlife();
	}
	if (a_spieler("show_varys", g_akt_spieler).f_speed > p_maxspeed()) {
		a_spieler("show_varys", g_akt_spieler).f_speed = p_maxspeed();
	}
	if (g_flaschen == 1) {
		v_faktor = (p_maxlife() / 32.0);
		v_pos = ((a_spieler("show_varys", g_akt_spieler).f_lifepoints / v_faktor) - 1.0);
		if (p_maxlife() == a_spieler("show_varys", g_akt_spieler).f_lifepoints) {
			v_pos2 = 837;
		} else {
			v_pos2 = ((27 * v_pos) - 27);
		}
		p_clipsprite(67, v_pos2, 0, 27, 49);
		p_displaysprite(67, 375, 105);
		v_faktor = (p_maxmana() / 32.0);
		v_pos = ((a_spieler("show_varys", g_akt_spieler).f_mana / v_faktor) - 1.0);
		if (p_maxmana() == a_spieler("show_varys", g_akt_spieler).f_mana) {
			v_pos2 = 837;
		} else {
			v_pos2 = ((27 * v_pos) - 27);
		}
		p_clipsprite(66, v_pos2, 0, 27, 49);
		p_displaysprite(66, 430, 105);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(239, 131, 44));
		p_drawtext((v_x + 70), (v_y + 15), a_message_text("show_varys", 77, (g_language + 1)), -1, 0);
		p_drawtext((v_x + 155), (v_y + 15), p_str(a_spieler("show_varys", g_akt_spieler).f_speed) + "/" + p_str(p_maxspeed()), -1, 0);
		p_frontcolor(p_rgb(154, 251, 120));
		p_drawtext((v_x + 70), (v_y + 30), a_message_text("show_varys", 525, (g_language + 1)), -1, 0);
		p_drawtext((v_x + 155), (v_y + 30), p_str(a_spieler("show_varys", g_akt_spieler).f_level), -1, 0);
	} else {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(247, 36, 61));
		p_drawtext(v_x, v_y, a_message_text("show_varys", 55, (g_language + 1)), -1, 0);
		p_drawtext((v_x + 110), v_y, p_str(a_spieler("show_varys", g_akt_spieler).f_lifepoints) + "/" + p_str(p_maxlife()), -1, 0);
		p_frontcolor(p_rgb(130, 125, 250));
		p_drawtext(v_x, (v_y + 15), a_message_text("show_varys", 59, (g_language + 1)), -1, 0);
		p_drawtext((v_x + 115), (v_y + 15), p_str(a_spieler("show_varys", g_akt_spieler).f_mana) + "/" + p_str(p_maxmana()), -1, 0);
		p_frontcolor(p_rgb(239, 131, 44));
		p_drawtext(v_x, (v_y + 30), a_message_text("show_varys", 77, (g_language + 1)), -1, 0);
		p_drawtext((v_x + 115), (v_y + 30), p_str(a_spieler("show_varys", g_akt_spieler).f_speed) + "/" + p_str(p_maxspeed()), -1, 0);
		p_frontcolor(p_rgb(154, 251, 120));
		p_drawtext(v_x, (v_y + 45), a_message_text("show_varys", 525, (g_language + 1)), -1, 0);
		p_drawtext((v_x + 115), (v_y + 45), p_str(a_spieler("show_varys", g_akt_spieler).f_level), -1, 0);
	}
	p_stopdrawing();
	p_clipsprite(0, 128, ((a_spieler("show_varys", g_akt_spieler).f_maennchen * 32) - 32), 32, 32);
	p_displaytransparentsprite(0, 590, 120);
	v_last_msg = 25;
	while (a_old_messages("show_varys", v_last_msg, g_akt_spieler).f_nachricht == " " && v_last_msg > 1) {
		v_last_msg -= 1;
	}
	if ((v_last_msg - 1) > 0) {
		p_last_message((v_last_msg - 1), 380);
	}
	p_last_message(v_last_msg, 395);
	if (v_skip_effects > 0) {
		return 0;
	}
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	v_x = 400;
	v_y = 174;
	p_frontcolor(p_rgb(0, 0, 0));
	if (a_spieler("show_varys", g_akt_spieler).f_schleichen > 0) {
		v_y = (v_y + 10);
		p_frontcolor(p_rgb(150, 150, 150));
		p_drawtext(v_x, v_y, a_message_text("show_varys", 78, (1 + g_language)), -1, 0);
	}
	p_stopdrawing();
	for (v_i = 1; v_i <= 30; v_i += 1) {
		if (a_aktive("show_varys", v_i, g_akt_spieler).f_nr > 0) {
			v_gibts = 0;
			for (v_zz = 1; v_zz <= (v_i - 1); v_zz += 1) {
				if (a_aktive("show_varys", v_i, g_akt_spieler).f_nr == a_aktive("show_varys", v_zz, g_akt_spieler).f_nr) {
					v_gibts = 1;
				}
			}
			if (!v_gibts) {
				v_y = (v_y + 16);
				if (v_mmouse_x >= v_x && v_mmouse_x <= (v_x + 120) && v_mmouse_y >= v_y && v_mmouse_y <= (v_y + 15)) {
					p_clipsprite(36, 32, 48, 16, 16);
					p_displaytransparentsprite(36, (v_x - 20), v_y);
					if (v_mmouse_rechts == 1) {
						if (a_aktive("show_varys", v_i, g_akt_spieler).f_dauer != -1) {
							a_aktive("show_varys", v_i, g_akt_spieler).f_nr = 0;
							a_aktive("show_varys", v_i, g_akt_spieler).f_staerke = 0;
							p_delay(g_mydelay);
						}
					}
				}
				switch (a_aktive("show_varys", v_i, g_akt_spieler).f_nr) {
				case 200:
					p_clipsprite(36, 0, 0, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 86:
					p_clipsprite(36, 32, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 87:
					p_clipsprite(36, 32, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 88:
					p_clipsprite(36, 32, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 89:
					p_clipsprite(36, 32, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 90:
					p_clipsprite(36, 32, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 82:
					p_clipsprite(36, 144, 0, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 70:
					p_clipsprite(36, 64, 0, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 71:
					p_clipsprite(36, 80, 0, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 61:
					p_clipsprite(36, 96, 0, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 7:
					p_clipsprite(36, 16, 32, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 68:
					p_clipsprite(36, 0, 32, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 59:
					p_clipsprite(36, 144, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 75:
					p_clipsprite(36, 80, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 85:
					p_clipsprite(36, 0, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 18:
					p_clipsprite(36, 48, 0, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 33:
					p_clipsprite(36, 64, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 45:
					p_clipsprite(36, 144, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 46:
					p_clipsprite(36, 112, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 52:
					p_clipsprite(36, 96, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 26:
					p_clipsprite(36, 96, 0, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 40:
					p_clipsprite(36, 48, 32, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 36:
					p_clipsprite(36, 16, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 37:
					p_clipsprite(36, 112, 0, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 38:
					p_clipsprite(36, 16, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 79:
					p_clipsprite(36, 144, 0, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 80:
					p_clipsprite(36, 0, 48, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 183:
					p_clipsprite(36, 0, 64, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 48:
					p_clipsprite(36, 16, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 49:
					p_clipsprite(36, 128, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 35:
					p_clipsprite(36, 16, 0, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 102:
					p_clipsprite(36, 128, 32, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 109:
					p_clipsprite(36, 64, 32, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 110:
					p_clipsprite(36, 48, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 118:
					p_clipsprite(36, 112, 32, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 119:
					p_clipsprite(36, 112, 0, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 103:
					p_clipsprite(36, 144, 32, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 120:
					p_clipsprite(36, 96, 32, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 121:
					p_clipsprite(36, 64, 32, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 124:
					p_clipsprite(36, 64, 16, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 130:
					p_clipsprite(36, 48, 48, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 141:
					p_clipsprite(36, 48, 32, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 142:
					p_clipsprite(36, 80, 48, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 143:
					p_clipsprite(36, 64, 48, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 145:
					p_clipsprite(36, 112, 32, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 151:
					p_clipsprite(36, 0, 48, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 154:
					p_clipsprite(36, 112, 48, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 165:
					p_clipsprite(36, 16, 48, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 166:
					p_clipsprite(36, 32, 32, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 175:
					p_clipsprite(36, 32, 0, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				case 176:
					p_clipsprite(36, 16, 0, 16, 16);
					p_displaysprite(36, v_x, v_y);
					break;
				}
				if (a_aktive("show_varys", v_i, g_akt_spieler).f_nr == 168 || a_aktive("show_varys", v_i, g_akt_spieler).f_nr == 169 || a_aktive("show_varys", v_i, g_akt_spieler).f_nr == 170 || a_aktive("show_varys", v_i, g_akt_spieler).f_nr == 171) {
					p_clipsprite(36, 0, 15, 15, 15);
					p_displaysprite(36, v_x, v_y);
				}
				if (a_aktive("show_varys", v_i, g_akt_spieler).f_nr == 156 || a_aktive("show_varys", v_i, g_akt_spieler).f_nr == 157 || a_aktive("show_varys", v_i, g_akt_spieler).f_nr == 158 || a_aktive("show_varys", v_i, g_akt_spieler).f_nr == 159 || a_aktive("show_varys", v_i, g_akt_spieler).f_nr == 160 || a_aktive("show_varys", v_i, g_akt_spieler).f_nr == 161) {
					p_clipsprite(36, 143, 0, 15, 15);
					p_displaysprite(36, v_x, v_y);
				}
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_drawingmode(1);
				p_frontcolor(p_rgb(255, 255, 1));
				v_dauer = "";
				if (a_aktive("show_varys", v_i, g_akt_spieler).f_dauer != -1) {
					v_dauer = " (" + p_str(a_aktive("show_varys", v_i, g_akt_spieler).f_dauer) + ")";
				}
				if (a_aktive("show_varys", v_i, g_akt_spieler).f_dauer == -2) {
					v_dauer = " (1*)";
				}
				p_drawtext((v_x + 20), v_y, a_spells("show_varys", a_aktive("show_varys", v_i, g_akt_spieler).f_nr).f_name[(1 + g_language)] + v_dauer, -1, 0);
				p_stopdrawing();
			}
		}
	}
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	v_waffe_kaputt = 0;
	v_ruestung_kaputt = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_inventory("show_varys", v_i, g_akt_spieler).f_benutzt == 1 && (a_inventory("show_varys", v_i, g_akt_spieler).f_status == 1 || a_inventory("show_varys", v_i, g_akt_spieler).f_status == 2)) {
			if (a_item("show_varys", a_inventory("show_varys", v_i, g_akt_spieler).f_name).f_type == 1) {
				v_waffe_kaputt = 1;
			}
			if (a_item("show_varys", a_inventory("show_varys", v_i, g_akt_spieler).f_name).f_type == 6 || a_item("show_varys", a_inventory("show_varys", v_i, g_akt_spieler).f_name).f_type == 7 || a_item("show_varys", a_inventory("show_varys", v_i, g_akt_spieler).f_name).f_type == 8 || a_item("show_varys", a_inventory("show_varys", v_i, g_akt_spieler).f_name).f_type == 9 || a_item("show_varys", a_inventory("show_varys", v_i, g_akt_spieler).f_name).f_type == 11) {
				v_ruestung_kaputt = 1;
			}
		}
	}
	if (v_waffe_kaputt > 0) {
		v_y = (v_y + 16);
		p_frontcolor(p_rgb(255, 1, 1));
		p_drawtext(v_x, v_y, a_message_text("show_varys", 646, (1 + g_language)), -1, 0);
	}
	if (v_ruestung_kaputt > 0) {
		v_y = (v_y + 16);
		p_frontcolor(p_rgb(255, 1, 1));
		p_drawtext(v_x, v_y, a_message_text("show_varys", 647, (1 + g_language)), -1, 0);
	}
	if (a_spieler("show_varys", g_akt_spieler).f_lifepoints <= (p_maxlife() / 6) || a_spieler("show_varys", g_akt_spieler).f_lifepoints <= 3) {
		v_y = (v_y + 16);
		p_frontcolor(p_rgb(255, 1, 1));
		p_drawtext(v_x, v_y, a_message_text("show_varys", 662, (1 + g_language)), -1, 0);
	} else {
		if (a_spieler("show_varys", g_akt_spieler).f_lifepoints <= (p_maxlife() / 4) || a_spieler("show_varys", g_akt_spieler).f_lifepoints <= 5) {
			v_y = (v_y + 16);
			p_frontcolor(p_rgb(255, 1, 1));
			p_drawtext(v_x, v_y, a_message_text("show_varys", 661, (1 + g_language)), -1, 0);
		}
	}
	if (a_spieler("show_varys", g_akt_spieler).f_betrunken > 0) {
		v_y = (v_y + 16);
		p_frontcolor(p_rgb(1, 255, 1));
		p_drawtext(v_x, v_y, a_message_text("show_varys", 699, (1 + g_language)), -1, 0);
	}
	if (p_belastung() > 0) {
		v_y = (v_y + 16);
		p_frontcolor(p_rgb(255, 1, 1));
		p_drawtext(v_x, v_y, a_message_text("show_varys", 86, (1 + g_language)) + " " + p_str(p_belastung()), -1, 0);
	}
	if (a_spieler("show_varys", g_akt_spieler).f_poison > 0) {
		v_y = (v_y + 16);
		p_frontcolor(p_rgb(1, 255, 1));
		p_drawtext(v_x, v_y, a_message_text("show_varys", 645, (1 + g_language)) + p_str(a_spieler("show_varys", g_akt_spieler).f_poison), -1, 0);
	}
	if (a_spieler("show_varys", g_akt_spieler).f_verhungern > 0) {
		v_y = (v_y + 16);
		if (a_spieler("show_varys", g_akt_spieler).f_hunger < 80) {
			v_tmptxt = " (" + p_str(((int64_t) 80 - a_spieler("show_varys", g_akt_spieler).f_hunger)) + ")";
		}
		if (a_spieler("show_varys", g_akt_spieler).f_hunger >= 80 && a_spieler("show_varys", g_akt_spieler).f_hunger < 120) {
			v_tmptxt = " (" + p_str(((int64_t) 120 - a_spieler("show_varys", g_akt_spieler).f_hunger)) + ")";
		}
		if (a_spieler("show_varys", g_akt_spieler).f_hunger >= 120 && a_spieler("show_varys", g_akt_spieler).f_hunger < 160) {
			v_tmptxt = " (" + p_str(((int64_t) 160 - a_spieler("show_varys", g_akt_spieler).f_hunger)) + ")";
		}
		if (a_spieler("show_varys", g_akt_spieler).f_hunger >= 160 && a_spieler("show_varys", g_akt_spieler).f_hunger < 350) {
			v_tmptxt = " (" + p_str(((int64_t) 350 - a_spieler("show_varys", g_akt_spieler).f_hunger)) + ")";
		}
		if (a_spieler("show_varys", g_akt_spieler).f_hunger >= 350) {
			v_tmptxt = " (" + p_str(((int64_t) a_spieler("show_varys", g_akt_spieler).f_hunger - 350)) + ")";
		}
		p_frontcolor(p_rgb(1, 1, 255));
		switch (a_spieler("show_varys", g_akt_spieler).f_verhungern) {
		case 1:
			p_drawtext(v_x, v_y, a_message_text("show_varys", 97, (g_language + 1)) + v_tmptxt, -1, 0);
			break;
		case 2:
			p_drawtext(v_x, v_y, a_message_text("show_varys", 98, (g_language + 1)) + v_tmptxt, -1, 0);
			break;
		case 3:
			p_drawtext(v_x, v_y, a_message_text("show_varys", 99, (g_language + 1)) + v_tmptxt, -1, 0);
			break;
		case 4:
			p_drawtext(v_x, v_y, a_message_text("show_varys", 772, (g_language + 1)) + v_tmptxt, -1, 0);
			break;
		}
	}
	if (a_spieler("show_varys", g_akt_spieler).f_verdursten > 0) {
		v_y = (v_y + 16);
		if (a_spieler("show_varys", g_akt_spieler).f_durst < 60) {
			v_tmptxt = " (" + p_str(((int64_t) 60 - a_spieler("show_varys", g_akt_spieler).f_hunger)) + ")";
		}
		if (a_spieler("show_varys", g_akt_spieler).f_durst >= 60 && a_spieler("show_varys", g_akt_spieler).f_hunger < 90) {
			v_tmptxt = " (" + p_str(((int64_t) 90 - a_spieler("show_varys", g_akt_spieler).f_hunger)) + ")";
		}
		if (a_spieler("show_varys", g_akt_spieler).f_durst >= 90 && a_spieler("show_varys", g_akt_spieler).f_hunger < 120) {
			v_tmptxt = " (" + p_str(((int64_t) 120 - a_spieler("show_varys", g_akt_spieler).f_hunger)) + ")";
		}
		if (a_spieler("show_varys", g_akt_spieler).f_durst >= 120 && a_spieler("show_varys", g_akt_spieler).f_hunger < 320) {
			v_tmptxt = " (" + p_str(((int64_t) 320 - a_spieler("show_varys", g_akt_spieler).f_hunger)) + ")";
		}
		if (a_spieler("show_varys", g_akt_spieler).f_durst >= 320) {
			v_tmptxt = " (" + p_str(((int64_t) a_spieler("show_varys", g_akt_spieler).f_hunger - 320)) + ")";
		}
		p_frontcolor(p_rgb(1, 1, 255));
		switch (a_spieler("show_varys", g_akt_spieler).f_verdursten) {
		case 1:
			p_drawtext(v_x, v_y, a_message_text("show_varys", 94, (g_language + 1)) + v_tmptxt, -1, 0);
			break;
		case 2:
			p_drawtext(v_x, v_y, a_message_text("show_varys", 95, (g_language + 1)) + v_tmptxt, -1, 0);
			break;
		case 3:
			p_drawtext(v_x, v_y, a_message_text("show_varys", 96, (g_language + 1)) + v_tmptxt, -1, 0);
			break;
		case 4:
			p_drawtext(v_x, v_y, a_message_text("show_varys", 773, (g_language + 1)) + v_tmptxt, -1, 0);
			break;
		}
	}
	if (a_spieler("show_varys", g_akt_spieler).f_krankheit > 0) {
		v_y = (v_y + 16);
		p_frontcolor(p_rgb(1, 255, 1));
		p_drawtext(v_x, v_y, a_message_text("show_varys", 825, (1 + g_language)) + " " + p_str(a_spieler("show_varys", g_akt_spieler).f_krankheit), -1, 0);
	}
	if (a_spieler("show_varys", g_akt_spieler).f_fluch > 0) {
		v_y = (v_y + 16);
		p_frontcolor(p_rgb(150, 150, 150));
		v_erkl = 0;
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 1) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 131, (g_language + 1)), -1, 0);
			v_erkl = 838;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 2) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 132, (g_language + 1)), -1, 0);
			v_erkl = 839;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 3) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 133, (g_language + 1)), -1, 0);
			v_erkl = 840;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 4) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 134, (g_language + 1)), -1, 0);
			v_erkl = 841;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 5) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 135, (g_language + 1)), -1, 0);
			v_erkl = 842;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 6) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 136, (g_language + 1)), -1, 0);
			v_erkl = 843;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 7) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 137, (g_language + 1)), -1, 0);
			v_erkl = 844;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 8) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 138, (g_language + 1)), -1, 0);
			v_erkl = 845;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 9) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 139, (g_language + 1)), -1, 0);
			v_erkl = 846;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 10) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 140, (g_language + 1)), -1, 0);
			v_erkl = 847;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 11) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 141, (g_language + 1)), -1, 0);
			v_erkl = 848;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 12) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 142, (g_language + 1)), -1, 0);
			v_erkl = 849;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 13) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 143, (g_language + 1)), -1, 0);
			v_erkl = 850;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 14) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 144, (g_language + 1)), -1, 0);
			v_erkl = 851;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 15) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 145, (g_language + 1)), -1, 0);
			v_erkl = 852;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 16) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 146, (g_language + 1)), -1, 0);
			v_erkl = 853;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 17) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 147, (g_language + 1)), -1, 0);
			v_erkl = 854;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 18) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 148, (g_language + 1)), -1, 0);
			v_erkl = 855;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 19) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 149, (g_language + 1)), -1, 0);
			v_erkl = 856;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 20) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 150, (g_language + 1)), -1, 0);
			v_erkl = 857;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 21) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 151, (g_language + 1)), -1, 0);
			v_erkl = 858;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 22) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 152, (g_language + 1)), -1, 0);
			v_erkl = 859;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 23) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 153, (g_language + 1)), -1, 0);
			v_erkl = 860;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 24) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 749, (g_language + 1)), -1, 0);
			v_erkl = 861;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 25) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 750, (g_language + 1)), -1, 0);
			v_erkl = 862;
		}
		if (a_spieler("show_varys", g_akt_spieler).f_fluch == 26) {
			p_drawtext(v_x, v_y, a_message_text("show_varys", 751, (g_language + 1)), -1, 0);
			v_erkl = 863;
		}
		if (v_mmouse_x >= v_x && v_mmouse_x <= (v_x + 120) && v_mmouse_y >= v_y && v_mmouse_y <= (v_y + 15) && v_erkl) {
			p_clearmessagewindow();
			p_frontcolor(p_rgb(150, 150, 150));
			p_drawtext(25, 400, a_message_text("show_varys", v_erkl, (1 + g_language)), -1, 0);
			p_stopdrawing();
			return 0;
		}
	}
	p_stopdrawing();
}

static intptr_t p_sonderlevel_text(int16_t v_nr) {
	int16_t v_akt_color = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_nachricht1 = 0;
	intptr_t v_nachricht2 = 0;
	intptr_t v_nachricht3 = 0;
	intptr_t v_nachricht4 = 0;
	int16_t v_raus = 0;
	int16_t v_release = 0;
	intptr_t v_result = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	if (v_nr == 26 || v_nr == 25) {
		p_sound(39);
	} else {
		if (v_nr == 13 || v_nr == 17) {
			p_sound(51);
		}
	}
	v_raus = 0;
	v_release = 1;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_laby_rahmen(0);
		p_show_logo();
		p_show_varys(0);
		p_show_buttons();
		v_akt_color = 1;
		if (v_nr == 1) {
			p_clipsprite(29, 1, 1, 335, 335);
			p_displaytransparentsprite(29, 16, 16);
			v_nachricht1 = 157;
			v_nachricht2 = 158;
			v_nachricht3 = 159;
			v_nachricht4 = 160;
		}
		if (v_nr == 2) {
			p_clipsprite(30, 1, 1, 335, 335);
			p_displaytransparentsprite(30, 16, 16);
			v_nachricht1 = 161;
			v_nachricht2 = 162;
			v_nachricht3 = 163;
			v_nachricht4 = 164;
		}
		if (v_nr == 3) {
			p_clipsprite(28, 1, 1, 335, 335);
			p_displaytransparentsprite(28, 16, 16);
			v_nachricht1 = 165;
			v_nachricht2 = 166;
			v_nachricht3 = 167;
			v_nachricht4 = 0;
		}
		if (v_nr == 4) {
			p_clipsprite(31, 1, 1, 335, 335);
			p_displaytransparentsprite(31, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 168;
			v_nachricht2 = 169;
			v_nachricht3 = 170;
			v_nachricht4 = 171;
		}
		if (v_nr == 5) {
			p_clipsprite(33, 1, 1, 335, 335);
			p_displaytransparentsprite(33, 16, 16);
			v_nachricht1 = 172;
			v_nachricht2 = 173;
			v_nachricht3 = 174;
			v_nachricht4 = 0;
		}
		if (v_nr == 6) {
			p_clipsprite(32, 1, 1, 335, 335);
			p_displaytransparentsprite(32, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 201;
			v_nachricht2 = 202;
			v_nachricht3 = 0;
			v_nachricht4 = 0;
		}
		if (v_nr == 7) {
			p_clipsprite(42, 1, 1, 335, 335);
			p_displaytransparentsprite(42, 16, 16);
			v_nachricht1 = 292;
			v_nachricht2 = 293;
			v_nachricht3 = 294;
			v_nachricht4 = 0;
		}
		if (v_nr == 8) {
			p_clipsprite(40, 1, 1, 335, 335);
			p_displaytransparentsprite(40, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 295;
			v_nachricht2 = 296;
			v_nachricht3 = 297;
			v_nachricht4 = 0;
		}
		if (v_nr == 9) {
			p_clipsprite(52, 1, 1, 335, 335);
			p_displaytransparentsprite(52, 16, 16);
			v_nachricht1 = 488;
			v_nachricht2 = 489;
			v_nachricht3 = 490;
			v_nachricht4 = 0;
		}
		if (v_nr == 10) {
			p_clipsprite(51, 1, 1, 335, 335);
			p_displaytransparentsprite(51, 16, 16);
			v_nachricht1 = 491;
			v_nachricht2 = 492;
			v_nachricht3 = 493;
			v_nachricht4 = 0;
		}
		if (v_nr == 26) {
			p_clipsprite(35, 1, 1, 335, 335);
			p_displaytransparentsprite(35, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 127;
			v_nachricht2 = 128;
			v_nachricht3 = 129;
			v_nachricht4 = 0;
		}
		if (v_nr == 12) {
			p_clipsprite(28, 1, 1, 335, 335);
			p_displaytransparentsprite(28, 16, 16);
			v_nachricht1 = 484;
			v_nachricht2 = 485;
			v_nachricht3 = 0;
			v_nachricht4 = 0;
		}
		if (v_nr == 13) {
			p_clipsprite(14, 1, 1, 335, 335);
			p_displaytransparentsprite(14, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 218;
			v_nachricht2 = 219;
			v_nachricht3 = 220;
			v_nachricht4 = 0;
		}
		if (v_nr == 14) {
			p_clipsprite(30, 1, 1, 335, 335);
			p_displaytransparentsprite(30, 16, 16);
			v_nachricht1 = 234;
			v_nachricht2 = 235;
			v_nachricht3 = 0;
			v_nachricht4 = 0;
		}
		if (v_nr == 15) {
			p_clipsprite(33, 1, 1, 335, 335);
			p_displaytransparentsprite(33, 16, 16);
			v_nachricht1 = 236;
			v_nachricht2 = 237;
			v_nachricht3 = 0;
			v_nachricht4 = 0;
		}
		if (v_nr == 16) {
			p_clipsprite(39, 1, 1, 335, 335);
			p_displaytransparentsprite(39, 16, 16);
			v_nachricht1 = 270;
			v_nachricht2 = 271;
			v_nachricht3 = 272;
			v_nachricht4 = 0;
		}
		if (v_nr == 17) {
			p_clipsprite(41, 1, 1, 335, 335);
			p_displaytransparentsprite(41, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 282;
			v_nachricht2 = 283;
			v_nachricht3 = 284;
			v_nachricht4 = 285;
		}
		if (v_nr == 18) {
			p_clipsprite(43, 1, 1, 335, 335);
			p_displaytransparentsprite(43, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 301;
			v_nachricht2 = 302;
			v_nachricht3 = 303;
			v_nachricht4 = 304;
		}
		if (v_nr == 19) {
			p_clipsprite(43, 1, 1, 335, 335);
			p_displaytransparentsprite(43, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 305;
			v_nachricht2 = 306;
			v_nachricht3 = 307;
			v_nachricht4 = 308;
		}
		if (v_nr == 20) {
			p_clipsprite(33, 1, 1, 335, 335);
			p_displaytransparentsprite(33, 16, 16);
			v_nachricht1 = 331;
			v_nachricht2 = 332;
			v_nachricht3 = 333;
			v_nachricht4 = 0;
		}
		if (v_nr == 21) {
			p_clipsprite(74, 1, 1, 335, 335);
			p_displaytransparentsprite(74, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 335;
			v_nachricht2 = 336;
			v_nachricht3 = 337;
			v_nachricht4 = 0;
		}
		if (v_nr == 22) {
			p_clipsprite(44, 1, 1, 335, 335);
			p_displaytransparentsprite(44, 16, 16);
			v_nachricht1 = 345;
			v_nachricht2 = 346;
			v_nachricht3 = 347;
			v_nachricht4 = 0;
		}
		if (v_nr == 23) {
			p_clipsprite(14, 1, 1, 335, 335);
			p_displaytransparentsprite(14, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 410;
			v_nachricht2 = 411;
			v_nachricht3 = 0;
			v_nachricht4 = 0;
		}
		if (v_nr == 24) {
			p_clipsprite(14, 1, 1, 335, 335);
			p_displaytransparentsprite(14, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 426;
			v_nachricht2 = 0;
			v_nachricht3 = 0;
			v_nachricht4 = 0;
		}
		if (v_nr == 25) {
			p_clipsprite(48, 1, 1, 335, 335);
			p_displaytransparentsprite(48, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 500;
			v_nachricht2 = 501;
			v_nachricht3 = 502;
			v_nachricht4 = 0;
		}
		if (v_nr == 11) {
			p_clipsprite(50, 1, 1, 335, 335);
			p_displaytransparentsprite(50, 16, 16);
			v_nachricht1 = 504;
			v_nachricht2 = 505;
			v_nachricht3 = 506;
			v_nachricht4 = 0;
		}
		if (v_nr == 27) {
			p_clipsprite(14, 1, 1, 335, 335);
			p_displaytransparentsprite(14, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 125;
			v_nachricht2 = 123;
			v_nachricht3 = 124;
			v_nachricht4 = 0;
		}
		if (v_nr == 28) {
			p_clipsprite(14, 1, 1, 335, 335);
			p_displaytransparentsprite(14, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 640;
			v_nachricht2 = 641;
			v_nachricht3 = 642;
			v_nachricht4 = 643;
		}
		if (v_nr == 29) {
			p_clipsprite(14, 1, 1, 335, 335);
			p_displaytransparentsprite(14, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 722;
			v_nachricht2 = 723;
			v_nachricht3 = 724;
			v_nachricht4 = 0;
		}
		if (v_nr == 30) {
			p_clipsprite(65, 1, 1, 335, 335);
			p_displaytransparentsprite(65, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 725;
			v_nachricht2 = 726;
			v_nachricht3 = 727;
			v_nachricht4 = 0;
		}
		if (v_nr == 31) {
			p_clipsprite(49, 1, 1, 335, 335);
			p_displaytransparentsprite(49, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 742;
			v_nachricht2 = 743;
			v_nachricht3 = 744;
			v_nachricht4 = 745;
		}
		if (v_nr == 32) {
			p_clipsprite(14, 1, 1, 335, 335);
			p_displaytransparentsprite(14, 16, 16);
			v_akt_color = 2;
			v_nachricht1 = 746;
			v_nachricht2 = 747;
			v_nachricht3 = 0;
			v_nachricht4 = 0;
		}
		if (v_nr == 33) {
			p_clipsprite(53, 1, 1, 335, 335);
			p_displaytransparentsprite(53, 16, 16);
			v_nachricht1 = 867;
			v_nachricht2 = 868;
			v_nachricht3 = 869;
			v_nachricht4 = 870;
		}
		v_x = 45;
		v_y = 45;
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		switch (v_akt_color) {
		case 1:
			p_frontcolor(p_rgb(255, 1, 1));
			break;
		case 2:
			p_frontcolor(p_rgb(255, 255, 255));
			break;
		}
		p_drawingmode(1);
		if (v_nachricht1) {
			p_drawtext(v_x, v_y, p_nachricht4(v_nachricht1), -1, 0);
			v_y = (v_y + g_yplus);
		}
		if (v_nachricht2) {
			p_drawtext(v_x, v_y, p_nachricht4(v_nachricht2), -1, 0);
			v_y = (v_y + g_yplus);
		}
		if (v_nachricht3) {
			p_drawtext(v_x, v_y, p_nachricht4(v_nachricht3), -1, 0);
			v_y = (v_y + g_yplus);
		}
		if (v_nachricht4) {
			p_drawtext(v_x, v_y, p_nachricht4(v_nachricht4), -1, 0);
			v_y = (v_y + g_yplus);
		}
		p_stopdrawing();
		p_read_joystick();
		p_examinekeyboard();
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mmouse_rechts = p_mousebutton(2);
		v_mmouse_links = p_mousebutton(1);
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		if (!(p_keyboardpushed(32) || v_mmouse_links)) {
			v_release = 0;
		}
		if (!v_release && (p_keyboardpushed(32) || v_mmouse_links == 1)) {
			v_raus = 1;
		}
		p_flipbuffers(1);
	} while (!(p_keyboardpushed(13) || v_mmouse_rechts == 1 || a_jb("sonderlevel_text", 1) || p_keyboardpushed(27) || v_raus == 1));
	p_delay(g_mydelay);
}

static intptr_t p_spellweaving(int16_t v_weavable) {
	int16_t v_key = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_result = 0;
	std::string v_tmpstr;
	static intptr_t v_wait_release;
	intptr_t v_wohin = 0;
	if (!g_no_mouse) {
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mmouse_links = p_mousebutton(1);
	}
	for (v_key = 1; v_key <= 9; v_key += 1) {
		if (p_keyboardpushed(a_numpad_keys("spellweaving", v_key))) {
			a_spieler("spellweaving", g_akt_spieler).f_spellweaving = v_key;
		}
	}
	if (v_wait_release && !(p_keyboardpushed(270) || p_keyboardpushed(269) || v_mmouse_links)) {
		v_wait_release = 0;
	}
	if (!v_wait_release && p_keyboardpushed(270)) {
		a_spieler("spellweaving", g_akt_spieler).f_spellweaving += 1;
		if (a_spieler("spellweaving", g_akt_spieler).f_spellweaving > 9) {
			a_spieler("spellweaving", g_akt_spieler).f_spellweaving = 9;
		}
		v_wait_release = 1;
	}
	if (!v_wait_release && p_keyboardpushed(269)) {
		a_spieler("spellweaving", g_akt_spieler).f_spellweaving -= 1;
		if (a_spieler("spellweaving", g_akt_spieler).f_spellweaving < 1) {
			a_spieler("spellweaving", g_akt_spieler).f_spellweaving = 1;
		}
		v_wait_release = 1;
	}
	if (v_mmouse_x > 367 && v_mmouse_x < 399 && v_mmouse_y > 391 && v_mmouse_y < 423) {
		p_clipsprite(6, 192, 0, 31, 31);
		if (!v_wait_release && v_mmouse_links == 1) {
			v_wait_release = 1;
			a_spieler("spellweaving", g_akt_spieler).f_spellweaving = (a_spieler("spellweaving", g_akt_spieler).f_spellweaving + 1);
			if (a_spieler("spellweaving", g_akt_spieler).f_spellweaving > 9) {
				a_spieler("spellweaving", g_akt_spieler).f_spellweaving = 9;
			}
		}
	} else {
		p_clipsprite(6, 128, 0, 31, 31);
	}
	p_displaytransparentsprite(6, 367, 391);
	if (v_mmouse_x > 367 && v_mmouse_x < 399 && v_mmouse_y > 433 && v_mmouse_y < 465) {
		p_clipsprite(6, 224, 0, 31, 31);
		if (!v_wait_release && v_mmouse_links == 1) {
			v_wait_release = 1;
			a_spieler("spellweaving", g_akt_spieler).f_spellweaving = (a_spieler("spellweaving", g_akt_spieler).f_spellweaving - 1);
			if (a_spieler("spellweaving", g_akt_spieler).f_spellweaving < 1) {
				a_spieler("spellweaving", g_akt_spieler).f_spellweaving = 1;
			}
		}
	} else {
		p_clipsprite(6, 160, 0, 31, 31);
	}
	p_displaytransparentsprite(6, 367, 433);
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	p_frontcolor(p_rgb(255, 255, 255));
	v_tmpstr = p_str(a_spieler("spellweaving", g_akt_spieler).f_spellweaving) + "(";
	if (v_weavable) {
		p_frontcolor(p_rgb(255, 255, 255));
		v_tmpstr = v_tmpstr + p_str(a_spieler("spellweaving", g_akt_spieler).f_spellweaving) + ")";
	} else {
		p_frontcolor(p_rgb(150, 150, 150));
		v_tmpstr = v_tmpstr + "-)";
	}
	p_drawtext(372, 420, v_tmpstr, -1, 0);
	p_stopdrawing();
	p_delay(40);
}

static intptr_t p_spieler_angriffswert() {
	int16_t v_angriff = 0;
	v_angriff = (((20 + (p_angriff() * 10)) + (p_waffe_attack() * 10)) + (p_habich(35) * 10));
	if (!a_skills("spieler_angriffswert", 7, g_akt_spieler).f_gewaehlt) {
		v_angriff = (v_angriff - (g_behinderung * 10));
	}
	if (a_spieler("spieler_angriffswert", g_akt_spieler).f_fluch == 4) {
		v_angriff = 10;
	}
	return v_angriff;
}

static intptr_t p_template_to_player() {
	int16_t v_i = 0;
	p_reset_skills();
	for (v_i = 144; v_i >= 1; v_i -= 1) {
		if (LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[v_i] && a_skills("template_to_player", v_i, g_akt_spieler).f_nummer) {
			p_waehlen(v_i, 1);
			a_spieler("template_to_player", g_akt_spieler).f_skill_points -= a_skills("template_to_player", v_i, g_akt_spieler).f_kosten;
		}
	}
}

static intptr_t p_vergiften() {
	int16_t v_verkauf = 0;
	v_verkauf = p_select_inventory(452);
	if (v_verkauf) {
		if (a_item("vergiften", a_inventory("vergiften", v_verkauf, g_akt_spieler).f_name).f_type == 1) {
			if (!a_inventory("vergiften", v_verkauf, g_akt_spieler).f_status || a_inventory("vergiften", v_verkauf, g_akt_spieler).f_status == 1) {
				a_inventory("vergiften", v_verkauf, g_akt_spieler).f_status = 4;
				p_sound(14);
				p_message(453, 4);
			} else {
				p_message(455, 3);
			}
		} else {
			if (a_item("vergiften", a_inventory("vergiften", v_verkauf, g_akt_spieler).f_name).f_type == 13) {
				a_inventory("vergiften", v_verkauf, g_akt_spieler).f_attri5 = 4;
			} else {
				p_message(454, 3);
			}
		}
	}
}

static intptr_t p_zauberchance(int16_t v_spell) {
	int16_t v_chance = 0;
	v_chance = (a_learned("zauberchance", g_akt_spieler, v_spell) & 127);
	if (p_aus_schule(v_spell) == 1) {
		if (a_skills("zauberchance", 40, g_akt_spieler).f_gewaehlt == 1) {
			v_chance = p_max(99, v_chance);
		}
	}
	if (!a_skills("zauberchance", 45, g_akt_spieler).f_gewaehlt) {
		p_schutz();
		v_chance = (v_chance - (g_behinderung * 10));
	}
	if (a_spells("zauberchance", v_spell).f_school == 60 && a_skills("zauberchance", 60, g_akt_spieler).f_gewaehlt == 1) {
		v_chance = 100;
	}
	return v_chance;
}

static intptr_t p_zeige_unsichtbare(int16_t v_x_r, int16_t v_y_r) {
	int16_t v_mon_no = 0;
	int16_t v_sprite_x = 0;
	int16_t v_sprite_y = 0;
	int16_t v_xx = 0;
	int16_t v_yy = 0;
	v_xx = 0;
	v_yy = 0;
	v_mon_no = p_getmonster(v_x_r, v_y_r, -1);
	if (p_has_trait2(v_mon_no, 19) == 1) {
		if (v_x_r > a_spieler("zeige_unsichtbare", g_akt_spieler).f_character_x) {
			v_xx = 1;
		}
		if (v_x_r < a_spieler("zeige_unsichtbare", g_akt_spieler).f_character_x) {
			v_xx = -1;
		}
		if (v_y_r > a_spieler("zeige_unsichtbare", g_akt_spieler).f_character_y) {
			v_yy = 1;
		}
		if (v_y_r < a_spieler("zeige_unsichtbare", g_akt_spieler).f_character_y) {
			v_yy = -1;
		}
		v_sprite_x = (a_monster("zeige_unsichtbare", v_mon_no).f_nr - 1);
		v_sprite_y = (v_sprite_x / 10);
		v_sprite_x = (v_sprite_x % 10);
		p_clipsprite(9, (v_sprite_x * 32), (v_sprite_y * 32), 32, 32);
		p_displaytransparentsprite(9, (160 + (v_xx * 32)), (160 + (v_yy * 32)));
	}
}

static intptr_t p_creature_attacke() {
	return (a_spieler("creature_attacke", g_akt_spieler).f_creature_attack + (p_get_enchant_creature() * 10));
}

static intptr_t p_creature_lebenspunkte() {
	return (a_spieler("creature_lebenspunkte", g_akt_spieler).f_creature_lifepoints + p_get_enchant_creature());
}

static intptr_t p_creature_max_lebenspunkte() {
	return (a_spieler("creature_max_lebenspunkte", g_akt_spieler).f_creature_maxlifepoints + p_get_enchant_creature());
}

static intptr_t p_creature_schaden(int16_t v_wieviel, int16_t v_color, int16_t v_xmode, int16_t v_ymode) {
	intptr_t v_wohin = 0;
	intptr_t v_xx = 0;
	intptr_t v_yy = 0;
	p_clipsprite(38, (v_color * 32), 224, 32, 32);
	p_displaytransparentsprite(38, (160 + (v_xmode * 32)), (160 + (v_ymode * 32)));
	p_sound(p_random(12));
	if (v_color < 3) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		v_xx = 176;
		v_yy = 168;
		p_drawtext(((v_xx - (p_textwidth(p_str(v_wieviel)) / 2)) + (v_xmode * 32)), (v_yy + (v_ymode * 32)), p_str(v_wieviel), -1, 0);
		p_stopdrawing();
	}
	p_flipbuffers(1);
	p_delay(g_mydelay);
	a_spieler("creature_schaden", g_akt_spieler).f_creature_lifepoints = (a_spieler("creature_schaden", g_akt_spieler).f_creature_lifepoints - v_wieviel);
	if (p_creature_lebenspunkte() < 1 || v_color == 3) {
		a_spieler("creature_schaden", g_akt_spieler).f_creature_typ = 0;
		a_spieler("creature_schaden", g_akt_spieler).f_creature_lifepoints = 0;
		a_spieler("creature_schaden", g_akt_spieler).f_creature_speed = 0;
		a_spieler("creature_schaden", g_akt_spieler).f_creature_maxspeed = 0;
		a_spieler("creature_schaden", g_akt_spieler).f_creature_poison = 0;
		p_message(191, 3);
	}
}

static intptr_t p_dig_treasure(int16_t v_x, int16_t v_y, int16_t v_level) {
	int16_t v_container = 0;
	int16_t v_item = 0;
	if (a_labyrinth("dig_treasure", v_level, v_x, v_y).f_feld == 93 || a_labyrinth("dig_treasure", v_level, v_x, v_y).f_feld == 69) {
		p_sound(38);
		v_item = a_labyrinth("dig_treasure", v_level, v_x, v_y).f_stat2;
		v_container = a_labyrinth("dig_treasure", v_level, v_x, v_y).f_stat1;
		p_setlaby(v_x, v_y, v_level, v_container, v_item, 0);
		p_message(248, 5);
		p_delay(g_mydelay);
	}
}

static intptr_t p_display(std::string v_was) {
	int16_t v_but_x = 0;
	int16_t v_but_y = 0;
	int16_t v_down = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_k = 0;
	intptr_t v_lang = 0;
	int16_t v_maxlen = 0;
	intptr_t v_maxlines = 0;
	int16_t v_mmouse_links = 0;
	int16_t v_mmouse_rechts = 0;
	int16_t v_mmouse_x = 0;
	int16_t v_mmouse_y = 0;
	int32_t v_offset = 0;
	int16_t v_raus = 0;
	int16_t v_result = 0;
	int16_t v_school = 0;
	std::string v_schoolname;
	std::string v_spaces;
	std::string v_spellfile;
	intptr_t v_spelltextdump = 0;
	int16_t v_up = 0;
	intptr_t v_wait_release = 0;
	TypedList<std::string> ll_text;
	v_offset = 0;
	v_raus = 0;
	v_up = 0;
	v_down = 0;
	v_wait_release = 0;
	v_spelltextdump = 0;
	if (p_readfile(0, "./" + v_was)) {
		while (!p_eof(0)) {
			p_addelement(ll_text);
			LIST_CURRENT(ll_text,std::string) = p_readstring(0);
		}
		p_closefile(0);
	}
	v_maxlines = p_countlist(ll_text);
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_selectelement(ll_text, v_offset);
		for (v_i = 1; v_i <= 30; v_i += 1) {
			p_drawbitmapfont(69, 20, ((v_i * 12) + 5), 6, 11, LIST_CURRENT(ll_text,std::string));
			if (!p_nextelement(ll_text)) {
				break;
			}
		}
		p_examinekeyboard();
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mmouse_links = p_mousebutton(1);
		v_mmouse_rechts = p_mousebutton(2);
		if (v_wait_release) {
			if (!(p_keyboardpushed(274) || p_keyboardpushed(273) || p_keyboardpushed(281) || p_keyboardpushed(280)) || p_keydelay(0)) {
				v_wait_release = 0;
			}
		} else {
			if (p_keyboardpushed(273)) {
				v_wait_release = 1;
				v_up = 1;
				p_keydelay(1);
			}
			if (p_keyboardpushed(274)) {
				v_wait_release = 1;
				v_down = 1;
				p_keydelay(1);
			}
			if (p_keyboardpushed(280)) {
				v_wait_release = 1;
				v_up = 15;
				p_keydelay(1);
			}
			if (p_keyboardpushed(281)) {
				v_wait_release = 1;
				v_down = 15;
				p_keydelay(1);
			}
		}
		if (!v_spelltextdump && p_keyboardpushed(119)) {
			v_spelltextdump = 1;
			a_outtext.dim("outtext", 18);
			v_spaces = "                                                                          ";
			for (v_lang = 1; v_lang <= 3; v_lang += 1) {
				switch (v_lang) {
				case 1:
					v_spellfile = "./readme_spells.txt";
					break;
				case 2:
					v_spellfile = "./liesmich_zauber.txt";
					break;
				case 3:
					v_spellfile = "./leeme_hechizos.txt";
					break;
				}
				p_createfile(1, v_spellfile);
				for (v_i = 1; v_i <= 15; v_i += 1) {
					v_school = -1;
					v_schoolname = "";
					switch (v_i) {
					case 8:
						v_school = 56;
						break;
					case 7:
						v_school = 60;
						v_schoolname = a_skills("display", v_school, g_akt_spieler).f_name[v_lang] + "     ";
						break;
					case 1:
						v_school = 1;
						v_schoolname = a_message_text("display", 885, v_lang);
						break;
					case 4:
						v_school = 52;
						break;
					case 5:
						v_school = 57;
						break;
					case 2:
						v_school = 55;
						break;
					case 3:
						v_school = 53;
						break;
					case 10:
						v_school = 59;
						break;
					case 9:
						v_school = 49;
						break;
					case 11:
						v_school = 48;
						break;
					case 14:
						v_school = 50;
						break;
					case 12:
						v_school = 54;
						break;
					case 6:
						v_school = 51;
						break;
					case 13:
						v_school = 58;
						break;
					case 15:
						v_school = 67;
						break;
					}
					if (v_schoolname == "") {
						v_schoolname = a_skills("display", v_school, g_akt_spieler).f_name[v_lang];
					}
					if ((v_i % 3) == 1) {
						a_outtext("display", 0) = "  ";
						a_outtext("display", 1) = "--";
						for (v_j = 1; v_j <= 9; v_j += 1) {
							a_outtext("display", (v_j + 1)) = "0" + p_str(v_j);
						}
						for (v_j = 10; v_j <= 15; v_j += 1) {
							a_outtext("display", (v_j + 1)) = p_str(v_j);
						}
					}
					v_maxlen = p_len(v_schoolname);
					for (v_j = 1; v_j <= 15; v_j += 1) {
						for (v_k = 0; v_k <= 185; v_k += 1) {
							if (a_spells("display", v_k).f_school == v_school && a_spells("display", v_k).f_level == v_j) {
								break;
							}
						}
						if (p_len(a_spells("display", v_k).f_name[v_lang]) > v_maxlen) {
							v_maxlen = p_len(a_spells("display", v_k).f_name[v_lang]);
						}
					}
					a_outtext("display", 0) = a_outtext("display", 0) + "  " + p_mid(v_schoolname + v_spaces, 1, v_maxlen);
					a_outtext("display", 1) = a_outtext("display", 1) + p_mid("-------------------------------------------------", 1, (v_maxlen + 2));
					for (v_j = 1; v_j <= 15; v_j += 1) {
						for (v_k = 0; v_k <= 185; v_k += 1) {
							if (a_spells("display", v_k).f_school == v_school && a_spells("display", v_k).f_level == v_j) {
								break;
							}
						}
						a_outtext("display", (v_j + 1)) = a_outtext("display", (v_j + 1)) + "  " + p_mid(a_spells("display", v_k).f_name[v_lang] + v_spaces, 1, v_maxlen);
					}
					if (!(v_i % 3) || v_i == 15) {
						for (v_j = 0; v_j <= 16; v_j += 1) {
							p_writestringn(1, a_outtext("display", v_j));
						}
						p_writestringn(1, " ");
						p_writestringn(1, " ");
					}
				}
				p_closefile(1);
			}
		}
		v_but_x = 590;
		v_but_y = 400;
		if (v_mmouse_x >= v_but_x && v_mmouse_x <= (v_but_x + 32) && v_mmouse_y >= v_but_y && v_mmouse_y <= (v_but_y + 32)) {
			p_clipsprite(6, 192, 0, 31, 31);
			if (v_mmouse_links == 1) {
				v_up = 1;
			}
		} else {
			p_clipsprite(6, 128, 0, 31, 31);
		}
		p_displaytransparentsprite(6, v_but_x, v_but_y);
		if (v_mmouse_x > v_but_x && v_mmouse_x < (v_but_x + 32) && v_mmouse_y > (v_but_y + 32) && v_mmouse_y < ((v_but_y + 32) + 32)) {
			p_clipsprite(6, 224, 0, 31, 31);
			if (v_mmouse_links == 1) {
				v_down = 1;
			}
		} else {
			p_clipsprite(6, 160, 0, 31, 31);
		}
		p_displaytransparentsprite(6, v_but_x, (v_but_y + 32));
		if (v_up) {
			v_offset = (v_offset - v_up);
			if (v_offset < 0) {
				v_offset = 0;
			}
			v_up = 0;
		}
		if (v_down) {
			v_offset = (v_offset + v_down);
			if (v_offset > (v_maxlines - 30)) {
				v_offset = (v_maxlines - 30);
			}
			v_down = 0;
		}
		v_but_x = 593;
		v_but_y = 16;
		if (v_mmouse_x >= v_but_x && v_mmouse_x <= (v_but_x + 32) && v_mmouse_y >= v_but_y && v_mmouse_y <= (v_but_y + 32)) {
			p_clipsprite(6, 96, 32, 31, 31);
			if (v_mmouse_links == 1) {
				v_raus = 2;
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, v_but_x, v_but_y);
		if (p_keyboardpushed(27) || v_mmouse_rechts == 1) {
			v_raus = 2;
		}
		if (v_raus == 2 && !v_mmouse_links && !v_mmouse_rechts && !p_keyboardpushed(27)) {
			v_raus = 1;
		}
		p_draw_plain_frame(-1);
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
	} while (!(v_raus == 1));
	p_clearlist(ll_text);
}

static intptr_t p_draw_screen3(int8_t v_x_offset, int8_t v_y_offset) {
	int16_t v_radius = 0;
	int16_t v_testfeld = 0;
	int8_t v_x = 0;
	int8_t v_y = 0;
	v_radius = p_radius();
	for (v_y = 1; v_y <= 13; v_y += 1) {
		for (v_x = 1; v_x <= 13; v_x += 1) {
			if (a_matrix("draw_screen3", v_x, v_y) <= v_radius || p_istoutdoor() == 1 || p_habich(200) == -1) {
				if (((a_spieler("draw_screen3", g_akt_spieler).f_character_x - 7) + v_x) < 1 || ((a_spieler("draw_screen3", g_akt_spieler).f_character_y - 7) + v_y) < 1) {
					p_draw_tile(a_mit_was("draw_screen3", a_spieler("draw_screen3", g_akt_spieler).f_level), v_x, v_y, v_x_offset, v_y_offset, -1);
				} else {
					v_testfeld = a_labyrinth("draw_screen3", a_spieler("draw_screen3", g_akt_spieler).f_level, ((a_spieler("draw_screen3", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("draw_screen3", g_akt_spieler).f_character_y - 7) + v_y)).f_feld;
					if (p_istmauer(v_testfeld) || v_testfeld == 20) {
						p_draw_tile(v_testfeld, v_x, v_y, v_x_offset, v_y_offset, -1);
					}
				}
			}
		}
	}
}

static intptr_t p_draw_screen4(int8_t v_x_offset, int8_t v_y_offset) {
	int16_t v_bg = 0;
	int16_t v_radius = 0;
	int16_t v_testfeld = 0;
	int16_t v_tile = 0;
	int8_t v_x = 0;
	int8_t v_y = 0;
	v_radius = p_radius();
	for (v_y = 1; v_y <= 13; v_y += 1) {
		for (v_x = 1; v_x <= 13; v_x += 1) {
			if (a_matrix("draw_screen4", v_x, v_y) <= v_radius || p_istoutdoor() == 1 || p_habich(200) == -1) {
				if (((a_spieler("draw_screen4", g_akt_spieler).f_character_x - 7) + v_x) > 0 && ((a_spieler("draw_screen4", g_akt_spieler).f_character_y - 7) + v_y) > 0) {
					v_testfeld = a_labyrinth("draw_screen4", a_spieler("draw_screen4", g_akt_spieler).f_level, ((a_spieler("draw_screen4", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("draw_screen4", g_akt_spieler).f_character_y - 7) + v_y)).f_feld;
					if (v_testfeld == 9 || v_testfeld == 67 || v_testfeld == 68 || v_testfeld == 6 || v_testfeld == 75 || v_testfeld == 93 || v_testfeld == 69 || v_testfeld == 62 || v_testfeld == 63) {
						if (v_testfeld == 75 && a_skills("draw_screen4", 79, g_akt_spieler).f_gewaehlt == 1) {
							a_labyrinth("draw_screen4", a_spieler("draw_screen4", g_akt_spieler).f_level, ((a_spieler("draw_screen4", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("draw_screen4", g_akt_spieler).f_character_y - 7) + v_y)).f_feld = 69;
						}
						v_tile = a_labyrinth("draw_screen4", a_spieler("draw_screen4", g_akt_spieler).f_level, ((a_spieler("draw_screen4", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("draw_screen4", g_akt_spieler).f_character_y - 7) + v_y)).f_feld;
						if (a_fields("draw_screen4", v_tile).f_attri_floor) {
							v_bg = a_labyrinth("draw_screen4", a_spieler("draw_screen4", g_akt_spieler).f_level, ((a_spieler("draw_screen4", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("draw_screen4", g_akt_spieler).f_character_y - 7) + v_y)).f_stat2;
						} else {
							v_bg = 0;
						}
						p_draw_tile(v_tile, v_x, v_y, v_x_offset, v_y_offset, v_bg);
						if (a_laby_item("draw_screen4", ((a_spieler("draw_screen4", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("draw_screen4", g_akt_spieler).f_character_y - 7) + v_y)).f_name[a_spieler("draw_screen4", g_akt_spieler).f_level] > 0) {
							p_draw_item(a_laby_item("draw_screen4", ((a_spieler("draw_screen4", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("draw_screen4", g_akt_spieler).f_character_y - 7) + v_y)).f_name[a_spieler("draw_screen4", g_akt_spieler).f_level], v_x, v_y, v_x_offset, v_y_offset);
						}
					}
				}
			}
		}
	}
}

static intptr_t p_draw_screen5(int8_t v_x_offset, int8_t v_y_offset) {
	int16_t v_radius = 0;
	int16_t v_testfeld = 0;
	int8_t v_x = 0;
	int8_t v_y = 0;
	v_radius = p_radius2();
	for (v_y = 1; v_y <= 13; v_y += 1) {
		for (v_x = 2; v_x <= 13; v_x += 1) {
			if (a_matrix("draw_screen5", v_x, v_y) <= v_radius || p_istoutdoor() == 1 || p_habich(200) == -1) {
				if (((a_spieler("draw_screen5", g_akt_spieler).f_creature_x - 7) + v_x) < 1 || ((a_spieler("draw_screen5", g_akt_spieler).f_creature_y - 7) + v_y) < 1) {
					p_draw_tile(a_mit_was("draw_screen5", a_spieler("draw_screen5", g_akt_spieler).f_level), v_x, v_y, v_x_offset, v_y_offset, -1);
				} else {
					v_testfeld = a_labyrinth("draw_screen5", a_spieler("draw_screen5", g_akt_spieler).f_level, ((a_spieler("draw_screen5", g_akt_spieler).f_creature_x - 7) + v_x), ((a_spieler("draw_screen5", g_akt_spieler).f_creature_y - 7) + v_y)).f_feld;
					if (p_istmauer(v_testfeld) || v_testfeld == 20) {
						p_draw_tile(a_labyrinth("draw_screen5", a_spieler("draw_screen5", g_akt_spieler).f_level, ((a_spieler("draw_screen5", g_akt_spieler).f_creature_x - 7) + v_x), ((a_spieler("draw_screen5", g_akt_spieler).f_creature_y - 7) + v_y)).f_feld, v_x, v_y, v_x_offset, v_y_offset, -1);
					}
				}
			}
		}
	}
}

static intptr_t p_draw_screen6(int8_t v_x_offset, int8_t v_y_offset) {
	int16_t v_bg = 0;
	int16_t v_radius = 0;
	int16_t v_testfeld = 0;
	int16_t v_tile = 0;
	int8_t v_x = 0;
	int8_t v_y = 0;
	v_radius = p_radius2();
	for (v_y = 1; v_y <= 13; v_y += 1) {
		for (v_x = 1; v_x <= 13; v_x += 1) {
			if (((a_spieler("draw_screen6", g_akt_spieler).f_creature_x - 7) + v_x) > 0 && ((a_spieler("draw_screen6", g_akt_spieler).f_creature_y - 7) + v_y) > 0 && (a_matrix("draw_screen6", v_x, v_y) <= v_radius || p_istoutdoor() == 1 || p_habich(200) == -1)) {
				v_testfeld = a_labyrinth("draw_screen6", a_spieler("draw_screen6", g_akt_spieler).f_level, ((a_spieler("draw_screen6", g_akt_spieler).f_creature_x - 7) + v_x), ((a_spieler("draw_screen6", g_akt_spieler).f_creature_y - 7) + v_y)).f_feld;
				if (v_testfeld == 9 || v_testfeld == 67 || v_testfeld == 68 || v_testfeld == 6 || v_testfeld == 75 || v_testfeld == 93 || v_testfeld == 69 || v_testfeld == 62 || v_testfeld == 63) {
					v_tile = a_labyrinth("draw_screen6", a_spieler("draw_screen6", g_akt_spieler).f_level, ((a_spieler("draw_screen6", g_akt_spieler).f_creature_x - 7) + v_x), ((a_spieler("draw_screen6", g_akt_spieler).f_creature_y - 7) + v_y)).f_feld;
					if (a_fields("draw_screen6", v_tile).f_attri_floor) {
						v_bg = a_labyrinth("draw_screen6", a_spieler("draw_screen6", g_akt_spieler).f_level, ((a_spieler("draw_screen6", g_akt_spieler).f_creature_x - 7) + v_x), ((a_spieler("draw_screen6", g_akt_spieler).f_creature_y - 7) + v_y)).f_stat2;
					} else {
						v_bg = 0;
					}
					p_draw_tile(v_tile, v_x, v_y, v_x_offset, v_y_offset, v_bg);
				}
			}
		}
	}
}

static intptr_t p_duplizieren() {
	int16_t v_i = 0;
	int16_t v_verkauf = 0;
	v_verkauf = p_select_inventory(875);
	if (a_inventory("duplizieren", v_verkauf, g_akt_spieler).f_name == 38) {
		v_i = p_backpackspace();
		if (v_i <= 50) {
			a_inventory("duplizieren", v_i, g_akt_spieler).f_name = a_inventory("duplizieren", v_verkauf, g_akt_spieler).f_name;
			a_inventory("duplizieren", v_i, g_akt_spieler).f_anzahl = 0;
			a_inventory("duplizieren", v_i, g_akt_spieler).f_status = a_inventory("duplizieren", v_verkauf, g_akt_spieler).f_status;
			a_inventory("duplizieren", v_i, g_akt_spieler).f_attri5 = a_inventory("duplizieren", v_verkauf, g_akt_spieler).f_attri5;
			p_message(877, 5);
		} else {
			p_message(428, 5);
		}
	} else {
		p_message(876, 5);
	}
}

static intptr_t p_erstelle_matrix(int16_t v_wer) {
	int16_t v_radius = 0;
	int16_t v_testfeld = 0;
	int8_t v_x = 0;
	int8_t v_y = 0;
	for (v_x = 1; v_x <= 13; v_x += 1) {
		for (v_y = 1; v_y <= 13; v_y += 1) {
			a_matrix("erstelle_matrix", v_x, v_y) = 9999;
		}
	}
	if (v_wer == 1) {
		v_radius = p_radius();
		p_kopiere_matrix();
	} else {
		v_radius = p_radius2();
		p_kopiere_matrix2();
	}
	p_insert_light(v_radius);
	p_insert_light2(v_radius);
	for (v_x = 1; v_x <= 13; v_x += 1) {
		for (v_y = 1; v_y <= 13; v_y += 1) {
			if (((a_spieler("erstelle_matrix", g_akt_spieler).f_character_x - 7) + v_x) > 0 && ((a_spieler("erstelle_matrix", g_akt_spieler).f_character_y - 7) + v_y) > 0) {
				v_testfeld = a_labyrinth("erstelle_matrix", a_spieler("erstelle_matrix", g_akt_spieler).f_level, ((a_spieler("erstelle_matrix", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("erstelle_matrix", g_akt_spieler).f_character_y - 7) + v_y)).f_feld;
				if (a_skills("erstelle_matrix", 80, g_akt_spieler).f_gewaehlt == 1) {
					if (p_istmauer(v_testfeld) == 1) {
						a_matrix("erstelle_matrix", v_x, v_y) = v_radius;
					}
				}
				if (a_skills("erstelle_matrix", 79, g_akt_spieler).f_gewaehlt == 1) {
					if (v_testfeld == 9 || v_testfeld == 67 || v_testfeld == 68 || v_testfeld == 75 || v_testfeld == 6 || v_testfeld == 93 || v_testfeld == 69 || v_testfeld == 62 || v_testfeld == 63) {
						a_matrix("erstelle_matrix", v_x, v_y) = v_radius;
					}
				}
			} else {
				if (a_skills("erstelle_matrix", 80, g_akt_spieler).f_gewaehlt == 1) {
					a_matrix("erstelle_matrix", v_x, v_y) = v_radius;
				}
			}
		}
	}
}

static intptr_t p_free_for_monster(int16_t v_x, int16_t v_y, int16_t v_level) {
	int16_t v_i = 0;
	if (!v_level) {
		v_level = a_spieler("free_for_monster", g_akt_spieler).f_level;
	}
	if (v_x < 0 || v_y < 0 || v_x > a_groesse("free_for_monster", v_level) || v_y > a_groesse("free_for_monster", v_level)) {
		return 0;
	}
	if (a_fields("free_for_monster", a_labyrinth("free_for_monster", v_level, v_x, v_y).f_feld).f_block_spawn) {
		return 0;
	}
	for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
		if (a_spieler("free_for_monster", v_i).f_status != 1 || a_spieler("free_for_monster", v_i).f_level != v_level) {
			continue;
		}
		if (v_x == a_spieler("free_for_monster", v_i).f_character_x && v_y == a_spieler("free_for_monster", v_i).f_character_y) {
			return 0;
		}
		if (a_spieler("free_for_monster", v_i).f_creature_typ > 0 && v_x == a_spieler("free_for_monster", v_i).f_creature_x && v_y == a_spieler("free_for_monster", v_i).f_creature_y) {
			return 0;
		}
	}
	if (p_getmonster(v_x, v_y, v_level)) {
		return 0;
	}
	return 1;
}

static intptr_t p_free_for_water_monster(int16_t v_x, int16_t v_y, int16_t v_level) {
	int16_t v_i = 0;
	if (!v_level) {
		v_level = a_spieler("free_for_water_monster", g_akt_spieler).f_level;
	}
	if (v_x < 0 || v_y < 0 || v_x > a_groesse("free_for_water_monster", v_level) || v_y > a_groesse("free_for_water_monster", v_level)) {
		return 0;
	}
	if (a_fields("free_for_water_monster", a_labyrinth("free_for_water_monster", v_level, v_x, v_y).f_feld).f_block_spawn != 2) {
		return 0;
	}
	for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
		if (a_spieler("free_for_water_monster", v_i).f_status != 1 || a_spieler("free_for_water_monster", v_i).f_level != v_level) {
			continue;
		}
		if (v_x == a_spieler("free_for_water_monster", v_i).f_character_x && v_y == a_spieler("free_for_water_monster", v_i).f_character_y) {
			return 0;
		}
		if (a_spieler("free_for_water_monster", v_i).f_creature_typ > 0 && v_x == a_spieler("free_for_water_monster", v_i).f_creature_x && v_y == a_spieler("free_for_water_monster", v_i).f_creature_y) {
			return 0;
		}
	}
	if (p_getmonster(v_x, v_y, v_level)) {
		return 0;
	}
	return 1;
}

static intptr_t p_freie_magie() {
	int16_t v_akt_zauber = 0;
	intptr_t v_aktuell = 0;
	intptr_t v_besch = 0;
	int16_t v_cost = 0;
	int16_t v_i = 0;
	int16_t v_mauszauber = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_mouse_links = 0;
	intptr_t v_mouse_rechts = 0;
	int16_t v_mzauber = 0;
	intptr_t v_raushier = 0;
	intptr_t v_result = 0;
	std::string v_school;
	intptr_t v_sp_num = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_xadd = 0;
	intptr_t v_y = 0;
	p_liste_leeren();
	g_anz_zauber = 1;
	for (v_i = 1; v_i <= 184; v_i += 1) {
		if (a_spells("freie_magie", v_i).f_level == a_spieler("freie_magie", g_akt_spieler).f_circle && !(a_learned("freie_magie", g_akt_spieler, v_i) & 384)) {
			if (!p_zauber_nehmen(v_i) && a_spells("freie_magie", v_i).f_duration != -1) {
				a_zauberliste("freie_magie", (g_anz_zauber + g_akt_zauber_offset2)) = v_i;
				g_anz_zauber = (g_anz_zauber + 1);
			}
		}
	}
	if (g_anz_zauber == 1) {
		return 0;
	}
	p_bubblesort();
	v_akt_zauber = 0;
	v_mauszauber = -1;
	do {
		p_fenster(0);
		p_clearscreen(0);
		p_draw_plain_frame(-1);
		p_examinekeyboard();
		p_read_joystick();
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mouse_links = p_mousebutton(1);
		v_mouse_rechts = p_mousebutton(2);
		if (p_keyboardpushed(274) || g_jay == 1) {
			if (v_akt_zauber < (g_anz_zauber - 1)) {
				v_akt_zauber = (v_akt_zauber + 1);
			}
		}
		if (p_keyboardpushed(273) || g_jay == -1) {
			if (v_akt_zauber > 0) {
				v_akt_zauber = (v_akt_zauber - 1);
			}
		}
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(150, 150, 150));
		p_box(200, (200 + g_yplus2), 260, g_yplus, -1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(250, 25, a_message_text("freie_magie", 593, (1 + g_language)), -1, 0);
		v_x = 200;
		v_y = 52;
		v_besch = 0;
		v_mzauber = -1;
		for (v_i = 1; v_i <= g_anzz; v_i += 1) {
			p_frontcolor(p_rgb(255, 255, 255));
			v_sp_num = a_zauberliste("freie_magie", (v_i + v_akt_zauber));
			if (v_i == v_mauszauber) {
				p_frontcolor(p_rgb(1, 1, 255));
				v_mzauber = v_sp_num;
			}
			if (v_sp_num) {
				v_school = a_skills("freie_magie", a_spells("freie_magie", v_sp_num).f_school, g_akt_spieler).f_name[(1 + g_language)];
				p_drawtext(v_x, v_y, a_spells("freie_magie", v_sp_num).f_name[(1 + g_language)] + " (" + v_school + ")", -1, 0);
			}
			v_y = (v_y + g_yplus);
		}
		if (v_mzauber == -1) {
			v_besch = a_zauberliste("freie_magie", (v_akt_zauber + g_akt_zauber_offset));
		} else {
			v_besch = v_mzauber;
		}
		if (v_besch > 0) {
			v_x = 350;
			v_y = 390;
			v_xadd = 150;
			p_drawtext(v_x, v_y, p_nachricht4(61), -1, 0);
			p_drawtext((v_x + v_xadd), v_y, p_str(a_spells("freie_magie", v_besch).f_level), -1, 0);
			v_y = (v_y + g_yplus);
			v_cost = p_zauberkosten(v_besch);
			p_drawtext(v_x, v_y, p_nachricht4(101), -1, 0);
			p_drawtext((v_x + v_xadd), v_y, p_str(a_spells("freie_magie", v_besch).f_cost) + " (" + p_str(v_cost) + ")", -1, 0);
			v_y = (v_y + g_yplus);
			p_drawtext(v_x, v_y, p_nachricht4(91), -1, 0);
			p_drawtext((v_x + v_xadd), v_y, p_str(a_spieler("freie_magie", g_akt_spieler).f_power_score) + " (" + p_str(p_power(v_besch)) + ")", -1, 0);
			v_y = (v_y + g_yplus);
			p_drawtext(v_x, v_y, p_nachricht4(102), -1, 0);
			if (a_spells("freie_magie", v_besch).f_duration == -2) {
				p_drawtext((v_x + v_xadd), v_y, "1*", -1, 0);
			} else {
				if (a_spells("freie_magie", v_besch).f_duration == -1) {
					p_drawtext((v_x + v_xadd), v_y, p_nachricht4(951), -1, 0);
				} else {
					if (!a_spells("freie_magie", v_besch).f_duration) {
						p_drawtext((v_x + v_xadd), v_y, "---", -1, 0);
					} else {
						if (a_skills("freie_magie", 61, g_akt_spieler).f_gewaehlt) {
							v_cost = 2;
						} else {
							v_cost = 1;
						}
						p_drawtext((v_x + v_xadd), v_y, p_str(a_spells("freie_magie", v_besch).f_duration) + " (" + p_str((((int64_t) a_spells("freie_magie", v_besch).f_duration * p_power(v_besch)) * v_cost)) + ")", -1, 0);
					}
				}
			}
			v_y = (v_y + g_yplus);
			p_drawtext(v_x, v_y, p_nachricht4(103), -1, 0);
			p_drawtext((v_x + v_xadd), v_y, p_str(((int64_t) a_learned("freie_magie", g_akt_spieler, v_besch) & 127)), -1, 0);
			p_drawtext(25, 400, a_spells("freie_magie", v_besch).f_info_1[(1 + g_language)], -1, 0);
			p_drawtext(25, 420, a_spells("freie_magie", v_besch).f_info_2[(1 + g_language)], -1, 0);
		}
		p_stopdrawing();
		if (v_mmouse_x >= 590 && v_mmouse_x <= 622 && v_mmouse_y >= 310 && v_mmouse_y <= 342) {
			p_clipsprite(6, 192, 0, 31, 31);
			p_displaytransparentsprite(6, 590, 310);
			if (v_mouse_links == 1) {
				if (v_akt_zauber > 0) {
					v_akt_zauber = (v_akt_zauber - 1);
					p_delay(50);
				}
			}
		} else {
			p_clipsprite(6, 128, 0, 31, 31);
			p_displaytransparentsprite(6, 590, 310);
		}
		if (v_mmouse_x > 590 && v_mmouse_x < 622 && v_mmouse_y > 340 && v_mmouse_y < 372) {
			p_clipsprite(6, 224, 0, 31, 31);
			p_displaytransparentsprite(6, 590, 340);
			if (v_mouse_links == 1) {
				if (v_akt_zauber < (g_anz_zauber - 1)) {
					if (v_akt_zauber < (g_anz_zauber - 1)) {
						v_akt_zauber = (v_akt_zauber + 1);
					}
					p_delay(50);
				}
			}
		} else {
			p_clipsprite(6, 160, 0, 31, 31);
			p_displaytransparentsprite(6, 590, 340);
		}
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		p_delay(50);
		v_mauszauber = 0;
		v_y = 52;
		v_aktuell = 1;
		if (v_mmouse_x > 200 && v_mmouse_x < 460) {
			for (v_i = 1; v_i <= g_anzz; v_i += 1) {
				if (v_mmouse_y >= v_y && v_mmouse_y <= (v_y + g_yplus)) {
					v_mauszauber = v_aktuell;
				}
				v_y = (v_y + g_yplus);
				v_aktuell = (v_aktuell + 1);
			}
		}
		v_raushier = 0;
		if (v_mouse_links == 1 && v_mauszauber > 0) {
			v_raushier = 1;
		}
	} while (!(v_raushier == 1 || v_mouse_rechts == 1 || p_keyboardpushed(13) || a_jb("freie_magie", 1)));
	if (p_keyboardpushed(13) || a_jb("freie_magie", 1)) {
		a_learned("freie_magie", g_akt_spieler, v_besch) = (a_learned("freie_magie", g_akt_spieler, v_besch) | 384);
	}
	if (v_raushier == 1) {
		a_learned("freie_magie", g_akt_spieler, v_besch) = (a_learned("freie_magie", g_akt_spieler, v_besch) | 384);
	}
	p_message(483, 1);
}

static intptr_t p_gefaehrte(intptr_t v_welcher) {
	int16_t v_anstellen = 0;
	int16_t v_at = 0;
	int16_t v_attack = 0;
	intptr_t v_kosten = 0;
	int16_t v_lp = 0;
	int16_t v_mit_was = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	int8_t v_raus = 0;
	intptr_t v_result = 0;
	int16_t v_s_max = 0;
	int16_t v_s_min = 0;
	int16_t v_sel = 0;
	int16_t v_sp = 0;
	intptr_t v_wohin = 0;
	intptr_t v_yy = 0;
	v_sel = 1;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(-1);
		v_raus = 0;
		v_lp = 0;
		v_at = 0;
		v_s_min = 0;
		v_s_max = 0;
		v_sp = 0;
		v_attack = 0;
		v_anstellen = 0;
		p_read_joystick();
		p_examinekeyboard();
		if (p_keyboardpushed(273) || g_jay == -1) {
			v_sel = 1;
		}
		if (p_keyboardpushed(274) || g_jay == 1) {
			v_sel = 2;
		}
		v_yy = 65;
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(190, v_yy, a_message_text("gefaehrte", 273, (1 + g_language)), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(190, v_yy, a_message_text("gefaehrte", 274, (1 + g_language)), -1, 0);
		switch (v_welcher) {
		case 1:
			v_lp = 10;
			v_at = 45;
			v_sp = 5;
			v_s_min = 1;
			v_s_max = 6;
			v_kosten = 15;
			break;
		case 2:
			v_lp = 15;
			v_at = 45;
			v_sp = 5;
			v_s_min = 1;
			v_s_max = 7;
			v_kosten = 20;
			break;
		case 3:
			v_lp = 20;
			v_at = 50;
			v_sp = 6;
			v_s_min = 1;
			v_s_max = 8;
			v_kosten = 25;
			break;
		case 4:
			v_lp = 25;
			v_at = 50;
			v_sp = 6;
			v_s_min = 1;
			v_s_max = 9;
			v_kosten = 30;
			break;
		case 5:
			v_lp = 30;
			v_at = 55;
			v_sp = 7;
			v_s_min = 2;
			v_s_max = 10;
			v_kosten = 35;
			break;
		case 6:
			v_lp = 35;
			v_at = 55;
			v_sp = 7;
			v_s_min = 2;
			v_s_max = 12;
			v_kosten = 40;
			break;
		case 7:
			v_lp = 40;
			v_at = 60;
			v_sp = 8;
			v_s_min = 2;
			v_s_max = 14;
			v_kosten = 45;
			break;
		case 8:
			v_lp = 45;
			v_at = 65;
			v_sp = 8;
			v_s_min = 3;
			v_s_max = 15;
			v_kosten = 50;
			break;
		case 9:
			v_lp = 50;
			v_at = 70;
			v_sp = 9;
			v_s_min = 3;
			v_s_max = 18;
			v_kosten = 70;
			break;
		case 10:
			v_lp = 55;
			v_at = 80;
			v_sp = 9;
			v_s_min = 3;
			v_s_max = 20;
			v_kosten = 80;
			break;
		}
		if (a_skills("gefaehrte", 116, g_akt_spieler).f_gewaehlt == 1) {
			v_kosten = (v_kosten * 0.75);
		}
		v_yy = (v_yy + 25);
		p_drawtext(100, v_yy, a_message_text("gefaehrte", 276, (1 + g_language)), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(100, v_yy, a_message_text("gefaehrte", 55, (1 + g_language)) + "  " + p_str(v_lp), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(100, v_yy, a_message_text("gefaehrte", 52, (1 + g_language)) + "  " + p_str(v_at), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(100, v_yy, a_message_text("gefaehrte", 56, (1 + g_language)) + "  " + p_str(v_sp), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(100, v_yy, a_message_text("gefaehrte", 101, (1 + g_language)) + "  " + p_str(v_kosten), -1, 0);
		v_yy = (v_yy + 35);
		if (!g_language) {
			p_drawtext(100, v_yy, "Your Gold: " + p_str(p_gold_anzahl()), -1, 0);
		}
		if (g_language == 1) {
			p_drawtext(100, v_yy, "Dein Gold: " + p_str(p_gold_anzahl()), -1, 0);
		}
		if (g_language == 2) {
			p_drawtext(100, v_yy, "Tu oro: " + p_str(p_gold_anzahl()), -1, 0);
		}
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mmouse_links = p_mousebutton(1);
		v_mmouse_rechts = p_mousebutton(2);
		if (v_mmouse_x > 90 && v_mmouse_x < 150 && v_mmouse_y > 260 && v_mmouse_y < 280) {
			p_frontcolor(p_rgb(150, 150, 150));
			p_box(90, 260, 50, 20, -1);
			if (v_sel == 1) {
				p_frontcolor(p_rgb(1, 1, 255));
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			p_drawtext(90, 260, a_message_text("gefaehrte", 277, (1 + g_language)), -1, 0);
			if (v_mmouse_links == 1) {
				v_anstellen = 1;
			}
		} else {
			if (v_sel == 1) {
				p_frontcolor(p_rgb(1, 1, 255));
				if (p_keyboardpushed(13) || a_jb("gefaehrte", 1)) {
					v_anstellen = 1;
				}
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			p_drawtext(90, 260, a_message_text("gefaehrte", 277, (1 + g_language)), -1, 0);
		}
		if (v_anstellen == 1) {
			if (p_gold_anzahl() >= v_kosten) {
				p_gold_verlieren(v_kosten);
				v_raus = 1;
				a_spieler("gefaehrte", g_akt_spieler).f_creature_typ = 16;
				a_spieler("gefaehrte", g_akt_spieler).f_creature_x = (a_spieler("gefaehrte", g_akt_spieler).f_character_x + 1);
				a_spieler("gefaehrte", g_akt_spieler).f_creature_y = (a_spieler("gefaehrte", g_akt_spieler).f_character_y + 1);
				a_spieler("gefaehrte", g_akt_spieler).f_creature_attack = v_at;
				a_spieler("gefaehrte", g_akt_spieler).f_creature_lifepoints = v_lp;
				a_spieler("gefaehrte", g_akt_spieler).f_creature_maxlifepoints = v_lp;
				a_spieler("gefaehrte", g_akt_spieler).f_creature_schaden_min = v_s_min;
				a_spieler("gefaehrte", g_akt_spieler).f_creature_schaden_max = v_s_max;
				a_spieler("gefaehrte", g_akt_spieler).f_creature_maxspeed = v_sp;
				v_mit_was = a_labyrinth("gefaehrte", a_spieler("gefaehrte", g_akt_spieler).f_level, (a_spieler("gefaehrte", g_akt_spieler).f_character_x + 1), a_spieler("gefaehrte", g_akt_spieler).f_character_y).f_feld;
				p_setlaby(a_spieler("gefaehrte", g_akt_spieler).f_character_x, a_spieler("gefaehrte", g_akt_spieler).f_character_y, a_spieler("gefaehrte", g_akt_spieler).f_level, v_mit_was, 0, 0);
				p_message(280, 1);
			} else {
				p_message(215, 5);
				v_raus = 1;
			}
		}
		if (v_mmouse_x > 90 && v_mmouse_x < 150 && v_mmouse_y > 280 && v_mmouse_y < 300) {
			p_frontcolor(p_rgb(150, 150, 150));
			p_box(90, 280, 50, 20, -1);
			if (v_sel == 2) {
				p_frontcolor(p_rgb(1, 1, 255));
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			p_drawtext(90, 280, a_message_text("gefaehrte", 278, (1 + g_language)), -1, 0);
			if (v_mmouse_links == 1) {
				v_raus = 1;
			}
		} else {
			if (v_sel == 2) {
				p_frontcolor(p_rgb(1, 1, 255));
				if (p_keyboardpushed(13) || a_jb("gefaehrte", 1)) {
					v_raus = 1;
				}
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			p_drawtext(90, 280, a_message_text("gefaehrte", 278, (1 + g_language)), -1, 0);
		}
		p_stopdrawing();
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		p_delay(g_mydelay3);
	} while (!(v_mmouse_rechts == 1 || v_raus == 1 || p_keyboardpushed(27)));
	g_aktion = 1;
}

static intptr_t p_get_chance(int16_t v_chance_type) {
	int16_t v_cont = 0;
	int16_t v_result = 0;
	v_result = 0;
	switch (v_chance_type) {
	case 50:
		v_result = (g_coin_toss & 1);
		g_coin_toss = (g_coin_toss / 2);
		if (p_random(99) < 50) {
			g_coin_toss += 1073741824;
		}
		break;
	case 20:
		v_result = (g_item_break20 & 1);
		g_item_break20 = (g_item_break20 / 2);
		if (p_random(99) < 20) {
			g_item_break20 += 1073741824;
		}
		break;
	case 15:
		v_result = (g_item_break15 & 1);
		g_item_break15 = (g_item_break15 / 2);
		if (p_random(99) < 15) {
			g_item_break10 += 1073741824;
		}
		break;
	case 10:
		v_result = (g_item_break10 & 1);
		g_item_break10 = (g_item_break10 / 2);
		if (p_random(99) < 10) {
			g_item_break10 += 1073741824;
		}
		break;
	case 5:
		v_result = (g_item_break05 & 1);
		g_item_break05 = (g_item_break05 / 2);
		if (p_random(99) < 5) {
			g_item_break05 += 1073741824;
		}
		break;
	case 3:
		v_result = ((g_next_qual % 3) + 1);
		g_next_qual = (g_next_qual / 3);
		g_next_qual += (p_random(2) * 387420489);
		break;
	case 61:
		v_result = a_herb_buff("get_chance", a_herb_buff("get_chance", 0));
		a_herb_buff("get_chance", a_herb_buff("get_chance", 0)) = (p_random(5) + 1);
		a_herb_buff("get_chance", 0) += 1;
		if (a_herb_buff("get_chance", 0) > 50) {
			a_herb_buff("get_chance", 0) = 1;
		}
		break;
	case 62:
		v_result = a_crysolit_buff("get_chance", a_crysolit_buff("get_chance", 0));
		a_crysolit_buff("get_chance", a_crysolit_buff("get_chance", 0)) = (p_random(5) + 1);
		a_crysolit_buff("get_chance", 0) += 1;
		if (a_crysolit_buff("get_chance", 0) > 50) {
			a_crysolit_buff("get_chance", 0) = 1;
		}
		break;
	case 1001:
		v_result = a_damage_buff("get_chance", a_damage_buff("get_chance", 0));
		a_damage_buff("get_chance", a_damage_buff("get_chance", 0)) = p_random(25199);
		a_damage_buff("get_chance", 0) += 1;
		if (a_damage_buff("get_chance", 0) > 50) {
			a_damage_buff("get_chance", 0) = 1;
		}
		break;
	case 1002:
		v_result = a_damage_buff2("get_chance", a_damage_buff2("get_chance", 0));
		a_damage_buff2("get_chance", a_damage_buff2("get_chance", 0)) = p_random(25199);
		a_damage_buff2("get_chance", 0) += 1;
		if (a_damage_buff2("get_chance", 0) > 50) {
			a_damage_buff2("get_chance", 0) = 1;
		}
		break;
	case 999:
		v_result = a_wand_buff("get_chance", a_wand_buff("get_chance", 0));
		switch (p_random(2)) {
		case 0:
			a_wand_buff("get_chance", a_wand_buff("get_chance", 0)) = (177 + p_random(7));
			break;
		case 1:
			a_wand_buff("get_chance", a_wand_buff("get_chance", 0)) = (295 + p_random(6));
			break;
		case 2:
			a_wand_buff("get_chance", a_wand_buff("get_chance", 0)) = (387 + p_random(8));
			break;
		}
		a_wand_buff("get_chance", 0) += 1;
		if (a_wand_buff("get_chance", 0) > 50) {
			a_wand_buff("get_chance", 0) = 1;
		}
		break;
	case 998:
		v_result = a_scroll_buff("get_chance", a_scroll_buff("get_chance", 0));
		do {
			a_scroll_buff("get_chance", a_scroll_buff("get_chance", 0)) = (p_random(183) + 1);
		} while (!(a_spells("get_chance", a_scroll_buff("get_chance", a_scroll_buff("get_chance", 0))).f_duration != -1 && a_spells("get_chance", a_scroll_buff("get_chance", a_scroll_buff("get_chance", 0))).f_name[1] != ""));
		a_scroll_buff("get_chance", 0) += 1;
		if (a_scroll_buff("get_chance", 0) > 50) {
			a_scroll_buff("get_chance", 0) = 1;
		}
		break;
	case 997:
		v_result = a_alch_buff("get_chance", a_alch_buff("get_chance", 0));
		a_alch_buff("get_chance", a_alch_buff("get_chance", 0)) = p_make_potion(0);
		a_alch_buff("get_chance", 0) += 1;
		if (a_alch_buff("get_chance", 0) > 50) {
			a_alch_buff("get_chance", 0) = 1;
		}
		break;
	case 996:
		v_result = a_break_chance_buff("get_chance", a_break_chance_buff("get_chance", 0));
		a_break_chance_buff("get_chance", a_break_chance_buff("get_chance", 0)) = p_random(2999);
		a_break_chance_buff("get_chance", 0) += 1;
		if (a_break_chance_buff("get_chance", 0) > 50) {
			a_break_chance_buff("get_chance", 0) = 1;
		}
		break;
	case 995:
		v_result = a_gold_buff("get_chance", a_gold_buff("get_chance", 0));
		a_gold_buff("get_chance", a_gold_buff("get_chance", 0)) = p_random(255);
		a_gold_buff("get_chance", 0) += 1;
		if (a_gold_buff("get_chance", 0) > 50) {
			a_gold_buff("get_chance", 0) = 1;
		}
		break;
	case 994:
		v_result = a_boulder_buff("get_chance", a_boulder_buff("get_chance", 0));
		v_cont = p_random(9);
		if (!v_cont) {
			v_cont = p_random(11);
			switch (v_cont) {
			case 0:
				v_cont = 197;
				break;
			case 1:
				v_cont = 198;
				break;
			case 2:
				v_cont = 199;
				break;
			case 3:
				v_cont = 209;
				break;
			case 4:
				v_cont = 210;
				break;
			case 5:
				v_cont = 211;
				break;
			case 6:
				v_cont = 213;
				break;
			case 7:
				v_cont = 214;
				break;
			case 8:
				v_cont = 215;
				break;
			case 9:
				v_cont = 216;
				break;
			case 10:
				v_cont = 217;
				break;
			case 11:
				v_cont = 218;
				break;
			}
		} else {
			if (v_cont < 4) {
				v_cont = 292;
			} else {
				v_cont = 291;
			}
		}
		a_boulder_buff("get_chance", a_boulder_buff("get_chance", 0)) = v_cont;
		a_boulder_buff("get_chance", 0) += 1;
		if (a_boulder_buff("get_chance", 0) > 50) {
			a_boulder_buff("get_chance", 0) = 1;
		}
		break;
	case 100:
		v_result = a_general_percent_buff("get_chance", a_general_percent_buff("get_chance", 0));
		a_general_percent_buff("get_chance", a_general_percent_buff("get_chance", 0)) = p_random(99);
		a_general_percent_buff("get_chance", 0) += 1;
		if (a_general_percent_buff("get_chance", 0) > 50) {
			a_general_percent_buff("get_chance", 0) = 1;
		}
		break;
	case 101:
		v_result = a_spell_chance_buff("get_chance", a_spell_chance_buff("get_chance", 0));
		a_spell_chance_buff("get_chance", a_spell_chance_buff("get_chance", 0)) = p_random(99);
		a_spell_chance_buff("get_chance", 0) += 1;
		if (a_spell_chance_buff("get_chance", 0) > 50) {
			a_spell_chance_buff("get_chance", 0) = 1;
		}
		break;
	case 102:
		v_result = a_lore_chance_buff("get_chance", a_lore_chance_buff("get_chance", 0));
		a_lore_chance_buff("get_chance", a_lore_chance_buff("get_chance", 0)) = p_random(99);
		a_lore_chance_buff("get_chance", 0) += 1;
		if (a_lore_chance_buff("get_chance", 0) > 50) {
			a_lore_chance_buff("get_chance", 0) = 1;
		}
		break;
	case 103:
		v_result = a_hit_chance_buff("get_chance", a_hit_chance_buff("get_chance", 0));
		a_hit_chance_buff("get_chance", a_hit_chance_buff("get_chance", 0)) = p_random(99);
		a_hit_chance_buff("get_chance", 0) += 1;
		if (a_hit_chance_buff("get_chance", 0) > 50) {
			a_hit_chance_buff("get_chance", 0) = 1;
		}
		break;
	case 104:
		v_result = a_critical_chance_buff("get_chance", a_critical_chance_buff("get_chance", 0));
		a_critical_chance_buff("get_chance", a_critical_chance_buff("get_chance", 0)) = p_random(99);
		a_critical_chance_buff("get_chance", 0) += 1;
		if (a_critical_chance_buff("get_chance", 0) > 50) {
			a_critical_chance_buff("get_chance", 0) = 1;
		}
		break;
	case 105:
		v_result = a_god_bonus_buff("get_chance", a_god_bonus_buff("get_chance", 0));
		a_god_bonus_buff("get_chance", a_god_bonus_buff("get_chance", 0)) = p_random(99);
		a_god_bonus_buff("get_chance", 0) += 1;
		if (a_god_bonus_buff("get_chance", 0) > 50) {
			a_god_bonus_buff("get_chance", 0) = 1;
		}
		break;
	case 106:
		v_result = a_fish_buff("get_chance", a_fish_buff("get_chance", 0));
		a_fish_buff("get_chance", a_fish_buff("get_chance", 0)) = p_random(99);
		a_fish_buff("get_chance", 0) += 1;
		if (a_fish_buff("get_chance", 0) > 50) {
			a_fish_buff("get_chance", 0) = 1;
		}
		break;
	default:
		return 0;
		break;
	}
	return v_result;
}

static intptr_t p_gold_finden2(int16_t v_anzahl) {
	int16_t v_beutel = 0;
	intptr_t v_i = 0;
	int32_t v_long = 0;
	if (a_spieler("gold_finden2", g_akt_spieler).f_fluch != 16) {
		v_beutel = 0;
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (a_inventory("gold_finden2", v_i, g_akt_spieler).f_name == 150) {
				v_beutel = v_i;
			}
		}
		if (!v_beutel) {
			v_i = p_backpackspace();
			if (v_i <= 50) {
				a_inventory("gold_finden2", v_i, g_akt_spieler).f_name = 150;
			} else {
				p_message(428, 6);
				return 1;
			}
		}
		if (v_anzahl == 1) {
			p_sound(60);
		} else {
			p_sound(59);
		}
		v_long = v_anzahl;
		a_spieler("gold_finden2", g_akt_spieler).f_gold += v_long;
	} else {
		p_message(7, 6);
	}
	return 0;
}

static intptr_t p_gold_stack2() {
	p_gold_finden2((1 + ((p_get_chance(995) * (30 + p_luck())) / 256)));
}

static intptr_t p_gott_check() {
	if (a_skills("gott_check", 105, g_akt_spieler).f_gewaehlt == 1) {
		if (p_get_chance(105) < (200 / a_spieler("gott_check", g_akt_spieler).f_maxlifepoints)) {
			a_spieler("gott_check", g_akt_spieler).f_maxlifepoints = (a_spieler("gott_check", g_akt_spieler).f_maxlifepoints + 1);
			p_message(321, 5);
		}
	}
	if (a_skills("gott_check", 106, g_akt_spieler).f_gewaehlt == 1) {
		if (p_get_chance(105) < (200 / a_spieler("gott_check", g_akt_spieler).f_maxmana)) {
			a_spieler("gott_check", g_akt_spieler).f_maxmana = (a_spieler("gott_check", g_akt_spieler).f_maxmana + 1);
			p_message(322, 5);
		}
	}
}

static intptr_t p_helpful_wizard() {
	int16_t v_heal = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	int16_t v_kill = 0;
	int16_t v_mit_was = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	int16_t v_open = 0;
	int8_t v_raus = 0;
	intptr_t v_result = 0;
	int16_t v_sel = 0;
	int16_t v_traps = 0;
	intptr_t v_warten = 0;
	intptr_t v_wohin = 0;
	intptr_t v_yy = 0;
	v_sel = 1;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(-1);
		v_raus = 0;
		v_kill = 0;
		v_traps = 0;
		v_open = 0;
		v_heal = 0;
		v_yy = 65;
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(190, v_yy, a_message_text("helpful_wizard", 338, (1 + g_language)), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(190, v_yy, a_message_text("helpful_wizard", 339, (1 + g_language)), -1, 0);
		p_clipsprite(1, 288, 384, 32, 32);
		p_displaysprite(1, 50, 70);
		p_read_joystick();
		p_examinekeyboard();
		if (p_keyboardpushed(273) || g_jay == -1) {
			v_sel = (v_sel - 1);
			if (v_sel < 1) {
				v_sel = 1;
			}
		}
		if (p_keyboardpushed(274) || g_jay == 1) {
			v_sel = (v_sel + 1);
			if (v_sel > 4) {
				v_sel = 4;
			}
		}
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mmouse_links = p_mousebutton(1);
		v_mmouse_rechts = p_mousebutton(2);
		if (v_warten > 50) {
			if (v_mmouse_x > 40 && v_mmouse_x < 600 && v_mmouse_y > 120 && v_mmouse_y < 140) {
				p_frontcolor(p_rgb(150, 150, 150));
				p_box(40, 120, 550, 20, -1);
				if (v_sel == 1) {
					p_frontcolor(p_rgb(1, 1, 255));
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(40, 120, a_message_text("helpful_wizard", 340, (1 + g_language)), -1, 0);
				if (v_mmouse_links == 1) {
					v_raus = 1;
					v_kill = 1;
				}
			} else {
				if (v_sel == 1) {
					p_frontcolor(p_rgb(1, 1, 255));
					if (p_keyboardpushed(13) || a_jb("helpful_wizard", 1)) {
						v_raus = 1;
						v_kill = 1;
					}
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(40, 120, a_message_text("helpful_wizard", 340, (1 + g_language)), -1, 0);
			}
			if (v_kill == 1) {
				v_mit_was = a_labyrinth("helpful_wizard", a_spieler("helpful_wizard", g_akt_spieler).f_level, (a_spieler("helpful_wizard", g_akt_spieler).f_character_x + 1), a_spieler("helpful_wizard", g_akt_spieler).f_character_y).f_feld;
				p_setlaby(a_spieler("helpful_wizard", g_akt_spieler).f_character_x, a_spieler("helpful_wizard", g_akt_spieler).f_character_y, a_spieler("helpful_wizard", g_akt_spieler).f_level, v_mit_was, 0, 0);
				p_message(344, 1);
				p_changecurrentelement(ll_monster_list, a_first_monster("helpful_wizard", a_spieler("helpful_wizard", g_akt_spieler).f_level).f_p);
				while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == a_spieler("helpful_wizard", g_akt_spieler).f_level) {
					p_remove_monster();
					p_nextelement(ll_monster_list);
				}
				p_cleanup_monsters();
			}
			if (v_mmouse_x > 40 && v_mmouse_x < 600 && v_mmouse_y > 140 && v_mmouse_y < 160) {
				p_frontcolor(p_rgb(150, 150, 150));
				p_box(40, 140, 550, 20, -1);
				if (v_sel == 2) {
					p_frontcolor(p_rgb(1, 1, 255));
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(40, 140, a_message_text("helpful_wizard", 341, (1 + g_language)), -1, 0);
				if (v_mmouse_links == 1) {
					v_raus = 1;
					v_traps = 1;
				}
			} else {
				if (v_sel == 2) {
					p_frontcolor(p_rgb(1, 1, 255));
					if (p_keyboardpushed(13) || a_jb("helpful_wizard", 1)) {
						v_raus = 1;
						v_traps = 1;
					}
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(40, 140, a_message_text("helpful_wizard", 341, (1 + g_language)), -1, 0);
			}
			if (v_traps == 1) {
				v_mit_was = a_labyrinth("helpful_wizard", a_spieler("helpful_wizard", g_akt_spieler).f_level, (a_spieler("helpful_wizard", g_akt_spieler).f_character_x + 1), a_spieler("helpful_wizard", g_akt_spieler).f_character_y).f_feld;
				p_setlaby(a_spieler("helpful_wizard", g_akt_spieler).f_character_x, a_spieler("helpful_wizard", g_akt_spieler).f_character_y, a_spieler("helpful_wizard", g_akt_spieler).f_level, v_mit_was, 0, 0);
				p_message(344, 1);
				for (v_i = 1; v_i <= 200; v_i += 1) {
					for (v_j = 1; v_j <= 200; v_j += 1) {
						if (a_labyrinth("helpful_wizard", a_spieler("helpful_wizard", g_akt_spieler).f_level, v_i, v_j).f_feld >= 22 && a_labyrinth("helpful_wizard", a_spieler("helpful_wizard", g_akt_spieler).f_level, v_i, v_j).f_feld <= 39) {
							p_setlaby(v_i, v_j, a_spieler("helpful_wizard", g_akt_spieler).f_level, a_inhalt("helpful_wizard", a_spieler("helpful_wizard", g_akt_spieler).f_level), 0, 0);
						}
					}
				}
			}
			if (v_mmouse_x > 40 && v_mmouse_x < 600 && v_mmouse_y > 160 && v_mmouse_y < 180) {
				p_frontcolor(p_rgb(150, 150, 150));
				p_box(40, 160, 550, 20, -1);
				if (v_sel == 3) {
					p_frontcolor(p_rgb(1, 1, 255));
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(40, 160, a_message_text("helpful_wizard", 342, (1 + g_language)), -1, 0);
				if (v_mmouse_links == 1) {
					v_raus = 1;
					v_open = 1;
				}
			} else {
				if (v_sel == 3) {
					p_frontcolor(p_rgb(1, 1, 255));
					if (p_keyboardpushed(13) || a_jb("helpful_wizard", 1)) {
						v_raus = 1;
						v_open = 1;
					}
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(40, 160, a_message_text("helpful_wizard", 342, (1 + g_language)), -1, 0);
			}
			if (v_open == 1) {
				v_mit_was = a_labyrinth("helpful_wizard", a_spieler("helpful_wizard", g_akt_spieler).f_level, (a_spieler("helpful_wizard", g_akt_spieler).f_character_x + 1), a_spieler("helpful_wizard", g_akt_spieler).f_character_y).f_feld;
				p_setlaby(a_spieler("helpful_wizard", g_akt_spieler).f_character_x, a_spieler("helpful_wizard", g_akt_spieler).f_character_y, a_spieler("helpful_wizard", g_akt_spieler).f_level, v_mit_was, 0, 0);
				p_message(344, 1);
				for (v_i = 1; v_i <= 200; v_i += 1) {
					for (v_j = 1; v_j <= 200; v_j += 1) {
						if (a_labyrinth("helpful_wizard", a_spieler("helpful_wizard", g_akt_spieler).f_level, v_i, v_j).f_feld == 67) {
							p_setlaby(v_i, v_j, a_spieler("helpful_wizard", g_akt_spieler).f_level, 68, 0, 0);
						}
						if (a_labyrinth("helpful_wizard", a_spieler("helpful_wizard", g_akt_spieler).f_level, v_i, v_j).f_feld == 70) {
							p_setlaby(v_i, v_j, a_spieler("helpful_wizard", g_akt_spieler).f_level, 21, 0, 0);
						}
					}
				}
			}
			if (v_mmouse_x > 40 && v_mmouse_x < 600 && v_mmouse_y > 180 && v_mmouse_y < 200) {
				p_frontcolor(p_rgb(150, 150, 150));
				p_box(40, 180, 550, 20, -1);
				if (v_sel == 4) {
					p_frontcolor(p_rgb(1, 1, 255));
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(40, 180, a_message_text("helpful_wizard", 343, (1 + g_language)), -1, 0);
				if (v_mmouse_links == 1) {
					v_raus = 1;
					v_heal = 1;
				}
			} else {
				if (v_sel == 4) {
					p_frontcolor(p_rgb(1, 1, 255));
					if (p_keyboardpushed(13) || a_jb("helpful_wizard", 1)) {
						v_raus = 1;
						v_heal = 1;
					}
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(40, 180, a_message_text("helpful_wizard", 343, (1 + g_language)), -1, 0);
			}
			if (v_heal == 1) {
				v_mit_was = a_labyrinth("helpful_wizard", a_spieler("helpful_wizard", g_akt_spieler).f_level, (a_spieler("helpful_wizard", g_akt_spieler).f_character_x + 1), a_spieler("helpful_wizard", g_akt_spieler).f_character_y).f_feld;
				p_setlaby(a_spieler("helpful_wizard", g_akt_spieler).f_character_x, a_spieler("helpful_wizard", g_akt_spieler).f_character_y, a_spieler("helpful_wizard", g_akt_spieler).f_level, v_mit_was, 0, 0);
				p_message(344, 1);
				a_spieler("helpful_wizard", g_akt_spieler).f_lifepoints = p_maxlife();
				a_spieler("helpful_wizard", g_akt_spieler).f_mana = p_maxmana();
				a_spieler("helpful_wizard", g_akt_spieler).f_fluch = 0;
				a_spieler("helpful_wizard", g_akt_spieler).f_fluchdauer = 0;
				a_spieler("helpful_wizard", g_akt_spieler).f_poison = 0;
			}
		} else {
			v_warten = (v_warten + 1);
			p_delay(1);
		}
		p_stopdrawing();
		p_delay(g_mydelay3);
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
	} while (!(v_mmouse_rechts == 1 || v_raus == 1 || p_keyboardpushed(27)));
	g_aktion = 1;
}

static intptr_t p_highscore_upload(int16_t v_mk_csv, std::string v_last_words) {
	int16_t v_akt_skill = 0;
	std::string v_charactereigenschaften;
	intptr_t v_con = 0;
	int32_t v_ebene = 0;
	std::string v_endezeit;
	int16_t v_gef_stabteile = 0;
	int32_t v_gold = 0;
	int16_t v_i = 0;
	int16_t v_icon = 0;
	int32_t v_mks = 0;
	std::string v_name;
	std::string v_p;
	int16_t v_runden = 0;
	int32_t v_score = 0;
	std::string v_server;
	int16_t v_todesart = 0;
	int16_t v_todesart_monster = 0;
	std::string v_verifikation;
	std::string v_version;
	v_server = "www.lostlabyrinth.com";
	if (g_test == 1) {
		v_server = "localhost";
	}
	v_p = "";
	v_name = a_spieler("highscore_upload", g_akt_spieler).f_name;
	v_verifikation = a_spieler("highscore_upload", g_akt_spieler).f_verifikation;
	v_gold = p_gold_anzahl();
	v_ebene = a_spieler("highscore_upload", g_akt_spieler).f_level;
	v_version = "4.0";
	v_runden = a_spieler("highscore_upload", g_akt_spieler).f_moves;
	v_charactereigenschaften = "";
	v_todesart = a_spieler("highscore_upload", g_akt_spieler).f_cause_of_death;
	v_todesart_monster = a_spieler("highscore_upload", g_akt_spieler).f_cause_of_death_monster;
	for (v_i = 1; v_i <= 144; v_i += 1) {
		v_akt_skill = 0;
		if (a_skills("highscore_upload", v_i, g_akt_spieler).f_gewaehlt == 1 || v_mk_csv == 1) {
			if (v_charactereigenschaften != "") {
				v_charactereigenschaften = v_charactereigenschaften + ":";
			}
			switch (v_i) {
			case 0:
				v_akt_skill = 0;
				break;
			case 1:
				v_akt_skill = 22;
				break;
			case 2:
				v_akt_skill = 23;
				break;
			case 3:
				v_akt_skill = 24;
				break;
			case 4:
				v_akt_skill = 52;
				break;
			case 5:
				v_akt_skill = 25;
				break;
			case 6:
				v_akt_skill = 26;
				break;
			case 7:
				v_akt_skill = 27;
				break;
			case 8:
				v_akt_skill = 40;
				break;
			case 9:
				v_akt_skill = 45;
				break;
			case 10:
				v_akt_skill = 54;
				break;
			case 11:
				v_akt_skill = 56;
				break;
			case 12:
				v_akt_skill = 86;
				break;
			case 13:
				v_akt_skill = 78;
				break;
			case 14:
				v_akt_skill = 76;
				break;
			case 15:
				v_akt_skill = 77;
				break;
			case 16:
				v_akt_skill = 120;
				break;
			case 17:
				v_akt_skill = 91;
				break;
			case 18:
				v_akt_skill = 101;
				break;
			case 19:
				v_akt_skill = 102;
				break;
			case 20:
				v_akt_skill = 103;
				break;
			case 21:
				v_akt_skill = 92;
				break;
			case 22:
				v_akt_skill = 93;
				break;
			case 23:
				v_akt_skill = 94;
				break;
			case 24:
				v_akt_skill = 95;
				break;
			case 25:
				v_akt_skill = 96;
				break;
			case 26:
				v_akt_skill = 105;
				break;
			case 27:
				v_akt_skill = 116;
				break;
			case 28:
				v_akt_skill = 131;
				break;
			case 29:
				v_akt_skill = 0;
				break;
			case 30:
				v_akt_skill = 50;
				break;
			case 31:
				v_akt_skill = 104;
				break;
			case 32:
				v_akt_skill = 117;
				break;
			case 33:
				v_akt_skill = 118;
				break;
			case 34:
				v_akt_skill = 0;
				break;
			case 35:
				v_akt_skill = 1;
				break;
			case 36:
				v_akt_skill = 2;
				break;
			case 37:
				v_akt_skill = 3;
				break;
			case 38:
				v_akt_skill = 4;
				break;
			case 39:
				v_akt_skill = 41;
				break;
			case 40:
				v_akt_skill = 46;
				break;
			case 41:
				v_akt_skill = 49;
				break;
			case 42:
				v_akt_skill = 5;
				break;
			case 43:
				v_akt_skill = 6;
				break;
			case 44:
				v_akt_skill = 7;
				break;
			case 45:
				v_akt_skill = 9;
				break;
			case 46:
				v_akt_skill = 57;
				break;
			case 47:
				v_akt_skill = 42;
				break;
			case 48:
				v_akt_skill = 10;
				break;
			case 49:
				v_akt_skill = 11;
				break;
			case 50:
				v_akt_skill = 12;
				break;
			case 51:
				v_akt_skill = 13;
				break;
			case 52:
				v_akt_skill = 14;
				break;
			case 53:
				v_akt_skill = 15;
				break;
			case 54:
				v_akt_skill = 16;
				break;
			case 55:
				v_akt_skill = 17;
				break;
			case 56:
				v_akt_skill = 18;
				break;
			case 57:
				v_akt_skill = 19;
				break;
			case 58:
				v_akt_skill = 20;
				break;
			case 59:
				v_akt_skill = 21;
				break;
			case 60:
				v_akt_skill = 60;
				break;
			case 61:
				v_akt_skill = 75;
				break;
			case 62:
				v_akt_skill = 97;
				break;
			case 63:
				v_akt_skill = 106;
				break;
			case 64:
				v_akt_skill = 107;
				break;
			case 65:
				v_akt_skill = 114;
				break;
			case 66:
				v_akt_skill = 132;
				break;
			case 67:
				v_akt_skill = 122;
				break;
			case 68:
				v_akt_skill = 0;
				break;
			case 69:
				v_akt_skill = 28;
				break;
			case 70:
				v_akt_skill = 29;
				break;
			case 71:
				v_akt_skill = 30;
				break;
			case 72:
				v_akt_skill = 31;
				break;
			case 73:
				v_akt_skill = 32;
				break;
			case 74:
				v_akt_skill = 33;
				break;
			case 75:
				v_akt_skill = 34;
				break;
			case 76:
				v_akt_skill = 48;
				break;
			case 77:
				v_akt_skill = 89;
				break;
			case 78:
				v_akt_skill = 108;
				break;
			case 79:
				v_akt_skill = 99;
				break;
			case 80:
				v_akt_skill = 100;
				break;
			case 81:
				v_akt_skill = 119;
				break;
			case 82:
				v_akt_skill = 134;
				break;
			case 83:
				v_akt_skill = 135;
				break;
			case 84:
				v_akt_skill = 0;
				break;
			case 85:
				v_akt_skill = 35;
				break;
			case 86:
				v_akt_skill = 36;
				break;
			case 87:
				v_akt_skill = 39;
				break;
			case 88:
				v_akt_skill = 43;
				break;
			case 89:
				v_akt_skill = 44;
				break;
			case 90:
				v_akt_skill = 47;
				break;
			case 91:
				v_akt_skill = 59;
				break;
			case 92:
				v_akt_skill = 71;
				break;
			case 93:
				v_akt_skill = 87;
				break;
			case 94:
				v_akt_skill = 88;
				break;
			case 95:
				v_akt_skill = 109;
				break;
			case 96:
				v_akt_skill = 110;
				break;
			case 97:
				v_akt_skill = 111;
				break;
			case 98:
				v_akt_skill = 113;
				break;
			case 99:
				v_akt_skill = 55;
				break;
			case 100:
				v_akt_skill = 123;
				break;
			case 101:
				v_akt_skill = 124;
				break;
			case 102:
				v_akt_skill = 129;
				break;
			case 103:
				v_akt_skill = 0;
				break;
			case 104:
				v_akt_skill = 8;
				break;
			case 105:
				v_akt_skill = 79;
				break;
			case 106:
				v_akt_skill = 80;
				break;
			case 107:
				v_akt_skill = 81;
				break;
			case 108:
				v_akt_skill = 82;
				break;
			case 109:
				v_akt_skill = 84;
				break;
			case 110:
				v_akt_skill = 83;
				break;
			case 111:
				v_akt_skill = 0;
				break;
			case 112:
				v_akt_skill = 98;
				break;
			case 113:
				v_akt_skill = 37;
				break;
			case 114:
				v_akt_skill = 38;
				break;
			case 115:
				v_akt_skill = 51;
				break;
			case 116:
				v_akt_skill = 53;
				break;
			case 117:
				v_akt_skill = 58;
				break;
			case 118:
				v_akt_skill = 90;
				break;
			case 119:
				v_akt_skill = 115;
				break;
			case 120:
				v_akt_skill = 121;
				break;
			case 121:
				v_akt_skill = 128;
				break;
			case 122:
				v_akt_skill = 130;
				break;
			case 123:
				v_akt_skill = 0;
				break;
			case 124:
				v_akt_skill = 61;
				break;
			case 125:
				v_akt_skill = 62;
				break;
			case 126:
				v_akt_skill = 63;
				break;
			case 127:
				v_akt_skill = 64;
				break;
			case 128:
				v_akt_skill = 65;
				break;
			case 129:
				v_akt_skill = 66;
				break;
			case 130:
				v_akt_skill = 67;
				break;
			case 131:
				v_akt_skill = 68;
				break;
			case 132:
				v_akt_skill = 69;
				break;
			case 133:
				v_akt_skill = 70;
				break;
			case 134:
				v_akt_skill = 74;
				break;
			case 135:
				v_akt_skill = 73;
				break;
			case 136:
				v_akt_skill = 72;
				break;
			case 137:
				v_akt_skill = 85;
				break;
			case 138:
				v_akt_skill = 112;
				break;
			case 139:
				v_akt_skill = 133;
				break;
			case 140:
				v_akt_skill = 0;
				break;
			case 141:
				v_akt_skill = 125;
				break;
			case 142:
				v_akt_skill = 126;
				break;
			case 143:
				v_akt_skill = 127;
				break;
			default:
				v_akt_skill = 0;
				break;
			}
			if (v_akt_skill > 0) {
				if (v_mk_csv == 1) {
					p_printn(p_str(v_akt_skill) + ",'" + a_skills("highscore_upload", v_i, 1).f_name[1] + "','" + a_skills("highscore_upload", v_i, 1).f_name[2] + "','" + a_skills("highscore_upload", v_i, 1).f_name[3] + "'," + p_str(a_skills("highscore_upload", v_i, 1).f_gruppe) + "," + p_str(a_skills("highscore_upload", v_i, 1).f_kosten));
				} else {
					v_charactereigenschaften = v_charactereigenschaften + p_right(p_str(v_akt_skill), 3);
				}
			}
		}
	}
	if (v_mk_csv == 1) {
		return 0;
	}
	v_gef_stabteile = p_anz_staffpieces();
	v_icon = a_spieler("highscore_upload", g_akt_spieler).f_maennchen;
	v_endezeit = p_formatdate("%yyyy%mm%dd%hh%ii%ss", p_date());
	v_mks = a_spieler("highscore_upload", g_akt_spieler).f_mks;
	v_score = p_punkte();
	if (!p_initnetwork()) {
	}
	v_con = p_opennetworkconnection(v_server, 80);
	if (!v_con) {
	}
	v_p = "name=" + p_replacestring(v_name, " ", "%20");
	v_p = v_p + "&verifikation=" + v_verifikation;
	v_p = v_p + "&anfangszeit=" + g_anfangszeit;
	v_p = v_p + "&endezeit=" + v_endezeit;
	v_p = v_p + "&ebene=" + p_str(v_ebene);
	v_p = v_p + "&mks=" + p_str(v_mks);
	v_p = v_p + "&punkte=" + p_str(v_score);
	v_p = v_p + "&version=" + v_version;
	v_p = v_p + "&gold=" + p_str(v_gold);
	v_p = v_p + "&cause_of_death=" + p_str(v_todesart);
	v_p = v_p + "&cause_of_death_monster=" + p_str(v_todesart_monster);
	v_p = v_p + "&last_words=" + p_replacestring(v_last_words, " ", "%20");
	v_p = v_p + "&icon=" + p_str(v_icon);
	v_p = v_p + "&st=" + p_str(v_gef_stabteile);
	v_p = v_p + "&runden=" + p_str(v_runden);
	v_p = v_p + "&ce=" + v_charactereigenschaften;
	v_p = v_p + "&saves=" + p_str(g_nr_of_saves);
	v_p = v_p + "&nr_of_players=" + p_str(g_nr_of_players);
	v_p = v_p + "&max_lp=" + p_str(a_spieler("highscore_upload", g_akt_spieler).f_maxlifepoints);
	v_p = v_p + "&max_mp=" + p_str(a_spieler("highscore_upload", g_akt_spieler).f_maxmana);
	v_p = v_p + "&attack=" + p_str(a_spieler("highscore_upload", g_akt_spieler).f_attack);
	v_p = v_p + "&dexterity=" + p_str(a_spieler("highscore_upload", g_akt_spieler).f_dexterity);
	v_p = v_p + "&strength=" + p_str(a_spieler("highscore_upload", g_akt_spieler).f_strength);
	v_p = v_p + "&max_speed=" + p_str(a_spieler("highscore_upload", g_akt_spieler).f_maxspeed);
	v_p = v_p + "&perception=" + p_str(a_spieler("highscore_upload", g_akt_spieler).f_perception);
	v_p = v_p + "&luck=" + p_str(a_spieler("highscore_upload", g_akt_spieler).f_luck_score);
	v_p = v_p + "&power=" + p_str(a_spieler("highscore_upload", g_akt_spieler).f_power_score);
	v_p = v_p + "&circle=" + p_str(a_spieler("highscore_upload", g_akt_spieler).f_circle);
	p_sendnetworkstring(v_con, "GET /newhighscore.php?" + v_p + " HTTP/1.1\n");
	p_sendnetworkstring(v_con, "Host: " + v_server + "\n");
	p_sendnetworkstring(v_con, "User-agent: PureBasicAgent\n");
	p_sendnetworkstring(v_con, "Accept: */*\n");
	p_sendnetworkstring(v_con, "\n");
	p_closenetworkconnection(v_con);
	p_message(330, 5);
}

static intptr_t p_hilfe() {
	int16_t v_esc_but_x = 0;
	int16_t v_esc_but_y = 0;
	int16_t v_mmouse_links = 0;
	int16_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_pos_x = 0;
	intptr_t v_pos_y = 0;
	int16_t v_raus = 0;
	std::string v_text;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	v_raus = 0;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		if (g_gb_callfromtitlescreen == 1) {
			p_clipsprite(18, 0, 0, 640, 480);
			p_displaysprite(18, 0, 0);
			p_draw_plain_frame(-1);
			v_x = 220;
			v_y = 90;
			v_pos_x = 220;
			v_pos_y = 400;
			v_esc_but_x = 593;
			v_esc_but_y = 16;
		} else {
			p_laby_rahmen(0);
			p_show_logo();
			p_show_varys(1);
			p_show_buttons();
			p_clearmessagewindow();
			p_clipsprite(14, 1, 1, 335, 335);
			p_displaytransparentsprite(14, 16, 16);
			v_x = 100;
			v_y = 70;
			v_pos_x = 60;
			v_pos_y = 385;
			v_esc_but_x = 319;
			v_esc_but_y = 16;
		}
		p_startdrawing(p_screenoutput());
		p_drawingmode(1);
		p_frontcolor(16776960);
		p_drawtext(v_x, v_y, a_message_text("hilfe", 67, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 74, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 69, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 70, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 518, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 657, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 886, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 68, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 71, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 72, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 808, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 73, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 408, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 806, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 807, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 720, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 698, (g_language + 1)), -1, 0);
		v_y += g_yplus;
		p_drawtext(v_x, v_y, a_message_text("hilfe", 415, (g_language + 1)), -1, 0);
		p_stopdrawing();
		p_examinekeyboard();
		if (p_examinemouse()) {
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
		}
		p_drawbuttonnotpressed(69, v_pos_x, v_pos_y, 6, 24, "1." + a_message_text("hilfe", 819, (1 + g_language)));
		if ((v_mmouse_x > (v_pos_x - 6) && v_mmouse_x < (v_pos_x + 60) && v_mmouse_y > (v_pos_y - 6) && v_mmouse_y < (v_pos_y + 20)) || p_keyboardpushed(49)) {
			v_text = "";
			if (!g_language) {
				v_text = "readme.txt";
			}
			if (g_language == 1) {
				v_text = "liesmich.txt";
			}
			if (g_language == 2) {
				v_text = "leeme.txt";
			}
			p_drawbuttonpressed(69, v_pos_x, v_pos_y, 6, 24, "1." + a_message_text("hilfe", 819, (1 + g_language)));
			if (v_mmouse_links == 1 || p_keyboardpushed(49)) {
				p_display(v_text);
			}
		}
		p_drawbuttonnotpressed(69, (v_pos_x + 100), v_pos_y, 6, 24, "2." + a_message_text("hilfe", 820, (1 + g_language)));
		if ((v_mmouse_x > (v_pos_x + 94) && v_mmouse_x < (v_pos_x + 200) && v_mmouse_y > (v_pos_y - 6) && v_mmouse_y < (v_pos_y + 20)) || p_keyboardpushed(50)) {
			v_text = "";
			if (!g_language) {
				v_text = "readme_spells.txt";
			}
			if (g_language == 1) {
				v_text = "liesmich_zauber.txt";
			}
			if (g_language == 2) {
				v_text = "leeme_hechizos.txt";
			}
			p_drawbuttonpressed(69, (v_pos_x + 100), v_pos_y, 6, 24, "2." + a_message_text("hilfe", 820, (1 + g_language)));
			if (v_mmouse_links == 1 || p_keyboardpushed(50)) {
				p_display(v_text);
			}
		}
		p_drawbuttonnotpressed(69, (v_pos_x + 230), v_pos_y, 6, 24, "3.FAQ");
		if ((v_mmouse_x > (v_pos_x + 224) && v_mmouse_x < (v_pos_x + 250) && v_mmouse_y > (v_pos_y - 6) && v_mmouse_y < (v_pos_y + 20)) || p_keyboardpushed(51)) {
			v_text = "";
			if (!g_language) {
				v_text = "FAQ_eng.txt";
			}
			if (g_language == 1) {
				v_text = "FAQ_deu.txt";
			}
			if (g_language == 2) {
				v_text = "FAQ_esp.txt";
			}
			p_drawbuttonpressed(69, (v_pos_x + 230), v_pos_y, 6, 24, "3.FAQ");
			if (v_mmouse_links == 1 || p_keyboardpushed(51)) {
				p_display(v_text);
			}
		}
		if (v_mmouse_x >= v_esc_but_x && v_mmouse_x <= (v_esc_but_x + 32) && v_mmouse_y >= v_esc_but_y && v_mmouse_y <= (v_esc_but_y + 32)) {
			p_clipsprite(6, 96, 32, 31, 31);
			if (v_mmouse_links == 1) {
				v_raus = 1;
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, v_esc_but_x, v_esc_but_y);
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
	} while (!(p_keyboardpushed(27) || v_mmouse_rechts == 1 || v_raus == 1));
}

static intptr_t p_hydra_cut_head(int16_t v_act_nr_in_level) {
	p_resetlist(ll_room_list);
	do {
		p_nextelement(ll_room_list);
	} while (!(LIST_CURRENT(ll_room_list,struct st_room_type).f_nr_in_level == v_act_nr_in_level && LIST_CURRENT(ll_room_list,struct st_room_type).f_level == a_spieler("hydra_cut_head", g_akt_spieler).f_level));
	LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 = (LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 - 1);
	p_message(287, 3);
	p_nachricht3(289, LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1, 290);
	if (LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 < 1) {
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("hydra_cut_head", g_akt_spieler).f_level, 71, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("hydra_cut_head", g_akt_spieler).f_level, 89, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("hydra_cut_head", g_akt_spieler).f_level, 89, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("hydra_cut_head", g_akt_spieler).f_level, 89, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("hydra_cut_head", g_akt_spieler).f_level, 89, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("hydra_cut_head", g_akt_spieler).f_level, 89, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("hydra_cut_head", g_akt_spieler).f_level, 9, 0, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("hydra_cut_head", g_akt_spieler).f_level, 9, 0, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("hydra_cut_head", g_akt_spieler).f_level, 89, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("hydra_cut_head", g_akt_spieler).f_level, 89, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("hydra_cut_head", g_akt_spieler).f_level, 89, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("hydra_cut_head", g_akt_spieler).f_level, 89, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("hydra_cut_head", g_akt_spieler).f_level, 89, 0, 0);
	}
}

static intptr_t p_hydra_grow_head(int16_t v_act_nr_in_level) {
	intptr_t v_neue_koepfe = 0;
	v_neue_koepfe = (p_get_chance(50) + 1);
	p_resetlist(ll_room_list);
	do {
		p_nextelement(ll_room_list);
	} while (!(LIST_CURRENT(ll_room_list,struct st_room_type).f_nr_in_level == v_act_nr_in_level && LIST_CURRENT(ll_room_list,struct st_room_type).f_level == a_spieler("hydra_grow_head", g_akt_spieler).f_level));
	LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 = (LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 + v_neue_koepfe);
	if (LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 > 9) {
		LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 = 9;
	}
	p_nachricht3(289, LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1, 290);
}

static intptr_t p_hydra_zauber(int16_t v_schaden) {
	int16_t v_act_nr_in_level = 0;
	int16_t v_ishydra = 0;
	v_ishydra = 0;
	if (p_isthydra((a_spieler("hydra_zauber", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("hydra_zauber", g_akt_spieler).f_character_y + g_spell_y))) {
		v_ishydra = 1;
		v_act_nr_in_level = a_labyrinth("hydra_zauber", a_spieler("hydra_zauber", g_akt_spieler).f_level, (a_spieler("hydra_zauber", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("hydra_zauber", g_akt_spieler).f_character_y + g_spell_y)).f_stat1;
		if (v_schaden > p_min(p_max(((a_spieler("hydra_zauber", g_akt_spieler).f_level / 2) + 1), 6), 15)) {
			p_hydra_cut_head(v_act_nr_in_level);
		} else {
			p_hydra_grow_head(v_act_nr_in_level);
		}
	}
	return v_ishydra;
}

static intptr_t p_init_merchant(int16_t v_type) {
	intptr_t v_i = 0;
	int16_t v_unique_exists = 0;
	for (v_i = 0; v_i <= 55; v_i += 1) {
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = 0;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_spell = 0;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_power = 0;
	}
	switch (v_type) {
	case 1:
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[0].f_id = 56;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[1].f_id = 44;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[2].f_id = 46;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[3].f_id = 39;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[4].f_id = 134;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[5].f_id = 193;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[6].f_id = 20;
		for (v_i = 7; v_i <= 28; v_i += 1) {
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = ((1 + v_i) - 7);
		}
		for (v_i = 29; v_i <= 39; v_i += 1) {
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = ((23 + v_i) - 29);
		}
		break;
	case 2:
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[0].f_id = 60;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[1].f_id = 44;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[2].f_id = 46;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[3].f_id = 39;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[4].f_id = 134;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[5].f_id = 193;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[6].f_id = 20;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[7].f_id = 147;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[8].f_id = 270;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[9].f_id = 186;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[10].f_id = 240;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[11].f_id = 229;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[12].f_id = 239;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[13].f_id = 248;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[14].f_id = 200;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[15].f_id = 142;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[16].f_id = 143;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[17].f_id = 177;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[18].f_id = 178;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[19].f_id = 179;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[20].f_id = 180;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[21].f_id = 181;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[22].f_id = 182;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[23].f_id = 183;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[24].f_id = 184;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[25].f_id = 267;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[26].f_id = 220;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[27].f_id = 221;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[28].f_id = 146;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[29].f_id = 260;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[30].f_id = 190;
		for (v_i = 31; v_i <= 39; v_i += 1) {
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = p_make_potion(0);
		}
		break;
	case 3:
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[0].f_id = 61;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[1].f_id = 44;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[2].f_id = 46;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[3].f_id = 39;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[4].f_id = 134;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[5].f_id = 193;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[6].f_id = 20;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[7].f_id = 269;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[8].f_id = 399;
		for (v_i = 9; v_i <= 14; v_i += 1) {
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = ((261 + v_i) - 9);
		}
		for (v_i = 15; v_i <= 20; v_i += 1) {
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = ((135 + v_i) - 15);
		}
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[21].f_id = 51;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[22].f_id = 145;
		for (v_i = 23; v_i <= 39; v_i += 1) {
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = p_make_potion(0);
		}
		break;
	case 4:
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[0].f_id = 63;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[1].f_id = 43;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[2].f_id = 46;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[3].f_id = 39;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[4].f_id = 134;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[5].f_id = 193;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[6].f_id = 20;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[7].f_id = 162;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[8].f_id = 232;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[9].f_id = 247;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[10].f_id = 244;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[11].f_id = 241;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[12].f_id = 292;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[13].f_id = 291;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[14].f_id = 302;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[15].f_id = 303;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[16].f_id = 304;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[17].f_id = 305;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[18].f_id = 306;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[19].f_id = 307;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[20].f_id = 155;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[21].f_id = 156;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[22].f_id = 157;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[23].f_id = 158;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[24].f_id = 160;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[25].f_id = 41;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[26].f_id = 161;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[27].f_id = 53;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[28].f_id = 52;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[29].f_id = 164;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[30].f_id = 385;
		for (v_i = 31; v_i <= 39; v_i += 1) {
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = 38;
			do {
				LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_spell = (p_random(183) + 1);
			} while (!(a_spells("init_merchant", LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_spell).f_duration != -1));
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_power = (p_random(7) + 6);
		}
		break;
	case 5:
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[0].f_id = 64;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[1].f_id = 42;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[2].f_id = 46;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[3].f_id = 39;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[4].f_id = 134;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[5].f_id = 193;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[6].f_id = 20;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[7].f_id = 326;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[8].f_id = 327;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[9].f_id = 355;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[10].f_id = 165;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[11].f_id = 289;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[12].f_id = 280;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[13].f_id = 281;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[14].f_id = 286;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[15].f_id = 284;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[16].f_id = 287;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[17].f_id = 288;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[18].f_id = 357;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[19].f_id = 358;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[20].f_id = 359;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[21].f_id = 360;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[22].f_id = 361;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[23].f_id = 362;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[24].f_id = 363;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[25].f_id = 364;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[26].f_id = 365;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[27].f_id = 366;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[28].f_id = 368;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[29].f_id = 369;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[30].f_id = 370;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[31].f_id = 371;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[32].f_id = 372;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[33].f_id = 373;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[34].f_id = 374;
		LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[35].f_id = 375;
		for (v_i = 36; v_i <= 39; v_i += 1) {
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = 38;
			do {
				LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_spell = (p_random(183) + 1);
			} while (!(a_spells("init_merchant", LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_spell).f_duration != -1));
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_power = (p_random(5) + 3);
		}
		break;
	default:
		if (!v_type) {
			v_type = (p_random(9) + 5);
		}
		switch (v_type) {
		case 5:
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[0].f_id = 193;
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[1].f_id = 193;
			break;
		case 6:
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[0].f_id = 46;
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[1].f_id = 46;
			break;
		case 7:
			for (v_i = 0; v_i <= 1; v_i += 1) {
				LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = 38;
				do {
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_spell = (p_random(183) + 1);
				} while (!(a_spells("init_merchant", LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_spell).f_duration != -1));
				LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_power = (p_random(5) + 3);
			}
			break;
		case 8:
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[0].f_id = 231;
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[1].f_id = 219;
			break;
		case 9:
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[0].f_id = 270;
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[1].f_id = 269;
			break;
		case 10:
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[0].f_id = p_make_potion(0);
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[1].f_id = p_make_potion(0);
			break;
		case 11:
			for (v_i = 0; v_i <= 1; v_i += 1) {
				switch ((p_random(4) + 1)) {
				case 1:
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = 197;
					break;
				case 2:
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = 198;
					break;
				case 3:
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = 199;
					break;
				case 4:
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = 209;
					break;
				case 5:
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = 210;
					break;
				}
			}
			break;
		case 12:
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[0].f_id = 32;
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[1].f_id = 33;
			break;
		case 13:
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[0].f_id = 26;
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[1].f_id = 27;
			break;
		case 14:
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[0].f_id = 56;
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[1].f_id = 56;
			break;
		}
		break;
	}
	for (v_i = 0; v_i <= 55; v_i += 1) {
		if (a_item("init_merchant", LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id).f_qualitaet == 1) {
			LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_power = (p_random(2) + 1);
		}
	}
	for (v_i = 0; v_i <= 55; v_i += 1) {
		if (a_item("init_merchant", LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id).f_unique == 1) {
			v_unique_exists = 0;
			p_resetlist(ll_unique_items);
			while (p_nextelement(ll_unique_items)) {
				if (LIST_CURRENT(ll_unique_items,struct st_unique_item).f_name == LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id) {
					v_unique_exists = 1;
				}
			}
			if (v_unique_exists == 1) {
				LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = 46;
			}
		}
	}
}

static intptr_t p_init_traenke() {
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_k = 0;
	intptr_t v_nach = 0;
	int16_t v_potion_god = 0;
	int16_t v_potion_hero = 0;
	std::string v_result;
	intptr_t v_von = 0;
	struct st_gs v_zw_geg;
	v_potion_god = 0;
	v_potion_hero = 0;
	for (v_i = 0; v_i <= 36; v_i += 1) {
		v_von = (75 + v_i);
		v_nach = ((75 + v_i) + p_random((37 - v_i)));
		for (v_k = 1; v_k <= 3; v_k += 1) {
			v_zw_geg.f_name[v_k] = a_item("init_traenke", v_von).f_name[v_k];
		}
		v_zw_geg.f_attri1 = a_item("init_traenke", v_von).f_attri1;
		v_zw_geg.f_einkauf = a_item("init_traenke", v_von).f_einkauf;
		v_zw_geg.f_verkauf = a_item("init_traenke", v_von).f_verkauf;
		for (v_k = 1; v_k <= 3; v_k += 1) {
			a_item("init_traenke", v_von).f_name[v_k] = a_item("init_traenke", v_nach).f_name[v_k];
		}
		a_item("init_traenke", v_von).f_attri1 = a_item("init_traenke", v_nach).f_attri1;
		a_item("init_traenke", v_von).f_einkauf = a_item("init_traenke", v_nach).f_einkauf;
		a_item("init_traenke", v_von).f_verkauf = a_item("init_traenke", v_nach).f_verkauf;
		if (a_item("init_traenke", v_von).f_attri1 == 6) {
			v_potion_god = (75 + v_i);
		} else {
			if (a_item("init_traenke", v_von).f_attri1 == 5) {
				v_potion_hero = (75 + v_i);
			}
		}
		for (v_k = 1; v_k <= 3; v_k += 1) {
			a_item("init_traenke", v_nach).f_name[v_k] = v_zw_geg.f_name[v_k];
		}
		a_item("init_traenke", v_nach).f_attri1 = v_zw_geg.f_attri1;
		a_item("init_traenke", v_nach).f_einkauf = v_zw_geg.f_einkauf;
		a_item("init_traenke", v_nach).f_verkauf = v_zw_geg.f_verkauf;
	}
	for (v_i = 0; v_i <= 37; v_i += 1) {
		do {
			a_mischen("init_traenke", v_i).f_result = (p_random(37) + 75);
		} while (!(a_mischen("init_traenke", v_i).f_result != v_potion_god && a_mischen("init_traenke", v_i).f_result != v_potion_hero && a_mischen("init_traenke", v_i).f_result != (v_i + 75)));
		a_mischen("init_traenke", v_i).f_learned = 0;
	}
	for (v_i = 1; v_i <= 3; v_i += 1) {
		do {
			v_j = (p_random(37) + 75);
		} while (!(v_j != v_potion_god && v_j != v_potion_hero && a_mischen("init_traenke", (v_j - 75)).f_result != -1));
		a_mischen("init_traenke", (v_j - 75)).f_result = -1;
	}
	a_spell_chance_buff("init_traenke", 0) = 1;
	a_lore_chance_buff("init_traenke", 0) = 1;
	a_hit_chance_buff("init_traenke", 0) = 1;
	a_critical_chance_buff("init_traenke", 0) = 1;
	a_damage_buff("init_traenke", 0) = 1;
	a_damage_buff2("init_traenke", 0) = 1;
	a_wand_buff("init_traenke", 0) = 1;
	a_scroll_buff("init_traenke", 0) = 1;
	a_alch_buff("init_traenke", 0) = 1;
	a_break_chance_buff("init_traenke", 0) = 1;
	a_gold_buff("init_traenke", 0) = 1;
	a_boulder_buff("init_traenke", 0) = 1;
	a_herb_buff("init_traenke", 0) = 1;
	a_crysolit_buff("init_traenke", 0) = 1;
	a_god_bonus_buff("init_traenke", 0) = 1;
	a_fish_buff("init_traenke", 0) = 1;
	a_general_percent_buff("init_traenke", 0) = 1;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		p_get_chance(3);
		p_get_chance(61);
		p_get_chance(62);
		p_get_chance(999);
		p_get_chance(998);
		p_get_chance(997);
		p_get_chance(996);
		p_get_chance(995);
		p_get_chance(994);
		p_get_chance(100);
		p_get_chance(101);
		p_get_chance(102);
		p_get_chance(103);
		p_get_chance(104);
		p_get_chance(105);
		p_get_chance(106);
		p_get_chance(1001);
		p_get_chance(1002);
	}
	for (v_i = 1; v_i <= 31; v_i += 1) {
		p_get_chance(5);
		p_get_chance(10);
		p_get_chance(15);
		p_get_chance(20);
		p_get_chance(50);
	}
	if (g_test == 3) {
		for (v_i = 1; v_i <= 38; v_i += 1) {
			if (a_mischen("init_traenke", (v_i - 1)).f_result == -1) {
				v_result = "!KABOOM!";
			} else {
				v_result = a_item("init_traenke", a_mischen("init_traenke", (v_i - 1)).f_result).f_name[1];
			}
			if (v_i < 21) {
				v_result = v_result + " <b>" + a_item("init_traenke", a_alch_buff("init_traenke", v_i)).f_name[1];
			}
			p_print(a_item("init_traenke", ((75 + v_i) - 1)).f_name[1] + " -> " + v_result);
		}
	}
}

static intptr_t p_insert_knot(int16_t v_x, int16_t v_y, int16_t v_parent_x, int16_t v_parent_y, int16_t v_cost, int16_t v_target_x, int16_t v_target_y) {
	if (!p_isinopenlist(v_x, v_y) && !p_isinclosedlist(v_x, v_y)) {
		if (p_addelement(ll_openlist)) {
			LIST_CURRENT(ll_openlist,struct st_knot).f_parent_x = v_parent_x;
			LIST_CURRENT(ll_openlist,struct st_knot).f_parent_y = v_parent_y;
			LIST_CURRENT(ll_openlist,struct st_knot).f_x = v_x;
			LIST_CURRENT(ll_openlist,struct st_knot).f_y = v_y;
			LIST_CURRENT(ll_openlist,struct st_knot).f_cost = ((v_cost + 1) + p_manhatten(v_x, v_y, v_target_x, v_target_y));
		}
	}
}

static intptr_t p_insert_knots(int16_t v_x, int16_t v_y, int16_t v_cost, int16_t v_target_x, int16_t v_target_y, int16_t v_creature) {
	int16_t v_akt_radius = 0;
	int16_t v_k = 0;
	int16_t v_tx = 0;
	int16_t v_ty = 0;
	int16_t v_xd = 0;
	int16_t v_yd = 0;
	v_akt_radius = (p_radius() + 1);
	if (v_creature) {
		v_tx = ((a_spieler("insert_knots", g_akt_spieler).f_creature_x - 7) + v_x);
		v_ty = ((a_spieler("insert_knots", g_akt_spieler).f_creature_y - 7) + v_y);
	} else {
		v_tx = ((a_spieler("insert_knots", g_akt_spieler).f_character_x - 7) + v_x);
		v_ty = ((a_spieler("insert_knots", g_akt_spieler).f_character_y - 7) + v_y);
	}
	for (v_k = 1; v_k <= 4; v_k += 1) {
		v_xd = p_neighbour_offset(v_k, 0);
		v_yd = p_neighbour_offset(v_k, 1);
		if ((v_x + v_xd) > 0 && (v_x + v_xd) <= 13 && (v_y + v_yd) > 0 && (v_y + v_yd) <= 13 && (v_tx + v_xd) > 0 && (v_ty + v_yd) > 0) {
			if (a_matrix("insert_knots", (v_x + v_xd), (v_y + v_yd)) <= v_akt_radius) {
				p_insert_knot((v_x + v_xd), (v_y + v_yd), v_x, v_y, v_cost, v_target_x, v_target_y);
			}
		}
	}
}

static intptr_t p_lehrer(intptr_t v_welcher, int16_t v_act_nr_in_level) {
	intptr_t v_kosten = 0;
	int16_t v_lernen = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	int16_t v_raus = 0;
	intptr_t v_result = 0;
	int16_t v_sel = 0;
	intptr_t v_wohin = 0;
	v_sel = 1;
	p_resetlist(ll_room_list);
	do {
		p_nextelement(ll_room_list);
	} while (!(LIST_CURRENT(ll_room_list,struct st_room_type).f_nr_in_level == v_act_nr_in_level && LIST_CURRENT(ll_room_list,struct st_room_type).f_level == a_spieler("lehrer", g_akt_spieler).f_level));
	if (LIST_CURRENT(ll_room_list,struct st_room_type).f_only_once[g_akt_spieler] > 0) {
		do {
			p_fenster(0);
			p_clearscreen(p_rgb(0, 0, 0));
			p_draw_plain_frame(-1);
			v_raus = 0;
			v_lernen = 0;
			p_read_joystick();
			p_examinekeyboard();
			if (p_keyboardpushed(273) || g_jay == -1) {
				v_sel = 1;
			}
			if (p_keyboardpushed(274) || g_jay == 1) {
				v_sel = 2;
			}
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(190, 25, a_message_text("lehrer", (202 + v_welcher), (1 + g_language)), -1, 0);
			switch (v_welcher) {
			case 1:
				v_kosten = (30 * a_spieler("lehrer", g_akt_spieler).f_luck_score);
				break;
			case 2:
				v_kosten = (30 * a_spieler("lehrer", g_akt_spieler).f_attack);
				break;
			case 3:
				v_kosten = (30 * a_spieler("lehrer", g_akt_spieler).f_dexterity);
				break;
			case 4:
				v_kosten = (30 * a_spieler("lehrer", g_akt_spieler).f_strength);
				break;
			case 5:
				v_kosten = (30 * ((intptr_t) a_spieler("lehrer", g_akt_spieler).f_maxlifepoints / a_spieler("lehrer", g_akt_spieler).f_lifegain));
				break;
			case 6:
				v_kosten = (5 * a_spieler("lehrer", g_akt_spieler).f_maxspeed);
				break;
			case 7:
				v_kosten = (30 * a_spieler("lehrer", g_akt_spieler).f_perception);
				break;
			case 8:
				v_kosten = (30 * ((intptr_t) a_spieler("lehrer", g_akt_spieler).f_maxmana / a_spieler("lehrer", g_akt_spieler).f_managain));
				break;
			case 9:
				v_kosten = (30 * a_spieler("lehrer", g_akt_spieler).f_power_score);
				break;
			case 10:
				v_kosten = (30 * a_spieler("lehrer", g_akt_spieler).f_circle);
				break;
			}
			if (a_skills("lehrer", 116, g_akt_spieler).f_gewaehlt == 1) {
				v_kosten = (v_kosten * 0.75);
			}
			p_drawtext(100, 100, a_message_text("lehrer", 213, (1 + g_language)) + p_str(v_kosten), -1, 0);
			switch (v_welcher) {
			case 1:
				p_drawtext(100, 125, a_message_text("lehrer", 216, (1 + g_language)) + "  " + p_str(a_spieler("lehrer", g_akt_spieler).f_luck_score), -1, 0);
				break;
			case 2:
				p_drawtext(100, 125, a_message_text("lehrer", 216, (1 + g_language)) + "  " + p_str(a_spieler("lehrer", g_akt_spieler).f_attack), -1, 0);
				break;
			case 3:
				p_drawtext(100, 125, a_message_text("lehrer", 216, (1 + g_language)) + "  " + p_str(a_spieler("lehrer", g_akt_spieler).f_dexterity), -1, 0);
				break;
			case 4:
				p_drawtext(100, 125, a_message_text("lehrer", 216, (1 + g_language)) + "  " + p_str(a_spieler("lehrer", g_akt_spieler).f_strength), -1, 0);
				break;
			case 5:
				p_drawtext(100, 125, a_message_text("lehrer", 216, (1 + g_language)) + "  " + p_str(a_spieler("lehrer", g_akt_spieler).f_maxlifepoints), -1, 0);
				break;
			case 6:
				p_drawtext(100, 125, a_message_text("lehrer", 216, (1 + g_language)) + "  " + p_str(a_spieler("lehrer", g_akt_spieler).f_maxspeed), -1, 0);
				break;
			case 7:
				p_drawtext(100, 125, a_message_text("lehrer", 216, (1 + g_language)) + "  " + p_str(a_spieler("lehrer", g_akt_spieler).f_perception), -1, 0);
				break;
			case 8:
				p_drawtext(100, 125, a_message_text("lehrer", 216, (1 + g_language)) + "  " + p_str(a_spieler("lehrer", g_akt_spieler).f_maxmana), -1, 0);
				break;
			case 9:
				p_drawtext(100, 125, a_message_text("lehrer", 216, (1 + g_language)) + "  " + p_str(a_spieler("lehrer", g_akt_spieler).f_power_score), -1, 0);
				break;
			case 10:
				p_drawtext(100, 125, a_message_text("lehrer", 216, (1 + g_language)) + "  " + p_str(a_spieler("lehrer", g_akt_spieler).f_circle), -1, 0);
				break;
			}
			p_drawtext(100, 150, a_message_text("lehrer", 883, (1 + g_language)) + p_str(p_gold_anzahl()), -1, 0);
			v_result = p_examinemouse();
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
			if (v_mmouse_x > 90 && v_mmouse_x < 190 && v_mmouse_y > 200 && v_mmouse_y < 220) {
				p_frontcolor(p_rgb(150, 150, 150));
				p_box(90, 200, 100, 20, -1);
				if (v_sel == 1) {
					p_frontcolor(p_rgb(1, 1, 255));
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(100, 200, a_message_text("lehrer", 214, (1 + g_language)), -1, 0);
				if (v_mmouse_links == 1) {
					v_lernen = 1;
				}
			} else {
				if (v_sel == 1) {
					p_frontcolor(p_rgb(1, 1, 255));
					if (p_keyboardpushed(13) || a_jb("lehrer", 1)) {
						v_lernen = 1;
					}
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(100, 200, a_message_text("lehrer", 214, (1 + g_language)), -1, 0);
			}
			if (v_mmouse_x > 90 && v_mmouse_x < 190 && v_mmouse_y > 220 && v_mmouse_y < 240) {
				p_frontcolor(p_rgb(150, 150, 150));
				p_box(90, 220, 100, 20, -1);
				if (v_sel == 2) {
					p_frontcolor(p_rgb(1, 1, 255));
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(100, 220, a_message_text("lehrer", 416, (1 + g_language)), -1, 0);
				if (v_mmouse_links == 1) {
					v_raus = 1;
				}
			} else {
				if (v_sel == 2) {
					p_frontcolor(p_rgb(1, 1, 255));
					if (p_keyboardpushed(13) || a_jb("lehrer", 1)) {
						v_raus = 1;
					}
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(100, 220, a_message_text("lehrer", 416, (1 + g_language)), -1, 0);
			}
			p_stopdrawing();
			if (v_lernen == 1) {
				if (p_gold_anzahl() >= v_kosten) {
					p_gold_verlieren(v_kosten);
					LIST_CURRENT(ll_room_list,struct st_room_type).f_only_once[g_akt_spieler] = (LIST_CURRENT(ll_room_list,struct st_room_type).f_only_once[g_akt_spieler] - 1);
					v_raus = 1;
					switch (v_welcher) {
					case 1:
						a_spieler("lehrer", g_akt_spieler).f_luck_score = (a_spieler("lehrer", g_akt_spieler).f_luck_score + 1);
						break;
					case 2:
						a_spieler("lehrer", g_akt_spieler).f_attack = (a_spieler("lehrer", g_akt_spieler).f_attack + 1);
						break;
					case 3:
						a_spieler("lehrer", g_akt_spieler).f_dexterity = (a_spieler("lehrer", g_akt_spieler).f_dexterity + 1);
						break;
					case 4:
						a_spieler("lehrer", g_akt_spieler).f_strength = (a_spieler("lehrer", g_akt_spieler).f_strength + 1);
						break;
					case 5:
						a_spieler("lehrer", g_akt_spieler).f_lifepoints = (a_spieler("lehrer", g_akt_spieler).f_lifepoints + 3);
						a_spieler("lehrer", g_akt_spieler).f_maxlifepoints = (a_spieler("lehrer", g_akt_spieler).f_maxlifepoints + 3);
						break;
					case 6:
						a_spieler("lehrer", g_akt_spieler).f_speed = (a_spieler("lehrer", g_akt_spieler).f_speed + 1);
						a_spieler("lehrer", g_akt_spieler).f_maxspeed = (a_spieler("lehrer", g_akt_spieler).f_maxspeed + 1);
						break;
					case 7:
						a_spieler("lehrer", g_akt_spieler).f_perception = (a_spieler("lehrer", g_akt_spieler).f_perception + 1);
						break;
					case 8:
						a_spieler("lehrer", g_akt_spieler).f_mana = (a_spieler("lehrer", g_akt_spieler).f_mana + 3);
						a_spieler("lehrer", g_akt_spieler).f_maxmana = (a_spieler("lehrer", g_akt_spieler).f_maxmana + 3);
						break;
					case 9:
						a_spieler("lehrer", g_akt_spieler).f_power_score = (a_spieler("lehrer", g_akt_spieler).f_power_score + 1);
						break;
					case 10:
						a_spieler("lehrer", g_akt_spieler).f_circle = (a_spieler("lehrer", g_akt_spieler).f_circle + 1);
						break;
					}
					p_message(217, 1);
				} else {
					p_message(215, 5);
					v_raus = 1;
				}
			}
			p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
			p_flipbuffers(1);
		} while (!(v_mmouse_rechts == 1 || v_raus == 1 || p_keyboardpushed(27)));
	} else {
		p_message(232, 1);
	}
	g_aktion = 1;
}

static intptr_t p_lernen(int16_t v_nr) {
	if (p_has_trait2(v_nr, 32)) {
		if (p_get_chance(102) < (5 - a_spieler("lernen", g_akt_spieler).f_spinnenlehre)) {
			a_spieler("lernen", g_akt_spieler).f_spinnenlehre = (a_spieler("lernen", g_akt_spieler).f_spinnenlehre + 1);
			p_message(625, 2);
		}
	}
	if (p_has_trait2(v_nr, 34)) {
		if (p_get_chance(102) < (5 - a_spieler("lernen", g_akt_spieler).f_untotenlehre)) {
			a_spieler("lernen", g_akt_spieler).f_untotenlehre = (a_spieler("lernen", g_akt_spieler).f_untotenlehre + 1);
			p_message(625, 2);
		}
	}
	if (p_has_trait2(v_nr, 33)) {
		if (p_get_chance(102) < (5 - a_spieler("lernen", g_akt_spieler).f_goblinlehre)) {
			a_spieler("lernen", g_akt_spieler).f_goblinlehre = (a_spieler("lernen", g_akt_spieler).f_goblinlehre + 1);
			p_message(625, 2);
		}
	}
	if (a_monster("lernen", v_nr).f_art == 1) {
		if (p_get_chance(102) < (5 - a_spieler("lernen", g_akt_spieler).f_tierkunde)) {
			a_spieler("lernen", g_akt_spieler).f_tierkunde = (a_spieler("lernen", g_akt_spieler).f_tierkunde + 1);
			p_message(625, 2);
		}
	}
	if (a_monster("lernen", v_nr).f_art == 4) {
		if (p_get_chance(102) < (5 - a_spieler("lernen", g_akt_spieler).f_pflanzenlehre)) {
			a_spieler("lernen", g_akt_spieler).f_pflanzenlehre = (a_spieler("lernen", g_akt_spieler).f_pflanzenlehre + 1);
			p_message(625, 2);
		}
	}
}

static intptr_t p_levelmodtext(int16_t v_welcher) {
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	int16_t v_raus = 0;
	int16_t v_release = 0;
	intptr_t v_result = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	p_sound(39);
	v_raus = 0;
	v_release = 1;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_laby_rahmen(0);
		p_show_logo();
		p_show_varys(0);
		p_show_buttons();
		p_clipsprite(14, 1, 1, 335, 335);
		p_displaytransparentsprite(14, 16, 16);
		v_x = 20;
		v_y = 35;
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_frontcolor(p_rgb(255, 1, 1));
		p_drawingmode(1);
		switch (v_welcher) {
		case 1:
			p_drawtext(v_x, v_y, p_nachricht4(377), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(378), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(379), -1, 0);
			break;
		case 2:
			p_drawtext(v_x, v_y, p_nachricht4(380), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(381), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(382), -1, 0);
			break;
		case 3:
			p_drawtext(v_x, v_y, p_nachricht4(383), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(384), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(385), -1, 0);
			break;
		case 4:
			p_drawtext(v_x, v_y, p_nachricht4(386), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(387), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(388), -1, 0);
			break;
		case 5:
			p_drawtext(v_x, v_y, p_nachricht4(390), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(391), -1, 0);
			break;
		case 6:
			p_drawtext(v_x, v_y, p_nachricht4(392), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(393), -1, 0);
			break;
		case 7:
			p_drawtext(v_x, v_y, p_nachricht4(394), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(395), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(396), -1, 0);
			break;
		case 8:
			p_drawtext(v_x, v_y, p_nachricht4(397), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(398), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(399), -1, 0);
			break;
		case 9:
			p_drawtext(v_x, v_y, p_nachricht4(420), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(421), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(422), -1, 0);
			break;
		case 10:
			p_drawtext(v_x, v_y, p_nachricht4(423), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(424), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(425), -1, 0);
			break;
		case 11:
			p_drawtext(v_x, v_y, p_nachricht4(607), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(608), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(609), -1, 0);
			break;
		case 12:
			p_drawtext(v_x, v_y, p_nachricht4(651), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(652), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(653), -1, 0);
			break;
		case 13:
			p_drawtext(v_x, v_y, p_nachricht4(809), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(810), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(811), -1, 0);
			break;
		case 14:
			p_drawtext(v_x, v_y, p_nachricht4(812), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(813), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(814), -1, 0);
			break;
		case 15:
			p_drawtext(v_x, v_y, p_nachricht4(815), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(816), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(817), -1, 0);
			break;
		}
		p_stopdrawing();
		p_read_joystick();
		p_examinekeyboard();
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mmouse_rechts = p_mousebutton(2);
		v_mmouse_links = p_mousebutton(1);
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		if (!(p_keyboardpushed(32) || v_mmouse_links)) {
			v_release = 0;
		}
		if (!v_release && (p_keyboardpushed(32) || v_mmouse_links == 1)) {
			v_raus = 1;
		}
		p_flipbuffers(1);
	} while (!(p_keyboardpushed(13) || v_mmouse_rechts == 1 || a_jb("levelmodtext", 1) || p_keyboardpushed(27) || v_raus == 1));
	p_delay(g_mydelay);
}

static intptr_t p_load(std::string v_name) {
	int16_t v_act_level = 0;
	intptr_t v_act_piece = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_k = 0;
	int16_t v_load = 0;
	int16_t v_merch_count = 0;
	int32_t v_monster_count = 0;
	intptr_t v_nr_of_saves = 0;
	std::string v_result;
	int16_t v_room_count = 0;
	std::string v_version;
	intptr_t v_y = 0;
	v_load = 0;
	if (p_readfile(0, g_environment + "/" + v_name)) {
		v_load = 1;
	} else {
		if (p_readfile(0, "./" + v_name)) {
			v_load = 1;
		}
	}
	if (v_load == 1) {
		v_version = p_readstring(0);
		v_nr_of_saves = p_readword(0);
		if (v_version != "09.10.2010" && !g_test) {
			p_message(320, 3);
		} else {
			g_nr_of_players = p_readword(0);
			g_akt_spieler = p_readword(0);
			g_anfangszeit = p_readstring(0);
			g_anz_levels = p_readword(0);
			for (v_j = 0; v_j <= 37; v_j += 1) {
				for (v_k = 1; v_k <= 3; v_k += 1) {
					a_item("load", (75 + v_j)).f_name[v_k] = p_readstring(0);
				}
				a_item("load", (75 + v_j)).f_attri1 = p_readword(0);
				a_item("load", (75 + v_j)).f_einkauf = p_readword(0);
				a_item("load", (75 + v_j)).f_verkauf = p_readword(0);
			}
			for (v_j = 0; v_j <= 9; v_j += 1) {
				for (v_k = 1; v_k <= 3; v_k += 1) {
					a_item("load", (65 + v_j)).f_name[v_k] = p_readstring(0);
				}
				a_item("load", (65 + v_j)).f_attri1 = p_readword(0);
				a_item("load", (65 + v_j)).f_einkauf = p_readword(0);
				a_item("load", (65 + v_j)).f_verkauf = p_readword(0);
				a_mush_known("load", v_j) = p_readword(0);
			}
			for (v_j = 0; v_j <= 37; v_j += 1) {
				a_mischen("load", v_j).f_result = p_readword(0);
				a_mischen("load", v_j).f_learned = p_readword(0);
			}
			for (v_j = 0; v_j <= 50; v_j += 1) {
				a_alch_buff("load", v_j) = p_readword(0);
				a_spell_chance_buff("load", v_j) = p_readword(0);
				a_lore_chance_buff("load", v_j) = p_readword(0);
				a_hit_chance_buff("load", v_j) = p_readword(0);
				a_critical_chance_buff("load", v_j) = p_readword(0);
				a_damage_buff("load", v_j) = p_readword(0);
				a_damage_buff2("load", v_j) = p_readword(0);
				a_wand_buff("load", v_j) = p_readword(0);
				a_scroll_buff("load", v_j) = p_readword(0);
				a_break_chance_buff("load", v_j) = p_readword(0);
				a_gold_buff("load", v_j) = p_readword(0);
				a_herb_buff("load", v_j) = p_readword(0);
				a_crysolit_buff("load", v_j) = p_readword(0);
				a_god_bonus_buff("load", v_j) = p_readword(0);
				a_fish_buff("load", v_j) = p_readword(0);
				a_general_percent_buff("load", v_j) = p_readword(0);
				a_boulder_buff("load", v_j) = p_readword(0);
			}
			g_item_break20 = p_readlong(0);
			g_item_break15 = p_readlong(0);
			g_item_break10 = p_readlong(0);
			g_item_break05 = p_readlong(0);
			g_next_qual = p_readlong(0);
			g_coin_toss = p_readlong(0);
			p_clearlist(ll_room_list);
			v_room_count = p_readword(0);
			while (v_room_count > 0) {
				p_addelement(ll_room_list);
				LIST_CURRENT(ll_room_list,struct st_room_type).f_level = p_readword(0);
				LIST_CURRENT(ll_room_list,struct st_room_type).f_nr_in_level = p_readword(0);
				LIST_CURRENT(ll_room_list,struct st_room_type).f_type = p_readword(0);
				LIST_CURRENT(ll_room_list,struct st_room_type).f_visions = p_readword(0);
				LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 = p_readword(0);
				LIST_CURRENT(ll_room_list,struct st_room_type).f_stat2 = p_readword(0);
				LIST_CURRENT(ll_room_list,struct st_room_type).f_x = p_readword(0);
				LIST_CURRENT(ll_room_list,struct st_room_type).f_y = p_readword(0);
				LIST_CURRENT(ll_room_list,struct st_room_type).f_exit_x = p_readword(0);
				LIST_CURRENT(ll_room_list,struct st_room_type).f_exit_y = p_readword(0);
				for (v_i = 1; v_i <= 4; v_i += 1) {
					LIST_CURRENT(ll_room_list,struct st_room_type).f_only_once[v_i] = p_readword(0);
				}
				v_room_count -= 1;
			}
			for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
				a_ausgangx("load", v_j) = p_readword(0);
			}
			for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
				a_ausgangy("load", v_j) = p_readword(0);
			}
			for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
				a_eingangx("load", v_j) = p_readword(0);
			}
			for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
				a_eingangy("load", v_j) = p_readword(0);
			}
			for (v_j = 1; v_j <= 150; v_j += 1) {
				a_sonderlevel("load", v_j) = p_readword(0);
				a_levelmod("load", v_j) = p_readword(0);
				a_skill_trader("load", v_j) = p_readword(0);
				a_small_trader("load", v_j) = p_readword(0);
				a_level_curse("load", v_j) = p_readword(0);
			}
			for (v_j = 1; v_j <= 150; v_j += 1) {
				a_groesse("load", v_j) = 0;
			}
			for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
				a_groesse("load", v_j) = p_readword(0);
			}
			for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
				a_inhalt("load", v_j) = p_readword(0);
			}
			for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
				a_mit_was("load", v_j) = p_readword(0);
			}
			for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
				a_visionen("load", v_j) = p_readword(0);
			}
			for (v_j = 1; v_j <= 150; v_j += 1) {
				a_fluss("load", v_j) = p_readword(0);
			}
			for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
				a_spinnenkoenigin("load", v_j) = p_readword(0);
			}
			for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
				a_goblinkoenig("load", v_j) = p_readword(0);
			}
			for (v_j = 1; v_j <= g_anz_levels; v_j += 1) {
				a_untotenherr("load", v_j) = p_readword(0);
			}
			for (v_y = 1; v_y <= g_anz_levels; v_y += 1) {
				for (v_j = 0; v_j <= 200; v_j += 1) {
					for (v_k = 0; v_k <= 200; v_k += 1) {
						a_labyrinth("load", v_y, v_j, v_k).f_feld = a_mit_was("load", v_y);
					}
				}
				for (v_j = 1; v_j <= a_groesse("load", v_y); v_j += 1) {
					for (v_k = 1; v_k <= a_groesse("load", v_y); v_k += 1) {
						a_labyrinth("load", v_y, v_j, v_k).f_feld = p_readword(0);
						a_labyrinth("load", v_y, v_j, v_k).f_stat1 = p_readword(0);
						a_labyrinth("load", v_y, v_j, v_k).f_stat2 = p_readword(0);
						a_automap("load", v_j, v_k).f_feld[v_y] = p_readword(0);
						a_laby_item("load", v_j, v_k).f_name[v_y] = p_readword(0);
						a_laby_item("load", v_j, v_k).f_anzahl[v_y] = p_readword(0);
						a_laby_item("load", v_j, v_k).f_status[v_y] = p_readword(0);
					}
				}
			}
			p_clearlist(ll_monster_list);
			p_addelement(ll_monster_list);
			LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z = -1;
			p_addelement(ll_monster_list);
			LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z = 9999;
			for (v_j = 1; v_j <= 150; v_j += 1) {
				a_first_monster("load", v_j).f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
			}
			p_selectelement(ll_monster_list, 0);
			v_monster_count = p_readlong(0);
			v_act_level = -1;
			while (v_monster_count > 0) {
				p_addelement(ll_monster_list);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number = p_readword(0);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = p_readword(0);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = p_readword(0);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration = p_readword(0);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x = p_readword(0);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y = p_readword(0);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z = p_readword(0);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_container = p_readword(0);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_item = p_readword(0);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_skilldrop = p_readword(0);
				if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z != v_act_level) {
					if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z <= 150) {
						v_act_level = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z;
						a_first_monster("load", v_act_level).f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
					}
				}
				v_monster_count -= 1;
			}
			p_clearlist(ll_merchants);
			v_merch_count = p_readword(0);
			while (v_merch_count > 0) {
				p_addelement(ll_merchants);
				LIST_CURRENT(ll_merchants,struct st_merch_items).f_face = p_readword(0);
				for (v_i = 0; v_i <= 55; v_i += 1) {
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = p_readword(0);
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_spell = p_readword(0);
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_power = p_readword(0);
				}
				v_merch_count -= 1;
			}
			for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
				a_spieler("load", v_i).f_status = p_readword(0);
				a_spieler("load", v_i).f_verifikation = p_readstring(0);
				a_spieler("load", v_i).f_name = p_readstring(0);
				a_spieler("load", v_i).f_skill_points = p_readword(0);
				a_spieler("load", v_i).f_level = p_readword(0);
				a_spieler("load", v_i).f_maxlevel = p_readword(0);
				a_spieler("load", v_i).f_maennchen = p_readword(0);
				a_spieler("load", v_i).f_mousepointer = p_readword(0);
				a_spieler("load", v_i).f_lifepoints = p_readword(0);
				a_spieler("load", v_i).f_maxlifepoints = p_readword(0);
				a_spieler("load", v_i).f_lifegain = p_readword(0);
				a_spieler("load", v_i).f_mana = p_readword(0);
				a_spieler("load", v_i).f_maxmana = p_readword(0);
				a_spieler("load", v_i).f_managain = p_readword(0);
				a_spieler("load", v_i).f_attack = p_readword(0);
				a_spieler("load", v_i).f_dexterity = p_readword(0);
				a_spieler("load", v_i).f_strength = p_readword(0);
				a_spieler("load", v_i).f_maxspeed = p_readword(0);
				a_spieler("load", v_i).f_speed = p_readword(0);
				a_spieler("load", v_i).f_perception = p_readword(0);
				a_spieler("load", v_i).f_luck_score = p_readword(0);
				a_spieler("load", v_i).f_power_score = p_readword(0);
				a_spieler("load", v_i).f_circle = p_readword(0);
				a_spieler("load", v_i).f_gold = p_readlong(0);
				a_spieler("load", v_i).f_magieresistenz = p_readword(0);
				a_spieler("load", v_i).f_spellweaving = p_readword(0);
				a_spieler("load", v_i).f_style = p_readword(0);
				a_spieler("load", v_i).f_light = p_readword(0);
				a_spieler("load", v_i).f_hunger = p_readword(0);
				a_spieler("load", v_i).f_durst = p_readword(0);
				a_spieler("load", v_i).f_betrunken = p_readword(0);
				a_spieler("load", v_i).f_weisheit = p_readword(0);
				a_spieler("load", v_i).f_schleichen = p_readword(0);
				a_spieler("load", v_i).f_mks = p_readlong(0);
				a_spieler("load", v_i).f_fluch = p_readword(0);
				a_spieler("load", v_i).f_fluchdauer = p_readword(0);
				a_spieler("load", v_i).f_krankheit = p_readword(0);
				a_spieler("load", v_i).f_krankheitdauer = p_readword(0);
				a_spieler("load", v_i).f_poison = p_readword(0);
				a_spieler("load", v_i).f_verhungern = p_readword(0);
				a_spieler("load", v_i).f_verdursten = p_readword(0);
				a_spieler("load", v_i).f_lifepointgegenstand = p_readword(0);
				a_spieler("load", v_i).f_managegenstand = p_readword(0);
				a_spieler("load", v_i).f_staerkegegenstand = p_readword(0);
				a_spieler("load", v_i).f_zugweitegegenstand = p_readword(0);
				a_spieler("load", v_i).f_dexteritygegenstand = p_readword(0);
				a_spieler("load", v_i).f_gluecksgegenstand = p_readword(0);
				a_spieler("load", v_i).f_bogentreffergegenstand = p_readword(0);
				a_spieler("load", v_i).f_bogenschadengegenstand = p_readword(0);
				a_spieler("load", v_i).f_powergegenstand = p_readword(0);
				a_spieler("load", v_i).f_perceptiongegenstand = p_readword(0);
				a_spieler("load", v_i).f_attackgegenstand = p_readword(0);
				a_spieler("load", v_i).f_stealthgegenstand = p_readword(0);
				a_spieler("load", v_i).f_damagegegenstand = p_readword(0);
				a_spieler("load", v_i).f_lichtgegenstand = p_readword(0);
				a_spieler("load", v_i).f_diebstahlgegenstand = p_readword(0);
				a_spieler("load", v_i).f_goblinlehre = p_readword(0);
				a_spieler("load", v_i).f_spinnenlehre = p_readword(0);
				a_spieler("load", v_i).f_untotenlehre = p_readword(0);
				a_spieler("load", v_i).f_pflanzenlehre = p_readword(0);
				a_spieler("load", v_i).f_tierkunde = p_readword(0);
				a_spieler("load", v_i).f_fallenlehre = p_readword(0);
				a_spieler("load", v_i).f_giftlehre = p_readword(0);
				a_spieler("load", v_i).f_pos_zaubermenue = p_readword(0);
				a_spieler("load", v_i).f_dumm = p_readword(0);
				a_spieler("load", v_i).f_face = p_readword(0);
				a_spieler("load", v_i).f_hinterhalt = p_readword(0);
				a_spieler("load", v_i).f_portal = p_readword(0);
				a_spieler("load", v_i).f_teleport = p_readword(0);
				a_spieler("load", v_i).f_nexus = p_readword(0);
				a_spieler("load", v_i).f_stehlen = p_readword(0);
				a_spieler("load", v_i).f_schriftrolle = p_readword(0);
				a_spieler("load", v_i).f_zauberbuch = p_readword(0);
				a_spieler("load", v_i).f_kessel = p_readword(0);
				a_spieler("load", v_i).f_armageddon = p_readword(0);
				a_spieler("load", v_i).f_pestilence = p_readword(0);
				a_spieler("load", v_i).f_drachenform = p_readword(0);
				a_spieler("load", v_i).f_macht = p_readword(0);
				a_spieler("load", v_i).f_magic_apple = p_readword(0);
				a_spieler("load", v_i).f_heal = p_readword(0);
				a_spieler("load", v_i).f_ease_pain = p_readword(0);
				a_spieler("load", v_i).f_heal_others = p_readword(0);
				a_spieler("load", v_i).f_full_healing = p_readword(0);
				a_spieler("load", v_i).f_udjat_ben = p_readword(0);
				a_spieler("load", v_i).f_akt_zauber = p_readword(0);
				a_spieler("load", v_i).f_schule = p_readword(0);
				a_spieler("load", v_i).f_moves = p_readword(0);
				a_spieler("load", v_i).f_anker_x = p_readword(0);
				a_spieler("load", v_i).f_anker_y = p_readword(0);
				a_spieler("load", v_i).f_anker_level = p_readword(0);
				a_spieler("load", v_i).f_old_pos_x = p_readword(0);
				a_spieler("load", v_i).f_old_pos_y = p_readword(0);
				a_spieler("load", v_i).f_old_lp = p_readword(0);
				a_spieler("load", v_i).f_old_max_lp = p_readword(0);
				a_spieler("load", v_i).f_old_mp = p_readword(0);
				a_spieler("load", v_i).f_old_max_mp = p_readword(0);
				a_spieler("load", v_i).f_cause_of_death = p_readword(0);
				a_spieler("load", v_i).f_cause_of_death_monster = p_readword(0);
				a_spieler("load", v_i).f_character_x = p_readword(0);
				a_spieler("load", v_i).f_character_y = p_readword(0);
				for (v_act_piece = 1; v_act_piece <= 9; v_act_piece += 1) {
					a_spieler("load", v_i).f_staff_pieces[v_act_piece] = p_readword(0);
				}
				a_spieler("load", v_i).f_creature_typ = p_readword(0);
				a_spieler("load", v_i).f_creature_lifepoints = p_readword(0);
				a_spieler("load", v_i).f_creature_maxlifepoints = p_readword(0);
				a_spieler("load", v_i).f_creature_attack = p_readword(0);
				a_spieler("load", v_i).f_creature_schaden_min = p_readword(0);
				a_spieler("load", v_i).f_creature_schaden_max = p_readword(0);
				a_spieler("load", v_i).f_creature_speed = p_readword(0);
				a_spieler("load", v_i).f_creature_maxspeed = p_readword(0);
				a_spieler("load", v_i).f_creature_x = p_readword(0);
				a_spieler("load", v_i).f_creature_y = p_readword(0);
				a_spieler("load", v_i).f_creature_heading = p_readword(0);
				a_spieler("load", v_i).f_creature_poison = p_readword(0);
				a_spieler("load", v_i).f_in_water = p_readword(0);
				for (v_j = 1; v_j <= 30; v_j += 1) {
					a_aktive("load", v_j, v_i).f_nr = p_readword(0);
					a_aktive("load", v_j, v_i).f_staerke = p_readword(0);
					a_aktive("load", v_j, v_i).f_dauer = p_readword(0);
					a_aktive("load", v_j, v_i).f_source = p_readword(0);
				}
				for (v_j = 1; v_j <= 144; v_j += 1) {
					for (v_k = 1; v_k <= 3; v_k += 1) {
						a_skills("load", v_j, v_i).f_name[v_k] = p_readstring(0);
					}
					a_skills("load", v_j, v_i).f_nummer = p_readword(0);
					a_skills("load", v_j, v_i).f_kosten = p_readword(0);
					a_skills("load", v_j, v_i).f_gruppe = p_readword(0);
					for (v_k = 1; v_k <= 3; v_k += 1) {
						a_skills("load", v_j, v_i).f_beschreibung_1[v_k] = p_readstring(0);
						a_skills("load", v_j, v_i).f_beschreibung_2[v_k] = p_readstring(0);
					}
					a_skills("load", v_j, v_i).f_gewaehlt = p_readword(0);
					a_skills("load", v_j, v_i).f_gelocked = p_readword(0);
				}
				for (v_j = 1; v_j <= 50; v_j += 1) {
					a_inventory("load", v_j, v_i).f_name = p_readword(0);
					a_inventory("load", v_j, v_i).f_benutzt = p_readword(0);
					a_inventory("load", v_j, v_i).f_anzahl = p_readword(0);
					a_inventory("load", v_j, v_i).f_status = p_readword(0);
					a_inventory("load", v_j, v_i).f_attri5 = p_readword(0);
				}
				for (v_j = 1; v_j <= 184; v_j += 1) {
					a_learned("load", v_i, v_j) = p_readword(0);
				}
				for (v_j = 1; v_j <= 10; v_j += 1) {
					a_quickspells("load", v_j, v_i) = p_readword(0);
				}
				for (v_j = 1; v_j <= 8; v_j += 1) {
					a_quickspells2("load", v_j, v_i) = p_readword(0);
				}
			}
			p_message(299, 1);
			p_closefile(0);
			if (g_test == 3) {
				for (v_i = 1; v_i <= 38; v_i += 1) {
					if (a_mischen("load", (v_i - 1)).f_result == -1) {
						v_result = "!KABOOM!";
					} else {
						v_result = a_item("load", a_mischen("load", (v_i - 1)).f_result).f_name[1];
					}
					if (v_i < 21) {
						v_result = v_result + " <b>" + a_item("load", a_alch_buff("load", v_i)).f_name[1];
					}
					p_print(a_item("load", ((75 + v_i) - 1)).f_name[1] + " -> " + v_result);
				}
			}
			if (!g_silent) {
				p_stopmodule(-1);
			}
			throw Lv_geladen;
		}
	} else {
		p_message(406, 3);
	}
}

static intptr_t p_load_templates() {
	int16_t v_file_version = 0;
	int16_t v_header = 0;
	int16_t v_i = 0;
	int16_t v_j = 0;
	int16_t v_sav_act_player = 0;
	int16_t v_tpl_count = 0;
	v_sav_act_player = g_akt_spieler;
	v_tpl_count = -1;
	p_lastelement(ll_template_list);
	if (p_readfile(2, g_environment + "/templates.dat")) {
		if (!p_eof(2)) {
			v_header = p_readword(2);
			v_file_version = p_readword(2);
			if (v_header == -1 && v_file_version == 2) {
				v_tpl_count = p_readword(2);
				for (v_j = 1; v_j <= v_tpl_count; v_j += 1) {
					p_addelement(ll_template_list);
					for (v_i = 144; v_i >= 1; v_i -= 1) {
						LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[v_i] = p_readword(2);
					}
					LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name = p_readstring(2);
				}
			}
		}
		p_closefile(2);
	}
	if (v_tpl_count == -1) {
		g_akt_spieler = 0;
		p_reset_skills();
		for (v_i = 1; v_i <= 4; v_i += 1) {
			p_addelement(ll_template_list);
			p_player_to_template();
			LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name = a_message_text("load_templates", 113, (1 + g_language)) + " " + p_str(v_i) + "*";
		}
	}
	g_akt_spieler = v_sav_act_player;
}

static intptr_t p_loading_screen() {
	std::string v_akt_datum;
	intptr_t v_i = 0;
	int16_t v_load = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	int16_t v_raus = 0;
	intptr_t v_result = 0;
	intptr_t v_sel = 0;
	intptr_t v_willi = 0;
	intptr_t v_wohin = 0;
	intptr_t v_yy = 0;
	v_raus = 0;
	v_load = 0;
	if (p_readfile(0, g_environment + "/savenames.sav")) {
		v_load = 1;
	} else {
		if (p_readfile(0, "./savenames.sav")) {
			v_load = 1;
		}
	}
	if (v_load == 1) {
		for (v_i = 1; v_i <= 10; v_i += 1) {
			a_savenames("loading_screen", v_i) = p_readstring(0);
			a_savedatum("loading_screen", v_i) = p_readstring(0);
		}
		p_closefile(0);
	}
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(-1);
		v_yy = 65;
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(190, v_yy, a_message_text("loading_screen", 570, (1 + g_language)), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(190, v_yy, a_message_text("loading_screen", 569, (1 + g_language)), -1, 0);
		p_read_joystick();
		p_examinekeyboard();
		if (p_keyboardpushed(273) || g_jay == -1) {
			v_sel = (v_sel - 1);
			if (v_sel < 1) {
				v_sel = 1;
			}
		}
		if (p_keyboardpushed(274) || g_jay == 1) {
			v_sel = (v_sel + 1);
			if (v_sel > 10) {
				v_sel = 10;
			}
		}
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
		}
		for (v_willi = 1; v_willi <= 10; v_willi += 1) {
			if (v_mmouse_x > 40 && v_mmouse_x < 600 && v_mmouse_y > (100 + (v_willi * 20)) && v_mmouse_y < (120 + (v_willi * 20))) {
				p_frontcolor(p_rgb(150, 150, 150));
				p_box(40, (100 + (v_willi * 20)), 400, 20, -1);
				if (v_sel == 1) {
					p_frontcolor(p_rgb(1, 1, 255));
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(40, (100 + (v_willi * 20)), p_str(v_willi), -1, 0);
				if (v_mmouse_links == 1) {
					v_raus = 1;
					v_load = v_willi;
				}
			} else {
				if (v_sel == v_willi) {
					p_frontcolor(p_rgb(1, 1, 255));
					if (p_keyboardpushed(13) || a_jb("loading_screen", 1)) {
						v_raus = 1;
						v_load = v_willi;
					}
				} else {
					p_frontcolor(p_rgb(255, 255, 255));
				}
				p_drawtext(40, (100 + (v_willi * 20)), p_str(v_willi), -1, 0);
			}
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(150, (100 + (v_willi * 20)), a_savenames("loading_screen", v_willi), -1, 0);
			if (a_savedatum("loading_screen", v_willi) != "") {
				v_akt_datum = p_formatdate("%dd.%mm.%yyyy %hh:%ii", p_parsedate("%yyyy%mm%dd%hh%ii%ss", a_savedatum("loading_screen", v_willi)));
				p_drawtext(450, (100 + (v_willi * 20)), v_akt_datum, -1, 0);
			}
		}
		p_stopdrawing();
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		p_delay(50);
	} while (!(v_mmouse_rechts == 1 || v_raus == 1 || p_keyboardpushed(27)));
	if (v_load > 0 && !p_keyboardpushed(27)) {
		p_load("laby" + p_str(v_load) + ".sav");
	}
}

static intptr_t p_menupoint_clicked() {
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 960, (g_language + 1))) {
		throw Lv_again;
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 961, (g_language + 1))) {
		p_closescreen();
		p_runprogram("http://www.lostlabyrinth.com");
		exit(0);
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 962, (g_language + 1))) {
		p_delay(g_mydelay);
		p_gamespeed();
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 963, (g_language + 1))) {
		if (p_save_settings()) {
			p_message(486, 1);
		} else {
			p_message(487, 3);
		}
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 964, (g_language + 1))) {
		p_fullscreen();
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 965, (g_language + 1))) {
		g_no_mouse = 0;
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 966, (g_language + 1)) + ": " + g_no_mouse_text) {
		if (g_no_mouse == 1) {
			g_no_mouse = 0;
		} else {
			g_no_mouse = 1;
		}
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 967, (g_language + 1)) + ": " + g_autopickup_text) {
		if (g_autopickup == 1) {
			g_autopickup = 0;
		} else {
			g_autopickup = 1;
		}
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 968, (g_language + 1)) + ": " + g_sound_text) {
		if (!g_sound) {
			g_sound = 1;
		} else {
			g_sound = 0;
		}
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 969, (g_language + 1)) + ": " + g_music_text) {
		if (g_music == 1) {
			g_music = 0;
			p_stopmodule(-1);
		} else {
			g_music = 1;
			p_playmodule(1);
		}
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 970, (g_language + 1)) + ": " + g_klicking_text) {
		if (g_klicking == 1) {
			g_klicking = 0;
		} else {
			g_klicking = 1;
		}
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 405, (g_language + 1))) {
		p_loading_screen();
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 974, (g_language + 1))) {
		p_saving_screen();
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 971, (g_language + 1)) + ": " + g_knopf5_text) {
		if (g_knopf5 == 1) {
			g_knopf5 = 0;
		} else {
			g_knopf5 = 1;
		}
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 972, (g_language + 1)) + ": " + g_flaschen_text) {
		if (!g_flaschen) {
			g_flaschen = 1;
		} else {
			g_flaschen = 0;
		}
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 975, (g_language + 1)) + ": " + p_str(a_spieler("menupoint_clicked", g_akt_spieler).f_mousepointer)) {
		a_spieler("menupoint_clicked", g_akt_spieler).f_mousepointer += 1;
		if (a_spieler("menupoint_clicked", g_akt_spieler).f_mousepointer > 12) {
			a_spieler("menupoint_clicked", g_akt_spieler).f_mousepointer = 1;
		}
	}
	if (a_optionenliste("menupoint_clicked", ((((g_akt_option + g_akt_zauber_offset2) + 1) + g_mauszauber) - 14)) == a_message_text("menupoint_clicked", 650, (g_language + 1))) {
		g_raushier = 1;
	}
}

static intptr_t p_menupoint_selected() {
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 960, (g_language + 1))) {
		throw Lv_again;
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 961, (g_language + 1))) {
		p_closescreen();
		p_runprogram("http://www.lostlabyrinth.com");
		exit(0);
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 962, (g_language + 1))) {
		p_delay(g_mydelay);
		p_gamespeed();
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 963, (g_language + 1))) {
		if (p_save_settings()) {
			p_message(486, 1);
		} else {
			p_message(487, 3);
		}
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 964, (g_language + 1))) {
		p_fullscreen();
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 965, (g_language + 1))) {
		g_joystick_used = 1;
		if (!p_initjoystick()) {
		}
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 966, (g_language + 1)) + ": " + g_no_mouse_text) {
		if (g_no_mouse == 1) {
			g_no_mouse = 0;
		} else {
			g_no_mouse = 1;
		}
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 967, (g_language + 1)) + ": " + g_autopickup_text) {
		if (g_autopickup == 1) {
			g_autopickup = 0;
		} else {
			g_autopickup = 1;
		}
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 968, (g_language + 1)) + ": " + g_sound_text) {
		if (!g_sound) {
			g_sound = 1;
		} else {
			g_sound = 0;
		}
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 969, (g_language + 1)) + ": " + g_music_text) {
		if (g_music == 1) {
			g_music = 0;
			p_stopmodule(-1);
		} else {
			g_music = 1;
			p_playmodule(1);
		}
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 970, (g_language + 1)) + ": " + g_klicking_text) {
		if (g_klicking == 1) {
			g_klicking = 0;
		} else {
			g_klicking = 1;
		}
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 405, (g_language + 1))) {
		p_loading_screen();
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 974, (g_language + 1))) {
		p_saving_screen();
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 971, (g_language + 1)) + ": " + g_knopf5_text) {
		if (g_knopf5 == 1) {
			g_knopf5 = 0;
		} else {
			g_knopf5 = 1;
		}
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 972, (g_language + 1)) + ": " + g_flaschen_text) {
		if (!g_flaschen) {
			g_flaschen = 1;
		} else {
			g_flaschen = 0;
		}
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 975, (g_language + 1)) + ": " + p_str(a_spieler("menupoint_selected", g_akt_spieler).f_mousepointer)) {
		a_spieler("menupoint_selected", g_akt_spieler).f_mousepointer += 1;
		if (a_spieler("menupoint_selected", g_akt_spieler).f_mousepointer > 12) {
			a_spieler("menupoint_selected", g_akt_spieler).f_mousepointer = 1;
		}
	}
	if (a_optionenliste("menupoint_selected", ((g_akt_option + g_akt_zauber_offset2) + 1)) == a_message_text("menupoint_selected", 650, (g_language + 1))) {
		g_raushier = 1;
	}
}

static intptr_t p_monster_setzen(intptr_t v_level, intptr_t v_welches) {
	intptr_t v_hugo = 0;
	int16_t v_monstat = 0;
	int16_t v_x = 0;
	int16_t v_y = 0;
	int16_t v_zaehler = 0;
	v_x = 0;
	v_y = 0;
	v_zaehler = 1;
	do {
		v_x = (p_random((a_groesse("monster_setzen", v_level) - 3)) + 2);
		v_y = (p_random((a_groesse("monster_setzen", v_level) - 3)) + 2);
		v_zaehler = (v_zaehler + 1);
	} while (!((!p_blockiert2(v_x, v_y, v_level) && !p_getmonster(v_x, v_y, v_level)) || v_zaehler > 500));
	if (v_zaehler <= 500) {
		v_monstat = 0;
		if (p_random(100) > 90 || a_levelmod("monster_setzen", v_level) == 11) {
			if (p_random(100) > 50 && a_levelmod("monster_setzen", v_level) != 11) {
				if (p_has_trait2(v_hugo, 29) == 1) {
					v_monstat = 2;
				} else {
					v_monstat = 1;
				}
			} else {
				v_monstat = 1;
			}
		}
		p_setmonster(v_x, v_y, v_level, v_welches, a_monster("monster_setzen", v_welches).f_nr, a_monster("monster_setzen", v_welches).f_lebenspunkte, v_monstat, 0, 0);
	}
}

static intptr_t p_myrand(int16_t v_range) {
	int32_t v_result = 0;
	if (!v_range) {
		return 0;
	}
	v_result = p_get_chance(1001);
	v_result = (v_result / (25200 / (v_range + 1)));
	return v_result;
}

static intptr_t p_myrand2(int16_t v_range) {
	int32_t v_result = 0;
	if (!v_range) {
		return 0;
	}
	v_result = p_get_chance(1002);
	v_result = (v_result / (25200 / (v_range + 1)));
	return v_result;
}

static intptr_t p_namenlos() {
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_result = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_xx = 0;
	intptr_t v_y = 0;
	intptr_t v_yy = 0;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_laby_rahmen(0);
		p_show_logo();
		p_show_varys(0);
		p_show_buttons();
		p_clipsprite(14, 1, 1, 335, 335);
		p_displaytransparentsprite(14, 16, 16);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(16, 16, 335, 335, -1);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_frontcolor(p_rgb(255, 0, 0));
		v_x = 110;
		v_y = 130;
		p_drawtext(v_xx, v_yy, p_nachricht4(122), -1, 0);
		v_y = (v_y + 20);
		p_drawtext(v_xx, v_yy, p_nachricht4(123), -1, 0);
		v_y = (v_y + 20);
		p_drawtext(v_xx, v_yy, p_nachricht4(124), -1, 0);
		p_stopdrawing();
		p_read_joystick();
		p_examinekeyboard();
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mmouse_links = p_mousebutton(1);
		v_mmouse_rechts = p_mousebutton(2);
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
	} while (!(p_keyboardpushed(13) || v_mmouse_rechts == 1 || v_mmouse_links == 1 || a_jb("namenlos", 1)));
}

static intptr_t p_okaybox(intptr_t v_feld) {
	int16_t v_back_button = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_raus = 0;
	intptr_t v_result = 0;
	std::string v_was;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	int16_t v_xx = 0;
	int16_t v_xxx = 0;
	intptr_t v_y = 0;
	int16_t v_yy = 0;
	int16_t v_yyy = 0;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_laby_rahmen(0);
		p_show_logo();
		p_show_varys(1);
		p_show_buttons();
		p_clipsprite(14, 1, 1, 335, 335);
		p_displaytransparentsprite(14, 16, 16);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(60, 300, a_message_text("okaybox", 740, (1 + g_language)), -1, 0);
		p_drawtext(60, 315, a_message_text("okaybox", 741, (1 + g_language)), -1, 0);
		v_x = 90;
		v_y = 170;
		p_drawtext(v_x, v_y, a_message_text("okaybox", 705, (1 + g_language)), -1, 0);
		v_y = (v_y + 15);
		v_was = a_item("okaybox", a_inventory("okaybox", v_feld, g_akt_spieler).f_name).f_name[(g_language + 1)];
		if (a_inventory("okaybox", v_feld, g_akt_spieler).f_name == 38 && !a_skills("okaybox", 47, g_akt_spieler).f_gewaehlt && !a_inventory("okaybox", v_feld, g_akt_spieler).f_status) {
			v_was = a_message_text("okaybox", 658, (1 + g_language));
		}
		if (a_inventory("okaybox", v_feld, g_akt_spieler).f_name >= 75 && a_inventory("okaybox", v_feld, g_akt_spieler).f_name <= 112 && !(a_mischen("okaybox", (a_inventory("okaybox", v_feld, g_akt_spieler).f_name - 75)).f_learned & p_pm(0)) && !a_inventory("okaybox", v_feld, g_akt_spieler).f_status) {
			v_was = a_message_text("okaybox", 734, (1 + g_language));
		}
		if (a_inventory("okaybox", v_feld, g_akt_spieler).f_name >= 65 && a_inventory("okaybox", v_feld, g_akt_spieler).f_name <= 74 && !(a_mush_known("okaybox", (a_inventory("okaybox", v_feld, g_akt_spieler).f_name - 65)) & p_pm(0)) && !a_inventory("okaybox", v_feld, g_akt_spieler).f_status) {
			v_was = a_message_text("okaybox", 585, (1 + g_language));
		}
		p_drawtext(v_x, v_y, a_message_text("okaybox", 704, (1 + g_language)) + " (" + v_was + ")", -1, 0);
		p_stopdrawing();
		p_read_joystick();
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
		}
		p_examinekeyboard();
		v_xx = 90;
		v_yy = 250;
		v_xxx = 190;
		v_yyy = 250;
		if (p_keyboardpushed(121) || p_keyboardpushed(122) || a_jb("okaybox", 1) == 1) {
			v_raus = 1;
		}
		if (v_mmouse_x > v_xx && v_mmouse_x < (v_xx + 90) && v_mmouse_y > v_yy && v_mmouse_y < (v_yy + 28)) {
			p_clipsprite(3, 0, 0, 87, 32);
			if (v_mmouse_links == 1) {
				v_raus = 1;
			}
		} else {
			p_clipsprite(3, 0, 31, 87, 32);
		}
		p_displaytransparentsprite(3, v_xx, v_yy);
		if (p_keyboardpushed(110) || a_jb("okaybox", 2) == 1) {
			v_raus = 2;
		}
		v_back_button = 0;
		if (v_mmouse_x > v_xxx && v_mmouse_x < (v_xxx + 90) && v_mmouse_y > v_yyy && v_mmouse_y < (v_yyy + 28)) {
			p_clipsprite(4, 0, 0, 87, 32);
			if (v_mmouse_links == 1) {
				v_raus = 2;
			}
		} else {
			p_clipsprite(4, 0, 31, 87, 32);
		}
		p_displaytransparentsprite(4, v_xxx, v_yyy);
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
	} while (!(v_raus > 0));
	if (v_raus == 1) {
		return 1;
	} else {
		return 0;
	}
}

static intptr_t p_opfern() {
	int16_t v_okay = 0;
	int16_t v_opfern = 0;
	v_okay = 0;
	v_opfern = p_select_inventory(595);
	if (a_item("opfern", a_inventory("opfern", v_opfern, g_akt_spieler).f_name).f_einkauf > 40 && a_inventory("opfern", v_opfern, g_akt_spieler).f_name != 156) {
		v_okay = v_opfern;
	} else {
		p_message(596, 5);
	}
	return v_okay;
}

static intptr_t p_opfern2() {
	int16_t v_okay = 0;
	int16_t v_opfern = 0;
	v_okay = 0;
	v_opfern = p_select_inventory(604);
	if (a_item("opfern2", a_inventory("opfern2", v_opfern, g_akt_spieler).f_name).f_type == 16) {
		v_okay = v_opfern;
	} else {
		p_message(605, 5);
	}
	return v_okay;
}

static intptr_t p_opfern3() {
	int16_t v_okay = 0;
	int16_t v_opfern = 0;
	v_okay = 0;
	v_opfern = p_select_inventory(637);
	if (a_item("opfern3", a_inventory("opfern3", v_opfern, g_akt_spieler).f_name).f_name[2] == "Edelstein Schwarz") {
		v_okay = v_opfern;
	} else {
		p_message(638, 5);
	}
	return v_okay;
}

static intptr_t p_opfern4() {
	int16_t v_okay = 0;
	int16_t v_opfern = 0;
	v_okay = 0;
	v_opfern = p_select_inventory(954);
	if (a_item("opfern4", a_inventory("opfern4", v_opfern, g_akt_spieler).f_name).f_type == 1) {
		v_okay = v_opfern;
	} else {
		p_message(955, 5);
	}
	return v_okay;
}

static intptr_t p_restaurieren() {
	p_show_sight();
	if (a_skills("restaurieren", 80, g_akt_spieler).f_gewaehlt == 1) {
		p_draw_screen3(0, 0);
	}
	if (a_skills("restaurieren", 79, g_akt_spieler).f_gewaehlt == 1) {
		p_draw_screen4(0, 0);
		if (!a_skills("restaurieren", 81, g_akt_spieler).f_gewaehlt) {
			p_draw_screen9(0, 0);
		}
	}
	if (a_skills("restaurieren", 81, g_akt_spieler).f_gewaehlt == 1) {
		p_draw_screen7(0, 0);
	}
	p_laby_rahmen(0);
	p_show_logo();
	p_show_varys(0);
	p_show_buttons();
}

static intptr_t p_schleichen() {
	intptr_t v_akt_schleichen = 0;
	int16_t v_mon_no = 0;
	intptr_t v_okay = 0;
	if (a_skills("schleichen", 73, g_akt_spieler).f_gewaehlt == 1) {
		v_akt_schleichen = ((((p_luck() * 5) + (a_spieler("schleichen", g_akt_spieler).f_dexterity * 10)) + a_spieler("schleichen", g_akt_spieler).f_stealthgegenstand) + 25);
	} else {
		v_akt_schleichen = (((p_luck() * 5) + (a_spieler("schleichen", g_akt_spieler).f_dexterity * 5)) + a_spieler("schleichen", g_akt_spieler).f_stealthgegenstand);
	}
	v_okay = 0;
	if (a_spieler("schleichen", g_akt_spieler).f_fluch == 23) {
		v_akt_schleichen = 0;
		v_okay = 1;
	}
	if (p_habich(86) > 0 && !v_okay) {
		v_akt_schleichen = 70;
		v_okay = 1;
	}
	if (p_habich(88) > 0 && !v_okay) {
		v_akt_schleichen = 70;
		v_okay = 1;
	}
	if (p_habich(89) > 0 && !v_okay) {
		v_akt_schleichen = 70;
		v_okay = 1;
	}
	if (p_habich(90) > 0 && !v_okay) {
		v_akt_schleichen = 0;
	}
	if (p_habich(110) > 0) {
		v_akt_schleichen = (v_akt_schleichen + 40);
	}
	p_schutz();
	v_akt_schleichen = (v_akt_schleichen - (g_behinderung * 10));
	v_mon_no = p_getmonster((a_spieler("schleichen", g_akt_spieler).f_character_x + g_xmod), (a_spieler("schleichen", g_akt_spieler).f_character_y + g_ymod), -1);
	v_akt_schleichen = (v_akt_schleichen - (a_monster("schleichen", v_mon_no).f_minlevel * 2));
	if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 2) {
		v_akt_schleichen = (v_akt_schleichen + 40);
	}
	if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 5) {
		v_akt_schleichen = (v_akt_schleichen + 20);
	}
	if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 1) {
		v_akt_schleichen = 0;
	}
	if (v_akt_schleichen < 1) {
		v_akt_schleichen = 0;
	}
	if (v_akt_schleichen > 80) {
		v_akt_schleichen = 80;
	}
	return v_akt_schleichen;
}

static intptr_t p_setitem(int16_t v_xx, int16_t v_yy, int16_t v_level, int16_t v_name, int16_t v_anzahl, int16_t v_status) {
	a_laby_item("setitem", v_xx, v_yy).f_name[v_level] = v_name;
	if (a_item("setitem", v_name).f_qualitaet == 1 && !v_anzahl) {
		v_anzahl = p_get_chance(3);
	}
	a_laby_item("setitem", v_xx, v_yy).f_anzahl[v_level] = v_anzahl;
	a_laby_item("setitem", v_xx, v_yy).f_status[v_level] = v_status;
}

static intptr_t p_setzen(int16_t v_x_length, int16_t v_y_length, int16_t v_level, int16_t v_type, int16_t v_nr_in_level) {
	intptr_t v_frei = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	int16_t v_x = 0;
	int16_t v_y = 0;
	int16_t v_zaehler = 0;
	v_zaehler = 1;
	do {
		v_frei = 0;
		do {
			v_x = p_random((a_groesse("setzen", v_level) - 9));
		} while (!(v_x > 3));
		do {
			v_y = p_random((a_groesse("setzen", v_level) - 9));
		} while (!(v_y > 3));
		v_x = (v_x / 2);
		v_y = (v_y / 2);
		v_x = (v_x * 2);
		v_y = (v_y * 2);
		for (v_i = 1; v_i <= v_x_length; v_i += 1) {
			for (v_j = 1; v_j <= v_y_length; v_j += 1) {
				if (a_labyrinth("setzen", v_level, (v_i + v_x), (v_j + v_y)).f_feld == 3 || a_labyrinth("setzen", v_level, (v_i + v_x), (v_j + v_y)).f_feld == 2 || a_labyrinth("setzen", v_level, (v_i + v_x), (v_j + v_y)).f_feld == 47) {
					v_frei = 1;
				}
			}
		}
		v_zaehler = (v_zaehler + 1);
	} while (!((v_x > 0 && v_y > 0 && !v_frei) || v_zaehler > 500));
	if (v_zaehler <= 500) {
		LIST_CURRENT(ll_room_list,struct st_room_type).f_x = v_x;
		LIST_CURRENT(ll_room_list,struct st_room_type).f_y = v_y;
		for (v_i = 1; v_i <= v_x_length; v_i += 1) {
			for (v_j = 1; v_j <= v_y_length; v_j += 1) {
				p_setlaby((v_i + v_x), (v_j + v_y), v_level, 47, 0, v_nr_in_level);
				p_setitem((v_i + v_x), (v_j + v_y), v_level, 0, 0, 0);
			}
		}
	}
}

static intptr_t p_show_varys2() {
	float v_faktor = 0.0;
	intptr_t v_in_sight = 0;
	int16_t v_last_msg = 0;
	intptr_t v_matrix_pos_x = 0;
	intptr_t v_matrix_pos_y = 0;
	intptr_t v_okay = 0;
	int16_t v_pos = 0;
	int16_t v_pos2 = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	v_x = 400;
	v_y = 104;
	if (g_flaschen == 1) {
		v_faktor = (p_creature_max_lebenspunkte() / 32.0);
		v_pos = ((p_creature_lebenspunkte() / v_faktor) - 1.0);
		if (p_creature_lebenspunkte() == p_creature_max_lebenspunkte()) {
			v_pos2 = 837;
		} else {
			v_pos2 = ((27 * v_pos) - 27);
		}
		p_clipsprite(67, v_pos2, 0, 27, 49);
		p_displaysprite(67, 375, 105);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(239, 131, 44));
		p_drawtext((v_x + 70), (v_y + 15), a_message_text("show_varys2", 77, (g_language + 1)), -1, 0);
		p_drawtext((v_x + 155), (v_y + 15), p_str(a_spieler("show_varys2", g_akt_spieler).f_creature_speed) + "/" + p_str(p_creature_speed()), -1, 0);
		p_frontcolor(p_rgb(154, 251, 120));
		p_drawtext((v_x + 70), (v_y + 30), a_message_text("show_varys2", 525, (g_language + 1)), -1, 0);
		p_drawtext((v_x + 155), (v_y + 30), p_str(a_spieler("show_varys2", g_akt_spieler).f_level), -1, 0);
		if (g_test == 1) {
			p_drawtext(v_x, (v_y + 45), p_str(v_matrix_pos_x), -1, 0);
			p_drawtext(v_x, (v_y + 55), p_str(v_matrix_pos_y), -1, 0);
			p_drawtext(v_x, (v_y + 65), p_str(v_in_sight), -1, 0);
		}
	} else {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 110, 160, 55, -1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_frontcolor(p_rgb(247, 36, 61));
		p_drawtext(v_x, v_y, a_message_text("show_varys2", 55, (g_language + 1)), -1, 0);
		p_drawtext((v_x + 110), v_y, p_str(p_creature_lebenspunkte()) + "/" + p_str(p_creature_max_lebenspunkte()), -1, 0);
		p_frontcolor(p_rgb(239, 131, 44));
		p_drawtext(v_x, (v_y + 30), a_message_text("show_varys2", 77, (g_language + 1)), -1, 0);
		p_drawtext((v_x + 115), (v_y + 30), p_str(a_spieler("show_varys2", g_akt_spieler).f_creature_speed) + "/" + p_str(p_creature_speed()), -1, 0);
		p_frontcolor(p_rgb(154, 251, 120));
		p_drawtext(v_x, (v_y + 45), a_message_text("show_varys2", 525, (1 + g_language)), -1, 0);
		p_drawtext((v_x + 115), (v_y + 45), p_str(a_spieler("show_varys2", g_akt_spieler).f_level), -1, 0);
	}
	p_stopdrawing();
	v_last_msg = 25;
	while (a_old_messages("show_varys2", v_last_msg, g_akt_spieler).f_nachricht == " " && v_last_msg > 1) {
		v_last_msg -= 1;
	}
	if ((v_last_msg - 1) > 0) {
		p_last_message((v_last_msg - 1), 380);
	}
	p_last_message(v_last_msg, 395);
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 1 && !v_okay) {
		p_clipsprite(34, 128, 256, 32, 32);
		p_displaytransparentsprite(34, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 2 && !v_okay) {
		p_clipsprite(34, 128, 192, 32, 32);
		p_displaytransparentsprite(34, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 3 && !v_okay) {
		p_clipsprite(34, 128, 352, 32, 32);
		p_displaytransparentsprite(34, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 4 && !v_okay) {
		p_clipsprite(34, 128, 384, 32, 32);
		p_displaytransparentsprite(34, 590, 130);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 5 && !v_okay) {
		p_clipsprite(34, 128, 416, 32, 32);
		p_displaytransparentsprite(34, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 6 && !v_okay) {
		p_clipsprite(34, 128, 320, 32, 32);
		p_displaytransparentsprite(34, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 7 && !v_okay) {
		p_clipsprite(34, 128, 224, 32, 32);
		p_displaytransparentsprite(34, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 8 && !v_okay) {
		p_clipsprite(34, 128, 288, 32, 32);
		p_displaytransparentsprite(34, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 9 && !v_okay) {
		p_clipsprite(34, 128, 160, 32, 32);
		p_displaytransparentsprite(34, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 10 && !v_okay) {
		p_clipsprite(0, 128, ((a_spieler("show_varys2", g_akt_spieler).f_maennchen * 32) - 32), 32, 32);
		p_displaytransparentsprite(0, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 11 && !v_okay) {
		p_clipsprite(34, 128, 96, 32, 32);
		p_displaytransparentsprite(34, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 12 && !v_okay) {
		p_clipsprite(34, 128, 480, 32, 32);
		p_displaytransparentsprite(34, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 13 && !v_okay) {
		p_clipsprite(34, 128, 512, 32, 32);
		p_displaytransparentsprite(34, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 14 && !v_okay) {
		p_clipsprite(34, 128, 544, 32, 32);
		p_displaytransparentsprite(34, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 15 && !v_okay) {
		p_clipsprite(34, 128, 576, 32, 32);
		p_displaytransparentsprite(34, 590, 125);
		v_okay = 1;
	}
	if (a_spieler("show_varys2", g_akt_spieler).f_creature_typ == 16 && !v_okay) {
		p_clipsprite(0, 128, 608, 32, 32);
		p_displaytransparentsprite(0, 590, 125);
		v_okay = 1;
	}
}

static intptr_t p_spells_border() {
	intptr_t v_akt_maxspeed = 0;
	intptr_t v_akt_reflexe = 0;
	intptr_t v_akt_schleichen = 0;
	intptr_t v_akt_strength = 0;
	intptr_t v_besch = 0;
	int16_t v_cost = 0;
	int16_t v_duration = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_merker = 0;
	intptr_t v_merker2 = 0;
	int16_t v_mzauber = 0;
	int16_t v_schooln = 0;
	std::string v_schoolname;
	intptr_t v_schutz_max = 0;
	intptr_t v_schutz_min = 0;
	intptr_t v_sicht = 0;
	std::string v_tempstr;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_xadd = 0;
	int16_t v_xx = 0;
	intptr_t v_y = 0;
	int16_t v_yy = 0;
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_frontcolor(p_rgb(0, 0, 0));
	p_box(365, 15, 260, 449, -1);
	p_box(15, 365, 335, 51, -1);
	p_stopdrawing();
	p_clipsprite(54, 0, 0, 640, 17);
	p_displaytransparentsprite(54, 0, 0);
	p_clipsprite(56, 0, 0, 17, 480);
	p_displaytransparentsprite(56, 0, 0);
	p_clipsprite(57, 0, 0, 640, 17);
	p_displaytransparentsprite(57, 0, 464);
	p_clipsprite(59, 0, 0, 17, 480);
	p_displaytransparentsprite(59, 624, 0);
	p_clipsprite(63, 0, 0, 365, 17);
	p_displaysprite(63, 0, 350);
	p_clipsprite(61, 0, 0, 274, 16);
	p_displaysprite(61, 350, 35);
	p_clipsprite(62, 0, 0, 274, 16);
	p_displaysprite(62, 350, 375);
	p_clipsprite(60, 0, 0, 17, 480);
	p_displaysprite(60, 350, 0);
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	p_frontcolor(p_rgb(150, 150, 150));
	p_box(365, (200 + g_yplus2), 260, g_yplus, -1);
	v_x = 400;
	v_y = 52;
	v_besch = 0;
	v_mzauber = -1;
	for (v_i = 1; v_i <= g_anzz; v_i += 1) {
		p_frontcolor(p_rgb(255, 255, 255));
		if (v_i == g_mauszauber) {
			p_frontcolor(p_rgb(1, 1, 255));
			v_mzauber = a_zauberliste("spells_border", (v_i + g_akt_zauber));
		}
		v_merker = 0;
		v_merker2 = 0;
		if (a_zauberliste("spells_border", (v_i + g_akt_zauber)) > 0) {
			for (v_j = 1; v_j <= 10; v_j += 1) {
				if (a_quickspells("spells_border", v_j, g_akt_spieler) == a_zauberliste("spells_border", (v_i + g_akt_zauber))) {
					v_merker = v_j;
				}
			}
			for (v_j = 1; v_j <= 8; v_j += 1) {
				if (a_quickspells2("spells_border", v_j, g_akt_spieler) == a_zauberliste("spells_border", (v_i + g_akt_zauber))) {
					v_merker2 = v_j;
				}
			}
		}
		p_wr_txt((v_i + g_akt_zauber), v_merker, v_merker2, v_x, v_y);
		v_y = (v_y + g_yplus);
	}
	p_frontcolor(p_rgb(255, 255, 255));
	if (!g_mausbesch) {
		v_besch = a_zauberliste("spells_border", (g_akt_zauber + g_akt_zauber_offset));
	} else {
		v_besch = v_mzauber;
	}
	if (v_besch > 0) {
		v_x = 415;
		v_y = 390;
		v_xadd = 150;
		p_drawtext(v_x, v_y, p_nachricht4(61), -1, 0);
		p_drawtext((v_x + v_xadd), v_y, p_str(a_spells("spells_border", v_besch).f_level), -1, 0);
		v_y = (v_y + g_yplus);
		v_cost = p_zauberkosten(v_besch);
		if (a_spieler("spells_border", g_akt_spieler).f_mana < v_cost) {
			p_frontcolor(p_rgb(255, 0, 0));
		}
		p_drawtext(v_x, v_y, p_nachricht4(101), -1, 0);
		p_drawtext((v_x + v_xadd), v_y, p_str(a_spells("spells_border", v_besch).f_cost) + " (" + p_str(v_cost) + ")", -1, 0);
		p_frontcolor(p_rgb(255, 255, 255));
		v_y = (v_y + g_yplus);
		p_drawtext(v_x, v_y, p_nachricht4(91), -1, 0);
		p_drawtext((v_x + v_xadd), v_y, p_str(a_spieler("spells_border", g_akt_spieler).f_power_score) + " (" + p_str(p_power(v_besch)) + ")", -1, 0);
		v_y = (v_y + g_yplus);
		p_drawtext(v_x, v_y, p_nachricht4(102), -1, 0);
		if (a_spells("spells_border", v_besch).f_duration == -2) {
			p_drawtext((v_x + v_xadd), v_y, "1*", -1, 0);
		} else {
			if (a_spells("spells_border", v_besch).f_duration == -1) {
				p_drawtext((v_x + v_xadd), v_y, p_nachricht4(951), -1, 0);
			} else {
				if (!a_spells("spells_border", v_besch).f_duration) {
					p_drawtext((v_x + v_xadd), v_y, "---", -1, 0);
				} else {
					v_duration = ((a_spells("spells_border", v_besch).f_duration * p_power(v_besch)) * p_get_weaving(-1));
					if (p_habich(157) > 0) {
						v_duration = (v_duration * 2);
					}
					if (a_skills("spells_border", 61, g_akt_spieler).f_gewaehlt == 1) {
						v_duration = (v_duration * 2);
					}
					if (a_skills("spells_border", 137, g_akt_spieler).f_gewaehlt == 1) {
						v_duration = (v_duration / 2);
					}
					if (a_spieler("spells_border", g_akt_spieler).f_fluch == 20) {
						v_duration = (v_duration / 2);
					}
					p_drawtext((v_x + v_xadd), v_y, p_str(a_spells("spells_border", v_besch).f_duration) + " (" + p_str(v_duration) + ")", -1, 0);
				}
			}
		}
		v_y = (v_y + g_yplus);
		p_drawtext(v_x, v_y, p_nachricht4(103), -1, 0);
		p_drawtext((v_x + v_xadd), v_y, p_str(p_zauberchance(v_besch)), -1, 0);
		p_drawtext(25, 375, a_spells("spells_border", v_besch).f_info_1[(1 + g_language)], -1, 0);
		p_drawtext(25, 390, a_spells("spells_border", v_besch).f_info_2[(1 + g_language)], -1, 0);
		if (a_spells("spells_border", v_besch).f_summoning > 0) {
			v_xx = 25;
			v_yy = 410;
			p_drawtext(v_xx, v_yy, a_message_text("spells_border", 55, (g_language + 1)) + " " + p_str(a_creature("spells_border", a_spells("spells_border", v_besch).f_summoning).f_creature_lifepoints), -1, 0);
			v_yy += 10;
			p_drawtext(v_xx, v_yy, a_message_text("spells_border", 52, (g_language + 1)) + " " + p_str(a_creature("spells_border", a_spells("spells_border", v_besch).f_summoning).f_creature_attack), -1, 0);
			v_yy += 10;
			p_drawtext(v_xx, v_yy, a_message_text("spells_border", 88, (g_language + 1)) + " " + p_str(a_creature("spells_border", a_spells("spells_border", v_besch).f_summoning).f_creature_schaden_min) + "-" + p_str(a_creature("spells_border", a_spells("spells_border", v_besch).f_summoning).f_creature_schaden_max), -1, 0);
			v_yy += 10;
			p_drawtext(v_xx, v_yy, a_message_text("spells_border", 56, (g_language + 1)) + " " + p_str(a_creature("spells_border", a_spells("spells_border", v_besch).f_summoning).f_creature_maxspeed), -1, 0);
			if (a_spells("spells_border", v_besch).f_summoning == 4) {
				v_yy += 10;
				p_drawtext(v_xx, v_yy, a_message_text("spells_border", 761, (g_language + 1)), -1, 0);
			}
			if (a_spells("spells_border", v_besch).f_summoning == 9) {
				v_yy += 10;
				p_drawtext(v_xx, v_yy, a_message_text("spells_border", 762, (g_language + 1)), -1, 0);
			}
		}
		if (a_spells("spells_border", v_besch).f_shapechanging == 1) {
			switch (v_besch) {
			case 86:
				v_schutz_min = 0;
				v_schutz_max = 4;
				v_akt_reflexe = 6;
				v_akt_maxspeed = 10;
				v_akt_strength = 1;
				v_akt_schleichen = 70;
				v_sicht = 7;
				break;
			case 87:
				v_schutz_min = 1;
				v_schutz_max = 6;
				v_akt_reflexe = 6;
				v_akt_maxspeed = 10;
				v_akt_strength = 5;
				v_sicht = 5;
				break;
			case 88:
				v_schutz_min = 0;
				v_schutz_max = 5;
				v_akt_reflexe = 6;
				v_akt_strength = 1;
				v_akt_schleichen = 70;
				v_sicht = 4;
				break;
			case 89:
				v_schutz_min = 1;
				v_schutz_max = 6;
				v_akt_reflexe = 10;
				v_akt_maxspeed = 10;
				v_akt_strength = 1;
				v_akt_schleichen = 70;
				v_sicht = 6;
				break;
			case 90:
				v_schutz_min = 3;
				v_schutz_max = 12;
				v_akt_reflexe = 1;
				v_akt_maxspeed = 5;
				v_akt_strength = 30;
				v_akt_schleichen = 0;
				v_sicht = 4;
				break;
			}
			v_xx = 25;
			v_yy = 410;
			p_drawtext(v_xx, v_yy, a_message_text("spells_border", 757, (g_language + 1)), -1, 0);
			v_yy += 10;
			p_drawtext(v_xx, v_yy, a_message_text("spells_border", 87, (g_language + 1)) + " " + p_str(v_schutz_min) + "-" + p_str(v_schutz_max), -1, 0);
			v_yy += 10;
			p_drawtext(v_xx, v_yy, a_message_text("spells_border", 53, (g_language + 1)) + " " + p_str(v_akt_reflexe) + " " + a_message_text("spells_border", 54, (g_language + 1)) + " " + p_str(v_akt_strength), -1, 0);
			v_yy += 10;
			p_drawtext(v_xx, v_yy, a_message_text("spells_border", 574, (g_language + 1)) + ": " + p_str(v_akt_schleichen) + " " + a_message_text("spells_border", 760, (g_language + 1)) + p_str(v_sicht), -1, 0);
		}
	}
	p_frontcolor(p_rgb(247, 36, 61));
	p_drawtext(410, 450, a_message_text("spells_border", 878, (g_language + 1)), -1, 0);
	v_tempstr = p_str(a_spieler("spells_border", g_akt_spieler).f_lifepoints) + "/" + p_str(p_maxlife());
	p_drawtext((520 - p_textwidth(v_tempstr)), 450, v_tempstr, -1, 0);
	p_frontcolor(p_rgb(130, 125, 250));
	p_drawtext(530, 450, a_message_text("spells_border", 879, (g_language + 1)), -1, 0);
	v_tempstr = p_str(a_spieler("spells_border", g_akt_spieler).f_mana) + "/" + p_str(p_maxmana());
	p_drawtext((623 - p_textwidth(v_tempstr)), 450, v_tempstr, -1, 0);
	p_stopdrawing();
	v_schooln = p_schulenicons();
	switch (v_schooln) {
	case 0:
		v_schoolname = "";
		break;
	case 1:
		v_schoolname = " (" + p_nachricht4(885) + ")";
		break;
	default:
		v_schoolname = " (" + a_skills("spells_border", v_schooln, g_akt_spieler).f_name[(1 + g_language)] + ")";
		break;
	}
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_frontcolor(p_rgb(255, 255, 255));
	p_drawingmode(1);
	p_drawtext(370, 18, p_nachricht4(100) + v_schoolname, -1, 0);
	p_stopdrawing();
	if (a_skills("spells_border", 66, g_akt_spieler).f_gewaehlt == 1) {
		if (v_besch > 0) {
			p_spellweaving(a_spells("spells_border", v_besch).f_weavable);
		} else {
			p_spellweaving(0);
		}
	}
}

static intptr_t p_template_load() {
	int16_t v_act_slot = 0;
	int16_t v_but_x = 0;
	int16_t v_but_y = 0;
	int16_t v_first_slot = 0;
	int16_t v_firstline = 0;
	int16_t v_i = 0;
	intptr_t v_mmouse_rechts = 0;
	int16_t v_old_slot = 0;
	int16_t v_raus = 0;
	int16_t v_released1 = 0;
	int16_t v_released2 = 0;
	intptr_t v_result = 0;
	int16_t v_sav_act_player = 0;
	int16_t v_slot_count = 0;
	intptr_t v_wait_release2 = 0;
	intptr_t v_wohin = 0;
	int16_t v_x = 0;
	int16_t v_y = 0;
	v_released1 = 0;
	v_released2 = 0;
	v_raus = 0;
	v_act_slot = 0;
	v_old_slot = -1;
	v_first_slot = 0;
	v_firstline = 1;
	p_clearlist(ll_template_list);
	a_spieler("template_load", 0).f_mousepointer = a_spieler("template_load", g_akt_spieler).f_mousepointer;
	v_sav_act_player = g_akt_spieler;
	g_akt_spieler = 0;
	for (v_i = 0; v_i <= 4; v_i += 1) {
		p_reset_skills();
		p_addelement(ll_template_list);
		p_preset_template(v_i);
		p_player_to_template();
		LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name = a_message_text("template_load", (588 + v_i), (1 + g_language));
	}
	p_load_templates();
	v_slot_count = (p_countlist(ll_template_list) - 1);
	do {
		p_fenster(0);
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			g_mmouse_x = p_mousex();
			g_mmouse_y = p_mousey();
			g_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
		}
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(0);
		v_but_x = 593;
		v_but_y = 16;
		if (g_mmouse_x >= v_but_x && g_mmouse_x <= (v_but_x + 32) && g_mmouse_y >= v_but_y && g_mmouse_y <= (v_but_y + 32)) {
			p_clipsprite(6, 96, 32, 31, 31);
			if (g_mmouse_links == 1) {
				v_raus = 1;
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, v_but_x, v_but_y);
		v_but_x = 530;
		v_but_y = 420;
		if (g_mmouse_x >= v_but_x && g_mmouse_x <= (v_but_x + 88) && g_mmouse_y >= v_but_y && g_mmouse_y <= (v_but_y + 33)) {
			p_clipsprite(3, 0, 0, 87, 32);
			if (g_mmouse_links == 1) {
				v_raus = 2;
			}
		} else {
			p_clipsprite(3, 0, 31, 87, 32);
		}
		p_displaytransparentsprite(3, 530, 420);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext((320 - (p_textwidth(a_message_text("template_load", 902, (1 + g_language))) / 2)), 25, a_message_text("template_load", 902, (1 + g_language)), -1, 0);
		if (v_act_slot != v_old_slot) {
			p_selectelement(ll_template_list, v_act_slot);
			p_template_to_player();
			v_old_slot = v_act_slot;
			v_firstline = 1;
		}
		v_firstline = p_draw_skill_list(0, 340, 70, 24, v_firstline);
		v_x = 70;
		v_y = 70;
		p_selectelement(ll_template_list, v_first_slot);
		for (v_i = 0; v_i <= p_min(22, v_slot_count); v_i += 1) {
			if (v_act_slot == (v_first_slot + v_i)) {
				p_frontcolor(p_rgb(100, 100, 100));
				p_box(v_x, v_y, 230, 15, -1);
			}
			if (g_mmouse_x >= v_x && g_mmouse_x <= (v_x + 150) && g_mmouse_y >= v_y && g_mmouse_y <= (v_y + 14)) {
				p_frontcolor(p_rgb(0, 0, 255));
				if (g_mmouse_links == 1) {
					v_act_slot = (v_first_slot + v_i);
				}
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			if (v_i > 4 && v_i < 9) {
				p_drawtext(v_x, v_y, a_message_text("template_load", 113, (1 + g_language)) + " " + p_str(((int64_t) v_i - 4)) + "*", -1, 0);
			} else {
				p_drawtext(v_x, v_y, LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name, -1, 0);
			}
			p_nextelement(ll_template_list);
			v_y += 15;
		}
		p_examinekeyboard();
		p_read_joystick();
		if (p_keyboardpushed(27) || v_mmouse_rechts == 1 || a_jb("template_load", 2)) {
			if (v_released1 == 1) {
				v_released1 = 2;
			}
		} else {
			if (!v_released1) {
				v_released1 = 1;
			}
			if (v_released1 == 2) {
				v_raus = 1;
			}
		}
		if (p_keyboardpushed(13)) {
			v_raus = 2;
		}
		if (v_wait_release2) {
			if (p_keyboardpushed(274) || g_jay == 1) {
				p_keydelay(1);
				v_wait_release2 = 0;
				v_act_slot += 1;
				if (v_act_slot > v_slot_count) {
					v_act_slot = v_slot_count;
				}
				if (v_act_slot > (v_first_slot + 22)) {
					v_first_slot += 1;
				}
			} else {
				if (p_keyboardpushed(273) || g_jay == -1) {
					p_keydelay(1);
					v_wait_release2 = 0;
					v_act_slot -= 1;
					if (v_act_slot < 0) {
						v_act_slot = 0;
					}
					if (v_act_slot < v_first_slot) {
						v_first_slot -= 1;
					}
				}
			}
		} else {
			if (p_keydelay(0) || !(g_jay || p_keyboardpushed(273) || p_keyboardpushed(274))) {
				v_wait_release2 = 1;
			}
		}
		p_stopdrawing();
		p_draw_mousepointer(g_mmouse_x, g_mmouse_y);
		p_delay(15);
		p_flipbuffers(1);
	} while (!v_raus);
	g_akt_spieler = v_sav_act_player;
	if (v_raus == 2) {
		p_selectelement(ll_template_list, v_act_slot);
		p_template_to_player();
	}
	p_clearlist(ll_template_list);
	while (p_keyboardpushed(27) || p_keyboardpushed(13) || a_jb("template_load", 1) || a_jb("template_load", 2) || v_mmouse_rechts || g_mmouse_links) {
		p_examinekeyboard();
		p_read_joystick();
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			g_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
		}
		p_delay(15);
	}
}

static intptr_t p_template_save() {
	int16_t v_act_slot = 0;
	int16_t v_but_x = 0;
	int16_t v_but_y = 0;
	int16_t v_cursor = 0;
	int16_t v_delmode = 0;
	int16_t v_first_slot = 0;
	int16_t v_firstline = 0;
	int16_t v_i = 0;
	intptr_t v_mmouse_rechts = 0;
	int16_t v_mouse_over_slot = 0;
	int16_t v_raus = 0;
	int16_t v_released1 = 0;
	int16_t v_released2 = 0;
	int16_t v_released3 = 0;
	int16_t v_released4 = 0;
	intptr_t v_result = 0;
	int16_t v_slot_count = 0;
	std::string v_tmp_name;
	int16_t v_tooltip = 0;
	int16_t v_typemode = 0;
	intptr_t v_wait_release2 = 0;
	intptr_t v_wohin = 0;
	int16_t v_x = 0;
	int16_t v_y = 0;
	v_released1 = 0;
	v_released2 = 0;
	v_released3 = 0;
	v_released4 = 0;
	v_raus = 0;
	v_tooltip = 0;
	v_firstline = 1;
	v_delmode = 0;
	v_typemode = 0;
	v_cursor = 0;
	v_tmp_name = "";
	v_first_slot = 4;
	v_act_slot = v_first_slot;
	p_clearlist(ll_template_list);
	p_load_templates();
	p_lastelement(ll_template_list);
	p_addelement(ll_template_list);
	LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name = a_message_text("template_save", 904, (1 + g_language));
	LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[0] = 999;
	p_lastelement(ll_template_list);
	p_addelement(ll_template_list);
	LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name = a_message_text("template_save", 905, (1 + g_language));
	LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[0] = 777;
	v_slot_count = ((p_countlist(ll_template_list) - 1) - 4);
	do {
		p_fenster(0);
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			g_mmouse_x = p_mousex();
			g_mmouse_y = p_mousey();
			g_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
		}
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(0);
		v_tooltip = 0;
		v_but_x = 593;
		v_but_y = 16;
		if (g_mmouse_x >= v_but_x && g_mmouse_x <= (v_but_x + 32) && g_mmouse_y >= v_but_y && g_mmouse_y <= (v_but_y + 32)) {
			v_tooltip = 650;
			p_clipsprite(6, 96, 32, 31, 31);
			if (g_mmouse_links == 1) {
				v_raus = 1;
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, v_but_x, v_but_y);
		v_but_x = 530;
		v_but_y = 423;
		if (g_mmouse_x >= v_but_x && g_mmouse_x <= (v_but_x + 88) && g_mmouse_y >= v_but_y && g_mmouse_y <= (v_but_y + 33)) {
			v_tooltip = 905;
			p_clipsprite(3, 0, 0, 87, 32);
			if (g_mmouse_links == 1) {
				v_raus = 2;
			}
		} else {
			p_clipsprite(3, 0, 31, 87, 32);
		}
		p_displaytransparentsprite(3, v_but_x, v_but_y);
		v_but_x = 572;
		v_but_y = 380;
		if (g_mmouse_x >= v_but_x && g_mmouse_x <= (v_but_x + 45) && g_mmouse_y >= v_but_y && g_mmouse_y <= (v_but_y + 29)) {
			v_tooltip = 976;
			p_clipsprite(5, 1, 1, 45, 29);
			if (g_mmouse_links == 1) {
				v_delmode = 1;
			}
		} else {
			p_clipsprite(5, 1, 32, 45, 29);
		}
		p_displaytransparentsprite(5, v_but_x, v_but_y);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext((320 - (p_textwidth(a_message_text("template_save", 901, (1 + g_language))) / 2)), 25, a_message_text("template_save", 901, (1 + g_language)), -1, 0);
		if (v_tooltip) {
			p_drawtext(30, 430, a_message_text("template_save", v_tooltip, (1 + g_language)), -1, 0);
		}
		v_firstline = p_draw_skill_list(g_akt_spieler, 70, 70, 24, v_firstline);
		v_x = 340;
		v_y = 70;
		v_mouse_over_slot = 0;
		p_selectelement(ll_template_list, v_first_slot);
		for (v_i = 0; v_i <= p_min(20, v_slot_count); v_i += 1) {
			if (v_act_slot == (v_first_slot + v_i)) {
				p_frontcolor(p_rgb(100, 100, 100));
				p_box(v_x, v_y, 230, 15, -1);
			}
			if (g_mmouse_x >= v_x && g_mmouse_x <= (v_x + 150) && g_mmouse_y >= v_y && g_mmouse_y <= (v_y + 14)) {
				v_mouse_over_slot = 1;
				if (v_delmode == 1) {
					p_frontcolor(p_rgb(255, 0, 0));
					if (g_mmouse_links == 1) {
						v_act_slot = (v_first_slot + v_i);
						if (LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[0] < 99) {
							v_delmode = 2;
							p_deleteelement(ll_template_list, 0);
							v_slot_count -= 1;
							v_first_slot -= 1;
							if (v_first_slot < 4) {
								v_first_slot = 4;
							}
						}
					}
				} else {
					p_frontcolor(p_rgb(0, 0, 255));
					if (g_mmouse_links == 1 && !v_typemode && !v_delmode) {
						v_act_slot = (v_first_slot + v_i);
						if (LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[0] == 999) {
							v_tmp_name = "";
						} else {
							v_tmp_name = LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name;
						}
						if (LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[0] == 777) {
							v_raus = 2;
						} else {
							v_typemode = 1;
						}
					}
				}
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			if (v_typemode && v_act_slot == (v_first_slot + v_i)) {
				v_tmp_name = p_keyboard_string(v_tmp_name, 0);
				if (p_len(v_tmp_name) > 30) {
					v_tmp_name = p_mid(v_tmp_name, 1, 30);
				}
				p_drawtext(v_x, v_y, v_tmp_name, -1, 0);
				v_cursor = ((v_cursor + 1) % 32);
				if (v_cursor < 16) {
					p_line((v_x + p_textwidth(v_tmp_name)), v_y, 0, 15, -1);
				}
			} else {
				p_drawtext(v_x, v_y, LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name, -1, 0);
			}
			p_nextelement(ll_template_list);
			v_y += 15;
		}
		if (v_delmode && !v_mouse_over_slot && v_tooltip != 976 && g_mmouse_links) {
			v_delmode = 0;
		}
		if (v_delmode == 2 && !g_mmouse_links) {
			v_delmode = 0;
		}
		if (p_keyboardpushed(127)) {
			if (v_released3 == 1) {
				v_released3 = 2;
				v_delmode = 0;
				p_selectelement(ll_template_list, v_act_slot);
				if (LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[0] < 99) {
					p_deleteelement(ll_template_list, 0);
					v_slot_count -= 1;
					v_first_slot -= 1;
					if (v_first_slot < 4) {
						v_first_slot = 4;
					}
				}
			}
		} else {
			if (!v_released3) {
				v_released3 = 1;
			}
			if (v_released3 == 2) {
				v_delmode = 0;
				v_released3 = 0;
			}
		}
		if (!v_typemode) {
			p_examinekeyboard();
		}
		p_read_joystick();
		if (p_keyboardpushed(27) || v_mmouse_rechts == 1 || a_jb("template_save", 2)) {
			if (v_released1 == 1) {
				v_released1 = 2;
			}
		} else {
			if (!v_released1) {
				v_released1 = 1;
			}
			if (v_released1 == 2) {
				v_raus = 1;
				v_released1 = 0;
			}
		}
		if (v_typemode && v_raus == 1) {
			v_typemode = 0;
			v_raus = 0;
		}
		if (p_keyboardpushed(13)) {
			if (v_released4 == 1) {
				v_released4 = 2;
			}
		} else {
			if (!v_released4) {
				v_released4 = 1;
			}
			if (v_released4 == 2) {
				if (v_typemode) {
					v_raus = 2;
				} else {
					p_selectelement(ll_template_list, v_act_slot);
					if (LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[0] == 999) {
						v_tmp_name = "";
					} else {
						v_tmp_name = LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name;
					}
					if (LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[0] == 777) {
						v_raus = 2;
					} else {
						v_typemode = 1;
					}
				}
				v_released4 = 0;
			}
		}
		if (v_typemode && v_raus == 2) {
			v_typemode = 0;
			v_raus = 0;
			p_selectelement(ll_template_list, v_act_slot);
			LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name = v_tmp_name;
			if (LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[0] == 999) {
				LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[0] = 0;
				p_addelement(ll_template_list);
				LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name = a_message_text("template_save", 904, (1 + g_language));
				LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[0] = 999;
				v_slot_count += 1;
			}
			p_selectelement(ll_template_list, v_act_slot);
			p_player_to_template();
		}
		if (v_wait_release2) {
			if (p_keyboardpushed(274) || g_jay == 1) {
				p_keydelay(1);
				v_wait_release2 = 0;
				v_act_slot += 1;
				if (v_act_slot > (v_slot_count + 4)) {
					v_act_slot = (v_slot_count + 4);
				}
				if (v_act_slot > (v_first_slot + 20)) {
					v_first_slot += 1;
				}
			} else {
				if (p_keyboardpushed(273) || g_jay == -1) {
					p_keydelay(1);
					v_wait_release2 = 0;
					v_act_slot -= 1;
					if (v_act_slot < 4) {
						v_act_slot = 4;
					}
					if (v_act_slot < v_first_slot) {
						v_first_slot -= 1;
					}
				}
			}
		} else {
			if (p_keydelay(0) || !(g_jay || p_keyboardpushed(273) || p_keyboardpushed(274))) {
				v_wait_release2 = 1;
			}
		}
		p_stopdrawing();
		if (v_delmode) {
			p_clipsprite(72, 128, 32, 32, 32);
			p_displaytransparentsprite(72, g_mmouse_x, g_mmouse_y);
			p_clipsprite(36, 32, 32, 16, 16);
			p_displaytransparentsprite(36, (g_mmouse_x + 10), (g_mmouse_y + 10));
		} else {
			p_draw_mousepointer(g_mmouse_x, g_mmouse_y);
		}
		p_delay(15);
		p_flipbuffers(1);
	} while (!v_raus);
	if (v_raus == 2) {
		p_resetlist(ll_template_list);
		while (p_nextelement(ll_template_list)) {
			if (LIST_CURRENT(ll_template_list,struct st_char_tpl).f_skills[0] > 99) {
				p_deleteelement(ll_template_list, 0);
			}
		}
		p_save_templates();
	}
	p_clearlist(ll_template_list);
	while (p_keyboardpushed(27) || p_keyboardpushed(13) || a_jb("template_save", 1) || a_jb("template_save", 2) || v_mmouse_rechts || g_mmouse_links) {
		p_examinekeyboard();
		p_read_joystick();
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			g_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
		}
		p_delay(15);
	}
}

static intptr_t p_title() {
	intptr_t v_a = 0;
	int16_t v_avgtime = 0;
	intptr_t v_count = 0;
	intptr_t v_elapsedtime = 0;
	intptr_t v_jb1 = 0;
	intptr_t v_languagen_zeigen = 0;
	int16_t v_maxtime = 0;
	int16_t v_mintime = 0;
	intptr_t v_mouse_links = 0;
	intptr_t v_mouse_linksold = 0;
	intptr_t v_mouse_rechts = 0;
	intptr_t v_mouse_released = 0;
	intptr_t v_mouse_x = 0;
	intptr_t v_mouse_y = 0;
	intptr_t v_ok_button = 0;
	int32_t v_pos_aktuell = 0;
	intptr_t v_result = 0;
	int16_t v_start = 0;
	int32_t v_starttime = 0;
	std::string v_t;
	int8_t v_x_moddy = 0;
	int16_t v_xxx = 0;
	intptr_t v_ytemp = 0;
	a_position.dim("position", 9);
	a_position("title", 1) = 50;
	a_position("title", 2) = 150;
	a_position("title", 3) = 238;
	a_position("title", 4) = 330;
	a_position("title", 5) = 430;
	a_position("title", 6) = 500;
	a_position("title", 7) = 570;
	v_pos_aktuell = 0;
	v_x_moddy = 2;
	v_ok_button = 0;
	v_start = 0;
	v_maxtime = 1;
	v_mintime = 9999;
	v_avgtime = 130;
	v_starttime = p_elapsedmilliseconds();
	do {
		p_fenster(0);
		v_xxx = (v_xxx + v_x_moddy);
		if (v_xxx > 1123) {
			v_x_moddy = -2;
		}
		if (v_xxx < 1) {
			v_x_moddy = 2;
		}
		p_clearscreen(0);
		p_clipsprite(18, v_xxx, 0, 640, 480);
		p_displaysprite(18, 0, 0);
		p_clipsprite(26, 0, 0, 640, 174);
		p_displaytransparentsprite(26, 0, 40);
		p_read_joystick();
		p_examinekeyboard();
		if (p_keyboardreleased(115)) {
			v_pos_aktuell = 1;
			v_jb1 = 1;
			p_mouselocate((a_position("title", v_pos_aktuell) + 20), 410);
		}
		if (p_keyboardreleased(108)) {
			v_pos_aktuell = 2;
			v_jb1 = 1;
			p_mouselocate((a_position("title", v_pos_aktuell) + 20), 410);
		}
		if (p_keyboardreleased(282)) {
			v_pos_aktuell = 3;
			v_jb1 = 1;
			p_mouselocate((a_position("title", v_pos_aktuell) + 20), 410);
		}
		if (p_keyboardreleased(104)) {
			v_pos_aktuell = 4;
			v_jb1 = 1;
			p_mouselocate((a_position("title", v_pos_aktuell) + 20), 410);
		}
		if (p_keyboardreleased(99)) {
			v_pos_aktuell = 5;
			v_jb1 = 1;
			p_mouselocate((a_position("title", v_pos_aktuell) + 20), 410);
		}
		if (p_keyboardreleased(290)) {
			v_pos_aktuell = 6;
			v_jb1 = 1;
			p_mouselocate((a_position("title", v_pos_aktuell) + 20), 410);
		}
		if (p_keyboardreleased(113)) {
			v_pos_aktuell = 7;
			v_jb1 = 1;
			p_mouselocate((a_position("title", v_pos_aktuell) + 20), 410);
		}
		if (!g_no_mouse) {
			if (p_keyboardpushed(27)) {
				if (!g_released) {
					v_result = p_releasemouse(1);
					g_released = 1;
					p_delay(g_mydelay);
				} else {
					v_result = p_releasemouse(0);
					g_released = 0;
					p_delay(g_mydelay);
				}
			}
		}
		if (p_keyboardreleased(275) || g_jax == 1) {
			v_pos_aktuell = (v_pos_aktuell + 1);
			v_count += 1;
			if (v_pos_aktuell > 7) {
				v_pos_aktuell = 1;
			}
			p_mouselocate((a_position("title", v_pos_aktuell) + 20), 410);
		}
		if (p_keyboardreleased(276) || g_jax == -1) {
			v_pos_aktuell = (v_pos_aktuell - 1);
			if (v_pos_aktuell < 1) {
				v_pos_aktuell = 7;
			}
			p_mouselocate((a_position("title", v_pos_aktuell) + 20), 410);
		}
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			v_mouse_x = p_mousex();
			v_mouse_y = p_mousey();
			v_mouse_linksold = v_mouse_links;
			v_mouse_links = p_mousebutton(1);
			if (v_mouse_linksold == 1 && !v_mouse_links) {
				v_mouse_released = 1;
			} else {
				v_mouse_released = 0;
			}
			v_mouse_rechts = p_mousebutton(2);
		}
		if (v_mouse_rechts && v_languagen_zeigen) {
			v_languagen_zeigen = 0;
		}
		v_ok_button = 0;
		p_startdrawing(p_screenoutput());
		p_drawingmode(1);
		p_frontcolor(16711680);
		v_t = "Version: 4.3.2  (09.10.2010)";
		p_drawtext((330 - (p_textwidth(v_t) / 2)), 240, v_t, -1, 0);
		v_t = "www.lostlabyrinth.com";
		p_drawtext((330 - (p_textwidth(v_t) / 2)), 260, v_t, -1, 0);
		v_t = "Authors:";
		p_drawtext((330 - (p_textwidth(v_t) / 2)), 290, v_t, -1, 0);
		v_t = "Markus D\366bele (Programming)";
		p_drawtext((330 - (p_textwidth(v_t) / 2)), 310, v_t, -1, 0);
		v_t = "Bernd Edler (Programming)";
		p_drawtext((330 - (p_textwidth(v_t) / 2)), 330, v_t, -1, 0);
		v_t = "Richard Braakman (Programming - Compiler)";
		p_drawtext((330 - (p_textwidth(v_t) / 2)), 350, v_t, -1, 0);
		p_frontcolor(16777215);
		p_drawtext((70 - (p_textwidth(a_message_text("title", 106, (g_language + 1))) / 2)), 440, a_message_text("title", 106, (g_language + 1)), -1, 0);
		p_drawtext((66 - (p_textwidth("(S)") / 2)), 455, "(S)", -1, 0);
		p_drawtext((170 - (p_textwidth(a_message_text("title", (997 + g_language), g_language)) / 2)), 440, a_message_text("title", (997 + g_language), g_language), -1, 0);
		p_drawtext((166 - (p_textwidth("(L)") / 2)), 455, "(L)", -1, 0);
		if (!v_languagen_zeigen) {
			p_drawtext(164, 380, "^", -1, 0);
		} else {
			for (v_a = 0; v_a <= 2; v_a += 1) {
				if (v_a != g_language) {
					p_drawtext((170 - (p_textwidth(a_message_text("title", (997 + v_a), g_language)) / 2)), (550 - (60 * v_ytemp)), a_message_text("title", (997 + v_a), g_language), -1, 0);
					v_ytemp += 1;
				}
			}
		}
		p_drawtext((350 - (p_textwidth(a_message_text("title", 109, (g_language + 1))) / 2)), 440, a_message_text("title", 109, (g_language + 1)), -1, 0);
		p_drawtext((346 - (p_textwidth("(H)") / 2)), 455, "(H)", -1, 0);
		p_drawtext((450 - (p_textwidth(a_message_text("title", 110, (g_language + 1))) / 2)), 440, a_message_text("title", 110, (g_language + 1)), -1, 0);
		p_drawtext((446 - (p_textwidth("(C)") / 2)), 455, "(C)", -1, 0);
		p_drawtext((254 - (p_textwidth(a_message_text("title", 67, (g_language + 1))) / 2)), 440, a_message_text("title", 67, (g_language + 1)), -1, 0);
		p_drawtext((254 - (p_textwidth("(F1)") / 2)), 455, "(F1)", -1, 0);
		p_drawtext((516 - (p_textwidth(a_message_text("title", 405, (g_language + 1))) / 2)), 440, a_message_text("title", 405, (g_language + 1)), -1, 0);
		p_drawtext((516 - (p_textwidth("(F9)") / 2)), 455, "(F9)", -1, 0);
		p_drawtext((590 - (p_textwidth(a_message_text("title", 111, (g_language + 1))) / 2)), 440, a_message_text("title", 111, (g_language + 1)), -1, 0);
		p_drawtext((586 - (p_textwidth("(Q)") / 2)), 455, "(Q)", -1, 0);
		p_stopdrawing();
		if (v_pos_aktuell == 1) {
			if (p_keyboardpushed(13) || v_jb1 == 1) {
				v_ok_button = 1;
				v_start = 1;
			}
		}
		if (v_mouse_x >= 50 && v_mouse_x <= 91 && v_mouse_y >= 390 && v_mouse_y <= 431) {
			p_clipsprite(2, 0, 1, 34, 42);
			p_displaytransparentsprite(2, 50, 390);
			v_pos_aktuell = 1;
			v_ok_button = 1;
		} else {
			p_clipsprite(2, 0, 43, 34, 42);
			p_displaytransparentsprite(2, 50, 390);
			v_ok_button = 0;
		}
		if (v_pos_aktuell == 2) {
			if (p_keyboardreleased(273)) {
				g_language = (g_language + 1);
				if (g_language > 2) {
					g_language = 0;
				}
			}
			if (p_keyboardreleased(274)) {
				g_language = (g_language - 1);
				if (g_language < 0) {
					g_language = 2;
				}
			}
			if (p_keyboardreleased(13) || v_jb1 == 1) {
				if (v_languagen_zeigen == 1) {
					v_languagen_zeigen = 0;
				} else {
					v_languagen_zeigen = 1;
				}
			}
		}
		if (v_languagen_zeigen) {
			v_ytemp = 1;
			for (v_a = 0; v_a <= 2; v_a += 1) {
				if (v_a != g_language) {
					if (v_mouse_x >= 150 && v_mouse_x <= 191 && v_mouse_y >= (390 - (60 * v_ytemp)) && v_mouse_y <= (431 - (60 * v_ytemp))) {
						p_clipsprite(2, a_language("title", v_a).f_buttonpos, 1, 34, 42);
						if (v_mouse_released) {
							v_languagen_zeigen = 0;
							g_language = v_a;
						}
					} else {
						p_clipsprite(2, a_language("title", v_a).f_buttonpos, 43, 34, 42);
					}
					p_displaytransparentsprite(2, 150, (390 - (v_ytemp * 60)));
					v_ytemp += 1;
				}
			}
		}
		if (v_mouse_x >= 150 && v_mouse_x <= 191 && v_mouse_y >= 390 && v_mouse_y <= 431) {
			p_clipsprite(2, a_language("title", g_language).f_buttonpos, 1, 34, 42);
			p_displaytransparentsprite(2, 150, 390);
			v_pos_aktuell = 2;
			if (v_mouse_released == 1) {
				if (v_languagen_zeigen == 1) {
					v_languagen_zeigen = 0;
				} else {
					v_languagen_zeigen = 1;
				}
			}
		} else {
			p_clipsprite(2, a_language("title", g_language).f_buttonpos, 43, 34, 42);
			p_displaytransparentsprite(2, 150, 390);
		}
		if (v_pos_aktuell == 3) {
			if (p_keyboardpushed(13) || v_jb1 == 1) {
				g_gb_callfromtitlescreen = 1;
				p_hilfe();
				g_gb_callfromtitlescreen = 0;
			}
		}
		if (v_mouse_x >= 238 && v_mouse_x <= 279 && v_mouse_y >= 390 && v_mouse_y <= 431) {
			p_clipsprite(2, 204, 1, 34, 42);
			p_displaytransparentsprite(2, 238, 390);
			v_pos_aktuell = 3;
			if (v_mouse_released == 1) {
				g_gb_callfromtitlescreen = 1;
				p_hilfe();
				g_gb_callfromtitlescreen = 0;
			}
		} else {
			p_clipsprite(2, 204, 43, 34, 42);
			p_displaytransparentsprite(2, 238, 390);
		}
		if (v_pos_aktuell == 4) {
			if (p_keyboardpushed(13) || v_jb1 == 1) {
				p_init_skills();
				p_show_highscore();
			}
		}
		if (v_mouse_x >= 330 && v_mouse_x <= 371 && v_mouse_y >= 390 && v_mouse_y <= 431) {
			p_clipsprite(2, 136, 1, 34, 42);
			p_displaytransparentsprite(2, 330, 390);
			v_pos_aktuell = 4;
			if (v_mouse_released == 1) {
				p_init_skills();
				p_show_highscore();
			}
		} else {
			p_clipsprite(2, 136, 43, 34, 42);
			p_displaytransparentsprite(2, 330, 390);
		}
		if (v_pos_aktuell == 5) {
			if (p_keyboardpushed(13) || v_jb1 == 1) {
				p_show_credits();
			}
		}
		if (v_mouse_x >= 430 && v_mouse_x <= 471 && v_mouse_y >= 390 && v_mouse_y <= 431) {
			p_clipsprite(2, 102, 1, 34, 42);
			p_displaytransparentsprite(2, 430, 390);
			v_pos_aktuell = 5;
			if (v_mouse_released == 1) {
				p_show_credits();
			}
		} else {
			p_clipsprite(2, 102, 43, 34, 42);
			p_displaytransparentsprite(2, 430, 390);
		}
		if (v_pos_aktuell == 6) {
			if (p_keyboardpushed(13) || v_jb1 == 1) {
				p_loading_screen();
			}
		}
		if (v_mouse_x >= 500 && v_mouse_x <= 541 && v_mouse_y >= 390 && v_mouse_y <= 431) {
			p_clipsprite(2, 578, 1, 34, 42);
			p_displaytransparentsprite(2, 500, 390);
			v_pos_aktuell = 6;
			if (v_mouse_released == 1) {
				p_loading_screen();
			}
		} else {
			p_clipsprite(2, 578, 43, 34, 42);
			p_displaytransparentsprite(2, 500, 390);
		}
		if (v_pos_aktuell == 7) {
			if (p_keyboardpushed(13) || v_jb1 == 1) {
				p_closescreen();
				p_runprogram("http://www.lostlabyrinth.com");
				exit(0);
			}
		}
		if (v_mouse_x >= 570 && v_mouse_x <= 611 && v_mouse_y >= 390 && v_mouse_y <= 431) {
			p_clipsprite(2, 170, 1, 34, 42);
			p_displaytransparentsprite(2, 570, 390);
			v_pos_aktuell = 7;
			if (v_mouse_released == 1) {
				p_closescreen();
				p_runprogram("http://www.lostlabyrinth.com");
				exit(0);
			}
		} else {
			p_clipsprite(2, 170, 43, 34, 42);
			p_displaytransparentsprite(2, 570, 390);
		}
		p_draw_mousepointer(v_mouse_x, v_mouse_y);
		v_elapsedtime = (p_elapsedmilliseconds() - v_starttime);
		if (v_elapsedtime < 20) {
			p_delay((20 - v_elapsedtime));
		}
		v_starttime = p_elapsedmilliseconds();
		p_flipbuffers(1);
	} while (!((v_ok_button == 1 && v_mouse_released == 1) || v_start == 1));
}

static intptr_t p_upload_box(std::string v_last_words) {
	int16_t v_back_button = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_raus = 0;
	intptr_t v_result = 0;
	intptr_t v_wraus = 0;
	int16_t v_xx = 0;
	int16_t v_xxx = 0;
	int16_t v_yy = 0;
	int16_t v_yyy = 0;
	v_wraus = 0;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_laby_rahmen(0);
		p_show_logo();
		p_show_varys(0);
		p_show_buttons();
		p_clipsprite(14, 1, 1, 335, 335);
		p_displaytransparentsprite(14, 16, 16);
		p_startdrawing(p_screenoutput());
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(60, 300, a_message_text("upload_box", 740, (1 + g_language)), -1, 0);
		p_drawtext(60, 315, a_message_text("upload_box", 741, (1 + g_language)), -1, 0);
		p_drawtext(90, 170, a_message_text("upload_box", 748, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_read_joystick();
		p_examinekeyboard();
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mmouse_links = p_mousebutton(1);
		v_mmouse_rechts = p_mousebutton(2);
		v_xx = 90;
		v_yy = 250;
		v_xxx = 190;
		v_yyy = 250;
		if (p_keyboardpushed(121) || p_keyboardpushed(122) || a_jb("upload_box", 1) == 1) {
			v_raus = 1;
		}
		if (v_mmouse_x > v_xx && v_mmouse_x < (v_xx + 90) && v_mmouse_y > v_yy && v_mmouse_y < (v_yy + 28)) {
			p_clipsprite(3, 0, 0, 87, 32);
			if (v_mmouse_links == 1) {
				v_wraus = 1;
			}
		} else {
			p_clipsprite(3, 0, 31, 87, 32);
		}
		p_displaytransparentsprite(3, v_xx, v_yy);
		if (p_keyboardpushed(110) || a_jb("upload_box", 2) == 1) {
			v_wraus = 2;
		}
		v_back_button = 0;
		if (v_mmouse_x > v_xxx && v_mmouse_x < (v_xxx + 90) && v_mmouse_y > v_yyy && v_mmouse_y < (v_yyy + 28)) {
			p_clipsprite(4, 0, 0, 87, 32);
			if (v_mmouse_links == 1) {
				v_wraus = 2;
			}
		} else {
			p_clipsprite(4, 0, 31, 87, 32);
		}
		p_displaytransparentsprite(4, v_xxx, v_yyy);
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		if (v_wraus && !(a_jb("upload_box", 2) || v_mmouse_links)) {
			v_raus = v_wraus;
		}
		p_flipbuffers(1);
	} while (!(v_raus > 0));
	if (v_raus == 1) {
		p_highscore_upload(0, v_last_words);
	}
}

static intptr_t p_vergolden() {
	int16_t v_verkauf = 0;
	intptr_t v_wohin = 0;
	v_verkauf = p_select_inventory(104);
	if (a_inventory("vergolden", v_verkauf, g_akt_spieler).f_name == 150) {
		v_verkauf = 0;
	}
	if (v_verkauf) {
		p_gold_stack2();
		p_leeren(v_verkauf);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 1));
		p_drawtext(200, 400, p_nachricht6(105, p_str(p_gold_anzahl())), -1, 0);
		p_stopdrawing();
	}
}

static intptr_t p_vorheriger_level() {
	a_spieler("vorheriger_level", g_akt_spieler).f_level = (a_spieler("vorheriger_level", g_akt_spieler).f_level - 1);
	a_spieler("vorheriger_level", g_akt_spieler).f_character_x = a_ausgangx("vorheriger_level", a_spieler("vorheriger_level", g_akt_spieler).f_level);
	a_spieler("vorheriger_level", g_akt_spieler).f_character_y = a_ausgangy("vorheriger_level", a_spieler("vorheriger_level", g_akt_spieler).f_level);
	a_spieler("vorheriger_level", g_akt_spieler).f_speed = p_maxspeed();
	a_spieler("vorheriger_level", g_akt_spieler).f_creature_x = a_ausgangx("vorheriger_level", a_spieler("vorheriger_level", g_akt_spieler).f_level);
	a_spieler("vorheriger_level", g_akt_spieler).f_creature_y = a_ausgangy("vorheriger_level", a_spieler("vorheriger_level", g_akt_spieler).f_level);
	if (a_sonderlevel("vorheriger_level", a_spieler("vorheriger_level", g_akt_spieler).f_level) > 0) {
		p_sonderlevel_text(a_sonderlevel("vorheriger_level", a_spieler("vorheriger_level", g_akt_spieler).f_level));
	}
	if (a_levelmod("vorheriger_level", a_spieler("vorheriger_level", g_akt_spieler).f_level) > 0) {
		p_levelmodtext(a_levelmod("vorheriger_level", a_spieler("vorheriger_level", g_akt_spieler).f_level));
	}
}

static intptr_t p_zerstoeren(intptr_t v_feld) {
	if (p_okaybox(v_feld) == 1) {
		if (!a_inventory("zerstoeren", v_feld, g_akt_spieler).f_benutzt) {
			p_leeren(v_feld);
		} else {
			p_message(719, 1);
		}
	}
}

static intptr_t p_astar(int16_t v_target_x, int16_t v_target_y, int16_t v_creature) {
	int16_t v_save_cost = 0;
	int16_t v_save_parent_x = 0;
	int16_t v_save_parent_y = 0;
	int16_t v_save_x = 0;
	int16_t v_save_y = 0;
	if (!p_countlist(ll_openlist)) {
		return 2;
	} else {
		p_firstelement(ll_openlist);
		if (v_target_x == LIST_CURRENT(ll_openlist,struct st_knot).f_x && v_target_y == LIST_CURRENT(ll_openlist,struct st_knot).f_y) {
			if (p_addelement(ll_closedlist)) {
				LIST_CURRENT(ll_closedlist,struct st_knot).f_parent_x = LIST_CURRENT(ll_openlist,struct st_knot).f_parent_x;
				LIST_CURRENT(ll_closedlist,struct st_knot).f_parent_y = LIST_CURRENT(ll_openlist,struct st_knot).f_parent_y;
				LIST_CURRENT(ll_closedlist,struct st_knot).f_x = LIST_CURRENT(ll_openlist,struct st_knot).f_x;
				LIST_CURRENT(ll_closedlist,struct st_knot).f_y = LIST_CURRENT(ll_openlist,struct st_knot).f_y;
				LIST_CURRENT(ll_closedlist,struct st_knot).f_cost = LIST_CURRENT(ll_openlist,struct st_knot).f_cost;
			}
			return 1;
		}
		v_save_x = LIST_CURRENT(ll_openlist,struct st_knot).f_x;
		v_save_y = LIST_CURRENT(ll_openlist,struct st_knot).f_y;
		v_save_parent_x = LIST_CURRENT(ll_openlist,struct st_knot).f_parent_x;
		v_save_parent_y = LIST_CURRENT(ll_openlist,struct st_knot).f_parent_y;
		v_save_cost = LIST_CURRENT(ll_openlist,struct st_knot).f_cost;
		p_deleteelement(ll_openlist, 0);
		if (p_addelement(ll_closedlist)) {
			LIST_CURRENT(ll_closedlist,struct st_knot).f_parent_x = v_save_parent_x;
			LIST_CURRENT(ll_closedlist,struct st_knot).f_parent_y = v_save_parent_y;
			LIST_CURRENT(ll_closedlist,struct st_knot).f_x = v_save_x;
			LIST_CURRENT(ll_closedlist,struct st_knot).f_y = v_save_y;
			LIST_CURRENT(ll_closedlist,struct st_knot).f_cost = v_save_cost;
		}
		p_insert_knots(v_save_x, v_save_y, v_save_cost, v_target_x, v_target_y, v_creature);
		p_sortstructuredlist(ll_openlist, 0, OFFSETOF(st_knot, f_cost), 1);
	}
	return 0;
}

static intptr_t p_character_info() {
	int16_t v_but_x = 0;
	int16_t v_but_y = 0;
	int16_t v_first_line = 0;
	intptr_t v_mmouse_rechts = 0;
	int16_t v_raus = 0;
	int16_t v_released1 = 0;
	int16_t v_resi = 0;
	intptr_t v_result = 0;
	int16_t v_skillnum = 0;
	std::string v_title;
	std::string v_waffenl;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	v_released1 = 0;
	v_raus = 0;
	v_skillnum = p_count_skills(g_akt_spieler);
	v_first_line = 1;
	do {
		p_fenster(0);
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			g_mmouse_x = p_mousex();
			g_mmouse_y = p_mousey();
			g_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
		}
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(0);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		v_x = 55;
		v_y = 80;
		p_frontcolor(p_rgb(255, 255, 255));
		v_title = a_message_text("character_info", 92, (1 + g_language)) + a_spieler("character_info", g_akt_spieler).f_name;
		p_drawtext((320 - (p_textwidth(v_title) / 2)), 25, v_title, -1, 0);
		if (g_cinfo_menu == 1) {
			p_frontcolor(p_rgb(247, 36, 61));
			p_drawtext(v_x, v_y, a_message_text("character_info", 55, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_lifepoints) + " (" + p_str(p_maxlife()) + ")", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 919, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_frontcolor(p_rgb(130, 125, 250));
			p_drawtext(v_x, v_y, a_message_text("character_info", 59, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_mana) + " (" + p_str(p_maxmana()) + ")", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 920, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(v_x, v_y, a_message_text("character_info", 52, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_attack) + " (" + p_str(p_angriff()) + ")", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 921, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 53, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_dexterity) + " (" + p_str(p_reflexe()) + ")", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 922, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 923, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 54, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_strength) + " (" + p_str(p_staerke()) + ")", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 924, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 925, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_frontcolor(p_rgb(239, 131, 44));
			p_drawtext(v_x, v_y, a_message_text("character_info", 56, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_maxspeed) + " (" + p_str(p_maxspeed()) + ")", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 926, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(v_x, v_y, a_message_text("character_info", 57, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_perception) + " (" + p_str(p_wahrnehmung()) + ")", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 927, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 58, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_luck_score) + " (" + p_str(p_luck()) + ")", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 928, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 91, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_power_score) + " (" + p_str(p_power(0)) + ")", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 929, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 61, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_circle), -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 930, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_frontcolor(p_rgb(1, 1, 255));
			p_drawtext(v_x, v_y, a_message_text("character_info", 90, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_hunger), -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 931, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 89, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_durst), -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 932, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			v_waffenl = "";
			if (!p_ich_trage(10)) {
				v_waffenl = a_message_text("character_info", 636, (g_language + 1));
			}
			p_frontcolor(p_rgb(255, 1, 1));
			p_drawtext(v_x, v_y, a_message_text("character_info", 88, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(p_schaden_min()) + "-" + p_str(p_schaden_max()) + v_waffenl, -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 933, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_schutz();
			p_drawtext(v_x, v_y, a_message_text("character_info", 87, (1 + g_language)), -1, 0);
			p_schutz();
			p_drawtext((v_x + 170), v_y, p_str(g_schutz_min) + "-" + p_str(g_schutz_max), -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 934, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(v_x, v_y, a_message_text("character_info", 86, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(g_behinderung), -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 935, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_frontcolor(p_rgb(255, 1, 1));
			p_drawtext(v_x, v_y, a_message_text("character_info", 84, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_mks), -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 936, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_frontcolor(p_rgb(255, 255, 1));
			p_drawtext(v_x, v_y, a_message_text("character_info", 85, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(p_gold_anzahl()), -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 937, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(v_x, v_y, a_message_text("character_info", 239, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(p_anz_staffpieces()) + " ( + " + p_str(((int64_t) 100 * p_anz_staffpieces())) + " " + a_message_text("character_info", 93, (1 + g_language)) + " )", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 938, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 436, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_moves), -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 939, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 93, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(p_punkte()), -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 940, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 941, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			v_first_line = p_draw_skill_list(g_akt_spieler, 350, 80, 20, v_first_line);
			p_stopdrawing();
		} else {
			p_drawtext(v_x, v_y, a_message_text("character_info", 615, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 190), v_y, p_str(p_spieler_angriffswert()) + "%", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 894, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 895, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 612, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 190), v_y, p_str(p_schaden_critical()) + "%", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 896, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 897, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 574, (1 + g_language)) + ":", -1, 0);
			p_drawtext((v_x + 190), v_y, p_str(p_schleichen()) + "%", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 898, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 899, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 915, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 190), v_y, p_str(p_entdecken()) + "%", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 916, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 909, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 917, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 190), v_y, p_str(p_find_treasure()) + "%", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 918, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 909, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 614, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 190), v_y, p_str(p_find_trap()) + "%", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 908, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 909, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 613, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 190), v_y, p_str(p_ausweichen()) + "%", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 910, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 911, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 629, (1 + g_language)), -1, 0);
			p_drawtext((v_x + 190), v_y, p_str(((int64_t) p_reflexe() * 10)) + "%", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 912, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 913, (1 + g_language)), -1, 0);
			}
			v_y = (v_y + 15);
			p_drawtext(v_x, v_y, a_message_text("character_info", 703, (1 + g_language)), -1, 0);
			v_resi = a_spieler("character_info", g_akt_spieler).f_magieresistenz;
			if (p_habich(45)) {
				v_resi = 100;
			}
			p_drawtext((v_x + 190), v_y, p_str(v_resi) + "%", -1, 0);
			if (g_mmouse_x > v_x && g_mmouse_x < (v_x + 200) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 914, (1 + g_language)), -1, 0);
			}
			p_stopdrawing();
			v_x = 350;
			v_y = 80;
			p_clipsprite(9, 32, 192, 32, 32);
			p_displaytransparentsprite(9, (v_x - 36), (v_y - 10));
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(v_x, v_y, a_message_text("character_info", 618, (1 + g_language)) + ":", -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_goblinlehre), -1, 0);
			if (g_mmouse_x > (v_x - 36) && g_mmouse_x < (v_x + 170) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 888, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 889, (1 + g_language)), -1, 0);
			}
			p_stopdrawing();
			v_y = (v_y + 32);
			p_clipsprite(9, 160, 448, 32, 32);
			p_displaytransparentsprite(9, (v_x - 36), (v_y - 10));
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(v_x, v_y, a_message_text("character_info", 619, (1 + g_language)) + ":", -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_spinnenlehre), -1, 0);
			if (g_mmouse_x > (v_x - 36) && g_mmouse_x < (v_x + 170) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 888, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 889, (1 + g_language)), -1, 0);
			}
			p_stopdrawing();
			v_y = (v_y + 32);
			p_clipsprite(9, 32, 128, 32, 32);
			p_displaytransparentsprite(9, (v_x - 36), (v_y - 10));
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(v_x, v_y, a_message_text("character_info", 620, (1 + g_language)) + ":", -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_untotenlehre), -1, 0);
			if (g_mmouse_x > (v_x - 36) && g_mmouse_x < (v_x + 170) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 888, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 889, (1 + g_language)), -1, 0);
			}
			p_stopdrawing();
			v_y = (v_y + 32);
			p_clipsprite(9, 0, 0, 32, 32);
			p_displaytransparentsprite(9, (v_x - 36), (v_y - 10));
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(v_x, v_y, a_message_text("character_info", 621, (1 + g_language)) + ":", -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_tierkunde), -1, 0);
			if (g_mmouse_x > (v_x - 36) && g_mmouse_x < (v_x + 170) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 888, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 889, (1 + g_language)), -1, 0);
			}
			p_stopdrawing();
			v_y = (v_y + 32);
			p_clipsprite(9, 256, 0, 32, 32);
			p_displaytransparentsprite(9, (v_x - 36), (v_y - 10));
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(v_x, v_y, a_message_text("character_info", 628, (1 + g_language)) + ":", -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_pflanzenlehre), -1, 0);
			if (g_mmouse_x > (v_x - 36) && g_mmouse_x < (v_x + 170) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 888, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 889, (1 + g_language)), -1, 0);
			}
			p_stopdrawing();
			v_y = (v_y + 32);
			p_clipsprite(1, 32, 96, 32, 32);
			p_displaytransparentsprite(1, (v_x - 36), (v_y - 10));
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(v_x, v_y, a_message_text("character_info", 622, (1 + g_language)) + ":", -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_fallenlehre), -1, 0);
			if (g_mmouse_x > (v_x - 36) && g_mmouse_x < (v_x + 170) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 890, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 891, (1 + g_language)), -1, 0);
			}
			p_stopdrawing();
			v_y = (v_y + 32);
			p_clipsprite(8, 448, 160, 32, 32);
			p_displaytransparentsprite(8, (v_x - 36), (v_y - 10));
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(v_x, v_y, a_message_text("character_info", 623, (1 + g_language)) + ":", -1, 0);
			p_drawtext((v_x + 170), v_y, p_str(a_spieler("character_info", g_akt_spieler).f_giftlehre), -1, 0);
			if (g_mmouse_x > (v_x - 36) && g_mmouse_x < (v_x + 170) && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15)) {
				p_drawtext(30, 430, a_message_text("character_info", 892, (1 + g_language)), -1, 0);
				p_drawtext(30, 445, a_message_text("character_info", 893, (1 + g_language)), -1, 0);
			}
			p_stopdrawing();
		}
		p_clipsprite(0, 128, ((a_spieler("character_info", g_akt_spieler).f_maennchen * 32) - 32), 32, 32);
		p_displaytransparentsprite(0, 310, 395);
		v_but_x = 593;
		v_but_y = 16;
		if (g_mmouse_x >= v_but_x && g_mmouse_x <= (v_but_x + 32) && g_mmouse_y >= v_but_y && g_mmouse_y <= (v_but_y + 32)) {
			p_clipsprite(6, 96, 32, 31, 31);
			if (g_mmouse_links == 1) {
				v_raus = 1;
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, v_but_x, v_but_y);
		p_examinekeyboard();
		if (p_keyboardpushed(27) || v_mmouse_rechts == 1) {
			v_raus = 1;
		}
		if (p_keyboardpushed(100)) {
			if (v_released1 == 1) {
				v_released1 = 2;
			}
		} else {
			if (!v_released1) {
				v_released1 = 1;
			}
			if (v_released1 == 2) {
				v_raus = 1;
			}
		}
		if (g_cinfo_menu == 2) {
			if ((g_mmouse_x > 550 && g_mmouse_x < 582 && g_mmouse_y > 350 && g_mmouse_y < 382) || p_keyboardpushed(276)) {
				p_clipsprite(6, 96, 0, 31, 31);
				if (g_mmouse_links == 1 || p_keyboardpushed(276)) {
					g_cinfo_menu = 1;
				}
			} else {
				p_clipsprite(6, 32, 0, 31, 31);
			}
		} else {
			p_clipsprite(6, 288, 0, 31, 31);
		}
		p_displaytransparentsprite(6, 550, 350);
		if (g_cinfo_menu == 1) {
			if ((g_mmouse_x > 584 && g_mmouse_x < 616 && g_mmouse_y > 350 && g_mmouse_y < 382) || p_keyboardpushed(275)) {
				p_clipsprite(6, 63, 0, 31, 31);
				if (g_mmouse_links == 1 || p_keyboardpushed(275)) {
					g_cinfo_menu = 2;
				}
			} else {
				p_clipsprite(6, 0, 0, 31, 31);
			}
		} else {
			p_clipsprite(6, 256, 0, 31, 31);
		}
		p_displaytransparentsprite(6, 584, 350);
		p_draw_mousepointer(g_mmouse_x, g_mmouse_y);
		p_flipbuffers(1);
	} while (!(v_raus == 1));
}

static intptr_t p_damage(int16_t v_min_damage, int16_t v_max_damage, int16_t v_spell, int16_t v_special) {
	intptr_t v_new_max_damage = 0;
	intptr_t v_new_min_damage = 0;
	int16_t v_schaden = 0;
	switch (v_min_damage) {
	case 1:
		v_new_min_damage = p_power(v_spell);
		break;
	case 2:
		v_new_min_damage = (p_power(v_spell) + 1);
		break;
	case 3:
		v_new_min_damage = (p_power(v_spell) + 2);
		break;
	case 4:
		v_new_min_damage = (p_power(v_spell) * 2);
		break;
	case 5:
		v_new_min_damage = (p_power(v_spell) * 3);
		break;
	case 6:
		v_new_min_damage = (p_power(v_spell) * 4);
		break;
	default:
		v_new_min_damage = p_power(v_spell);
		break;
	}
	switch (v_max_damage) {
	case 1:
		v_new_max_damage = (p_power(v_spell) + 2);
		break;
	case 2:
		v_new_max_damage = (p_power(v_spell) * 2);
		break;
	case 3:
		v_new_max_damage = ((p_power(v_spell) * 2) + 1);
		break;
	case 4:
		v_new_max_damage = ((p_power(v_spell) * 2) + 2);
		break;
	case 5:
		v_new_max_damage = (p_power(v_spell) * 3);
		break;
	case 6:
		v_new_max_damage = (p_power(v_spell) * 4);
		break;
	case 7:
		v_new_max_damage = (p_power(v_spell) * 6);
		break;
	default:
		v_new_max_damage = p_power(v_spell);
		break;
	}
	v_new_min_damage = ((v_new_min_damage * v_special) * p_get_weaving(-1));
	v_new_max_damage = ((v_new_max_damage * v_special) * p_get_weaving(-1));
	v_schaden = (v_new_min_damage + p_myrand((v_new_max_damage - v_new_min_damage)));
	return v_schaden;
}

static intptr_t p_destroy_boulder(int16_t v_x, int16_t v_y, int16_t v_level) {
	int16_t v_item = 0;
	if (a_labyrinth("destroy_boulder", v_level, v_x, v_y).f_feld == 112) {
		p_sound(38);
		if (!a_laby_item("destroy_boulder", v_x, v_y).f_name[v_level]) {
			v_item = p_get_chance(994);
			p_setitem(v_x, v_y, v_level, v_item, 0, a_item("destroy_boulder", v_item).f_attri1);
		}
		p_cleartile(v_x, v_y, v_level);
	}
	p_delay(g_mydelay);
}

static intptr_t p_destroy_iceblock(int16_t v_x, int16_t v_y, int16_t v_level) {
	int16_t v_floor = 0;
	if (a_labyrinth("destroy_iceblock", v_level, v_x, v_y).f_feld == 80) {
		p_sound(30);
		v_floor = a_labyrinth("destroy_iceblock", v_level, v_x, v_y).f_stat2;
		if (p_get_chance(50)) {
			p_setlaby(v_x, v_y, v_level, 206, 0, v_floor);
		} else {
			p_setlaby(v_x, v_y, v_level, v_floor, 0, 0);
		}
	}
	p_delay(g_mydelay);
}

static intptr_t p_dispelled() {
	int16_t v_disp = 0;
	int16_t v_mon_no = 0;
	v_disp = 0;
	v_mon_no = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number;
	if (p_has_trait2(v_mon_no, 15) == 1 && !p_habich(160)) {
		v_disp = p_get_chance(50);
	}
	return v_disp;
}

static intptr_t p_draw_screen(int8_t v_x_offset, int8_t v_y_offset) {
	int16_t v_bg = 0;
	intptr_t v_okay = 0;
	int16_t v_radius = 0;
	int16_t v_testfeld = 0;
	int16_t v_tile = 0;
	intptr_t v_x = 0;
	intptr_t v_xx = 0;
	intptr_t v_y = 0;
	p_erstelle_matrix(1);
	v_radius = p_radius();
	for (v_y = 1; v_y <= 13; v_y += 1) {
		for (v_x = 1; v_x <= 13; v_x += 1) {
			if (((a_spieler("draw_screen", g_akt_spieler).f_character_x - 7) + v_x) > 0 && ((a_spieler("draw_screen", g_akt_spieler).f_character_y - 7) + v_y) > 0 && (a_matrix("draw_screen", v_x, v_y) <= v_radius || p_istoutdoor() == 1 || p_habich(200) == -1)) {
				v_testfeld = a_labyrinth("draw_screen", a_spieler("draw_screen", g_akt_spieler).f_level, ((a_spieler("draw_screen", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("draw_screen", g_akt_spieler).f_character_y - 7) + v_y)).f_feld;
				a_automap("draw_screen", ((a_spieler("draw_screen", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("draw_screen", g_akt_spieler).f_character_y - 7) + v_y)).f_feld[a_spieler("draw_screen", g_akt_spieler).f_level] = 1;
				if (v_testfeld != 9 && v_testfeld != 67 && v_testfeld != 68 && v_testfeld != 75 && v_testfeld != 6 && v_testfeld != 93 && v_testfeld != 69 && v_testfeld != 62 && v_testfeld != 63) {
					v_tile = a_labyrinth("draw_screen", a_spieler("draw_screen", g_akt_spieler).f_level, ((a_spieler("draw_screen", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("draw_screen", g_akt_spieler).f_character_y - 7) + v_y)).f_feld;
					if (a_fields("draw_screen", v_tile).f_attri_floor) {
						v_bg = a_labyrinth("draw_screen", a_spieler("draw_screen", g_akt_spieler).f_level, ((a_spieler("draw_screen", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("draw_screen", g_akt_spieler).f_character_y - 7) + v_y)).f_stat2;
					} else {
						v_bg = 0;
					}
					p_draw_tile(v_tile, v_x, v_y, v_x_offset, v_y_offset, v_bg);
					if (a_laby_item("draw_screen", ((a_spieler("draw_screen", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("draw_screen", g_akt_spieler).f_character_y - 7) + v_y)).f_name[a_spieler("draw_screen", g_akt_spieler).f_level] > 0) {
						p_draw_item(a_laby_item("draw_screen", ((a_spieler("draw_screen", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("draw_screen", g_akt_spieler).f_character_y - 7) + v_y)).f_name[a_spieler("draw_screen", g_akt_spieler).f_level], v_x, v_y, v_x_offset, v_y_offset);
					}
				}
				for (v_xx = 1; v_xx <= g_nr_of_players; v_xx += 1) {
					if (a_spieler("draw_screen", v_xx).f_creature_typ > 0) {
						if (((a_spieler("draw_screen", g_akt_spieler).f_character_x - 7) + v_x) == a_spieler("draw_screen", v_xx).f_creature_x && ((a_spieler("draw_screen", g_akt_spieler).f_character_y - 7) + v_y) == a_spieler("draw_screen", v_xx).f_creature_y) {
							v_okay = 0;
							if (a_spieler("draw_screen", v_xx).f_status == 1 && a_spieler("draw_screen", v_xx).f_level == a_spieler("draw_screen", g_akt_spieler).f_level) {
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 1 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 256, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 2 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 192, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 3 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 352, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 4 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 384, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 5 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 416, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 6 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 320, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 7 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 224, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 8 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 288, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 9 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 160, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 10 && !v_okay) {
									p_clipsprite(0, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), ((a_spieler("draw_screen", v_xx).f_maennchen * 32) - 32), 32, 32);
									p_displaytransparentsprite(0, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 11 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 96, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 12 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 480, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 13 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 512, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 14 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 544, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 15 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 576, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen", v_xx).f_creature_typ == 16 && !v_okay) {
									p_clipsprite(0, ((a_spieler("draw_screen", v_xx).f_creature_heading * 32) * 2), 608, 32, 32);
									p_displaytransparentsprite(0, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
							}
						}
					}
				}
			}
		}
	}
}

static intptr_t p_draw_screen2(int8_t v_x_offset, int8_t v_y_offset) {
	int16_t v_bg = 0;
	intptr_t v_okay = 0;
	int16_t v_radius = 0;
	int16_t v_testfeld = 0;
	int16_t v_tile = 0;
	intptr_t v_uebermalen = 0;
	int8_t v_x = 0;
	intptr_t v_xx = 0;
	int8_t v_y = 0;
	p_erstelle_matrix(2);
	v_radius = p_radius2();
	for (v_y = 1; v_y <= 13; v_y += 1) {
		for (v_x = 1; v_x <= 13; v_x += 1) {
			if (((a_spieler("draw_screen2", g_akt_spieler).f_creature_x - 7) + v_x) > 0 && ((a_spieler("draw_screen2", g_akt_spieler).f_creature_y - 7) + v_y) > 0 && (a_matrix("draw_screen2", v_x, v_y) <= v_radius || p_istoutdoor() == 1 || p_habich(200) == -1)) {
				a_automap("draw_screen2", ((a_spieler("draw_screen2", g_akt_spieler).f_creature_x - 7) + v_x), ((a_spieler("draw_screen2", g_akt_spieler).f_creature_y - 7) + v_y)).f_feld[a_spieler("draw_screen2", g_akt_spieler).f_level] = 1;
				v_testfeld = a_labyrinth("draw_screen2", a_spieler("draw_screen2", g_akt_spieler).f_level, ((a_spieler("draw_screen2", g_akt_spieler).f_creature_x - 7) + v_x), ((a_spieler("draw_screen2", g_akt_spieler).f_creature_y - 7) + v_y)).f_feld;
				if (v_testfeld != 20 && v_testfeld != 9 && v_testfeld != 67 && v_testfeld != 68 && v_testfeld != 75 && v_testfeld != 6 && v_testfeld != 93 && v_testfeld != 69 && v_testfeld != 62 && v_testfeld != 63) {
					v_tile = a_labyrinth("draw_screen2", a_spieler("draw_screen2", g_akt_spieler).f_level, ((a_spieler("draw_screen2", g_akt_spieler).f_creature_x - 7) + v_x), ((a_spieler("draw_screen2", g_akt_spieler).f_creature_y - 7) + v_y)).f_feld;
					if (a_fields("draw_screen2", v_tile).f_attri_floor) {
						v_bg = a_labyrinth("draw_screen2", a_spieler("draw_screen2", g_akt_spieler).f_level, ((a_spieler("draw_screen2", g_akt_spieler).f_creature_x - 7) + v_x), ((a_spieler("draw_screen2", g_akt_spieler).f_creature_y - 7) + v_y)).f_stat2;
					} else {
						v_bg = 0;
					}
					p_draw_tile(v_tile, v_x, v_y, v_x_offset, v_y_offset, v_bg);
				}
				if (a_laby_item("draw_screen2", ((a_spieler("draw_screen2", g_akt_spieler).f_creature_x - 7) + v_x), ((a_spieler("draw_screen2", g_akt_spieler).f_creature_y - 7) + v_y)).f_name[a_spieler("draw_screen2", g_akt_spieler).f_level] > 0) {
					p_draw_item(a_laby_item("draw_screen2", ((a_spieler("draw_screen2", g_akt_spieler).f_creature_x - 7) + v_x), ((a_spieler("draw_screen2", g_akt_spieler).f_creature_y - 7) + v_y)).f_name[a_spieler("draw_screen2", g_akt_spieler).f_level], v_x, v_y, v_x_offset, v_y_offset);
				}
				for (v_xx = 1; v_xx <= g_nr_of_players; v_xx += 1) {
					if (((a_spieler("draw_screen2", g_akt_spieler).f_creature_x - 7) + v_x) == a_spieler("draw_screen2", v_xx).f_character_x && ((a_spieler("draw_screen2", g_akt_spieler).f_creature_y - 7) + v_y) == a_spieler("draw_screen2", v_xx).f_character_y) {
						if (a_spieler("draw_screen2", v_xx).f_status == 1 && a_spieler("draw_screen2", v_xx).f_level == a_spieler("draw_screen2", g_akt_spieler).f_level) {
							v_okay = 0;
							v_uebermalen = 0;
							if (a_spieler("draw_screen2", v_xx).f_fluch == 23 && !v_okay) {
								v_uebermalen = 1;
								p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_face * 32) * 2), 0, 32, 32);
								p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
								v_okay = 1;
							}
							if (p_hater(86, v_xx) && !v_okay) {
								p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_face * 32) * 2), 128, 32, 32);
								p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
								v_okay = 1;
							}
							if (p_hater(87, v_xx) && !v_okay) {
								v_uebermalen = 1;
								p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_face * 32) * 2), 64, 32, 32);
								p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
								v_okay = 1;
							}
							if (p_hater(88, v_xx) && !v_okay) {
								p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_face * 32) * 2), 96, 32, 32);
								p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
								v_okay = 1;
							}
							if (p_hater(89, v_xx) && !v_okay) {
								v_uebermalen = 1;
								p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_face * 32) * 2), 32, 32, 32);
								p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
								v_okay = 1;
							}
							if (p_hater(90, v_xx) && !v_okay) {
								v_uebermalen = 1;
								p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_face * 32) * 2), 160, 32, 32);
								p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
								v_okay = 1;
							}
							if (!v_okay) {
								v_uebermalen = 1;
								p_clipsprite(0, ((a_spieler("draw_screen2", v_xx).f_face * 32) * 2), ((a_spieler("draw_screen2", v_xx).f_maennchen * 32) - 32), 32, 32);
								p_displaytransparentsprite(0, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
							}
							if (v_uebermalen == 1) {
								if (p_is_waterfield(a_spieler("draw_screen2", v_xx).f_character_x, a_spieler("draw_screen2", v_xx).f_character_y, 0)) {
									p_clipsprite(1, 192, 224, 32, 32);
									p_displaytransparentsprite(1, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
								}
							}
						}
					}
				}
				for (v_xx = 1; v_xx <= g_nr_of_players; v_xx += 1) {
					if (a_spieler("draw_screen2", v_xx).f_creature_typ > 0 && g_akt_spieler != v_xx) {
						if (((a_spieler("draw_screen2", g_akt_spieler).f_creature_x - 7) + v_x) == a_spieler("draw_screen2", v_xx).f_creature_x && ((a_spieler("draw_screen2", g_akt_spieler).f_creature_y - 7) + v_y) == a_spieler("draw_screen2", v_xx).f_creature_y) {
							if (a_spieler("draw_screen2", v_xx).f_status == 1 && a_spieler("draw_screen2", v_xx).f_level == a_spieler("draw_screen2", g_akt_spieler).f_level) {
								v_okay = 0;
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 1 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 256, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 2 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 192, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 3 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 352, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 4 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 384, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 5 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 416, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 6 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 320, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 7 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 224, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 8 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 288, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 9 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 160, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 10 && !v_okay) {
									p_clipsprite(0, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), ((a_spieler("draw_screen2", v_xx).f_maennchen * 32) - 32), 32, 32);
									p_displaytransparentsprite(0, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 11 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 96, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 12 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 480, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 13 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 512, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 14 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 544, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 15 && !v_okay) {
									p_clipsprite(34, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 576, 32, 32);
									p_displaytransparentsprite(34, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
								if (a_spieler("draw_screen2", v_xx).f_creature_typ == 20 && !v_okay) {
									p_clipsprite(0, ((a_spieler("draw_screen2", v_xx).f_creature_heading * 32) * 2), 608, 32, 32);
									p_displaytransparentsprite(0, (((v_x * 32) + v_x_offset) - 64), (((v_y * 32) + v_y_offset) - 64));
									v_okay = 1;
								}
							}
						}
					}
				}
			}
		}
	}
}

static intptr_t p_gang_graben(int16_t v_x, int16_t v_y, int16_t v_wand, int16_t v_hauptgang, int16_t v_mit_was, int16_t v_level) {
	intptr_t v_gangende = 0;
	intptr_t v_hugo = 0;
	intptr_t v_inhalt = 0;
	int16_t v_offen = 0;
	intptr_t v_richtung = 0;
	intptr_t v_stat = 0;
	int16_t v_was = 0;
	intptr_t v_willi = 0;
	int16_t v_worin = 0;
	g_ganglaenge = 0;
	p_setlaby(v_x, v_y, v_level, a_inhalt("gang_graben", v_level), 0, 0);
	v_stat = 1;
	while (v_stat < 3) {
		v_richtung = p_random(100);
		if (v_y > 1 && ((v_stat == 1 && v_richtung < 25) || v_stat == 2)) {
			if (a_labyrinth("gang_graben", v_level, v_x, (v_y - 2)).f_feld == a_mit_was("gang_graben", v_level)) {
				p_setlaby(v_x, (v_y - 1), v_level, a_inhalt("gang_graben", v_level), 0, 0);
				p_setlaby(v_x, (v_y - 2), v_level, a_inhalt("gang_graben", v_level), 0, 0);
				g_ganglaenge = (g_ganglaenge + 2);
				v_y = (v_y - 2);
				v_stat = 0;
			}
		}
		if (v_y < (a_groesse("gang_graben", v_level) - 1) && ((v_stat == 1 && v_richtung >= 25 && v_richtung < 50) || v_stat == 2)) {
			if (a_labyrinth("gang_graben", v_level, v_x, (v_y + 2)).f_feld == a_mit_was("gang_graben", v_level)) {
				p_setlaby(v_x, (v_y + 1), v_level, a_inhalt("gang_graben", v_level), 0, 0);
				p_setlaby(v_x, (v_y + 2), v_level, a_inhalt("gang_graben", v_level), 0, 0);
				g_ganglaenge = (g_ganglaenge + 2);
				v_y = (v_y + 2);
				v_stat = 0;
			}
		}
		if (v_x > 1 && ((v_stat == 1 && v_richtung >= 50 && v_richtung < 75) || v_stat == 2)) {
			if (a_labyrinth("gang_graben", v_level, (v_x - 2), v_y).f_feld == a_mit_was("gang_graben", v_level)) {
				p_setlaby((v_x - 1), v_y, v_level, a_inhalt("gang_graben", v_level), 0, 0);
				p_setlaby((v_x - 2), v_y, v_level, a_inhalt("gang_graben", v_level), 0, 0);
				g_ganglaenge = (g_ganglaenge + 2);
				v_x = (v_x - 2);
				v_stat = 0;
			}
		}
		if (v_x < (a_groesse("gang_graben", v_level) - 1) && ((v_stat == 1 && v_richtung >= 75) || v_stat == 2)) {
			if (a_labyrinth("gang_graben", v_level, (v_x + 2), v_y).f_feld == a_mit_was("gang_graben", v_level)) {
				p_setlaby((v_x + 1), v_y, v_level, a_inhalt("gang_graben", v_level), 0, 0);
				p_setlaby((v_x + 2), v_y, v_level, a_inhalt("gang_graben", v_level), 0, 0);
				g_ganglaenge = (g_ganglaenge + 2);
				v_x = (v_x + 2);
				v_stat = 0;
			}
		}
		v_stat = (v_stat + 1);
	}
	v_gangende = a_inhalt("gang_graben", v_level);
	if (!v_hauptgang) {
		v_willi = p_random(100);
		if (v_willi < 25) {
			if (p_random(100) > 90) {
				v_gangende = 73;
			} else {
				v_gangende = 9;
			}
		}
		if (v_willi >= 25 && v_willi < 50) {
			v_gangende = 6;
			if (p_random(100) > 90) {
				if (p_random(100) > 50) {
					v_gangende = 62;
				} else {
					v_gangende = 63;
				}
			}
			if (p_random(100) < 50 && p_random(99) < v_level && v_level > 9) {
				v_gangende = 97;
			}
		}
		if (v_willi >= 50 && v_willi < 75) {
			v_gangende = a_inhalt("gang_graben", v_level);
		}
		if (v_willi >= 75) {
			if (p_random(100) > 50) {
				v_gangende = 75;
			} else {
				p_setitem(v_x, v_y, v_level, (65 + p_random(9)), 0, 0);
			}
		}
		if (v_gangende == 6 && p_random(99) < (v_level / 3)) {
			v_gangende = 67;
		}
		v_was = 0;
		v_worin = 0;
		if (v_gangende == 6) {
			v_was = p_find1();
		}
		if (v_gangende == 67) {
			v_was = p_finden2();
		}
		if (v_gangende == 62 || v_gangende == 63) {
			if (p_random(100) > 50) {
				v_was = p_find1();
			} else {
				v_was = p_finden2();
			}
		}
		if (v_gangende == 75) {
			if (p_random(100) > 50) {
				if (p_random(100) > 80) {
					v_was = p_finden2();
					if (p_random(100) > 80) {
						v_worin = 68;
					} else {
						v_worin = 67;
					}
				} else {
					v_worin = 6;
					v_was = p_find1();
				}
			} else {
				v_worin = 9;
				v_was = a_inhalt("gang_graben", v_level);
			}
		}
		if (!v_worin) {
			v_worin = v_was;
			v_was = 0;
		}
		p_setlaby(v_x, v_y, v_level, v_gangende, v_worin, v_was);
		if (v_x > 1) {
			if (a_labyrinth("gang_graben", v_level, (v_x - 2), v_y).f_feld == a_inhalt("gang_graben", v_level) && a_labyrinth("gang_graben", v_level, (v_x - 1), v_y).f_feld == v_wand && v_x > 1) {
				v_hugo = p_random(100);
				if (v_hugo < 34) {
					if (!a_sonderlevel("gang_graben", v_level)) {
						p_setlaby((v_x - 1), v_y, v_level, 20, p_random(99), 0);
					}
				}
				if (v_hugo >= 34 && v_hugo < 67) {
					p_setlaby((v_x - 1), v_y, v_level, v_inhalt, 0, 0);
				}
				if (v_hugo >= 67) {
					if (a_sonderlevel("gang_graben", v_level) != 11) {
						v_offen = 0;
						if (p_random(100) > 85) {
							v_offen = 2;
						}
						p_setlaby((v_x - 1), v_y, v_level, 70, v_offen, 0);
					}
				}
			}
		}
		if (a_labyrinth("gang_graben", v_level, (v_x + 2), v_y).f_feld == a_inhalt("gang_graben", v_level) && a_labyrinth("gang_graben", v_level, (v_x + 1), v_y).f_feld == v_wand && v_x < (a_groesse("gang_graben", v_level) - 2)) {
			v_hugo = p_random(100);
			if (v_hugo < 34) {
				if (!a_sonderlevel("gang_graben", v_level)) {
					p_setlaby((v_x + 1), v_y, v_level, 20, p_random(99), 0);
				}
			}
			if (v_hugo >= 34 && v_hugo < 67) {
				p_setlaby((v_x + 1), v_y, v_level, a_inhalt("gang_graben", v_level), 0, 0);
			}
			if (v_hugo >= 67) {
				if (a_sonderlevel("gang_graben", v_level) != 11) {
					v_offen = 0;
					if (p_random(100) > 85) {
						v_offen = 2;
					}
					p_setlaby((v_x + 1), v_y, v_level, 70, v_offen, 0);
				}
			}
		}
		if (v_y > 1) {
			if (a_labyrinth("gang_graben", v_level, v_x, (v_y - 2)).f_feld == a_inhalt("gang_graben", v_level) && a_labyrinth("gang_graben", v_level, v_x, (v_y - 1)).f_feld == v_wand && v_y > 1) {
				v_hugo = p_random(100);
				if (v_hugo < 34) {
					if (!a_sonderlevel("gang_graben", v_level)) {
						p_setlaby(v_x, (v_y - 1), v_level, 20, p_random(99), 0);
					}
				}
				if (v_hugo >= 34 && v_hugo < 67) {
					p_setlaby(v_x, (v_y - 1), v_level, a_inhalt("gang_graben", v_level), 0, 0);
				}
				if (v_hugo >= 67) {
					if (a_sonderlevel("gang_graben", v_level) != 11) {
						v_offen = 0;
						if (p_random(100) > 85) {
							v_offen = 2;
						}
						p_setlaby(v_x, (v_y - 1), v_level, 70, v_offen, 0);
					}
				}
			}
		}
		if (a_labyrinth("gang_graben", v_level, v_x, (v_y + 2)).f_feld == a_inhalt("gang_graben", v_level) && a_labyrinth("gang_graben", v_level, v_x, (v_y + 1)).f_feld == v_wand && v_y < (a_groesse("gang_graben", v_level) - 2)) {
			v_hugo = p_random(100);
			if (v_hugo < 34) {
				p_setlaby(v_x, (v_y + 1), v_level, 20, p_random(99), 0);
			}
			if (v_hugo >= 34 && v_hugo < 67) {
				p_setlaby(v_x, (v_y + 1), v_level, a_inhalt("gang_graben", v_level), 0, 0);
			}
			if (v_hugo >= 67) {
				if (a_sonderlevel("gang_graben", v_level) != 11) {
					v_offen = 0;
					if (p_random(100) > 85) {
						v_offen = 2;
					}
					p_setlaby(v_x, (v_y + 1), v_level, 70, v_offen, 0);
				}
			}
		}
	}
	g_posx = v_x;
	g_posy = v_y;
}

static intptr_t p_gen_laby(int16_t v_akt_level) {
	int16_t v_act_room = 0;
	intptr_t v_anfang = 0;
	intptr_t v_anz_bowlders = 0;
	int16_t v_anz_herbs = 0;
	int16_t v_anz_scrolls = 0;
	intptr_t v_anzahl_fallen = 0;
	int16_t v_anzahl_runen = 0;
	int16_t v_ausg_x = 0;
	int16_t v_ausg_y = 0;
	intptr_t v_ausgang_vorh = 0;
	intptr_t v_breite = 0;
	int32_t v_count = 0;
	int16_t v_counter = 0;
	int16_t v_counter2 = 0;
	int16_t v_erreichbar = 0;
	intptr_t v_falle = 0;
	int16_t v_filler = 0;
	intptr_t v_graben = 0;
	intptr_t v_hugo = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_level = 0;
	intptr_t v_ok = 0;
	int16_t v_special = 0;
	intptr_t v_verdrehen = 0;
	float v_verg1 = 0.0;
	float v_verg2 = 0.0;
	int16_t v_was = 0;
	int16_t v_which = 0;
	int16_t v_willi = 0;
	int16_t v_worin = 0;
	intptr_t v_x = 0;
	intptr_t v_xx = 0;
	intptr_t v_y = 0;
	intptr_t v_yy = 0;
	intptr_t v_zaehler = 0;
	intptr_t v_ziel_x = 0;
	intptr_t v_ziel_y = 0;
	a_groesse("gen_laby", v_akt_level) = (v_akt_level + 10);
	a_eingangx("gen_laby", v_akt_level) = 1;
	a_eingangy("gen_laby", v_akt_level) = 1;
	if (g_test == 1) {
		a_groesse("gen_laby", v_akt_level) = 30;
	}
	v_verg1 = (v_akt_level / 5.0);
	v_verg2 = (intptr_t) (v_akt_level / 5.0);
	if (v_verg1 == v_verg2) {
		if (p_random(5) > 4) {
			g_mit_was_normal = 1;
		} else {
			g_mit_was_normal = (101 + p_random(3));
		}
		if (p_random(6) > 5) {
			g_inhalt_normal = 4;
		} else {
			g_inhalt_normal = (105 + p_random(4));
		}
	}
	a_mit_was("gen_laby", v_akt_level) = g_mit_was_normal;
	a_inhalt("gen_laby", v_akt_level) = g_inhalt_normal;
	a_visionen("gen_laby", v_akt_level) = 1;
	for (v_i = 1; v_i <= 200; v_i += 1) {
		for (v_j = 1; v_j <= 200; v_j += 1) {
			a_automap("gen_laby", v_i, v_j).f_feld[v_akt_level] = 0;
		}
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 1) {
		a_mit_was("gen_laby", v_akt_level) = 165;
		a_inhalt("gen_laby", v_akt_level) = 204;
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 2) {
		a_mit_was("gen_laby", v_akt_level) = 41;
		a_inhalt("gen_laby", v_akt_level) = 110;
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 3) {
		a_mit_was("gen_laby", v_akt_level) = 55;
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 4) {
		a_mit_was("gen_laby", v_akt_level) = 1;
		a_inhalt("gen_laby", v_akt_level) = 89;
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 5) {
		a_mit_was("gen_laby", v_akt_level) = 1;
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 6) {
		a_mit_was("gen_laby", v_akt_level) = 136;
		a_inhalt("gen_laby", v_akt_level) = 94;
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 7) {
		a_mit_was("gen_laby", v_akt_level) = 45;
		a_inhalt("gen_laby", v_akt_level) = 44;
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 8) {
		a_mit_was("gen_laby", v_akt_level) = 88;
		a_inhalt("gen_laby", v_akt_level) = 89;
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 9) {
		a_mit_was("gen_laby", v_akt_level) = 178;
		a_inhalt("gen_laby", v_akt_level) = 177;
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 10) {
		a_mit_was("gen_laby", v_akt_level) = 53;
		a_inhalt("gen_laby", v_akt_level) = 94;
		a_groesse("gen_laby", v_akt_level) = (5 * ((a_groesse("gen_laby", v_akt_level) + 4) / 5));
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 11) {
		a_mit_was("gen_laby", v_akt_level) = 199;
		a_inhalt("gen_laby", v_akt_level) = 198;
	}
	v_special = 0;
	if (a_sonderlevel("gen_laby", v_akt_level) == 9) {
		v_special = 1;
		for (v_i = 1; v_i <= 200; v_i += 1) {
			for (v_j = 1; v_j <= 200; v_j += 1) {
				p_setlaby(v_i, v_j, v_akt_level, a_mit_was("gen_laby", v_akt_level), 0, 0);
			}
		}
		for (v_i = 1; v_i <= (a_groesse("gen_laby", v_akt_level) / 3); v_i += 1) {
			v_zaehler = 1;
			do {
				v_x = p_random(a_groesse("gen_laby", v_akt_level));
				v_y = p_random(a_groesse("gen_laby", v_akt_level));
				v_zaehler = (v_zaehler + 1);
			} while (!((a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_mit_was("gen_laby", v_akt_level) && a_labyrinth("gen_laby", v_akt_level, (v_x + 1), (v_y + 1)).f_feld == a_mit_was("gen_laby", v_akt_level) && a_labyrinth("gen_laby", v_akt_level, (v_x + 1), v_y).f_feld == a_mit_was("gen_laby", v_akt_level) && a_labyrinth("gen_laby", v_akt_level, v_x, (v_y + 1)).f_feld == a_mit_was("gen_laby", v_akt_level)) || v_zaehler > 500));
			if (v_zaehler <= 500) {
				p_setlaby(v_x, v_y, v_akt_level, 182, 0, 0);
				p_setlaby((v_x + 1), v_y, v_akt_level, 183, 0, 0);
				p_setlaby(v_x, (v_y + 1), v_akt_level, 184, 0, 0);
				p_setlaby((v_x + 1), (v_y + 1), v_akt_level, 185, 0, 0);
			}
		}
		for (v_i = 1; v_i <= a_groesse("gen_laby", v_akt_level); v_i += 1) {
			for (v_j = 1; v_j <= a_groesse("gen_laby", v_akt_level); v_j += 1) {
				if (a_labyrinth("gen_laby", v_akt_level, v_i, v_j).f_feld == a_mit_was("gen_laby", v_akt_level)) {
					switch (p_random(13)) {
					case 0:
						p_setlaby(v_i, v_j, v_akt_level, 177, 0, 0);
						break;
					case 1:
						p_setlaby(v_i, v_j, v_akt_level, 177, 0, 0);
						break;
					case 2:
						p_setlaby(v_i, v_j, v_akt_level, 177, 0, 0);
						break;
					case 3:
						p_setlaby(v_i, v_j, v_akt_level, 179, 0, 0);
						break;
					case 4:
						p_setlaby(v_i, v_j, v_akt_level, 179, 0, 0);
						break;
					case 5:
						p_setlaby(v_i, v_j, v_akt_level, 179, 0, 0);
						break;
					case 6:
						p_setlaby(v_i, v_j, v_akt_level, 180, 0, 0);
						break;
					case 7:
						p_setlaby(v_i, v_j, v_akt_level, 180, 0, 0);
						break;
					case 8:
						p_setlaby(v_i, v_j, v_akt_level, 180, 0, 0);
						break;
					case 9:
						p_setlaby(v_i, v_j, v_akt_level, 181, 0, 0);
						break;
					case 10:
						p_setlaby(v_i, v_j, v_akt_level, 181, 0, 0);
						break;
					case 11:
						p_setlaby(v_i, v_j, v_akt_level, 181, 0, 0);
						break;
					case 12:
						p_setlaby(v_i, v_j, v_akt_level, 186, 0, 0);
						break;
					case 13:
						p_setlaby(v_i, v_j, v_akt_level, 187, 0, 0);
						break;
					}
				}
			}
		}
		p_setlaby(1, 1, v_akt_level, 3, 0, 0);
		switch (p_random(2)) {
		case 0:
			v_ziel_x = a_groesse("gen_laby", v_akt_level);
			v_ziel_y = a_groesse("gen_laby", v_akt_level);
			break;
		case 1:
			v_ziel_x = a_groesse("gen_laby", v_akt_level);
			v_ziel_y = 1;
			break;
		case 2:
			v_ziel_x = 1;
			v_ziel_y = a_groesse("gen_laby", v_akt_level);
			break;
		}
		if (!g_test) {
			p_setlaby(v_ziel_x, v_ziel_y, v_akt_level, 2, 0, 0);
		}
		a_ausgangx("gen_laby", v_akt_level) = v_ziel_x;
		a_ausgangy("gen_laby", v_akt_level) = v_ziel_y;
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 10) {
		v_special = 1;
		for (v_i = 0; v_i <= 200; v_i += 1) {
			for (v_j = 0; v_j <= 200; v_j += 1) {
				p_setlaby(v_i, v_j, v_akt_level, 53, 0, 0);
			}
		}
		v_x = 1;
		do {
			v_y = 1;
			do {
				v_willi = p_random(2);
				if (v_x == 1 && v_y == 1) {
					v_willi = 1;
				}
				switch (v_willi) {
				case 0:
					p_setlaby(v_x, v_y, v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 1), v_y, v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 2), v_y, v_akt_level, 49, 0, 0);
					p_setlaby((v_x + 3), v_y, v_akt_level, 94, 0, 0);
					p_setlaby((v_x + 4), v_y, v_akt_level, 50, 0, 0);
					p_setlaby(v_x, (v_y + 1), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 1), (v_y + 1), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 2), (v_y + 1), v_akt_level, 94, 0, 0);
					if (p_random(100) > 70) {
						switch (p_random(2)) {
						case 0:
							p_setlaby((v_x + 3), (v_y + 1), v_akt_level, 191, 0, 0);
							break;
						case 1:
							p_setlaby((v_x + 3), (v_y + 1), v_akt_level, 192, p_find1(), 0);
							break;
						case 2:
							if (p_random(100) < 80) {
								p_setlaby((v_x + 3), (v_y + 1), v_akt_level, 193, p_finden2(), 0);
							} else {
								p_setlaby((v_x + 3), (v_y + 1), v_akt_level, 194, p_finden2(), 0);
							}
							break;
						}
					} else {
						p_setlaby((v_x + 3), (v_y + 1), v_akt_level, 94, 0, 0);
					}
					p_setlaby((v_x + 4), (v_y + 1), v_akt_level, 94, 0, 0);
					p_setlaby(v_x, (v_y + 2), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 1), (v_y + 2), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 2), (v_y + 2), v_akt_level, 51, 0, 0);
					p_setlaby((v_x + 3), (v_y + 2), v_akt_level, 94, 0, 0);
					p_setlaby((v_x + 4), (v_y + 2), v_akt_level, 52, 0, 0);
					p_setlaby(v_x, (v_y + 3), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 1), (v_y + 3), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 2), (v_y + 3), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 3), (v_y + 3), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 4), (v_y + 3), v_akt_level, 53, 0, 0);
					p_setlaby(v_x, (v_y + 4), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 1), (v_y + 4), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 2), (v_y + 4), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 3), (v_y + 4), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 4), (v_y + 4), v_akt_level, 53, 0, 0);
					break;
				case 1:
					p_setlaby(v_x, v_y, v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 1), v_y, v_akt_level, 49, 0, 0);
					p_setlaby((v_x + 2), v_y, v_akt_level, 94, 0, 0);
					p_setlaby((v_x + 3), v_y, v_akt_level, 94, 0, 0);
					p_setlaby((v_x + 4), v_y, v_akt_level, 50, 0, 0);
					p_setlaby(v_x, (v_y + 1), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 1), (v_y + 1), v_akt_level, 94, 0, 0);
					if (p_random(100) > 70) {
						switch (p_random(2)) {
						case 0:
							p_setlaby((v_x + 2), (v_y + 1), v_akt_level, 191, 0, 0);
							break;
						case 1:
							p_setlaby((v_x + 2), (v_y + 1), v_akt_level, 192, p_find1(), 0);
							break;
						case 2:
							if (p_random(100) < 80) {
								p_setlaby((v_x + 2), (v_y + 1), v_akt_level, 193, p_finden2(), 0);
							} else {
								p_setlaby((v_x + 2), (v_y + 1), v_akt_level, 194, p_finden2(), 0);
							}
							break;
						}
					} else {
						p_setlaby((v_x + 2), (v_y + 1), v_akt_level, 94, 0, 0);
					}
					if (p_random(100) > 70) {
						switch (p_random(2)) {
						case 0:
							p_setlaby((v_x + 3), (v_y + 1), v_akt_level, 191, 0, 0);
							break;
						case 1:
							p_setlaby((v_x + 3), (v_y + 1), v_akt_level, 192, p_find1(), 0);
							break;
						case 2:
							if (p_random(100) < 80) {
								p_setlaby((v_x + 3), (v_y + 1), v_akt_level, 193, p_finden2(), 0);
							} else {
								p_setlaby((v_x + 3), (v_y + 1), v_akt_level, 194, p_finden2(), 0);
							}
							break;
						}
					} else {
						p_setlaby((v_x + 3), (v_y + 1), v_akt_level, 94, 0, 0);
					}
					p_setlaby((v_x + 4), (v_y + 1), v_akt_level, 94, 0, 0);
					p_setlaby(v_x, (v_y + 2), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 1), (v_y + 2), v_akt_level, 94, 0, 0);
					if (p_random(100) > 70) {
						switch (p_random(2)) {
						case 0:
							p_setlaby((v_x + 2), (v_y + 2), v_akt_level, 191, 0, 0);
							break;
						case 1:
							p_setlaby((v_x + 2), (v_y + 2), v_akt_level, 192, p_find1(), 0);
							break;
						case 2:
							if (p_random(100) < 80) {
								p_setlaby((v_x + 2), (v_y + 2), v_akt_level, 193, p_finden2(), 0);
							} else {
								p_setlaby((v_x + 2), (v_y + 2), v_akt_level, 194, p_finden2(), 0);
							}
							break;
						}
					} else {
						p_setlaby((v_x + 2), (v_y + 2), v_akt_level, 94, 0, 0);
					}
					if (p_random(100) > 70) {
						switch (p_random(2)) {
						case 0:
							p_setlaby((v_x + 3), (v_y + 2), v_akt_level, 191, 0, 0);
							break;
						case 1:
							p_setlaby((v_x + 3), (v_y + 2), v_akt_level, 192, p_find1(), 0);
							break;
						case 2:
							if (p_random(100) < 80) {
								p_setlaby((v_x + 3), (v_y + 2), v_akt_level, 193, p_finden2(), 0);
							} else {
								p_setlaby((v_x + 3), (v_y + 2), v_akt_level, 194, p_finden2(), 0);
							}
							break;
						}
					} else {
						p_setlaby((v_x + 3), (v_y + 2), v_akt_level, 94, 0, 0);
					}
					p_setlaby((v_x + 4), (v_y + 2), v_akt_level, 94, 0, 0);
					p_setlaby(v_x, (v_y + 3), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 1), (v_y + 3), v_akt_level, 51, 0, 0);
					p_setlaby((v_x + 2), (v_y + 3), v_akt_level, 94, 0, 0);
					p_setlaby((v_x + 3), (v_y + 3), v_akt_level, 94, 0, 0);
					p_setlaby((v_x + 4), (v_y + 3), v_akt_level, 52, 0, 0);
					p_setlaby(v_x, (v_y + 4), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 1), (v_y + 4), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 2), (v_y + 4), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 3), (v_y + 4), v_akt_level, 53, 0, 0);
					p_setlaby((v_x + 4), (v_y + 4), v_akt_level, 53, 0, 0);
					break;
				case 2:
					for (v_xx = 0; v_xx <= 4; v_xx += 1) {
						for (v_yy = 0; v_yy <= 4; v_yy += 1) {
							p_setlaby((v_x + v_xx), (v_y + v_yy), v_akt_level, 53, 0, 0);
						}
					}
					break;
				}
				v_y = (v_y + 5);
			} while (!(v_y > a_groesse("gen_laby", v_akt_level)));
			v_x = (v_x + 5);
		} while (!(v_x > a_groesse("gen_laby", v_akt_level)));
		for (v_i = 1; v_i <= v_akt_level; v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == 53 || v_counter > 500));
			if (v_counter <= 500) {
				switch (p_random(2)) {
				case 0:
					if (p_random(100) < 80) {
						p_setlaby(v_x, v_y, v_akt_level, 161, p_find1(), 0);
					} else {
						p_setlaby(v_x, v_y, v_akt_level, 162, p_finden2(), 0);
					}
					break;
				case 1:
					p_setlaby(v_x, v_y, v_akt_level, 163, 0, 0);
					break;
				case 2:
					p_setlaby(v_x, v_y, v_akt_level, 160, 0, 0);
					break;
				}
			}
		}
		p_setlaby(1, 1, v_akt_level, 3, 0, 0);
		switch (p_random(2)) {
		case 0:
			v_ziel_x = a_groesse("gen_laby", v_akt_level);
			v_ziel_y = a_groesse("gen_laby", v_akt_level);
			break;
		case 1:
			v_ziel_x = a_groesse("gen_laby", v_akt_level);
			v_ziel_y = 1;
			break;
		case 2:
			v_ziel_x = 1;
			v_ziel_y = a_groesse("gen_laby", v_akt_level);
			break;
		}
		p_setlaby(v_ziel_x, v_ziel_y, v_akt_level, 2, 0, 0);
		a_ausgangx("gen_laby", v_akt_level) = v_ziel_x;
		a_ausgangy("gen_laby", v_akt_level) = v_ziel_y;
	}
	if (!v_special) {
		v_count = 0;
		do {
			v_count += 1;
			for (v_i = 1; v_i <= 200; v_i += 1) {
				for (v_j = 1; v_j <= 200; v_j += 1) {
					p_setlaby(v_i, v_j, v_akt_level, a_mit_was("gen_laby", v_akt_level), 0, 0);
				}
			}
			for (v_i = 1; v_i <= 200; v_i += 1) {
				for (v_j = 1; v_j <= 200; v_j += 1) {
					p_setitem(v_i, v_j, v_akt_level, 0, 0, 0);
				}
			}
			p_gang_graben(1, 1, 1, 1, a_mit_was("gen_laby", v_akt_level), v_akt_level);
			v_ok = 1;
			if (g_ganglaenge <= (a_groesse("gen_laby", v_akt_level) * 2)) {
				v_ok = 0;
			} else {
				if (g_test) {
					p_print(p_str(v_count) + ":" + p_str(((int64_t) a_groesse("gen_laby", v_akt_level) / 2)) + " zielX:" + p_str(v_ziel_x) + " zielY:" + p_str(v_ziel_y));
				}
			}
			v_ziel_y = g_posy;
			v_ziel_x = g_posx;
			if (v_ziel_x < (a_groesse("gen_laby", v_akt_level) / 2) && v_ziel_y < (a_groesse("gen_laby", v_akt_level) / 2)) {
				v_ok = 0;
			} else {
				if (g_test) {
					p_print(p_str(v_count) + ":g:" + p_str(g_ganglaenge) + " <= " + p_str(((int64_t) a_groesse("gen_laby", v_akt_level) * 2)) + " zielX:" + p_str(v_ziel_x) + " zielY:" + p_str(v_ziel_y));
				}
			}
		} while (!(v_ok == 1));
		for (v_x = 1; v_x <= (a_groesse("gen_laby", v_akt_level) - 2); v_x += 2) {
			for (v_y = 1; v_y <= (a_groesse("gen_laby", v_akt_level) - 2); v_y += 2) {
				if (a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_mit_was("gen_laby", v_akt_level)) {
					v_graben = 0;
					if (!v_graben && v_y > 1) {
						if (a_labyrinth("gen_laby", v_akt_level, v_x, (v_y - 2)).f_feld == a_inhalt("gen_laby", v_akt_level)) {
							p_setlaby(v_x, (v_y - 1), v_akt_level, a_inhalt("gen_laby", v_akt_level), 0, 0);
							v_graben = 1;
						}
					}
					if (!v_graben && v_x < (a_groesse("gen_laby", v_akt_level) - 2)) {
						if (a_labyrinth("gen_laby", v_akt_level, (v_x + 2), v_y).f_feld == a_inhalt("gen_laby", v_akt_level)) {
							p_setlaby((v_x + 1), v_y, v_akt_level, a_inhalt("gen_laby", v_akt_level), 0, 0);
							v_graben = 1;
						}
					}
					if (!v_graben && v_y < (a_groesse("gen_laby", v_akt_level) - 2)) {
						if (a_labyrinth("gen_laby", v_akt_level, v_x, (v_y + 2)).f_feld == a_inhalt("gen_laby", v_akt_level)) {
							p_setlaby(v_x, (v_y + 1), v_akt_level, a_inhalt("gen_laby", v_akt_level), 0, 0);
							v_graben = 1;
						}
					}
					if (!v_graben && v_x > 1) {
						if (a_labyrinth("gen_laby", v_akt_level, (v_x - 2), v_y).f_feld == a_inhalt("gen_laby", v_akt_level)) {
							p_setlaby((v_x - 1), v_y, v_akt_level, a_inhalt("gen_laby", v_akt_level), 0, 0);
							v_graben = 1;
						}
					}
					if (v_graben == 1) {
						p_gang_graben(v_x, v_y, a_mit_was("gen_laby", v_akt_level), 0, a_mit_was("gen_laby", v_akt_level), v_akt_level);
					}
				}
			}
		}
		p_setlaby(1, 1, v_akt_level, 3, 0, 0);
		p_setlaby(v_ziel_x, v_ziel_y, v_akt_level, 2, 0, 0);
		a_ausgangx("gen_laby", v_akt_level) = v_ziel_x;
		a_ausgangy("gen_laby", v_akt_level) = v_ziel_y;
	}
	for (v_i = 1; v_i <= 200; v_i += 1) {
		for (v_j = 1; v_j <= 200; v_j += 1) {
			if (!a_labyrinth("gen_laby", v_akt_level, v_i, v_j).f_feld) {
				p_setlaby(v_i, v_j, v_akt_level, a_inhalt("gen_laby", v_akt_level), 0, 0);
			}
		}
	}
	if (!a_sonderlevel("gen_laby", v_akt_level)) {
		p_resetlist(ll_room_list);
		for (v_act_room = 1; v_act_room <= p_countlist(ll_room_list); v_act_room += 1) {
			p_nextelement(ll_room_list);
			if (LIST_CURRENT(ll_room_list,struct st_room_type).f_level == v_akt_level) {
				p_setzen(8, 8, v_akt_level, LIST_CURRENT(ll_room_list,struct st_room_type).f_type, LIST_CURRENT(ll_room_list,struct st_room_type).f_nr_in_level);
			}
		}
	}
	if (v_akt_level > 2 && !a_sonderlevel("gen_laby", v_akt_level)) {
		v_anzahl_fallen = ((a_groesse("gen_laby", v_akt_level) / 8) * (a_groesse("gen_laby", v_akt_level) / 8));
		if (a_levelmod("gen_laby", v_akt_level) == 2) {
			v_anzahl_fallen = (v_anzahl_fallen * 3);
		}
		for (v_i = 1; v_i <= v_anzahl_fallen; v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			if (v_akt_level < 10) {
				v_falle = (p_random(2) + 22);
			}
			if (v_akt_level > 9) {
				v_falle = (p_random(8) + 22);
			}
			p_setlaby(v_x, v_y, v_akt_level, v_falle, p_random(99), p_random(99));
		}
	}
	if (v_akt_level > 2 && !a_sonderlevel("gen_laby", v_akt_level)) {
		v_anzahl_runen = p_random((v_akt_level / 2));
		if (g_test == 1) {
			v_anzahl_runen = 5;
		}
		for (v_i = 1; v_i <= v_anzahl_runen; v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			switch (p_random(2)) {
			case 0:
				p_setlaby(v_x, v_y, v_akt_level, 149, p_random(99), a_inhalt("gen_laby", v_akt_level));
				break;
			case 1:
				p_setlaby(v_x, v_y, v_akt_level, 158, p_random(99), a_inhalt("gen_laby", v_akt_level));
				break;
			case 2:
				p_setlaby(v_x, v_y, v_akt_level, 159, p_random(99), a_inhalt("gen_laby", v_akt_level));
				break;
			}
		}
	}
	if (a_sonderlevel("gen_laby", v_akt_level) != 10) {
		for (v_i = 1; v_i <= (v_akt_level + 1); v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			v_willi = (p_random(8) + 1);
			if (p_random(100) > 75) {
				v_filler = 1;
			} else {
				v_filler = 0;
			}
			switch (v_willi) {
			case 1:
				p_setlaby(v_x, v_y, v_akt_level, 5, v_filler, a_inhalt("gen_laby", v_akt_level));
				break;
			case 2:
				p_setlaby(v_x, v_y, v_akt_level, 150, v_filler, a_inhalt("gen_laby", v_akt_level));
				break;
			case 3:
				p_setlaby(v_x, v_y, v_akt_level, 151, v_filler, a_inhalt("gen_laby", v_akt_level));
				break;
			case 4:
				p_setlaby(v_x, v_y, v_akt_level, 152, v_filler, a_inhalt("gen_laby", v_akt_level));
				break;
			case 5:
				p_setlaby(v_x, v_y, v_akt_level, 153, v_filler, a_inhalt("gen_laby", v_akt_level));
				break;
			case 6:
				p_setlaby(v_x, v_y, v_akt_level, 154, v_filler, a_inhalt("gen_laby", v_akt_level));
				break;
			case 7:
				p_setlaby(v_x, v_y, v_akt_level, 155, v_filler, a_inhalt("gen_laby", v_akt_level));
				break;
			case 8:
				p_setlaby(v_x, v_y, v_akt_level, 156, v_filler, a_inhalt("gen_laby", v_akt_level));
				break;
			case 9:
				p_setlaby(v_x, v_y, v_akt_level, 157, v_filler, a_inhalt("gen_laby", v_akt_level));
				break;
			}
		}
	}
	if (a_fluss("gen_laby", v_akt_level) == 1) {
		v_breite = (a_groesse("gen_laby", v_akt_level) / 3);
		if (!p_random(1)) {
			if (v_ziel_x > (v_breite + 2)) {
				v_anfang = (p_random((v_ziel_x - v_breite)) + 1);
				for (v_j = 1; v_j <= a_groesse("gen_laby", v_akt_level); v_j += 1) {
					for (v_i = 1; v_i <= v_breite; v_i += 1) {
						if (p_random(100) < 75) {
							p_setlaby((v_i + v_anfang), v_j, v_akt_level, 53, 0, 0);
						} else {
							p_setlaby((v_i + v_anfang), v_j, v_akt_level, 72, p_wassermonster_random(v_akt_level), 0);
						}
					}
				}
			}
		} else {
			if (v_ziel_y > (v_breite + 2)) {
				v_anfang = (p_random((v_ziel_y - v_breite)) + 1);
				for (v_i = 1; v_i <= a_groesse("gen_laby", v_akt_level); v_i += 1) {
					for (v_j = 1; v_j <= v_breite; v_j += 1) {
						if (p_random(100) < 90) {
							p_setlaby(v_i, (v_j + v_anfang), v_akt_level, 53, 0, 0);
						} else {
							p_setlaby(v_i, (v_j + v_anfang), v_akt_level, 72, p_wassermonster_random(v_akt_level), 0);
						}
					}
				}
			}
		}
	}
	if (a_levelmod("gen_laby", v_akt_level) != 5) {
		v_counter = 1;
		do {
			v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_counter = (v_counter + 1);
		} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
		if (v_counter <= 500) {
			p_setlaby(v_x, v_y, v_akt_level, 8, 3, a_inhalt("gen_laby", v_akt_level));
		}
	}
	if (a_levelmod("gen_laby", v_akt_level) != 6) {
		v_counter = 1;
		do {
			v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_counter = (v_counter + 1);
		} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
		if (v_counter <= 500) {
			p_setlaby(v_x, v_y, v_akt_level, 7, 3, a_inhalt("gen_laby", v_akt_level));
		}
	}
	if (a_sonderlevel("gen_laby", v_akt_level) != 10 && a_sonderlevel("gen_laby", v_akt_level) != 11) {
		v_anz_bowlders = p_random(((v_akt_level / 4) + 1));
		if (v_anz_bowlders > 0 && !a_sonderlevel("gen_laby", v_akt_level)) {
			for (v_i = 1; v_i <= v_anz_bowlders; v_i += 1) {
				v_counter = 1;
				do {
					v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
					v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
					v_counter = (v_counter + 1);
				} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == 1 || v_counter > 500));
				if (v_counter <= 500) {
					p_setlaby(v_x, v_y, v_akt_level, 112, 0, a_inhalt("gen_laby", v_akt_level));
				}
			}
		}
	}
	if (!a_sonderlevel("gen_laby", v_akt_level)) {
		v_anz_scrolls = (p_random((v_akt_level / 4)) + 1);
		for (v_i = 1; v_i <= v_anz_scrolls; v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			if (v_counter <= 500) {
				do {
					v_which = (p_random(183) + 1);
				} while (!(a_spells("gen_laby", v_which).f_duration != -1));
				p_setitem(v_x, v_y, v_akt_level, 38, (3 + p_random(5)), v_which);
			}
		}
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 11) {
		for (v_i = 1; v_i <= ((a_groesse("gen_laby", v_akt_level) * a_groesse("gen_laby", v_akt_level)) / 12); v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			if (v_counter <= 500) {
				p_setlaby(v_x, v_y, v_akt_level, 200, 0, a_inhalt("gen_laby", v_akt_level));
			}
		}
		for (v_i = 1; v_i <= ((a_groesse("gen_laby", v_akt_level) * a_groesse("gen_laby", v_akt_level)) / 12); v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			if (v_counter <= 500) {
				p_setlaby(v_x, v_y, v_akt_level, 201, 0, a_inhalt("gen_laby", v_akt_level));
			}
		}
	}
	if (!a_sonderlevel("gen_laby", v_akt_level)) {
		v_anz_herbs = (p_random((v_akt_level / 2)) + 1);
		for (v_i = 1; v_i <= v_anz_herbs; v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			if (v_counter <= 500) {
				if (p_random(100) > 80) {
					p_setitem(v_x, v_y, v_akt_level, 354, 0, 0);
				} else {
					p_setitem(v_x, v_y, v_akt_level, 353, 0, 0);
				}
			}
		}
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 8) {
		for (v_i = 1; v_i <= a_groesse("gen_laby", v_akt_level); v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			if (v_counter <= 500) {
				p_setlaby(v_x, v_y, v_akt_level, 135, 0, a_inhalt("gen_laby", v_akt_level));
			}
		}
	}
	if (p_random(100) > 80 && a_sonderlevel("gen_laby", v_akt_level) != 10 && a_sonderlevel("gen_laby", v_akt_level) != 11) {
		v_counter = 1;
		do {
			v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_counter = (v_counter + 1);
		} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
		if (v_counter <= 500) {
			if (p_random(100) > 50) {
				v_was = p_finden2();
				if (p_random(100) > 80) {
					v_worin = 68;
				} else {
					v_worin = 67;
				}
			} else {
				if (p_random(100) > 50) {
					v_worin = 6;
					v_was = p_find1();
				} else {
					v_worin = 9;
					v_was = 0;
				}
			}
			p_setlaby(v_x, v_y, v_akt_level, 93, v_worin, v_was);
		}
	}
	if (a_sonderlevel("gen_laby", v_akt_level) != 10 && a_sonderlevel("gen_laby", v_akt_level) != 11 && a_sonderlevel("gen_laby", v_akt_level) != 9 && (v_akt_level > 5 || g_test == 1)) {
		for (v_i = 1; v_i <= (a_groesse("gen_laby", v_akt_level) / 10); v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			if (v_counter <= 500) {
				p_setlaby(v_x, v_y, v_akt_level, 209, 0, 0);
			}
		}
	}
	if (g_test == 1) {
		for (v_i = 1; v_i <= 5; v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			if (v_counter <= 500) {
				p_setlaby(v_x, v_y, v_akt_level, 62, 0, 0);
			}
		}
	}
	if (a_sonderlevel("gen_laby", v_akt_level) != 10 && a_sonderlevel("gen_laby", v_akt_level) != 11 && a_sonderlevel("gen_laby", v_akt_level) != 9 && v_akt_level > 7) {
		for (v_i = 1; v_i <= (p_random((a_groesse("gen_laby", v_akt_level) * 2)) + 1); v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			if (v_counter <= 500) {
				p_setlaby(v_x, v_y, v_akt_level, 208, 0, a_inhalt("gen_laby", v_akt_level));
			}
		}
	}
	if (v_level >= 8) {
		if (p_random(100) > 95) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			if (v_counter <= 500) {
				p_setlaby(v_x, v_y, v_akt_level, 202, 0, a_inhalt("gen_laby", v_akt_level));
			}
		}
	}
	if (a_small_trader("gen_laby", v_akt_level) != -1) {
		v_counter = 1;
		do {
			v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_counter = (v_counter + 1);
		} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
		if (v_counter <= 500) {
			p_selectelement(ll_merchants, a_small_trader("gen_laby", v_akt_level));
			p_setlaby(v_x, v_y, v_akt_level, LIST_CURRENT(ll_merchants,struct st_merch_items).f_face, a_small_trader("gen_laby", v_akt_level), a_inhalt("gen_laby", v_akt_level));
		}
	}
	if (a_levelmod("gen_laby", v_akt_level) == 12) {
		for (v_i = 1; v_i <= ((a_groesse("gen_laby", v_akt_level) * a_groesse("gen_laby", v_akt_level)) / 12); v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			if (v_counter <= 500) {
				p_setlaby(v_x, v_y, v_akt_level, 20, p_random(89), 0);
			}
		}
	}
	if ((((p_random(100) > 40 && v_akt_level > 3) || a_sonderlevel("gen_laby", v_akt_level) == 7) && a_sonderlevel("gen_laby", v_akt_level) != 10) || g_test == 1) {
		v_i = 1;
		if (v_akt_level > 10 && p_random(100) > 50) {
			v_i = (v_i + 1);
		}
		if (v_akt_level > 20 && p_random(100) > 50) {
			v_i = (v_i + 1);
		}
		if (a_sonderlevel("gen_laby", v_akt_level) == 7) {
			v_i = (((intptr_t) a_groesse("gen_laby", v_akt_level) * a_groesse("gen_laby", v_akt_level)) / 12);
		}
		for (v_j = 1; v_j <= v_i; v_j += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			v_counter2 = 1;
			do {
				v_xx = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_yy = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter2 = (v_counter2 + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_xx, v_yy).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter2 > 500));
			if (v_counter <= 500 && v_counter2 <= 500) {
				p_setlaby(v_x, v_y, v_akt_level, 74, v_xx, v_yy);
				p_setlaby(v_xx, v_yy, v_akt_level, 74, v_x, v_y);
			}
		}
	}
	if (a_sonderlevel("gen_laby", v_akt_level) != 10 && a_sonderlevel("gen_laby", v_akt_level) != 9 && a_sonderlevel("gen_laby", v_akt_level) != 2 && a_sonderlevel("gen_laby", v_akt_level) != 7) {
		for (v_i = 1; v_i <= (a_groesse("gen_laby", v_akt_level) / 10); v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			if (v_counter <= 500) {
				p_setlaby(v_x, v_y, v_akt_level, 206, 0, a_inhalt("gen_laby", v_akt_level));
			}
		}
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 4) {
		v_hugo = 122;
		v_counter = 1;
		do {
			v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_counter = (v_counter + 1);
		} while (!((a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) && v_x > (a_groesse("gen_laby", v_akt_level) / 2) && v_y > (a_groesse("gen_laby", v_akt_level) / 2)) || v_counter > 500));
		if (v_counter <= 500) {
			p_setmonster(v_x, v_y, v_akt_level, v_hugo, a_monster("gen_laby", v_hugo).f_nr, a_monster("gen_laby", v_hugo).f_lebenspunkte, v_hugo, 0, 0);
			a_goblinkoenig("gen_laby", v_akt_level) = 1;
		}
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 8) {
		v_hugo = 121;
		v_counter = 1;
		do {
			v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_counter = (v_counter + 1);
		} while (!((a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) && v_x > (a_groesse("gen_laby", v_akt_level) / 2) && v_y > (a_groesse("gen_laby", v_akt_level) / 2)) || v_counter > 500));
		if (v_counter <= 500) {
			p_setmonster(v_x, v_y, v_akt_level, v_hugo, a_monster("gen_laby", v_hugo).f_nr, a_monster("gen_laby", v_hugo).f_lebenspunkte, v_hugo, 0, 0);
			a_spinnenkoenigin("gen_laby", v_akt_level) = 1;
		}
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 3) {
		v_hugo = 123;
		v_counter = 1;
		do {
			v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_counter = (v_counter + 1);
		} while (!((a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) && v_x > (a_groesse("gen_laby", v_akt_level) / 2) && v_y > (a_groesse("gen_laby", v_akt_level) / 2)) || v_counter > 500));
		if (v_counter <= 500) {
			p_setmonster(v_x, v_y, v_akt_level, v_hugo, a_monster("gen_laby", v_hugo).f_nr, a_monster("gen_laby", v_hugo).f_lebenspunkte, v_hugo, 0, 0);
			a_untotenherr("gen_laby", v_akt_level) = 1;
		}
	}
	for (v_i = 1; v_i <= ((a_groesse("gen_laby", v_akt_level) * a_groesse("gen_laby", v_akt_level)) / 12); v_i += 1) {
		if (a_sonderlevel("gen_laby", v_akt_level) == 10) {
			p_wassermonster_setzen(v_akt_level, p_monster_random(v_akt_level, a_sonderlevel("gen_laby", v_akt_level)));
		} else {
			p_monster_setzen(v_akt_level, p_monster_random(v_akt_level, a_sonderlevel("gen_laby", v_akt_level)));
		}
	}
	if (a_levelmod("gen_laby", v_akt_level) == 3) {
		for (v_i = 1; v_i <= ((a_groesse("gen_laby", v_akt_level) * a_groesse("gen_laby", v_akt_level)) / 12); v_i += 1) {
			if (a_sonderlevel("gen_laby", v_akt_level) == 10) {
				p_wassermonster_setzen(v_akt_level, p_monster_random(v_akt_level, a_sonderlevel("gen_laby", v_akt_level)));
			} else {
				p_monster_setzen(v_akt_level, p_monster_random(v_akt_level, a_sonderlevel("gen_laby", v_akt_level)));
			}
		}
	}
	if (a_sonderlevel("gen_laby", v_akt_level) == 1) {
		for (v_i = 1; v_i <= ((a_groesse("gen_laby", v_akt_level) * a_groesse("gen_laby", v_akt_level)) / 12); v_i += 1) {
			v_counter = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_counter = (v_counter + 1);
			} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 500));
			if (v_counter <= 500) {
				p_setlaby(v_x, v_y, v_akt_level, 80, 0, a_inhalt("gen_laby", v_akt_level));
			}
		}
	}
	v_ausgang_vorh = 0;
	if (!g_test) {
		for (v_i = 1; v_i <= a_groesse("gen_laby", v_akt_level); v_i += 1) {
			for (v_j = 1; v_j <= a_groesse("gen_laby", v_akt_level); v_j += 1) {
				if (a_labyrinth("gen_laby", v_akt_level, v_i, v_j).f_feld == 2) {
					v_ausgang_vorh = 1;
				}
			}
		}
	}
	if (!v_ausgang_vorh) {
		v_zaehler = 1;
		do {
			v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_zaehler = (v_zaehler + 1);
		} while (!((a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) && (a_labyrinth("gen_laby", v_akt_level, (v_x + 1), v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || a_labyrinth("gen_laby", v_akt_level, (v_x - 1), v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || a_labyrinth("gen_laby", v_akt_level, v_x, (v_y + 1)).f_feld == a_inhalt("gen_laby", v_akt_level) || a_labyrinth("gen_laby", v_akt_level, v_x, (v_y - 1)).f_feld == a_inhalt("gen_laby", v_akt_level)) && v_x > (a_groesse("gen_laby", v_akt_level) - 6) && v_y > (a_groesse("gen_laby", v_akt_level) - 6)) || v_zaehler > 500));
		a_ausgangx("gen_laby", v_akt_level) = v_x;
		a_ausgangy("gen_laby", v_akt_level) = v_y;
		if (v_zaehler > 500) {
			v_zaehler = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_zaehler = (v_zaehler + 1);
			} while (!((a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) && (a_labyrinth("gen_laby", v_akt_level, (v_x + 1), v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || a_labyrinth("gen_laby", v_akt_level, (v_x - 1), v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || a_labyrinth("gen_laby", v_akt_level, v_x, (v_y + 1)).f_feld == a_inhalt("gen_laby", v_akt_level) || a_labyrinth("gen_laby", v_akt_level, v_x, (v_y - 1)).f_feld == a_inhalt("gen_laby", v_akt_level)) && v_x < 6 && v_y > (a_groesse("gen_laby", v_akt_level) - 6)) || v_zaehler > 500));
			a_ausgangx("gen_laby", v_akt_level) = v_x;
			a_ausgangy("gen_laby", v_akt_level) = v_y;
		}
		if (v_zaehler > 500) {
			v_zaehler = 1;
			do {
				v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
				v_zaehler = (v_zaehler + 1);
			} while (!((a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) && (a_labyrinth("gen_laby", v_akt_level, (v_x + 1), v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || a_labyrinth("gen_laby", v_akt_level, (v_x - 1), v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || a_labyrinth("gen_laby", v_akt_level, v_x, (v_y + 1)).f_feld == a_inhalt("gen_laby", v_akt_level) || a_labyrinth("gen_laby", v_akt_level, v_x, (v_y - 1)).f_feld == a_inhalt("gen_laby", v_akt_level))) || v_zaehler > 2000));
		}
		if (v_zaehler <= 2000) {
			p_setlaby(v_x, v_y, v_akt_level, 2, 0, 0);
			a_ausgangx("gen_laby", v_akt_level) = v_x;
			a_ausgangy("gen_laby", v_akt_level) = v_y;
		} else {
			v_x = (a_groesse("gen_laby", v_akt_level) - 1);
			v_y = (a_groesse("gen_laby", v_akt_level) - 1);
			p_setlaby(v_x, v_y, v_akt_level, 2, 0, 0);
			a_ausgangx("gen_laby", v_akt_level) = v_x;
			a_ausgangy("gen_laby", v_akt_level) = v_y;
		}
	}
	v_erreichbar = 0;
	v_x = a_ausgangx("gen_laby", v_akt_level);
	v_y = a_ausgangy("gen_laby", v_akt_level);
	if ((v_x - 1) >= 1 && a_labyrinth("gen_laby", v_akt_level, (v_x - 1), v_y).f_feld == a_inhalt("gen_laby", v_akt_level)) {
		v_erreichbar = 1;
	}
	if ((v_x + 1) <= a_groesse("gen_laby", v_akt_level) && a_labyrinth("gen_laby", v_akt_level, (v_x + 1), v_y).f_feld == a_inhalt("gen_laby", v_akt_level)) {
		v_erreichbar = 1;
	}
	if ((v_y - 1) >= 1 && a_labyrinth("gen_laby", v_akt_level, v_x, (v_y - 1)).f_feld == a_inhalt("gen_laby", v_akt_level)) {
		v_erreichbar = 1;
	}
	if ((v_y + 1) <= a_groesse("gen_laby", v_akt_level) && a_labyrinth("gen_laby", v_akt_level, v_x, (v_y + 1)).f_feld == a_inhalt("gen_laby", v_akt_level)) {
		v_erreichbar = 1;
	}
	if (!v_erreichbar && a_sonderlevel("gen_laby", v_akt_level) != 10) {
		if ((v_x - 1) >= 1) {
			if (a_labyrinth("gen_laby", v_akt_level, (v_x - 1), v_y).f_feld == a_mit_was("gen_laby", v_akt_level)) {
				p_setlaby((v_x - 1), v_y, v_akt_level, a_inhalt("gen_laby", v_akt_level), 0, 0);
			}
		}
		if ((v_x + 1) <= a_groesse("gen_laby", v_akt_level)) {
			if (a_labyrinth("gen_laby", v_akt_level, (v_x + 1), v_y).f_feld == a_mit_was("gen_laby", v_akt_level)) {
				p_setlaby((v_x + 1), v_y, v_akt_level, a_inhalt("gen_laby", v_akt_level), 0, 0);
			}
		}
		if ((v_y - 1) >= 1) {
			if (a_labyrinth("gen_laby", v_akt_level, v_x, (v_y - 1)).f_feld == a_mit_was("gen_laby", v_akt_level)) {
				p_setlaby(v_x, (v_y - 1), v_akt_level, a_inhalt("gen_laby", v_akt_level), 0, 0);
			}
		}
		if ((v_y + 1) <= a_groesse("gen_laby", v_akt_level)) {
			if (a_labyrinth("gen_laby", v_akt_level, v_x, (v_y + 1)).f_feld == a_mit_was("gen_laby", v_akt_level)) {
				p_setlaby(v_x, (v_y + 1), v_akt_level, a_inhalt("gen_laby", v_akt_level), 0, 0);
			}
		}
	}
	if (a_levelmod("gen_laby", v_akt_level) == 4) {
		for (v_i = 1; v_i <= a_groesse("gen_laby", v_akt_level); v_i += 1) {
			for (v_j = 1; v_j <= a_groesse("gen_laby", v_akt_level); v_j += 1) {
				if (a_labyrinth("gen_laby", v_akt_level, v_i, v_j).f_feld == 2) {
					v_ausg_x = v_i;
					v_ausg_y = v_j;
				}
			}
		}
		if (!p_istmauer(a_labyrinth("gen_laby", v_akt_level, (v_ausg_x - 1), v_ausg_y).f_feld)) {
			p_setlaby((v_ausg_x - 1), v_ausg_y, v_akt_level, 70, 1, 0);
		}
		if (!p_istmauer(a_labyrinth("gen_laby", v_akt_level, (v_ausg_x + 1), v_ausg_y).f_feld)) {
			p_setlaby((v_ausg_x + 1), v_ausg_y, v_akt_level, 70, 1, 0);
		}
		if (!p_istmauer(a_labyrinth("gen_laby", v_akt_level, v_ausg_x, (v_ausg_y - 1)).f_feld)) {
			p_setlaby(v_ausg_x, (v_ausg_y - 1), v_akt_level, 70, 1, 0);
		}
		if (!p_istmauer(a_labyrinth("gen_laby", v_akt_level, v_ausg_x, (v_ausg_y + 1)).f_feld)) {
			p_setlaby(v_ausg_x, (v_ausg_y + 1), v_akt_level, 70, 1, 0);
		}
		v_counter = 1;
		do {
			v_x = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_y = (p_random((a_groesse("gen_laby", v_akt_level) - 3)) + 2);
			v_counter = (v_counter + 1);
		} while (!(a_labyrinth("gen_laby", v_akt_level, v_x, v_y).f_feld == a_inhalt("gen_laby", v_akt_level) || v_counter > 2000));
		if (v_counter <= 2000) {
			p_setlaby(v_x, v_y, v_akt_level, 19, 0, a_inhalt("gen_laby", v_akt_level));
		}
	}
	if (a_levelmod("gen_laby", v_akt_level) == 9) {
		for (v_i = 1; v_i <= a_groesse("gen_laby", v_akt_level); v_i += 1) {
			for (v_j = 1; v_j <= a_groesse("gen_laby", v_akt_level); v_j += 1) {
				if (a_labyrinth("gen_laby", v_akt_level, v_i, v_j).f_feld == 4) {
					p_setlaby(v_i, v_j, v_akt_level, 41, 0, a_inhalt("gen_laby", v_akt_level));
				}
			}
		}
	}
	if (a_levelmod("gen_laby", v_akt_level) == 10) {
		for (v_i = 1; v_i <= a_groesse("gen_laby", v_akt_level); v_i += 1) {
			for (v_j = 1; v_j <= a_groesse("gen_laby", v_akt_level); v_j += 1) {
				if (a_labyrinth("gen_laby", v_akt_level, v_i, v_j).f_feld == 4) {
					p_setlaby(v_i, v_j, v_akt_level, 80, 0, a_inhalt("gen_laby", v_akt_level));
				}
			}
		}
	}
	if (a_levelmod("gen_laby", v_akt_level) == 8) {
		for (v_i = 1; v_i <= a_groesse("gen_laby", v_akt_level); v_i += 1) {
			for (v_j = 1; v_j <= a_groesse("gen_laby", v_akt_level); v_j += 1) {
				if (a_labyrinth("gen_laby", v_akt_level, v_i, v_j).f_feld == a_inhalt("gen_laby", v_akt_level)) {
					p_setlaby(v_i, v_j, v_akt_level, 201, 0, a_inhalt("gen_laby", v_akt_level));
				}
			}
		}
	}
	if (a_sonderlevel("gen_laby", v_akt_level) != 10 && a_sonderlevel("gen_laby", v_akt_level) != 9) {
		v_verdrehen = (p_random(7) + 1);
		switch (v_verdrehen) {
		case 1:
			break;
		case 2:
			p_diagonal(v_akt_level);
			break;
		case 3:
			p_vertikal(v_akt_level);
			break;
		case 4:
			p_diagonal(v_akt_level);
			p_vertikal(v_akt_level);
			break;
		case 5:
			p_horizontal(v_akt_level);
			break;
		case 6:
			p_diagonal(v_akt_level);
			p_horizontal(v_akt_level);
			break;
		case 7:
			p_vertikal(v_akt_level);
			p_horizontal(v_akt_level);
			break;
		case 8:
			p_diagonal(v_akt_level);
			p_vertikal(v_akt_level);
			p_horizontal(v_akt_level);
			break;
		}
	}
}

static intptr_t p_get_player_name() {
	int16_t v_but_x = 0;
	int16_t v_but_y = 0;
	int16_t v_cursor = 0;
	int16_t v_i = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	int16_t v_raus = 0;
	int16_t v_released4 = 0;
	intptr_t v_result = 0;
	int16_t v_skill_count = 0;
	std::string v_title;
	std::string v_tmp_name;
	intptr_t v_tooltip = 0;
	intptr_t v_wohin = 0;
	v_released4 = 0;
	v_raus = 0;
	v_cursor = 0;
	v_tmp_name = "";
	p_clearlist(ll_template_list);
	p_load_templates();
	p_selectelement(ll_template_list, (g_akt_spieler - 1));
	v_tmp_name = LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name;
	v_skill_count = p_count_skills(g_akt_spieler);
	a_sp.dim("sp", 4, 3);
	if (v_skill_count <= 20) {
		a_sp("get_player_name", 0, 0) = 20;
		a_sp("get_player_name", 0, 1) = 1;
		a_sp("get_player_name", 0, 2) = 220;
		a_sp("get_player_name", 1, 0) = 0;
	} else {
		if (v_skill_count <= 40) {
			a_sp("get_player_name", 0, 0) = ((v_skill_count + 1) / 2);
			a_sp("get_player_name", 0, 1) = 1;
			a_sp("get_player_name", 0, 2) = 140;
			a_sp("get_player_name", 1, 0) = 20;
			a_sp("get_player_name", 1, 1) = (a_sp("get_player_name", 0, 0) + 1);
			a_sp("get_player_name", 1, 2) = 340;
			a_sp("get_player_name", 2, 0) = 0;
		} else {
			a_sp("get_player_name", 0, 0) = ((v_skill_count + 2) / 3);
			a_sp("get_player_name", 0, 1) = 1;
			a_sp("get_player_name", 0, 2) = 30;
			a_sp("get_player_name", 1, 0) = ((v_skill_count + 1) / 3);
			a_sp("get_player_name", 1, 1) = (a_sp("get_player_name", 0, 0) + 1);
			a_sp("get_player_name", 1, 2) = 230;
			a_sp("get_player_name", 2, 0) = 20;
			a_sp("get_player_name", 2, 1) = (a_sp("get_player_name", 1, 1) + a_sp("get_player_name", 1, 0));
			a_sp("get_player_name", 2, 2) = 430;
			a_sp("get_player_name", 3, 0) = 0;
		}
	}
	do {
		p_fenster(0);
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			g_mmouse_x = p_mousex();
			g_mmouse_y = p_mousey();
			v_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
		}
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(0);
		v_tooltip = 0;
		v_but_x = 530;
		v_but_y = 423;
		if (g_mmouse_x >= v_but_x && g_mmouse_x <= (v_but_x + 88) && g_mmouse_y >= v_but_y && g_mmouse_y <= (v_but_y + 33)) {
			v_tooltip = 907;
			p_clipsprite(3, 0, 0, 87, 32);
			if (v_mmouse_links == 1) {
				v_raus = 2;
			}
		} else {
			p_clipsprite(3, 0, 31, 87, 32);
		}
		p_displaytransparentsprite(3, v_but_x, v_but_y);
		v_but_x = 572;
		v_but_y = 350;
		if (g_mmouse_x >= v_but_x && g_mmouse_x <= (v_but_x + 45) && g_mmouse_y >= v_but_y && g_mmouse_y <= (v_but_y + 29)) {
			p_clipsprite(5, 1, 1, 45, 29);
			if (v_mmouse_links == 1) {
				v_tmp_name = "";
			}
		} else {
			p_clipsprite(5, 1, 32, 45, 29);
		}
		p_displaytransparentsprite(5, v_but_x, v_but_y);
		p_clipsprite(0, 128, ((a_spieler("get_player_name", g_akt_spieler).f_maennchen * 32) - 32), 32, 32);
		p_displaytransparentsprite(0, 220, 385);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		v_i = 0;
		while (a_sp("get_player_name", v_i, 0)) {
			p_draw_skill_list(g_akt_spieler, a_sp("get_player_name", v_i, 2), 80, a_sp("get_player_name", v_i, 0), a_sp("get_player_name", v_i, 1));
			v_i += 1;
		}
		p_frontcolor(p_rgb(255, 255, 255));
		v_title = a_message_text("get_player_name", 245, (1 + g_language)) + " " + a_message_text("get_player_name", 113, (1 + g_language)) + " " + p_str(g_akt_spieler);
		p_drawtext((320 - (p_textwidth(v_title) / 2)), 25, v_title, -1, 0);
		if (v_tooltip) {
			p_drawtext(30, 430, a_message_text("get_player_name", v_tooltip, (1 + g_language)), -1, 0);
		}
		v_but_x = 260;
		v_but_y = 392;
		v_tmp_name = p_keyboard_string(v_tmp_name, 0);
		if (p_len(v_tmp_name) > 25) {
			v_tmp_name = p_mid(v_tmp_name, 1, 25);
		}
		p_drawtext(v_but_x, v_but_y, v_tmp_name, -1, 0);
		v_cursor = ((v_cursor + 1) % 32);
		if (v_cursor < 16) {
			p_line((v_but_x + p_textwidth(v_tmp_name)), v_but_y, 0, 15, -1);
		}
		p_read_joystick();
		if (p_keyboardpushed(13)) {
			if (v_released4 == 1) {
				v_released4 = 2;
			}
		} else {
			if (!v_released4) {
				v_released4 = 1;
			}
			if (v_released4 == 2) {
				v_raus = 2;
				v_released4 = 0;
			}
		}
		p_stopdrawing();
		p_draw_mousepointer(g_mmouse_x, g_mmouse_y);
		p_delay(15);
		p_flipbuffers(1);
	} while (!v_raus);
	if (v_raus == 2) {
		a_spieler("get_player_name", g_akt_spieler).f_name = v_tmp_name;
		LIST_CURRENT(ll_template_list,struct st_char_tpl).f_name = v_tmp_name;
		p_save_templates();
	}
	p_clearlist(ll_template_list);
	while (p_keyboardpushed(27) || p_keyboardpushed(13) || a_jb("get_player_name", 1) || a_jb("get_player_name", 2) || v_mmouse_rechts || v_mmouse_links) {
		p_examinekeyboard();
		p_read_joystick();
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			v_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
		}
		p_delay(15);
	}
}

static intptr_t p_gold_finden(int16_t v_anzahl) {
	if (a_spieler("gold_finden", g_akt_spieler).f_fluch != 16) {
		p_nachricht3(6, v_anzahl, 8);
		if (a_skills("gold_finden", 110, g_akt_spieler).f_gewaehlt == 1 && p_get_chance(105) < (600 / p_maxlife())) {
			a_spieler("gold_finden", g_akt_spieler).f_maxlifepoints = (a_spieler("gold_finden", g_akt_spieler).f_maxlifepoints + 1);
			p_message(326, 6);
		}
		p_gold_finden2(v_anzahl);
	} else {
		p_message(7, 6);
	}
}

static intptr_t p_gold_stack() {
	p_gold_finden((1 + ((p_get_chance(995) * (30 + p_luck())) / 256)));
}

static intptr_t p_hinterlassen(int16_t v_x, int16_t v_y) {
	int16_t v_container = 0;
	int16_t v_freeitem = 0;
	intptr_t v_freetile = 0;
	int16_t v_item = 0;
	int16_t v_mon_no = 0;
	intptr_t v_obje = 0;
	int16_t v_skilldrop = 0;
	int16_t v_tile = 0;
	if (a_skills("hinterlassen", 27, g_akt_spieler).f_gewaehlt == 1) {
		p_gold_finden2(p_min(5, a_spieler("hinterlassen", g_akt_spieler).f_level));
	}
	v_tile = a_labyrinth("hinterlassen", a_spieler("hinterlassen", g_akt_spieler).f_level, v_x, v_y).f_feld;
	v_freetile = 1;
	if (!p_is_floor(v_tile)) {
		v_freetile = 0;
	}
	v_freeitem = 1;
	if (a_laby_item("hinterlassen", v_x, v_y).f_name[a_spieler("hinterlassen", g_akt_spieler).f_level]) {
		v_freeitem = 0;
	}
	v_mon_no = p_getmonster(v_x, v_y, -1);
	v_container = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_container;
	v_item = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_item;
	v_skilldrop = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_skilldrop;
	if (v_item) {
		if (!v_container && v_freeitem) {
			switch (a_item("hinterlassen", v_item).f_qualitaet) {
			case 1:
				p_setitem(v_x, v_y, a_spieler("hinterlassen", g_akt_spieler).f_level, v_obje, 0, p_get_chance(3));
				break;
			case 2:
				p_setitem(v_x, v_y, a_spieler("hinterlassen", g_akt_spieler).f_level, v_obje, a_item("hinterlassen", v_obje).f_attri1, 0);
				break;
			default:
				p_setitem(v_x, v_y, a_spieler("hinterlassen", g_akt_spieler).f_level, v_obje, 0, 0);
				break;
			}
			v_freeitem = 0;
		} else {
			if (v_freetile) {
				p_setlaby(v_x, v_y, a_spieler("hinterlassen", g_akt_spieler).f_level, v_container, v_item, v_tile);
				v_freetile = 0;
			}
		}
	}
	if (p_has_trait2(v_mon_no, 34) && a_skills("hinterlassen", 14, g_akt_spieler).f_gewaehlt == 1 && v_freetile && v_skilldrop < 500) {
		p_setlaby(v_x, v_y, a_spieler("hinterlassen", g_akt_spieler).f_level, 9, 0, v_tile);
		v_freetile = 0;
	}
	if (a_monster("hinterlassen", v_mon_no).f_art == 1 && a_skills("hinterlassen", 13, g_akt_spieler).f_gewaehlt == 1 && v_skilldrop < 500) {
		if (v_skilldrop < 250 && v_freeitem) {
			if (v_skilldrop < 125) {
				p_setitem(v_x, v_y, a_spieler("hinterlassen", g_akt_spieler).f_level, 42, 0, 0);
			} else {
				p_setitem(v_x, v_y, a_spieler("hinterlassen", g_akt_spieler).f_level, 43, 0, 0);
			}
			v_freeitem = 0;
		} else {
			if (v_freetile) {
				p_setlaby(v_x, v_y, a_spieler("hinterlassen", g_akt_spieler).f_level, 9, 0, v_tile);
				v_freetile = 0;
			}
		}
	}
	if (a_monster("hinterlassen", v_mon_no).f_art == 2) {
		if (a_skills("hinterlassen", 15, g_akt_spieler).f_gewaehlt == 1 && v_skilldrop < 600 && v_freetile) {
			p_setlaby(v_x, v_y, a_spieler("hinterlassen", g_akt_spieler).f_level, 9, 0, v_tile);
			v_freetile = 0;
		}
		if (a_skills("hinterlassen", 82, g_akt_spieler).f_gewaehlt == 1 && (v_skilldrop % 100) < 60 && v_freeitem) {
			if ((v_skilldrop % 2)) {
				p_setitem(v_x, v_y, a_spieler("hinterlassen", g_akt_spieler).f_level, 50, 0, 0);
			} else {
				p_setitem(v_x, v_y, a_spieler("hinterlassen", g_akt_spieler).f_level, 167, 0, 0);
			}
			v_freeitem = 0;
		}
	}
	if (a_monster("hinterlassen", v_mon_no).f_art == 1 && a_skills("hinterlassen", 95, g_akt_spieler).f_gewaehlt == 1 && v_freeitem && v_skilldrop >= 900) {
		if ((v_skilldrop % 2)) {
			p_setitem(v_x, v_y, a_spieler("hinterlassen", g_akt_spieler).f_level, 42, 0, 0);
		} else {
			p_setitem(v_x, v_y, a_spieler("hinterlassen", g_akt_spieler).f_level, 43, 0, 0);
		}
		v_freeitem = 0;
	}
	p_remove_monster();
}

static intptr_t p_itemmenue(std::string v_text1, std::string v_text2, std::string v_text3) {
	intptr_t v_i = 0;
	intptr_t v_mouse_l = 0;
	intptr_t v_result = 0;
	intptr_t v_selectdelay = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	a_entry.dim("entry", 8);
	a_entry("itemmenue", 1) = v_text1;
	a_entry("itemmenue", 2) = v_text2;
	a_entry("itemmenue", 3) = v_text3;
	if (a_inventory("itemmenue", g_feld, g_akt_spieler).f_name != 163 && a_inventory("itemmenue", g_feld, g_akt_spieler).f_name != 156 && a_inventory("itemmenue", g_feld, g_akt_spieler).f_name != 254 && a_inventory("itemmenue", g_feld, g_akt_spieler).f_name != 240 && a_inventory("itemmenue", g_feld, g_akt_spieler).f_name != 248 && a_inventory("itemmenue", g_feld, g_akt_spieler).f_name != 186 && a_inventory("itemmenue", g_feld, g_akt_spieler).f_name != 242 && a_inventory("itemmenue", g_feld, g_akt_spieler).f_name != 157) {
		a_entry("itemmenue", 4) = a_message_text("itemmenue", 649, (1 + g_language));
	} else {
		a_entry("itemmenue", 4) = "";
	}
	if (g_first_empty > 0 && a_inventory("itemmenue", g_feld, g_akt_spieler).f_anzahl > 0) {
		a_entry("itemmenue", 5) = a_message_text("itemmenue", 942, (1 + g_language));
	} else {
		a_entry("itemmenue", 5) = "";
	}
	a_entry("itemmenue", 6) = a_message_text("itemmenue", 943, (1 + g_language));
	a_entry("itemmenue", 7) = a_message_text("itemmenue", 704, (1 + g_language));
	if (!g_bewegen) {
		p_examinekeyboard();
		p_read_joystick();
		a_addelaymax("itemmenue", 1) = (v_selectdelay + 50);
		if (g_itemmenue_aktiv == 1) {
			if (p_keyboardpushed(273) || g_jay == -1) {
				if (g_wait_release2 == 1) {
					p_keydelay(1);
					g_wait_release2 = 0;
					g_aktuell = (g_aktuell - 1);
				}
			} else {
				if (p_keyboardpushed(274) || g_jay == 1) {
					if (g_wait_release2 == 1) {
						p_keydelay(1);
						g_wait_release2 = 0;
						g_aktuell = (g_aktuell + 1);
					}
				} else {
					if (p_keyboardpushed(276) || p_keyboardpushed(275) || a_jb("itemmenue", 1)) {
						g_itemmenue_aktiv = 0;
						g_wait_release3 = 0;
						g_aktuell = 1;
					}
				}
			}
		}
		if (g_aktuell < 1) {
			g_aktuell = 1;
		}
		if (g_aktuell > 7) {
			g_aktuell = 7;
		}
	}
	if (!g_no_mouse) {
		v_result = p_examinemouse();
		v_mouse_l = p_mousebutton(1);
	}
	v_x = 400;
	v_y = 200;
	p_describe(g_feld, (v_x - 25), v_y, 25, 375);
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	v_y = (v_y + 40);
	for (v_i = 1; v_i <= 7; v_i += 1) {
		v_y = (v_y + 15);
		if (g_aktuell == v_i && g_itemmenue_aktiv == 1) {
			p_frontcolor(p_rgb(200, 200, 200));
			p_box(367, v_y, 257, p_textheight("Iq"), -1);
		}
		if (a_entry("itemmenue", v_i) != "") {
			if (g_mmouse_x > 400 && g_mmouse_x < 500 && g_mmouse_y > v_y && g_mmouse_y < (v_y + 15) && !g_bewegen) {
				p_frontcolor(p_rgb(1, 1, 255));
				if (v_mouse_l == 1 && g_wait_release3 == 1) {
					g_benutzen = v_i;
					g_wait_release3 = 0;
				}
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			if (g_aktuell == v_i && g_itemmenue_aktiv == 1) {
				p_frontcolor(p_rgb(0, 0, 0));
				if ((p_keyboardpushed(13) || p_keyboardpushed(32) || a_jb("itemmenue", 1)) && g_wait_release3 == 1) {
					g_benutzen = v_i;
					g_wait_release3 = 0;
				}
			}
			if (p_keyboardpushed(a_num_keys("itemmenue", v_i)) && g_wait_release3 == 1) {
				g_benutzen = v_i;
				g_wait_release3 = 0;
			}
			p_drawtext(((v_x - 5) - p_textwidth(p_str(v_i))), v_y, p_str(v_i), -1, 0);
			p_drawtext(v_x, v_y, a_entry("itemmenue", v_i), -1, 0);
		}
	}
	p_stopdrawing();
	if (!g_itemmenue_aktiv && g_wait_release3 == 1 && (p_keyboardpushed(32) || p_keyboardpushed(13) || a_jb("itemmenue", 1))) {
		g_itemmenue_aktiv = 1;
		g_aktuell = 1;
		g_wait_release3 = 0;
	}
	if (g_benutzen == 5) {
		p_split(0);
		g_benutzen = 0;
	}
	if (g_benutzen == 6) {
		g_bew_geg_pos = g_feld;
		g_itemmenue_aktiv = 0;
		g_bewegen = 7;
	}
	if (g_benutzen == 7) {
		p_zerstoeren(g_feld);
		g_itemmenue_aktiv = 0;
		g_benutzen = 0;
	}
}

static intptr_t p_monster_angriff2(int16_t v_x_r, int16_t v_y_r) {
	int16_t v_angriff = 0;
	int16_t v_egon = 0;
	intptr_t v_mon_no = 0;
	intptr_t v_schaden = 0;
	v_angriff = 50;
	v_mon_no = p_getmonster(v_x_r, v_y_r, -1);
	v_egon = (a_monster("monster_angriff2", v_mon_no).f_angriff * 10);
	v_angriff = (v_angriff + v_egon);
	v_angriff = (v_angriff * 10);
	if (v_angriff > 90) {
		v_angriff = 90;
	}
	if (v_angriff < 10) {
		v_angriff = 10;
	}
	if (p_get_chance(100) < v_angriff) {
		v_schaden = (p_myrand2(a_monster("monster_angriff2", v_mon_no).f_staerke) + 1);
		p_creature_schaden(v_schaden, 0, 0, 0);
	} else {
		p_sound(24);
		p_message(291, 3);
	}
}

static intptr_t p_new_highscore(std::string v_last_words) {
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	if (p_createfile(0, g_environment + "/highscores.dat")) {
		for (v_i = 1; v_i <= 30; v_i += 1) {
			p_writestringn(0, a_hscores("new_highscore", v_i).f_version);
			p_writestringn(0, a_hscores("new_highscore", v_i).f_name);
			p_writeword(0, a_hscores("new_highscore", v_i).f_level);
			p_writeword(0, a_hscores("new_highscore", v_i).f_gold);
			p_writeword(0, a_hscores("new_highscore", v_i).f_mks);
			p_writeword(0, a_hscores("new_highscore", v_i).f_punkte);
			p_writeword(0, a_hscores("new_highscore", v_i).f_maennchen);
			p_writestringn(0, a_hscores("new_highscore", v_i).f_anfangszeit);
			p_writestringn(0, a_hscores("new_highscore", v_i).f_endezeit);
			p_writeword(0, a_hscores("new_highscore", v_i).f_maxlifepoints);
			p_writeword(0, a_hscores("new_highscore", v_i).f_maxmana);
			p_writeword(0, a_hscores("new_highscore", v_i).f_attack);
			p_writeword(0, a_hscores("new_highscore", v_i).f_dexterity);
			p_writeword(0, a_hscores("new_highscore", v_i).f_strength);
			p_writeword(0, a_hscores("new_highscore", v_i).f_maxspeed);
			p_writeword(0, a_hscores("new_highscore", v_i).f_perception);
			p_writeword(0, a_hscores("new_highscore", v_i).f_luck_score);
			p_writeword(0, a_hscores("new_highscore", v_i).f_power_score);
			p_writeword(0, a_hscores("new_highscore", v_i).f_circle);
			p_writeword(0, a_hscores("new_highscore", v_i).f_stabteile);
			p_writeword(0, a_hscores("new_highscore", v_i).f_moves);
			p_writeword(0, a_hscores("new_highscore", v_i).f_cause_of_death);
			p_writeword(0, a_hscores("new_highscore", v_i).f_cause_of_death_monster);
			for (v_j = 1; v_j <= 30; v_j += 1) {
				p_writeword(0, a_hscores("new_highscore", v_i).f_skills[v_j]);
			}
		}
		p_closefile(0);
	}
	if (a_spieler("new_highscore", g_akt_spieler).f_maxlevel > 3) {
		p_upload_box(v_last_words);
	}
}

static intptr_t p_objekt(int16_t v_x, int16_t v_y) {
	int16_t v_attri = 0;
	int16_t v_i = 0;
	int16_t v_item = 0;
	int16_t v_item_attri = 0;
	int16_t v_item_status = 0;
	int16_t v_j = 0;
	int16_t v_message = 0;
	int16_t v_name = 0;
	int16_t v_stack_size = 0;
	int16_t v_status = 0;
	int16_t v_take_item = 0;
	int16_t v_unaufmerksam = 0;
	v_unaufmerksam = 0;
	v_take_item = 1;
	v_item = a_laby_item("objekt", v_x, v_y).f_name[a_spieler("objekt", g_akt_spieler).f_level];
	v_item_status = a_laby_item("objekt", v_x, v_y).f_status[a_spieler("objekt", g_akt_spieler).f_level];
	v_item_attri = a_laby_item("objekt", v_x, v_y).f_anzahl[a_spieler("objekt", g_akt_spieler).f_level];
	v_message = 0;
	if (v_item == 150) {
		if (p_gold_finden2(a_laby_item("objekt", v_x, v_y).f_anzahl[a_spieler("objekt", g_akt_spieler).f_level])) {
			return 0;
		} else {
			p_setitem(v_x, v_y, a_spieler("objekt", g_akt_spieler).f_level, 0, 0, 0);
			return 0;
		}
	} else {
		if (v_item == 38) {
			if ((v_item_attri & 256) || (a_learned("objekt", g_akt_spieler, v_item_status) & 512)) {
				v_item_attri = (v_item_attri | 256);
				a_learned("objekt", g_akt_spieler, v_item_status) = (a_learned("objekt", g_akt_spieler, v_item_status) | 512);
				for (v_i = 1; v_i <= 50; v_i += 1) {
					if (a_inventory("objekt", v_i, g_akt_spieler).f_name == v_item && a_inventory("objekt", v_i, g_akt_spieler).f_status == v_item_status) {
						a_inventory("objekt", v_i, g_akt_spieler).f_attri5 = (a_inventory("objekt", v_i, g_akt_spieler).f_attri5 | 256);
					}
				}
			}
			v_message = 310;
		} else {
			if (a_item("objekt", v_item).f_type == 17) {
				if (a_skills("objekt", 126, g_akt_spieler).f_gewaehlt == 1) {
					v_take_item = 0;
					v_unaufmerksam = 1;
				} else {
					if (v_item_status == 1 || (a_mush_known("objekt", (v_item - 65)) & p_pm(0))) {
						v_item_status = 1;
						a_mush_known("objekt", (v_item - 65)) = (a_mush_known("objekt", (v_item - 65)) | p_pm(0));
						for (v_i = 1; v_i <= 50; v_i += 1) {
							if (a_inventory("objekt", v_i, g_akt_spieler).f_name == v_item) {
								a_inventory("objekt", v_i, g_akt_spieler).f_status = 1;
							}
						}
					} else {
						v_message = 10;
					}
				}
			} else {
				if (a_item("objekt", v_item).f_type == 4) {
					if (v_item_status == 1 || !(a_mischen("objekt", (v_item - 75)).f_learned & p_pm(0))) {
						v_item_status = 1;
						a_mischen("objekt", (v_item - 75)).f_learned = (a_mischen("objekt", (v_item - 75)).f_learned | p_pm(0));
						for (v_i = 1; v_i <= 50; v_i += 1) {
							if (a_inventory("objekt", v_i, g_akt_spieler).f_name == v_item) {
								a_inventory("objekt", v_i, g_akt_spieler).f_status = 1;
							}
						}
					} else {
						v_message = 309;
					}
				}
			}
		}
	}
	if (v_unaufmerksam) {
		p_message(221, 6);
	} else {
		v_j = 0;
		do {
			v_j = (v_j + 1);
			v_attri = a_inventory("objekt", v_j, g_akt_spieler).f_attri5;
			v_status = a_inventory("objekt", v_j, g_akt_spieler).f_status;
			v_name = a_inventory("objekt", v_j, g_akt_spieler).f_name;
			if (v_name == v_item && v_attri == v_item_attri) {
				if (a_item("objekt", v_item).f_type == 13) {
					break;
				} else {
					if (!a_inventory("objekt", v_j, g_akt_spieler).f_benutzt && v_status == v_item_status) {
						break;
					}
				}
			}
		} while (!(v_j > 50));
		if (v_j < 50) {
			if (a_item("objekt", v_item).f_type == 13) {
				v_stack_size = a_item("objekt", v_item).f_attri1;
				v_status = (v_status + v_item_status);
				if (v_status > v_stack_size) {
					v_status = (v_status - v_stack_size);
					a_inventory("objekt", v_j, g_akt_spieler).f_anzahl = (a_inventory("objekt", v_j, g_akt_spieler).f_anzahl + 1);
				}
				a_inventory("objekt", v_j, g_akt_spieler).f_status = v_status;
			} else {
				a_inventory("objekt", v_j, g_akt_spieler).f_anzahl = (a_inventory("objekt", v_j, g_akt_spieler).f_anzahl + 1);
			}
		} else {
			v_j = p_backpackspace();
			if (v_j <= 50) {
				a_inventory("objekt", v_j, g_akt_spieler).f_name = v_item;
				a_inventory("objekt", v_j, g_akt_spieler).f_benutzt = 0;
				a_inventory("objekt", v_j, g_akt_spieler).f_status = v_item_status;
				a_inventory("objekt", v_j, g_akt_spieler).f_attri5 = v_item_attri;
			} else {
				v_take_item = 0;
				p_message(428, 6);
			}
		}
		if (v_take_item) {
			p_sound(14);
			p_setitem(v_x, v_y, a_spieler("objekt", g_akt_spieler).f_level, 0, 0, 0);
			if (v_message) {
				p_message(v_message, 5);
			} else {
				p_nachricht2(6, v_item);
			}
			if (!a_skills("objekt", 101, g_akt_spieler).f_gewaehlt) {
				g_aktion = 1;
			}
		}
	}
}

static intptr_t p_select_skills() {
	int16_t v_back_button = 0;
	int16_t v_besch = 0;
	intptr_t v_i = 0;
	intptr_t v_mouse_links = 0;
	intptr_t v_mouse_linksold = 0;
	intptr_t v_mouse_over_deleteall = 0;
	intptr_t v_mouse_over_skills = 0;
	intptr_t v_mouse_rechts = 0;
	intptr_t v_mouse_rechtsold = 0;
	intptr_t v_mouse_released = 0;
	intptr_t v_mouse_right_released = 0;
	intptr_t v_mouse_x = 0;
	int16_t v_mouse_x_old = 0;
	intptr_t v_mouse_y = 0;
	int16_t v_mouse_y_old = 0;
	intptr_t v_mydelay3 = 0;
	intptr_t v_ok_button = 0;
	int16_t v_on_icon = 0;
	int16_t v_pos_aktuell = 0;
	int16_t v_pressed = 0;
	intptr_t v_reloadkeys = 0;
	intptr_t v_result = 0;
	int16_t v_wait_for_relase = 0;
	intptr_t v_wait_for_release = 0;
	intptr_t v_warten = 0;
	int16_t v_warten2 = 0;
	intptr_t v_wohin = 0;
	int16_t v_zw_skill = 0;
	int16_t v_zw_x = 0;
	int16_t v_zw_y = 0;
	v_mydelay3 = 0;
	v_ok_button = 0;
	v_pos_aktuell = -1;
	v_warten2 = 0;
	p_lock_unique();
	if (!g_no_mouse) {
		v_result = p_examinemouse();
		v_mouse_x_old = p_mousex();
		v_mouse_y_old = p_mousey();
	}
	if (p_keyboardpushed(13)) {
		v_wait_for_release = 1;
	} else {
		v_wait_for_release = 0;
	}
	do {
		p_fenster(0);
		p_read_joystick();
		p_examinekeyboard();
		if (p_keyboardpushed(27)) {
			if (!g_released) {
				v_result = p_releasemouse(1);
				g_released = 1;
				p_delay(g_mydelay);
			} else {
				v_result = p_releasemouse(0);
				g_released = 0;
				p_delay(g_mydelay);
			}
		}
		if (p_keyboardpushed(275) || g_jax == 1) {
			v_besch = 2;
			if (v_warten2 <= 0 || !v_reloadkeys) {
				v_reloadkeys = 1;
				if ((v_pos_aktuell + 27) < 184) {
					v_pos_aktuell = (v_pos_aktuell + 27);
					v_warten2 = 5;
				}
			}
		}
		if (p_keyboardpushed(276) || g_jax == -1) {
			v_besch = 2;
			if (v_warten2 <= 0 || !v_reloadkeys) {
				v_reloadkeys = 1;
				if ((v_pos_aktuell - 27) >= 0) {
					v_pos_aktuell = (v_pos_aktuell - 27);
					v_warten2 = 5;
				}
			}
		}
		if (p_keyboardpushed(274) || g_jay == 1) {
			v_besch = 2;
			if (v_warten2 <= 0 || !v_reloadkeys) {
				v_reloadkeys = 1;
				if ((v_pos_aktuell + 1) < 184) {
					v_pos_aktuell = (v_pos_aktuell + 1);
					v_warten2 = 5;
				}
			}
		}
		if (p_keyboardpushed(273) || g_jay == -1) {
			v_besch = 2;
			if (v_warten2 <= 0 || !v_reloadkeys) {
				v_reloadkeys = 1;
				if ((v_pos_aktuell - 1) >= 1) {
					v_pos_aktuell = (v_pos_aktuell - 1);
					v_warten2 = 5;
				} else {
					v_pos_aktuell = 1;
				}
			}
		}
		if (v_warten2 > 0) {
			v_warten2 = (v_warten2 - 1);
		}
		if (v_pos_aktuell > 143) {
			v_pos_aktuell = 143;
		}
		if (v_reloadkeys == 1) {
			if (g_currentstyp) {
				if (v_pos_aktuell < a_skilltyp_offset("select_skills", g_currentstyp)) {
					v_pos_aktuell = a_skilltyp_offset("select_skills", g_currentstyp);
				}
				if (v_pos_aktuell > (a_skilltyp_offset("select_skills", g_currentstyp) + a_skilltyp_range("select_skills", g_currentstyp))) {
					v_pos_aktuell = (a_skilltyp_offset("select_skills", g_currentstyp) + a_skilltyp_range("select_skills", g_currentstyp));
				}
			}
			if (v_pos_aktuell > ((27 * (g_skills_menu + 1)) + 12)) {
				g_skills_menu = (g_skills_menu + 1);
			}
			if (v_pos_aktuell < (27 * (g_skills_menu - 1))) {
				g_skills_menu = (g_skills_menu - 1);
			}
			if (g_skills_menu < 1) {
				g_skills_menu = 1;
			}
			a_skilltyp_offset("select_skills", 2) = (a_skilltyp_offset("select_skills", 1) + a_skilltyp_range("select_skills", 1));
			if (g_skills_menu > 5) {
				g_skills_menu = 5;
			}
		}
		if (v_reloadkeys == 1 && !p_keyboardpushed(273) && !p_keyboardpushed(274) && !p_keyboardpushed(276) && !p_keyboardpushed(275)) {
			v_reloadkeys = 0;
		}
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			v_mouse_x = p_mousex();
			v_mouse_y = p_mousey();
			v_mouse_linksold = v_mouse_links;
			v_mouse_links = p_mousebutton(1);
			if (v_mouse_linksold == 1 && !v_mouse_links) {
				v_mouse_released = 1;
			} else {
				v_mouse_released = 0;
			}
			v_mouse_rechtsold = v_mouse_rechts;
			v_mouse_rechts = p_mousebutton(2);
		}
		if (v_mouse_rechtsold == 1 && !v_mouse_rechts) {
			v_mouse_right_released = 1;
		} else {
			v_mouse_right_released = 0;
		}
		g_spalte = 0;
		g_zeile = 0;
		if (v_mouse_x_old != v_mouse_x || v_mouse_y_old != v_mouse_y) {
			v_besch = 1;
			v_mouse_x_old = v_mouse_x;
			v_mouse_y_old = v_mouse_y;
		}
		v_on_icon = 0;
		v_zw_x = v_mouse_x;
		v_zw_y = v_mouse_y;
		v_zw_x = (v_zw_x - 20);
		v_zw_y = (v_zw_y - 50);
		if (v_zw_x > -4 && v_zw_x < 160) {
			g_spalte = 1;
			if (v_zw_x < 20) {
				v_on_icon = 1;
			}
			g_zeile = ((v_zw_y / 14) + 1);
		}
		if (v_zw_x > 173 && v_zw_x < 340) {
			g_spalte = 2;
			if (v_zw_x < 197) {
				v_on_icon = 1;
			}
			g_zeile = ((v_zw_y / 14) + 1);
		}
		if (v_zw_x > 353 && v_zw_x < 470) {
			g_spalte = 3;
			if (v_zw_x < 377) {
				v_on_icon = 1;
			}
			g_zeile = ((v_zw_y / 14) + 1);
		}
		if (g_zeile > 27) {
			g_zeile = 27;
		}
		if (g_zeile < 1) {
			g_zeile = 1;
		}
		if (g_spalte > 3) {
			g_spalte = 3;
		}
		if (g_spalte < 1) {
			g_spalte = 1;
		}
		v_pressed = 0;
		if (v_wait_for_release) {
			if (!p_keyboardpushed(13) && !a_jb("select_skills", 1)) {
				v_wait_for_release = 0;
			}
		} else {
			if (p_keyboardpushed(13) || a_jb("select_skills", 1) == 1) {
				v_pressed = 1;
				v_wait_for_release = 1;
			}
		}
		if (v_mouse_x > 485 && v_mouse_x < 500 && v_mouse_y > 410 && v_mouse_y < 425) {
			if (v_mouse_released == 1) {
				p_sound(13);
				p_reset_skills();
			} else {
				v_mouse_over_deleteall = 1;
			}
		} else {
			v_mouse_over_deleteall = 0;
		}
		if (v_mouse_released == 1 || v_pressed == 1) {
			if (v_pressed == 1) {
				v_zw_skill = v_pos_aktuell;
			} else {
				v_zw_skill = ((((g_zeile + a_skilltyp_offset("select_skills", g_currentstyp)) + (g_spalte * 27)) - 27) - g_skillrow_offset);
			}
			if (v_zw_skill < a_skilltyp_offset("select_skills", g_currentstyp) && !v_pressed) {
				v_zw_skill = 0;
				if (g_zeile <= 11 && g_spalte == 1) {
					g_currentstyp = (g_zeile - 2);
				}
				if (g_currentstyp > 0) {
					v_pos_aktuell = a_skilltyp_offset("select_skills", (g_currentstyp - 1));
				}
				if (g_zeile == 1 && g_spalte == 1) {
					g_currentstyp = 0;
				}
			}
			if (v_zw_skill > (a_skilltyp_offset("select_skills", g_currentstyp) + a_skilltyp_range("select_skills", g_currentstyp)) && !v_pressed) {
				v_zw_skill = 0;
			}
			if (!g_currentstyp && !v_pressed) {
				v_zw_skill = (v_zw_skill + (27 * (g_skills_menu - 1)));
			}
			if (v_mouse_x > 20 && v_mouse_y > 50 && v_mouse_x < 400 && v_mouse_y < 430) {
				v_mouse_over_skills = 1;
			} else {
				v_mouse_over_skills = 0;
			}
			if (v_mouse_x > 20 && v_mouse_y > 50 && v_mouse_x < 570 && v_mouse_y < 400) {
				v_mouse_over_skills = 1;
			}
			if (v_mouse_x > 550 && v_mouse_y > 350) {
				v_mouse_over_skills = 0;
			}
			if (v_mouse_x < 200 && v_mouse_y < 176) {
				v_mouse_over_skills = 0;
			}
			if (v_mouse_over_skills || v_pressed == 1) {
				if (a_spieler("select_skills", g_akt_spieler).f_skill_points > 0) {
					if (g_klicking == 1) {
						p_sound(13);
					}
				}
				if (a_skills("select_skills", v_zw_skill, g_akt_spieler).f_kosten < 0) {
					if (!a_skills("select_skills", v_zw_skill, g_akt_spieler).f_gewaehlt) {
						if (!a_skills("select_skills", v_zw_skill, g_akt_spieler).f_gelocked) {
							if ((v_mouse_x < 571 && v_mouse_y < 529) || (v_mouse_x < 571 && v_mouse_y < 350) || v_pressed == 1) {
								p_waehlen(v_zw_skill, 0);
								v_warten = 0;
							}
						}
					} else {
						if (a_spieler("select_skills", g_akt_spieler).f_skill_points > ((0 - a_skills("select_skills", v_zw_skill, g_akt_spieler).f_kosten) - 1)) {
							if ((v_mouse_x < 571 && v_mouse_y < 529) || (v_mouse_x < 571 && v_mouse_y < 350) || v_pressed == 1) {
								p_freigeben(v_zw_skill);
								v_warten = v_mydelay3;
							}
						}
					}
				} else {
					if (!a_skills("select_skills", v_zw_skill, g_akt_spieler).f_gewaehlt) {
						if (!a_skills("select_skills", v_zw_skill, g_akt_spieler).f_gelocked) {
							if (a_spieler("select_skills", g_akt_spieler).f_skill_points > (-1 + a_skills("select_skills", v_zw_skill, g_akt_spieler).f_kosten)) {
								if ((v_mouse_x < 571 && v_mouse_y < 529) || (v_mouse_x < 571 && v_mouse_y < 350) || v_pressed == 1) {
									p_waehlen(v_zw_skill, 0);
									v_warten = 0;
								}
							}
						}
					} else {
						if (!a_skills("select_skills", v_zw_skill, g_akt_spieler).f_gelocked) {
							if ((v_mouse_x < 571 && v_mouse_y < 529) || (v_mouse_x < 571 && v_mouse_y < 350) || v_pressed == 1) {
								p_freigeben(v_zw_skill);
								v_warten = 0;
							}
						}
					}
				}
			}
		}
		if (v_on_icon == 1 && v_besch == 1) {
			v_besch = 3;
		}
		p_draw_skills(g_spalte, g_zeile, v_pos_aktuell, v_besch);
		for (v_i = 0; v_i <= 143; v_i += 1) {
			if (a_skills("select_skills", v_i, g_akt_spieler).f_gelocked == 1 && a_skills("select_skills", v_i, g_akt_spieler).f_gewaehlt == 1) {
				a_skills("select_skills", v_i, g_akt_spieler).f_gewaehlt = 0;
				a_spieler("select_skills", g_akt_spieler).f_skill_points = (a_spieler("select_skills", g_akt_spieler).f_skill_points + a_skills("select_skills", v_i, g_akt_spieler).f_kosten);
			}
		}
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 1));
		p_drawtext(400, 410, a_message_text("select_skills", 93, (1 + g_language)) + ": " + p_str(a_spieler("select_skills", g_akt_spieler).f_skill_points), -1, 0);
		if (v_mouse_over_deleteall) {
			p_drawtext(30, 445, a_message_text("select_skills", 900, (1 + g_language)), 16777215, 0);
		}
		p_stopdrawing();
		if (!v_mouse_over_deleteall) {
			p_clipsprite(36, 32, 32, 14, 14);
			p_displaysprite(36, 485, 410);
		} else {
			p_clipsprite(36, 144, 48, 14, 14);
			p_displaysprite(36, 485, 410);
		}
		if (v_mouse_x > 529 && v_mouse_x < 616 && v_mouse_y > 389 && v_mouse_y < 419) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_drawtext(30, 445, a_message_text("select_skills", 907, (1 + g_language)), 16777215, 0);
			p_stopdrawing();
			p_clipsprite(3, 0, 0, 87, 32);
			v_ok_button = 1;
		} else {
			p_clipsprite(3, 0, 31, 87, 32);
			v_ok_button = 0;
		}
		p_displaytransparentsprite(3, 530, 390);
		v_back_button = 0;
		if (v_mouse_x > 529 && v_mouse_x < 616 && v_mouse_y > 419 && v_mouse_y < 449) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_drawtext(30, 445, a_message_text("select_skills", 906, (1 + g_language)), 16777215, 0);
			p_stopdrawing();
			p_clipsprite(4, 0, 0, 87, 32);
			if (v_mouse_links == 1) {
				v_back_button = 1;
			}
		} else {
			p_clipsprite(4, 0, 31, 87, 32);
		}
		p_displaytransparentsprite(4, 530, 420);
		if (v_mouse_x > 550 && v_mouse_x < 582 && v_mouse_y > 350 && v_mouse_y < 382) {
			p_clipsprite(6, 96, 0, 31, 31);
			if (v_mouse_released == 1) {
				g_skills_menu -= 1;
			}
		} else {
			p_clipsprite(6, 32, 0, 31, 31);
		}
		if (g_skills_menu <= 1) {
			p_clipsprite(6, 288, 0, 31, 31);
		}
		p_displaytransparentsprite(6, 550, 350);
		if (v_mouse_x > 584 && v_mouse_x < 616 && v_mouse_y > 350 && v_mouse_y < 382) {
			p_clipsprite(6, 63, 0, 31, 31);
			if (v_mouse_released == 1) {
				g_skills_menu += 1;
			}
		} else {
			p_clipsprite(6, 0, 0, 31, 31);
		}
		if (g_skills_menu >= 5) {
			p_clipsprite(6, 256, 0, 31, 31);
		}
		p_displaytransparentsprite(6, 584, 350);
		if (g_skills_menu < 1) {
			g_skills_menu = 1;
		}
		if (g_skills_menu > 5) {
			g_skills_menu = 5;
		}
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(572, 334, p_str(g_skills_menu) + "/5", -1, 0);
		p_stopdrawing();
		if (v_mouse_x >= 570 && v_mouse_x <= 615 && v_mouse_y >= 260 && v_mouse_y <= 289) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_drawtext(30, 445, a_message_text("select_skills", 902, (1 + g_language)), 16777215, 0);
			p_stopdrawing();
			p_clipsprite(5, 48, 63, 45, 29);
			if (v_mouse_released == 1) {
				v_mouse_released = 0;
				p_template_load();
			}
		} else {
			p_clipsprite(5, 48, 94, 45, 29);
		}
		p_displaytransparentsprite(5, 570, 260);
		if (p_keyboardpushed(108)) {
			p_template_load();
		}
		if (p_keyboardpushed(115)) {
			p_template_save();
		}
		if (v_mouse_x >= 570 && v_mouse_x <= 615 && v_mouse_y >= 300 && v_mouse_y <= 329) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_drawtext(30, 445, a_message_text("select_skills", 901, (1 + g_language)), 16777215, 0);
			p_stopdrawing();
			p_clipsprite(5, 48, 1, 45, 29);
			if (v_mouse_released == 1) {
				v_mouse_released = 0;
				p_template_save();
			}
		} else {
			p_clipsprite(5, 48, 32, 45, 29);
		}
		p_displaytransparentsprite(5, 570, 300);
		p_draw_mousepointer(v_mouse_x, v_mouse_y);
		p_flipbuffers(1);
		p_examinekeyboard();
		if (p_keyboardpushed(100) || p_keyboardpushed(120) || p_keyboardpushed(101) || p_keyboardpushed(114)) {
			for (v_i = 1; v_i <= 144; v_i += 1) {
				a_skills("select_skills", v_i, g_akt_spieler).f_gewaehlt = 0;
				a_skills("select_skills", v_i, g_akt_spieler).f_gelocked = 0;
			}
			a_spieler("select_skills", g_akt_spieler).f_skill_points = 14;
		}
	} while (!((v_ok_button == 1 && v_mouse_released == 1) || v_back_button == 1 || p_keyboardpushed(32) || a_jb("select_skills", 2) == 1));
	p_delay(g_mydelay);
	if (v_back_button == 1) {
		throw Lv_again;
	}
}

static intptr_t p_show_automap(int16_t v_mode) {
	int16_t v_bg = 0;
	intptr_t v_d_startx = 0;
	intptr_t v_d_starty = 0;
	int16_t v_drag_x = 0;
	int16_t v_drag_y = 0;
	intptr_t v_esc_but_x = 0;
	intptr_t v_esc_but_y = 0;
	int16_t v_get_out = 0;
	int16_t v_map_level = 0;
	intptr_t v_mouse_links = 0;
	intptr_t v_mouse_rechts = 0;
	intptr_t v_mouse_x = 0;
	intptr_t v_mouse_y = 0;
	int16_t v_offset = 0;
	intptr_t v_okay = 0;
	int16_t v_release = 0;
	int16_t v_release2 = 0;
	intptr_t v_released = 0;
	intptr_t v_result = 0;
	int16_t v_tile = 0;
	int16_t v_welches = 0;
	intptr_t v_wohin = 0;
	int8_t v_x = 0;
	int16_t v_x_akt = 0;
	intptr_t v_x_offset = 0;
	intptr_t v_xx = 0;
	int8_t v_y = 0;
	int16_t v_y_akt = 0;
	intptr_t v_y_offset = 0;
	v_offset = 11;
	if (v_mode < 4) {
		g_karten_typ = 2;
	}
	switch (v_mode) {
	case 4:
		g_karten_typ = 1;
		break;
	case 5:
		g_karten_typ = 3;
		break;
	case 6:
		g_karten_typ = 4;
		break;
	case 7:
		g_karten_typ = 5;
		break;
	}
	v_map_level = a_spieler("show_automap", g_akt_spieler).f_level;
	v_get_out = 0;
	v_release = 0;
	v_release2 = 0;
	v_drag_x = 0;
	v_drag_y = 0;
	if (v_mode == 1) {
		v_x_akt = (a_spieler("show_automap", g_akt_spieler).f_creature_x - v_offset);
		v_y_akt = (a_spieler("show_automap", g_akt_spieler).f_creature_y - v_offset);
	} else {
		v_x_akt = (a_spieler("show_automap", g_akt_spieler).f_character_x - v_offset);
		v_y_akt = (a_spieler("show_automap", g_akt_spieler).f_character_y - v_offset);
	}
	v_d_startx = v_x_akt;
	v_d_starty = v_y_akt;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		for (v_y = 1; v_y <= 21; v_y += 1) {
			for (v_x = 1; v_x <= 21; v_x += 1) {
				if ((v_x_akt + v_x) < 1 || (v_y_akt + v_y) < 1 || (v_x_akt + v_x) > a_groesse("show_automap", v_map_level) || (v_y_akt + v_y) > a_groesse("show_automap", v_map_level)) {
					p_draw_small_tile(a_mit_was("show_automap", v_map_level), v_x, v_y, v_x_offset, v_y_offset, v_map_level, 0);
				} else {
					if ((a_automap("show_automap", (v_x + v_x_akt), (v_y + v_y_akt)).f_feld[v_map_level] > 0 && v_mode < 2) || v_mode >= 2) {
						v_tile = a_labyrinth("show_automap", v_map_level, (v_x + v_x_akt), (v_y + v_y_akt)).f_feld;
						v_bg = a_inhalt("show_automap", v_map_level);
						if (a_fields("show_automap", v_tile).f_attri_floor == 1) {
							v_bg = a_labyrinth("show_automap", v_map_level, (v_x + v_x_akt), (v_y + v_y_akt)).f_stat2;
						}
						p_draw_small_tile(v_tile, v_x, v_y, v_x_offset, v_y_offset, v_map_level, v_bg);
						if (v_mode == 3) {
							v_welches = p_getmonster((v_x + v_x_akt), (v_y + v_y_akt), v_map_level);
							if (v_welches > 0) {
								p_draw_small_monster(a_monster("show_automap", v_welches).f_nr, v_x, v_y, v_x_offset, v_y_offset);
							}
						}
						for (v_xx = 1; v_xx <= g_nr_of_players; v_xx += 1) {
							if ((v_x + v_x_akt) == a_spieler("show_automap", v_xx).f_character_x && (v_y + v_y_akt) == a_spieler("show_automap", v_xx).f_character_y) {
								if (a_spieler("show_automap", v_xx).f_status == 1 && a_spieler("show_automap", v_xx).f_level == v_map_level) {
									if (a_spieler("show_automap", v_xx).f_fluch == 23) {
										p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_face * 16) * 2), 0, 16, 16);
										p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
									} else {
										if (p_hater(86, v_xx)) {
											p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_face * 16) * 2), 64, 16, 16);
											p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
										} else {
											if (p_hater(87, v_xx)) {
												p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_face * 16) * 2), 32, 16, 16);
												p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
											} else {
												if (p_hater(88, v_xx)) {
													p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_face * 16) * 2), 48, 16, 16);
													p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
												} else {
													if (p_hater(89, v_xx)) {
														p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_face * 16) * 2), 16, 16, 16);
														p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
													} else {
														if (p_hater(90, v_xx)) {
															p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_face * 16) * 2), 80, 16, 16);
															p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
														} else {
															p_clipsprite(25, ((a_spieler("show_automap", v_xx).f_face * 16) * 2), ((a_spieler("show_automap", v_xx).f_maennchen * 16) - 16), 16, 16);
															p_displaytransparentsprite(25, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
														}
													}
												}
											}
										}
									}
								}
							}
						}
						for (v_xx = 1; v_xx <= g_nr_of_players; v_xx += 1) {
							if (a_spieler("show_automap", v_xx).f_creature_typ > 0) {
								if ((v_x + v_x_akt) == a_spieler("show_automap", v_xx).f_creature_x && (v_y + v_y_akt) == a_spieler("show_automap", v_xx).f_creature_y) {
									if (a_spieler("show_automap", v_xx).f_level == v_map_level && a_spieler("show_automap", v_xx).f_status == 1) {
										if (a_spieler("show_automap", v_xx).f_creature_typ == 1) {
											p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 128, 16, 16);
											p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
										} else {
											if (a_spieler("show_automap", v_xx).f_creature_typ == 2) {
												p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 96, 16, 16);
												p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
											} else {
												if (a_spieler("show_automap", v_xx).f_creature_typ == 3) {
													p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 176, 16, 16);
													p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
												} else {
													if (a_spieler("show_automap", v_xx).f_creature_typ == 4) {
														p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 192, 16, 16);
														p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
													} else {
														if (a_spieler("show_automap", v_xx).f_creature_typ == 5) {
															p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 208, 16, 16);
															p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
														} else {
															if (a_spieler("show_automap", v_xx).f_creature_typ == 6) {
																p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 160, 16, 16);
																p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
															} else {
																if (a_spieler("show_automap", v_xx).f_creature_typ == 7) {
																	p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 112, 16, 16);
																	p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
																} else {
																	if (a_spieler("show_automap", v_xx).f_creature_typ == 8) {
																		p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 144, 16, 16);
																		p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
																	} else {
																		if (a_spieler("show_automap", v_xx).f_creature_typ == 9) {
																			p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 80, 16, 16);
																			p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
																		} else {
																			if (a_spieler("show_automap", v_xx).f_creature_typ == 10) {
																				p_clipsprite(25, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), ((a_spieler("show_automap", v_xx).f_maennchen * 16) - 16), 16, 16);
																				p_displaytransparentsprite(25, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
																			} else {
																				if (a_spieler("show_automap", v_xx).f_creature_typ == 11) {
																					p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 48, 16, 16);
																					p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
																				} else {
																					if (a_spieler("show_automap", v_xx).f_creature_typ == 12) {
																						p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 240, 16, 16);
																						p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
																					} else {
																						if (a_spieler("show_automap", v_xx).f_creature_typ == 13) {
																							p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 256, 16, 16);
																							p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
																						} else {
																							if (a_spieler("show_automap", v_xx).f_creature_typ == 14) {
																								p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 272, 16, 16);
																								p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
																							} else {
																								if (a_spieler("show_automap", v_xx).f_creature_typ == 15) {
																									p_clipsprite(46, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 288, 16, 16);
																									p_displaytransparentsprite(46, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
																								} else {
																									if (a_spieler("show_automap", v_xx).f_creature_typ == 20) {
																										p_clipsprite(25, ((a_spieler("show_automap", v_xx).f_creature_heading * 16) * 2), 304, 16, 16);
																										p_displaytransparentsprite(25, ((v_x * 16) + v_x_offset), ((v_y * 16) + v_y_offset));
																										v_okay = 1;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		p_laby_rahmen(0);
		p_show_logo();
		if (v_mode == 1) {
			p_show_varys2();
		} else {
			p_show_varys(1);
		}
		p_examinekeyboard();
		p_read_joystick();
		if (p_keyboardpushed(109)) {
			if (v_released == 1) {
				v_released = 2;
			}
		} else {
			if (!v_released) {
				v_released = 1;
			}
			if (v_released == 2) {
				v_get_out = 1;
			}
		}
		if (p_keyboardpushed(27)) {
			v_get_out = 1;
		}
		if (p_keyboardpushed(275) || g_jax == 1) {
			v_x_akt = (v_x_akt + 1);
			if (v_x_akt > (a_groesse("show_automap", v_map_level) - 1)) {
				v_x_akt = (a_groesse("show_automap", v_map_level) - 1);
			}
		}
		if (p_keyboardpushed(276) || g_jax == -1) {
			v_x_akt = (v_x_akt - 1);
			if (v_x_akt < -20) {
				v_x_akt = -20;
			}
		}
		if (p_keyboardpushed(273) || g_jay == -1) {
			v_y_akt = (v_y_akt - 1);
			if (v_y_akt < -20) {
				v_y_akt = -20;
			}
		}
		if (p_keyboardpushed(274) || g_jay == 1) {
			v_y_akt = (v_y_akt + 1);
			if (v_y_akt > (a_groesse("show_automap", v_map_level) - 1)) {
				v_y_akt = (a_groesse("show_automap", v_map_level) - 1);
			}
		}
		v_result = p_examinemouse();
		v_mouse_x = p_mousex();
		v_mouse_y = p_mousey();
		v_mouse_links = 0;
		v_mouse_rechts = 0;
		v_mouse_links = p_mousebutton(1);
		v_mouse_rechts = p_mousebutton(2);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(583, 273, "Lv." + p_str(v_map_level), -1, 0);
		p_stopdrawing();
		if (v_mouse_x >= 437 && v_mouse_x <= 469 && v_mouse_y >= 249 && v_mouse_y <= 281) {
			p_clipsprite(6, 96, 0, 31, 31);
			p_displaytransparentsprite(6, 437, 249);
			if (v_mouse_links == 1) {
				v_x_akt = (v_x_akt - 1);
				if (v_x_akt < -20) {
					v_x_akt = -20;
				}
			}
		} else {
			p_clipsprite(6, 32, 0, 31, 31);
			p_displaytransparentsprite(6, 437, 249);
		}
		if (v_mouse_x >= 525 && v_mouse_x <= 557 && v_mouse_y >= 249 && v_mouse_y <= 281) {
			p_clipsprite(6, 63, 0, 31, 31);
			p_displaytransparentsprite(6, 525, 249);
			if (v_mouse_links == 1) {
				v_x_akt = (v_x_akt + 1);
				if (v_x_akt > (a_groesse("show_automap", v_map_level) - 1)) {
					v_x_akt = (a_groesse("show_automap", v_map_level) - 1);
				}
			}
		} else {
			p_clipsprite(6, 0, 0, 31, 31);
			p_displaytransparentsprite(6, 525, 249);
		}
		if (v_mouse_x >= 480 && v_mouse_x <= 512 && v_mouse_y >= 211 && v_mouse_y <= 243) {
			p_clipsprite(6, 192, 0, 31, 31);
			p_displaytransparentsprite(6, 480, 211);
			if (v_mouse_links == 1) {
				v_y_akt = (v_y_akt - 1);
				if (v_y_akt < -20) {
					v_y_akt = -20;
				}
			}
		} else {
			p_clipsprite(6, 128, 0, 31, 31);
			p_displaytransparentsprite(6, 480, 211);
		}
		if (v_mouse_x > 480 && v_mouse_x < 512 && v_mouse_y > 295 && v_mouse_y < 327) {
			p_clipsprite(6, 224, 0, 31, 31);
			p_displaytransparentsprite(6, 480, 295);
			if (v_mouse_links == 1) {
				v_y_akt = (v_y_akt + 1);
				if (v_y_akt > (a_groesse("show_automap", v_map_level) - 1)) {
					v_y_akt = (a_groesse("show_automap", v_map_level) - 1);
				}
			}
		} else {
			p_clipsprite(6, 160, 0, 31, 31);
			p_displaytransparentsprite(6, 480, 295);
		}
		if (v_mode < 3) {
			if (v_mouse_x >= 593 && v_mouse_x <= 625 && v_mouse_y >= 290 && v_mouse_y <= 322) {
				p_clipsprite(6, 192, 0, 32, 31);
				p_displaytransparentsprite(6, 593, 290);
				if (v_mouse_links == 1 && !v_release2) {
					if (v_map_level > 1) {
						v_map_level = (v_map_level - 1);
						v_x_akt = ((a_groesse("show_automap", v_map_level) / 2) - v_offset);
						v_y_akt = ((a_groesse("show_automap", v_map_level) / 2) - v_offset);
						v_release2 = 1;
					}
				}
			} else {
				p_clipsprite(6, 128, 0, 32, 31);
				p_displaytransparentsprite(6, 593, 290);
			}
			if (!v_release2 && p_keyboardpushed(280)) {
				if (v_map_level > 1) {
					v_map_level = (v_map_level - 1);
					v_x_akt = ((a_groesse("show_automap", v_map_level) / 2) - v_offset);
					v_y_akt = ((a_groesse("show_automap", v_map_level) / 2) - v_offset);
					v_release2 = 1;
				}
			}
			if (v_mouse_x > 593 && v_mouse_x < 625 && v_mouse_y > 320 && v_mouse_y < 352) {
				p_clipsprite(6, 224, 0, 32, 31);
				p_displaytransparentsprite(6, 593, 320);
				if (v_mouse_links == 1 && !v_release2) {
					if (v_map_level < a_spieler("show_automap", g_akt_spieler).f_maxlevel) {
						v_map_level = (v_map_level + 1);
						v_x_akt = ((a_groesse("show_automap", v_map_level) / 2) - v_offset);
						v_y_akt = ((a_groesse("show_automap", v_map_level) / 2) - v_offset);
						v_release2 = 1;
					}
				}
			} else {
				p_clipsprite(6, 160, 0, 32, 31);
				p_displaytransparentsprite(6, 593, 320);
			}
			if (!v_release2 && p_keyboardpushed(281)) {
				if (v_map_level < a_spieler("show_automap", g_akt_spieler).f_maxlevel) {
					v_map_level = (v_map_level + 1);
					v_x_akt = ((a_groesse("show_automap", v_map_level) / 2) - v_offset);
					v_y_akt = ((a_groesse("show_automap", v_map_level) / 2) - v_offset);
					v_release2 = 1;
				}
			}
			if (v_release2 == 1 && !(p_keyboardpushed(281) || p_keyboardpushed(280) || v_mouse_links)) {
				v_release2 = 0;
			}
		}
		if (v_mouse_x > 480 && v_mouse_x < 512 && v_mouse_y > 250 && v_mouse_y < 282) {
			p_clipsprite(6, 32, 32, 29, 32);
			p_displaytransparentsprite(6, 480, 250);
			if (v_mouse_links == 1) {
				if (v_mode == 1) {
					v_x_akt = (a_spieler("show_automap", g_akt_spieler).f_creature_x - v_offset);
					v_y_akt = (a_spieler("show_automap", g_akt_spieler).f_creature_y - v_offset);
				} else {
					v_x_akt = (a_spieler("show_automap", g_akt_spieler).f_character_x - v_offset);
					v_y_akt = (a_spieler("show_automap", g_akt_spieler).f_character_y - v_offset);
				}
				v_map_level = a_spieler("show_automap", g_akt_spieler).f_level;
			}
		} else {
			p_clipsprite(6, 0, 32, 29, 32);
			p_displaytransparentsprite(6, 480, 250);
		}
		if (v_mouse_x > 15 && v_mouse_x < 350 && v_mouse_y > 15 && v_mouse_y < 350) {
			if (v_mouse_links) {
				if (v_drag_x) {
					v_x_akt = (v_d_startx + ((v_drag_x - v_mouse_x) / 16));
					if (v_x_akt < -20) {
						v_x_akt = -20;
					}
					if (v_x_akt > (a_groesse("show_automap", v_map_level) - 1)) {
						v_x_akt = (a_groesse("show_automap", v_map_level) - 1);
					}
					v_y_akt = (v_d_starty + ((v_drag_y - v_mouse_y) / 16));
					if (v_y_akt < -20) {
						v_y_akt = -20;
					}
					if (v_y_akt > (a_groesse("show_automap", v_map_level) - 1)) {
						v_y_akt = (a_groesse("show_automap", v_map_level) - 1);
					}
				} else {
					v_drag_x = v_mouse_x;
					v_drag_y = v_mouse_y;
					v_d_startx = v_x_akt;
					v_d_starty = v_y_akt;
				}
			} else {
				v_drag_x = 0;
			}
		} else {
			v_drag_x = 0;
		}
		v_esc_but_x = 593;
		v_esc_but_y = 183;
		if (v_mouse_x >= v_esc_but_x && v_mouse_x <= (v_esc_but_x + 32) && v_mouse_y >= v_esc_but_y && v_mouse_y <= (v_esc_but_y + 32)) {
			p_clipsprite(6, 96, 32, 31, 31);
			if (v_mouse_links == 1) {
				v_get_out = 1;
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, v_esc_but_x, v_esc_but_y);
		if (v_mouse_rechts == 1) {
			v_get_out = 2;
		}
		if (v_get_out == 2 && !v_mouse_rechts) {
			v_get_out = 1;
		}
		p_draw_mousepointer(v_mouse_x, v_mouse_y);
		p_flipbuffers(1);
		p_delay(g_mydelay3);
	} while (!(v_get_out == 1));
}

static intptr_t p_show_buttons2() {
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_nr_of_players = 0;
	intptr_t v_ok_button = 0;
	intptr_t v_result = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	intptr_t v_zw_bild = 0;
	v_x = 378;
	v_y = 373;
	v_result = p_examinemouse();
	g_mmouse_x = p_mousex();
	g_mmouse_y = p_mousey();
	g_mmouse_links = p_mousebutton(1);
	v_mmouse_rechts = p_mousebutton(2);
	p_examinekeyboard();
	p_clipsprite(7, 0, 0, 256, 96);
	p_displaysprite(7, (v_x - 12), (v_y - 5));
	if (g_flaschen == 1) {
		if (g_mmouse_x > 375 && g_mmouse_x < 404 && g_mmouse_y > 105 && g_mmouse_y < 154) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(247, 36, 61));
			p_drawtext(375, 325, p_str(p_creature_lebenspunkte()) + "/" + p_str(p_creature_max_lebenspunkte()), -1, 0);
			p_stopdrawing();
		}
	}
	if (p_keyboardpushed(120)) {
		a_spieler("show_buttons2", g_akt_spieler).f_creature_speed = 0;
		p_message(447, 1);
		if (v_nr_of_players == 1) {
			p_delay(500);
		}
	}
	if (g_mmouse_x > v_x && g_mmouse_x < (41 + v_x) && g_mmouse_y > v_y && g_mmouse_y < (40 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons2", 582, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 578, 0, 34, 42);
		p_displaytransparentsprite(2, (v_x - 2), (v_y - 2));
		if (g_mmouse_links == 1) {
			a_spieler("show_buttons2", g_akt_spieler).f_creature_speed = 0;
			p_message(447, 1);
			if (v_nr_of_players == 1) {
				p_delay(500);
			}
		}
	} else {
		p_clipsprite(2, 578, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x - 2), (v_y - 2));
		v_ok_button = 0;
	}
	if (p_keyboardpushed(100)) {
		v_zw_bild = 6;
	}
	if (g_mmouse_x > (80 + v_x) && g_mmouse_x < (121 + v_x) && g_mmouse_y > (50 + v_y) && g_mmouse_y < (90 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 330, 224, 15, -1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons2", 578, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 476, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x + 78), (v_y + 46));
		if (g_mmouse_links == 1) {
			p_creature_info();
		}
	} else {
		p_clipsprite(2, 476, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x + 78), (v_y + 46));
	}
	if (g_mmouse_x > v_x && g_mmouse_x < (41 + v_x) && g_mmouse_y > (50 + v_y) && g_mmouse_y < (90 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons2", 518, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 544, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x - 2), (v_y + 47));
		if (g_mmouse_links == 1) {
			p_show_automap(1);
		}
	} else {
		p_clipsprite(2, 544, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x - 2), (v_y + 47));
	}
	if (p_keyboardpushed(114)) {
		a_spieler("show_buttons2", g_akt_spieler).f_creature_typ = 0;
		a_spieler("show_buttons2", g_akt_spieler).f_creature_lifepoints = 0;
		a_spieler("show_buttons2", g_akt_spieler).f_creature_speed = 0;
		a_spieler("show_buttons2", g_akt_spieler).f_creature_maxspeed = 0;
		p_clipsprite(38, 0, 224, 32, 32);
		p_displaytransparentsprite(38, 160, 160);
		p_sound(p_random(12));
		p_message(667, 1);
	}
	if (g_mmouse_x > (200 + v_x) && g_mmouse_x < (241 + v_x) && g_mmouse_y > (50 + v_y) && g_mmouse_y < (90 + v_y)) {
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(170, 170, 170));
		p_drawtext(430, 330, a_message_text("show_buttons2", 666, (1 + g_language)), -1, 0);
		p_stopdrawing();
		p_clipsprite(2, 646, 1, 34, 42);
		p_displaytransparentsprite(2, (v_x + 196), (v_y + 46));
		if (g_mmouse_links == 1 || p_keyboardpushed(114)) {
			a_spieler("show_buttons2", g_akt_spieler).f_creature_typ = 0;
			a_spieler("show_buttons2", g_akt_spieler).f_creature_lifepoints = 0;
			a_spieler("show_buttons2", g_akt_spieler).f_creature_speed = 0;
			a_spieler("show_buttons2", g_akt_spieler).f_creature_maxspeed = 0;
			p_clipsprite(38, 0, 224, 32, 32);
			p_displaytransparentsprite(38, 160, 160);
			p_sound(p_random(12));
			p_message(667, 1);
		}
	} else {
		p_clipsprite(2, 646, 43, 34, 42);
		p_displaytransparentsprite(2, (v_x + 196), (v_y + 46));
		v_ok_button = 0;
	}
}

static intptr_t p_show_movement(int16_t v_mmouse_x, int16_t v_mmouse_y, int16_t v_force, int16_t v_creature) {
	int16_t v_akt_number = 0;
	int16_t v_count = 0;
	int16_t v_matrix_x = 0;
	int16_t v_matrix_y = 0;
	int16_t v_px = 0;
	int16_t v_py = 0;
	int16_t v_result = 0;
	int16_t v_speed = 0;
	int16_t v_stepnum = 0;
	int8_t v_x = 0;
	intptr_t v_xx = 0;
	int8_t v_y = 0;
	intptr_t v_yy = 0;
	intptr_t v_zaehler = 0;
	if (v_creature) {
		v_speed = a_spieler("show_movement", g_akt_spieler).f_creature_speed;
		v_px = a_spieler("show_movement", g_akt_spieler).f_creature_x;
		v_py = a_spieler("show_movement", g_akt_spieler).f_creature_y;
	} else {
		v_speed = a_spieler("show_movement", g_akt_spieler).f_speed;
		v_px = a_spieler("show_movement", g_akt_spieler).f_character_x;
		v_py = a_spieler("show_movement", g_akt_spieler).f_character_y;
	}
	v_matrix_x = 0;
	v_matrix_y = 0;
	g_matrix_pos_x = 0;
	g_matrix_pos_y = 0;
	for (v_matrix_x = 1; v_matrix_x <= 11; v_matrix_x += 1) {
		for (v_matrix_y = 1; v_matrix_y <= 11; v_matrix_y += 1) {
			if (v_mmouse_x >= ((v_matrix_x * 32) - 32) && v_mmouse_x <= (v_matrix_x * 32) && v_mmouse_y >= ((v_matrix_y * 32) - 32) && v_mmouse_y <= (v_matrix_y * 32)) {
				g_matrix_pos_x = v_matrix_x;
				g_matrix_pos_y = v_matrix_y;
			}
		}
	}
	for (v_x = 1; v_x <= 13; v_x += 1) {
		for (v_y = 1; v_y <= 13; v_y += 1) {
			a_matrix("show_movement", v_x, v_y) = 9998;
		}
	}
	if (v_creature) {
		p_kopiere_matrix2();
		if (p_istoutdoor() == 1) {
			p_insert_light(8);
		} else {
			p_insert_light((p_radius2() + 1));
		}
	} else {
		p_kopiere_matrix();
		if (p_istoutdoor() == 1 || p_habich(200) == -1) {
			p_insert_light(8);
		} else {
			p_insert_light((p_radius() + 1));
		}
	}
	g_in_sight = 0;
	if (a_matrix("show_movement", (g_matrix_pos_x + 1), (g_matrix_pos_y + 1)) <= (p_radius() + 1) && (g_matrix_pos_x != 6 || g_matrix_pos_y != 6) && (((v_px - 7) + g_matrix_pos_x) + 1) > 0 && (((v_py - 7) + g_matrix_pos_y) + 1) > 0) {
		g_in_sight = 1;
	}
	if (g_mouse_matrix_x_old != g_matrix_pos_x || g_mouse_matrix_y_old != g_matrix_pos_y || v_force == 1) {
		g_mouse_matrix_x_old = g_matrix_pos_x;
		g_mouse_matrix_y_old = g_matrix_pos_y;
		if (g_in_sight == 1 || v_force == 1) {
			p_clearlist(ll_openlist);
			p_clearlist(ll_closedlist);
			p_clearlist(ll_movementlist);
			p_insert_knot(7, 7, 7, 7, 0, 7, 7);
			v_count = 1;
			do {
				v_result = p_astar((g_matrix_pos_x + 1), (g_matrix_pos_y + 1), v_creature);
				v_count += 1;
			} while (!(v_result > 0 || v_count > 1000));
			if (v_result == 1) {
				v_xx = (g_matrix_pos_x + 1);
				v_yy = (g_matrix_pos_y + 1);
				v_zaehler = 1;
				if (p_addelement(ll_movementlist)) {
					LIST_CURRENT(ll_movementlist,struct st_knot2).f_x = (g_matrix_pos_x + 1);
					LIST_CURRENT(ll_movementlist,struct st_knot2).f_y = (g_matrix_pos_y + 1);
				}
				do {
					p_resetlist(ll_closedlist);
					while (p_nextelement(ll_closedlist)) {
						if (LIST_CURRENT(ll_closedlist,struct st_knot).f_x == v_xx && LIST_CURRENT(ll_closedlist,struct st_knot).f_y == v_yy) {
							v_xx = LIST_CURRENT(ll_closedlist,struct st_knot).f_parent_x;
							v_yy = LIST_CURRENT(ll_closedlist,struct st_knot).f_parent_y;
							if (v_xx != 7 || v_yy != 7) {
								if (p_addelement(ll_movementlist)) {
									LIST_CURRENT(ll_movementlist,struct st_knot2).f_x = v_xx;
									LIST_CURRENT(ll_movementlist,struct st_knot2).f_y = v_yy;
								}
							}
							break;
						}
					}
					v_zaehler += 1;
				} while (!((v_xx == 7 && v_yy == 7) || v_zaehler > 100));
			}
		} else {
			p_clearlist(ll_openlist);
			p_clearlist(ll_closedlist);
			p_clearlist(ll_movementlist);
		}
	}
	v_akt_number = 1;
	p_resetlist(ll_movementlist);
	if (v_speed >= p_countlist(ll_movementlist)) {
		while (p_nextelement(ll_movementlist)) {
			v_stepnum = (((v_speed - p_countlist(ll_movementlist)) + v_akt_number) - 1);
			if (v_stepnum < 10) {
				p_clipsprite(71, (v_stepnum * 4), 7, 4, 7);
				p_displaytransparentsprite(71, (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_x * 32) - 64) + 12), (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_y * 32) - 64) + 12));
			} else {
				p_clipsprite(71, ((v_stepnum / 10) * 4), 7, 4, 7);
				p_displaytransparentsprite(71, (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_x * 32) - 66) + 12), (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_y * 32) - 64) + 12));
				p_clipsprite(71, ((v_stepnum % 10) * 4), 7, 4, 7);
				p_displaytransparentsprite(71, (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_x * 32) - 62) + 12), (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_y * 32) - 64) + 12));
			}
			v_akt_number += 1;
		}
	} else {
		v_zaehler = 0;
		while (p_nextelement(ll_movementlist)) {
			if (v_akt_number <= (p_countlist(ll_movementlist) - v_speed)) {
				v_stepnum = (((p_countlist(ll_movementlist) - v_speed) - v_akt_number) + 1);
				if (v_stepnum < 10) {
					p_clipsprite(71, (v_stepnum * 4), 0, 4, 7);
					p_displaytransparentsprite(71, (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_x * 32) - 64) + 12), (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_y * 32) - 64) + 12));
				} else {
					p_clipsprite(71, ((v_stepnum / 10) * 4), 0, 4, 7);
					p_displaytransparentsprite(71, (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_x * 32) - 66) + 12), (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_y * 32) - 64) + 12));
					p_clipsprite(71, ((v_stepnum % 10) * 4), 0, 4, 7);
					p_displaytransparentsprite(71, (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_x * 32) - 62) + 12), (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_y * 32) - 64) + 12));
				}
				v_akt_number += 1;
			} else {
				p_clipsprite(71, (v_zaehler * 4), 7, 4, 7);
				v_zaehler += 1;
				p_displaytransparentsprite(71, (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_x * 32) - 64) + 12), (((LIST_CURRENT(ll_movementlist,struct st_knot2).f_y * 32) - 64) + 12));
			}
		}
	}
}

static intptr_t p_gold(int16_t v_x, int16_t v_y) {
	p_gold_stack();
	if (a_labyrinth("gold", a_spieler("gold", g_akt_spieler).f_level, v_x, v_y).f_feld == 9) {
		p_cleartile(v_x, v_y, -1);
	}
	if (a_labyrinth("gold", a_spieler("gold", g_akt_spieler).f_level, v_x, v_y).f_feld == 160) {
		p_setlaby(v_x, v_y, a_spieler("gold", g_akt_spieler).f_level, 53, 0, 0);
	}
}

static intptr_t p_laby_screen3() {
	intptr_t v_result = 0;
	p_clearscreen(p_rgb(0, 0, 0));
	p_draw_screen2(0, 0);
	p_draw_screen5(0, 0);
	p_draw_screen6(0, 0);
	p_draw_screen8(0, 0);
	p_draw_creature(g_frame, 0);
	p_laby_rahmen(0);
	p_show_logo();
	p_show_varys2();
	p_show_sight2();
	p_show_buttons2();
	v_result = p_examinemouse();
	g_mmouse_x = p_mousex();
	g_mmouse_y = p_mousey();
	g_mmouse_links = p_mousebutton(1);
	g_mmouse_rechts = p_mousebutton(2);
	g_mouse_x_old = g_mmouse_x;
	g_mouse_y_old = g_mmouse_y;
	p_flipbuffers(1);
}

static intptr_t p_laby_screen4() {
	intptr_t v_result = 0;
	p_clearscreen(p_rgb(0, 0, 0));
	p_draw_screen2(0, 0);
	p_draw_screen5(0, 0);
	p_draw_screen6(0, 0);
	p_draw_screen8(0, 0);
	p_draw_creature(g_frame, 0);
	p_laby_rahmen(0);
	p_show_logo();
	p_show_varys2();
	p_show_sight2();
	p_show_buttons2();
	v_result = p_examinemouse();
	g_mmouse_x = p_mousex();
	g_mmouse_y = p_mousey();
	g_mmouse_links = p_mousebutton(1);
	g_mmouse_rechts = p_mousebutton(2);
	g_mouse_x_old = g_mmouse_x;
	g_mouse_y_old = g_mmouse_y;
}

static intptr_t p_restaurieren2() {
	p_show_sight2();
	p_laby_rahmen(0);
	p_show_logo();
	p_show_varys2();
	p_show_buttons2();
}

static intptr_t p_sternchen2(int16_t v_x, int16_t v_y, int16_t v_stern) {
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	for (v_i = 1; v_i <= 20; v_i += 1) {
		a_xsprites("sternchen2", v_i) = 0;
		a_ysprites("sternchen2", v_i) = 0;
		a_fsprites("sternchen2", v_i) = ((0 - v_i) - 1);
		a_rsprites("sternchen2", v_i) = 1;
	}
	for (v_j = 1; v_j <= 30; v_j += 1) {
		p_laby_screen4();
		for (v_i = 1; v_i <= 20; v_i += 1) {
			a_fsprites("sternchen2", v_i) = (a_fsprites("sternchen2", v_i) + a_rsprites("sternchen2", v_i));
			if (a_fsprites("sternchen2", v_i) >= 4) {
				a_rsprites("sternchen2", v_i) = -1;
			}
			if (a_fsprites("sternchen2", v_i) == -1) {
				a_xsprites("sternchen2", v_i) = p_random(32);
				a_ysprites("sternchen2", v_i) = p_random(32);
				a_rsprites("sternchen2", v_i) = 1;
			}
			if (a_fsprites("sternchen2", v_i) >= 0) {
				p_clipsprite(20, (a_fsprites("sternchen2", v_i) + (v_stern * 5)), ((v_stern * 9) - 9), 9, 9);
				p_displaytransparentsprite(20, ((v_x + a_xsprites("sternchen2", v_i)) - 5), ((v_y + a_ysprites("sternchen2", v_i)) - 5));
			}
		}
		p_flipbuffers(1);
		p_delay(50);
	}
}

static intptr_t p_aufstehen3(int16_t v_nr) {
	int16_t v_bg = 0;
	intptr_t v_i = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_result = 0;
	int16_t v_sprite_x = 0;
	int16_t v_sprite_y = 0;
	int16_t v_tile = 0;
	v_nr = (v_nr - 1);
	v_sprite_x = (v_nr % 10);
	v_sprite_y = (v_nr / 10);
	for (v_i = 1; v_i <= 32; v_i += 1) {
		p_laby_screen4();
		v_tile = a_labyrinth("aufstehen3", a_spieler("aufstehen3", g_akt_spieler).f_level, (a_spieler("aufstehen3", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("aufstehen3", g_akt_spieler).f_creature_y + g_ymod)).f_feld;
		if (a_fields("aufstehen3", v_tile).f_attri_floor) {
			v_bg = a_labyrinth("aufstehen3", a_spieler("aufstehen3", g_akt_spieler).f_level, (a_spieler("aufstehen3", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("aufstehen3", g_akt_spieler).f_creature_y + g_ymod)).f_stat2;
		} else {
			v_bg = 0;
		}
		p_draw_tile(v_tile, (7 + g_xmod), (7 + g_ymod), 0, 0, v_bg);
		if (a_laby_item("aufstehen3", a_spieler("aufstehen3", g_akt_spieler).f_creature_x, (a_spieler("aufstehen3", g_akt_spieler).f_creature_y + g_ymod)).f_name[a_spieler("aufstehen3", g_akt_spieler).f_level] > 0) {
			p_draw_item(a_laby_item("aufstehen3", a_spieler("aufstehen3", g_akt_spieler).f_creature_x, (a_spieler("aufstehen3", g_akt_spieler).f_creature_y + g_ymod)).f_name[a_spieler("aufstehen3", g_akt_spieler).f_level], 7, 7, 0, 0);
		}
		p_clipsprite(9, (v_sprite_x * 32), (v_sprite_y * 32), 32, v_i);
		p_displaytransparentsprite(9, (160 + (g_xmod * 32)), ((160 + (g_ymod * 32)) + (32 - v_i)));
		p_restaurieren2();
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		p_delay(30);
	}
}

static intptr_t p_ablegen();
static intptr_t p_advancements();
static intptr_t p_alchemie(int16_t);
static intptr_t p_altar();
static intptr_t p_angriffsspruch(int16_t, int16_t, int16_t, int16_t, int16_t, int16_t);
static intptr_t p_animate_projectile(int16_t);
static intptr_t p_animate_special_success();
static intptr_t p_attack_area(int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t);
static intptr_t p_aufstehen(int16_t);
static intptr_t p_aufstehen2(int16_t);
static intptr_t p_aufsteigen();
static intptr_t p_aufsteigen2();
static intptr_t p_autopickup();
static intptr_t p_banish_monster(int16_t, int16_t);
static intptr_t p_bogen();
static intptr_t p_bogenangriff(int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t);
static intptr_t p_botch(int16_t);
static intptr_t p_cast_it();
static intptr_t p_cast_it2();
static intptr_t p_cast_spell();
static intptr_t p_chest(int16_t, int16_t);
static intptr_t p_creature_bewegen(int16_t);
static intptr_t p_eisschaden(int16_t);
static intptr_t p_ende();
static intptr_t p_equip(int16_t);
static intptr_t p_erfolgreich(int16_t);
static intptr_t p_explodiert(int16_t);
static intptr_t p_faechergrafik();
static intptr_t p_falle();
static intptr_t p_fernattack();
static intptr_t p_fernattack2();
static intptr_t p_fernkampf();
static intptr_t p_fernkampf2();
static intptr_t p_feuerschaden(int16_t);
static intptr_t p_ftasten();
static intptr_t p_hinterhalt(int16_t);
static intptr_t p_in_rucksack(int16_t, int16_t, int16_t);
static intptr_t p_inv();
static intptr_t p_itemtest();
static intptr_t p_kampf();
static intptr_t p_laby_screen();
static intptr_t p_laby_screen2();
static intptr_t p_merchant(int16_t);
static intptr_t p_mischung(int16_t);
static intptr_t p_monster_angriff(int16_t, int16_t);
static intptr_t p_monster_attack_from_distance(int16_t, int16_t);
static intptr_t p_monsterlore();
static intptr_t p_monsterschaden(int16_t);
static intptr_t p_move();
static intptr_t p_mystisch();
static intptr_t p_nach_zug();
static intptr_t p_naechster();
static intptr_t p_neuer_level();
static intptr_t p_on_waterfield();
static intptr_t p_optionen();
static intptr_t p_pilz_essen(int16_t);
static intptr_t p_raum(int16_t);
static intptr_t p_schnelltasten();
static intptr_t p_screen1(int16_t);
static intptr_t p_screen2();
static intptr_t p_select_field(int16_t);
static intptr_t p_shapechange(int16_t, int16_t);
static intptr_t p_show_schnellinventory();
static intptr_t p_sog();
static intptr_t p_sonderfeld();
static intptr_t p_spielerschaden(int16_t, int16_t, int16_t, int16_t, int16_t);
static intptr_t p_spraygrafik(intptr_t, intptr_t);
static intptr_t p_stehlen();
static intptr_t p_sternchen(int16_t, int16_t, int16_t);
static intptr_t p_teacher(int16_t);
static intptr_t p_tot();
static intptr_t p_trinken(int16_t);
static intptr_t p_umwandeln(int16_t);
static intptr_t p_unorequip(int16_t);
static intptr_t p_vor_bewegung();
static intptr_t p_was_last_piece();
static intptr_t p_werfen();
static intptr_t p_wounded_hero();
static intptr_t p_zerstoert(int16_t, int16_t);
static intptr_t p_zwischenbild();

static intptr_t p_ablegen() {
	int32_t v_ablegen = 0;
	int16_t v_attri = 0;
	intptr_t v_destination = 0;
	int16_t v_status = 0;
	if (a_inventory("ablegen", g_feld, g_akt_spieler).f_benutzt == 1) {
		p_un_equip(g_feld);
	}
	if (a_inventory("ablegen", g_feld, g_akt_spieler).f_name != 163 && a_inventory("ablegen", g_feld, g_akt_spieler).f_name != 156 && a_inventory("ablegen", g_feld, g_akt_spieler).f_name != 254 && a_inventory("ablegen", g_feld, g_akt_spieler).f_name != 240 && a_inventory("ablegen", g_feld, g_akt_spieler).f_name != 248 && a_inventory("ablegen", g_feld, g_akt_spieler).f_name != 186 && a_inventory("ablegen", g_feld, g_akt_spieler).f_name != 242 && a_inventory("ablegen", g_feld, g_akt_spieler).f_name != 157) {
		g_spell_x = 0;
		g_spell_y = 0;
		v_destination = p_select_field(0);
		if (v_destination == 1) {
			g_blocked = 0;
			p_los(1);
			if (!g_blocked && !p_istmauer(a_labyrinth("ablegen", a_spieler("ablegen", g_akt_spieler).f_level, (a_spieler("ablegen", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("ablegen", g_akt_spieler).f_character_y + g_spell_y)).f_feld)) {
				if (!a_laby_item("ablegen", (a_spieler("ablegen", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("ablegen", g_akt_spieler).f_character_y + g_spell_y)).f_name[a_spieler("ablegen", g_akt_spieler).f_level]) {
					if (a_inventory("ablegen", g_feld, g_akt_spieler).f_name == 150) {
						v_ablegen = (p_gold_anzahl() / 4);
						if (v_ablegen > 30000) {
							v_ablegen = 30000;
						}
						p_setitem((a_spieler("ablegen", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("ablegen", g_akt_spieler).f_character_y + g_spell_y), a_spieler("ablegen", g_akt_spieler).f_level, 150, v_ablegen, 0);
						a_spieler("ablegen", g_akt_spieler).f_gold -= v_ablegen;
					} else {
						v_attri = a_inventory("ablegen", g_feld, g_akt_spieler).f_attri5;
						v_status = a_inventory("ablegen", g_feld, g_akt_spieler).f_status;
						p_setitem((a_spieler("ablegen", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("ablegen", g_akt_spieler).f_character_y + g_spell_y), a_spieler("ablegen", g_akt_spieler).f_level, a_inventory("ablegen", g_feld, g_akt_spieler).f_name, v_attri, v_status);
						p_leeren(g_feld);
					}
					p_laby_screen();
					p_delay(g_mydelay);
					g_aktion = 1;
				}
			} else {
				p_message(233, 3);
			}
		}
	}
}

static intptr_t p_advancements() {
	intptr_t v_akt_pilz = 0;
	int16_t v_crysolit = 0;
	int16_t v_gift = 0;
	int16_t v_heiltrank = 0;
	intptr_t v_hugo = 0;
	intptr_t v_i = 0;
	int16_t v_j = 0;
	intptr_t v_nach = 0;
	int16_t v_obj = 0;
	int16_t v_pos = 0;
	int16_t v_tmp_sav = 0;
	intptr_t v_welcher = 0;
	intptr_t v_willi = 0;
	if (!a_skills("advancements", 125, g_akt_spieler).f_gewaehlt) {
		p_in_rucksack(46, 2, 0);
		p_in_rucksack(44, 1, 0);
		p_in_rucksack(193, 1, 0);
		p_in_rucksack(1, 1, 1);
		v_heiltrank = 0;
		for (v_j = 0; v_j <= 37; v_j += 1) {
			if (a_item("advancements", (75 + v_j)).f_name[2] == "Starker Heiltrank") {
				v_heiltrank = (75 + v_j);
				a_mischen("advancements", v_j).f_learned = (a_mischen("advancements", v_j).f_learned | p_pm(0));
				break;
			}
		}
		v_pos = p_in_rucksack(v_heiltrank, 1, 0);
		a_inventory("advancements", v_pos, g_akt_spieler).f_status = 1;
	}
	if (g_test == 1) {
		p_in_rucksack(257, 1, 0);
		p_in_rucksack(170, 15, 0);
		p_in_rucksack(170, 15, 0);
		p_in_rucksack(219, 20, 0);
		p_in_rucksack(139, 1, 0);
		p_in_rucksack(21, 1, 0);
		p_in_rucksack(148, 1, 0);
		p_in_rucksack(29, 1, 0);
		p_in_rucksack(51, 1, 0);
		p_in_rucksack(30, 1, 0);
		p_in_rucksack(32, 1, 0);
		p_in_rucksack(134, 10, 0);
		v_j = p_in_rucksack(39, 10, 0);
		a_inventory("advancements", v_j, g_akt_spieler).f_status = 0;
		p_in_rucksack(39, 5, 0);
		v_heiltrank = 0;
		for (v_j = 0; v_j <= 37; v_j += 1) {
			if (a_item("advancements", (75 + v_j)).f_name[1] == "Potion of the Gods") {
				v_heiltrank = (75 + v_j);
				v_pos = p_in_rucksack(v_heiltrank, 99, 0);
				a_inventory("advancements", v_pos, g_akt_spieler).f_status = 1;
				break;
			}
		}
	}
	if (a_skills("advancements", 1, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_attack = 4;
	}
	if (a_skills("advancements", 2, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_lifepoints = 15;
		a_spieler("advancements", g_akt_spieler).f_maxlifepoints = 15;
		a_spieler("advancements", g_akt_spieler).f_lifegain = 4;
	}
	if (a_skills("advancements", 3, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_strength = 4;
	}
	if (a_skills("advancements", 5, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_dexterity = 4;
	}
	if (a_skills("advancements", 79, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(270, 1, 0);
		p_in_rucksack(219, 3, 0);
		p_in_rucksack(4, 1, 1);
	}
	if (a_skills("advancements", 9, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(24, 1, 1);
		p_in_rucksack(32, 1, 1);
		p_in_rucksack(30, 1, 1);
		p_in_rucksack(3, 1, 1);
		p_in_rucksack(28, 1, 1);
		p_in_rucksack(26, 1, 1);
		a_spieler("advancements", g_akt_spieler).f_goblinlehre += 2;
		a_spieler("advancements", g_akt_spieler).f_spinnenlehre += 2;
		a_spieler("advancements", g_akt_spieler).f_untotenlehre += 2;
		a_spieler("advancements", g_akt_spieler).f_pflanzenlehre += 2;
		a_spieler("advancements", g_akt_spieler).f_tierkunde += 2;
		a_spieler("advancements", g_akt_spieler).f_fallenlehre += 2;
		a_spieler("advancements", g_akt_spieler).f_giftlehre += 2;
	}
	if (a_skills("advancements", 32, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(170, 1, 0);
		p_in_rucksack(171, 1, 0);
		p_in_rucksack(190, 1, 0);
	}
	if (a_skills("advancements", 118, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_giftlehre = (a_spieler("advancements", g_akt_spieler).f_giftlehre + 2);
		v_nach = (75 + p_random(37));
		v_gift = 0;
		for (v_j = 0; v_j <= 37; v_j += 1) {
			if (a_item("advancements", (75 + v_j)).f_attri1 == 4) {
				v_gift = (75 + v_j);
				a_mischen("advancements", v_j).f_learned = (a_mischen("advancements", v_j).f_learned | p_pm(g_akt_spieler));
			} else {
				if (a_item("advancements", (75 + v_j)).f_attri1 == 3) {
					a_mischen("advancements", v_j).f_learned = (a_mischen("advancements", v_j).f_learned | p_pm(g_akt_spieler));
				}
			}
		}
		p_in_rucksack(v_gift, 5, 0);
		for (v_j = 0; v_j <= 9; v_j += 1) {
			if (a_item("advancements", (65 + v_j)).f_attri1 == 3 || a_item("advancements", (65 + v_j)).f_attri1 == 4) {
				a_mush_known("advancements", v_j) = (a_mush_known("advancements", v_j) | p_pm(0));
			}
		}
	}
	if (a_skills("advancements", 30, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(21, 1, 1);
		p_in_rucksack(20, 1, 1);
	}
	if (a_skills("advancements", 37, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_circle = 3;
		if (g_test == 1) {
			a_spieler("advancements", g_akt_spieler).f_circle = 15;
		}
	}
	if (a_skills("advancements", 120, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_circle = 1;
	}
	v_tmp_sav = a_spieler("advancements", g_akt_spieler).f_circle;
	if (a_skills("advancements", 65, g_akt_spieler).f_gewaehlt == 1) {
		for (v_i = 1; v_i <= v_tmp_sav; v_i += 1) {
			a_spieler("advancements", g_akt_spieler).f_circle = v_i;
			p_freie_magie();
		}
	}
	if (a_skills("advancements", 38, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_power_score = 4;
	}
	if (a_skills("advancements", 42, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_magieresistenz = 70;
	}
	if (a_skills("advancements", 39, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_mana = 12;
		a_spieler("advancements", g_akt_spieler).f_maxmana = 12;
		a_spieler("advancements", g_akt_spieler).f_managain = 4;
		if (g_test == 1) {
			a_spieler("advancements", g_akt_spieler).f_mana = 120;
			a_spieler("advancements", g_akt_spieler).f_maxmana = 120;
			a_spieler("advancements", g_akt_spieler).f_managain = 40;
		}
	}
	if (a_skills("advancements", 122, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_mana += 2;
		a_spieler("advancements", g_akt_spieler).f_maxmana += 2;
	}
	if (a_skills("advancements", 115, g_akt_spieler).f_gewaehlt == 1) {
		for (v_j = 0; v_j <= 37; v_j += 1) {
			a_mischen("advancements", v_j).f_learned = (a_mischen("advancements", v_j).f_learned | p_pm(0));
		}
		for (v_j = 0; v_j <= 9; v_j += 1) {
			a_mush_known("advancements", v_j) = (a_mush_known("advancements", v_j) | p_pm(0));
		}
		for (v_i = 1; v_i <= 5; v_i += 1) {
			v_akt_pilz = (p_random(9) + 65);
			p_in_rucksack(v_akt_pilz, 1, 0);
		}
		p_in_rucksack(353, 5, 0);
	}
	if (a_skills("advancements", 43, g_akt_spieler).f_gewaehlt == 1) {
		for (v_i = 1; v_i <= 5; v_i += 1) {
			v_akt_pilz = (p_random(9) + 65);
			p_in_rucksack(v_akt_pilz, 1, 0);
		}
		for (v_j = 0; v_j <= 37; v_j += 1) {
			a_mischen("advancements", v_j).f_learned = (a_mischen("advancements", v_j).f_learned | p_pm(0));
		}
	}
	if (a_skills("advancements", 44, g_akt_spieler).f_gewaehlt == 1) {
		for (v_hugo = 1; v_hugo <= 5; v_hugo += 1) {
			v_welcher = (p_random(28) + 1);
			v_obj = 0;
			switch (v_welcher) {
			case 1:
				v_obj = 197;
				break;
			case 2:
				v_obj = 198;
				break;
			case 3:
				v_obj = 199;
				break;
			case 4:
				v_obj = 209;
				break;
			case 5:
				v_obj = 210;
				break;
			case 6:
				v_obj = 152;
				break;
			case 7:
				v_obj = 295;
				break;
			case 8:
				v_obj = 296;
				break;
			case 9:
				v_obj = 297;
				break;
			case 10:
				v_obj = 298;
				break;
			case 11:
				v_obj = 299;
				break;
			case 12:
				v_obj = 300;
				break;
			case 13:
				v_obj = 301;
				break;
			case 14:
				v_obj = 211;
				break;
			case 15:
				v_obj = 213;
				break;
			case 16:
				v_obj = 214;
				break;
			case 17:
				v_obj = 215;
				break;
			case 18:
				v_obj = 216;
				break;
			case 19:
				v_obj = 217;
				break;
			case 20:
				v_obj = 218;
				break;
			case 21:
				v_obj = 387;
				break;
			case 22:
				v_obj = 388;
				break;
			case 23:
				v_obj = 389;
				break;
			case 24:
				v_obj = 390;
				break;
			case 25:
				v_obj = 391;
				break;
			case 26:
				v_obj = 392;
				break;
			case 27:
				v_obj = 393;
				break;
			case 28:
				v_obj = 394;
				break;
			case 29:
				v_obj = 395;
				break;
			}
			v_i = p_backpackspace();
			if (v_i <= 50) {
				a_inventory("advancements", v_i, g_akt_spieler).f_name = v_obj;
				if (a_item("advancements", v_obj).f_type == 22) {
					a_inventory("advancements", v_i, g_akt_spieler).f_status = 0;
					a_inventory("advancements", v_i, g_akt_spieler).f_attri5 = (1 + p_random(2));
				}
			}
			a_inventory("advancements", v_i, g_akt_spieler).f_benutzt = 0;
		}
	}
	if (a_skills("advancements", 47, g_akt_spieler).f_gewaehlt == 1) {
		for (v_hugo = 1; v_hugo <= 5; v_hugo += 1) {
			p_in_rucksack(38, 1, 0);
		}
		p_in_rucksack(186, 1, 0);
	}
	if (a_skills("advancements", 70, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_perception = 4;
	}
	if (a_skills("advancements", 72, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_speed = 11;
		a_spieler("advancements", g_akt_spieler).f_maxspeed = 11;
	}
	if (a_skills("advancements", 85, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_luck_score = 4;
	}
	if (a_skills("advancements", 88, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(169, 1, 0);
	}
	if (a_skills("advancements", 89, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(39, 1, 0);
		p_in_rucksack(134, 2, 0);
		p_in_rucksack(232, 1, 0);
		p_in_rucksack(269, 1, 0);
		p_in_rucksack(270, 1, 0);
	}
	if (a_skills("advancements", 90, g_akt_spieler).f_gewaehlt == 1) {
		v_i = p_backpackspace();
		a_inventory("advancements", v_i, g_akt_spieler).f_name = 150;
		a_inventory("advancements", v_i, g_akt_spieler).f_status = 0;
		a_inventory("advancements", v_i, g_akt_spieler).f_attri5 = 0;
		a_spieler("advancements", g_akt_spieler).f_gold = 1000;
		if (g_test == 1) {
			a_spieler("advancements", g_akt_spieler).f_gold = 40000;
		}
	}
	if (a_skills("advancements", 91, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(240, 1, 0);
	}
	if (a_skills("advancements", 21, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(3, 1, 1);
	}
	if (a_skills("advancements", 22, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(14, 1, 1);
	}
	if (a_skills("advancements", 23, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(9, 1, 1);
	}
	if (a_skills("advancements", 24, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(18, 1, 1);
	}
	if (a_skills("advancements", 7, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(36, 1, 1);
	}
	if (a_skills("advancements", 112, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(1, 5, 0);
	}
	if (a_skills("advancements", 95, g_akt_spieler).f_gewaehlt == 1) {
		p_in_rucksack(43, 1, 0);
		p_in_rucksack(353, 5, 0);
		p_in_rucksack(355, 1, 0);
		p_in_rucksack(289, 1, 0);
	}
	if (a_skills("advancements", 93, g_akt_spieler).f_gewaehlt == 1) {
		v_willi = (p_random(11) + 1);
		switch (v_willi) {
		case 1:
			v_hugo = 220;
			break;
		case 2:
			v_hugo = 255;
			break;
		case 3:
			v_hugo = 256;
			break;
		case 4:
			v_hugo = 257;
			break;
		case 5:
			v_hugo = 149;
			break;
		case 6:
			v_hugo = 253;
			break;
		case 7:
			v_hugo = 302;
			break;
		case 8:
			v_hugo = 303;
			break;
		case 9:
			v_hugo = 304;
			break;
		case 10:
			v_hugo = 305;
			break;
		case 11:
			v_hugo = 306;
			break;
		case 12:
			v_hugo = 307;
			break;
		}
		p_in_rucksack(v_hugo, 1, 1);
	}
	if (a_skills("advancements", 99, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_attack = (a_spieler("advancements", g_akt_spieler).f_attack + 1);
		a_spieler("advancements", g_akt_spieler).f_strength = (a_spieler("advancements", g_akt_spieler).f_strength + 1);
		a_spieler("advancements", g_akt_spieler).f_dexterity = (a_spieler("advancements", g_akt_spieler).f_dexterity + 1);
		a_spieler("advancements", g_akt_spieler).f_perception = (a_spieler("advancements", g_akt_spieler).f_perception + 1);
		a_spieler("advancements", g_akt_spieler).f_luck_score = (a_spieler("advancements", g_akt_spieler).f_luck_score + 1);
		a_spieler("advancements", g_akt_spieler).f_power_score = (a_spieler("advancements", g_akt_spieler).f_power_score + 1);
	}
	if (a_skills("advancements", 124, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_lifepoints = 10;
		a_spieler("advancements", g_akt_spieler).f_maxlifepoints = 10;
		a_spieler("advancements", g_akt_spieler).f_lifegain = 2;
	}
	if (a_skills("advancements", 127, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_mana = 1;
		a_spieler("advancements", g_akt_spieler).f_maxmana = 1;
		a_spieler("advancements", g_akt_spieler).f_managain = 2;
	}
	if (a_skills("advancements", 133, g_akt_spieler).f_gewaehlt == 1) {
		a_spieler("advancements", g_akt_spieler).f_dumm = 3;
	}
	v_crysolit = 0;
	if (g_nr_of_players == 1) {
		for (v_i = 1; v_i <= 144; v_i += 1) {
			if (a_skills("advancements", v_i, g_akt_spieler).f_gewaehlt == 1 && (a_skills("advancements", v_i, g_akt_spieler).f_gruppe == 3 || v_i == 135 || v_i == 136 || v_i == 137 || v_i == 63 || v_i == 106 || v_i == 107 || v_i == 127 || v_i == 129 || v_i == 122 || v_i == 120)) {
				v_crysolit += a_skills("advancements", v_i, g_akt_spieler).f_kosten;
			}
		}
		if (v_crysolit > 0) {
			p_in_rucksack(354, v_crysolit, 0);
		}
	}
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_item("advancements", a_inventory("advancements", v_i, g_akt_spieler).f_name).f_qualitaet == 1 && !a_inventory("advancements", v_i, g_akt_spieler).f_attri5) {
			a_inventory("advancements", v_i, g_akt_spieler).f_attri5 = (p_random(2) + 1);
		}
	}
}

static intptr_t p_alchemie(int16_t v_feld) {
	if (a_skills("alchemie", 43, g_akt_spieler).f_gewaehlt == 1) {
		p_leeren(v_feld);
		p_in_rucksack(p_get_chance(997), 1, 0);
		g_aktion = 1;
	}
}

static intptr_t p_altar() {
	int16_t v_verkauf = 0;
	v_verkauf = p_select_inventory(523);
	if (v_verkauf) {
		p_sound(16);
		if (a_item("altar", a_inventory("altar", v_verkauf, g_akt_spieler).f_name).f_einkauf > 40) {
			p_leeren(v_verkauf);
			p_message(12, 5);
			p_aufsteigen2();
		} else {
			p_message(13, 5);
		}
	}
}

static intptr_t p_angriffsspruch(int16_t v_spell, int16_t v_attack_animation, int16_t v_spell_sound, int16_t v_damage_type, int16_t v_min_damage, int16_t v_max_damage) {
	intptr_t v_destination = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	int16_t v_mon_no = 0;
	int16_t v_schaden = 0;
	int16_t v_special = 0;
	if (a_spieler("angriffsspruch", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
		g_spell_x = 0;
		g_spell_y = 0;
		v_destination = p_select_field(0);
		if (v_destination == 1) {
			g_blocked = 0;
			p_los(0);
			if (!g_blocked) {
				p_zug_verlieren();
				p_mana_verlieren(v_spell);
				v_special = p_erfolgreich(v_spell);
				if (v_special > 0) {
					v_schaden = p_damage(v_min_damage, v_max_damage, v_spell, v_special);
					p_sound(v_spell_sound);
					if (v_damage_type == 5) {
						for (v_j = 1; v_j <= 5; v_j += 1) {
							for (v_i = 1; v_i <= 2; v_i += 1) {
								p_laby_screen2();
								p_clipsprite(17, ((v_i * 40) - 40), 40, 39, 39);
								p_displaytransparentsprite(17, (156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)));
								p_flipbuffers(1);
								p_delay(90);
							}
						}
					} else {
						p_animate_projectile(v_attack_animation);
					}
					p_hydra_zauber(v_schaden);
					switch (v_damage_type) {
					case 1:
						p_feuerschaden(v_schaden);
						break;
					case 2:
						p_eisschaden(v_schaden);
						break;
					case 3:
						v_mon_no = p_getmonster((a_spieler("angriffsspruch", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("angriffsspruch", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							if (p_immune(25) == 1) {
								p_message(329, 2);
							} else {
								if (p_dispelled() == 1) {
									p_message(312, 2);
								} else {
									p_monsterschaden(v_schaden);
								}
							}
						}
						break;
					case 4:
						v_mon_no = p_getmonster((a_spieler("angriffsspruch", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("angriffsspruch", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
							} else {
								p_monsterschaden(v_schaden);
							}
						}
						break;
					case 5:
						v_mon_no = p_getmonster((a_spieler("angriffsspruch", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("angriffsspruch", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							if (!p_immune(45)) {
								if (p_dispelled() == 1) {
									p_message(312, 2);
								} else {
									p_monsterschaden(v_schaden);
								}
							} else {
								p_message(834, 2);
							}
						}
						break;
					default:
						p_feuerschaden(v_schaden);
						break;
					}
					p_cleanup_monsters();
				}
			} else {
				p_message(233, 2);
			}
		}
	} else {
		p_message(194, 2);
	}
}

static intptr_t p_animate_projectile(int16_t v_aussehen) {
	int16_t v_akt_frame = 0;
	intptr_t v_i = 0;
	int16_t v_xdir = 0;
	int16_t v_ydir = 0;
	intptr_t v_ziel = 0;
	int16_t v_zw_frame = 0;
	v_akt_frame = 1;
	v_zw_frame = 1;
	if (g_spell_x > 0) {
		v_ziel = (32 * g_spell_x);
		v_xdir = 1;
		v_ydir = 0;
	}
	if (g_spell_x < 0) {
		v_ziel = (-32 * g_spell_x);
		v_xdir = -1;
		v_ydir = 0;
	}
	if (g_spell_y > 0) {
		v_ziel = (32 * g_spell_y);
		v_xdir = 0;
		v_ydir = 1;
	}
	if (g_spell_y < 0) {
		v_ziel = (-32 * g_spell_y);
		v_xdir = 0;
		v_ydir = -1;
	}
	switch (v_aussehen) {
	case 1:
		p_clipsprite(38, 0, 192, 32, 32);
		break;
	case 2:
		p_clipsprite(38, 96, 128, 32, 32);
		break;
	case 3:
		p_clipsprite(38, 96, 192, 32, 32);
		break;
	case 4:
		p_clipsprite(38, 32, 128, 32, 32);
		break;
	case 5:
		if (g_spell_x > 0) {
			p_clipsprite(38, 32, 96, 32, 32);
		}
		if (g_spell_x < 0) {
			p_clipsprite(38, 96, 96, 32, 32);
		}
		if (g_spell_y > 0) {
			p_clipsprite(38, 64, 96, 32, 32);
		}
		if (g_spell_y < 0) {
			p_clipsprite(38, 0, 96, 32, 32);
		}
		break;
	case 6:
		p_clipsprite(38, 32, 256, 32, 32);
		break;
	case 7:
		p_clipsprite(38, ((v_akt_frame * 32) - 32), 0, 32, 32);
		break;
	case 8:
		p_clipsprite(38, ((v_akt_frame * 32) - 32), 32, 32, 32);
		break;
	case 9:
		if (g_spell_x > 0) {
			p_clipsprite(38, 32, 64, 32, 32);
		}
		if (g_spell_x < 0) {
			p_clipsprite(38, 96, 64, 32, 32);
		}
		if (g_spell_y > 0) {
			p_clipsprite(38, 64, 64, 32, 32);
		}
		if (g_spell_y < 0) {
			p_clipsprite(38, 0, 64, 32, 32);
		}
		break;
	case 10:
		p_clipsprite(38, 64, 128, 32, 32);
		break;
	case 11:
		p_clipsprite(8, 96, 576, 32, 32);
		break;
	}
	v_i = 1;
	do {
		p_fenster(0);
		p_laby_screen2();
		if (v_aussehen == 11) {
			p_clipsprite(8, 96, 576, 32, 32);
			p_displaytransparentsprite(8, (160 + (v_i * v_xdir)), (160 + (v_i * v_ydir)));
		} else {
			if (v_aussehen == 7 || v_aussehen == 8) {
				p_clipsprite(38, ((v_akt_frame * 32) - 32), (32 * (v_aussehen - 7)), 32, 32);
				v_zw_frame = (v_zw_frame + 1);
				if (v_zw_frame > 3) {
					v_akt_frame = (v_akt_frame + 1);
					if (v_akt_frame > 4) {
						v_akt_frame = 1;
					}
					v_zw_frame = 1;
				}
			}
			p_displaytransparentsprite(38, (160 + (v_i * v_xdir)), (160 + (v_i * v_ydir)));
		}
		v_i = (v_i + g_mydelay4);
		p_flipbuffers(1);
		v_i = (v_i + 2);
	} while (!(v_i >= v_ziel));
}

static intptr_t p_animate_special_success() {
	intptr_t v_i = 0;
	p_sound(56);
	for (v_i = 1; v_i <= 8; v_i += 1) {
		p_laby_screen2();
		p_clipsprite(37, ((v_i * 31) - 31), 257, 31, 31);
		p_displaytransparentsprite(37, 160, 160);
		p_flipbuffers(1);
		p_delay(90);
	}
	for (v_i = 1; v_i <= 8; v_i += 1) {
		p_laby_screen2();
		p_clipsprite(37, ((v_i * 31) - 31), 288, 31, 31);
		p_displaytransparentsprite(37, 160, 160);
		p_flipbuffers(1);
		p_delay(90);
	}
}

static intptr_t p_attack_area(int16_t v_spell, int16_t v_sound, int16_t v_filler, int16_t v_destroy_type, int16_t v_bereich, int16_t v_damage_type, int16_t v_min_damage, int16_t v_max_damage) {
	int16_t v_akt_power = 0;
	int16_t v_anfang_x = 0;
	int16_t v_anfang_y = 0;
	int16_t v_art = 0;
	int16_t v_ende_x = 0;
	int16_t v_ende_y = 0;
	int16_t v_hy_x = 0;
	int16_t v_hy_y = 0;
	int16_t v_hydahits = 0;
	intptr_t v_hydrahits = 0;
	int16_t v_mon_no = 0;
	int16_t v_schaden = 0;
	int16_t v_special = 0;
	int16_t v_success = 0;
	int16_t v_testfeld = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	v_success = 0;
	if (a_spieler("attack_area", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
		p_zug_verlieren();
		p_mana_verlieren(v_spell);
		v_special = p_erfolgreich(v_spell);
		if (v_special > 0) {
			v_akt_power = (v_special * p_power(v_spell));
			v_success = 1;
			p_sound(v_sound);
			p_laby_screen();
			if (v_filler == 9999) {
				p_spraygrafik(168, 10);
			} else {
				for (v_y = 1; v_y <= 13; v_y += 1) {
					for (v_x = 1; v_x <= 13; v_x += 1) {
						p_draw_tile(v_filler, v_x, v_y, 1, 1, -1);
					}
				}
			}
			p_flipbuffers(1);
			p_delay(g_mydelay);
			p_laby_screen();
			switch (v_bereich) {
			case 1:
				v_anfang_x = p_max(-7, ((0 - a_spieler("attack_area", g_akt_spieler).f_character_x) + 1));
				v_ende_x = p_min(7, (a_groesse("attack_area", a_spieler("attack_area", g_akt_spieler).f_level) - a_spieler("attack_area", g_akt_spieler).f_character_x));
				v_anfang_y = p_max(-7, ((0 - a_spieler("attack_area", g_akt_spieler).f_character_y) + 1));
				v_ende_y = p_min(7, (a_groesse("attack_area", a_spieler("attack_area", g_akt_spieler).f_level) - a_spieler("attack_area", g_akt_spieler).f_character_y));
				break;
			case 2:
				v_anfang_x = ((0 - a_spieler("attack_area", g_akt_spieler).f_character_x) + 1);
				v_ende_x = (a_groesse("attack_area", a_spieler("attack_area", g_akt_spieler).f_level) - a_spieler("attack_area", g_akt_spieler).f_character_x);
				v_anfang_y = ((0 - a_spieler("attack_area", g_akt_spieler).f_character_y) + 1);
				v_ende_y = (a_groesse("attack_area", a_spieler("attack_area", g_akt_spieler).f_level) - a_spieler("attack_area", g_akt_spieler).f_character_y);
				break;
			default:
				break;
			}
			v_hydahits = 0;
			v_hy_x = 0;
			v_hy_y = 0;
			switch (v_min_damage) {
			case 1:
				v_min_damage = v_akt_power;
				break;
			case 2:
				v_min_damage = (v_akt_power * 2);
				break;
			case 3:
				v_min_damage = (v_akt_power * 3);
				break;
			default:
				v_min_damage = v_akt_power;
				break;
			}
			switch (v_max_damage) {
			case 1:
				v_max_damage = (v_akt_power * 2);
				break;
			case 2:
				v_max_damage = (v_akt_power * 3);
				break;
			case 3:
				v_max_damage = (v_akt_power * 4);
				break;
			default:
				v_max_damage = (v_akt_power * 2);
				break;
			}
			p_changecurrentelement(ll_monster_list, a_first_monster("attack_area", a_spieler("attack_area", g_akt_spieler).f_level).f_p);
			while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == a_spieler("attack_area", g_akt_spieler).f_level) {
				if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x >= (v_anfang_x + a_spieler("attack_area", g_akt_spieler).f_character_x) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x <= (v_ende_x + a_spieler("attack_area", g_akt_spieler).f_character_x) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y >= (v_anfang_y + a_spieler("attack_area", g_akt_spieler).f_character_y) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y <= (v_ende_y + a_spieler("attack_area", g_akt_spieler).f_character_y)) {
					v_mon_no = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number;
					v_art = a_monster("attack_area", v_mon_no).f_art;
					g_spell_x = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x - a_spieler("attack_area", g_akt_spieler).f_character_x);
					g_spell_y = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y - a_spieler("attack_area", g_akt_spieler).f_character_y);
					v_schaden = (v_min_damage + p_myrand((v_max_damage - v_min_damage)));
					v_schaden = (v_schaden * p_get_weaving(-1));
					switch (v_damage_type) {
					case 1:
						if (p_has_trait2(v_mon_no, 11) == 1) {
							v_schaden = (v_schaden * 2);
						}
						if (!p_has_trait2(v_mon_no, 12)) {
							p_monsterschaden(v_schaden);
						} else {
							p_message(265, 2);
						}
						break;
					case 2:
						if (!p_has_trait2(v_mon_no, 1)) {
							p_monsterschaden(v_schaden);
						}
						break;
					case 3:
						if (p_has_trait2(v_mon_no, 1) == 1) {
							if (!p_immune(45)) {
								p_monsterschaden(v_schaden);
							} else {
								p_message(834, 2);
							}
						}
						break;
					case 4:
						p_monsterschaden(v_schaden);
						break;
					default:
						break;
					}
				}
				p_nextelement(ll_monster_list);
			}
			p_cleanup_monsters();
			for (g_spell_x = v_anfang_x; g_spell_x <= v_ende_x; g_spell_x += 1) {
				for (g_spell_y = v_anfang_y; g_spell_y <= v_ende_y; g_spell_y += 1) {
					v_testfeld = a_labyrinth("attack_area", a_spieler("attack_area", g_akt_spieler).f_level, (a_spieler("attack_area", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("attack_area", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
					switch (v_destroy_type) {
					case 1:
						if (v_testfeld == 80) {
							v_schaden = (v_min_damage + p_myrand((v_max_damage - v_min_damage)));
							v_schaden = (v_schaden * p_get_weaving(-1));
							if (v_schaden > 3) {
								p_destroy_iceblock((a_spieler("attack_area", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("attack_area", g_akt_spieler).f_character_y + g_spell_y), a_spieler("attack_area", g_akt_spieler).f_level);
							}
						}
						break;
					case 2:
						if (v_testfeld == 40 || v_testfeld == 41 || v_testfeld == 65) {
							v_schaden = (v_min_damage + p_myrand((v_max_damage - v_min_damage)));
							v_schaden = (v_schaden * p_get_weaving(-1));
							if (v_schaden > 3) {
								p_sound(34);
								p_cleartile((a_spieler("attack_area", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("attack_area", g_akt_spieler).f_character_y + g_spell_y), -1);
							}
						}
						break;
					default:
						break;
					}
					if (v_testfeld >= 137 && v_testfeld <= 148) {
						v_hydrahits += 1;
						v_hy_x = g_spell_x;
						v_hy_y = g_spell_y;
					}
				}
			}
			if (v_hydrahits > 0) {
				v_schaden = (v_min_damage + p_myrand((v_max_damage - v_min_damage)));
				v_schaden = ((v_schaden * p_get_weaving(-1)) * v_hydrahits);
				g_spell_x = v_hy_x;
				g_spell_y = v_hy_y;
				p_hydra_zauber((v_schaden / 6));
			}
		}
	} else {
		p_message(194, 2);
	}
	return v_success;
}

static intptr_t p_aufstehen(int16_t v_nr) {
	int16_t v_bg = 0;
	intptr_t v_i = 0;
	int16_t v_inhalt_x = 0;
	int16_t v_inhalt_y = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_mon_no = 0;
	intptr_t v_result = 0;
	int16_t v_tile = 0;
	v_nr = (v_nr - 1);
	v_inhalt_x = (v_nr % 10);
	v_inhalt_y = (v_nr / 10);
	for (v_i = 1; v_i <= 32; v_i += 1) {
		p_laby_screen2();
		v_tile = a_labyrinth("aufstehen", a_spieler("aufstehen", g_akt_spieler).f_level, (a_spieler("aufstehen", g_akt_spieler).f_character_x + g_xmod), (a_spieler("aufstehen", g_akt_spieler).f_character_y + g_ymod)).f_feld;
		if (a_fields("aufstehen", v_tile).f_attri_floor) {
			v_bg = a_labyrinth("aufstehen", a_spieler("aufstehen", g_akt_spieler).f_level, (a_spieler("aufstehen", g_akt_spieler).f_character_x + g_xmod), (a_spieler("aufstehen", g_akt_spieler).f_character_y + g_ymod)).f_stat2;
		} else {
			v_bg = 0;
		}
		p_draw_tile(v_tile, (7 + g_xmod), (7 + g_ymod), 0, 0, v_bg);
		v_mon_no = p_getmonster((a_spieler("aufstehen", g_akt_spieler).f_character_x + g_xmod), (a_spieler("aufstehen", g_akt_spieler).f_character_y + g_ymod), -1);
		if (v_mon_no) {
			p_draw_monster((7 + g_xmod), (7 + g_ymod), 0, 0);
		}
		if (a_laby_item("aufstehen", (a_spieler("aufstehen", g_akt_spieler).f_character_x + g_xmod), (a_spieler("aufstehen", g_akt_spieler).f_character_y + g_ymod)).f_name[a_spieler("aufstehen", g_akt_spieler).f_level] > 0) {
			p_draw_item(a_laby_item("aufstehen", (a_spieler("aufstehen", g_akt_spieler).f_character_x + g_xmod), (a_spieler("aufstehen", g_akt_spieler).f_character_y + g_ymod)).f_name[a_spieler("aufstehen", g_akt_spieler).f_level], (7 + g_xmod), (7 + g_ymod), 0, 0);
		}
		p_clipsprite(9, (v_inhalt_x * 32), (v_inhalt_y * 32), 32, v_i);
		p_displaytransparentsprite(9, (160 + (g_xmod * 32)), ((160 + (g_ymod * 32)) + (32 - v_i)));
		p_restaurieren();
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		p_delay(30);
	}
}

static intptr_t p_aufstehen2(int16_t v_nr) {
	intptr_t v_i = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_result = 0;
	int16_t v_sprite_x = 0;
	int16_t v_sprite_y = 0;
	v_nr = (v_nr - 1);
	v_sprite_x = (v_nr % 10);
	v_sprite_y = (v_nr / 10);
	for (v_i = 1; v_i <= 32; v_i += 1) {
		p_laby_screen2();
		p_draw_tile(a_labyrinth("aufstehen2", a_spieler("aufstehen2", g_akt_spieler).f_level, (a_spieler("aufstehen2", g_akt_spieler).f_character_x + g_xmod), (a_spieler("aufstehen2", g_akt_spieler).f_character_y + g_ymod)).f_feld, (7 + g_xmod), (7 + g_ymod), 0, 0, -1);
		p_clipsprite(9, (v_sprite_x * 32), (v_sprite_y * 32), 32, v_i);
		p_displaytransparentsprite(9, (160 + (g_xmod * 32)), ((160 + (g_ymod * 32)) + (32 - v_i)));
		p_restaurieren();
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		p_delay(30);
	}
}

static intptr_t p_aufsteigen() {
	intptr_t v_i = 0;
	int16_t v_udj_pos = 0;
	int8_t v_udjat = 0;
	if (a_spieler("aufsteigen", g_akt_spieler).f_status == 1) {
		a_spieler("aufsteigen", g_akt_spieler).f_speed = 0;
L_und_nochmal: ;
		p_aufsteigen2();
		v_udjat = 0;
		v_udj_pos = 0;
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (a_inventory("aufsteigen", v_i, g_akt_spieler).f_name == 240 && a_inventory("aufsteigen", v_i, g_akt_spieler).f_status > 0) {
				v_udjat = 1;
				v_udj_pos = v_i;
			}
		}
		if (v_udjat == 1) {
			if (a_spieler("aufsteigen", g_akt_spieler).f_udjat_ben == 1) {
				a_spieler("aufsteigen", g_akt_spieler).f_udjat_ben = 0;
				a_inventory("aufsteigen", v_udj_pos, g_akt_spieler).f_status -= 1;
				p_nachricht7(p_nachricht4(62) + p_nachricht4(63), 4);
				p_message(64, 4);
				goto L_und_nochmal;
			}
		}
		if (a_skills("aufsteigen", 92, g_akt_spieler).f_gewaehlt == 1) {
			a_spieler("aufsteigen", g_akt_spieler).f_weisheit = (a_spieler("aufsteigen", g_akt_spieler).f_weisheit + 1);
			if (a_spieler("aufsteigen", g_akt_spieler).f_weisheit > 3) {
				a_spieler("aufsteigen", g_akt_spieler).f_weisheit = 0;
				p_nachricht7(p_nachricht4(65) + p_nachricht4(63), 4);
				p_message(64, 4);
				goto L_und_nochmal;
			}
		}
	}
	p_delay(g_mydelay);
}

static intptr_t p_aufsteigen2() {
	intptr_t v_actual = 0;
	int16_t v_freie = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_mouse_links = 0;
	intptr_t v_mouse_rechts = 0;
	int16_t v_pos = 0;
	intptr_t v_result = 0;
	int16_t v_wait = 0;
	intptr_t v_wohin = 0;
	if (a_spieler("aufsteigen2", g_akt_spieler).f_fluch != 1 && a_spieler("aufsteigen2", g_akt_spieler).f_dumm < 1) {
		v_pos = 1;
		v_wait = 0;
		v_freie = 0;
		do {
			p_fenster(0);
			v_actual = 0;
			p_read_joystick();
			p_examinekeyboard();
			a_addelaymax("aufsteigen2", 1) = g_selectdelay;
			if (p_keyboardpushed(274) || g_jay == 1) {
				if (p_autodelay(1, 1, -2)) {
					p_autodelay(1, 2, -2);
					if (v_pos < 10 && !v_actual) {
						v_pos = (v_pos + 1);
						v_actual = 1;
						v_wait = 50;
					}
				}
			} else {
				if (p_keyboardpushed(273) || g_jay == -1) {
					if (p_autodelay(1, 1, -2)) {
						p_autodelay(1, 2, -2);
						if (v_pos > 1 && !v_actual) {
							v_pos = (v_pos - 1);
							v_actual = 1;
							v_wait = 50;
						}
					}
				} else {
					p_autodelay(1, 3, -2);
				}
			}
			p_laby_screen2();
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_frontcolor(p_rgb(0, 0, 0));
			p_box(74, 93, 220, 190, -1);
			p_stopdrawing();
			p_clipsprite(15, 1, 1, 335, 335);
			p_displaytransparentsprite(15, 16, 16);
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_frontcolor(p_rgb(150, 150, 150));
			p_box(89, ((129 + g_yplus2) + ((v_pos * g_yplus) - g_yplus)), 189, g_yplus, -1);
			p_stopdrawing();
			p_draw_advancements();
			v_result = p_examinemouse();
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mouse_links = p_mousebutton(1);
			v_mouse_rechts = p_mousebutton(2);
			p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
			p_flipbuffers(1);
			p_delay(40);
			v_wait = (v_wait - 1);
			if (!v_wait) {
				v_actual = 0;
			}
		} while (!(v_mouse_rechts == 1 || p_keyboardpushed(13) || p_keyboardpushed(32) || a_jb("aufsteigen2", 2) == 1 || g_mauszauber2 > 0));
		p_autodelay(1, 5, -2);
		if (g_mauszauber2 > 0) {
			v_pos = g_mauszauber2;
		}
		switch (v_pos) {
		case 1:
			a_spieler("aufsteigen2", g_akt_spieler).f_attack = (a_spieler("aufsteigen2", g_akt_spieler).f_attack + 1);
			break;
		case 2:
			a_spieler("aufsteigen2", g_akt_spieler).f_dexterity = (a_spieler("aufsteigen2", g_akt_spieler).f_dexterity + 1);
			break;
		case 3:
			a_spieler("aufsteigen2", g_akt_spieler).f_strength = (a_spieler("aufsteigen2", g_akt_spieler).f_strength + 1);
			break;
		case 4:
			a_spieler("aufsteigen2", g_akt_spieler).f_maxlifepoints = (a_spieler("aufsteigen2", g_akt_spieler).f_maxlifepoints + a_spieler("aufsteigen2", g_akt_spieler).f_lifegain);
			a_spieler("aufsteigen2", g_akt_spieler).f_lifepoints = (a_spieler("aufsteigen2", g_akt_spieler).f_lifepoints + a_spieler("aufsteigen2", g_akt_spieler).f_lifegain);
			break;
		case 5:
			a_spieler("aufsteigen2", g_akt_spieler).f_maxspeed = (a_spieler("aufsteigen2", g_akt_spieler).f_maxspeed + 1);
			break;
		case 6:
			a_spieler("aufsteigen2", g_akt_spieler).f_perception = (a_spieler("aufsteigen2", g_akt_spieler).f_perception + 1);
			break;
		case 7:
			a_spieler("aufsteigen2", g_akt_spieler).f_luck_score = (a_spieler("aufsteigen2", g_akt_spieler).f_luck_score + 1);
			break;
		case 8:
			a_spieler("aufsteigen2", g_akt_spieler).f_maxmana = (a_spieler("aufsteigen2", g_akt_spieler).f_maxmana + a_spieler("aufsteigen2", g_akt_spieler).f_managain);
			a_spieler("aufsteigen2", g_akt_spieler).f_mana = (a_spieler("aufsteigen2", g_akt_spieler).f_mana + a_spieler("aufsteigen2", g_akt_spieler).f_managain);
			break;
		case 9:
			a_spieler("aufsteigen2", g_akt_spieler).f_power_score = (a_spieler("aufsteigen2", g_akt_spieler).f_power_score + 1);
			break;
		case 10:
			a_spieler("aufsteigen2", g_akt_spieler).f_circle = (a_spieler("aufsteigen2", g_akt_spieler).f_circle + 1);
			p_delay(g_mydelay);
			if (a_skills("aufsteigen2", 65, g_akt_spieler).f_gewaehlt == 1) {
				p_freie_magie();
				v_freie = 1;
			}
			break;
		default:
			a_spieler("aufsteigen2", g_akt_spieler).f_attack = (a_spieler("aufsteigen2", g_akt_spieler).f_attack + 1);
			break;
		}
		if (!v_freie) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_frontcolor(p_rgb(0, 0, 0));
			p_box(88, 102, 191, 155, -1);
			p_stopdrawing();
			p_draw_advancements();
			p_flipbuffers(1);
			p_delay((g_mydelay * 2));
		}
	} else {
		if (a_spieler("aufsteigen2", g_akt_spieler).f_fluch == 1) {
			p_namenlos();
		}
		if (a_spieler("aufsteigen2", g_akt_spieler).f_dumm > 0) {
			a_spieler("aufsteigen2", g_akt_spieler).f_dumm = (a_spieler("aufsteigen2", g_akt_spieler).f_dumm - 1);
			p_sonderlevel_text(27);
		}
	}
}

static intptr_t p_autopickup() {
	int16_t v_ausg_x = 0;
	int16_t v_ausg_y = 0;
	int16_t v_einpacken = 0;
	intptr_t v_feld = 0;
	intptr_t v_gef_apfel = 0;
	intptr_t v_grafik = 0;
	int16_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_nach_kampf = 0;
	intptr_t v_result = 0;
	int16_t v_testfeld = 0;
	int16_t v_which_piece = 0;
	v_testfeld = a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_feld;
	g_over_item = 0;
	if (v_testfeld >= 58 && v_testfeld <= 61) {
		if (a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_stat1 != 1) {
			a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_stat1 = 1;
			if (p_get_chance(100) < (20 + (p_luck() * 5))) {
				p_sound(14);
				v_i = p_backpackspace();
				if (v_i <= 50) {
					v_gef_apfel = (v_gef_apfel + 1);
					a_inventory("autopickup", v_i, g_akt_spieler).f_name = 56;
					a_inventory("autopickup", v_i, g_akt_spieler).f_benutzt = 0;
				}
				p_message(311, 5);
			}
			g_aktion = 1;
		}
	}
	if (a_laby_item("autopickup", a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_name[a_spieler("autopickup", g_akt_spieler).f_level] > 0) {
		p_objekt(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y);
	}
	if (v_testfeld == 6) {
		p_chest(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y);
		if (!a_skills("autopickup", 101, g_akt_spieler).f_gewaehlt) {
			g_aktion = 1;
		}
	}
	if (v_testfeld == 192) {
		p_chest(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y);
		if (!a_skills("autopickup", 101, g_akt_spieler).f_gewaehlt) {
			g_aktion = 1;
		}
	}
	if (v_testfeld == 67) {
		p_message(978, 2);
	}
	if (v_testfeld == 68) {
		p_chest(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y);
		if (!a_skills("autopickup", 101, g_akt_spieler).f_gewaehlt) {
			g_aktion = 1;
		}
	}
	if (v_testfeld == 193) {
		p_message(978, 2);
	}
	if (v_testfeld == 194) {
		p_chest(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y);
		if (!a_skills("autopickup", 101, g_akt_spieler).f_gewaehlt) {
			g_aktion = 1;
		}
	}
	if (v_testfeld == 62) {
		p_message(977, 2);
	}
	if (v_testfeld == 63) {
		p_chest(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y);
		if (!a_skills("autopickup", 101, g_akt_spieler).f_gewaehlt) {
			g_aktion = 1;
		}
	}
	if (v_testfeld == 161) {
		p_chest(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y);
		if (!a_skills("autopickup", 101, g_akt_spieler).f_gewaehlt) {
			g_aktion = 1;
		}
	}
	if (v_testfeld == 162) {
		p_chest(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y);
		if (!a_skills("autopickup", 101, g_akt_spieler).f_gewaehlt) {
			g_aktion = 1;
		}
	}
	if (v_testfeld == 9) {
		p_gold(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y);
		if (!a_skills("autopickup", 101, g_akt_spieler).f_gewaehlt) {
			g_aktion = 1;
		}
	}
	if (v_testfeld == 160) {
		p_gold(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y);
		if (!a_skills("autopickup", 101, g_akt_spieler).f_gewaehlt) {
			g_aktion = 1;
		}
	}
	if (v_testfeld == 118) {
		p_sound(14);
		v_which_piece = a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_stat1;
		v_einpacken = p_in_rucksack((402 + v_which_piece), 1, 0);
		if (v_einpacken <= 50) {
			p_cleartile(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y, -1);
		} else {
			p_message(428, 2);
		}
		p_laby_screen();
		p_message(238, 5);
		if (!a_skills("autopickup", 101, g_akt_spieler).f_gewaehlt) {
			g_aktion = 1;
		}
	}
	if (v_testfeld == 7) {
		if (a_spieler("autopickup", g_akt_spieler).f_lifepoints < p_maxlife() || a_skills("autopickup", 104, g_akt_spieler).f_gewaehlt == 1 || a_skills("autopickup", 108, g_akt_spieler).f_gewaehlt == 1 || a_skills("autopickup", 107, g_akt_spieler).f_gewaehlt == 1) {
			v_grafik = 0;
			if (!a_skills("autopickup", 131, g_akt_spieler).f_gewaehlt && a_spieler("autopickup", g_akt_spieler).f_fluch != 15) {
				if (a_spieler("autopickup", g_akt_spieler).f_lifepoints < p_maxlife() || a_skills("autopickup", 108, g_akt_spieler).f_gewaehlt == 1 || a_skills("autopickup", 107, g_akt_spieler).f_gewaehlt == 1) {
					v_nach_kampf = 1;
					v_grafik = 1;
					a_spieler("autopickup", g_akt_spieler).f_lifepoints = p_maxlife();
				}
				if (a_skills("autopickup", 104, g_akt_spieler).f_gewaehlt == 1) {
					v_grafik = 1;
					for (v_i = 1; v_i <= 30; v_i += 1) {
						if (a_aktive("autopickup", v_i, g_akt_spieler).f_dauer > 0 && a_aktive("autopickup", v_i, g_akt_spieler).f_dauer != -1) {
							a_aktive("autopickup", v_i, g_akt_spieler).f_nr = 0;
							a_aktive("autopickup", v_i, g_akt_spieler).f_staerke = 0;
							a_aktive("autopickup", v_i, g_akt_spieler).f_dauer = 0;
						}
					}
					a_spieler("autopickup", g_akt_spieler).f_poison = 0;
					a_spieler("autopickup", g_akt_spieler).f_fluch = 0;
					a_spieler("autopickup", g_akt_spieler).f_fluchdauer = 0;
					a_spieler("autopickup", g_akt_spieler).f_krankheit = 0;
					a_spieler("autopickup", g_akt_spieler).f_krankheitdauer = 0;
					a_spieler("autopickup", g_akt_spieler).f_mana = p_maxmana();
				}
			}
			if (v_grafik == 1) {
				g_aktion = 1;
				p_sound(16);
				for (v_j = 1; v_j <= 5; v_j += 1) {
					for (v_i = 1; v_i <= 4; v_i += 1) {
						p_laby_screen2();
						p_clipsprite(17, ((v_i * 40) - 40), 1, 39, 39);
						p_displaytransparentsprite(17, 156, 156);
						v_result = p_examinemouse();
						v_mmouse_x = p_mousex();
						v_mmouse_y = p_mousey();
						p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
						p_flipbuffers(1);
						p_delay(70);
					}
				}
				if (a_skills("autopickup", 108, g_akt_spieler).f_gewaehlt == 1) {
					if (!(a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_stat2 & p_pm(0))) {
						a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_stat2 += p_pm(0);
						a_spieler("autopickup", g_akt_spieler).f_maxlifepoints = (a_spieler("autopickup", g_akt_spieler).f_maxlifepoints + 1);
						p_message(323, 5);
					}
				}
				if (a_skills("autopickup", 107, g_akt_spieler).f_gewaehlt == 1) {
					if (!(a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_stat2 & p_pm(0))) {
						a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_stat2 += p_pm(0);
						a_spieler("autopickup", g_akt_spieler).f_maxmana = (a_spieler("autopickup", g_akt_spieler).f_maxmana + 1);
						p_message(324, 5);
					}
				}
				a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_stat1 -= 1;
				if (!a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_stat1) {
					p_sound(21);
					p_message(259, 2);
					p_cleartile(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y, -1);
				}
			}
			p_laby_screen();
		}
	}
	if (v_testfeld == 64 || v_testfeld == 82 || v_testfeld == 84 || v_testfeld == 86 || v_testfeld == 87 || v_testfeld == 120 || v_testfeld == 121) {
		if (a_skills("autopickup", 134, g_akt_spieler).f_gewaehlt == 1 || a_spieler("autopickup", g_akt_spieler).f_fluch == 26) {
			p_message(327, 6);
			p_cleartile(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y, -1);
		} else {
			g_warten = 0;
			p_merchant(a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_stat1);
		}
		p_laby_screen();
		g_aktion = 1;
	}
	if (v_testfeld == 122) {
		p_teacher(1);
	}
	if (v_testfeld == 123) {
		p_teacher(2);
	}
	if (v_testfeld == 124) {
		p_teacher(3);
	}
	if (v_testfeld == 125) {
		p_teacher(4);
	}
	if (v_testfeld == 126) {
		p_teacher(5);
	}
	if (v_testfeld == 127) {
		p_teacher(6);
	}
	if (v_testfeld == 128) {
		p_teacher(7);
	}
	if (v_testfeld == 129) {
		if (a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_stat1 == 2) {
			p_helpful_wizard();
		} else {
			p_teacher(8);
		}
	}
	if (v_testfeld == 130) {
		p_teacher(9);
	}
	if (v_testfeld == 131) {
		p_teacher(10);
	}
	if (v_testfeld == 202) {
		p_wounded_hero();
		p_laby_screen();
		g_aktion = 1;
	}
	if (v_testfeld == 203) {
		p_message(513, 5);
	}
	if (v_testfeld == 8) {
		if (a_spieler("autopickup", g_akt_spieler).f_mana < p_maxmana() && !a_skills("autopickup", 135, g_akt_spieler).f_gewaehlt) {
			if (a_spieler("autopickup", g_akt_spieler).f_fluch != 11) {
				a_spieler("autopickup", g_akt_spieler).f_mana = p_maxmana();
				for (v_i = 1; v_i <= 30; v_i += 1) {
					if (a_aktive("autopickup", v_i, g_akt_spieler).f_dauer > 0 && a_aktive("autopickup", v_i, g_akt_spieler).f_dauer != -1) {
						a_aktive("autopickup", v_i, g_akt_spieler).f_nr = 0;
						a_aktive("autopickup", v_i, g_akt_spieler).f_staerke = 0;
						a_aktive("autopickup", v_i, g_akt_spieler).f_dauer = 0;
					}
				}
				p_sound(17);
				p_sternchen(160, 160, 3);
				p_laby_screen();
				a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_stat1 -= 1;
				if (!a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y).f_stat1) {
					p_sound(21);
					p_message(258, 2);
					p_cleartile(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y, -1);
					p_laby_screen();
				}
			} else {
				p_message(9, 6);
			}
			g_aktion = 1;
		}
	}
	if (v_testfeld == 54) {
		p_sound(36);
		p_message(11, 2);
		a_spieler("autopickup", g_akt_spieler).f_durst = 0;
		a_spieler("autopickup", g_akt_spieler).f_verdursten = 0;
		g_aktion = 1;
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (a_inventory("autopickup", v_i, g_akt_spieler).f_name == 193) {
				a_inventory("autopickup", v_i, g_akt_spieler).f_status = 7;
			}
		}
	}
	if (v_testfeld == 119) {
		p_sound(46);
		p_message(412, 6);
		for (v_feld = 1; v_feld <= 50; v_feld += 1) {
			if ((a_inventory("autopickup", v_feld, g_akt_spieler).f_status == 1 || a_inventory("autopickup", v_feld, g_akt_spieler).f_status == 2) && (a_item("autopickup", a_inventory("autopickup", v_feld, g_akt_spieler).f_name).f_type == 1 || a_item("autopickup", a_inventory("autopickup", v_feld, g_akt_spieler).f_name).f_type == 6 || a_item("autopickup", a_inventory("autopickup", v_feld, g_akt_spieler).f_name).f_type == 7 || a_item("autopickup", a_inventory("autopickup", v_feld, g_akt_spieler).f_name).f_type == 8 || a_item("autopickup", a_inventory("autopickup", v_feld, g_akt_spieler).f_name).f_type == 9 || a_item("autopickup", a_inventory("autopickup", v_feld, g_akt_spieler).f_name).f_type == 11)) {
				a_inventory("autopickup", v_feld, g_akt_spieler).f_status = 0;
			}
		}
		if (p_get_chance(100) < 20) {
			p_sound(38);
			p_message(413, 6);
			p_cleartile(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y, -1);
		}
		g_aktion = 1;
	}
	if (v_testfeld == 19) {
		p_sound(38);
		p_message(389, 1);
		p_setlaby(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y, a_spieler("autopickup", g_akt_spieler).f_level, 48, 0, 0);
		for (v_i = 1; v_i <= a_groesse("autopickup", a_spieler("autopickup", g_akt_spieler).f_level); v_i += 1) {
			for (v_j = 1; v_j <= a_groesse("autopickup", a_spieler("autopickup", g_akt_spieler).f_level); v_j += 1) {
				if (a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, v_i, v_j).f_feld == 2) {
					v_ausg_x = v_i;
					v_ausg_y = v_j;
				}
			}
		}
		if (a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, (v_ausg_x - 1), v_ausg_y).f_feld == 70) {
			p_setlaby((v_ausg_x - 1), v_ausg_y, a_spieler("autopickup", g_akt_spieler).f_level, 71, 0, 0);
		}
		if (a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, (v_ausg_x + 1), v_ausg_y).f_feld == 70) {
			p_setlaby((v_ausg_x + 1), v_ausg_y, a_spieler("autopickup", g_akt_spieler).f_level, 71, 0, 0);
		}
		if (a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, v_ausg_x, (v_ausg_y - 1)).f_feld == 70) {
			p_setlaby(v_ausg_x, (v_ausg_y - 1), a_spieler("autopickup", g_akt_spieler).f_level, 71, 0, 0);
		}
		if (a_labyrinth("autopickup", a_spieler("autopickup", g_akt_spieler).f_level, v_ausg_x, (v_ausg_y + 1)).f_feld == 70) {
			p_setlaby(v_ausg_x, (v_ausg_y + 1), a_spieler("autopickup", g_akt_spieler).f_level, 71, 0, 0);
		}
	}
	if (v_testfeld == 3) {
		if (a_spieler("autopickup", g_akt_spieler).f_level > 1) {
			p_message(439, 1);
			p_vorheriger_level();
			g_aktion = 1;
		} else {
			p_message(440, 1);
		}
	}
	if (v_testfeld == 2) {
		p_message(193, 1);
		if ((a_spieler("autopickup", g_akt_spieler).f_level + 1) > a_spieler("autopickup", g_akt_spieler).f_maxlevel) {
			p_aufsteigen();
		}
		p_neuer_level();
		g_aktion = 1;
	}
	if (v_testfeld == 206) {
		p_sound(20);
		p_message(700, 5);
		a_spieler("autopickup", g_akt_spieler).f_durst = (a_spieler("autopickup", g_akt_spieler).f_durst - 10);
		if (a_spieler("autopickup", g_akt_spieler).f_durst < 1) {
			a_spieler("autopickup", g_akt_spieler).f_durst = 0;
		}
		p_cleartile(a_spieler("autopickup", g_akt_spieler).f_character_x, a_spieler("autopickup", g_akt_spieler).f_character_y, -1);
		g_aktion = 1;
	}
}

static intptr_t p_banish_monster(int16_t v_spell, int16_t v_type) {
	struct st_monster_pointer v_act_monster;
	intptr_t v_destination = 0;
	int16_t v_mon_no = 0;
	int16_t v_special = 0;
	if (a_spieler("banish_monster", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
		g_spell_x = 0;
		g_spell_y = 0;
		v_destination = p_select_field(0);
		if (v_destination == 1) {
			g_blocked = 0;
			p_los(0);
			if (!g_blocked) {
				p_zug_verlieren();
				v_special = p_erfolgreich(v_spell);
				if (v_special > 0) {
					v_mon_no = p_getmonster((a_spieler("banish_monster", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("banish_monster", g_akt_spieler).f_character_y + g_spell_y), -1);
					v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
					if (v_mon_no) {
						if (a_monster("banish_monster", v_mon_no).f_art == v_type) {
							p_mana_verlieren(v_spell);
							p_sound(27);
							p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 3);
							p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
							p_zerstoert(2, 0);
							p_cleanup_monsters();
						} else {
							switch (v_type) {
							case 1:
								p_message(189, 2);
								break;
							case 2:
								p_message(887, 2);
								break;
							case 3:
								p_message(190, 2);
								break;
							case 4:
								p_message(601, 2);
								break;
							case 10:
								p_message(602, 2);
								break;
							default:
								p_message(189, 2);
								break;
							}
						}
					} else {
						p_message(600, 2);
					}
				}
			} else {
				p_message(233, 2);
			}
		}
	} else {
		p_message(194, 2);
	}
}

static intptr_t p_bogen() {
	int16_t v_akt_munition = 0;
	int16_t v_angriff = 0;
	int16_t v_art = 0;
	int8_t v_bogen = 0;
	intptr_t v_destination = 0;
	intptr_t v_i = 0;
	int16_t v_kritisch = 0;
	int16_t v_magisch = 0;
	int16_t v_mon_no = 0;
	int8_t v_pfeile = 0;
	int16_t v_schaden = 0;
	int8_t v_schleuder = 0;
	int8_t v_steine = 0;
	v_akt_munition = 0;
	v_bogen = 0;
	v_schleuder = 0;
	v_pfeile = 0;
	v_steine = 0;
	v_angriff = 0;
	v_schaden = 0;
	v_kritisch = 0;
	g_spell_x = 0;
	g_spell_y = 0;
	v_destination = p_select_field(0);
	if (v_destination == 1) {
		g_blocked = 0;
		p_los(1);
		if (!g_blocked) {
			for (v_i = 1; v_i <= 50; v_i += 1) {
				if (a_item("bogen", a_inventory("bogen", v_i, g_akt_spieler).f_name).f_type == 10 && a_inventory("bogen", v_i, g_akt_spieler).f_benutzt == 1) {
					if (a_inventory("bogen", v_i, g_akt_spieler).f_name == 19) {
						v_schleuder = 1;
					} else {
						v_bogen = 1;
					}
					v_angriff = a_item("bogen", a_inventory("bogen", v_i, g_akt_spieler).f_name).f_attri2;
					v_angriff = (v_angriff + a_spieler("bogen", g_akt_spieler).f_bogentreffergegenstand);
					v_schaden = a_item("bogen", a_inventory("bogen", v_i, g_akt_spieler).f_name).f_attri3;
					v_schaden = (v_schaden + a_spieler("bogen", g_akt_spieler).f_bogenschadengegenstand);
					v_kritisch = a_item("bogen", a_inventory("bogen", v_i, g_akt_spieler).f_name).f_attri4;
				}
			}
			v_art = 0;
			v_magisch = 0;
			for (v_i = 1; v_i <= 50; v_i += 1) {
				if (a_item("bogen", a_inventory("bogen", v_i, g_akt_spieler).f_name).f_type == 13 && a_inventory("bogen", v_i, g_akt_spieler).f_benutzt == 1) {
					if (a_inventory("bogen", v_i, g_akt_spieler).f_name == 291 || a_inventory("bogen", v_i, g_akt_spieler).f_name == 292) {
						v_steine = 1;
					} else {
						if (a_item("bogen", a_inventory("bogen", v_i, g_akt_spieler).f_name).f_magisch == 1) {
							v_magisch = 1;
						}
						v_pfeile = 1;
						if (a_inventory("bogen", v_i, g_akt_spieler).f_name == 170) {
							v_art = 1;
						}
						if (a_inventory("bogen", v_i, g_akt_spieler).f_name == 173) {
							v_art = 2;
						}
						if (a_inventory("bogen", v_i, g_akt_spieler).f_name == 172) {
							v_art = 3;
						}
					}
					v_akt_munition = v_i;
					a_inventory("bogen", v_akt_munition, g_akt_spieler).f_status = (a_inventory("bogen", v_akt_munition, g_akt_spieler).f_status - 1);
					if (a_inventory("bogen", v_akt_munition, g_akt_spieler).f_status < 1) {
						p_leeren(v_akt_munition);
						if (a_inventory("bogen", v_akt_munition, g_akt_spieler).f_status < 1) {
							p_message(263, 1);
						}
					}
					v_angriff = (v_angriff + a_item("bogen", a_inventory("bogen", v_i, g_akt_spieler).f_name).f_attri2);
					v_schaden = (v_schaden + a_item("bogen", a_inventory("bogen", v_i, g_akt_spieler).f_name).f_attri3);
					v_kritisch = (v_kritisch + a_item("bogen", a_inventory("bogen", v_i, g_akt_spieler).f_name).f_attri4);
				}
			}
			if ((v_bogen == 1 && v_pfeile == 1) || (v_schleuder == 1 && v_steine == 1)) {
				v_mon_no = p_getmonster((a_spieler("bogen", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("bogen", g_akt_spieler).f_character_y + g_spell_y), -1);
				if (p_has_trait2(v_mon_no, 17) > 0 && (!v_magisch || a_skills("bogen", 16, g_akt_spieler).f_gewaehlt == 1)) {
					g_aktion = 1;
					p_animate_projectile(5);
					p_message(736, 3);
				} else {
					g_aktion = 1;
					p_bogenangriff(v_bogen, v_schleuder, v_angriff, v_schaden, v_kritisch, v_art, v_akt_munition);
					if (v_bogen == 1 && a_skills("bogen", 31, g_akt_spieler).f_gewaehlt == 1 && p_getmonster((a_spieler("bogen", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("bogen", g_akt_spieler).f_character_y + g_spell_y), -1)) {
						p_bogenangriff(v_bogen, v_schleuder, v_angriff, v_schaden, v_kritisch, v_art, v_akt_munition);
					}
					p_cleanup_monsters();
				}
			} else {
				p_message(14, 3);
			}
		}
	}
}

static intptr_t p_bogenangriff(int16_t v_bogen, int16_t v_schleuder, int16_t v_angriff, int16_t v_schaden, int16_t v_kritisch, int16_t v_art, int16_t v_akt_munition) {
	struct st_monster_pointer v_act_monster;
	int16_t v_mon_no = 0;
	int16_t v_okay = 0;
	int16_t v_save_akt_spieler = 0;
	int16_t v_save_spell_x = 0;
	int16_t v_save_spell_y = 0;
	int16_t v_save_x = 0;
	int16_t v_save_y = 0;
	int16_t v_treffer = 0;
	intptr_t v_unsichtbar = 0;
	int16_t v_vergl_x = 0;
	int16_t v_vergl_y = 0;
	int16_t v_weg = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	intptr_t v_zaehl = 0;
	p_sound(33);
	if (v_bogen == 1) {
		v_schaden = (p_myrand(v_schaden) + 4);
		p_animate_projectile(5);
		v_okay = 0;
		if (v_art == 1) {
			v_okay = 1;
			p_sound(61);
			for (v_y = ((g_spell_y - 1) + 7); v_y <= ((g_spell_y + 1) + 7); v_y += 1) {
				for (v_x = ((g_spell_x - 1) + 7); v_x <= ((g_spell_x + 1) + 7); v_x += 1) {
					p_draw_tile(42, v_x, v_y, 1, 1, -1);
				}
			}
			p_flipbuffers(1);
			p_delay(g_mydelay);
		}
		if (v_art == 3) {
			v_okay = 1;
			p_sound(21);
			if (g_spell_x < 0) {
				v_y = 7;
				for (v_x = (g_spell_x + 7); v_x <= 6; v_x += 1) {
					p_draw_tile(204, v_x, v_y, 1, 1, -1);
				}
			}
			if (g_spell_x > 0) {
				v_y = 7;
				for (v_x = 8; v_x <= (g_spell_x + 7); v_x += 1) {
					p_draw_tile(204, v_x, v_y, 1, 1, -1);
				}
			}
			if (g_spell_y < 0) {
				v_x = 7;
				for (v_y = (g_spell_y + 7); v_y <= 6; v_y += 1) {
					p_draw_tile(204, v_x, v_y, 1, 1, -1);
				}
			}
			if (g_spell_y > 0) {
				v_x = 7;
				for (v_y = 8; v_y <= (g_spell_y + 7); v_y += 1) {
					p_draw_tile(204, v_x, v_y, 1, 1, -1);
				}
			}
			p_flipbuffers(1);
			p_delay(g_mydelay);
		}
	}
	if (v_schleuder == 1) {
		v_schaden = (p_myrand(v_schaden) + 1);
		p_animate_projectile(11);
	}
	v_okay = 0;
	if (v_art == 1) {
		v_okay = 1;
		p_hydra_zauber(v_schaden);
		v_save_akt_spieler = g_akt_spieler;
		v_vergl_x = (a_spieler("bogenangriff", g_akt_spieler).f_character_x + g_spell_x);
		v_vergl_y = (a_spieler("bogenangriff", g_akt_spieler).f_character_y + g_spell_y);
		for (g_akt_spieler = 1; g_akt_spieler <= g_nr_of_players; g_akt_spieler += 1) {
			if (a_spieler("bogenangriff", g_akt_spieler).f_status != 1) {
				continue;
			}
			if (a_spieler("bogenangriff", g_akt_spieler).f_character_x >= (v_vergl_x - 1) && a_spieler("bogenangriff", g_akt_spieler).f_character_x <= (v_vergl_x + 1) && a_spieler("bogenangriff", g_akt_spieler).f_character_y >= (v_vergl_y - 1) && a_spieler("bogenangriff", g_akt_spieler).f_character_y <= (v_vergl_y + 1) && a_spieler("bogenangriff", g_akt_spieler).f_level == a_spieler("bogenangriff", v_save_akt_spieler).f_level) {
				p_spielerschaden(2, 1, 15, 0, 0);
			}
		}
		g_akt_spieler = v_save_akt_spieler;
		v_save_spell_x = g_spell_x;
		v_save_spell_y = g_spell_y;
		for (v_zaehl = 1; v_zaehl <= 9; v_zaehl += 1) {
			v_schaden = (p_myrand(v_schaden) + 4);
			switch (v_zaehl) {
			case 1:
				g_spell_x = (g_spell_x - 1);
				g_spell_y = (g_spell_y - 1);
				break;
			case 2:
				g_spell_x = (g_spell_x + 1);
				break;
			case 3:
				g_spell_x = (g_spell_x + 1);
				break;
			case 4:
				g_spell_y = (g_spell_y + 1);
				g_spell_x = (g_spell_x - 2);
				break;
			case 5:
				g_spell_x = (g_spell_x + 1);
				break;
			case 6:
				g_spell_x = (g_spell_x + 1);
				break;
			case 7:
				g_spell_y = (g_spell_y + 1);
				g_spell_x = (g_spell_x - 2);
				break;
			case 8:
				g_spell_x = (g_spell_x + 1);
				break;
			case 9:
				g_spell_x = (g_spell_x + 1);
				break;
			}
			p_feuerschaden(v_schaden);
		}
		g_spell_x = v_save_spell_x;
		g_spell_y = v_save_spell_y;
	}
	if (v_art == 3) {
		v_okay = 1;
		v_weg = 0;
		v_save_x = g_spell_x;
		v_save_y = g_spell_y;
		if (g_spell_x < 0 && !v_weg) {
			v_weg = 1;
			for (g_spell_x = -1; g_spell_x >= v_save_x; g_spell_x -= 1) {
				v_schaden = (p_myrand(v_schaden) + 4);
				p_eisschaden(v_schaden);
			}
		}
		if (g_spell_x > 0 && !v_weg) {
			v_weg = 1;
			for (g_spell_x = 1; g_spell_x <= v_save_x; g_spell_x += 1) {
				v_schaden = (p_myrand(v_schaden) + 4);
				p_eisschaden(v_schaden);
			}
		}
		if (g_spell_y < 0 && !v_weg) {
			v_weg = 1;
			for (g_spell_y = -1; g_spell_y >= v_save_y; g_spell_y -= 1) {
				v_schaden = (p_myrand(v_schaden) + 4);
				p_eisschaden(v_schaden);
			}
		}
		if (g_spell_y > 0 && !v_weg) {
			v_weg = 1;
			for (g_spell_y = 1; g_spell_y <= v_save_y; g_spell_y += 1) {
				v_schaden = (p_myrand(v_schaden) + 4);
				p_eisschaden(v_schaden);
			}
		}
	}
	if (!v_okay) {
		v_mon_no = p_getmonster((a_spieler("bogenangriff", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("bogenangriff", g_akt_spieler).f_character_y + g_spell_y), -1);
		v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
		if (v_mon_no || p_isthydra((a_spieler("bogenangriff", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("bogenangriff", g_akt_spieler).f_character_y + g_spell_y)) == 1) {
			v_unsichtbar = 0;
			if (p_has_trait2(v_mon_no, 19) == 1) {
				v_unsichtbar = 1;
			}
			if (!v_unsichtbar || p_habich(109) || p_habich(121) || v_art == 2 || (v_unsichtbar == 1 && p_get_chance(100) < 20)) {
				v_angriff = (v_angriff + p_angriff());
				v_angriff = (v_angriff * 10);
				if (v_bogen == 1) {
					v_angriff = (v_angriff + a_spieler("bogenangriff", g_akt_spieler).f_bogentreffergegenstand);
					if (a_skills("bogenangriff", 30, g_akt_spieler).f_gewaehlt == 1) {
						v_angriff = (v_angriff + 50);
					}
				}
				if (v_angriff > 90) {
					v_angriff = 90;
				}
				if (v_angriff < 10) {
					v_angriff = 10;
				}
				if (v_art == 2) {
					v_angriff = 100;
				}
				v_treffer = p_get_chance(103);
				if (v_treffer < v_angriff) {
					v_kritisch = ((v_kritisch + p_luck()) + p_reflexe());
					if (a_skills("bogenangriff", 33, g_akt_spieler).f_gewaehlt == 1) {
						v_kritisch = (v_kritisch * 2);
						if (v_kritisch > 45) {
							v_kritisch = 45;
						}
					} else {
						if (v_kritisch > 35) {
							v_kritisch = 35;
						}
					}
					if (p_has_trait2(v_mon_no, 28)) {
						v_kritisch = 0;
					} else {
						if (p_get_chance(104) >= v_kritisch) {
							v_kritisch = 0;
						}
					}
					if (v_kritisch) {
						p_hydra_zauber(v_schaden);
						p_sound(p_random(12));
						p_clipsprite(38, 96, 224, 32, 32);
						p_displaytransparentsprite(38, (160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)));
						p_flipbuffers(1);
						p_delay(g_mydelay);
						p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
						p_zerstoert(3, 0);
					} else {
						p_hydra_zauber(v_schaden);
						p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
						p_monsterschaden(v_schaden);
						if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 7) {
							if (a_inventory("bogenangriff", v_akt_munition, g_akt_spieler).f_attri5 == 4 || a_inventory("bogenangriff", v_akt_munition, g_akt_spieler).f_name == 171) {
								v_art = a_monster("bogenangriff", v_mon_no).f_art;
								if (!p_has_trait2(v_mon_no, 3) && v_art != 3 && v_art != 9 && v_art != 10) {
									LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 4;
									LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration = (p_myrand(20) + 5);
								} else {
									p_message(456, 4);
								}
							}
						}
					}
				} else {
					p_message(16, 3);
				}
			} else {
				p_message(441, 3);
				a_spieler("bogenangriff", g_akt_spieler).f_speed = 0;
				g_aktion = 1;
			}
		}
	}
}

static intptr_t p_botch(int16_t v_spell) {
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	int16_t v_zw = 0;
	p_sound(57);
	p_message(979, 2);
	for (v_j = 1; v_j <= 3; v_j += 1) {
		for (v_i = 1; v_i <= 8; v_i += 1) {
			p_laby_screen2();
			p_clipsprite(37, ((v_i * 31) - 31), 221, 31, 31);
			p_displaytransparentsprite(37, 160, 160);
			p_flipbuffers(1);
			p_delay(90);
		}
	}
	v_zw = (p_myrand2(a_spells("botch", v_spell).f_level) + p_max(2, (a_spieler("botch", g_akt_spieler).f_power_score / 2)));
	p_spielerschaden(v_zw, 1, 16, 0, 0);
}

static intptr_t p_cast_it() {
	if (p_habich(161) > 0 && a_zauberliste("cast_it", (g_akt_zauber + g_akt_zauber_offset)) != 161) {
		p_cast_it2();
	}
	p_cast_it2();
}

static intptr_t p_cast_it2() {
	struct st_monster_pointer v_act_monster;
	int16_t v_akt_dauer = 0;
	int16_t v_akt_power = 0;
	int16_t v_akt_staerke = 0;
	int16_t v_art = 0;
	int16_t v_bg = 0;
	intptr_t v_destination = 0;
	int16_t v_duration = 0;
	int16_t v_egon = 0;
	int16_t v_feld = 0;
	int16_t v_floor = 0;
	int16_t v_food = 0;
	int16_t v_gain = 0;
	int16_t v_gesetzt = 0;
	int16_t v_hydra = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	int8_t v_jemand = 0;
	int16_t v_mon_no = 0;
	int16_t v_monsterart = 0;
	intptr_t v_neux = 0;
	intptr_t v_neuy = 0;
	int32_t v_new_duration = 0;
	intptr_t v_okay = 0;
	int16_t v_power = 0;
	int16_t v_r = 0;
	int16_t v_save1 = 0;
	int16_t v_save2 = 0;
	int16_t v_save3 = 0;
	intptr_t v_save_player = 0;
	int16_t v_schaden = 0;
	int16_t v_schaden_min = 0;
	int16_t v_special = 0;
	int16_t v_spell = 0;
	intptr_t v_stat2 = 0;
	int16_t v_testfeld = 0;
	int16_t v_testwert = 0;
	int16_t v_tile = 0;
	int16_t v_type = 0;
	int16_t v_welcher = 0;
	std::string v_willi;
	int16_t v_x = 0;
	int16_t v_x1 = 0;
	int16_t v_x2 = 0;
	int16_t v_x_diff = 0;
	intptr_t v_x_offset = 0;
	int16_t v_xmod_save = 0;
	int16_t v_y = 0;
	int16_t v_y1 = 0;
	int16_t v_y2 = 0;
	int16_t v_y_diff = 0;
	intptr_t v_y_offset = 0;
	int16_t v_ymod_save = 0;
	int16_t v_zaehl = 0;
	int16_t v_zaehler = 0;
	intptr_t v_zittern = 0;
	v_spell = a_zauberliste("cast_it2", (g_akt_zauber + g_akt_zauber_offset));
	if (a_spells("cast_it2", v_spell).f_duration == -2) {
		p_terminate_meta_magic();
	}
	v_special = 0;
	switch (v_spell) {
	case 3:
		if (a_spieler("cast_it2", g_akt_spieler).f_heal > 0) {
			if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
				p_zug_verlieren();
				p_mana_verlieren(v_spell);
				v_special = p_erfolgreich(v_spell);
				if (v_special) {
					a_spieler("cast_it2", g_akt_spieler).f_heal = (a_spieler("cast_it2", g_akt_spieler).f_heal - 1);
					v_gain = (p_myrand(3) + (((v_special * p_power(v_spell)) * 2) * p_get_weaving(-1)));
					a_spieler("cast_it2", g_akt_spieler).f_lifepoints = (a_spieler("cast_it2", g_akt_spieler).f_lifepoints + v_gain);
					if (a_spieler("cast_it2", g_akt_spieler).f_lifepoints > p_maxlife()) {
						a_spieler("cast_it2", g_akt_spieler).f_lifepoints = p_maxlife();
					}
					p_sound(16);
					for (v_j = 1; v_j <= 5; v_j += 1) {
						for (v_i = 1; v_i <= 4; v_i += 1) {
							p_laby_screen2();
							p_clipsprite(17, ((v_i * 40) - 40), 1, 39, 39);
							p_displaytransparentsprite(17, 156, 156);
							p_flipbuffers(1);
							p_delay(70);
						}
					}
					p_laby_screen();
				}
			} else {
				p_message(194, 2);
			}
		} else {
			p_message(694, 2);
			p_zug_verlieren();
		}
		break;
	case 100:
		if (a_spieler("cast_it2", g_akt_spieler).f_heal_others > 0) {
			if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
				g_spell_x = 0;
				g_spell_y = 0;
				v_destination = p_select_field(0);
				if (v_destination == 1) {
					g_blocked = 0;
					p_los(0);
					if (!g_blocked) {
						p_zug_verlieren();
						p_mana_verlieren(v_spell);
						v_special = p_erfolgreich(v_spell);
						if (v_special) {
							a_spieler("cast_it2", g_akt_spieler).f_heal_others = (a_spieler("cast_it2", g_akt_spieler).f_heal_others - 1);
							v_jemand = 0;
							for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
								if ((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x) == a_spieler("cast_it2", v_i).f_character_x && (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y) == a_spieler("cast_it2", v_i).f_character_y && a_spieler("cast_it2", v_i).f_level == a_spieler("cast_it2", g_akt_spieler).f_level) {
									v_jemand = v_i;
								}
							}
							if (v_jemand > 0) {
								v_gain = (p_myrand(3) + (((v_special * p_power(v_spell)) * 2) * p_get_weaving(-1)));
								a_spieler("cast_it2", v_jemand).f_lifepoints = (a_spieler("cast_it2", v_jemand).f_lifepoints + v_gain);
								v_save_player = g_akt_spieler;
								g_akt_spieler = v_jemand;
								if (a_spieler("cast_it2", v_jemand).f_lifepoints > p_maxlife()) {
									a_spieler("cast_it2", v_jemand).f_lifepoints = p_maxlife();
								}
								g_akt_spieler = v_save_player;
								p_sound(16);
								for (v_j = 1; v_j <= 5; v_j += 1) {
									for (v_i = 1; v_i <= 4; v_i += 1) {
										p_laby_screen2();
										p_clipsprite(17, ((v_i * 40) - 40), 1, 39, 39);
										p_displaytransparentsprite(17, (156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)));
										p_flipbuffers(1);
										p_delay(70);
									}
								}
							} else {
								p_message(246, 2);
							}
							p_laby_screen();
						}
					} else {
						p_message(233, 2);
					}
				}
			} else {
				p_message(194, 2);
			}
		} else {
			p_message(694, 2);
			p_zug_verlieren();
		}
		break;
	case 167:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_jemand = 0;
						for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
							if (a_spieler("cast_it2", g_akt_spieler).f_creature_typ > 0 && (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x) == a_spieler("cast_it2", v_i).f_creature_x && (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y) == a_spieler("cast_it2", v_i).f_creature_y && a_spieler("cast_it2", v_i).f_level == a_spieler("cast_it2", g_akt_spieler).f_level) {
								v_jemand = v_i;
							}
						}
						if (v_jemand > 0) {
							v_gain = (p_myrand(3) + (((v_special * p_power(v_spell)) * 2) * p_get_weaving(-1)));
							a_spieler("cast_it2", v_jemand).f_creature_lifepoints = (a_spieler("cast_it2", v_jemand).f_creature_lifepoints + v_gain);
							if (a_spieler("cast_it2", v_jemand).f_creature_lifepoints > a_spieler("cast_it2", v_jemand).f_creature_maxlifepoints) {
								a_spieler("cast_it2", v_jemand).f_creature_lifepoints = a_spieler("cast_it2", v_jemand).f_creature_maxlifepoints;
							}
							p_sound(16);
							for (v_j = 1; v_j <= 5; v_j += 1) {
								for (v_i = 1; v_i <= 4; v_i += 1) {
									p_laby_screen2();
									p_clipsprite(17, ((v_i * 40) - 40), 1, 39, 39);
									p_displaytransparentsprite(17, (156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)));
									p_flipbuffers(1);
									p_delay(70);
								}
							}
						} else {
							p_message(246, 2);
						}
						p_laby_screen();
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 69:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_jemand = 0;
						for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
							if (a_spieler("cast_it2", g_akt_spieler).f_creature_typ > 0 && (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x) == a_spieler("cast_it2", v_i).f_creature_x && (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y) == a_spieler("cast_it2", v_i).f_creature_y && a_spieler("cast_it2", v_i).f_level == a_spieler("cast_it2", g_akt_spieler).f_level) {
								v_jemand = v_i;
							}
						}
						if (v_jemand > 0) {
							a_spieler("cast_it2", v_jemand).f_creature_poison = 0;
							p_sound(16);
							for (v_j = 1; v_j <= 5; v_j += 1) {
								for (v_i = 1; v_i <= 4; v_i += 1) {
									p_laby_screen2();
									p_clipsprite(17, ((v_i * 40) - 40), 1, 39, 39);
									p_displaytransparentsprite(17, (156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)));
									p_flipbuffers(1);
									p_delay(70);
								}
							}
						} else {
							p_message(246, 2);
						}
						p_laby_screen();
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 101:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_jemand = 0;
						for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
							if ((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x) == a_spieler("cast_it2", v_i).f_character_x && (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y) == a_spieler("cast_it2", v_i).f_character_y && a_spieler("cast_it2", v_i).f_level == a_spieler("cast_it2", g_akt_spieler).f_level) {
								v_jemand = v_i;
							}
						}
						if (v_jemand > 0) {
							a_spieler("cast_it2", v_jemand).f_poison = 0;
							p_sound(16);
							for (v_j = 1; v_j <= 5; v_j += 1) {
								for (v_i = 1; v_i <= 4; v_i += 1) {
									p_laby_screen2();
									p_clipsprite(17, ((v_i * 40) - 40), 1, 39, 39);
									p_displaytransparentsprite(17, (156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)));
									p_flipbuffers(1);
									p_delay(70);
								}
							}
						} else {
							p_message(246, 2);
						}
						p_laby_screen();
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 107:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_jemand = 0;
						for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
							if ((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x) == a_spieler("cast_it2", v_i).f_character_x && (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y) == a_spieler("cast_it2", v_i).f_character_y && a_spieler("cast_it2", v_i).f_level == a_spieler("cast_it2", g_akt_spieler).f_level) {
								v_jemand = v_i;
							}
						}
						if (v_jemand > 0) {
							a_spieler("cast_it2", v_jemand).f_fluch = 0;
							a_spieler("cast_it2", v_jemand).f_fluchdauer = 0;
							p_sound(16);
							for (v_j = 1; v_j <= 5; v_j += 1) {
								for (v_i = 1; v_i <= 4; v_i += 1) {
									p_laby_screen2();
									p_clipsprite(17, ((v_i * 40) - 40), 1, 39, 39);
									p_displaytransparentsprite(17, (156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)));
									p_flipbuffers(1);
									p_delay(70);
								}
							}
						} else {
							p_message(246, 2);
						}
						p_laby_screen();
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 78:
		if (a_spieler("cast_it2", g_akt_spieler).f_full_healing > 0) {
			if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
				p_zug_verlieren();
				p_mana_verlieren(v_spell);
				v_special = p_erfolgreich(v_spell);
				if (v_special) {
					a_spieler("cast_it2", g_akt_spieler).f_full_healing = (a_spieler("cast_it2", g_akt_spieler).f_full_healing - 1);
					a_spieler("cast_it2", g_akt_spieler).f_lifepoints = p_maxlife();
					p_sound(16);
					for (v_j = 1; v_j <= 5; v_j += 1) {
						for (v_i = 1; v_i <= 4; v_i += 1) {
							p_laby_screen2();
							p_clipsprite(17, ((v_i * 40) - 40), 1, 39, 39);
							p_displaytransparentsprite(17, 156, 156);
							p_flipbuffers(1);
							p_delay(70);
						}
					}
					p_laby_screen();
				}
			} else {
				p_message(194, 2);
			}
		} else {
			p_message(694, 2);
			p_zug_verlieren();
		}
		break;
	case 13:
		if (a_spieler("cast_it2", g_akt_spieler).f_ease_pain > 0) {
			if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
				p_zug_verlieren();
				p_mana_verlieren(v_spell);
				v_special = p_erfolgreich(v_spell);
				if (v_special) {
					a_spieler("cast_it2", g_akt_spieler).f_ease_pain = (a_spieler("cast_it2", g_akt_spieler).f_ease_pain - 1);
					v_gain = (p_myrand(3) + (((v_special * p_power(v_spell)) * 3) * p_get_weaving(-1)));
					a_spieler("cast_it2", g_akt_spieler).f_lifepoints = (a_spieler("cast_it2", g_akt_spieler).f_lifepoints + v_gain);
					if (a_spieler("cast_it2", g_akt_spieler).f_lifepoints > p_maxlife()) {
						a_spieler("cast_it2", g_akt_spieler).f_lifepoints = p_maxlife();
					}
					p_sound(16);
					for (v_j = 1; v_j <= 5; v_j += 1) {
						for (v_i = 1; v_i <= 4; v_i += 1) {
							p_laby_screen2();
							p_clipsprite(17, ((v_i * 40) - 40), 1, 39, 39);
							p_displaytransparentsprite(17, 156, 156);
							p_flipbuffers(1);
							p_delay(70);
						}
					}
					p_laby_screen();
				}
			} else {
				p_message(194, 2);
			}
		} else {
			p_message(694, 2);
			p_zug_verlieren();
		}
		break;
	case 173:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(27);
				p_sternchen(160, 160, 6);
				do {
					v_welcher = (p_random(183) + 1);
					a_zauberliste("cast_it2", (g_akt_zauber + g_akt_zauber_offset)) = v_welcher;
				} while (!(a_spells("cast_it2", v_welcher).f_level == 1 && v_welcher != 173 && a_spells("cast_it2", v_welcher).f_duration != -1));
				p_nachricht7(a_spells("cast_it2", v_welcher).f_name[(1 + g_language)], 2);
				g_item_spell = p_power(173);
				p_cast_it();
				g_item_spell = 0;
				p_laby_screen();
				throw Lv_nach_zauber;
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 174:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > p_zauberkosten(v_spell) || (g_item_spell && a_spieler("cast_it2", g_akt_spieler).f_mana > 0)) {
			v_okay = p_opfern();
			if (v_okay > 0) {
				p_leeren(v_okay);
				p_zug_verlieren();
				p_mana_verlieren(v_spell);
				v_special = p_erfolgreich(v_spell);
				if (v_special) {
					p_sound(27);
					p_sternchen(160, 160, 6);
					v_save1 = a_spieler("cast_it2", g_akt_spieler).f_lifepoints;
					v_save2 = a_spieler("cast_it2", g_akt_spieler).f_maxlifepoints;
					v_save3 = a_spieler("cast_it2", g_akt_spieler).f_lifegain;
					a_spieler("cast_it2", g_akt_spieler).f_lifepoints = a_spieler("cast_it2", g_akt_spieler).f_mana;
					a_spieler("cast_it2", g_akt_spieler).f_maxlifepoints = a_spieler("cast_it2", g_akt_spieler).f_maxmana;
					a_spieler("cast_it2", g_akt_spieler).f_lifegain = a_spieler("cast_it2", g_akt_spieler).f_managain;
					if (v_save1 > v_save2) {
						v_save1 = v_save2;
					}
					a_spieler("cast_it2", g_akt_spieler).f_mana = v_save1;
					a_spieler("cast_it2", g_akt_spieler).f_maxmana = v_save2;
					a_spieler("cast_it2", g_akt_spieler).f_managain = v_save3;
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 126:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(16);
				for (v_j = 1; v_j <= 5; v_j += 1) {
					for (v_i = 1; v_i <= 4; v_i += 1) {
						p_laby_screen2();
						p_clipsprite(17, ((v_i * 40) - 40), 1, 39, 39);
						p_displaytransparentsprite(17, 156, 156);
						p_flipbuffers(1);
						p_delay(70);
					}
				}
				for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
					if (a_spieler("cast_it2", v_i).f_status == 3) {
						a_spieler("cast_it2", v_i).f_status = 1;
						a_spieler("cast_it2", v_i).f_maxlifepoints = (a_spieler("cast_it2", v_i).f_maxlifepoints / 2);
						a_spieler("cast_it2", v_i).f_lifepoints = p_maxlife();
					}
				}
				p_laby_screen();
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 1:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(18);
				p_sternchen(156, 156, 5);
				p_eintragen(200, 3, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 175:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(28);
				p_sternchen(156, 156, 5);
				p_eintragen(175, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 176:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(28);
				p_sternchen(156, 156, 5);
				p_eintragen(176, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 156:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(29);
				p_sternchen(156, 156, 6);
				p_eintragen(v_spell, 1, -2, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 157:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(29);
				p_sternchen(156, 156, 6);
				p_eintragen(v_spell, 1, -2, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 158:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(29);
				p_sternchen(156, 156, 6);
				p_eintragen(v_spell, 1, -2, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 160:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(29);
				p_sternchen(156, 156, 6);
				p_eintragen(v_spell, 1, -2, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 161:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(29);
				p_sternchen(156, 156, 6);
				p_eintragen(v_spell, 1, -2, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 159:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(29);
				p_sternchen(156, 156, 6);
				p_eintragen(v_spell, 1, -2, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 151:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(16);
				p_sternchen(156, 156, 3);
				p_eintragen(v_spell, 1, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 141:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(21);
				p_sternchen(156, 156, 4);
				p_eintragen(v_spell, 2, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 142:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(16);
				p_sternchen(156, 156, 3);
				p_eintragen(v_spell, 1, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 154:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(48);
				p_sternchen(156, 156, 3);
				p_eintragen(v_spell, 1, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 145:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(53);
				p_sternchen(156, 156, 6);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 86:
		p_shapechange(86, v_spell);
		break;
	case 87:
		p_shapechange(87, v_spell);
		break;
	case 88:
		p_shapechange(88, v_spell);
		break;
	case 89:
		p_shapechange(89, v_spell);
		break;
	case 90:
		p_shapechange(90, v_spell);
		break;
	case 82:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(32);
				p_sternchen(160, 160, 4);
				p_eintragen(82, 3, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 77:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(16);
				p_sternchen(160, 160, 5);
				a_spieler("cast_it2", g_akt_spieler).f_fluch = 0;
				a_spieler("cast_it2", g_akt_spieler).f_fluchdauer = 0;
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 70:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(28);
				p_sternchen(160, 160, 5);
				p_eintragen(70, 1, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 71:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(18);
				p_sternchen(160, 160, 6);
				p_eintragen(71, 1, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 26:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(28);
				p_sternchen(160, 160, 5);
				p_eintragen(61, 1, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 7:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(18);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, 1, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 68:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(28);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, 1, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 124:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(28);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, 1, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 102:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(27);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, 1, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 59:
		if (a_spieler("cast_it2", g_akt_spieler).f_macht > 0) {
			if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
				p_zug_verlieren();
				p_mana_verlieren(v_spell);
				v_special = p_erfolgreich(v_spell);
				if (v_special) {
					v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
					a_spieler("cast_it2", g_akt_spieler).f_macht -= 1;
					p_sound(18);
					p_sternchen(160, 160, 5);
					p_eintragen(v_spell, 1, v_power, 0);
				}
			} else {
				p_message(194, 2);
			}
		} else {
			p_message(35, 2);
		}
		break;
	case 75:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(14);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 85:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(14);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 109:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(14);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 110:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(14);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 168:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(14);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 169:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(14);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 170:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(14);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 171:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(14);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 30:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(18);
				p_sternchen(160, 160, 5);
				p_eintragen(200, 5, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 31:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(18);
				p_sternchen(160, 160, 5);
				p_eintragen(200, 6, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 74:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(18);
				p_sternchen(160, 160, 5);
				p_eintragen(200, -1, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 41:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(18);
				p_sternchen(160, 160, 5);
				p_eintragen(200, 4, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 42:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(28);
				p_vergolden();
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 20:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				p_sound(29);
				p_faechergrafik();
				v_x1 = (a_spieler("cast_it2", g_akt_spieler).f_character_x - ((v_akt_power * 2) * p_get_weaving(-1)));
				v_y1 = (a_spieler("cast_it2", g_akt_spieler).f_character_y - ((v_akt_power * 2) * p_get_weaving(-1)));
				v_x2 = (a_spieler("cast_it2", g_akt_spieler).f_character_x + ((v_akt_power * 2) * p_get_weaving(-1)));
				v_y2 = (a_spieler("cast_it2", g_akt_spieler).f_character_y + ((v_akt_power * 2) * p_get_weaving(-1)));
				if (v_x1 < 1) {
					v_x1 = 1;
				}
				if (v_y1 < 1) {
					v_y1 = 1;
				}
				if (v_x2 > a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level)) {
					v_x2 = a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level);
				}
				if (v_y2 > a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level)) {
					v_y2 = a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level);
				}
				for (v_i = v_x1; v_i <= v_x2; v_i += 1) {
					for (v_j = v_y1; v_j <= v_y2; v_j += 1) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, v_i, v_j).f_feld >= 22 && a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, v_i, v_j).f_feld <= 30) {
							if (p_random(99) < 80) {
								a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, v_i, v_j).f_feld += 9;
							}
						}
					}
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 32:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				p_sound(29);
				p_faechergrafik();
				p_changecurrentelement(ll_monster_list, a_first_monster("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level).f_p);
				v_r = ((v_akt_power * 2) * p_get_weaving(-1));
				while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == a_spieler("cast_it2", g_akt_spieler).f_level) {
					if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x > (a_spieler("cast_it2", g_akt_spieler).f_character_x - v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x < (a_spieler("cast_it2", g_akt_spieler).f_character_x + v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y > (a_spieler("cast_it2", g_akt_spieler).f_character_y - v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y < (a_spieler("cast_it2", g_akt_spieler).f_character_y + v_r)) {
						if (a_monster("cast_it2", LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number).f_art == 3) {
							g_spell_x = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x - a_spieler("cast_it2", g_akt_spieler).f_character_x);
							g_spell_y = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y - a_spieler("cast_it2", g_akt_spieler).f_character_y);
							p_sound(15);
							p_zerstoert(2, 0);
						}
					}
					p_nextelement(ll_monster_list);
				}
				p_cleanup_monsters();
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 60:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				p_sound(29);
				p_faechergrafik();
				v_x1 = (a_spieler("cast_it2", g_akt_spieler).f_character_x - ((v_akt_power * 2) * p_get_weaving(-1)));
				v_y1 = (a_spieler("cast_it2", g_akt_spieler).f_character_y - ((v_akt_power * 2) * p_get_weaving(-1)));
				v_x2 = (a_spieler("cast_it2", g_akt_spieler).f_character_x + ((v_akt_power * 2) * p_get_weaving(-1)));
				v_y2 = (a_spieler("cast_it2", g_akt_spieler).f_character_y + ((v_akt_power * 2) * p_get_weaving(-1)));
				if (v_x1 < 1) {
					v_x1 = 1;
				}
				if (v_y1 < 1) {
					v_y1 = 1;
				}
				if (v_x2 > a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level)) {
					v_x2 = a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level);
				}
				if (v_y2 > a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level)) {
					v_y2 = a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level);
				}
				for (v_i = v_x1; v_i <= v_x2; v_i += 1) {
					for (v_j = v_y1; v_j <= v_y2; v_j += 1) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, v_i, v_j).f_feld == 40 || a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, v_i, v_j).f_feld == 41 || a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, v_i, v_j).f_feld == 65) {
							p_cleartile(v_i, v_j, -1);
						}
					}
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 64:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				p_sound(29);
				p_faechergrafik();
				v_x1 = (a_spieler("cast_it2", g_akt_spieler).f_character_x - ((v_akt_power * 2) * p_get_weaving(-1)));
				v_y1 = (a_spieler("cast_it2", g_akt_spieler).f_character_y - ((v_akt_power * 2) * p_get_weaving(-1)));
				v_x2 = (a_spieler("cast_it2", g_akt_spieler).f_character_x + ((v_akt_power * 2) * p_get_weaving(-1)));
				v_y2 = (a_spieler("cast_it2", g_akt_spieler).f_character_y + ((v_akt_power * 2) * p_get_weaving(-1)));
				if (v_x1 < 1) {
					v_x1 = 1;
				}
				if (v_y1 < 1) {
					v_y1 = 1;
				}
				if (v_x2 > a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level)) {
					v_x2 = a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level);
				}
				if (v_y2 > a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level)) {
					v_y2 = a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level);
				}
				for (v_i = v_x1; v_i <= v_x2; v_i += 1) {
					for (v_j = v_y1; v_j <= v_y2; v_j += 1) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, v_i, v_j).f_feld >= 22 && a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, v_i, v_j).f_feld <= 39) {
							p_cleartile(v_i, v_j, -1);
						}
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, v_i, v_j).f_feld == 208) {
							p_cleartile(v_i, v_j, -1);
						}
					}
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 184:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				p_sound(29);
				p_faechergrafik();
				v_x1 = (a_spieler("cast_it2", g_akt_spieler).f_character_x - ((v_akt_power * 2) * p_get_weaving(-1)));
				v_y1 = (a_spieler("cast_it2", g_akt_spieler).f_character_y - ((v_akt_power * 2) * p_get_weaving(-1)));
				v_x2 = (a_spieler("cast_it2", g_akt_spieler).f_character_x + ((v_akt_power * 2) * p_get_weaving(-1)));
				v_y2 = (a_spieler("cast_it2", g_akt_spieler).f_character_y + ((v_akt_power * 2) * p_get_weaving(-1)));
				if (v_x1 < 1) {
					v_x1 = 1;
				}
				if (v_y1 < 1) {
					v_y1 = 1;
				}
				if (v_x2 > a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level)) {
					v_x2 = a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level);
				}
				if (v_y2 > a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level)) {
					v_y2 = a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level);
				}
				for (v_i = v_x1; v_i <= v_x2; v_i += 1) {
					for (v_j = v_y1; v_j <= v_y2; v_j += 1) {
						v_feld = a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, v_i, v_j).f_feld;
						if (v_feld == 149 || v_feld == 158 || v_feld == 159) {
							p_cleartile(v_i, v_j, -1);
						}
					}
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 18:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				p_sound(28);
				p_sternchen(160, 160, 2);
				v_akt_dauer = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				v_akt_staerke = (p_myrand(3) + ((v_akt_power * 2) * p_get_weaving(-1)));
				p_eintragen(18, v_akt_staerke, v_akt_dauer, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 33:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				p_sound(28);
				p_sternchen(160, 160, 2);
				v_akt_dauer = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				v_akt_staerke = (p_myrand(3) + ((v_akt_power * 3) * p_get_weaving(-1)));
				p_eintragen(18, v_akt_staerke, v_akt_dauer, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 118:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(28);
				p_sternchen(160, 160, 2);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 119:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(28);
				p_sternchen(160, 160, 2);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 130:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(28);
				p_sternchen(160, 160, 7);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 34:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(16);
				for (v_j = 1; v_j <= 5; v_j += 1) {
					for (v_i = 1; v_i <= 4; v_i += 1) {
						p_laby_screen2();
						p_clipsprite(17, ((v_i * 40) - 40), 1, 39, 39);
						p_displaytransparentsprite(17, 156, 156);
						p_flipbuffers(1);
						p_delay(70);
					}
				}
				a_spieler("cast_it2", g_akt_spieler).f_poison = 0;
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 172:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(16);
				for (v_j = 1; v_j <= 5; v_j += 1) {
					for (v_i = 1; v_i <= 4; v_i += 1) {
						p_laby_screen2();
						p_clipsprite(17, ((v_i * 40) - 40), 1, 39, 39);
						p_displaytransparentsprite(17, 156, 156);
						p_flipbuffers(1);
						p_delay(70);
					}
				}
				a_spieler("cast_it2", g_akt_spieler).f_krankheit = 0;
				a_spieler("cast_it2", g_akt_spieler).f_krankheitdauer = 0;
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 6:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(28);
				p_sternchen(160, 160, 2);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 44:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(28);
				p_sternchen(160, 160, 2);
				for (v_i = 1; v_i <= 30; v_i += 1) {
					if (a_aktive("cast_it2", v_i, g_akt_spieler).f_dauer > 0 && a_aktive("cast_it2", v_i, g_akt_spieler).f_dauer != -1) {
						a_spieler("cast_it2", g_akt_spieler).f_mana = (a_spieler("cast_it2", g_akt_spieler).f_mana + 1);
						a_aktive("cast_it2", v_i, g_akt_spieler).f_nr = 0;
						a_aktive("cast_it2", v_i, g_akt_spieler).f_staerke = 0;
						a_aktive("cast_it2", v_i, g_akt_spieler).f_dauer = 0;
					}
				}
				if (a_spieler("cast_it2", g_akt_spieler).f_mana > p_maxmana()) {
					a_spieler("cast_it2", g_akt_spieler).f_mana = p_maxmana();
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 9:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(18);
				p_sternchen(160, 160, 5);
				p_eintragen(200, 4, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 12:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_power = (((a_spells("cast_it2", v_spell).f_duration * v_special) * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(18);
				p_sternchen(160, 160, 5);
				p_eintragen(200, 4, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 45:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(14);
				p_sternchen(160, 160, 6);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 46:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(14);
				p_sternchen(160, 160, 6);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 52:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(14);
				p_sternchen(160, 160, 6);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 47:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = ((v_special * p_power(v_spell)) * p_get_weaving(-1));
				p_sound(14);
				p_sternchen(160, 160, 6);
				for (v_i = 1; v_i <= 30; v_i += 1) {
					if (a_aktive("cast_it2", v_i, g_akt_spieler).f_dauer > 0) {
						v_new_duration = (a_aktive("cast_it2", v_i, g_akt_spieler).f_dauer + v_akt_power);
						if (v_new_duration > 30000) {
							v_new_duration = 30000;
						}
						a_aktive("cast_it2", v_i, g_akt_spieler).f_dauer = v_new_duration;
					}
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 43:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(21);
				p_sternchen(160, 160, 4);
				do {
					v_neux = (p_random((a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level) - 3)) + 2);
					v_neuy = (p_random((a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level) - 3)) + 2);
				} while (!(a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, v_neux, v_neuy).f_feld == a_inhalt("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level)));
				a_spieler("cast_it2", g_akt_spieler).f_character_x = v_neux;
				a_spieler("cast_it2", g_akt_spieler).f_character_y = v_neuy;
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 61:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(17);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 4:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(17);
				p_show_automap(4);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 105:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(17);
				p_show_automap(3);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 122:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(17);
				p_show_automap(5);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 123:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(17);
				p_show_automap(6);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 10:
		if (a_spieler("cast_it2", g_akt_spieler).f_magic_apple > 0) {
			if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
				p_zug_verlieren();
				p_mana_verlieren(v_spell);
				v_special = p_erfolgreich(v_spell);
				if (v_special) {
					a_spieler("cast_it2", g_akt_spieler).f_magic_apple = (a_spieler("cast_it2", g_akt_spieler).f_magic_apple - 1);
					p_sound(27);
					p_sternchen(160, 160, 6);
					p_in_rucksack(242, 1, 0);
				}
			} else {
				p_message(194, 2);
			}
		} else {
			p_message(45, 2);
		}
		break;
	case 53:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(27);
				p_sternchen(160, 160, 6);
				p_in_rucksack(163, 1, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 84:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(27);
				for (v_i = 1; v_i <= 8; v_i += 1) {
					p_laby_screen2();
					p_clipsprite(37, ((v_i * 31) - 31), 62, 31, 31);
					p_displaytransparentsprite(37, 160, 160);
					p_flipbuffers(1);
					p_delay(90);
				}
				for (v_i = 1; v_i <= 8; v_i += 1) {
					p_laby_screen2();
					p_clipsprite(37, ((v_i * 31) - 31), 93, 31, 31);
					p_displaytransparentsprite(37, 160, 160);
					p_flipbuffers(1);
					p_delay(90);
				}
				p_in_rucksack(254, 1, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 54:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(27);
				p_sternchen(160, 160, 6);
				p_in_rucksack(147, 1, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 104:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(27);
				p_sternchen(160, 160, 6);
				p_in_rucksack(156, 1, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 135:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(27);
				p_sternchen(160, 160, 6);
				p_in_rucksack(157, 1, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 177:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(27);
				p_sternchen(160, 160, 6);
				p_in_rucksack(400, 1, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 11:
		if (a_spieler("cast_it2", g_akt_spieler).f_refresh > 0) {
			if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
				p_zug_verlieren();
				p_mana_verlieren(v_spell);
				v_special = p_erfolgreich(v_spell);
				if (v_special) {
					a_spieler("cast_it2", g_akt_spieler).f_refresh = (a_spieler("cast_it2", g_akt_spieler).f_refresh - 1);
					p_sound(20);
					for (v_i = 1; v_i <= 8; v_i += 1) {
						p_laby_screen2();
						p_clipsprite(37, ((v_i * 31) - 31), 319, 31, 31);
						p_displaytransparentsprite(37, 160, 160);
						p_flipbuffers(1);
						p_delay(90);
					}
					for (v_i = 1; v_i <= 8; v_i += 1) {
						p_laby_screen2();
						p_clipsprite(37, ((v_i * 31) - 31), 350, 31, 31);
						p_displaytransparentsprite(37, 160, 160);
						p_flipbuffers(1);
						p_delay(90);
					}
					a_spieler("cast_it2", g_akt_spieler).f_durst = (a_spieler("cast_it2", g_akt_spieler).f_durst - 60);
					if (a_spieler("cast_it2", g_akt_spieler).f_durst < 1) {
						a_spieler("cast_it2", g_akt_spieler).f_durst = 0;
					}
				}
			} else {
				p_message(194, 2);
			}
		} else {
			p_message(45, 2);
		}
		break;
	case 143:
		p_zug_verlieren();
		p_sound(14);
		p_sternchen(156, 156, 5);
		p_stop_songs();
		p_eintragen(v_spell, 1, -1, -1);
		break;
	case 165:
		p_zug_verlieren();
		p_sound(14);
		p_sternchen(156, 156, 5);
		p_stop_songs();
		p_eintragen(v_spell, 1, -1, -1);
		break;
	case 166:
		p_zug_verlieren();
		p_sound(14);
		p_sternchen(156, 156, 5);
		p_stop_songs();
		p_eintragen(v_spell, 1, -1, -1);
		break;
	case 183:
		p_zug_verlieren();
		p_sound(14);
		p_sternchen(156, 156, 5);
		p_stop_songs();
		p_eintragen(v_spell, 1, -1, -1);
		break;
	case 14:
		p_zug_verlieren();
		p_sound(21);
		p_sternchen(160, 160, 5);
		p_stop_songs();
		p_eintragen(40, 1, -1, -1);
		break;
	case 35:
		p_zug_verlieren();
		p_sound(17);
		p_sternchen(160, 160, 1);
		p_stop_songs();
		p_eintragen(v_spell, 1, -1, -1);
		break;
	case 36:
		p_zug_verlieren();
		p_sound(17);
		p_sternchen(160, 160, 1);
		p_stop_songs();
		p_eintragen(v_spell, 1, -1, -1);
		break;
	case 37:
		p_zug_verlieren();
		p_sound(17);
		p_sternchen(160, 160, 1);
		p_stop_songs();
		p_eintragen(v_spell, 1, -1, -1);
		break;
	case 38:
		p_zug_verlieren();
		p_sound(17);
		p_sternchen(160, 160, 1);
		p_stop_songs();
		p_eintragen(v_spell, 1, -1, -1);
		break;
	case 79:
		p_zug_verlieren();
		p_sound(17);
		p_sternchen(160, 160, 1);
		p_stop_songs();
		p_eintragen(v_spell, 1, -1, -1);
		break;
	case 80:
		p_zug_verlieren();
		p_sound(17);
		p_sternchen(160, 160, 1);
		p_stop_songs();
		p_eintragen(v_spell, 1, -1, -1);
		break;
	case 121:
		p_zug_verlieren();
		p_sound(17);
		p_sternchen(160, 160, 1);
		p_stop_songs();
		p_eintragen(v_spell, 1, -1, -1);
		break;
	case 40:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(21);
				p_sternchen(160, 160, 5);
				p_eintragen(v_spell, 3, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 120:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(23);
				p_sternchen(160, 160, 5);
				v_akt_power = (v_special * p_power(v_spell));
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 48:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(21);
				p_sternchen(160, 160, 5);
				v_akt_power = (v_special * p_power(v_spell));
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 49:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				v_akt_power = (v_special * p_power(v_spell));
				v_power = ((a_spells("cast_it2", v_spell).f_duration * v_akt_power) * p_get_weaving(-1));
				p_sound(21);
				p_sternchen(160, 160, 5);
				v_akt_power = (v_special * p_power(v_spell));
				p_eintragen(v_spell, v_akt_power, v_power, 0);
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 8:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_sound(27);
						for (v_j = 1; v_j <= 2; v_j += 1) {
							for (v_i = 1; v_i <= 8; v_i += 1) {
								p_laby_screen2();
								p_clipsprite(37, ((v_i * 31) - 31), 190, 31, 31);
								p_displaytransparentsprite(37, (160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)));
								p_flipbuffers(1);
								p_delay(90);
							}
						}
						v_testfeld = a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
						if (v_testfeld == 163) {
							p_setlaby((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), a_spieler("cast_it2", g_akt_spieler).f_level, 160, 0, 0);
						} else {
							if (p_istknochen(v_testfeld) == 1) {
								p_setlaby((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), a_spieler("cast_it2", g_akt_spieler).f_level, 9, 0, 0);
							}
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 16:
		p_banish_monster(v_spell, 1);
		break;
	case 17:
		p_banish_monster(v_spell, 3);
		break;
	case 111:
		p_banish_monster(v_spell, 10);
		break;
	case 132:
		p_banish_monster(v_spell, 4);
		break;
	case 180:
		p_banish_monster(v_spell, 9);
		break;
	case 181:
		g_spell_x = 0;
		g_spell_y = 0;
		v_destination = p_select_field(0);
		if (v_destination == 1) {
			g_blocked = 0;
			p_los(0);
			if (!g_blocked) {
				if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_dig_treasure((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), a_spieler("cast_it2", g_akt_spieler).f_level);
					}
				} else {
					p_message(194, 2);
				}
			} else {
				p_message(233, 3);
			}
		}
		break;
	case 178:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_testfeld = a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
						if (v_testfeld == 149 || v_testfeld == 158 || v_testfeld == 159) {
							p_mana_verlieren(v_spell);
							p_sound(27);
							p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 3);
							p_message(881, 2);
							p_cleartile((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						} else {
							p_message(882, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 179:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_testfeld = a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
						if (v_testfeld == 53 || v_testfeld == 72) {
							p_mana_verlieren(v_spell);
							p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 3);
							if (v_testfeld == 53) {
								p_setlaby((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), a_spieler("cast_it2", g_akt_spieler).f_level, 204, 0, 0);
								p_sound(27);
							}
							if (v_testfeld == 72) {
								v_zaehl = 1;
								do {
									v_egon = (p_random(169) + 1);
									v_zaehl = (v_zaehl + 1);
								} while (!(p_has_trait2(v_egon, 30) == 1 || v_zaehl > 500));
								if (v_zaehl > 500) {
									v_egon = 1;
								}
								v_xmod_save = g_xmod;
								v_ymod_save = g_ymod;
								g_xmod = g_spell_x;
								g_ymod = g_spell_y;
								p_aufstehen2(a_monster("cast_it2", v_egon).f_nr);
								p_setmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_xmod), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_ymod), a_spieler("cast_it2", g_akt_spieler).f_level, v_egon, a_monster("cast_it2", v_egon).f_nr, a_monster("cast_it2", v_egon).f_lebenspunkte, 0, 0, 0);
								g_xmod = v_xmod_save;
								g_ymod = v_ymod_save;
								p_sound(34);
							}
						} else {
							p_message(952, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 149:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							p_mana_verlieren(v_spell);
							p_sound(27);
							p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 3);
							v_i = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp / 2);
							if (v_i) {
								LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = v_i;
							} else {
								p_zerstoert(2, 0);
								p_cleanup_monsters();
							}
						} else {
							p_message(600, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 144:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
							p_mana_verlieren(v_spell);
							p_sound(21);
							p_laby_screen();
							for (v_i = 1; v_i <= 8; v_i += 1) {
								p_laby_screen2();
								p_clipsprite(37, ((v_i * 31) - 31), 383, 31, 31);
								p_displaytransparentsprite(37, 160, 160);
								p_clipsprite(37, ((v_i * 31) - 31), 383, 31, 31);
								p_displaytransparentsprite(37, (160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)));
								p_flipbuffers(1);
								p_delay(90);
							}
							for (v_i = 1; v_i <= 8; v_i += 1) {
								p_laby_screen2();
								p_clipsprite(37, ((v_i * 31) - 31), 414, 31, 31);
								p_displaytransparentsprite(37, 160, 160);
								p_clipsprite(37, ((v_i * 31) - 31), 414, 31, 31);
								p_displaytransparentsprite(37, (160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)));
								p_flipbuffers(1);
								p_delay(90);
							}
							if (p_getmonster(a_spieler("cast_it2", g_akt_spieler).f_character_x, a_spieler("cast_it2", g_akt_spieler).f_character_y, -1)) {
								LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x = (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x);
								LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y = (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y);
							}
							((struct st_monster_type *) v_act_monster.f_p)->f_x = a_spieler("cast_it2", g_akt_spieler).f_character_x;
							((struct st_monster_type *) v_act_monster.f_p)->f_y = a_spieler("cast_it2", g_akt_spieler).f_character_y;
							a_spieler("cast_it2", g_akt_spieler).f_character_x = (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x);
							a_spieler("cast_it2", g_akt_spieler).f_character_y = (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y);
							p_laby_screen();
						} else {
							p_message(600, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 140:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							if (a_monster("cast_it2", v_mon_no).f_art == 4) {
								p_mana_verlieren(v_spell);
								p_sound(34);
								p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 3);
								v_schaden = (p_myrand(((v_special * p_power(v_spell)) + 1)) + 1);
								v_schaden = (v_schaden * p_get_weaving(-1));
								if (p_dispelled() == 1) {
									p_message(312, 2);
								} else {
									p_monsterschaden(v_schaden);
									p_cleanup_monsters();
									a_spieler("cast_it2", g_akt_spieler).f_durst = (a_spieler("cast_it2", g_akt_spieler).f_durst - (v_schaden * 2));
									if (a_spieler("cast_it2", g_akt_spieler).f_durst < 1) {
										a_spieler("cast_it2", g_akt_spieler).f_durst = 0;
									}
								}
							} else {
								p_message(601, 2);
							}
						} else {
							p_message(600, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 136:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
						if (v_mon_no) {
							v_monsterart = a_monster("cast_it2", v_mon_no).f_art;
							if (v_monsterart != 4 && v_monsterart != 7 && v_monsterart != 10) {
								if (!p_immune(45)) {
									p_mana_verlieren(v_spell);
									p_sound(21);
									p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 3);
									v_zaehler = 1;
									do {
										v_x = (p_random((a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level) - 3)) + 2);
										v_y = (p_random((a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level) - 3)) + 2);
										v_zaehler = (v_zaehler + 1);
									} while (!(a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, v_x, v_y).f_feld == a_inhalt("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level) || v_zaehler > 500));
									if (v_zaehler <= 500) {
										((struct st_monster_type *) v_act_monster.f_p)->f_x = v_x;
										((struct st_monster_type *) v_act_monster.f_p)->f_y = v_y;
									}
								} else {
									p_message(834, 2);
								}
							} else {
								p_message(611, 2);
							}
						} else {
							p_message(600, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 133:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							if (a_monster("cast_it2", v_mon_no).f_art == 1) {
								p_mana_verlieren(v_spell);
								p_sound(27);
								p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 3);
								if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 1) {
									p_message(599, 2);
								} else {
									if ((p_random(100) + ((3 * v_special) * p_power(v_spell))) > (45 + a_spieler("cast_it2", g_akt_spieler).f_level)) {
										LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 3;
										p_message(603, 2);
										p_show_automap(7);
									} else {
										LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 1;
										p_message(599, 2);
									}
								}
							} else {
								p_message(189, 2);
							}
						} else {
							p_message(600, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 83:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == a_inhalt("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level)) {
							if (a_spieler("cast_it2", g_akt_spieler).f_nexus == 1) {
								a_spieler("cast_it2", g_akt_spieler).f_nexus = 0;
								p_mana_verlieren(v_spell);
								p_sound(27);
								p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 3);
								p_setlaby((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), a_spieler("cast_it2", g_akt_spieler).f_level, 8, 2, 0);
							} else {
								p_message(49, 2);
							}
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 138:
		if (a_sonderlevel("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level) != 15) {
			if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
				if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, a_spieler("cast_it2", g_akt_spieler).f_character_x, a_spieler("cast_it2", g_akt_spieler).f_character_y).f_feld == a_inhalt("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level)) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_sound(27);
						p_sternchen(160, 160, 3);
						p_setlaby(a_spieler("cast_it2", g_akt_spieler).f_character_x, a_spieler("cast_it2", g_akt_spieler).f_character_y, a_spieler("cast_it2", g_akt_spieler).f_level, 205, 0, 0);
						a_spieler("cast_it2", g_akt_spieler).f_anker_x = a_spieler("cast_it2", g_akt_spieler).f_character_x;
						a_spieler("cast_it2", g_akt_spieler).f_anker_y = a_spieler("cast_it2", g_akt_spieler).f_character_y;
						a_spieler("cast_it2", g_akt_spieler).f_anker_level = a_spieler("cast_it2", g_akt_spieler).f_level;
					}
				} else {
					p_message(632, 2);
				}
			} else {
				p_message(194, 2);
			}
		} else {
			p_message(815, 2);
		}
		break;
	case 164:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(34);
				p_sternchen(160, 160, 3);
				for (v_i = 1; v_i <= ((p_power(v_spell) * 5) * p_get_weaving(-1)); v_i += 1) {
					v_zaehler = 1;
					do {
						v_x = (p_random((a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level) - 3)) + 2);
						v_y = (p_random((a_groesse("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level) - 3)) + 2);
						v_zaehler = (v_zaehler + 1);
					} while (!(a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, v_x, v_y).f_feld == a_inhalt("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level) || v_zaehler > 2000));
					if (v_zaehler <= 2000) {
						p_setlaby(v_x, v_y, a_spieler("cast_it2", g_akt_spieler).f_level, 206, 0, 0);
					}
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 67:
		p_banish_monster(v_spell, 2);
		break;
	case 131:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
							} else {
								v_testwert = a_monster("cast_it2", v_mon_no).f_art;
								if (v_testwert != 3 && v_testwert != 7 && v_testwert != 9 && v_testwert != 10) {
									p_sound(21);
									for (v_i = 1; v_i <= 8; v_i += 1) {
										p_laby_screen2();
										p_clipsprite(37, ((v_i * 31) - 31), 0, 31, 31);
										p_displaytransparentsprite(37, (160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)));
										p_flipbuffers(1);
										p_delay(90);
									}
									for (v_i = 1; v_i <= 8; v_i += 1) {
										p_laby_screen2();
										p_clipsprite(37, ((v_i * 31) - 31), 31, 31, 31);
										p_displaytransparentsprite(37, (160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)));
										p_flipbuffers(1);
										p_delay(90);
									}
									p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
									p_zerstoert(2, 0);
									p_cleanup_monsters();
								} else {
									p_message(503, 2);
								}
							}
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 62:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
							} else {
								if (!p_immune(13)) {
									p_sound(27);
									p_versteinern();
									p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
									p_zerstoert(2, 1);
									p_cleanup_monsters();
								} else {
									p_message(266, 2);
								}
							}
						}
					}
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 72:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
							} else {
								if (!p_immune(18)) {
									p_sound(27);
									p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 7);
									p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
									p_zerstoert(2, 1);
									p_cleanup_monsters();
								} else {
									p_message(267, 2);
								}
							}
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 55:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld >= 31 && a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld <= 39) {
							p_sound(14);
							p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 3);
							p_cleartile((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						}
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 208) {
							p_sound(14);
							p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 3);
							p_cleartile((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 148:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 201) {
							p_sound(14);
							p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 3);
							v_floor = a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_stat2;
							p_setlaby((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), a_spieler("cast_it2", g_akt_spieler).f_level, v_stat2, 0, 0);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 51:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
							} else {
								if (p_has_trait2(v_mon_no, 9) == 1) {
									p_sound(27);
									p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 3);
									((struct st_monster_type *) v_act_monster.f_p)->f_status = 3;
								} else {
									p_message(200, 2);
								}
							}
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 50:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				g_monsterauge = 1;
				p_monsterlore();
				g_monsterauge = 0;
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 21:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				if (a_sonderlevel("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level) != 14) {
					if (a_spieler("cast_it2", g_akt_spieler).f_portal == 1) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_stat1 == 1) {
							p_message(334, 2);
						} else {
							p_zug_verlieren();
							if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == a_mit_was("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level) || a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 20) {
								p_mana_verlieren(v_spell);
								v_special = p_erfolgreich(v_spell);
								if (v_special) {
									p_sound(38);
									p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 4);
									p_cleartile((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
									a_spieler("cast_it2", g_akt_spieler).f_portal = 0;
								}
							} else {
								p_message(264, 2);
							}
						}
					} else {
						p_message(49, 2);
					}
				} else {
					p_message(812, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 106:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 112) {
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 4);
						p_destroy_boulder((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), a_spieler("cast_it2", g_akt_spieler).f_level);
						p_message(247, 1);
					}
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 15:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sternchen(160, 160, 6);
				if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, a_spieler("cast_it2", g_akt_spieler).f_character_x, a_spieler("cast_it2", g_akt_spieler).f_character_y).f_feld == 73 || g_test == 1) {
					p_sound(21);
					p_message(193, 2);
					if ((a_spieler("cast_it2", g_akt_spieler).f_level + 1) > a_spieler("cast_it2", g_akt_spieler).f_maxlevel) {
						p_aufsteigen();
					}
					p_neuer_level();
					p_naechster();
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 66:
		p_zug_verlieren();
		v_special = p_erfolgreich(v_spell);
		if (v_special) {
			v_testfeld = a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, a_spieler("cast_it2", g_akt_spieler).f_character_x, a_spieler("cast_it2", g_akt_spieler).f_character_y).f_feld;
			if (p_istknochen(v_testfeld) == 1) {
				p_sound(32);
				for (v_j = 1; v_j <= 2; v_j += 1) {
					for (v_i = 1; v_i <= 8; v_i += 1) {
						p_laby_screen2();
						p_clipsprite(37, ((v_i * 31) - 31), 190, 31, 31);
						p_displaytransparentsprite(37, 160, 160);
						p_flipbuffers(1);
						p_delay(90);
					}
				}
				v_gesetzt = 0;
				if (v_testfeld == 191) {
					v_gesetzt = 1;
					p_setlaby(a_spieler("cast_it2", g_akt_spieler).f_character_x, a_spieler("cast_it2", g_akt_spieler).f_character_y, a_spieler("cast_it2", g_akt_spieler).f_level, 94, 0, 0);
				}
				if (v_testfeld == 163) {
					v_gesetzt = 1;
					p_setlaby(a_spieler("cast_it2", g_akt_spieler).f_character_x, a_spieler("cast_it2", g_akt_spieler).f_character_y, a_spieler("cast_it2", g_akt_spieler).f_level, 53, 0, 0);
				}
				if (!v_gesetzt) {
					p_cleartile(a_spieler("cast_it2", g_akt_spieler).f_character_x, a_spieler("cast_it2", g_akt_spieler).f_character_y, -1);
				}
				a_spieler("cast_it2", g_akt_spieler).f_mana = (a_spieler("cast_it2", g_akt_spieler).f_mana + (v_special * p_max(3, p_myrand((p_power(v_spell) / 2)))));
				if (a_spieler("cast_it2", g_akt_spieler).f_mana > p_maxmana()) {
					a_spieler("cast_it2", g_akt_spieler).f_mana = p_maxmana();
				}
			} else {
				p_message(182, 2);
			}
		}
		break;
	case 25:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_schaden_min = (v_special * p_power(v_spell));
						p_sound(32);
						p_sog();
						v_schaden = ((p_myrand(v_schaden_min) + v_schaden_min) * p_get_weaving(-1));
						p_hydra_zauber(v_schaden);
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							v_art = a_monster("cast_it2", v_mon_no).f_art;
							if (v_art != 3 && v_art != 9 && v_art != 10) {
								a_spieler("cast_it2", g_akt_spieler).f_lifepoints = (a_spieler("cast_it2", g_akt_spieler).f_lifepoints + v_schaden);
								if (a_spieler("cast_it2", g_akt_spieler).f_lifepoints > p_maxlife()) {
									a_spieler("cast_it2", g_akt_spieler).f_lifepoints = p_maxlife();
								}
								p_monsterschaden(v_schaden);
							} else {
								p_message(735, 2);
							}
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 5:
		p_angriffsspruch(v_spell, 1, 18, 1, 1, 2);
		break;
	case 22:
		p_angriffsspruch(v_spell, 3, 19, 1, 5, 6);
		break;
	case 125:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_duration = ((((v_special * p_power(v_spell)) * a_spells("cast_it2", v_spell).f_duration) * p_get_weaving(-1)) + 5);
						p_sound(15);
						p_animate_projectile(10);
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
							} else {
								if (v_duration > 99) {
									v_duration = 99;
								}
								LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 4;
								LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration = v_duration;
							}
						} else {
							p_message(600, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 137:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_duration = (((v_special * p_power(v_spell)) * a_spells("cast_it2", v_spell).f_duration) * p_get_weaving(-1));
						p_sound(15);
						p_animate_projectile(2);
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
							} else {
								if (v_duration > 99) {
									v_duration = 99;
								}
								LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 5;
								LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration = v_duration;
							}
						} else {
							p_message(600, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 127:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_sound(32);
						p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 6);
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
							} else {
								if (!p_has_trait2(v_mon_no, 29)) {
									p_message(480, 2);
								} else {
									LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 2;
								}
							}
						} else {
							p_message(600, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 155:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_duration = ((v_special * p_power(v_spell)) * p_get_weaving(-1));
						p_sound(32);
						p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 6);
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
							} else {
								if (v_duration > 99) {
									v_duration = 99;
								}
								LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 6;
								LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration = v_duration;
							}
						} else {
							p_message(600, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 129:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_sound(21);
						v_testfeld = a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
						if (v_testfeld == 9) {
							p_gold((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y));
						}
						if (v_testfeld == 6 || v_testfeld == 161 || v_testfeld == 192) {
							p_chest((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y));
						}
						if (v_testfeld == 68 || v_testfeld == 194 || v_testfeld == 162) {
							p_chest((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y));
						}
						if (a_laby_item("cast_it2", (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_name[a_spieler("cast_it2", g_akt_spieler).f_level] > 0) {
							p_objekt((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y));
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 114:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_sound(19);
						if (g_spell_x > 0) {
							v_x_diff = 1;
							v_y_diff = 0;
						} else {
							if (g_spell_x < 0) {
								v_x_diff = -1;
								v_y_diff = 0;
							} else {
								if (g_spell_y > 0) {
									v_x_diff = 0;
									v_y_diff = 1;
								} else {
									v_x_diff = 0;
									v_y_diff = -1;
								}
							}
						}
						for (v_i = 1; v_i <= 5; v_i += 1) {
							p_draw_tile(42, (7 + (v_i * v_x_diff)), (7 + (v_i * v_y_diff)), 1, 1, -1);
						}
						p_flipbuffers(1);
						p_delay(g_mydelay);
						p_laby_screen();
						v_schaden = p_damage(2, 5, v_spell, v_special);
						p_hydra_zauber(v_schaden);
						for (v_i = 1; v_i <= 5; v_i += 1) {
							v_schaden = p_damage(2, 5, v_spell, v_special);
							g_spell_x = (v_i * v_x_diff);
							g_spell_y = (v_i * v_y_diff);
							p_feuerschaden(v_schaden);
						}
						p_cleanup_monsters();
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 115:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_schaden = p_damage(4, 5, v_spell, v_special);
						p_sound(19);
						p_animate_projectile(3);
						for (v_y = ((g_spell_y - 1) + 7); v_y <= ((g_spell_y + 1) + 7); v_y += 1) {
							for (v_x = ((g_spell_x - 1) + 7); v_x <= ((g_spell_x + 1) + 7); v_x += 1) {
								p_draw_tile(42, v_x, v_y, 1, 1, -1);
							}
						}
						p_sound(61);
						p_flipbuffers(1);
						p_delay(g_mydelay);
						p_laby_screen();
						p_hydra_zauber(v_schaden);
						for (v_zaehl = 1; v_zaehl <= 9; v_zaehl += 1) {
							switch (v_zaehl) {
							case 2:
								g_spell_x = (g_spell_x - 1);
								g_spell_y = (g_spell_y - 1);
								break;
							case 3:
								g_spell_x = (g_spell_x + 1);
								break;
							case 4:
								g_spell_x = (g_spell_x + 1);
								break;
							case 5:
								g_spell_y = (g_spell_y + 1);
								g_spell_x = (g_spell_x - 2);
								break;
							case 6:
								g_spell_x = (g_spell_x + 2);
								break;
							case 7:
								g_spell_y = (g_spell_y + 1);
								g_spell_x = (g_spell_x - 2);
								break;
							case 8:
								g_spell_x = (g_spell_x + 1);
								break;
							case 9:
								g_spell_x = (g_spell_x + 1);
								break;
							}
							p_feuerschaden(v_schaden);
						}
						p_cleanup_monsters();
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 117:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				p_mana_verlieren(v_spell);
				v_special = p_erfolgreich(v_spell);
				if (v_special) {
					v_schaden = p_damage(4, 5, v_spell, v_special);
					p_sound(42);
					for (v_y = ((g_spell_y - 1) + 7); v_y <= ((g_spell_y + 1) + 7); v_y += 1) {
						for (v_x = ((g_spell_x - 1) + 7); v_x <= ((g_spell_x + 1) + 7); v_x += 1) {
							p_draw_tile(112, v_x, v_y, 1, 1, -1);
						}
					}
					p_flipbuffers(1);
					p_delay(g_mydelay);
					p_laby_screen();
					p_hydra_zauber(v_schaden);
					for (v_zaehl = 1; v_zaehl <= 9; v_zaehl += 1) {
						switch (v_zaehl) {
						case 2:
							g_spell_x = (g_spell_x - 1);
							g_spell_y = (g_spell_y - 1);
							break;
						case 3:
							g_spell_x = (g_spell_x + 1);
							break;
						case 4:
							g_spell_x = (g_spell_x + 1);
							break;
						case 5:
							g_spell_y = (g_spell_y + 1);
							g_spell_x = (g_spell_x - 2);
							break;
						case 6:
							g_spell_x = (g_spell_x + 2);
							break;
						case 7:
							g_spell_y = (g_spell_y + 1);
							g_spell_x = (g_spell_x - 2);
							break;
						case 8:
							g_spell_x = (g_spell_x + 1);
							break;
						case 9:
							g_spell_x = (g_spell_x + 1);
							break;
						}
						p_feuerschaden(v_schaden);
					}
					p_cleanup_monsters();
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 150:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				p_mana_verlieren(v_spell);
				v_special = p_erfolgreich(v_spell);
				if (v_special) {
					v_special = (v_special * p_power(v_spell));
					p_sound(48);
					for (v_y = ((g_spell_y - 1) + 7); v_y <= ((g_spell_y + 1) + 7); v_y += 1) {
						for (v_x = ((g_spell_x - 1) + 7); v_x <= ((g_spell_x + 1) + 7); v_x += 1) {
							p_draw_tile(5, v_x, v_y, 1, 1, -1);
						}
					}
					p_flipbuffers(1);
					p_delay(g_mydelay);
					p_laby_screen();
					for (v_zaehl = 1; v_zaehl <= 9; v_zaehl += 1) {
						switch (v_zaehl) {
						case 2:
							g_spell_x = (g_spell_x - 1);
							g_spell_y = (g_spell_y - 1);
							break;
						case 3:
							g_spell_x = (g_spell_x + 1);
							break;
						case 4:
							g_spell_x = (g_spell_x + 1);
							break;
						case 5:
							g_spell_y = (g_spell_y + 1);
							g_spell_x = (g_spell_x - 2);
							break;
						case 6:
							g_spell_x = (g_spell_x + 2);
							break;
						case 7:
							g_spell_y = (g_spell_y + 1);
							g_spell_x = (g_spell_x - 2);
							break;
						case 8:
							g_spell_x = (g_spell_x + 1);
							break;
						case 9:
							g_spell_x = (g_spell_x + 1);
							break;
						}
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							p_clipsprite(38, 0, 224, 32, 32);
							p_displaytransparentsprite(38, (160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)));
							if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp < ((v_special * 3) * p_get_weaving(-1))) {
								p_zerstoert(2, 0);
							}
						}
					}
					p_cleanup_monsters();
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 65:
		p_angriffsspruch(v_spell, 3, 18, 1, 4, 5);
		break;
	case 113:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_special = (v_special * p_power(v_spell));
						v_schaden = (p_myrand((v_special * 2)) + v_special);
						p_sound(18);
						for (v_i = 1; v_i <= 8; v_i += 1) {
							p_laby_screen2();
							p_clipsprite(37, ((v_i * 31) - 31), 0, 31, 31);
							p_displaytransparentsprite(37, (160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)));
							p_flipbuffers(1);
							p_delay(90);
						}
						for (v_i = 1; v_i <= 8; v_i += 1) {
							p_laby_screen2();
							p_clipsprite(37, ((v_i * 31) - 31), 31, 31, 31);
							p_displaytransparentsprite(37, (160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)));
							p_flipbuffers(1);
							p_delay(90);
						}
						v_schaden = (v_schaden * p_get_weaving(-1));
						p_hydra_zauber(v_schaden);
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
							} else {
								p_monsterschaden(v_schaden);
								p_cleanup_monsters();
							}
						}
					}
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 112:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_sound(18);
						for (v_j = 1; v_j <= 3; v_j += 1) {
							for (v_i = 1; v_i <= 8; v_i += 1) {
								p_laby_screen2();
								p_clipsprite(37, ((v_i * 31) - 31), 221, 31, 31);
								p_displaytransparentsprite(37, (160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)));
								p_flipbuffers(1);
								p_delay(90);
							}
						}
						v_schaden = p_damage(6, 7, v_spell, v_special);
						v_hydra = p_hydra_zauber(v_schaden);
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
								v_mon_no = -1;
							} else {
								if (p_immune(25) == 1) {
									p_message(329, 2);
								} else {
									p_zerstoert(2, 1);
									p_cleanup_monsters();
								}
							}
						}
						if (v_mon_no != -1) {
							v_testfeld = a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
							p_setitem((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), a_spieler("cast_it2", g_akt_spieler).f_level, 0, 0, 0);
							if (p_is_waterfield((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), 0)) {
								p_setlaby((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), a_spieler("cast_it2", g_akt_spieler).f_level, 53, 0, 0);
							} else {
								if (!p_istmauer(v_testfeld) && !v_hydra && v_testfeld != 2 && v_testfeld != 3 && v_testfeld != 47 && v_testfeld != 110) {
									p_cleartile((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
								}
							}
						}
					}
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 57:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_sound(27);
						p_sog();
						v_schaden = p_damage(4, 5, v_spell, v_special);
						p_hydra_zauber(v_schaden);
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
							} else {
								p_monsterschaden(v_schaden);
								p_cleanup_monsters();
							}
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 81:
		p_angriffsspruch(v_spell, 6, 53, 3, 1, 5);
		break;
	case 28:
		p_angriffsspruch(v_spell, 4, 18, 2, 4, 5);
		break;
	case 58:
		if (a_sonderlevel("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level) != 15) {
			if (a_spieler("cast_it2", g_akt_spieler).f_teleport == 1) {
				a_spieler("cast_it2", g_akt_spieler).f_teleport = 0;
				v_okay = p_opfern();
				if (v_okay > 0) {
					if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
						p_zug_verlieren();
						g_spell_x = 0;
						g_spell_y = 0;
						v_destination = p_select_field(0);
						if (v_destination == 1) {
							p_mana_verlieren(v_spell);
							v_special = p_erfolgreich(v_spell);
							if (v_special) {
								p_sound(23);
								for (v_i = 1; v_i <= 8; v_i += 1) {
									p_laby_screen2();
									p_clipsprite(37, ((v_i * 31) - 31), 383, 31, 31);
									p_displaytransparentsprite(37, 160, 160);
									p_flipbuffers(1);
									p_delay(90);
								}
								for (v_i = 1; v_i <= 8; v_i += 1) {
									p_laby_screen2();
									p_clipsprite(37, ((v_i * 31) - 31), 414, 31, 31);
									p_displaytransparentsprite(37, 160, 160);
									p_flipbuffers(1);
									p_delay(90);
								}
								if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == a_inhalt("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level)) {
									a_spieler("cast_it2", g_akt_spieler).f_character_x = (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x);
									a_spieler("cast_it2", g_akt_spieler).f_character_y = (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y);
									p_laby_screen();
									for (v_i = 1; v_i <= 8; v_i += 1) {
										p_laby_screen2();
										p_clipsprite(37, ((v_i * 31) - 31), 383, 31, 31);
										p_displaytransparentsprite(37, 160, 160);
										p_flipbuffers(1);
										p_delay(90);
									}
									for (v_i = 1; v_i <= 8; v_i += 1) {
										p_laby_screen2();
										p_clipsprite(37, ((v_i * 31) - 31), 414, 31, 31);
										p_displaytransparentsprite(37, 160, 160);
										p_flipbuffers(1);
										p_delay(90);
									}
									p_laby_screen();
								}
							}
						}
					} else {
						p_message(194, 2);
					}
				}
			} else {
				p_message(49, 2);
			}
		} else {
			p_message(815, 2);
		}
		break;
	case 139:
		if (a_sonderlevel("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level) != 15) {
			if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
				p_zug_verlieren();
				if (a_spieler("cast_it2", g_akt_spieler).f_anker_x > 0 && a_spieler("cast_it2", g_akt_spieler).f_anker_y > 0 && a_spieler("cast_it2", g_akt_spieler).f_anker_level > 0) {
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_sound(23);
						for (v_i = 1; v_i <= 8; v_i += 1) {
							p_laby_screen2();
							p_clipsprite(37, ((v_i * 31) - 31), 383, 31, 31);
							p_displaytransparentsprite(37, 160, 160);
							p_flipbuffers(1);
							p_delay(90);
						}
						for (v_i = 1; v_i <= 8; v_i += 1) {
							p_laby_screen2();
							p_clipsprite(37, ((v_i * 31) - 31), 414, 31, 31);
							p_displaytransparentsprite(37, 160, 160);
							p_flipbuffers(1);
							p_delay(90);
						}
						a_spieler("cast_it2", g_akt_spieler).f_character_x = a_spieler("cast_it2", g_akt_spieler).f_anker_x;
						a_spieler("cast_it2", g_akt_spieler).f_character_y = a_spieler("cast_it2", g_akt_spieler).f_anker_y;
						a_spieler("cast_it2", g_akt_spieler).f_level = a_spieler("cast_it2", g_akt_spieler).f_anker_level;
						p_laby_screen();
						for (v_i = 1; v_i <= 8; v_i += 1) {
							p_laby_screen2();
							p_clipsprite(37, ((v_i * 31) - 31), 383, 31, 31);
							p_displaytransparentsprite(37, 160, 160);
							p_flipbuffers(1);
							p_delay(90);
						}
						for (v_i = 1; v_i <= 8; v_i += 1) {
							p_laby_screen2();
							p_clipsprite(37, ((v_i * 31) - 31), 414, 31, 31);
							p_displaytransparentsprite(37, 160, 160);
							p_flipbuffers(1);
							p_delay(90);
						}
						p_laby_screen();
					}
				} else {
					p_message(633, 2);
				}
			} else {
				p_message(194, 2);
			}
		} else {
			p_message(815, 2);
		}
		break;
	case 29:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_special = (v_special * p_power(v_spell));
						v_schaden = (p_myrand(v_special) + (v_special * 2));
						p_sound(32);
						p_sternchen((160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)), 6);
						v_schaden = (v_schaden * p_get_weaving(-1));
						p_hydra_zauber(v_schaden);
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
							} else {
								if (!p_has_trait2(v_mon_no, 7)) {
									p_monsterschaden(v_schaden);
									p_cleanup_monsters();
								} else {
									p_message(268, 2);
								}
							}
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 19:
		p_angriffsspruch(v_spell, 2, 18, 4, 3, 4);
		break;
	case 27:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_sound(26);
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 70) {
							if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_stat1 == 1) {
								p_message(524, 2);
							} else {
								p_setlaby((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), a_spieler("cast_it2", g_akt_spieler).f_level, 71, 0, 0);
							}
						}
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 62) {
							a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld = 63;
						}
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 210) {
							a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld = 209;
						}
					}
				} else {
					p_message(255, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 24:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
						v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
						if (v_mon_no) {
							if (p_dispelled() == 1) {
								p_message(312, 2);
							} else {
								if (p_has_trait2(v_mon_no, 8)) {
									p_sound(32);
									p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
									v_willi = a_monster("cast_it2", v_mon_no).f_name[(1 + g_language)] + a_message_text("cast_it2", 627, (1 + g_language));
									p_nachricht7(v_willi, 2);
									p_lernen(v_mon_no);
									a_spieler("cast_it2", g_akt_spieler).f_mks = (a_spieler("cast_it2", g_akt_spieler).f_mks + 1);
									p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
									p_remove_monster();
									p_cleanup_monsters();
								} else {
									p_message(269, 2);
								}
							}
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 91:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked && p_free_for_monster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), 0)) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_sound(27);
						p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
						p_get_creature(1);
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 147:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked && p_free_for_monster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), 0)) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_sound(27);
						p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
						p_get_creature(11);
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 92:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_testfeld = a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
						if (p_istknochen(v_testfeld) == 1 || g_item_spell) {
							p_sound(27);
							p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
							g_xmod = g_spell_x;
							g_ymod = g_spell_y;
							p_aufstehen(22);
							p_cleartile((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
							p_get_creature(2);
						} else {
							p_message(182, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 93:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_testfeld = a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
						if (p_istknochen(v_testfeld) == 1 || g_item_spell) {
							p_sound(27);
							p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
							g_xmod = g_spell_x;
							g_ymod = g_spell_y;
							p_aufstehen(42);
							p_cleartile((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
							p_get_creature(3);
						} else {
							p_message(182, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 94:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 8 || g_item_spell) {
							p_sound(27);
							p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
							g_xmod = g_spell_x;
							g_ymod = g_spell_y;
							p_aufstehen(109);
							p_get_creature(4);
						} else {
							p_message(183, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 95:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 8 || g_item_spell) {
							p_sound(27);
							p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
							g_xmod = g_spell_x;
							g_ymod = g_spell_y;
							p_aufstehen(75);
							p_get_creature(5);
						} else {
							p_message(183, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 96:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						v_testfeld = a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
						if (p_istknochen(v_testfeld) == 1 || g_item_spell) {
							p_sound(27);
							p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
							g_xmod = g_spell_x;
							g_ymod = g_spell_y;
							p_aufstehen(66);
							p_cleartile((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
							p_get_creature(6);
						} else {
							p_message(182, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 152:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 8) {
							p_sound(27);
							p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
							g_xmod = g_spell_x;
							g_ymod = g_spell_y;
							p_aufstehen(28);
							p_get_creature(12);
						} else {
							p_message(183, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 153:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 8) {
							p_sound(27);
							p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
							g_xmod = g_spell_x;
							g_ymod = g_spell_y;
							p_aufstehen(49);
							p_get_creature(13);
						} else {
							p_message(183, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 162:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 8) {
							p_sound(27);
							p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
							g_xmod = g_spell_x;
							g_ymod = g_spell_y;
							p_aufstehen(29);
							p_get_creature(14);
						} else {
							p_message(183, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 163:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 8) {
							p_sound(27);
							p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
							g_xmod = g_spell_x;
							g_ymod = g_spell_y;
							p_aufstehen(56);
							p_get_creature(15);
						} else {
							p_message(183, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 97:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 8) {
							p_sound(27);
							p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
							g_xmod = g_spell_x;
							g_ymod = g_spell_y;
							p_aufstehen(118);
							p_get_creature(7);
						} else {
							p_message(183, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 98:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 7) {
							p_sound(27);
							p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
							g_xmod = g_spell_x;
							g_ymod = g_spell_y;
							p_aufstehen(97);
							p_get_creature(8);
						} else {
							p_message(554, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 99:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_sound(27);
						p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
						g_xmod = g_spell_x;
						g_ymod = g_spell_y;
						p_aufstehen(33);
						p_get_creature(9);
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 103:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(0);
				if (!g_blocked) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						if (a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, (a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 8 || g_item_spell) {
							p_sound(27);
							p_sternchen((156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)), 7);
							g_xmod = g_spell_x;
							g_ymod = g_spell_y;
							p_aufstehen(85);
							p_get_creature(10);
							a_spieler("cast_it2", g_akt_spieler).f_creature_lifepoints = p_maxlife();
							a_spieler("cast_it2", g_akt_spieler).f_creature_speed = p_maxspeed();
							a_spieler("cast_it2", g_akt_spieler).f_creature_maxspeed = p_maxspeed();
						} else {
							p_message(183, 2);
						}
					}
				} else {
					p_message(233, 2);
				}
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 63:
		if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
			p_zug_verlieren();
			p_mana_verlieren(v_spell);
			v_special = p_erfolgreich(v_spell);
			if (v_special) {
				p_sound(38);
				v_zittern = 3;
				p_laby_screen();
				for (v_i = 1; v_i <= 20; v_i += 1) {
					for (v_y = 1; v_y <= 13; v_y += 1) {
						for (v_x = 1; v_x <= 13; v_x += 1) {
							if (((a_spieler("cast_it2", g_akt_spieler).f_character_x - 7) + v_x) < 1 || ((a_spieler("cast_it2", g_akt_spieler).f_character_y - 7) + v_y) < 1) {
								p_draw_tile(1, v_x, v_y, v_x_offset, v_y_offset, -1);
							} else {
								v_tile = a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, ((a_spieler("cast_it2", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("cast_it2", g_akt_spieler).f_character_y - 7) + v_y)).f_feld;
								if (a_fields("cast_it2", v_tile).f_attri_floor) {
									v_bg = a_labyrinth("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level, ((a_spieler("cast_it2", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("cast_it2", g_akt_spieler).f_character_y - 7) + v_y)).f_stat2;
								} else {
									v_bg = 0;
								}
								p_draw_tile(v_tile, v_x, v_y, (v_x_offset + v_zittern), (v_y_offset + v_zittern), v_bg);
							}
						}
					}
					p_draw_character(a_spieler("cast_it2", g_akt_spieler).f_face, g_frame, 0);
					p_laby_rahmen(0);
					p_show_logo();
					p_show_varys(1);
					p_show_buttons();
					p_show_schnellinventory();
					p_show_sight();
					p_flipbuffers(1);
					if (v_zittern == 3) {
						v_zittern = -3;
					} else {
						v_zittern = 3;
					}
					p_delay(20);
				}
				p_delay(g_mydelay);
				v_akt_power = (v_special * p_power(v_spell));
				for (g_spell_x = -7; g_spell_x <= 7; g_spell_x += 1) {
					for (g_spell_y = -7; g_spell_y <= 7; g_spell_y += 1) {
						if ((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x) > 0 && (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y) > 0) {
							v_mon_no = p_getmonster((a_spieler("cast_it2", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("cast_it2", g_akt_spieler).f_character_y + g_spell_y), -1);
							if (v_mon_no) {
								if (!p_has_trait2(v_mon_no, 1)) {
									v_schaden = p_damage(1, 2, v_spell, v_special);
									p_monsterschaden(v_schaden);
								}
							}
						}
					}
				}
				p_cleanup_monsters();
			}
		} else {
			p_message(194, 2);
		}
		break;
	case 23:
		p_attack_area(v_spell, 19, 42, 1, 1, 1, 1, 1);
		break;
	case 116:
		if (a_spieler("cast_it2", g_akt_spieler).f_armageddon == 1) {
			v_okay = p_opfern();
			if (v_okay > 0) {
				if (p_attack_area(v_spell, 19, 42, 1, 2, 1, 2, 2)) {
					p_leeren(v_okay);
					a_spieler("cast_it2", g_akt_spieler).f_armageddon = 0;
				}
			}
		} else {
			p_message(35, 2);
		}
		break;
	case 128:
		if (a_spieler("cast_it2", g_akt_spieler).f_pestilence == 1) {
			v_okay = p_opfern();
			if (v_okay > 0) {
				if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
					p_zug_verlieren();
					p_mana_verlieren(v_spell);
					v_special = p_erfolgreich(v_spell);
					if (v_special) {
						p_leeren(v_okay);
						a_spieler("cast_it2", g_akt_spieler).f_pestilence = 0;
						p_sound(48);
						p_laby_screen();
						for (v_y = 1; v_y <= 13; v_y += 1) {
							for (v_x = 1; v_x <= 13; v_x += 1) {
								p_draw_tile(5, v_x, v_y, 1, 1, -1);
							}
						}
						p_flipbuffers(1);
						p_delay(g_mydelay);
						p_laby_screen();
						p_changecurrentelement(ll_monster_list, a_first_monster("cast_it2", a_spieler("cast_it2", g_akt_spieler).f_level).f_p);
						while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == a_spieler("cast_it2", g_akt_spieler).f_level) {
							v_type = a_monster("cast_it2", LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number).f_art;
							if (v_type != 3 && v_type != 7 && v_type != 9 && v_type != 10 && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number != 123) {
								g_spell_x = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x - a_spieler("cast_it2", g_akt_spieler).f_character_x);
								g_spell_y = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y - a_spieler("cast_it2", g_akt_spieler).f_character_y);
								p_monsterschaden(p_damage(1, 2, v_spell, v_special));
							}
							p_nextelement(ll_monster_list);
						}
						p_cleanup_monsters();
					}
				} else {
					p_message(194, 2);
				}
			}
		} else {
			p_message(35, 2);
		}
		break;
	case 146:
		v_okay = p_opfern3();
		if (v_okay > 0) {
			if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
				p_zug_verlieren();
				p_mana_verlieren(v_spell);
				v_special = p_erfolgreich(v_spell);
				if (v_special) {
					p_leeren(v_okay);
					p_sound(14);
					p_laby_screen();
					v_i = p_backpackspace();
					if (v_i <= 50) {
						a_inventory("cast_it2", v_i, g_akt_spieler).f_name = 146;
						a_inventory("cast_it2", v_i, g_akt_spieler).f_status = 0;
						a_inventory("cast_it2", v_i, g_akt_spieler).f_attri5 = 0;
					}
				}
			} else {
				p_message(194, 2);
			}
		}
		break;
	case 134:
		v_okay = p_opfern2();
		if (v_okay > 0) {
			if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
				p_zug_verlieren();
				p_leeren(v_okay);
				p_mana_verlieren(v_spell);
				v_special = p_erfolgreich(v_spell);
				if (v_special) {
					p_sound(14);
					p_message(43, 2);
					a_spieler("cast_it2", g_akt_spieler).f_mana = p_maxmana();
				}
			} else {
				p_message(194, 2);
			}
		}
		break;
	case 182:
		v_okay = p_opfern4();
		if (v_okay > 0) {
			if (a_spieler("cast_it2", g_akt_spieler).f_mana > (p_zauberkosten(v_spell) - 1) || g_item_spell) {
				p_zug_verlieren();
				p_mana_verlieren(v_spell);
				v_special = p_erfolgreich(v_spell);
				if (v_special) {
					v_akt_power = (v_special * p_power(v_spell));
					p_sound(14);
					if (a_item("cast_it2", a_inventory("cast_it2", v_okay, g_akt_spieler).f_name).f_verkauf >= 20) {
						v_akt_power += 1;
					}
					if (a_item("cast_it2", a_inventory("cast_it2", v_okay, g_akt_spieler).f_name).f_verkauf >= 40) {
						v_akt_power += 1;
					}
					if (a_item("cast_it2", a_inventory("cast_it2", v_okay, g_akt_spieler).f_name).f_verkauf >= 50) {
						v_akt_power += 1;
					}
					if (a_item("cast_it2", a_inventory("cast_it2", v_okay, g_akt_spieler).f_name).f_verkauf >= 300) {
						v_akt_power += 3;
					}
					if (v_akt_power > 15) {
						v_akt_power = 15;
					}
					v_food = 0;
					switch (v_akt_power) {
					case 1:
						v_food = 61;
						break;
					case 2:
						v_food = 60;
						break;
					case 3:
						v_food = 62;
						break;
					case 4:
						v_food = 55;
						break;
					case 5:
						v_food = 56;
						break;
					case 6:
						v_food = 63;
						break;
					case 7:
						v_food = 58;
						break;
					case 8:
						v_food = 64;
						break;
					case 9:
						v_food = 57;
						break;
					case 10:
						v_food = 59;
						break;
					case 11:
						v_food = 396;
						break;
					case 12:
						v_food = 356;
						break;
					case 13:
						v_food = 43;
						break;
					case 14:
						v_food = 44;
						break;
					case 15:
						v_food = 42;
						break;
					}
					p_leeren(v_okay);
					p_in_rucksack(v_food, 1, 0);
				}
			} else {
				p_message(194, 2);
			}
		}
		break;
	case 76:
		p_attack_area(v_spell, 19, 44, 1, 1, 1, 3, 3);
		break;
	case 73:
		p_attack_area(v_spell, 34, 53, 2, 1, 2, 2, 2);
		break;
	case 56:
		p_attack_area(v_spell, 18, 9999, 0, 1, 4, 2, 2);
		break;
	case 39:
		p_attack_area(v_spell, 21, 134, 0, 1, 3, 2, 2);
		break;
	case 2:
		p_angriffsspruch(v_spell, 99, 21, 5, 1, 1);
		break;
	case 108:
		p_angriffsspruch(v_spell, 99, 21, 5, 1, 2);
		break;
	}
}

static intptr_t p_cast_spell() {
	intptr_t v_aktuell = 0;
	intptr_t v_i = 0;
	int16_t v_iconn = 0;
	intptr_t v_item_spell = 0;
	intptr_t v_j = 0;
	intptr_t v_mouse_links = 0;
	intptr_t v_mouse_rechts = 0;
	intptr_t v_mouse_x = 0;
	intptr_t v_mouse_y = 0;
	intptr_t v_mrelease = 0;
	int16_t v_oldmauszauber = 0;
	intptr_t v_raushier = 0;
	intptr_t v_release = 0;
	intptr_t v_release2 = 0;
	intptr_t v_release3 = 0;
	intptr_t v_result = 0;
	intptr_t v_y = 0;
	p_erstelle_liste(0);
	g_akt_zauber = a_spieler("cast_spell", g_akt_spieler).f_pos_zaubermenue;
	v_iconn = 1;
	for (v_i = 0; v_i <= 15; v_i += 1) {
		a_school_names("cast_spell", v_i) = "nil";
	}
	a_school_names("cast_spell", 16) = "";
	a_school_numbers("cast_spell", 16) = 0;
	a_school_clip_icon_pos("cast_spell", 16) = 19;
	v_i = 16;
	if (!a_skills("cast_spell", 136, g_akt_spieler).f_gewaehlt) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "basis";
		a_school_numbers("cast_spell", v_i) = 1;
		a_school_clip_icon_pos("cast_spell", v_i) = 57;
	}
	if (a_skills("cast_spell", 51, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "weiss";
		a_school_numbers("cast_spell", v_i) = 51;
		a_school_clip_icon_pos("cast_spell", v_i) = 247;
	}
	if (a_skills("cast_spell", 64, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "scroll";
		a_school_numbers("cast_spell", v_i) = 64;
		a_school_clip_icon_pos("cast_spell", v_i) = 285;
	}
	if (a_skills("cast_spell", 48, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "sterne";
		a_school_numbers("cast_spell", v_i) = 48;
		a_school_clip_icon_pos("cast_spell", v_i) = 190;
	}
	if (a_skills("cast_spell", 49, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "illusion";
		a_school_numbers("cast_spell", v_i) = 49;
		a_school_clip_icon_pos("cast_spell", v_i) = 171;
	}
	if (a_skills("cast_spell", 50, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "warlock";
		a_school_numbers("cast_spell", v_i) = 50;
		a_school_clip_icon_pos("cast_spell", v_i) = 209;
	}
	if (a_skills("cast_spell", 52, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "schwarz";
		a_school_numbers("cast_spell", v_i) = 52;
		a_school_clip_icon_pos("cast_spell", v_i) = 76;
	}
	if (a_skills("cast_spell", 53, g_akt_spieler).f_gewaehlt == 1 || a_skills("cast_spell", 62, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "feuer";
		a_school_numbers("cast_spell", v_i) = 53;
		a_school_clip_icon_pos("cast_spell", v_i) = 133;
	}
	if (a_skills("cast_spell", 54, g_akt_spieler).f_gewaehlt == 1 || a_skills("cast_spell", 62, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "wasser";
		a_school_numbers("cast_spell", v_i) = 54;
		a_school_clip_icon_pos("cast_spell", v_i) = 228;
	}
	if (a_skills("cast_spell", 55, g_akt_spieler).f_gewaehlt == 1 || a_skills("cast_spell", 62, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "erde";
		a_school_numbers("cast_spell", v_i) = 55;
		a_school_clip_icon_pos("cast_spell", v_i) = 114;
	}
	if (a_skills("cast_spell", 56, g_akt_spieler).f_gewaehlt == 1 || a_skills("cast_spell", 62, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "luft";
		a_school_numbers("cast_spell", v_i) = 56;
		a_school_clip_icon_pos("cast_spell", v_i) = 0;
	}
	if (a_skills("cast_spell", 57, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "druide";
		a_school_numbers("cast_spell", v_i) = 57;
		a_school_clip_icon_pos("cast_spell", v_i) = 95;
	}
	if (a_skills("cast_spell", 58, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "hexerei";
		a_school_numbers("cast_spell", v_i) = 58;
		a_school_clip_icon_pos("cast_spell", v_i) = 266;
	}
	if (a_skills("cast_spell", 59, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "hohe";
		a_school_numbers("cast_spell", v_i) = 59;
		a_school_clip_icon_pos("cast_spell", v_i) = 152;
	}
	if (a_skills("cast_spell", 60, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "barde";
		a_school_numbers("cast_spell", v_i) = 60;
		a_school_clip_icon_pos("cast_spell", v_i) = 38;
	}
	if (a_skills("cast_spell", 67, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "beschw\366rer";
		a_school_numbers("cast_spell", v_i) = 67;
		a_school_clip_icon_pos("cast_spell", v_i) = 304;
	}
	if (a_skills("cast_spell", 65, g_akt_spieler).f_gewaehlt == 1) {
		v_i -= 1;
		a_school_names("cast_spell", v_i) = "frei";
		a_school_numbers("cast_spell", v_i) = 65;
		a_school_clip_icon_pos("cast_spell", v_i) = 342;
	}
	g_min_icon_pos = v_i;
	v_release = 0;
	v_mrelease = 0;
	v_release2 = 0;
	v_release3 = 0;
	v_raushier = 0;
	g_mausbesch = 0;
	for (v_i = g_min_icon_pos; v_i <= 16; v_i += 1) {
		if (a_spieler("cast_spell", g_akt_spieler).f_schule == a_school_numbers("cast_spell", v_i)) {
			g_icon_pos = v_i;
		}
	}
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_screen(0, 0);
		p_draw_screen3(0, 0);
		p_draw_screen4(0, 0);
		p_draw_screen7(0, 0);
		p_draw_character(a_spieler("cast_spell", g_akt_spieler).f_face, g_frame, 0);
		p_show_sight();
		p_spells_border();
		p_examinekeyboard();
		p_read_joystick();
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			v_mouse_x = p_mousex();
			v_mouse_y = p_mousey();
			v_mouse_links = p_mousebutton(1);
			v_mouse_rechts = p_mousebutton(2);
		}
		if (!v_mouse_links) {
			v_mrelease = 0;
		}
		if (v_mouse_x >= 590 && v_mouse_x <= 622 && v_mouse_y >= 310 && v_mouse_y <= 342) {
			p_clipsprite(6, 192, 0, 31, 31);
			if (v_mouse_links == 1) {
				if (!v_mrelease || p_keydelay(0)) {
					if (g_akt_zauber > 0) {
						g_akt_zauber = (g_akt_zauber - 1);
						p_keydelay(1);
						v_mrelease = 1;
					}
				}
			}
		} else {
			p_clipsprite(6, 128, 0, 31, 31);
		}
		p_displaytransparentsprite(6, 590, 310);
		if (v_mouse_x > 590 && v_mouse_x < 622 && v_mouse_y > 340 && v_mouse_y < 372) {
			p_clipsprite(6, 224, 0, 31, 31);
			if (v_mouse_links == 1) {
				if (!v_mrelease || p_keydelay(0)) {
					if (g_akt_zauber < (g_anz_zauber - 1)) {
						g_akt_zauber = (g_akt_zauber + 1);
						p_keydelay(1);
						v_mrelease = 1;
					}
				}
			}
		} else {
			p_clipsprite(6, 160, 0, 31, 31);
		}
		p_displaytransparentsprite(6, 590, 340);
		if (v_mouse_x >= 594 && v_mouse_x <= 626 && v_mouse_y >= 52 && v_mouse_y <= 84) {
			p_clipsprite(6, 96, 32, 31, 31);
			if (v_mouse_links == 1) {
				v_raushier = 2;
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, 594, 52);
		if (v_mouse_x >= 594 && v_mouse_x <= 626 && v_mouse_y >= 83 && v_mouse_y <= 115) {
			p_clipsprite(6, ((5 + (a_spieler("cast_spell", g_akt_spieler).f_sorting_style * 2)) * 32), 32, 31, 31);
			if (!v_mrelease && v_mouse_links == 1) {
				a_spieler("cast_spell", g_akt_spieler).f_sorting_style = (a_spieler("cast_spell", g_akt_spieler).f_sorting_style ^ 1);
				p_bubblesort();
				v_mrelease = 1;
			}
		} else {
			p_clipsprite(6, ((4 + (a_spieler("cast_spell", g_akt_spieler).f_sorting_style * 2)) * 32), 32, 31, 31);
		}
		p_displaytransparentsprite(6, 594, 83);
		if (!v_release3 && p_keyboardpushed(115)) {
			a_spieler("cast_spell", g_akt_spieler).f_sorting_style = (a_spieler("cast_spell", g_akt_spieler).f_sorting_style ^ 1);
			p_bubblesort();
			g_mausbesch = 0;
			v_release3 = 1;
		}
		if (v_release3 && !p_keyboardpushed(115)) {
			v_release3 = 0;
		}
		if (v_mouse_rechts == 1) {
			v_raushier = 3;
		}
		if (v_raushier == 3 && !v_mouse_rechts) {
			v_raushier = 2;
		}
		p_draw_mousepointer(v_mouse_x, v_mouse_y);
		p_flipbuffers(1);
		if (v_release2 && !(p_keyboardpushed(274) || p_keyboardpushed(273)) && !g_jay) {
			v_release2 = 0;
		}
		if (p_keyboardpushed(274) || g_jay == 1) {
			if (!v_release2 || p_keydelay(0)) {
				if (g_akt_zauber < (g_anz_zauber - 1)) {
					g_akt_zauber = (g_akt_zauber + 1);
					p_keydelay(1);
					v_release2 = 1;
					g_mausbesch = 0;
				}
			}
		}
		if (p_keyboardpushed(273) || g_jay == -1) {
			if (!v_release2 || p_keydelay(0)) {
				if (g_akt_zauber > 0) {
					g_akt_zauber = (g_akt_zauber - 1);
					p_keydelay(1);
					v_release2 = 1;
					g_mausbesch = 0;
				}
			}
		}
		if (!v_release && p_keyboardpushed(281)) {
			g_icon_pos -= 1;
			v_release = 1;
			if (g_icon_pos < g_min_icon_pos) {
				g_icon_pos = 16;
			}
			a_spieler("cast_spell", g_akt_spieler).f_schule = a_school_numbers("cast_spell", g_icon_pos);
			p_erstelle_liste(1);
			g_mausbesch = 0;
		}
		if (!v_release && p_keyboardpushed(280)) {
			g_icon_pos += 1;
			v_release = 1;
			if (g_icon_pos > 16) {
				g_icon_pos = g_min_icon_pos;
			}
			a_spieler("cast_spell", g_akt_spieler).f_schule = a_school_numbers("cast_spell", g_icon_pos);
			p_erstelle_liste(1);
			g_mausbesch = 0;
		}
		if (v_release && !(p_keyboardpushed(280) || p_keyboardpushed(281))) {
			v_release = 0;
		}
		for (v_i = 1; v_i <= 12; v_i += 1) {
			if (p_keyboardpushed(a_f_keys("cast_spell", v_i)) && a_school_names("cast_spell", ((16 + v_i) - 12)) != "nil") {
				g_icon_pos = ((16 + v_i) - 12);
				a_spieler("cast_spell", g_akt_spieler).f_schule = a_school_numbers("cast_spell", g_icon_pos);
				p_erstelle_liste(1);
				g_mausbesch = 0;
			}
		}
		v_oldmauszauber = g_mauszauber;
		g_mauszauber = 0;
		v_y = 52;
		v_aktuell = 1;
		if (v_mouse_x > 365 && v_mouse_x < 574) {
			for (v_i = 1; v_i <= g_anzz; v_i += 1) {
				if (v_mouse_y >= v_y && v_mouse_y <= (v_y + g_yplus)) {
					g_mauszauber = v_aktuell;
					if (g_mauszauber != v_oldmauszauber) {
						g_mausbesch = 1;
					}
				}
				v_y = (v_y + g_yplus);
				v_aktuell = (v_aktuell + 1);
			}
		}
		if (v_mouse_links == 1 && g_mauszauber > 0) {
			v_raushier = 1;
		}
		if (a_zauberliste("cast_spell", (g_akt_zauber + g_akt_zauber_offset)) > 0) {
			for (v_j = 1; v_j <= 10; v_j += 1) {
				if (p_keyboardpushed(a_num_keys("cast_spell", v_j))) {
					for (v_i = 1; v_i <= 10; v_i += 1) {
						if (a_quickspells("cast_spell", v_i, g_akt_spieler) == a_zauberliste("cast_spell", (g_akt_zauber + g_akt_zauber_offset))) {
							a_quickspells("cast_spell", v_i, g_akt_spieler) = 0;
						}
					}
					a_quickspells("cast_spell", v_j, g_akt_spieler) = a_zauberliste("cast_spell", (g_akt_zauber + g_akt_zauber_offset));
				}
			}
		}
		if (g_joystick_used == 1) {
			for (v_j = 5; v_j <= 12; v_j += 1) {
				if (a_jb("cast_spell", v_j)) {
					for (v_i = 1; v_i <= 8; v_i += 1) {
						if (a_quickspells2("cast_spell", v_i, g_akt_spieler) == a_zauberliste("cast_spell", (g_akt_zauber + g_akt_zauber_offset))) {
							a_quickspells2("cast_spell", v_i, g_akt_spieler) = 0;
						}
					}
					a_quickspells2("cast_spell", (v_j - 4), g_akt_spieler) = a_zauberliste("cast_spell", (g_akt_zauber + g_akt_zauber_offset));
				}
			}
		}
	} while (!(v_raushier == 1 || v_raushier == 2 || p_keyboardpushed(13) || p_keyboardpushed(27) || a_jb("cast_spell", 1)));
	if (p_keyboardpushed(13) || a_jb("cast_spell", 1)) {
		v_item_spell = 0;
		p_cast_it();
	}
	if (v_raushier == 1) {
		if (g_mausbesch) {
			a_zauberliste("cast_spell", (g_akt_zauber + g_akt_zauber_offset)) = a_zauberliste("cast_spell", (((g_akt_zauber + g_akt_zauber_offset) + g_mauszauber) - 14));
		}
		v_item_spell = 0;
		p_cast_it();
	}
	a_spieler("cast_spell", g_akt_spieler).f_pos_zaubermenue = g_akt_zauber;
}

static intptr_t p_chest(int16_t v_x, int16_t v_y) {
	int16_t v_i = 0;
	intptr_t v_obje = 0;
	if (a_spieler("chest", g_akt_spieler).f_fluch == 18) {
		p_message(179, 6);
	} else {
		v_obje = a_labyrinth("chest", a_spieler("chest", g_akt_spieler).f_level, v_x, v_y).f_stat1;
		if (!v_obje) {
			v_obje = p_find1();
		}
		v_i = p_backpackspace();
		if (v_i <= 50) {
			if (a_labyrinth("chest", a_spieler("chest", g_akt_spieler).f_level, v_x, v_y).f_feld == 6) {
				p_cleartile(v_x, v_y, -1);
			}
			if (a_labyrinth("chest", a_spieler("chest", g_akt_spieler).f_level, v_x, v_y).f_feld == 192) {
				p_setlaby(v_x, v_y, a_spieler("chest", g_akt_spieler).f_level, 94, 0, 0);
			}
			if (a_labyrinth("chest", a_spieler("chest", g_akt_spieler).f_level, v_x, v_y).f_feld == 161) {
				p_setlaby(v_x, v_y, a_spieler("chest", g_akt_spieler).f_level, 53, 0, 0);
			}
			if (a_labyrinth("chest", a_spieler("chest", g_akt_spieler).f_level, v_x, v_y).f_feld == 68) {
				p_cleartile(v_x, v_y, -1);
			}
			if (a_labyrinth("chest", a_spieler("chest", g_akt_spieler).f_level, v_x, v_y).f_feld == 63) {
				p_cleartile(v_x, v_y, -1);
			}
			if (a_labyrinth("chest", a_spieler("chest", g_akt_spieler).f_level, v_x, v_y).f_feld == 194) {
				p_setlaby(v_x, v_y, a_spieler("chest", g_akt_spieler).f_level, 94, 0, 0);
			}
			if (a_labyrinth("chest", a_spieler("chest", g_akt_spieler).f_level, v_x, v_y).f_feld == 162) {
				p_setlaby(v_x, v_y, a_spieler("chest", g_akt_spieler).f_level, 53, 0, 0);
			}
			p_sound(64);
			p_in_rucksack(v_obje, 1, 0);
			if (a_item("chest", v_obje).f_type == 4) {
				if (!(a_mischen("chest", (v_obje - 75)).f_learned & p_pm(0))) {
					v_obje = 998;
				}
			}
			if (v_obje == 38) {
				if (!a_skills("chest", 47, g_akt_spieler).f_gewaehlt && !a_skills("chest", 64, g_akt_spieler).f_gewaehlt) {
					v_obje = 997;
				}
			}
			p_nachricht2(6, v_obje);
		} else {
			p_message(428, 3);
		}
	}
}

static intptr_t p_creature_bewegen(int16_t v_release) {
	int16_t v_act_nr_in_level = 0;
	static int16_t v_akt_xmod;
	static int16_t v_akt_ymod;
	int16_t v_angriff = 0;
	int16_t v_bg = 0;
	intptr_t v_elapsedtime3 = 0;
	int16_t v_force = 0;
	intptr_t v_frame = 0;
	intptr_t v_framestep = 0;
	int8_t v_gesetzt = 0;
	int16_t v_hydra = 0;
	intptr_t v_i = 0;
	int16_t v_inhalt_x = 0;
	int16_t v_inhalt_y = 0;
	intptr_t v_j = 0;
	int16_t v_k = 0;
	intptr_t v_kaempfen = 0;
	int16_t v_kk = 0;
	intptr_t v_level = 0;
	intptr_t v_levelmod = 0;
	intptr_t v_maxi = 0;
	intptr_t v_mini = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	int16_t v_mon_no = 0;
	intptr_t v_mouse_x_old = 0;
	intptr_t v_mouse_y_old = 0;
	static int16_t v_mouserun;
	intptr_t v_nach_kampf = 0;
	int16_t v_name = 0;
	int16_t v_nr_of_steps = 0;
	int16_t v_okay = 0;
	int16_t v_pick_up = 0;
	int16_t v_poison_dam = 0;
	intptr_t v_result = 0;
	intptr_t v_schaden = 0;
	intptr_t v_schongemalt = 0;
	int16_t v_setx = 0;
	int16_t v_sety = 0;
	intptr_t v_sprite_x = 0;
	intptr_t v_sprite_y = 0;
	intptr_t v_starttime3 = 0;
	int16_t v_testfeld = 0;
	int16_t v_tile = 0;
	int16_t v_treffer = 0;
	int16_t v_welches = 0;
	std::string v_willi;
	intptr_t v_wohin = 0;
	int16_t v_x = 0;
	intptr_t v_xmod_save = 0;
	intptr_t v_xsave = 0;
	int16_t v_xx = 0;
	intptr_t v_xxx = 0;
	int16_t v_y = 0;
	intptr_t v_ymod_save = 0;
	int16_t v_yy = 0;
	intptr_t v_yyy = 0;
	intptr_t v_zw = 0;
	v_inhalt_x = (a_inhalt("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level) % 10);
	v_inhalt_y = (a_inhalt("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level) / 10);
	v_force = v_release;
	g_xmod = 0;
	g_ymod = 0;
	p_examinekeyboard();
	v_result = p_examinemouse();
	v_mmouse_x = p_mousex();
	v_mmouse_y = p_mousey();
	v_mmouse_links = p_mousebutton(1);
	p_read_joystick();
	if (v_release == 1 && !(v_mmouse_links || p_keyboardpushed(275) || p_keyboardpushed(276) || p_keyboardpushed(273) || p_keyboardpushed(274) || g_jax || g_jay)) {
		v_release = 0;
	}
	if (!v_release && (p_keyboardpushed(275) || g_jax == 1)) {
		a_spieler("creature_bewegen", g_akt_spieler).f_creature_heading = 1;
		g_xmod = 1;
		g_ymod = 0;
		v_force = 1;
	}
	if (!v_release && (p_keyboardpushed(276) || g_jax == -1)) {
		a_spieler("creature_bewegen", g_akt_spieler).f_creature_heading = 3;
		g_xmod = -1;
		g_ymod = 0;
		v_force = 1;
	}
	if (!v_release && (p_keyboardpushed(273) || g_jay == -1)) {
		a_spieler("creature_bewegen", g_akt_spieler).f_creature_heading = 0;
		g_ymod = -1;
		g_xmod = 0;
		v_force = 1;
	}
	if (!v_release && (p_keyboardpushed(274) || g_jay == 1)) {
		a_spieler("creature_bewegen", g_akt_spieler).f_creature_heading = 2;
		g_ymod = 1;
		g_xmod = 0;
		v_force = 1;
	}
	if (p_keyboardpushed(109)) {
		p_show_automap(1);
	}
	v_pick_up = 0;
	if (p_keyboardpushed(32)) {
		v_pick_up = 1;
	}
	if (v_mmouse_x < 360 && v_mmouse_y <= 360) {
		v_nr_of_steps = p_countlist(ll_movementlist);
		if (!v_release && v_mmouse_links == 1) {
			if (v_mmouse_x >= 160 && v_mmouse_x <= 192 && v_mmouse_y >= 160 && v_mmouse_y <= 192) {
				v_pick_up = 1;
			} else {
				if (!v_mouserun && v_nr_of_steps) {
					v_mouserun = 1;
					v_release = 1;
					v_akt_xmod = 7;
					v_akt_ymod = 7;
					p_lastelement(ll_movementlist);
				}
			}
		}
		if (v_nr_of_steps > 0 && v_mouserun == 1) {
			g_xmod = 0;
			g_ymod = 0;
			if (LIST_CURRENT(ll_movementlist,struct st_knot2).f_x > v_akt_xmod) {
				a_spieler("creature_bewegen", g_akt_spieler).f_creature_heading = 1;
				g_xmod = 1;
				g_ymod = 0;
			} else {
				if (LIST_CURRENT(ll_movementlist,struct st_knot2).f_x < v_akt_xmod) {
					a_spieler("creature_bewegen", g_akt_spieler).f_creature_heading = 3;
					g_xmod = -1;
					g_ymod = 0;
				} else {
					if (LIST_CURRENT(ll_movementlist,struct st_knot2).f_y > v_akt_ymod) {
						a_spieler("creature_bewegen", g_akt_spieler).f_creature_heading = 2;
						g_xmod = 0;
						g_ymod = 1;
					} else {
						if (LIST_CURRENT(ll_movementlist,struct st_knot2).f_y < v_akt_ymod) {
							a_spieler("creature_bewegen", g_akt_spieler).f_creature_heading = 0;
							g_xmod = 0;
							g_ymod = -1;
						}
					}
				}
			}
			if (p_countlist(ll_movementlist) > 0) {
				v_akt_xmod = LIST_CURRENT(ll_movementlist,struct st_knot2).f_x;
				v_akt_ymod = LIST_CURRENT(ll_movementlist,struct st_knot2).f_y;
			} else {
				v_mouserun = 0;
			}
			if (!p_previouselement(ll_movementlist) || a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed < 1 || (!g_xmod && !g_ymod)) {
				p_show_movement(v_mmouse_x, v_mmouse_y, 1, 1);
				v_schongemalt = 0;
				v_mouserun = 0;
			}
		} else {
			p_show_movement(v_mmouse_x, v_mmouse_y, v_force, 1);
			v_mouserun = 0;
		}
	}
	v_kaempfen = 0;
	if (g_xmod || g_ymod) {
		g_bewegt = 1;
		v_hydra = 0;
		v_mon_no = p_getmonster((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod), -1);
		if (v_mon_no || p_isthydra((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod))) {
			v_tile = a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld;
			if (a_fields("creature_bewegen", v_tile).f_attri_floor) {
				v_bg = a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_stat2;
			} else {
				v_bg = 0;
			}
			p_draw_tile(v_tile, 7, 7, 0, 0, v_bg);
			if (v_mon_no) {
				p_draw_monster((7 + g_xmod), (7 + g_ymod), 0, 0);
			}
			if (a_laby_item("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level] > 0) {
				p_draw_item(v_name, 7, 7, 0, 0);
			}
			p_draw_creature(1, -3);
			v_angriff = p_creature_attacke();
			v_mini = a_spieler("creature_bewegen", g_akt_spieler).f_creature_schaden_min;
			v_maxi = a_spieler("creature_bewegen", g_akt_spieler).f_creature_schaden_max;
			v_schaden = ((p_myrand((v_maxi - v_mini)) + v_mini) + p_get_enchant_creature());
			if (p_isthydra((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod)) == 1) {
				v_act_nr_in_level = a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod)).f_stat2;
				v_kaempfen = 1;
				a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed = 0;
				v_hydra = 1;
				v_treffer = p_get_chance(103);
				if (v_treffer < v_angriff) {
					p_clipsprite(38, 0, 224, 32, 32);
					p_displaysprite(38, (160 + (g_xmod * 32)), (160 + (g_ymod * 32)));
					if (v_schaden > p_min(p_max(((v_level / 2) + 1), 6), 15)) {
						p_hydra_cut_head(v_act_nr_in_level);
					} else {
						p_hydra_grow_head(v_act_nr_in_level);
					}
				} else {
					p_message(286, 3);
				}
				g_xmod = 0;
				g_ymod = 0;
			} else {
				if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 3) {
					v_kaempfen = 1;
					a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed = 0;
					g_spielerwechsel = 1;
					v_sprite_x = (a_monster("creature_bewegen", v_mon_no).f_nr - 1);
					v_sprite_y = (v_sprite_x / 10);
					v_sprite_x = (v_sprite_x % 10);
					v_treffer = p_get_chance(100);
					if (v_treffer < v_angriff) {
						p_clipsprite(38, 0, 224, 32, 32);
						p_displaytransparentsprite(38, (160 + (g_xmod * 32)), (160 + (g_ymod * 32)));
						v_okay = 0;
						if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 4) {
							p_sound(45);
							v_okay = 1;
						}
						if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 5) {
							p_sound(43);
							v_okay = 1;
						}
						if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 6) {
							p_sound(52);
							v_okay = 1;
						}
						if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 7) {
							p_sound(51);
							v_okay = 1;
						}
						if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 8) {
							p_sound(46);
							v_okay = 1;
						}
						if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 9) {
							p_sound(51);
							v_okay = 1;
						}
						if (!v_okay) {
							p_sound(p_random(12));
						}
						v_wohin = p_screenoutput();
						p_startdrawing(v_wohin);
						p_drawingmode(1);
						p_frontcolor(p_rgb(255, 255, 255));
						v_xxx = (175 + (g_xmod * 32));
						v_yyy = (168 + (g_ymod * 32));
						p_drawtext((v_xxx - (p_textwidth(p_str(v_schaden)) / 2)), v_yyy, p_str(v_schaden), -1, 0);
						p_stopdrawing();
						p_flipbuffers(1);
						p_delay(g_mydelay);
						LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp - v_schaden);
						if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp < 1) {
							v_willi = " ";
							v_willi = a_monster("creature_bewegen", v_mon_no).f_name[(1 + g_language)] + a_message_text("creature_bewegen", 627, (1 + g_language));
							p_nachricht7(v_willi, 3);
							a_spieler("creature_bewegen", g_akt_spieler).f_mks = (a_spieler("creature_bewegen", g_akt_spieler).f_mks + 1);
							p_remove_monster();
							p_cleanup_monsters();
						} else {
							p_clipsprite(1, (v_inhalt_x * 32), (v_inhalt_y * 32), 32, 32);
							p_displaysprite(1, (160 + (g_xmod * 32)), (160 + (g_ymod * 32)));
							p_clipsprite(9, (v_sprite_x * 32), (v_sprite_y * 32), 32, 32);
							p_displaytransparentsprite(9, (160 + (g_xmod * 32)), (160 + (g_ymod * 32)));
							v_gesetzt = 0;
							v_xmod_save = g_xmod;
							v_ymod_save = g_ymod;
							if ((p_has_trait2(v_mon_no, 6) == 1 && p_myrand2(10) > 4) || g_test == 1) {
								v_welches = v_mon_no;
								if (p_has_trait2(v_mon_no, 30) == 1) {
									for (v_kk = 1; v_kk <= 4; v_kk += 1) {
										g_xmod = p_neighbour_offset(v_kk, 0);
										g_ymod = p_neighbour_offset(v_kk, 1);
										if (p_free_for_water_monster((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod), 0)) {
											p_aufstehen3(a_monster("creature_bewegen", v_welches).f_nr);
											p_setmonster((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod), a_spieler("creature_bewegen", g_akt_spieler).f_level, v_welches, a_monster("creature_bewegen", v_welches).f_nr, a_monster("creature_bewegen", v_welches).f_lebenspunkte, 0, 0, 0);
											v_gesetzt = 1;
										}
									}
								} else {
									for (v_kk = 1; v_kk <= 4; v_kk += 1) {
										g_xmod = p_neighbour_offset(v_kk, 0);
										g_ymod = p_neighbour_offset(v_kk, 1);
										if (p_free_for_monster((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod), 0)) {
											p_aufstehen3(a_monster("creature_bewegen", v_welches).f_nr);
											p_setmonster((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod), a_spieler("creature_bewegen", g_akt_spieler).f_level, v_welches, a_monster("creature_bewegen", v_welches).f_nr, a_monster("creature_bewegen", v_welches).f_lebenspunkte, 0, 0, 0);
											v_gesetzt = 1;
										}
									}
								}
							}
							g_xmod = v_xmod_save;
							g_ymod = v_ymod_save;
							if (v_gesetzt == 1) {
								p_message(36, 3);
								p_laby_screen3();
							}
						}
					} else {
						p_sound(24);
						p_message(300, 3);
						p_clipsprite(9, (v_sprite_x * 32), (v_sprite_y * 32), 32, 32);
						p_displaytransparentsprite(9, (160 + (g_xmod * 32)), (160 + (g_ymod * 32)));
						p_flipbuffers(1);
						p_delay(g_mydelay);
					}
					g_xmod = 0;
					g_ymod = 0;
					p_laby_screen3();
					p_delay(g_mydelay);
				}
			}
		}
		switch (a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod)).f_feld) {
		case 80:
			if (p_get_chance(103) < a_spieler("creature_bewegen", g_akt_spieler).f_creature_attack) {
				p_sound(30);
				p_cleartile((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod), -1);
				p_laby_screen3();
				p_delay(g_mydelay);
			} else {
				p_message(3, 2);
				p_creature_schaden(1, 2, 0, 0);
			}
			a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed = 0;
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 47:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 164:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 1:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 4) {
				if (p_istmauer(a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld) == 1 || (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod) > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level) || (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod) > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
					g_xmod = 0;
					g_ymod = 0;
				}
			} else {
				g_xmod = 0;
				g_ymod = 0;
			}
			break;
		case 101:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 4) {
				if (p_istmauer(a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld) == 1 || (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod) > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level) || (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod) > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
					g_xmod = 0;
					g_ymod = 0;
				}
			} else {
				g_xmod = 0;
				g_ymod = 0;
			}
			break;
		case 102:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 4) {
				if (p_istmauer(a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld) == 1 || (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod) > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level) || (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod) > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
					g_xmod = 0;
					g_ymod = 0;
				}
			} else {
				g_xmod = 0;
				g_ymod = 0;
			}
			break;
		case 103:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 4) {
				if (p_istmauer(a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld) == 1 || (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod) > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level) || (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod) > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
					g_xmod = 0;
					g_ymod = 0;
				}
			} else {
				g_xmod = 0;
				g_ymod = 0;
			}
			break;
		case 104:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 4) {
				if (p_istmauer(a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld) == 1 || (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod) > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level) || (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod) > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
					g_xmod = 0;
					g_ymod = 0;
				}
			} else {
				g_xmod = 0;
				g_ymod = 0;
			}
			break;
		case 201:
			if (p_creature_add_poison(5)) {
				a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed = 0;
			}
			break;
		case 65:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 14) {
				p_creature_schaden(1, 0, 0, 0);
				if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 15) {
					p_cleartile((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod), -1);
				}
				a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed = 0;
			}
			break;
		case 40:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 14) {
				p_creature_schaden(1, 0, 0, 0);
				if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 15) {
					p_cleartile((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod), -1);
				}
				a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed = 0;
			}
			break;
		case 41:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 14) {
				p_creature_schaden(2, 0, 0, 0);
				if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 15) {
					p_cleartile((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod), -1);
				}
				a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed = 0;
			}
			break;
		case 42:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 14) {
				g_xmod = 0;
				g_ymod = 0;
			}
			break;
		case 110:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 14 && a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 11) {
				p_creature_schaden(5, 0, 0, 0);
				a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed = 0;
			}
			break;
		case 53:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 15 && a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 11) {
				g_xmod = 0;
				g_ymod = 0;
			}
			break;
		case 72:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 15 && a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 11) {
				g_xmod = 0;
				g_ymod = 0;
			}
			break;
		case 56:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 57:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 15:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 16:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 17:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 18:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 78:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 165:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 159:
			p_message(648, 6);
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 210:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 20:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 4) {
				if (p_istmauer(a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld) == 1) {
					g_xmod = 0;
					g_ymod = 0;
				}
			} else {
				g_xmod = 0;
				g_ymod = 0;
			}
			break;
		case 70:
			if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ == 9) {
				p_sound(38);
				p_cleartile((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod), -1);
				p_laby_screen3();
				p_delay(g_mydelay);
			}
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 136:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 112:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 88:
			g_xmod = 0;
			g_ymod = 0;
			break;
		case 199:
			g_xmod = 0;
			g_ymod = 0;
			break;
		}
		v_testfeld = a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod)).f_feld;
		if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 11) {
			if (p_istknochen(v_testfeld) == 1) {
				if (a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod)).f_stat1 == 1) {
					p_sound(22);
					p_aufstehen3(22);
					p_cleartile((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod), -1);
					p_setmonster((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod), a_spieler("creature_bewegen", g_akt_spieler).f_level, 4, a_monster("creature_bewegen", 4).f_nr, a_monster("creature_bewegen", 4).f_lebenspunkte, 0, 0, 0);
					g_xmod = 0;
					g_ymod = 0;
					p_laby_screen3();
					v_kaempfen = 1;
				}
			}
		}
		if ((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod) < 1 || (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod) < 1) {
			g_xmod = 0;
			g_ymod = 0;
		}
	} else {
		g_bewegt = 0;
	}
	g_spielerwechsel = 0;
	v_schongemalt = 0;
	if (g_xmod || g_ymod) {
		v_schongemalt = 1;
		a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed = (a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed - 1);
		if (!a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed) {
			g_spielerwechsel = 1;
		}
		for (v_i = 4; v_i <= 32; v_i += 4) {
			v_starttime3 = p_elapsedmilliseconds();
			v_framestep = (v_framestep + 1);
			if (v_framestep > 3) {
				v_framestep = 0;
				if (!v_frame) {
					v_frame = 1;
				} else {
					v_frame = 0;
				}
			}
			p_clearscreen(p_rgb(0, 0, 0));
			p_draw_screen2(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
			p_draw_screen5(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
			p_draw_screen6(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
			p_draw_screen8(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
			p_draw_creature(v_frame, 0);
			p_show_sight2();
			p_laby_rahmen(0);
			p_show_logo();
			p_show_varys2();
			p_show_buttons2();
			v_result = p_examinemouse();
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mmouse_links = p_mousebutton(1);
			v_mmouse_rechts = p_mousebutton(2);
			p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
			v_elapsedtime3 = (p_elapsedmilliseconds() - v_starttime3);
			if (v_elapsedtime3 < 15) {
				p_delay((15 - v_elapsedtime3));
			}
			p_flipbuffers(1);
			p_delay(g_mydelay2);
		}
		a_spieler("creature_bewegen", g_akt_spieler).f_creature_x = (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_xmod);
		a_spieler("creature_bewegen", g_akt_spieler).f_creature_y = (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_ymod);
		g_bewegt = 1;
		p_update_automap2();
		v_okay = 0;
		if (!v_okay && a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld == 74) {
			v_okay = 1;
			if (g_bewegt == 1) {
				p_sound(14);
				p_sternchen2(156, 156, 4);
				v_xsave = a_spieler("creature_bewegen", g_akt_spieler).f_creature_x;
				a_spieler("creature_bewegen", g_akt_spieler).f_creature_x = a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_stat1;
				a_spieler("creature_bewegen", g_akt_spieler).f_creature_y = a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, v_xsave, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_stat2;
				p_update_automap2();
				p_laby_screen3();
				v_nach_kampf = 1;
				v_force = 1;
				v_mouserun = 0;
				v_release = 1;
			}
		}
		if (!v_okay && a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld == 208 && a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 11) {
			v_okay = 1;
			p_creature_schaden(1, 0, 0, 0);
			p_message(833, 3);
		}
		if (!v_okay && a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld == 209) {
			v_okay = 1;
			p_sound(46);
			p_setlaby(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y, a_spieler("creature_bewegen", g_akt_spieler).f_level, 210, 0, 0);
		}
		if (!v_okay && a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld == 149) {
			v_okay = 1;
			p_message(498, 6);
			p_creature_schaden(0, 3, 0, 0);
			p_cleartile(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y, -1);
		}
		if (!v_okay && a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld == 158) {
			v_okay = 1;
			p_message(499, 6);
			p_creature_schaden((p_myrand2(a_spieler("creature_bewegen", g_akt_spieler).f_level) + 5), 0, 0, 0);
			p_cleartile(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y, -1);
		}
		v_testfeld = a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld;
		if (!v_okay && v_testfeld >= 31 && v_testfeld <= 39) {
			v_testfeld -= 9;
		}
		if (!v_okay && v_testfeld >= 22 && v_testfeld <= 30) {
			v_zw = 0;
			switch (v_testfeld) {
			case 22:
				p_message(188, 3);
				p_message(17, 3);
				for (v_k = 1; v_k <= 4; v_k += 1) {
					g_spell_x = p_neighbour_offset(v_k, 0);
					g_spell_y = p_neighbour_offset(v_k, 1);
					if (a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_spell_x), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_spell_y)).f_feld == a_mit_was("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
						p_monster_attack_from_distance(6, 1);
						break;
					}
				}
				v_zw = (p_myrand2(6) + 1);
				if (v_levelmod == 2) {
					v_zw = (v_zw * 2);
				}
				p_creature_schaden(v_zw, 0, 0, 0);
				p_cleartile(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y, -1);
				break;
			case 29:
				p_message(188, 3);
				p_message(18, 3);
				for (v_k = 1; v_k <= 4; v_k += 1) {
					g_spell_x = p_neighbour_offset(v_k, 0);
					g_spell_y = p_neighbour_offset(v_k, 1);
					if (a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_spell_x), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_spell_y)).f_feld == a_mit_was("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
						p_monster_attack_from_distance(7, 1);
						break;
					}
				}
				v_zw = (p_myrand2(6) + 6);
				if (v_levelmod == 2) {
					v_zw = (v_zw * 2);
				}
				p_creature_schaden(v_zw, 0, 0, 0);
				p_cleartile(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y, -1);
				break;
			case 23:
				p_message(188, 3);
				p_message(19, 3);
				for (v_k = 1; v_k <= 4; v_k += 1) {
					g_spell_x = p_neighbour_offset(v_k, 0);
					g_spell_y = p_neighbour_offset(v_k, 1);
					if (a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + g_spell_x), (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + g_spell_y)).f_feld == a_mit_was("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
						p_monster_attack_from_distance(8, 1);
						break;
					}
				}
				v_zw = 10;
				if (v_levelmod == 2) {
					v_zw = (v_zw * 2);
				}
				p_creature_add_poison(v_zw);
				p_cleartile(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y, -1);
				break;
			case 24:
				if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 11) {
					p_message(195, 3);
					v_zw = 1;
					p_setlaby(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y, a_spieler("creature_bewegen", g_akt_spieler).f_level, 33, 0, 0);
					p_creature_schaden(0, 3, 0, 0);
				}
				break;
			case 25:
				p_message(188, 3);
				p_message(20, 6);
				v_zw = 10;
				if (v_levelmod == 2) {
					v_zw = (v_zw * 2);
				}
				p_creature_add_poison(v_zw);
				p_sound(32);
				p_sternchen2(156, 156, 6);
				for (v_i = 1; v_i <= 11; v_i += 1) {
					for (v_j = 1; v_j <= 11; v_j += 1) {
						v_setx = ((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x - 6) + v_i);
						if (v_setx < 1) {
							v_setx = 1;
						}
						if (v_setx > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
							v_setx = a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level);
						}
						v_sety = ((a_spieler("creature_bewegen", g_akt_spieler).f_creature_y - 6) + v_j);
						if (v_sety < 1) {
							v_sety = 1;
						}
						if (v_sety > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
							v_sety = a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level);
						}
						v_tile = a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, v_setx, v_sety).f_feld;
						if (p_is_floor(v_tile)) {
							p_setlaby(v_setx, v_sety, a_spieler("creature_bewegen", g_akt_spieler).f_level, 201, 0, v_tile);
						}
					}
				}
				p_laby_screen3();
				break;
			case 26:
				p_message(188, 3);
				p_message(20, 3);
				v_zw = 3;
				if (v_levelmod == 2) {
					v_zw = (v_zw * 2);
				}
				p_sound(32);
				p_sternchen2(156, 156, 6);
				for (v_i = 1; v_i <= 11; v_i += 1) {
					for (v_j = 1; v_j <= 11; v_j += 1) {
						v_setx = ((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x - 6) + v_i);
						if (v_setx < 1) {
							v_setx = 1;
						}
						if (v_setx > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
							v_setx = a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level);
						}
						v_sety = ((a_spieler("creature_bewegen", g_akt_spieler).f_creature_y - 6) + v_j);
						if (v_sety < 1) {
							v_sety = 1;
						}
						if (v_sety > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
							v_sety = a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level);
						}
						v_tile = a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, v_setx, v_sety).f_feld;
						if (p_is_floor(v_tile)) {
							p_setlaby(v_setx, v_sety, a_spieler("creature_bewegen", g_akt_spieler).f_level, 41, 0, v_tile);
						}
					}
				}
				if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 14) {
					p_creature_schaden(v_zw, 0, 0, 0);
				}
				p_laby_screen3();
				break;
			case 27:
				p_message(188, 3);
				p_message(20, 2);
				v_zw = 2;
				if (v_levelmod == 2) {
					v_zw = (v_zw * 2);
				}
				p_sound(32);
				p_sternchen2(156, 156, 6);
				for (v_i = 1; v_i <= 11; v_i += 1) {
					for (v_j = 1; v_j <= 11; v_j += 1) {
						v_setx = ((a_spieler("creature_bewegen", g_akt_spieler).f_creature_x - 6) + v_i);
						if (v_setx < 1) {
							v_setx = 1;
						}
						if (v_setx > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
							v_setx = a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level);
						}
						v_sety = ((a_spieler("creature_bewegen", g_akt_spieler).f_creature_y - 6) + v_j);
						if (v_sety < 1) {
							v_sety = 1;
						}
						if (v_sety > a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level)) {
							v_sety = a_groesse("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level);
						}
						v_tile = a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, v_setx, v_sety).f_feld;
						if (p_is_floor(v_tile)) {
							p_setlaby(v_setx, v_sety, a_spieler("creature_bewegen", g_akt_spieler).f_level, 80, 0, v_tile);
						}
					}
				}
				p_creature_schaden(v_zw, 2, 0, 0);
				p_laby_screen3();
				break;
			case 28:
				p_message(188, 3);
				p_sound(32);
				p_sternchen2(156, 156, 4);
				if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 16) {
					v_zw = 50;
					if (v_levelmod == 2) {
						v_zw = (v_zw * 2);
					}
					p_creature_schaden(v_zw, 2, 0, 0);
				}
				p_cleartile(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y, -1);
				break;
			}
			if (v_zw) {
				a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed = 0;
			}
		}
	}
	v_result = p_examinemouse();
	v_mmouse_x = p_mousex();
	v_mmouse_y = p_mousey();
	v_mmouse_links = p_mousebutton(1);
	v_mmouse_rechts = p_mousebutton(2);
	if (!v_okay && v_pick_up) {
		v_testfeld = a_labyrinth("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level, a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_feld;
		if (p_is_waterfield(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y, 0) && a_spieler("creature_bewegen", g_akt_spieler).f_creature_typ != 15) {
			v_testfeld = -1;
		}
		if (v_testfeld == 6 || v_testfeld == 68 || v_testfeld == 63 || v_testfeld == 192 || v_testfeld == 194 || v_testfeld == 161 || v_testfeld == 162) {
			v_okay = 1;
			p_chest(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y);
			a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed = 0;
			g_spielerwechsel = 1;
		}
		if (a_laby_item("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level] > 0) {
			v_okay = 1;
			p_objekt(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y);
			a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed = 0;
			g_spielerwechsel = 1;
		}
		if (v_testfeld == 9 || v_testfeld == 160) {
			v_okay = 1;
			p_gold(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, a_spieler("creature_bewegen", g_akt_spieler).f_creature_y);
			a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed = 0;
			g_spielerwechsel = 1;
		}
	}
	if (!v_schongemalt) {
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_screen2(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
		p_draw_screen5(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
		p_draw_screen6(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
		p_draw_screen8(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
		p_draw_creature(v_frame, 0);
		p_show_sight2();
		p_laby_rahmen(0);
		p_show_logo();
		p_show_varys2();
		p_show_buttons2();
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mmouse_links = p_mousebutton(1);
		v_mmouse_rechts = p_mousebutton(2);
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		if (!g_bewegt) {
			p_show_movement(v_mmouse_x, v_mmouse_y, v_force, 1);
			v_force = 0;
		}
		p_flipbuffers(1);
		v_mouse_x_old = v_mmouse_x;
		v_mouse_y_old = v_mmouse_y;
	}
	if (g_spielerwechsel == 1) {
		if (a_spieler("creature_bewegen", g_akt_spieler).f_creature_poison > 0) {
			v_poison_dam = ((a_spieler("creature_bewegen", g_akt_spieler).f_creature_poison / 20) + 1);
			p_creature_schaden(v_poison_dam, 1, 0, 0);
			a_spieler("creature_bewegen", g_akt_spieler).f_creature_poison -= v_poison_dam;
		}
		p_clearlist(ll_movementlist);
		p_delay(g_mydelay);
	}
	if ((g_spielerwechsel || !a_spieler("creature_bewegen", g_akt_spieler).f_creature_speed) && p_creature_lebenspunkte() > 0) {
		if (v_hydra == 1) {
			v_angriff = 80;
			if (p_get_chance(100) < v_angriff) {
				v_schaden = (p_myrand2(15) + 1);
				p_creature_schaden(v_schaden, 0, 0, 0);
			} else {
				p_message(291, 3);
			}
		} else {
			v_xx = a_spieler("creature_bewegen", g_akt_spieler).f_creature_x;
			v_yy = (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + 1);
			v_mon_no = p_getmonster(v_xx, v_yy, -1);
			if (v_mon_no && p_ready_for_attack(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status)) {
				g_von_ferne = 0;
				v_x = 7;
				v_y = 8;
				p_draw_tile(a_inhalt("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level), v_x, v_y, 0, 0, -1);
				if (a_laby_item("creature_bewegen", v_xx, v_yy).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level] > 0) {
					p_draw_item(a_inhalt("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level), v_x, v_y, 0, 0);
				}
				p_draw_monster2(((v_x * 32) - 64), (((v_y * 32) - 64) - 3));
				p_monster_angriff2(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + 1));
				p_delay(g_mydelay);
				p_draw_tile(a_inhalt("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level), v_x, v_y, 0, 0, -1);
				if (a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level] > 0) {
					p_draw_item(a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level], v_x, v_y, 0, 0);
				}
				p_draw_monster2(((v_x * 32) - 64), ((v_y * 32) - 64));
				p_delay(g_mydelay);
			}
			v_xx = a_spieler("creature_bewegen", g_akt_spieler).f_creature_x;
			v_yy = (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y - 1);
			v_mon_no = p_getmonster(v_xx, v_yy, -1);
			if (v_mon_no && p_ready_for_attack(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status)) {
				g_von_ferne = 0;
				v_x = 7;
				v_y = 6;
				p_draw_tile(a_inhalt("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level), v_x, v_y, 0, 0, -1);
				if (a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level] > 0) {
					p_draw_item(a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level], v_x, v_y, 0, 0);
				}
				p_draw_monster2(((v_x * 32) - 64), (((v_y * 32) - 64) - 3));
				p_monster_angriff2(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + 1));
				p_delay(g_mydelay);
				p_draw_tile(a_inhalt("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level), v_x, v_y, 0, 0, -1);
				if (a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level] > 0) {
					p_draw_item(a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level], v_x, v_y, 0, 0);
				}
				p_draw_monster2(((v_x * 32) - 64), ((v_y * 32) - 64));
				p_delay(g_mydelay);
			}
			v_xx = (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x + 1);
			v_yy = a_spieler("creature_bewegen", g_akt_spieler).f_creature_y;
			v_mon_no = p_getmonster(v_xx, v_yy, -1);
			if (v_mon_no && p_ready_for_attack(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status)) {
				g_von_ferne = 0;
				v_x = 8;
				v_y = 7;
				p_draw_tile(a_inhalt("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level), v_x, v_y, 0, 0, -1);
				if (a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level] > 0) {
					p_draw_item(a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level], v_x, v_y, 0, 0);
				}
				p_draw_monster2(((v_x * 32) - 64), (((v_y * 32) - 64) - 3));
				p_monster_angriff2(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + 1));
				p_delay(g_mydelay);
				p_draw_tile(a_inhalt("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level), v_x, v_y, 0, 0, -1);
				if (a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level] > 0) {
					p_draw_item(a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level], v_x, v_y, 0, 0);
				}
				p_draw_monster2(((v_x * 32) - 64), ((v_y * 32) - 64));
				p_delay(g_mydelay);
			}
			v_xx = (a_spieler("creature_bewegen", g_akt_spieler).f_creature_x - 1);
			v_yy = a_spieler("creature_bewegen", g_akt_spieler).f_creature_y;
			v_mon_no = p_getmonster(v_xx, v_yy, -1);
			if (v_mon_no && p_ready_for_attack(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status)) {
				v_x = 6;
				v_y = 7;
				p_draw_tile(a_inhalt("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level), v_x, v_y, 0, 0, -1);
				if (a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level] > 0) {
					p_draw_item(a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level], v_x, v_y, 0, 0);
				}
				p_draw_monster2(((v_x * 32) - 64), (((v_y * 32) - 64) - 3));
				p_monster_angriff2(a_spieler("creature_bewegen", g_akt_spieler).f_creature_x, (a_spieler("creature_bewegen", g_akt_spieler).f_creature_y + 1));
				p_delay(g_mydelay);
				p_draw_tile(a_inhalt("creature_bewegen", a_spieler("creature_bewegen", g_akt_spieler).f_level), v_x, v_y, 0, 0, -1);
				if (a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level] > 0) {
					p_draw_item(a_laby_item("creature_bewegen", v_x, v_y).f_name[a_spieler("creature_bewegen", g_akt_spieler).f_level], v_x, v_y, 0, 0);
				}
				p_draw_monster2(((v_x * 32) - 64), ((v_y * 32) - 64));
				p_delay(g_mydelay);
			}
		}
		p_fernkampf2();
	}
	if (g_spielerwechsel || v_release) {
		return 1;
	} else {
		return 0;
	}
}

static intptr_t p_eisschaden(int16_t v_schaden) {
	int16_t v_mon_no = 0;
	int16_t v_testfeld = 0;
	if ((a_spieler("eisschaden", g_akt_spieler).f_character_x + g_spell_x) > 0 && (a_spieler("eisschaden", g_akt_spieler).f_character_y + g_spell_y) > 0) {
		v_mon_no = p_getmonster((a_spieler("eisschaden", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("eisschaden", g_akt_spieler).f_character_y + g_spell_y), -1);
		if (v_mon_no) {
			if (p_dispelled()) {
				p_message(312, 2);
			} else {
				if (!p_has_trait2(v_mon_no, 18) || p_habich(160) > 0) {
					p_monsterschaden(v_schaden);
				} else {
					p_message(267, 3);
				}
			}
		}
		v_testfeld = a_labyrinth("eisschaden", a_spieler("eisschaden", g_akt_spieler).f_level, (a_spieler("eisschaden", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("eisschaden", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
		if (v_testfeld == 40 || v_testfeld == 41) {
			if (v_schaden > 3) {
				p_sound(34);
				p_cleartile((a_spieler("eisschaden", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("eisschaden", g_akt_spieler).f_character_y + g_spell_y), -1);
				p_delay(g_mydelay);
				p_laby_screen();
			}
		}
	}
}

static intptr_t p_ende() {
	intptr_t v_aktiv = 0;
	intptr_t v_anaktiv = 0;
	int8_t v_eintrag = 0;
	std::string v_endezeit;
	intptr_t v_i = 0;
	intptr_t v_inaktiv = 0;
	intptr_t v_j = 0;
	intptr_t v_jb1 = 0;
	intptr_t v_k = 0;
	std::string v_lastwords;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_mouse_x_old = 0;
	intptr_t v_mouse_y_old = 0;
	intptr_t v_result = 0;
	std::string v_tmptxt;
	intptr_t v_tot = 0;
	int16_t v_warten = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x1 = 0;
	intptr_t v_x2 = 0;
	intptr_t v_x3 = 0;
	int16_t v_xx = 0;
	int16_t v_yy = 0;
	intptr_t v_zaehler = 0;
	v_lastwords = "";
	a_spieler("ende", g_akt_spieler).f_status = 3;
	a_spieler("ende", g_akt_spieler).f_creature_typ = 0;
	a_spieler("ende", g_akt_spieler).f_creature_lifepoints = 0;
	a_spieler("ende", g_akt_spieler).f_cause_of_death = 14;
	v_x1 = (a_spieler("ende", g_akt_spieler).f_maxlevel * 10);
	v_x2 = (p_gold_anzahl() / 10);
	v_x3 = (a_spieler("ende", g_akt_spieler).f_mks / 5);
	if (v_x2 > v_x1) {
		v_x2 = v_x1;
	}
	if (v_x3 > v_x1) {
		v_x3 = v_x1;
	}
	g_punkte = ((v_x1 + v_x2) + v_x3);
	g_punkte = (g_punkte + 1000);
	v_eintrag = 0;
	v_i = 1;
	do {
		if (g_punkte > a_hscores("ende", v_i).f_punkte) {
			v_eintrag = v_i;
		}
		v_i = (v_i + 1);
	} while (!(v_i > 30 || v_eintrag > 0));
	if (v_eintrag > 0) {
		v_warten = 0;
		v_xx = 100;
		v_yy = 115;
		do {
			p_fenster(0);
			p_clearscreen(p_rgb(0, 0, 0));
			p_laby_rahmen(0);
			p_show_logo();
			p_show_varys(0);
			p_clipsprite(75, 1, 1, 335, 335);
			p_displaytransparentsprite(75, 16, 16);
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(0, 0, 0));
			p_box(v_xx, v_yy, 150, 17, -1);
			p_frontcolor(p_rgb(255, 255, 255));
			v_tmptxt = a_spieler("ende", g_akt_spieler).f_name + a_message_text("ende", 240, (1 + g_language));
			p_drawtext((176 - (p_textwidth(v_tmptxt) / 2)), 25, v_tmptxt, -1, 0);
			p_drawtext(40, 40, a_message_text("ende", 241, (1 + g_language)), -1, 0);
			p_drawtext(40, 55, a_message_text("ende", 242, (1 + g_language)), -1, 0);
			p_drawtext(40, 70, a_message_text("ende", 243, (1 + g_language)), -1, 0);
			p_drawtext(40, 85, a_message_text("ende", 244, (1 + g_language)), -1, 0);
			p_drawtext(40, 100, a_message_text("ende", 80, (1 + g_language)), -1, 0);
			p_drawtext(v_xx, v_yy, v_lastwords, -1, 0);
			p_stopdrawing();
			v_result = p_examinemouse();
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mmouse_links = p_mousebutton(1);
			p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
			v_mouse_x_old = v_mmouse_x;
			v_mouse_y_old = v_mmouse_y;
			p_examinekeyboard();
			p_read_joystick();
			v_lastwords = p_keyboard_string(v_lastwords, 0);
			if (p_len(v_lastwords) > 25) {
				v_lastwords = p_mid(v_lastwords, 1, 25);
			}
			v_warten = (v_warten + 1);
			if (v_warten < 3) {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_drawingmode(1);
				p_frontcolor(p_rgb(255, 255, 255));
				p_line((v_xx + p_textwidth(v_lastwords)), v_yy, 0, 15, -1);
				p_line(((v_xx + 1) + p_textwidth(v_lastwords)), v_yy, 0, 15, -1);
				p_stopdrawing();
			}
			if (v_warten > 4) {
				v_warten = 0;
			}
			p_flipbuffers(1);
			p_delay(20);
		} while (!((p_keyboardpushed(13) || v_jb1 == 1) && v_lastwords != ""));
		v_j = 30;
		while (v_j > v_eintrag) {
			a_hscores("ende", v_j).f_name = a_hscores("ende", (v_j - 1)).f_name;
			a_hscores("ende", v_j).f_level = a_hscores("ende", (v_j - 1)).f_level;
			a_hscores("ende", v_j).f_gold = a_hscores("ende", (v_j - 1)).f_gold;
			a_hscores("ende", v_j).f_mks = a_hscores("ende", (v_j - 1)).f_mks;
			a_hscores("ende", v_j).f_punkte = a_hscores("ende", (v_j - 1)).f_punkte;
			a_hscores("ende", v_j).f_maennchen = a_hscores("ende", (v_j - 1)).f_maennchen;
			a_hscores("ende", v_j).f_anfangszeit = a_hscores("ende", (v_j - 1)).f_anfangszeit;
			a_hscores("ende", v_j).f_endezeit = a_hscores("ende", (v_j - 1)).f_endezeit;
			a_hscores("ende", v_j).f_maxlifepoints = a_hscores("ende", (v_j - 1)).f_maxlifepoints;
			a_hscores("ende", v_j).f_maxmana = a_hscores("ende", (v_j - 1)).f_maxmana;
			a_hscores("ende", v_j).f_attack = a_hscores("ende", (v_j - 1)).f_attack;
			a_hscores("ende", v_j).f_dexterity = a_hscores("ende", (v_j - 1)).f_dexterity;
			a_hscores("ende", v_j).f_strength = a_hscores("ende", (v_j - 1)).f_strength;
			a_hscores("ende", v_j).f_maxspeed = a_hscores("ende", (v_j - 1)).f_maxspeed;
			a_hscores("ende", v_j).f_perception = a_hscores("ende", (v_j - 1)).f_perception;
			a_hscores("ende", v_j).f_luck_score = a_hscores("ende", (v_j - 1)).f_luck_score;
			a_hscores("ende", v_j).f_power_score = a_hscores("ende", (v_j - 1)).f_power_score;
			a_hscores("ende", v_j).f_circle = a_hscores("ende", (v_j - 1)).f_circle;
			a_hscores("ende", v_j).f_stabteile = a_hscores("ende", (v_j - 1)).f_stabteile;
			a_hscores("ende", v_j).f_cause_of_death = a_hscores("ende", (v_j - 1)).f_cause_of_death;
			a_hscores("ende", v_j).f_cause_of_death_monster = a_hscores("ende", (v_j - 1)).f_cause_of_death_monster;
			for (v_k = 1; v_k <= 30; v_k += 1) {
				a_hscores("ende", v_j).f_skills[v_k] = a_hscores("ende", (v_j - 1)).f_skills[v_k];
			}
			v_j = (v_j - 1);
		}
		g_letzter_eintrag = v_eintrag;
		if (v_eintrag > 0) {
			v_endezeit = p_formatdate("%yyyy%mm%dd%hh%ii%ss", p_date());
			a_hscores("ende", v_eintrag).f_name = a_spieler("ende", g_akt_spieler).f_name;
			a_hscores("ende", v_eintrag).f_level = g_level;
			a_hscores("ende", v_eintrag).f_gold = p_gold_anzahl();
			a_hscores("ende", v_eintrag).f_mks = a_spieler("ende", g_akt_spieler).f_mks;
			a_hscores("ende", v_eintrag).f_punkte = g_punkte;
			a_hscores("ende", v_eintrag).f_maennchen = a_spieler("ende", g_akt_spieler).f_maennchen;
			a_hscores("ende", v_eintrag).f_anfangszeit = g_anfangszeit;
			a_hscores("ende", v_eintrag).f_endezeit = v_endezeit;
			a_hscores("ende", v_eintrag).f_maxlifepoints = a_spieler("ende", g_akt_spieler).f_maxlifepoints;
			a_hscores("ende", v_eintrag).f_maxmana = a_spieler("ende", g_akt_spieler).f_maxmana;
			a_hscores("ende", v_eintrag).f_attack = a_spieler("ende", g_akt_spieler).f_attack;
			a_hscores("ende", v_eintrag).f_dexterity = a_spieler("ende", g_akt_spieler).f_dexterity;
			a_hscores("ende", v_eintrag).f_strength = a_spieler("ende", g_akt_spieler).f_strength;
			a_hscores("ende", v_eintrag).f_maxspeed = a_spieler("ende", g_akt_spieler).f_maxspeed;
			a_hscores("ende", v_eintrag).f_perception = a_spieler("ende", g_akt_spieler).f_perception;
			a_hscores("ende", v_eintrag).f_luck_score = a_spieler("ende", g_akt_spieler).f_luck_score;
			a_hscores("ende", v_eintrag).f_power_score = a_spieler("ende", g_akt_spieler).f_power_score;
			a_hscores("ende", v_eintrag).f_circle = a_spieler("ende", g_akt_spieler).f_circle;
			a_hscores("ende", v_eintrag).f_stabteile = p_anz_staffpieces();
			a_hscores("ende", v_eintrag).f_cause_of_death = 14;
			a_high_skill.dim("high_skill", 31);
			for (v_i = 1; v_i <= 30; v_i += 1) {
				a_high_skill("ende", v_i) = 0;
			}
			v_zaehler = 1;
			for (v_i = 2; v_i <= 144; v_i += 1) {
				if (a_skills("ende", v_i, g_akt_spieler).f_gewaehlt == 1) {
					a_high_skill("ende", v_zaehler) = a_skills("ende", v_i, g_akt_spieler).f_nummer;
					v_zaehler = (v_zaehler + 1);
				}
			}
			for (v_k = 1; v_k <= 30; v_k += 1) {
				if (a_high_skill("ende", v_k) > 0) {
					a_hscores("ende", v_eintrag).f_skills[v_k] = a_high_skill("ende", v_k);
				}
			}
			p_new_highscore(v_lastwords);
			p_show_highscore();
		}
	} else {
		do {
			p_fenster(0);
			p_clearscreen(p_rgb(0, 0, 0));
			p_laby_rahmen(0);
			p_show_logo();
			p_show_varys(0);
			p_clipsprite(19, 1, 1, 335, 335);
			p_displaytransparentsprite(19, 16, 16);
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(130, 25, p_nachricht4(83), -1, 0);
			p_stopdrawing();
			v_result = p_examinemouse();
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mmouse_links = p_mousebutton(1);
			p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
			v_mouse_x_old = v_mmouse_x;
			v_mouse_y_old = v_mmouse_y;
			p_examinekeyboard();
			p_flipbuffers(1);
		} while (!(v_mmouse_links == 1 || p_keyboardpushed(13) || v_jb1 == 1));
	}
	v_aktiv = 0;
	for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
		if (a_spieler("ende", v_i).f_status == 1) {
			v_aktiv = 1;
		}
	}
	if (v_aktiv == 1) {
		p_naechster();
	} else {
		v_tot = 1;
		for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
			if (a_spieler("ende", v_i).f_status < 3) {
				v_tot = 0;
			}
		}
		if (v_tot == 1) {
			throw Lv_again;
		} else {
			v_inaktiv = 1;
			for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
				if (a_spieler("ende", v_i).f_status == 1 || a_spieler("ende", v_i).f_status == 3) {
					v_anaktiv = 0;
				}
			}
			if (v_inaktiv == 1) {
				p_neuer_level();
			}
		}
	}
}

static intptr_t p_equip(int16_t v_slot) {
	intptr_t v_i = 0;
	int16_t v_item = 0;
	int8_t v_schild = 0;
	int16_t v_type = 0;
	int8_t v_waffe = 0;
	int8_t v_waffe2 = 0;
	int8_t v_waffe2h = 0;
	if (v_slot < 1 || v_slot > 50) {
		return 0;
	}
	v_item = a_inventory("equip", v_slot, g_akt_spieler).f_name;
	v_type = a_item("equip", v_item).f_type;
	if (v_type == 1 || v_type == 21 || (v_type >= 6 && v_type <= 11)) {
		if (a_inventory("equip", v_slot, g_akt_spieler).f_status == 2) {
			return 0;
		}
	}
	if (!a_inventory("equip", v_slot, g_akt_spieler).f_benutzt) {
		if (v_item == 46 || v_item == 47) {
			if (a_inventory("equip", v_slot, g_akt_spieler).f_anzahl > 0) {
				if (!p_split(1)) {
					p_message(945, 3);
					return 0;
				}
			}
			if (a_inventory("equip", v_slot, g_akt_spieler).f_status > 0) {
				p_laby_screen();
				p_sound(18);
				p_delay(g_mydelay);
				a_spieler("equip", g_akt_spieler).f_light = (a_spieler("equip", g_akt_spieler).f_light + 3);
				a_inventory("equip", v_slot, g_akt_spieler).f_status = (a_inventory("equip", v_slot, g_akt_spieler).f_status - 1);
				if (a_inventory("equip", v_slot, g_akt_spieler).f_status < 1) {
					a_spieler("equip", g_akt_spieler).f_light = (a_spieler("equip", g_akt_spieler).f_light - 3);
					return 0;
				}
				p_laby_screen();
				p_delay((g_mydelay * 2));
			} else {
				return 0;
			}
		} else {
			if (v_item == 39 || v_item == 40) {
				if (a_inventory("equip", v_slot, g_akt_spieler).f_anzahl > 0) {
					if (!p_split(1)) {
						p_message(945, 3);
						return 0;
					}
				}
				if (a_inventory("equip", v_slot, g_akt_spieler).f_status > 0) {
					p_laby_screen();
					p_sound(18);
					p_delay(g_mydelay);
					a_spieler("equip", g_akt_spieler).f_light = (a_spieler("equip", g_akt_spieler).f_light + 4);
					a_inventory("equip", v_slot, g_akt_spieler).f_status = (a_inventory("equip", v_slot, g_akt_spieler).f_status - 1);
					if (a_inventory("equip", v_slot, g_akt_spieler).f_status < 1) {
						a_spieler("equip", g_akt_spieler).f_light = (a_spieler("equip", g_akt_spieler).f_light - 4);
						return 0;
					}
					p_laby_screen();
					p_delay((g_mydelay * 2));
				} else {
					return 0;
				}
			} else {
				if (a_item("equip", v_item).f_type == 8) {
					if (a_skills("equip", 143, g_akt_spieler).f_gewaehlt == 1) {
						p_message(872, 3);
						return 0;
					}
					if (a_inventory("equip", v_slot, g_akt_spieler).f_anzahl > 0) {
						if (!p_split(1)) {
							p_message(945, 3);
							return 0;
						}
					}
					for (v_i = 1; v_i <= 50; v_i += 1) {
						if (a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_type == 8 && a_inventory("equip", v_i, g_akt_spieler).f_benutzt == 1) {
							p_un_equip(v_i);
							break;
						}
					}
					if (v_item == 200) {
						a_spieler("equip", g_akt_spieler).f_zugweitegegenstand = (a_spieler("equip", g_akt_spieler).f_zugweitegegenstand + 3);
					} else {
						if (v_item == 347) {
							p_eintragen(49, 1, -1, 347);
						} else {
							if (v_item == 349) {
								p_eintragen(7, 1, -1, 349);
							} else {
								if (v_item == 348) {
									p_eintragen(68, 1, -1, 348);
								}
							}
						}
					}
				} else {
					if (a_item("equip", v_item).f_type == 6) {
						if (a_skills("equip", 143, g_akt_spieler).f_gewaehlt == 1) {
							p_message(872, 3);
							return 0;
						}
						if (a_inventory("equip", v_slot, g_akt_spieler).f_anzahl > 0) {
							if (!p_split(1)) {
								p_message(945, 3);
								return 0;
							}
						}
						for (v_i = 1; v_i <= 50; v_i += 1) {
							if (a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_type == 6 && a_inventory("equip", v_i, g_akt_spieler).f_benutzt == 1) {
								p_un_equip(v_i);
								break;
							}
						}
						a_inventory("equip", v_slot, g_akt_spieler).f_benutzt = 1;
						if (v_item == 260) {
							a_spieler("equip", g_akt_spieler).f_bogentreffergegenstand = (a_spieler("equip", g_akt_spieler).f_bogentreffergegenstand + 10);
						} else {
							if (v_item == 51) {
								a_spieler("equip", g_akt_spieler).f_lifepointgegenstand = (a_spieler("equip", g_akt_spieler).f_lifepointgegenstand + 7);
							} else {
								if (v_item == 54) {
									a_spieler("equip", g_akt_spieler).f_managegenstand = (a_spieler("equip", g_akt_spieler).f_managegenstand + 7);
								} else {
									if (v_item == 229) {
										a_spieler("equip", g_akt_spieler).f_powergegenstand = (a_spieler("equip", g_akt_spieler).f_powergegenstand + a_inventory("equip", v_slot, g_akt_spieler).f_attri5);
									} else {
										if (v_item == 230) {
											a_spieler("equip", g_akt_spieler).f_staerkegegenstand = (a_spieler("equip", g_akt_spieler).f_staerkegegenstand + 2);
										}
									}
								}
							}
						}
					} else {
						if (a_item("equip", v_item).f_type == 1) {
							if (a_skills("equip", 141, g_akt_spieler).f_gewaehlt == 1) {
								p_message(873, 3);
								return 0;
							}
							if (a_inventory("equip", v_slot, g_akt_spieler).f_anzahl > 0) {
								if (!p_split(1)) {
									p_message(945, 3);
									return 0;
								}
							}
							v_waffe = 0;
							v_schild = 0;
							v_waffe2h = 0;
							v_waffe2 = 0;
							for (v_i = 1; v_i <= 50; v_i += 1) {
								if (a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_type == 1 && a_inventory("equip", v_i, g_akt_spieler).f_benutzt == 1) {
									if (!v_waffe) {
										v_waffe = v_i;
									} else {
										v_waffe2 = v_i;
									}
									if (!a_skills("equip", 121, g_akt_spieler).f_gewaehlt && a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_attri4 == 2) {
										v_waffe2h = v_i;
									}
								}
								if (a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_type == 11 && a_inventory("equip", v_i, g_akt_spieler).f_benutzt == 1) {
									v_schild = v_i;
								}
							}
							if (a_item("equip", a_inventory("equip", v_slot, g_akt_spieler).f_name).f_attri4 == 2 && !a_skills("equip", 121, g_akt_spieler).f_gewaehlt) {
								if (v_waffe > 0) {
									p_un_equip(v_waffe);
								}
								if (v_waffe2 > 0) {
									p_un_equip(v_waffe2);
								}
								if (v_schild > 0) {
									p_un_equip(v_schild);
								}
							} else {
								if (v_schild || v_waffe2h || v_waffe2 || !a_skills("equip", 12, g_akt_spieler).f_gewaehlt) {
									if (v_waffe > 0) {
										p_un_equip(v_waffe);
									}
								}
							}
							a_spieler("equip", g_akt_spieler).f_style = 0;
							if (v_item == 237 || v_item == 49 || v_item == 236 || v_item == 385) {
								a_spieler("equip", g_akt_spieler).f_lichtgegenstand = (a_spieler("equip", g_akt_spieler).f_lichtgegenstand + 2);
							}
							if (v_item == 142 || v_item == 376 || v_item == 377 || v_item == 233) {
								p_eintragen(71, 1, -1, v_item);
							}
							if (v_item == 143 || v_item == 378 || v_item == 379 || v_item == 235) {
								p_eintragen(70, 1, -1, v_item);
							}
						} else {
							if (a_item("equip", v_item).f_type == 9) {
								if (a_skills("equip", 143, g_akt_spieler).f_gewaehlt == 1) {
									p_message(872, 3);
									return 0;
								}
								if (a_inventory("equip", v_slot, g_akt_spieler).f_anzahl > 0) {
									if (!p_split(1)) {
										p_message(945, 3);
										return 0;
									}
								}
								for (v_i = 1; v_i <= 50; v_i += 1) {
									if (a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_type == 9 && a_inventory("equip", v_i, g_akt_spieler).f_benutzt == 1) {
										p_un_equip(v_i);
										break;
									}
								}
								switch (v_item) {
								case 222:
									a_spieler("equip", g_akt_spieler).f_powergegenstand = (a_spieler("equip", g_akt_spieler).f_powergegenstand + a_inventory("equip", v_slot, g_akt_spieler).f_attri5);
									break;
								case 223:
									a_spieler("equip", g_akt_spieler).f_lifepointgegenstand = (a_spieler("equip", g_akt_spieler).f_lifepointgegenstand + 1);
									break;
								case 153:
									a_spieler("equip", g_akt_spieler).f_stealthgegenstand = (a_spieler("equip", g_akt_spieler).f_stealthgegenstand + 2);
									break;
								case 228:
									a_spieler("equip", g_akt_spieler).f_staerkegegenstand = (a_spieler("equip", g_akt_spieler).f_staerkegegenstand + a_inventory("equip", v_slot, g_akt_spieler).f_attri5);
									break;
								case 224:
									a_spieler("equip", g_akt_spieler).f_magieresistenz = (a_spieler("equip", g_akt_spieler).f_magieresistenz + 20);
									break;
								case 225:
									p_eintragen(70, 1, -1, 225);
									break;
								}
							} else {
								if (a_item("equip", v_item).f_type == 7) {
									if (a_skills("equip", 143, g_akt_spieler).f_gewaehlt == 1) {
										p_message(872, 3);
										return 0;
									}
									if (a_inventory("equip", v_slot, g_akt_spieler).f_anzahl > 0) {
										if (!p_split(1)) {
											p_message(945, 3);
											return 0;
										}
									}
									for (v_i = 1; v_i <= 50; v_i += 1) {
										if (a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_type == 7 && a_inventory("equip", v_i, g_akt_spieler).f_benutzt == 1) {
											p_un_equip(v_i);
											break;
										}
									}
									if (v_item == 239) {
										a_spieler("equip", g_akt_spieler).f_staerkegegenstand = (a_spieler("equip", g_akt_spieler).f_staerkegegenstand + 2);
									}
								} else {
									if (a_item("equip", v_item).f_type == 11) {
										if (a_skills("equip", 143, g_akt_spieler).f_gewaehlt == 1) {
											p_message(872, 3);
											return 0;
										}
										if (a_inventory("equip", v_slot, g_akt_spieler).f_anzahl > 0) {
											if (!p_split(1)) {
												p_message(945, 3);
												return 0;
											}
										}
										v_waffe = 0;
										v_schild = 0;
										v_waffe2h = 0;
										v_waffe2 = 0;
										for (v_i = 1; v_i <= 50; v_i += 1) {
											if (a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_type == 1 && a_inventory("equip", v_i, g_akt_spieler).f_benutzt == 1) {
												if (!v_waffe) {
													v_waffe = v_i;
												} else {
													v_waffe2 = v_i;
												}
												if (!a_skills("equip", 121, g_akt_spieler).f_gewaehlt && a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_attri4 == 2) {
													v_waffe2h = v_i;
												}
											}
											if (a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_type == 11 && a_inventory("equip", v_i, g_akt_spieler).f_benutzt == 1) {
												v_schild = v_i;
											}
										}
										if (v_schild > 0) {
											p_un_equip(v_schild);
										}
										if (v_waffe2 > 0) {
											p_un_equip(v_waffe2);
										}
										if (v_waffe2h > 0) {
											p_un_equip(v_waffe2h);
										}
									} else {
										if (a_item("equip", v_item).f_type == 18) {
											if (a_inventory("equip", v_slot, g_akt_spieler).f_anzahl > 0) {
												if (!p_split(1)) {
													p_message(945, 3);
													return 0;
												}
											}
											if (!a_skills("equip", 93, g_akt_spieler).f_gewaehlt) {
												for (v_i = 1; v_i <= 50; v_i += 1) {
													if (a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_type == 18 && a_inventory("equip", v_i, g_akt_spieler).f_benutzt == 1) {
														p_un_equip(v_i);
														break;
													}
												}
											}
											switch (v_item) {
											case 149:
												a_spieler("equip", g_akt_spieler).f_managegenstand = (a_spieler("equip", g_akt_spieler).f_managegenstand + 4);
												break;
											case 220:
												p_eintragen(61, 2, -1, 220);
												break;
											case 221:
												p_eintragen(80, 1, -1, 221);
												break;
											case 255:
												a_spieler("equip", g_akt_spieler).f_powergegenstand = (a_spieler("equip", g_akt_spieler).f_powergegenstand + a_inventory("equip", v_slot, g_akt_spieler).f_attri5);
												break;
											case 256:
												a_spieler("equip", g_akt_spieler).f_perceptiongegenstand = (a_spieler("equip", g_akt_spieler).f_perceptiongegenstand + a_inventory("equip", v_slot, g_akt_spieler).f_attri5);
												break;
											case 257:
												a_spieler("equip", g_akt_spieler).f_damagegegenstand = (a_spieler("equip", g_akt_spieler).f_damagegegenstand + a_inventory("equip", v_slot, g_akt_spieler).f_attri5);
												break;
											case 253:
												a_spieler("equip", g_akt_spieler).f_staerkegegenstand = (a_spieler("equip", g_akt_spieler).f_staerkegegenstand + a_inventory("equip", v_slot, g_akt_spieler).f_attri5);
												break;
											case 302:
												a_spieler("equip", g_akt_spieler).f_stealthgegenstand = (a_spieler("equip", g_akt_spieler).f_stealthgegenstand + a_inventory("equip", v_slot, g_akt_spieler).f_attri5);
												break;
											case 303:
												a_spieler("equip", g_akt_spieler).f_bogentreffergegenstand = (a_spieler("equip", g_akt_spieler).f_bogentreffergegenstand + a_inventory("equip", v_slot, g_akt_spieler).f_attri5);
												break;
											case 304:
												a_spieler("equip", g_akt_spieler).f_bogenschadengegenstand = (a_spieler("equip", g_akt_spieler).f_bogenschadengegenstand + a_inventory("equip", v_slot, g_akt_spieler).f_attri5);
												break;
											case 305:
												a_spieler("equip", g_akt_spieler).f_magieresistenz = (a_spieler("equip", g_akt_spieler).f_magieresistenz + (a_inventory("equip", v_slot, g_akt_spieler).f_attri5 * 10));
												break;
											case 306:
												p_eintragen(71, 1, -1, 306);
												break;
											case 307:
												p_eintragen(70, 1, -1, 307);
												break;
											}
										} else {
											if (a_item("equip", v_item).f_type == 20) {
												if (a_inventory("equip", v_slot, g_akt_spieler).f_anzahl > 0) {
													if (!p_split(1)) {
														p_message(945, 3);
														return 0;
													}
												}
												for (v_i = 1; v_i <= 50; v_i += 1) {
													if (a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_type == 20 && a_inventory("equip", v_i, g_akt_spieler).f_benutzt == 1) {
														p_un_equip(v_i);
														break;
													}
												}
												switch (v_item) {
												case 135:
													p_eintragen(109, 1, -1, 135);
													break;
												case 136:
													p_eintragen(118, 1, -1, 136);
													break;
												case 137:
													p_eintragen(119, 1, -1, 137);
													break;
												case 138:
													a_spieler("equip", g_akt_spieler).f_powergegenstand = (a_spieler("equip", g_akt_spieler).f_powergegenstand + a_inventory("equip", v_slot, g_akt_spieler).f_attri5);
													break;
												case 139:
													p_eintragen(70, 1, -1, 139);
													break;
												case 140:
													p_eintragen(71, 1, -1, 140);
													break;
												case 261:
													p_eintragen(61, 3, -1, 261);
													break;
												case 262:
													p_eintragen(75, 2, -1, 262);
													break;
												case 263:
													p_eintragen(103, 1, -1, 263);
													break;
												case 264:
													p_eintragen(110, 1, -1, 264);
													break;
												case 265:
													p_eintragen(40, a_inventory("equip", v_slot, g_akt_spieler).f_attri5, -1, 265);
													break;
												case 266:
													p_eintragen(49, 1, -1, 266);
													break;
												}
											} else {
												if (a_item("equip", v_item).f_type == 21) {
													if (a_inventory("equip", v_slot, g_akt_spieler).f_anzahl > 0) {
														if (!p_split(1)) {
															p_message(945, 3);
															return 0;
														}
													}
													for (v_i = 1; v_i <= 50; v_i += 1) {
														if (a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_type == 21 && a_inventory("equip", v_i, g_akt_spieler).f_benutzt == 1) {
															p_un_equip(v_i);
															break;
														}
													}
													a_spieler("equip", g_akt_spieler).f_perceptiongegenstand = (a_spieler("equip", g_akt_spieler).f_perceptiongegenstand + 2);
												} else {
													if (a_item("equip", v_item).f_type == 19) {
														if (a_skills("equip", 143, g_akt_spieler).f_gewaehlt == 1) {
															p_message(872, 3);
															return 0;
														}
														if (a_inventory("equip", v_slot, g_akt_spieler).f_anzahl > 0) {
															if (!p_split(1)) {
																p_message(945, 3);
																return 0;
															}
														}
														for (v_i = 1; v_i <= 50; v_i += 1) {
															if (a_item("equip", a_inventory("equip", v_i, g_akt_spieler).f_name).f_type == 19 && a_inventory("equip", v_i, g_akt_spieler).f_benutzt == 1) {
																p_un_equip(v_i);
																break;
															}
														}
														switch (v_item) {
														case 201:
															a_spieler("equip", g_akt_spieler).f_stealthgegenstand = (a_spieler("equip", g_akt_spieler).f_stealthgegenstand + 10);
															break;
														case 145:
															a_spieler("equip", g_akt_spieler).f_staerkegegenstand = (a_spieler("equip", g_akt_spieler).f_staerkegegenstand + a_inventory("equip", v_slot, g_akt_spieler).f_attri5);
															break;
														}
													} else {
														if (v_item == 400) {
															if (!a_skills("equip", 58, g_akt_spieler).f_gewaehlt) {
																p_message(864, 3);
																return 0;
															}
															if (a_inventory("equip", v_slot, g_akt_spieler).f_anzahl > 0) {
																if (!p_split(1)) {
																	p_message(945, 3);
																	return 0;
																}
															}
															for (v_i = 1; v_i <= 50; v_i += 1) {
																if (a_inventory("equip", v_i, g_akt_spieler).f_name == 400 && a_inventory("equip", v_i, g_akt_spieler).f_benutzt == 1) {
																	p_un_equip(v_i);
																	break;
																}
															}
															p_eintragen(48, 1, -1, 400);
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		p_delay(g_mydelay);
		g_aktion = 1;
		a_inventory("equip", v_slot, g_akt_spieler).f_benutzt = 1;
	}
	return 1;
}

static intptr_t p_erfolgreich(int16_t v_spell) {
	int16_t v_okay = 0;
	v_okay = 0;
	if ((a_learned("erfolgreich", g_akt_spieler, v_spell) & 127) < 100) {
		a_learned("erfolgreich", g_akt_spieler, v_spell) += 5;
	}
	if (g_item_spell) {
		return 1;
	}
	if (p_zauberchance(v_spell) > 99) {
		v_okay = 1;
	} else {
		if (p_get_chance(101) < p_zauberchance(v_spell)) {
			v_okay = 1;
		}
	}
	if (v_okay) {
		if (p_myrand(1499) < p_max(1, (16 - p_luck()))) {
			p_botch(v_spell);
			return 0;
		}
		if (a_spells("erfolgreich", v_spell).f_weavable == 1) {
			if (p_myrand2(199) <= p_min(20, (5 + p_luck()))) {
				p_message(737, 2);
				p_animate_special_success();
				return 2;
			}
		}
	} else {
		if (p_myrand(149) < p_max(1, (16 - p_luck()))) {
			p_botch(v_spell);
		} else {
			p_sound(49);
			p_message(48, 2);
		}
	}
	return v_okay;
}

static intptr_t p_explodiert(int16_t v_damage) {
	int16_t v_mon = 0;
	int16_t v_save_akt_spieler = 0;
	int16_t v_save_spell_x = 0;
	int16_t v_save_spell_y = 0;
	int16_t v_vergl_x = 0;
	int16_t v_vergl_y = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	intptr_t v_zaehl = 0;
	p_message(706, 3);
	p_sound((41 + p_random(1)));
	for (v_y = ((g_spell_y - 1) + 7); v_y <= ((g_spell_y + 1) + 7); v_y += 1) {
		for (v_x = ((g_spell_x - 1) + 7); v_x <= ((g_spell_x + 1) + 7); v_x += 1) {
			p_draw_tile(42, v_x, v_y, 1, 1, -1);
		}
	}
	p_flipbuffers(1);
	p_delay(g_mydelay);
	p_laby_screen();
	v_save_akt_spieler = g_akt_spieler;
	v_vergl_x = (a_spieler("explodiert", g_akt_spieler).f_character_x + g_spell_x);
	v_vergl_y = (a_spieler("explodiert", g_akt_spieler).f_character_y + g_spell_y);
	for (g_akt_spieler = 1; g_akt_spieler <= g_nr_of_players; g_akt_spieler += 1) {
		if (a_spieler("explodiert", g_akt_spieler).f_status != 1) {
			continue;
		}
		if (a_spieler("explodiert", g_akt_spieler).f_character_x >= (v_vergl_x - 1) && a_spieler("explodiert", g_akt_spieler).f_character_x <= (v_vergl_x + 1) && a_spieler("explodiert", g_akt_spieler).f_character_y >= (v_vergl_y - 1) && a_spieler("explodiert", g_akt_spieler).f_character_y <= (v_vergl_y + 1) && a_spieler("explodiert", g_akt_spieler).f_level == a_spieler("explodiert", v_save_akt_spieler).f_level) {
			if (!p_habich(7) || !p_habich(124)) {
				p_spielerschaden(v_damage, 1, 15, 0, 0);
			}
		}
	}
	g_akt_spieler = v_save_akt_spieler;
	v_save_spell_x = g_spell_x;
	v_save_spell_y = g_spell_y;
	for (v_zaehl = 1; v_zaehl <= 9; v_zaehl += 1) {
		switch (v_zaehl) {
		case 1:
			g_spell_x = (g_spell_x - 1);
			g_spell_y = (g_spell_y - 1);
			break;
		case 2:
			g_spell_x = (g_spell_x + 1);
			break;
		case 3:
			g_spell_x = (g_spell_x + 1);
			break;
		case 4:
			g_spell_y = (g_spell_y + 1);
			g_spell_x = (g_spell_x - 2);
			break;
		case 5:
			g_spell_x = (g_spell_x + 1);
			break;
		case 6:
			g_spell_x = (g_spell_x + 1);
			break;
		case 7:
			g_spell_y = (g_spell_y + 1);
			g_spell_x = (g_spell_x - 2);
			break;
		case 8:
			g_spell_x = (g_spell_x + 1);
			break;
		case 9:
			g_spell_x = (g_spell_x + 1);
			break;
		}
		v_mon = p_getmonster((a_spieler("explodiert", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("explodiert", g_akt_spieler).f_character_y + g_spell_y), -1);
		if (v_mon) {
			if (!p_has_trait2(v_mon, 17) || !p_has_trait2(v_mon, 12)) {
				p_monsterschaden(v_damage);
			}
		}
	}
	g_spell_x = v_save_spell_x;
	g_spell_y = v_save_spell_y;
}

static intptr_t p_faechergrafik() {
	intptr_t v_a = 0;
	intptr_t v_i = 0;
	intptr_t v_s = 0;
	intptr_t v_wohin = 0;
	v_a = 1;
	v_s = 5;
	while (192 > (v_a * v_s)) {
		p_laby_screen2();
		for (v_i = 1; v_i <= v_a; v_i += 1) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 255));
			p_linexy((177 - (v_i * v_s)), (177 - (v_i * v_s)), (177 + (v_i * v_s)), (177 - (v_i * v_s)));
			p_linexy((177 + (v_i * v_s)), (177 - (v_i * v_s)), (177 + (v_i * v_s)), (177 + (v_i * v_s)));
			p_linexy((177 + (v_i * v_s)), (177 + (v_i * v_s)), (177 - (v_i * v_s)), (177 + (v_i * v_s)));
			p_linexy((177 - (v_i * v_s)), (177 + (v_i * v_s)), (177 - (v_i * v_s)), (177 - (v_i * v_s)));
			p_stopdrawing();
		}
		p_flipbuffers(1);
		p_delay(25);
		v_a = (v_a + 1);
	}
}

static intptr_t p_falle() {
	intptr_t v_ausweichen = 0;
	std::string v_comma;
	intptr_t v_counter = 0;
	int16_t v_dodge_diff = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_levelmod = 0;
	int16_t v_new_level = 0;
	std::string v_potionlist;
	int16_t v_setx = 0;
	int16_t v_sety = 0;
	int16_t v_spot_diff = 0;
	int16_t v_testfeld = 0;
	intptr_t v_tile = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	intptr_t v_zw = 0;
	v_testfeld = a_labyrinth("falle", a_spieler("falle", g_akt_spieler).f_level, a_spieler("falle", g_akt_spieler).f_character_x, a_spieler("falle", g_akt_spieler).f_character_y).f_feld;
	v_dodge_diff = a_labyrinth("falle", a_spieler("falle", g_akt_spieler).f_level, a_spieler("falle", g_akt_spieler).f_character_x, a_spieler("falle", g_akt_spieler).f_character_y).f_stat2;
	v_ausweichen = p_ausweichen();
	if (v_testfeld >= 31 && v_testfeld <= 39) {
		v_ausweichen = (v_ausweichen + 30);
		if (a_skills("falle", 69, g_akt_spieler).f_gewaehlt == 1) {
			p_cleartile(a_spieler("falle", g_akt_spieler).f_character_x, a_spieler("falle", g_akt_spieler).f_character_y, -1);
			p_sound(23);
			p_message(953, 2);
			p_laby_screen();
		} else {
			v_testfeld = (v_testfeld - 9);
		}
		g_aktion = 1;
	}
	switch (v_testfeld) {
	case 22:
		p_test_for_wall();
		p_monster_attack_from_distance(6, 0);
		if (v_dodge_diff < v_ausweichen) {
			p_message(180, 1);
			if (p_get_chance(102) < (5 - a_spieler("falle", g_akt_spieler).f_fallenlehre)) {
				a_spieler("falle", g_akt_spieler).f_fallenlehre = (a_spieler("falle", g_akt_spieler).f_fallenlehre + 1);
				p_message(625, 2);
			}
		} else {
			p_schutz();
			v_zw = ((p_myrand2((a_spieler("falle", g_akt_spieler).f_level / 2)) + 1) - g_schutz_min);
			if (v_levelmod == 2) {
				v_zw = (v_zw * 2);
			}
			if (v_zw < 1) {
				v_zw = 0;
			}
			if (p_habich(124) > 0) {
				p_message(431, 2);
			} else {
				p_spielerschaden(v_zw, 1, 1, 0, 0);
				p_message(17, 3);
			}
		}
		p_cleartile(a_spieler("falle", g_akt_spieler).f_character_x, a_spieler("falle", g_akt_spieler).f_character_y, -1);
		g_aktion = 1;
		break;
	case 29:
		p_test_for_wall();
		p_monster_attack_from_distance(7, 0);
		if (v_dodge_diff < v_ausweichen) {
			p_message(180, 1);
			if (p_get_chance(102) < (5 - a_spieler("falle", g_akt_spieler).f_fallenlehre)) {
				a_spieler("falle", g_akt_spieler).f_fallenlehre = (a_spieler("falle", g_akt_spieler).f_fallenlehre + 1);
				p_message(625, 2);
			}
		} else {
			p_schutz();
			v_zw = ((p_myrand2(a_spieler("falle", g_akt_spieler).f_level) + 6) - g_schutz_min);
			if (v_levelmod == 2) {
				v_zw = (v_zw * 2);
			}
			if (v_zw < 1) {
				v_zw = 0;
			}
			if (p_habich(124) > 0) {
				p_message(431, 2);
			} else {
				p_spielerschaden(v_zw, 1, 2, 0, 0);
				p_message(18, 3);
			}
		}
		p_cleartile(a_spieler("falle", g_akt_spieler).f_character_x, a_spieler("falle", g_akt_spieler).f_character_y, -1);
		g_aktion = 1;
		break;
	case 23:
		p_test_for_wall();
		p_monster_attack_from_distance(8, 0);
		if (v_dodge_diff < v_ausweichen) {
			p_message(180, 1);
			if (p_get_chance(102) < (5 - a_spieler("falle", g_akt_spieler).f_fallenlehre)) {
				a_spieler("falle", g_akt_spieler).f_fallenlehre = (a_spieler("falle", g_akt_spieler).f_fallenlehre + 1);
				p_message(625, 2);
			}
		} else {
			p_schutz();
			v_zw = (p_myrand2(3) - g_schutz_min);
			if (v_levelmod == 2) {
				v_zw = (v_zw * 2);
			}
			if (v_zw < 1) {
				v_zw = 0;
			}
			if (p_habich(124) > 0) {
				p_message(431, 2);
			} else {
				if (v_zw > 0) {
					p_spielerschaden(v_zw, 1, 3, 0, 0);
					p_message(19, 4);
					if (v_levelmod == 2) {
						p_add_poison(20);
					} else {
						p_add_poison(10);
					}
				}
			}
		}
		p_cleartile(a_spieler("falle", g_akt_spieler).f_character_x, a_spieler("falle", g_akt_spieler).f_character_y, -1);
		g_aktion = 1;
		break;
	case 30:
		if (g_bewegt == 1) {
			if (!p_habich(79)) {
				g_aktion = 1;
				p_sternchen(156, 156, 6);
				if (p_get_chance(100) > 85) {
					p_message(663, 1);
					v_new_level = (a_spieler("falle", g_akt_spieler).f_level - (p_get_chance(50) + 1));
					v_counter = 1;
					do {
						v_x = (p_random((a_groesse("falle", v_new_level) - 3)) + 2);
						v_y = (p_random((a_groesse("falle", v_new_level) - 3)) + 2);
						v_counter = (v_counter + 1);
					} while (!(a_labyrinth("falle", v_new_level, v_x, v_y).f_feld == a_inhalt("falle", v_new_level) || v_counter > 500));
					if (v_counter <= 500) {
						a_spieler("falle", g_akt_spieler).f_level = v_new_level;
						a_spieler("falle", g_akt_spieler).f_character_x = v_x;
						a_spieler("falle", g_akt_spieler).f_character_y = v_y;
						p_laby_screen();
					}
				} else {
					p_message(20, 6);
					a_spieler("falle", g_akt_spieler).f_fluch = (p_myrand2(25) + 1);
					a_spieler("falle", g_akt_spieler).f_fluchdauer = (p_myrand2(18) + 4);
					p_cleartile(a_spieler("falle", g_akt_spieler).f_character_x, a_spieler("falle", g_akt_spieler).f_character_y, -1);
					if (a_spieler("falle", g_akt_spieler).f_fluch == 23) {
						p_sound(37);
					} else {
						p_sound(32);
					}
					p_laby_screen();
				}
			} else {
				p_message(21, 2);
			}
		}
		break;
	case 24:
		if (g_bewegt == 1) {
			if (!p_habich(48) && !p_habich(86) && !p_habich(88)) {
				v_spot_diff = a_labyrinth("falle", a_spieler("falle", g_akt_spieler).f_level, a_spieler("falle", g_akt_spieler).f_character_x, a_spieler("falle", g_akt_spieler).f_character_y).f_stat1;
				p_setlaby(a_spieler("falle", g_akt_spieler).f_character_x, a_spieler("falle", g_akt_spieler).f_character_y, a_spieler("falle", g_akt_spieler).f_level, 33, -1, v_dodge_diff);
				if (v_dodge_diff < v_ausweichen) {
					p_message(180, 1);
					if (v_spot_diff != -1) {
						if (p_get_chance(102) < (5 - a_spieler("falle", g_akt_spieler).f_fallenlehre)) {
							a_spieler("falle", g_akt_spieler).f_fallenlehre = (a_spieler("falle", g_akt_spieler).f_fallenlehre + 1);
							p_message(625, 2);
						}
					}
				} else {
					v_zw = p_myrand2(6);
					if (v_levelmod == 2) {
						v_zw = (v_zw * 2);
					}
					if (v_zw < 1) {
						v_zw = 1;
					}
					p_sound(25);
					if (p_habich(124) > 0) {
						p_message(431, 2);
					} else {
						p_spielerschaden(v_zw, 1, 4, 0, 0);
						p_message(22, 3);
					}
					if (a_skills("falle", 92, g_akt_spieler).f_gewaehlt == 1) {
						a_spieler("falle", g_akt_spieler).f_weisheit = (a_spieler("falle", g_akt_spieler).f_weisheit + 1);
					}
					v_potionlist = "";
					v_comma = "";
					for (v_i = 1; v_i <= 50; v_i += 1) {
						if (a_item("falle", a_inventory("falle", v_i, g_akt_spieler).f_name).f_type == 4 && p_get_chance(100) < 20) {
							p_sound(30);
							if (a_inventory("falle", v_i, g_akt_spieler).f_status) {
								v_potionlist = v_potionlist + v_comma + a_item("falle", a_inventory("falle", v_i, g_akt_spieler).f_name).f_name[(g_language + 1)];
							} else {
								v_potionlist = v_potionlist + v_comma + a_message_text("falle", 586, (1 + g_language));
							}
							if (v_comma == "") {
								v_comma = ",";
							}
							p_leeren(v_i);
						}
					}
					if (v_potionlist != "") {
						p_nachricht7(p_nachricht6(348, v_potionlist), 1);
					}
					p_delay(g_mydelay);
					g_bewegt = 0;
					p_neuer_level();
					p_naechster();
					p_laby_screen();
				}
			}
		}
		break;
	case 25:
		if (g_bewegt == 1) {
			if (!p_habich(79)) {
				g_aktion = 1;
				p_message(20, 4);
				p_sound(32);
				p_sternchen(156, 156, 6);
				for (v_i = 1; v_i <= 11; v_i += 1) {
					for (v_j = 1; v_j <= 11; v_j += 1) {
						v_setx = ((a_spieler("falle", g_akt_spieler).f_character_x - 6) + v_i);
						if (v_setx < 1) {
							v_setx = 1;
						}
						if (v_setx > a_groesse("falle", a_spieler("falle", g_akt_spieler).f_level)) {
							v_setx = a_groesse("falle", a_spieler("falle", g_akt_spieler).f_level);
						}
						v_sety = ((a_spieler("falle", g_akt_spieler).f_character_y - 6) + v_j);
						if (v_sety < 1) {
							v_sety = 1;
						}
						if (v_sety > a_groesse("falle", a_spieler("falle", g_akt_spieler).f_level)) {
							v_sety = a_groesse("falle", a_spieler("falle", g_akt_spieler).f_level);
						}
						v_tile = a_labyrinth("falle", a_spieler("falle", g_akt_spieler).f_level, v_setx, v_sety).f_feld;
						if (p_is_floor(v_tile)) {
							p_setlaby(v_setx, v_sety, a_spieler("falle", g_akt_spieler).f_level, 201, 0, v_tile);
						}
					}
				}
				p_setlaby(a_spieler("falle", g_akt_spieler).f_character_x, a_spieler("falle", g_akt_spieler).f_character_y, a_spieler("falle", g_akt_spieler).f_level, 201, 0, a_inhalt("falle", a_spieler("falle", g_akt_spieler).f_level));
				p_laby_screen();
			} else {
				p_message(21, 2);
			}
		}
		break;
	case 26:
		if (g_bewegt == 1) {
			if (!p_habich(79)) {
				g_aktion = 1;
				p_message(20, 3);
				p_sound(32);
				p_sternchen(156, 156, 6);
				for (v_i = 1; v_i <= 11; v_i += 1) {
					for (v_j = 1; v_j <= 11; v_j += 1) {
						v_setx = ((a_spieler("falle", g_akt_spieler).f_character_x - 6) + v_i);
						if (v_setx < 1) {
							v_setx = 1;
						}
						if (v_setx > a_groesse("falle", a_spieler("falle", g_akt_spieler).f_level)) {
							v_setx = a_groesse("falle", a_spieler("falle", g_akt_spieler).f_level);
						}
						v_sety = ((a_spieler("falle", g_akt_spieler).f_character_y - 6) + v_j);
						if (v_sety < 1) {
							v_sety = 1;
						}
						if (v_sety > a_groesse("falle", a_spieler("falle", g_akt_spieler).f_level)) {
							v_sety = a_groesse("falle", a_spieler("falle", g_akt_spieler).f_level);
						}
						v_tile = a_labyrinth("falle", a_spieler("falle", g_akt_spieler).f_level, v_setx, v_sety).f_feld;
						if (p_is_floor(v_tile)) {
							p_setlaby(v_setx, v_sety, a_spieler("falle", g_akt_spieler).f_level, 41, 0, v_tile);
						}
					}
				}
				p_setlaby(a_spieler("falle", g_akt_spieler).f_character_x, a_spieler("falle", g_akt_spieler).f_character_y, a_spieler("falle", g_akt_spieler).f_level, 41, 0, a_inhalt("falle", a_spieler("falle", g_akt_spieler).f_level));
				p_laby_screen();
			} else {
				p_message(21, 2);
			}
		}
		break;
	case 27:
		if (g_bewegt == 1) {
			if (!p_habich(79)) {
				g_aktion = 1;
				p_message(20, 2);
				p_sound(32);
				p_sternchen(156, 156, 6);
				for (v_i = 1; v_i <= 11; v_i += 1) {
					for (v_j = 1; v_j <= 11; v_j += 1) {
						v_setx = ((a_spieler("falle", g_akt_spieler).f_character_x - 6) + v_i);
						if (v_setx < 1) {
							v_setx = 1;
						}
						if (v_setx > a_groesse("falle", a_spieler("falle", g_akt_spieler).f_level)) {
							v_setx = a_groesse("falle", a_spieler("falle", g_akt_spieler).f_level);
						}
						v_sety = ((a_spieler("falle", g_akt_spieler).f_character_y - 6) + v_j);
						if (v_sety < 1) {
							v_sety = 1;
						}
						if (v_sety > a_groesse("falle", a_spieler("falle", g_akt_spieler).f_level)) {
							v_sety = a_groesse("falle", a_spieler("falle", g_akt_spieler).f_level);
						}
						v_tile = a_labyrinth("falle", a_spieler("falle", g_akt_spieler).f_level, v_setx, v_sety).f_feld;
						if (p_is_floor(v_tile)) {
							p_setlaby(v_setx, v_sety, a_spieler("falle", g_akt_spieler).f_level, 80, 0, v_tile);
						}
					}
				}
				p_cleartile(a_spieler("falle", g_akt_spieler).f_character_x, a_spieler("falle", g_akt_spieler).f_character_y, -1);
				p_laby_screen();
			} else {
				p_message(21, 2);
			}
		}
		break;
	case 28:
		p_sound(32);
		p_message(23, 2);
		p_sternchen(156, 156, 4);
		a_spieler("falle", g_akt_spieler).f_mana = 0;
		p_cleartile(a_spieler("falle", g_akt_spieler).f_character_x, a_spieler("falle", g_akt_spieler).f_character_y, -1);
		g_aktion = 1;
		break;
	}
}

static intptr_t p_fernattack() {
	intptr_t v_angegriffen = 0;
	intptr_t v_ausgewichen = 0;
	intptr_t v_ausw = 0;
	int16_t v_chance = 0;
	int16_t v_counter = 0;
	int8_t v_geg = 0;
	int16_t v_geklaut = 0;
	intptr_t v_gew_zauber = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	int16_t v_killhim = 0;
	int16_t v_mon_no = 0;
	int16_t v_save_akt_spieler = 0;
	int16_t v_save_spell_x = 0;
	int16_t v_save_spell_y = 0;
	int16_t v_schaden = 0;
	int16_t v_wasele = 0;
	int16_t v_weg = 0;
	int16_t v_weite = 0;
	int16_t v_x = 0;
	int16_t v_x_diff = 0;
	int16_t v_xmode = 0;
	int16_t v_y = 0;
	int16_t v_y_diff = 0;
	int16_t v_ymode = 0;
	v_x = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x;
	v_y = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y;
	v_mon_no = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number;
	if (a_spieler("fernattack", g_akt_spieler).f_schleichen > 0) {
		if (a_skills("fernattack", 73, g_akt_spieler).f_gewaehlt == 1) {
			v_chance = ((p_reflexe() + p_luck()) * 2);
		} else {
			v_chance = (p_reflexe() + p_luck());
		}
		if (v_chance > 90) {
			v_chance = 90;
		}
		if (p_get_chance(100) < v_chance && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 1) {
			p_message(701, 2);
			return 0;
		}
	}
	v_ausw = ((p_reflexe() / 2) + ((p_luck() / 2) * 3));
	if (v_ausw > 50) {
		v_ausw = 50;
	}
	v_ausgewichen = 0;
	if ((a_skills("fernattack", 6, g_akt_spieler).f_gewaehlt == 1 && p_get_chance(50)) || p_get_chance(100) < v_ausw) {
		v_ausgewichen = 1;
	}
	v_angegriffen = 0;
	if (p_has_trait2(v_mon_no, 5) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		p_message(24, 3);
		p_sound(33);
		p_monster_attack_from_distance(2, 0);
		v_weg = 0;
		if (p_habich(124) > 0) {
			p_message(431, 2);
			v_weg = 1;
		}
		if (p_habich(46) > 0 && !v_weg) {
			p_message(25, 2);
			v_weg = 1;
		}
		if (v_ausgewichen == 1 && !v_weg) {
			v_weg = 1;
			p_sound(24);
			p_message(178, 3);
		}
		if (!v_weg) {
			g_von_ferne = 1;
			p_monster_angriff(v_x, v_y);
		}
	}
	if (p_has_trait2(v_mon_no, 41) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		p_message(679, 3);
		p_sound(33);
		p_monster_attack_from_distance(9, 0);
		v_weg = 0;
		if (p_habich(124) > 0) {
			p_message(431, 2);
			v_weg = 1;
		}
		if (p_habich(46) > 0 && !v_weg) {
			p_message(25, 2);
			v_weg = 1;
		}
		if (v_ausgewichen == 1 && !v_weg) {
			v_weg = 1;
			p_sound(24);
			p_message(178, 3);
		}
		if (!v_weg) {
			g_von_ferne = 1;
			p_monster_angriff(v_x, v_y);
		}
	}
	if (p_has_trait2(v_mon_no, 20) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		p_sound(18);
		p_message(313, 3);
		p_monster_attack_from_distance(1, 0);
		v_weg = 0;
		if (p_habich(124) > 0) {
			p_message(431, 2);
			v_weg = 1;
		}
		if (p_habich(7) && !v_weg) {
			v_weg = 1;
			p_message(28, 2);
		}
		if (v_ausgewichen == 1 && !v_weg) {
			v_weg = 1;
			p_sound(24);
			p_message(178, 3);
		}
		if (!v_weg) {
			v_schaden = (p_myrand2((a_monster("fernattack", v_mon_no).f_staerke + 1)) + 2);
			p_spielerschaden(v_schaden, 1, 26, 0, 0);
		}
	}
	if (p_has_trait2(v_mon_no, 23) > 0 && !v_angegriffen) {
		v_angegriffen = 1;
		p_sound(18);
		p_message(314, 2);
		p_monster_attack_from_distance(3, 0);
		v_weg = 0;
		if (p_habich(124) > 0) {
			p_message(431, 2);
			v_weg = 1;
		}
		if (p_habich(68) && !v_weg) {
			v_weg = 1;
			p_message(315, 2);
		}
		if (v_ausgewichen == 1 && !v_weg) {
			v_weg = 1;
			p_sound(24);
			p_message(178, 3);
		}
		if (!v_weg) {
			v_schaden = (p_myrand2((a_monster("fernattack", v_mon_no).f_staerke + 1)) + 2);
			p_spielerschaden(v_schaden, 1, 19, 0, 0);
		}
	}
	if (p_has_trait2(v_mon_no, 21) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		p_sound(18);
		p_message(316, 4);
		p_monster_attack_from_distance(4, 0);
		v_weg = 0;
		if (p_habich(124) > 0) {
			p_message(431, 2);
			v_weg = 1;
		}
		if (p_habich(130) > 0) {
			p_message(256, 2);
			v_weg = 1;
		}
		if (v_ausgewichen == 1 && !v_weg) {
			v_weg = 1;
			p_sound(24);
			p_message(178, 3);
		}
		if (!v_weg) {
			p_add_poison(a_monster("fernattack", v_mon_no).f_staerke);
		}
	}
	if (p_has_trait2(v_mon_no, 14) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		p_sound(53);
		p_message(317, 2);
		p_monster_attack_from_distance(5, 0);
		v_weg = 0;
		if (p_habich(124) > 0) {
			p_message(431, 2);
			v_weg = 1;
		}
		if (p_habich(118) && !v_weg) {
			p_message(427, 2);
			v_weg = 1;
		}
		if (v_ausgewichen == 1 && !v_weg) {
			v_weg = 1;
			p_sound(24);
			p_message(178, 3);
		}
		if (!v_weg) {
			v_schaden = (p_myrand2((a_monster("fernattack", v_mon_no).f_staerke + 1)) + 2);
			p_spielerschaden(v_schaden, 1, 25, 0, 0);
		}
	}
	if (p_has_trait2(v_mon_no, 22) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		if (p_habich(45) > 0 || p_habich(119) > 0 || p_get_chance(100) < a_spieler("fernattack", g_akt_spieler).f_magieresistenz) {
			p_message(187, 6);
		} else {
			v_killhim = (p_luck() * 10);
			if (v_killhim > 90) {
				v_killhim = 90;
			}
			if (p_get_chance(100) < v_killhim) {
				p_message(429, 3);
			} else {
				p_sound(38);
				g_spell_x = 0;
				g_spell_y = 0;
				p_versteinern();
				p_message(318, 3);
				a_spieler("fernattack", g_akt_spieler).f_cause_of_death = 22;
				p_tot();
			}
		}
	}
	if (p_has_trait2(v_mon_no, 24) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		p_sound(32);
		p_sternchen(156, 156, 2);
		v_killhim = (p_luck() * 5);
		if (v_killhim > 90) {
			v_killhim = 90;
		}
		if (p_get_chance(100) < v_killhim) {
			p_message(430, 3);
		} else {
			p_sound(38);
			g_spell_x = 0;
			g_spell_y = 0;
			p_todesblick();
			p_message(319, 3);
			a_spieler("fernattack", g_akt_spieler).f_cause_of_death = 23;
			p_tot();
		}
	}
	if (!v_angegriffen) {
		if (p_habich(45) > 0 || p_get_chance(100) < a_spieler("fernattack", g_akt_spieler).f_magieresistenz) {
			p_message(187, 2);
		} else {
			if (p_get_chance(100) < 20) {
				v_gew_zauber = (p_myrand2(8) + 1);
			} else {
				v_gew_zauber = a_monster("fernattack", v_mon_no).f_zauber;
			}
			switch (v_gew_zauber) {
			case 1:
				p_sound(18);
				p_message(27, 2);
				p_monster_attack_from_distance(1, 0);
				v_weg = 0;
				if (p_habich(124) > 0) {
					p_message(431, 2);
					v_weg = 1;
				}
				if (p_habich(7) > 0 && !v_weg) {
					p_message(28, 2);
					v_weg = 1;
				}
				if (!v_weg) {
					v_schaden = (p_myrand2((a_monster("fernattack", v_mon_no).f_zauberkraft + 1)) + 2);
					if (a_skills("fernattack", 129, g_akt_spieler).f_gewaehlt == 1) {
						v_schaden = (v_schaden * 2);
					}
					p_spielerschaden(v_schaden, 1, 5, 0, 0);
				}
				break;
			case 2:
				p_sternchen(156, 156, 5);
				p_message(29, 2);
				if (!a_spieler("fernattack", g_akt_spieler).f_fluch) {
					a_spieler("fernattack", g_akt_spieler).f_fluch = (p_myrand(25) + 1);
					if (a_spieler("fernattack", g_akt_spieler).f_fluch == 23) {
						p_sound(37);
					} else {
						p_sound(32);
					}
					a_spieler("fernattack", g_akt_spieler).f_fluchdauer = (p_myrand2((a_monster("fernattack", v_mon_no).f_zauberkraft * 2)) + 5);
					if (a_skills("fernattack", 130, g_akt_spieler).f_gewaehlt == 1) {
						a_spieler("fernattack", g_akt_spieler).f_fluchdauer = (a_spieler("fernattack", g_akt_spieler).f_fluchdauer * 2);
					}
				} else {
					a_spieler("fernattack", g_akt_spieler).f_fluchdauer = ((a_spieler("fernattack", g_akt_spieler).f_fluchdauer + p_myrand2((a_monster("fernattack", v_mon_no).f_zauberkraft * 2))) + 5);
					if (a_skills("fernattack", 130, g_akt_spieler).f_gewaehlt == 1) {
						a_spieler("fernattack", g_akt_spieler).f_fluchdauer = ((a_spieler("fernattack", g_akt_spieler).f_fluchdauer + p_myrand2((a_monster("fernattack", v_mon_no).f_zauberkraft * 2))) + 5);
					}
				}
				break;
			case 3:
				p_sound(32);
				p_sternchen(156, 156, 6);
				if (a_skills("fernattack", 102, g_akt_spieler).f_gewaehlt == 1 && p_get_chance(50)) {
					p_message(880, 2);
				} else {
					v_geg = 0;
					for (v_i = 1; v_i <= 50; v_i += 1) {
						if (a_inventory("fernattack", v_i, g_akt_spieler).f_name && !a_inventory("fernattack", v_i, g_akt_spieler).f_benutzt) {
							v_geg = 1;
							break;
						}
					}
					if (v_geg == 1) {
						v_geklaut = 0;
						v_counter = 1;
						do {
							v_wasele = (p_random(49) + 1);
							if (a_inventory("fernattack", v_wasele, g_akt_spieler).f_name && !a_inventory("fernattack", v_wasele, g_akt_spieler).f_benutzt) {
								v_geklaut = 1;
								p_nachricht7(a_message_text("fernattack", 30, (1 + g_language)) + " (" + a_item("fernattack", a_inventory("fernattack", v_wasele, g_akt_spieler).f_name).f_name[(1 + g_language)] + ")", 2);
								if (a_item("fernattack", a_inventory("fernattack", v_wasele, g_akt_spieler).f_name).f_name[(g_language + 1)] == "") {
									p_nachricht7("Broken Item: " + p_str(a_inventory("fernattack", v_wasele, g_akt_spieler).f_name), 1);
								}
								p_leeren(v_wasele);
							}
							v_counter = (v_counter + 1);
						} while (!(v_geklaut == 1 || v_counter > 500));
					} else {
						p_message(37, 2);
					}
				}
				break;
			case 4:
				p_sound(32);
				p_sternchen(156, 156, 1);
				p_message(31, 2);
				v_schaden = (p_myrand2((a_monster("fernattack", v_mon_no).f_zauberkraft + 1)) + 2);
				if (a_skills("fernattack", 129, g_akt_spieler).f_gewaehlt == 1) {
					v_schaden = (v_schaden * 2);
				}
				a_spieler("fernattack", g_akt_spieler).f_mana = (a_spieler("fernattack", g_akt_spieler).f_mana - v_schaden);
				if (a_spieler("fernattack", g_akt_spieler).f_mana < 0) {
					a_spieler("fernattack", g_akt_spieler).f_mana = 0;
				}
				break;
			case 5:
				p_sound(32);
				for (v_j = 1; v_j <= 5; v_j += 1) {
					for (v_i = 1; v_i <= 4; v_i += 1) {
						p_laby_screen2();
						if (v_i == 1) {
							p_clipsprite(17, 80, 40, 39, 39);
						}
						if (v_i == 2) {
							p_clipsprite(17, 120, 40, 39, 39);
						}
						if (v_i == 3) {
							p_clipsprite(17, 1, 80, 39, 39);
						}
						if (v_i == 4) {
							p_clipsprite(17, 40, 80, 39, 39);
						}
						p_displaytransparentsprite(17, 156, 156);
						p_flipbuffers(1);
						p_delay(90);
					}
				}
				if (p_habich(124) > 0) {
					p_message(431, 2);
				} else {
					p_message(32, 2);
					v_schaden = (p_myrand2((a_monster("fernattack", v_mon_no).f_zauberkraft + 1)) + 2);
					if (a_skills("fernattack", 129, g_akt_spieler).f_gewaehlt == 1) {
						v_schaden = (v_schaden * 2);
					}
					p_spielerschaden(v_schaden, 1, 7, 0, 0);
					LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp + v_schaden);
				}
				break;
			case 6:
				p_sound(18);
				p_message(27, 2);
				p_monster_attack_from_distance(3, 0);
				if (p_habich(124) > 0) {
					p_message(431, 2);
					v_weg = 1;
				} else {
					if (p_habich(68) > 0) {
						p_message(315, 2);
						v_weg = 1;
					} else {
						v_schaden = (p_myrand2((a_monster("fernattack", v_mon_no).f_zauberkraft + 1)) + 2);
						if (a_skills("fernattack", 129, g_akt_spieler).f_gewaehlt == 1) {
							v_schaden = (v_schaden * 2);
						}
						p_spielerschaden(v_schaden, 1, 6, 0, 0);
					}
				}
				break;
			case 7:
				p_sound(32);
				p_message(521, 2);
				for (v_i = 1; v_i <= 8; v_i += 1) {
					p_laby_screen2();
					p_clipsprite(37, ((v_i * 31) - 31), 383, 31, 31);
					p_displaytransparentsprite(37, 160, 160);
					p_flipbuffers(1);
					p_delay(90);
				}
				for (v_i = 1; v_i <= 8; v_i += 1) {
					p_laby_screen2();
					p_clipsprite(37, ((v_i * 31) - 31), 414, 31, 31);
					p_displaytransparentsprite(37, 160, 160);
					p_flipbuffers(1);
					p_delay(90);
				}
				a_spieler("fernattack", g_akt_spieler).f_character_x = a_eingangx("fernattack", a_spieler("fernattack", g_akt_spieler).f_level);
				a_spieler("fernattack", g_akt_spieler).f_character_y = a_eingangy("fernattack", a_spieler("fernattack", g_akt_spieler).f_level);
				p_laby_screen();
				for (v_i = 1; v_i <= 8; v_i += 1) {
					p_laby_screen2();
					p_clipsprite(37, ((v_i * 31) - 31), 383, 31, 31);
					p_displaytransparentsprite(37, 160, 160);
					p_flipbuffers(1);
					p_delay(90);
				}
				for (v_i = 1; v_i <= 8; v_i += 1) {
					p_laby_screen2();
					p_clipsprite(37, ((v_i * 31) - 31), 414, 31, 31);
					p_displaytransparentsprite(37, 160, 160);
					p_flipbuffers(1);
					p_delay(90);
				}
				break;
			case 8:
				p_sound(32);
				p_sternchen(156, 156, 3);
				p_message(594, 2);
				for (v_i = 1; v_i <= 30; v_i += 1) {
					if (a_aktive("fernattack", v_i, g_akt_spieler).f_dauer > 0 && a_aktive("fernattack", v_i, g_akt_spieler).f_dauer != -1) {
						a_aktive("fernattack", v_i, g_akt_spieler).f_nr = 0;
						a_aktive("fernattack", v_i, g_akt_spieler).f_staerke = 0;
						a_aktive("fernattack", v_i, g_akt_spieler).f_dauer = 0;
					}
				}
				p_laby_screen();
				break;
			case 9:
				p_sound(19);
				p_message(756, 2);
				if (g_spell_x > 0) {
					v_x_diff = -1;
					v_y_diff = 0;
				} else {
					if (g_spell_x < 0) {
						v_x_diff = 1;
						v_y_diff = 0;
					} else {
						if (g_spell_y > 0) {
							v_x_diff = 0;
							v_y_diff = -1;
						} else {
							v_x_diff = 0;
							v_y_diff = 1;
						}
					}
				}
				v_weite = ((p_abs(g_spell_x) + p_abs(g_spell_y)) + 7.0);
				for (v_i = 1; v_i <= v_weite; v_i += 1) {
					p_draw_tile(42, ((7 + g_spell_x) + (v_i * v_x_diff)), ((7 + g_spell_y) + (v_i * v_y_diff)), 1, 1, -1);
				}
				p_flipbuffers(1);
				p_delay(g_mydelay);
				p_laby_screen();
				for (v_i = 1; v_i <= v_weite; v_i += 1) {
					v_save_spell_x = g_spell_x;
					v_save_spell_y = g_spell_y;
					v_schaden = (p_myrand2((a_monster("fernattack", v_mon_no).f_zauberkraft + 1)) + 2);
					g_spell_x = (g_spell_x + (v_i * v_x_diff));
					g_spell_y = (g_spell_y + (v_i * v_y_diff));
					p_feuerschaden(v_schaden);
					g_spell_x = v_save_spell_x;
					g_spell_y = v_save_spell_y;
					v_save_akt_spieler = g_akt_spieler;
					for (g_akt_spieler = 1; g_akt_spieler <= g_nr_of_players; g_akt_spieler += 1) {
						if (a_spieler("fernattack", g_akt_spieler).f_status == 1 && a_spieler("fernattack", g_akt_spieler).f_character_x == ((a_spieler("fernattack", v_save_akt_spieler).f_character_x + g_spell_x) + (v_i * v_x_diff)) && a_spieler("fernattack", g_akt_spieler).f_character_y == ((a_spieler("fernattack", v_save_akt_spieler).f_character_y + g_spell_y) + (v_i * v_y_diff)) && a_spieler("fernattack", g_akt_spieler).f_level == a_spieler("fernattack", v_save_akt_spieler).f_level) {
							v_weg = 0;
							if (p_habich(124) > 0) {
								p_message(431, 2);
								v_weg = 1;
							}
							if (p_habich(7) > 0 && !v_weg) {
								p_message(28, 2);
								v_weg = 1;
							}
							if (!v_weg) {
								v_schaden = (p_myrand2((a_monster("fernattack", v_mon_no).f_zauberkraft + 1)) + 2);
								if (a_skills("fernattack", 129, g_akt_spieler).f_gewaehlt == 1) {
									v_schaden = (v_schaden * 2);
								}
								v_xmode = (a_spieler("fernattack", g_akt_spieler).f_character_x - a_spieler("fernattack", v_save_akt_spieler).f_character_x);
								v_ymode = (a_spieler("fernattack", g_akt_spieler).f_character_y - a_spieler("fernattack", v_save_akt_spieler).f_character_y);
								p_spielerschaden(v_schaden, 1, 24, v_xmode, v_ymode);
							}
						}
						if (a_spieler("fernattack", g_akt_spieler).f_creature_typ > 0 && a_spieler("fernattack", g_akt_spieler).f_creature_x == ((a_spieler("fernattack", v_save_akt_spieler).f_character_x + g_spell_x) + (v_i * v_x_diff)) && a_spieler("fernattack", g_akt_spieler).f_creature_y == ((a_spieler("fernattack", v_save_akt_spieler).f_character_y + g_spell_y) + (v_i * v_y_diff)) && a_spieler("fernattack", g_akt_spieler).f_level == a_spieler("fernattack", v_save_akt_spieler).f_level) {
							v_schaden = (p_myrand2((a_monster("fernattack", v_mon_no).f_zauberkraft + 1)) + 2);
							v_xmode = (a_spieler("fernattack", g_akt_spieler).f_creature_x - a_spieler("fernattack", v_save_akt_spieler).f_character_x);
							v_ymode = (a_spieler("fernattack", g_akt_spieler).f_creature_y - a_spieler("fernattack", v_save_akt_spieler).f_character_y);
							p_creature_schaden(v_schaden, 0, v_xmode, v_ymode);
						}
					}
					g_akt_spieler = v_save_akt_spieler;
				}
				p_cleanup_monsters();
				break;
			}
		}
	}
}

static intptr_t p_fernattack2() {
	intptr_t v_angegriffen = 0;
	intptr_t v_ausgewichen = 0;
	int16_t v_mon_no = 0;
	int16_t v_schaden = 0;
	int16_t v_x = 0;
	int16_t v_y = 0;
	v_x = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x;
	v_y = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y;
	v_mon_no = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number;
	v_ausgewichen = 0;
	if (p_get_chance(100) < 30) {
		v_ausgewichen = 1;
	}
	v_angegriffen = 0;
	if (p_has_trait2(v_mon_no, 5) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		p_message(24, 3);
		p_sound(33);
		p_monster_attack_from_distance(2, 1);
		g_von_ferne = 1;
		p_monster_angriff2(v_x, v_y);
	}
	if (p_has_trait2(v_mon_no, 41) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		p_message(679, 3);
		p_sound(33);
		p_monster_attack_from_distance(9, 1);
		g_von_ferne = 1;
		p_monster_angriff2(v_x, v_y);
	}
	if (p_has_trait2(v_mon_no, 20) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		p_sound(18);
		p_message(313, 3);
		p_monster_attack_from_distance(1, 1);
		v_schaden = (p_myrand2((a_monster("fernattack2", v_mon_no).f_staerke + 1)) + 2);
		p_creature_schaden(v_schaden, 0, 0, 0);
	}
	if (p_has_trait2(v_mon_no, 23) > 0 && !v_angegriffen) {
		v_angegriffen = 1;
		p_sound(18);
		p_message(314, 2);
		p_monster_attack_from_distance(3, 1);
		v_schaden = (p_myrand2((a_monster("fernattack2", v_mon_no).f_staerke + 1)) + 2);
		p_creature_schaden(v_schaden, 0, 0, 0);
	}
	if (p_has_trait2(v_mon_no, 21) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		p_sound(18);
		p_message(316, 4);
		p_monster_attack_from_distance(4, 1);
		p_creature_add_poison(a_monster("fernattack2", v_mon_no).f_staerke);
	}
	if (p_has_trait2(v_mon_no, 14) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		p_sound(53);
		p_message(317, 2);
		p_monster_attack_from_distance(5, 1);
		v_schaden = (p_myrand2((a_monster("fernattack2", v_mon_no).f_staerke + 1)) + 2);
		p_creature_schaden(v_schaden, 0, 0, 0);
	}
	if (p_has_trait2(v_mon_no, 22) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		if (a_spieler("fernattack2", g_akt_spieler).f_creature_typ == 12) {
			p_message(361, 6);
		} else {
			if (p_get_chance(100) < 90) {
				p_message(980, 3);
			} else {
				p_sound(38);
				g_spell_x = 0;
				g_spell_y = 0;
				p_versteinern();
				p_message(752, 3);
				a_spieler("fernattack2", g_akt_spieler).f_creature_typ = 0;
			}
		}
	}
	if (p_has_trait2(v_mon_no, 24) == 1 && !v_angegriffen) {
		v_angegriffen = 1;
		p_sound(32);
		p_sternchen(156, 156, 2);
		if (p_get_chance(100) < 90) {
			p_message(753, 3);
		} else {
			p_sound(38);
			g_spell_x = 0;
			g_spell_y = 0;
			p_todesblick();
			p_message(754, 3);
			a_spieler("fernattack2", g_akt_spieler).f_creature_typ = 0;
		}
	}
	if (!v_angegriffen) {
		p_sound(18);
		p_message(755, 2);
		p_monster_attack_from_distance(1, 1);
		v_schaden = (p_myrand2((a_monster("fernattack2", v_mon_no).f_zauberkraft + 1)) + 2);
		p_creature_schaden(v_schaden, 0, 0, 0);
	}
}

static intptr_t p_fernkampf() {
	struct st_monster_pointer v_act_monster;
	int16_t v_bg = 0;
	int16_t v_item = 0;
	int16_t v_mon = 0;
	int16_t v_mx = 0;
	int16_t v_my = 0;
	int16_t v_mz = 0;
	int16_t v_range = 0;
	int16_t v_tile = 0;
	int16_t v_x = 0;
	int16_t v_xx = 0;
	int16_t v_y = 0;
	int16_t v_yy = 0;
	p_changecurrentelement(ll_monster_list, a_first_monster("fernkampf", a_spieler("fernkampf", g_akt_spieler).f_level).f_p);
	while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == a_spieler("fernkampf", g_akt_spieler).f_level) {
		if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x == a_spieler("fernkampf", g_akt_spieler).f_character_x || LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y == a_spieler("fernkampf", g_akt_spieler).f_character_y) {
			v_mon = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number;
			v_mx = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x;
			v_my = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y;
			v_mz = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z;
			g_spell_x = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x - a_spieler("fernkampf", g_akt_spieler).f_character_x);
			g_spell_y = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y - a_spieler("fernkampf", g_akt_spieler).f_character_y);
			v_range = (p_abs(g_spell_x) + p_abs(g_spell_y));
			if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 2 && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 3 && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 5 && a_monster("fernkampf", v_mon).f_reichweite && a_monster("fernkampf", v_mon).f_reichweite >= v_range && v_range > 1) {
				if (!p_los(1)) {
					v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
					v_x = (g_spell_x + 7);
					v_y = (g_spell_y + 7);
					v_xx = (a_spieler("fernkampf", g_akt_spieler).f_character_x + g_spell_x);
					v_yy = (a_spieler("fernkampf", g_akt_spieler).f_character_y + g_spell_y);
					v_tile = a_labyrinth("fernkampf", a_spieler("fernkampf", g_akt_spieler).f_level, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y).f_feld;
					if (a_fields("fernkampf", v_tile).f_attri_floor) {
						v_bg = a_labyrinth("fernkampf", a_spieler("fernkampf", g_akt_spieler).f_level, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x, LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y).f_stat2;
					} else {
						v_bg = 0;
					}
					p_draw_tile(v_tile, v_x, v_y, 0, 0, v_bg);
					v_item = a_laby_item("fernkampf", v_mx, v_my).f_name[v_mz];
					if (v_item) {
						p_draw_item(v_item, v_x, v_y, 0, 0);
					}
					p_draw_monster(v_x, v_y, 0, -3);
					p_restaurieren();
					p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
					p_fernattack();
					p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
					p_draw_tile(v_tile, v_x, v_y, 0, 0, v_bg);
					if (v_item) {
						p_draw_item(v_item, v_x, v_y, 0, 0);
					}
					p_draw_monster(v_x, v_y, 0, 0);
					p_restaurieren();
					p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
				}
			}
		}
		p_nextelement(ll_monster_list);
	}
}

static intptr_t p_fernkampf2() {
	struct st_monster_pointer v_act_monster;
	int16_t v_mon = 0;
	int16_t v_range = 0;
	int16_t v_x = 0;
	int16_t v_y = 0;
	p_changecurrentelement(ll_monster_list, a_first_monster("fernkampf2", a_spieler("fernkampf2", g_akt_spieler).f_level).f_p);
	while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == a_spieler("fernkampf2", g_akt_spieler).f_level) {
		if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x == a_spieler("fernkampf2", g_akt_spieler).f_creature_x || LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y == a_spieler("fernkampf2", g_akt_spieler).f_creature_y) {
			v_mon = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number;
			g_spell_x = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x - a_spieler("fernkampf2", g_akt_spieler).f_creature_x);
			g_spell_y = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y - a_spieler("fernkampf2", g_akt_spieler).f_creature_y);
			v_range = (p_abs(g_spell_x) + p_abs(g_spell_y));
			if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 2 && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 3 && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 5 && a_monster("fernkampf2", v_mon).f_reichweite && a_monster("fernkampf2", v_mon).f_reichweite >= v_range && v_range > 1) {
				if (!p_los2()) {
					v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
					v_x = (g_spell_x + 7);
					v_y = (g_spell_y + 7);
					if (p_has_trait2(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number, 30) > 0) {
						p_draw_tile(53, v_x, v_y, 0, 0, -1);
					} else {
						p_draw_tile(a_inhalt("fernkampf2", a_spieler("fernkampf2", g_akt_spieler).f_level), v_x, v_y, 0, 0, 0);
					}
					p_draw_monster2(((v_x * 32) - 64), (((v_y * 32) - 64) - 3));
					p_restaurieren2();
					p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
					p_fernattack2();
					if (p_has_trait2(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number, 30) > 0) {
						p_draw_tile(53, v_x, v_y, 0, 0, -1);
					} else {
						p_draw_tile(a_inhalt("fernkampf2", a_spieler("fernkampf2", g_akt_spieler).f_level), v_x, v_y, 0, 0, 0);
					}
					p_draw_monster2(((v_x * 32) - 64), ((v_y * 32) - 64));
					p_restaurieren2();
					p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
				}
			}
		}
		p_nextelement(ll_monster_list);
	}
}

static intptr_t p_feuerschaden(int16_t v_schaden) {
	int16_t v_mon_no = 0;
	int16_t v_testfeld = 0;
	if ((a_spieler("feuerschaden", g_akt_spieler).f_character_x + g_spell_x) > 0 && (a_spieler("feuerschaden", g_akt_spieler).f_character_y + g_spell_y) > 0) {
		v_testfeld = a_labyrinth("feuerschaden", a_spieler("feuerschaden", g_akt_spieler).f_level, (a_spieler("feuerschaden", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("feuerschaden", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
		v_mon_no = p_getmonster((a_spieler("feuerschaden", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("feuerschaden", g_akt_spieler).f_character_y + g_spell_y), -1);
		if (v_mon_no) {
			if (p_dispelled()) {
				p_message(312, 2);
			} else {
				if (p_has_trait2(v_mon_no, 11) == 1) {
					v_schaden = (v_schaden * 2);
				}
				if (!p_has_trait2(v_mon_no, 12) || p_habich(160) > 0) {
					p_monsterschaden(v_schaden);
				} else {
					p_message(265, 3);
				}
			}
		}
		if (v_testfeld == 80) {
			if (v_schaden > 3) {
				p_destroy_iceblock((a_spieler("feuerschaden", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("feuerschaden", g_akt_spieler).f_character_y + g_spell_y), a_spieler("feuerschaden", g_akt_spieler).f_level);
				p_laby_screen();
			}
		}
	}
}

static intptr_t p_ftasten() {
	intptr_t v_ftaste = 0;
	v_ftaste = 0;
	if (p_keyboardpushed(282)) {
		v_ftaste = 1;
	}
	if (p_keyboardpushed(283)) {
		v_ftaste = 2;
	}
	if (p_keyboardpushed(284)) {
		v_ftaste = 3;
	}
	if (p_keyboardpushed(285)) {
		v_ftaste = 4;
	}
	if (p_keyboardpushed(286)) {
		v_ftaste = 5;
	}
	if (p_keyboardpushed(287)) {
		v_ftaste = 6;
	}
	if (p_keyboardpushed(288)) {
		v_ftaste = 7;
	}
	if (p_keyboardpushed(289)) {
		v_ftaste = 8;
	}
	if (p_keyboardpushed(290)) {
		v_ftaste = 9;
	}
	if (p_keyboardpushed(291)) {
		v_ftaste = 10;
	}
	if (v_ftaste > 0 && a_inventory("ftasten", (v_ftaste + 40), g_akt_spieler).f_name > 0) {
		g_aktion = 1;
		g_feld = (v_ftaste + 40);
		if (!a_inventory("ftasten", g_feld, g_akt_spieler).f_benutzt) {
			g_do_it = 1;
			p_itemtest();
			g_do_it = 0;
		} else {
			g_do_it2 = 1;
			p_itemtest();
			g_do_it2 = 0;
		}
		p_laby_screen();
		p_delay(100);
		throw Lv_nach_zauber;
	}
}

static intptr_t p_hinterhalt(int16_t v_welches) {
	int16_t v_k = 0;
	int16_t v_x = 0;
	int16_t v_y = 0;
	p_message(4, 3);
	v_x = a_spieler("hinterhalt", g_akt_spieler).f_character_x;
	v_y = a_spieler("hinterhalt", g_akt_spieler).f_character_y;
	for (v_k = 1; v_k <= 4; v_k += 1) {
		g_xmod = p_neighbour_offset(v_k, 0);
		g_ymod = p_neighbour_offset(v_k, 1);
		if (p_free_for_monster((v_x + g_xmod), (v_y + g_ymod), 0)) {
			p_aufstehen(a_monster("hinterhalt", v_welches).f_nr);
			p_setmonster((v_x + g_xmod), (v_y + g_ymod), a_spieler("hinterhalt", g_akt_spieler).f_level, v_welches, a_monster("hinterhalt", v_welches).f_nr, a_monster("hinterhalt", v_welches).f_lebenspunkte, 0, 0, 0);
		}
	}
	p_laby_screen();
}

static intptr_t p_in_rucksack(int16_t v_geg, int16_t v_anzahl, int16_t v_equip) {
	int16_t v_already_exists = 0;
	intptr_t v_j = 0;
	v_already_exists = 0;
	p_resetlist(ll_unique_items);
	while (p_nextelement(ll_unique_items)) {
		if (LIST_CURRENT(ll_unique_items,struct st_unique_item).f_name == v_geg) {
			v_already_exists = 1;
		}
	}
	if (v_already_exists == 1) {
		p_message(669, 1);
		return 0;
	} else {
		if (a_item("in_rucksack", v_geg).f_unique == 1) {
			p_addelement(ll_unique_items);
			LIST_CURRENT(ll_unique_items,struct st_unique_item).f_name = v_geg;
		}
		if (v_geg == 38) {
			a_new_item("in_rucksack", 1).f_name = 38;
			a_new_item("in_rucksack", 1).f_anzahl = 0;
			a_new_item("in_rucksack", 1).f_benutzt = 0;
			do {
				a_new_item("in_rucksack", 1).f_status = (p_random(183) + 1);
			} while (!(a_spells("in_rucksack", a_new_item("in_rucksack", 1).f_status).f_duration != -1));
			a_new_item("in_rucksack", 1).f_attri5 = (p_random(5) + 3);
			if ((a_learned("in_rucksack", g_akt_spieler, a_new_item("in_rucksack", 1).f_status) & 512)) {
				a_new_item("in_rucksack", 1).f_attri5 = (a_new_item("in_rucksack", 1).f_attri5 | 256);
			}
		} else {
			a_new_item("in_rucksack", 1).f_name = v_geg;
			a_new_item("in_rucksack", 1).f_anzahl = (v_anzahl - 1);
			a_new_item("in_rucksack", 1).f_status = 0;
			if (a_item("in_rucksack", v_geg).f_type == 4 && (a_mischen("in_rucksack", (v_geg - 75)).f_learned & p_pm(0))) {
				a_new_item("in_rucksack", 1).f_status = 1;
			}
			if (a_item("in_rucksack", v_geg).f_type == 17 && (a_mush_known("in_rucksack", (v_geg - 65)) & p_pm(0))) {
				a_new_item("in_rucksack", 1).f_status = 1;
			}
			if (a_item("in_rucksack", v_geg).f_qualitaet == 1) {
				a_new_item("in_rucksack", 1).f_attri5 = p_get_chance(3);
			} else {
				a_new_item("in_rucksack", 1).f_attri5 = 0;
			}
			if (a_item("in_rucksack", v_geg).f_qualitaet == 2) {
				a_new_item("in_rucksack", 1).f_status = a_item("in_rucksack", v_geg).f_attri1;
			}
			if (v_geg == 249) {
				a_new_item("in_rucksack", 1).f_status = (p_random(6) + 1);
			}
		}
		v_j = 0;
		do {
			v_j = (v_j + 1);
		} while (!((!a_inventory("in_rucksack", v_j, g_akt_spieler).f_benutzt && a_inventory("in_rucksack", v_j, g_akt_spieler).f_name == a_new_item("in_rucksack", 1).f_name && a_inventory("in_rucksack", v_j, g_akt_spieler).f_status == a_new_item("in_rucksack", 1).f_status && a_inventory("in_rucksack", v_j, g_akt_spieler).f_attri5 == a_new_item("in_rucksack", 1).f_attri5) || v_j > 50));
		if (v_j > 50 || v_geg == 193) {
			v_j = p_backpackspace();
			if (v_j <= 50) {
				a_inventory("in_rucksack", v_j, g_akt_spieler).f_name = a_new_item("in_rucksack", 1).f_name;
				a_inventory("in_rucksack", v_j, g_akt_spieler).f_benutzt = 0;
				a_inventory("in_rucksack", v_j, g_akt_spieler).f_anzahl = a_new_item("in_rucksack", 1).f_anzahl;
				a_inventory("in_rucksack", v_j, g_akt_spieler).f_status = a_new_item("in_rucksack", 1).f_status;
				a_inventory("in_rucksack", v_j, g_akt_spieler).f_attri5 = a_new_item("in_rucksack", 1).f_attri5;
				if (v_equip) {
					p_equip(v_j);
				}
			} else {
				p_message(428, 1);
			}
		} else {
			a_inventory("in_rucksack", v_j, g_akt_spieler).f_anzahl = (a_inventory("in_rucksack", v_j, g_akt_spieler).f_anzahl + 1);
		}
		return v_j;
	}
}

static intptr_t p_inv() {
	int16_t v_a = 0;
	intptr_t v_act_piece = 0;
	int16_t v_act_staff_piece = 0;
	intptr_t v_aktuell = 0;
	int16_t v_b = 0;
	int16_t v_bew_geg = 0;
	int16_t v_bew_geg_x = 0;
	int16_t v_bew_geg_y = 0;
	int16_t v_bew_ziel = 0;
	int16_t v_c = 0;
	int16_t v_d = 0;
	intptr_t v_doppelklick = 0;
	intptr_t v_esc_but_x = 0;
	intptr_t v_esc_but_y = 0;
	int8_t v_esc_click = 0;
	int16_t v_esc_release = 0;
	int16_t v_get_out = 0;
	int16_t v_gew = 0;
	intptr_t v_i = 0;
	int16_t v_last_msg = 0;
	static int32_t v_lastselected;
	int32_t v_mmouse_xdif = 0;
	int32_t v_mmouse_xtemp = 0;
	int32_t v_mmouse_ydif = 0;
	int32_t v_mmouse_ytemp = 0;
	intptr_t v_pos = 0;
	int16_t v_release1 = 0;
	int16_t v_releasem = 0;
	intptr_t v_result = 0;
	int16_t v_save_ring = 0;
	int16_t v_save_waffe = 0;
	int16_t v_schnellinventory_nach = 0;
	int16_t v_schnellinventory_pos = 0;
	int16_t v_sel_pos = 0;
	int16_t v_sprite_x = 0;
	int16_t v_sprite_y = 0;
	int16_t v_style_diff = 0;
	std::string v_txt;
	int16_t v_wait_release4 = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	int16_t v_xpos = 0;
	int16_t v_xxx = 0;
	intptr_t v_y = 0;
	int16_t v_ypos = 0;
	int16_t v_yyy = 0;
	g_feld = 1;
	v_sel_pos = 1;
	g_benutzen = 0;
	g_bewegen = 0;
	v_bew_geg_x = 0;
	v_bew_geg_y = 0;
	v_bew_geg = 0;
	g_bew_geg_pos = 0;
	v_schnellinventory_pos = 0;
	v_schnellinventory_nach = 0;
	v_get_out = 0;
	v_release1 = 0;
	v_releasem = 0;
	g_abbrechen = 0;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_laby_rahmen(2);
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			g_mmouse_x = p_mousex();
			g_mmouse_y = p_mousey();
			v_mmouse_xdif = (v_mmouse_xtemp - g_mmouse_x);
			v_mmouse_ydif = (v_mmouse_ytemp - g_mmouse_y);
			v_mmouse_xtemp = p_mousex();
			v_mmouse_ytemp = p_mousey();
			g_mmouse_links = p_mousebutton(1);
			g_mmouse_rechts = p_mousebutton(2);
			v_doppelklick = p_doubleclick();
		}
		p_examinekeyboard();
		p_read_joystick();
		if (p_keyboardpushed(105)) {
			if (v_release1 == 1) {
				v_release1 = 2;
			}
		} else {
			if (!v_release1) {
				v_release1 = 1;
			}
			if (v_release1 == 2) {
				v_get_out = 1;
			}
		}
		if (p_keyboardpushed(27) || a_jb("inv", 2)) {
			if (g_itemmenue_aktiv == 1) {
				g_itemmenue_aktiv = 0;
				v_esc_release = 1;
			} else {
				if (!v_esc_release) {
					v_get_out = 1;
				}
			}
		} else {
			v_esc_release = 0;
		}
		if (g_mmouse_rechts) {
			if (!v_releasem) {
				v_releasem = 1;
			}
		} else {
			if (v_releasem == 1) {
				v_get_out = 1;
			}
		}
		if (g_wait_release2 == 1) {
			if (p_keyboardpushed(275) || g_jax == 1) {
				p_keydelay(1);
				g_wait_release2 = 0;
				v_sel_pos += 1;
				if (v_sel_pos > 50) {
					v_sel_pos = 50;
				}
				g_feld = v_sel_pos;
			} else {
				if (p_keyboardpushed(276) || g_jax == -1) {
					p_keydelay(1);
					g_wait_release2 = 0;
					v_sel_pos -= 1;
					if (v_sel_pos < 1) {
						v_sel_pos = 1;
					}
					g_feld = v_sel_pos;
				}
			}
			if (!g_itemmenue_aktiv) {
				if (p_keyboardpushed(274) || g_jay == 1) {
					p_keydelay(1);
					g_wait_release2 = 0;
					v_sel_pos += 8;
					if (v_sel_pos > 50) {
						v_sel_pos -= 8;
					}
					g_feld = v_sel_pos;
				} else {
					if (p_keyboardpushed(273) || g_jay == -1) {
						p_keydelay(1);
						g_wait_release2 = 0;
						v_sel_pos -= 8;
						if (v_sel_pos < 1) {
							v_sel_pos += 8;
						}
						g_feld = v_sel_pos;
					}
				}
			}
		} else {
			if (p_keydelay(0) || !(g_jax || g_jay || p_keyboardpushed(273) || p_keyboardpushed(274) || p_keyboardpushed(276) || p_keyboardpushed(275))) {
				g_wait_release2 = 1;
			}
		}
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(366, 15, 258, 220, -1);
		p_stopdrawing();
		v_last_msg = 25;
		while (a_old_messages("inv", v_last_msg, g_akt_spieler).f_nachricht == " " && v_last_msg > 1) {
			v_last_msg -= 1;
		}
		if ((v_last_msg - 1) > 0) {
			p_last_message((v_last_msg - 1), 380);
		}
		p_last_message(v_last_msg, 395);
		g_first_empty = 0;
		for (v_i = 0; v_i <= 49; v_i += 1) {
			v_x = 366;
			v_y = 15;
			v_xpos = (v_i % 8);
			v_ypos = (v_i / 8);
			if (v_i > 39) {
				v_xpos = (v_i - 40);
				v_ypos = 0;
				v_x = 23;
				v_y = 431;
			}
			if (a_inventory("inv", (v_i + 1), g_akt_spieler).f_benutzt == 1) {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_frontcolor(p_rgb(120, 120, 120));
				p_box(((v_x + (v_xpos * 32)) + 1), ((v_y + (v_ypos * 32)) + 1), 30, 30, -1);
				p_stopdrawing();
			}
			v_a = (v_x + (v_xpos * 32));
			v_b = (v_a + 32);
			v_c = (v_y + (v_ypos * 32));
			v_d = (v_c + 32);
			if (g_mmouse_x > v_a && g_mmouse_x < v_b && g_mmouse_y > v_c && g_mmouse_y < v_d) {
				p_clipsprite(8, 224, 320, 32, 32);
				p_displaytransparentsprite(8, (v_x + (v_xpos * 32)), (v_y + (v_ypos * 32)));
				v_bew_ziel = (v_i + 1);
				if (!g_bewegen && g_mmouse_links == 1 && !v_doppelklick) {
					g_feld = 99;
					g_bewegen = 1;
					v_bew_geg = a_inventory("inv", v_bew_ziel, g_akt_spieler).f_name;
					g_bew_geg_pos = v_bew_ziel;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					if (v_bew_geg_x > 16) {
						do {
							v_bew_geg_x -= 16;
							v_bew_geg_y += 1;
						} while (!(v_bew_geg_x < 17));
					}
					v_lastselected = v_bew_ziel;
				}
				if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_bew_ziel) {
					g_feld = v_bew_ziel;
					v_sel_pos = v_bew_ziel;
					g_bew_geg_pos = v_bew_ziel;
					for (v_act_piece = 1; v_act_piece <= 9; v_act_piece += 1) {
						if (a_inventory("inv", g_feld, g_akt_spieler).f_name == (402 + v_act_piece)) {
							a_spieler("inv", g_akt_spieler).f_staff_pieces[v_act_piece] = 1;
							p_leeren(g_feld);
							p_was_last_piece();
						}
					}
					g_mmouse_links = 0;
					g_do_it = 1;
				}
				if (g_mmouse_links == 1) {
					if (!g_bewegen && (v_mmouse_xdif || v_mmouse_ydif)) {
						g_feld = 99;
						g_bewegen = 1;
						v_bew_geg = a_inventory("inv", v_bew_ziel, g_akt_spieler).f_name;
						g_bew_geg_pos = v_bew_ziel;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						if (v_bew_geg_x > 16) {
							do {
								v_bew_geg_x -= 16;
								v_bew_geg_y += 1;
							} while (!(v_bew_geg_x < 17));
						}
					}
				}
			} else {
				p_clipsprite(8, 480, 64, 32, 32);
				p_displaytransparentsprite(8, (v_x + (v_xpos * 32)), (v_y + (v_ypos * 32)));
			}
			v_pos = (v_i + 1);
			if (g_feld == 99) {
				g_feld = v_pos;
				v_sel_pos = v_pos;
			}
			if (!g_first_empty && !a_inventory("inv", v_pos, g_akt_spieler).f_name) {
				g_first_empty = v_pos;
			}
			v_sprite_x = a_inventory("inv", v_pos, g_akt_spieler).f_name;
			if (v_sprite_x > 0) {
				if (v_sprite_x == 46 && a_inventory("inv", v_pos, g_akt_spieler).f_benutzt == 1) {
					v_sprite_x = 47;
				}
				if (v_sprite_x == 39 && a_inventory("inv", v_pos, g_akt_spieler).f_benutzt == 1) {
					v_sprite_x = 40;
				}
				v_sprite_x -= 1;
				v_sprite_y = (v_sprite_x / 16);
				v_sprite_x = (v_sprite_x % 16);
				p_clipsprite(8, (v_sprite_x * 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, (v_x + (v_xpos * 32)), (v_y + (v_ypos * 32)));
			}
			if ((v_i + 1) == v_sel_pos) {
				p_clipsprite(1, 0, 32, 32, 32);
				p_displaytransparentsprite(1, (v_x + (v_xpos * 32)), (v_y + (v_ypos * 32)));
			}
			if (a_inventory("inv", v_pos, g_akt_spieler).f_anzahl > 0) {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_frontcolor(p_rgb(255, 255, 255));
				p_drawingmode(1);
				p_drawtext((((v_x + (v_xpos * 32)) + 30) - p_textwidth(p_str(((int64_t) a_inventory("inv", v_pos, g_akt_spieler).f_anzahl + 1)))), ((v_y + (v_ypos * 32)) + 18), p_str(((int64_t) a_inventory("inv", v_pos, g_akt_spieler).f_anzahl + 1)), -1, 0);
				p_stopdrawing();
			}
		}
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(15, 15, 335, 300, -1);
		p_stopdrawing();
		p_clipsprite(45, 1, 1, 165, 393);
		p_displaysprite(45, 90, 15);
		v_aktuell = 0;
		if (g_mmouse_x > 207 && g_mmouse_x < 239 && g_mmouse_y > 18 && g_mmouse_y < 50) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 207, 18);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 207, 18);
		}
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 6 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
				v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
				v_sprite_y = 0;
				if (v_sprite_x > 16) {
					do {
						v_sprite_y = (v_sprite_y + 1);
						v_sprite_x = (v_sprite_x - 16);
					} while (!(v_sprite_x < 17));
				}
				p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, 207, 18);
				if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
					g_feld = 99;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bewegen = 2;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					v_lastselected = v_i;
				}
				if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
					g_bewegen = 5;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
				}
				if (g_mmouse_links == 1) {
					if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
						g_feld = 99;
						g_bewegen = 2;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						if (v_bew_geg_x > 16) {
							do {
								v_bew_geg_y = (v_bew_geg_y + 1);
								v_bew_geg_x = (v_bew_geg_x - 16);
							} while (!(v_bew_geg_x < 17));
						}
					}
				}
			}
		}
		v_aktuell = 0;
		if (g_mmouse_x > 100 && g_mmouse_x < 132 && g_mmouse_y > 40 && g_mmouse_y < 72) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 100, 40);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 100, 40);
		}
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 21 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
				v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
				v_sprite_y = 0;
				if (v_sprite_x > 16) {
					do {
						v_sprite_y = (v_sprite_y + 1);
						v_sprite_x = (v_sprite_x - 16);
					} while (!(v_sprite_x < 17));
				}
				p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, 100, 40);
				if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
					g_feld = 99;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bewegen = 2;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					v_lastselected = v_i;
				}
				if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
					g_bewegen = 5;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
				}
				if (g_mmouse_links == 1) {
					if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
						g_feld = 99;
						g_bewegen = 2;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						if (v_bew_geg_x > 16) {
							do {
								v_bew_geg_y = (v_bew_geg_y + 1);
								v_bew_geg_x = (v_bew_geg_x - 16);
							} while (!(v_bew_geg_x < 17));
						}
					}
				}
			}
		}
		v_aktuell = 0;
		if (g_mmouse_x > 225 && g_mmouse_x < 257 && g_mmouse_y > 55 && g_mmouse_y < 87) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 225, 55);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 225, 55);
		}
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 20 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
				v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
				v_sprite_y = 0;
				if (v_sprite_x > 16) {
					do {
						v_sprite_y = (v_sprite_y + 1);
						v_sprite_x = (v_sprite_x - 16);
					} while (!(v_sprite_x < 17));
				}
				p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, 225, 55);
				if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
					g_feld = 99;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bewegen = 2;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					v_lastselected = v_i;
				}
				if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
					g_bewegen = 5;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
				}
				if (g_mmouse_links == 1) {
					if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
						g_feld = 99;
						g_bewegen = 2;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						if (v_bew_geg_x > 16) {
							do {
								v_bew_geg_y = (v_bew_geg_y + 1);
								v_bew_geg_x = (v_bew_geg_x - 16);
							} while (!(v_bew_geg_x < 17));
						}
					}
				}
			}
		}
		v_aktuell = 0;
		if (g_mmouse_x > 72 && g_mmouse_x < 104 && g_mmouse_y > 175 && g_mmouse_y < 207) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 72, 175);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 72, 175);
		}
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 7 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
				v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
				v_sprite_y = 0;
				if (v_sprite_x > 16) {
					do {
						v_sprite_y = (v_sprite_y + 1);
						v_sprite_x = (v_sprite_x - 16);
					} while (!(v_sprite_x < 17));
				}
				p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, 72, 175);
				if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
					g_feld = 99;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bewegen = 2;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					v_lastselected = v_i;
				}
				if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
					g_bewegen = 5;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
				}
				if (g_mmouse_links == 1) {
					if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
						g_feld = 99;
						g_bewegen = 2;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						if (v_bew_geg_x > 16) {
							do {
								v_bew_geg_y = (v_bew_geg_y + 1);
								v_bew_geg_x = (v_bew_geg_x - 16);
							} while (!(v_bew_geg_x < 17));
						}
					}
				}
			}
		}
		v_aktuell = 0;
		v_save_waffe = 0;
		if (g_mmouse_x > 72 && g_mmouse_x < 104 && g_mmouse_y > 210 && g_mmouse_y < 242) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 72, 210);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 72, 210);
		}
		v_i = 1;
		do {
			p_fenster(0);
			if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 1 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
				v_save_waffe = v_i;
				v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
				v_sprite_y = 0;
				if (v_sprite_x > 16) {
					do {
						v_sprite_y = (v_sprite_y + 1);
						v_sprite_x = (v_sprite_x - 16);
					} while (!(v_sprite_x < 17));
				}
				p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, 72, 210);
				if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
					g_feld = 99;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bewegen = 2;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					v_lastselected = v_i;
				}
				if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
					g_bewegen = 5;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
				}
				if (g_mmouse_links == 1) {
					if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
						g_feld = 99;
						g_bewegen = 2;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						if (v_bew_geg_x > 16) {
							do {
								v_bew_geg_y = (v_bew_geg_y + 1);
								v_bew_geg_x = (v_bew_geg_x - 16);
							} while (!(v_bew_geg_x < 17));
						}
					}
				}
			}
			v_i = (v_i + 1);
		} while (!(v_i > 50 || v_save_waffe > 0));
		v_aktuell = 0;
		if (g_mmouse_x > 240 && g_mmouse_x < 272 && g_mmouse_y > 200 && g_mmouse_y < 232) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 240, 200);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 240, 200);
		}
		if (v_save_waffe > 0) {
			v_i = (v_save_waffe + 1);
			v_save_waffe = 0;
			do {
				p_fenster(0);
				if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 1 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
					v_save_waffe = v_i;
					v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
					v_sprite_y = 0;
					if (v_sprite_x > 16) {
						do {
							v_sprite_y = (v_sprite_y + 1);
							v_sprite_x = (v_sprite_x - 16);
						} while (!(v_sprite_x < 17));
					}
					p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
					p_displaytransparentsprite(8, 240, 200);
					if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
						g_feld = 99;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bewegen = 2;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						v_lastselected = v_i;
					}
					if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
						g_bewegen = 5;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
					}
					if (g_mmouse_links == 1) {
						if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
							g_feld = 99;
							g_bewegen = 2;
							v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
							g_bew_geg_pos = v_i;
							v_bew_geg_x = v_bew_geg;
							v_bew_geg_y = 0;
							if (v_bew_geg_x > 16) {
								do {
									v_bew_geg_y = (v_bew_geg_y + 1);
									v_bew_geg_x = (v_bew_geg_x - 16);
								} while (!(v_bew_geg_x < 17));
							}
						}
					}
				}
				v_i = (v_i + 1);
			} while (!(v_i > 50 || v_save_waffe > 0));
		}
		v_aktuell = 0;
		if (g_mmouse_x > 280 && g_mmouse_x < 312 && g_mmouse_y > 200 && g_mmouse_y < 232) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 280, 200);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 280, 200);
		}
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 11 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
				v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
				v_sprite_y = 0;
				if (v_sprite_x > 16) {
					do {
						v_sprite_y = (v_sprite_y + 1);
						v_sprite_x = (v_sprite_x - 16);
					} while (!(v_sprite_x < 17));
				}
				p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, 280, 200);
				if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
					g_feld = 99;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bewegen = 2;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					v_lastselected = v_i;
				}
				if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
					g_bewegen = 5;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
				}
				if (g_mmouse_links == 1) {
					if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
						g_feld = 99;
						g_bewegen = 2;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						if (v_bew_geg_x > 16) {
							do {
								v_bew_geg_y = (v_bew_geg_y + 1);
								v_bew_geg_x = (v_bew_geg_x - 16);
							} while (!(v_bew_geg_x < 17));
						}
					}
				}
			}
		}
		v_aktuell = 0;
		v_save_ring = 0;
		if (g_mmouse_x > 225 && g_mmouse_x < 257 && g_mmouse_y > 247 && g_mmouse_y < 279) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 225, 247);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 225, 247);
		}
		v_i = 1;
		do {
			p_fenster(0);
			if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 18 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
				v_save_ring = v_i;
				v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
				v_sprite_y = 0;
				if (v_sprite_x > 16) {
					do {
						v_sprite_y = (v_sprite_y + 1);
						v_sprite_x = (v_sprite_x - 16);
					} while (!(v_sprite_x < 17));
				}
				p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, 225, 247);
				if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
					g_feld = 99;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bewegen = 2;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					v_lastselected = v_i;
				}
				if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
					g_bewegen = 5;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
				}
				if (g_mmouse_links == 1) {
					if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
						g_feld = 99;
						g_bewegen = 2;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						if (v_bew_geg_x > 16) {
							do {
								v_bew_geg_y = (v_bew_geg_y + 1);
								v_bew_geg_x = (v_bew_geg_x - 16);
							} while (!(v_bew_geg_x < 17));
						}
					}
				}
			}
			v_i = (v_i + 1);
		} while (!(v_i > 50 || v_save_ring > 0));
		v_aktuell = 0;
		if (g_mmouse_x > 260 && g_mmouse_x < 292 && g_mmouse_y > 247 && g_mmouse_y < 279) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 260, 247);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 260, 247);
		}
		if (v_save_ring > 0) {
			v_i = (v_save_ring + 1);
			v_save_ring = 0;
			do {
				p_fenster(0);
				if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 18 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
					v_save_ring = v_i;
					v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
					v_sprite_y = 0;
					if (v_sprite_x > 16) {
						do {
							v_sprite_y = (v_sprite_y + 1);
							v_sprite_x = (v_sprite_x - 16);
						} while (!(v_sprite_x < 17));
					}
					p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
					p_displaytransparentsprite(8, 260, 247);
					if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
						g_feld = 99;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bewegen = 2;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						v_lastselected = v_i;
					}
					if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
						g_bewegen = 5;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
					}
					if (g_mmouse_links == 1) {
						if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
							g_feld = 99;
							g_bewegen = 2;
							v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
							g_bew_geg_pos = v_i;
							v_bew_geg_x = v_bew_geg;
							v_bew_geg_y = 0;
							if (v_bew_geg_x > 16) {
								do {
									v_bew_geg_y = (v_bew_geg_y + 1);
									v_bew_geg_x = (v_bew_geg_x - 16);
								} while (!(v_bew_geg_x < 17));
							}
						}
					}
				}
				v_i = (v_i + 1);
			} while (!(v_i > 50 || v_save_ring > 0));
		}
		v_aktuell = 0;
		if (g_mmouse_x > 295 && g_mmouse_x < 327 && g_mmouse_y > 247 && g_mmouse_y < 279) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 295, 247);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 295, 247);
		}
		if (v_save_ring > 0) {
			v_i = (v_save_ring + 1);
			v_save_ring = 0;
			do {
				p_fenster(0);
				if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 18 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
					v_save_ring = v_i;
					v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
					v_sprite_y = 0;
					if (v_sprite_x > 16) {
						do {
							v_sprite_y = (v_sprite_y + 1);
							v_sprite_x = (v_sprite_x - 16);
						} while (!(v_sprite_x < 17));
					}
					p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
					p_displaytransparentsprite(8, 295, 247);
					if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
						g_feld = 99;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bewegen = 2;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						v_lastselected = v_i;
					}
					if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
						g_bewegen = 5;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
					}
					if (g_mmouse_links == 1) {
						if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
							g_feld = 99;
							g_bewegen = 2;
							v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
							g_bew_geg_pos = v_i;
							v_bew_geg_x = v_bew_geg;
							v_bew_geg_y = 0;
							if (v_bew_geg_x > 16) {
								do {
									v_bew_geg_y = (v_bew_geg_y + 1);
									v_bew_geg_x = (v_bew_geg_x - 16);
								} while (!(v_bew_geg_x < 17));
							}
						}
					}
				}
				v_i = (v_i + 1);
			} while (!(v_i > 50 || v_save_ring > 0));
		}
		v_aktuell = 0;
		if (g_mmouse_x > 150 && g_mmouse_x < 182 && g_mmouse_y > 80 && g_mmouse_y < 112) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 150, 80);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 150, 80);
		}
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 9 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
				v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
				v_sprite_y = 0;
				if (v_sprite_x > 16) {
					do {
						v_sprite_y = (v_sprite_y + 1);
						v_sprite_x = (v_sprite_x - 16);
					} while (!(v_sprite_x < 17));
				}
				p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, 150, 80);
				if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
					g_feld = 99;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bewegen = 2;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					v_lastselected = v_i;
				}
				if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
					g_bewegen = 5;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
				}
				if (g_mmouse_links == 1) {
					if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
						g_feld = 99;
						g_bewegen = 2;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						if (v_bew_geg_x > 16) {
							do {
								v_bew_geg_y = (v_bew_geg_y + 1);
								v_bew_geg_x = (v_bew_geg_x - 16);
							} while (!(v_bew_geg_x < 17));
						}
					}
				}
			}
		}
		v_aktuell = 0;
		if (g_mmouse_x > 297 && g_mmouse_x < 329 && g_mmouse_y > 80 && g_mmouse_y < 112) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 297, 80);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 297, 80);
		}
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 10 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
				v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
				v_sprite_y = 0;
				if (v_sprite_x > 16) {
					do {
						v_sprite_y = (v_sprite_y + 1);
						v_sprite_x = (v_sprite_x - 16);
					} while (!(v_sprite_x < 17));
				}
				p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, 297, 80);
				if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
					g_feld = 99;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bewegen = 2;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					v_lastselected = v_i;
				}
				if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
					g_bewegen = 5;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
				}
				if (g_mmouse_links == 1) {
					if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
						g_feld = 99;
						g_bewegen = 2;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						if (v_bew_geg_x > 16) {
							do {
								v_bew_geg_y = (v_bew_geg_y + 1);
								v_bew_geg_x = (v_bew_geg_x - 16);
							} while (!(v_bew_geg_x < 17));
						}
					}
				}
			}
		}
		v_aktuell = 0;
		if (g_mmouse_x > 297 && g_mmouse_x < 329 && g_mmouse_y > 120 && g_mmouse_y < 152) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 297, 120);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 297, 120);
		}
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 13 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
				v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
				v_sprite_y = 0;
				if (v_sprite_x > 16) {
					do {
						v_sprite_y = (v_sprite_y + 1);
						v_sprite_x = (v_sprite_x - 16);
					} while (!(v_sprite_x < 17));
				}
				p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, 297, 120);
				if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
					g_feld = 99;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bewegen = 2;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					v_lastselected = v_i;
				}
				if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
					g_bewegen = 5;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
				}
				if (g_mmouse_links == 1) {
					if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
						g_feld = 99;
						g_bewegen = 2;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						if (v_bew_geg_x > 16) {
							do {
								v_bew_geg_y = (v_bew_geg_y + 1);
								v_bew_geg_x = (v_bew_geg_x - 16);
							} while (!(v_bew_geg_x < 17));
						}
					}
				}
			}
		}
		v_aktuell = 0;
		if (g_mmouse_x > 150 && g_mmouse_x < 182 && g_mmouse_y > 130 && g_mmouse_y < 162) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 150, 130);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 150, 130);
		}
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 19 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
				v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
				v_sprite_y = 0;
				if (v_sprite_x > 16) {
					do {
						v_sprite_y = (v_sprite_y + 1);
						v_sprite_x = (v_sprite_x - 16);
					} while (!(v_sprite_x < 17));
				}
				p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, 150, 130);
				if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
					g_feld = 99;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bewegen = 2;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					v_lastselected = v_i;
				}
				if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
					g_bewegen = 5;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
				}
				if (g_mmouse_links == 1) {
					if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
						g_feld = 99;
						g_bewegen = 2;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						if (v_bew_geg_x > 16) {
							do {
								v_bew_geg_y = (v_bew_geg_y + 1);
								v_bew_geg_x = (v_bew_geg_x - 16);
							} while (!(v_bew_geg_x < 17));
						}
					}
				}
			}
		}
		v_aktuell = 0;
		if (g_mmouse_x > 127 && g_mmouse_x < 159 && g_mmouse_y > 300 && g_mmouse_y < 332) {
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, 127, 300);
			v_aktuell = 1;
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, 127, 300);
		}
		for (v_i = 1; v_i <= 50; v_i += 1) {
			if (a_item("inv", a_inventory("inv", v_i, g_akt_spieler).f_name).f_type == 8 && a_inventory("inv", v_i, g_akt_spieler).f_benutzt == 1) {
				v_sprite_x = a_inventory("inv", v_i, g_akt_spieler).f_name;
				v_sprite_y = 0;
				if (v_sprite_x > 16) {
					do {
						v_sprite_y = (v_sprite_y + 1);
						v_sprite_x = (v_sprite_x - 16);
					} while (!(v_sprite_x < 17));
				}
				p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, 127, 300);
				if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
					g_feld = 99;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bewegen = 2;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					v_lastselected = v_i;
				}
				if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
					g_bewegen = 5;
					v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
					g_bew_geg_pos = v_i;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
				}
				if (g_mmouse_links == 1) {
					if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
						g_feld = 99;
						g_bewegen = 2;
						v_bew_geg = a_inventory("inv", v_i, g_akt_spieler).f_name;
						g_bew_geg_pos = v_i;
						v_bew_geg_x = v_bew_geg;
						v_bew_geg_y = 0;
						if (v_bew_geg_x > 16) {
							do {
								v_bew_geg_y = (v_bew_geg_y + 1);
								v_bew_geg_x = (v_bew_geg_x - 16);
							} while (!(v_bew_geg_x < 17));
						}
					}
				}
			}
		}
		for (v_act_staff_piece = 1; v_act_staff_piece <= 9; v_act_staff_piece += 1) {
			v_aktuell = 0;
			if (g_mmouse_x > 20 && g_mmouse_x < 52 && g_mmouse_y > (40 + ((v_act_staff_piece * 32) - 32)) && g_mmouse_y < (40 + (v_act_staff_piece * 32))) {
				p_clipsprite(8, 224, 320, 32, 32);
				p_displaytransparentsprite(8, 20, (40 + ((v_act_staff_piece * 32) - 32)));
				v_aktuell = 1;
			} else {
				p_clipsprite(8, 480, 64, 32, 32);
				p_displaytransparentsprite(8, 20, (40 + ((v_act_staff_piece * 32) - 32)));
			}
			if (a_spieler("inv", g_akt_spieler).f_staff_pieces[v_act_staff_piece] == 1) {
				v_sprite_x = (402 + v_act_staff_piece);
				v_sprite_y = 0;
				if (v_sprite_x > 16) {
					do {
						v_sprite_y = (v_sprite_y + 1);
						v_sprite_x = (v_sprite_x - 16);
					} while (!(v_sprite_x < 17));
				}
				p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, 20, (40 + ((v_act_staff_piece * 32) - 32)));
			}
			if (!g_bewegen && !v_doppelklick && g_mmouse_links == 1 && v_aktuell == 1) {
				g_feld = 99;
				v_bew_geg = (402 + v_act_staff_piece);
				g_bewegen = 3;
				g_bew_geg_pos = v_act_staff_piece;
				v_bew_geg_x = v_bew_geg;
				v_bew_geg_y = 0;
				v_lastselected = v_i;
			}
			if (!g_bewegen && v_doppelklick == 1 && v_lastselected == v_i && v_aktuell == 1) {
				g_bewegen = 6;
				v_bew_geg = (402 + v_act_staff_piece);
				g_bew_geg_pos = v_act_staff_piece;
				v_bew_geg_x = v_bew_geg;
				v_bew_geg_y = 0;
			}
			if (g_mmouse_links == 1) {
				if (!g_bewegen && v_aktuell == 1 && (v_mmouse_xdif < -1 || v_mmouse_xdif > 1 || v_mmouse_ydif < -1 || v_mmouse_ydif > 1)) {
					g_feld = 99;
					g_bewegen = 3;
					v_bew_geg = (402 + v_act_staff_piece);
					g_bew_geg_pos = v_act_staff_piece;
					v_bew_geg_x = v_bew_geg;
					v_bew_geg_y = 0;
					if (v_bew_geg_x > 16) {
						do {
							v_bew_geg_y = (v_bew_geg_y + 1);
							v_bew_geg_x = (v_bew_geg_x - 16);
						} while (!(v_bew_geg_x < 17));
					}
				}
			}
		}
		v_esc_but_x = 319;
		v_esc_but_y = 15;
		if (g_mmouse_x >= v_esc_but_x && g_mmouse_x <= (v_esc_but_x + 32) && g_mmouse_y >= v_esc_but_y && g_mmouse_y <= (v_esc_but_y + 32)) {
			p_clipsprite(6, 96, 32, 31, 31);
			if (g_mmouse_links == 1) {
				if (!g_bewegen) {
					v_esc_click = 1;
				}
			} else {
				if (v_esc_click == 1) {
					v_get_out = 1;
				}
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, v_esc_but_x, v_esc_but_y);
L_endjump: ;
		if (g_bewegen == 2 || g_bewegen == 3) {
			g_feld = g_bew_geg_pos;
			v_bew_geg_x = v_bew_geg;
			v_bew_geg_y = 0;
			if (v_bew_geg_x > 16) {
				do {
					v_bew_geg_x -= 16;
					v_bew_geg_y += 1;
				} while (!(v_bew_geg_x < 17));
			}
		}
		if (a_skills("inv", 28, g_akt_spieler).f_gewaehlt == 1) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 22));
			v_xxx = 375;
			v_yyy = 390;
			p_drawtext(v_xxx, (v_yyy - 20), a_skills("inv", 28, g_akt_spieler).f_name[(g_language + 1)], -1, 0);
			p_drawtext((v_xxx + 40), (v_yyy + 8), a_message_text("inv", (709 + a_spieler("inv", g_akt_spieler).f_style), (g_language + 1)), -1, 0);
			p_stopdrawing();
			v_style_diff = 0;
			if (!(p_keyboardpushed(102) || g_mmouse_links)) {
				v_wait_release4 = 1;
			}
			if (p_keyboardpushed(102) && v_wait_release4 == 1) {
				v_wait_release4 = 0;
				v_style_diff = 1;
			}
			if (g_mmouse_x > v_xxx && g_mmouse_x < (v_xxx + 32) && g_mmouse_y > v_yyy && g_mmouse_y < (v_yyy + 32)) {
				p_clipsprite(6, 96, 0, 31, 31);
				if (g_mmouse_links == 1 && v_wait_release4 == 1) {
					v_wait_release4 = 0;
					v_style_diff = -1;
				}
			} else {
				p_clipsprite(6, 32, 0, 31, 31);
			}
			p_displaytransparentsprite(6, v_xxx, v_yyy);
			v_xxx = (v_xxx + 200);
			if (g_mmouse_x > v_xxx && g_mmouse_x < (v_xxx + 32) && g_mmouse_y > v_yyy && g_mmouse_y < (v_yyy + 32)) {
				p_clipsprite(6, 63, 0, 31, 31);
				if (g_mmouse_links == 1 && v_wait_release4 == 1) {
					v_wait_release4 = 0;
					v_style_diff = 1;
				}
			} else {
				p_clipsprite(6, 0, 0, 31, 31);
			}
			p_displaytransparentsprite(6, v_xxx, v_yyy);
			a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style + v_style_diff);
			if (v_style_diff < 0) {
				if (a_spieler("inv", g_akt_spieler).f_style < 0) {
					a_spieler("inv", g_akt_spieler).f_style = 9;
				}
				if (a_spieler("inv", g_akt_spieler).f_style == 9 && !p_ich_trage(8)) {
					a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style - 1);
				}
				if (a_spieler("inv", g_akt_spieler).f_style == 8 && !p_ich_trage(5)) {
					a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style - 1);
				}
				if (a_spieler("inv", g_akt_spieler).f_style == 7 && !p_ich_trage(7)) {
					a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style - 1);
				}
				if (a_spieler("inv", g_akt_spieler).f_style == 6 && !p_ich_trage(6)) {
					a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style - 1);
				}
				if (a_spieler("inv", g_akt_spieler).f_style == 5 && !p_ich_trage(1)) {
					a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style - 1);
				}
				if (a_spieler("inv", g_akt_spieler).f_style == 4 && !p_ich_trage(3)) {
					a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style - 1);
				}
				if (a_spieler("inv", g_akt_spieler).f_style == 3 && !p_ich_trage(4)) {
					a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style - 1);
				}
			} else {
				if (v_style_diff > 0) {
					if (a_spieler("inv", g_akt_spieler).f_style > 9) {
						a_spieler("inv", g_akt_spieler).f_style = 9;
					}
					if (a_spieler("inv", g_akt_spieler).f_style == 3 && !p_ich_trage(4)) {
						a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style + 1);
					}
					if (a_spieler("inv", g_akt_spieler).f_style == 4 && !p_ich_trage(3)) {
						a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style + 1);
					}
					if (a_spieler("inv", g_akt_spieler).f_style == 5 && !p_ich_trage(1)) {
						a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style + 1);
					}
					if (a_spieler("inv", g_akt_spieler).f_style == 6 && !p_ich_trage(6)) {
						a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style + 1);
					}
					if (a_spieler("inv", g_akt_spieler).f_style == 7 && !p_ich_trage(7)) {
						a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style + 1);
					}
					if (a_spieler("inv", g_akt_spieler).f_style == 8 && !p_ich_trage(5)) {
						a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style + 1);
					}
					if (a_spieler("inv", g_akt_spieler).f_style == 9 && !p_ich_trage(8)) {
						a_spieler("inv", g_akt_spieler).f_style = (a_spieler("inv", g_akt_spieler).f_style + 1);
					}
					if (a_spieler("inv", g_akt_spieler).f_style > 9) {
						a_spieler("inv", g_akt_spieler).f_style = 0;
					}
				}
			}
		}
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawingmode(1);
		v_gew = (p_gewicht() / 5);
		v_txt = a_message_text("inv", 597, (1 + g_language)) + p_str(v_gew) + a_message_text("inv", 598, (1 + g_language));
		p_drawtext((622 - p_textwidth(v_txt)), 178, v_txt, -1, 0);
		p_frontcolor(p_rgb(247, 36, 61));
		v_txt = p_str(a_spieler("inv", g_akt_spieler).f_lifepoints) + "/" + p_str(p_maxlife());
		p_drawtext(375, 450, a_message_text("inv", 878, (g_language + 1)), -1, 0);
		p_drawtext((480 - p_textwidth(v_txt)), 450, v_txt, -1, 0);
		p_frontcolor(p_rgb(130, 125, 250));
		v_txt = p_str(a_spieler("inv", g_akt_spieler).f_mana) + "/" + p_str(p_maxmana());
		p_drawtext(510, 450, a_message_text("inv", 879, (g_language + 1)), -1, 0);
		p_drawtext((622 - p_textwidth(v_txt)), 450, v_txt, -1, 0);
		p_frontcolor(p_rgb(150, 150, 100));
		v_txt = p_str(a_spieler("inv", g_akt_spieler).f_hunger);
		p_drawtext(375, 430, a_message_text("inv", 90, (g_language + 1)), -1, 0);
		p_drawtext((480 - p_textwidth(v_txt)), 430, v_txt, -1, 0);
		p_frontcolor(p_rgb(0, 0, 255));
		v_txt = p_str(a_spieler("inv", g_akt_spieler).f_durst);
		p_drawtext(510, 430, a_message_text("inv", 89, (g_language + 1)), -1, 0);
		p_drawtext((622 - p_textwidth(v_txt)), 430, v_txt, -1, 0);
		p_stopdrawing();
		if (g_feld > 0 || g_do_it > 0) {
			if (!a_inventory("inv", g_feld, g_akt_spieler).f_name && g_itemmenue_aktiv == 1) {
				g_itemmenue_aktiv = 0;
			}
			if (g_do_it > 0) {
				g_feld = g_bew_geg_pos;
			}
		}
		if (!g_wait_release3) {
			g_wait_release3 = 1;
			if (p_keyboardpushed(13) || p_keyboardpushed(32) || a_jb("inv", 1) || g_mmouse_links) {
				g_wait_release3 = 0;
			}
			for (v_i = 1; v_i <= 7; v_i += 1) {
				if (p_keyboardpushed(a_num_keys("inv", v_i))) {
					g_wait_release3 = 0;
				}
			}
			for (v_i = 1; v_i <= 10; v_i += 1) {
				if (p_keyboardpushed(a_f_keys("inv", v_i))) {
					g_wait_release3 = 0;
				}
			}
		} else {
			for (v_i = 1; v_i <= 10; v_i += 1) {
				if (p_keyboardpushed(a_f_keys("inv", v_i))) {
					g_wait_release3 = 0;
					p_move_int((40 + v_i), v_sel_pos);
				}
			}
		}
		if (g_bewegen == 7) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(400, 200, a_message_text("inv", 944, (g_language + 1)), -1, 0);
			p_stopdrawing();
			p_describe(g_bew_geg_pos, 400, 220, 25, 375);
			if (g_wait_release3 == 1 && (p_keyboardpushed(32) || p_keyboardpushed(13) || a_jb("inv", 1) || p_keyboardpushed(54))) {
				p_move_int(g_bew_geg_pos, v_sel_pos);
				g_wait_release3 = 0;
				g_bewegen = 0;
				g_itemmenue_aktiv = 0;
				v_bew_geg = 0;
				g_bew_geg_pos = 0;
				v_bew_ziel = 0;
			}
		} else {
			if (a_inventory("inv", g_feld, g_akt_spieler).f_name > 0) {
				p_itemtest();
			}
		}
		g_do_it = 0;
		if (!g_mmouse_links) {
			if (g_bewegen == 1) {
				if (g_mmouse_x < 340 && g_mmouse_y < 350) {
					g_aktion = 1;
					g_do_it = 1;
					for (v_act_piece = 1; v_act_piece <= 9; v_act_piece += 1) {
						if (v_bew_geg == (402 + v_act_piece)) {
							a_spieler("inv", g_akt_spieler).f_staff_pieces[v_act_piece] = 1;
							p_leeren(g_bew_geg_pos);
							p_was_last_piece();
						}
					}
				} else {
					p_move_int(g_bew_geg_pos, v_bew_ziel);
					v_bew_geg = 0;
					g_bew_geg_pos = 0;
					v_bew_ziel = 0;
					v_bew_geg_x = 0;
					v_bew_geg_y = 0;
					v_schnellinventory_pos = 0;
				}
				g_bewegen = 0;
			}
			if (g_bewegen == 5) {
				g_do_it = 1;
				g_bewegen = 0;
			}
			if (g_bewegen == 6) {
				if (a_spieler("inv", g_akt_spieler).f_staff_pieces[g_bew_geg_pos] == 1) {
					if (p_in_rucksack((402 + g_bew_geg_pos), 1, 0) <= 50) {
						a_spieler("inv", g_akt_spieler).f_staff_pieces[g_bew_geg_pos] = 0;
					}
				}
				g_bewegen = 0;
			}
			if (g_bewegen == 2) {
				if (g_mmouse_x > 350 || g_mmouse_y > 425) {
					g_aktion = 1;
					g_do_it = 1;
				}
				g_bewegen = 0;
			}
			if (g_bewegen == 3) {
				if (a_spieler("inv", g_akt_spieler).f_staff_pieces[g_bew_geg_pos] == 1) {
					if (p_in_rucksack((402 + g_bew_geg_pos), 1, 0) <= 50) {
						a_spieler("inv", g_akt_spieler).f_staff_pieces[g_bew_geg_pos] = 0;
					}
				}
				g_bewegen = 0;
			}
		}
		if (!g_bewegen || g_bewegen == 5 || g_bewegen == 7) {
			p_draw_mousepointer(g_mmouse_x, g_mmouse_y);
		} else {
			if (!g_no_mouse) {
				p_clipsprite(8, ((v_bew_geg_x * 32) - 32), (v_bew_geg_y * 32), 32, 32);
				p_displaytransparentsprite(8, (g_mmouse_x - 16), (g_mmouse_y - 16));
			}
		}
		p_flipbuffers(1);
		p_examinekeyboard();
	} while (!(g_abbrechen == 1 || v_get_out == 1));
	g_abbrechen = 0;
}

static intptr_t p_itemtest() {
	int16_t v_brechfaktor = 0;
	int16_t v_chance = 0;
	intptr_t v_destination = 0;
	intptr_t v_do_it2 = 0;
	int16_t v_foodvalue = 0;
	std::string v_gegstat;
	intptr_t v_i = 0;
	int16_t v_learn_count = 0;
	int16_t v_mag_geg = 0;
	int16_t v_stackplace = 0;
	int16_t v_testfeld = 0;
	std::string v_text1;
	std::string v_text2;
	std::string v_text3;
	v_text1 = "";
	v_text2 = "";
	v_text3 = "";
	if (a_skills("itemtest", 98, g_akt_spieler).f_gewaehlt == 1 && (a_inventory("itemtest", g_feld, g_akt_spieler).f_status == 1 || a_inventory("itemtest", g_feld, g_akt_spieler).f_status == 2) && (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 1 || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 6 || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 7 || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 8 || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 9 || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 11)) {
		v_text3 = a_message_text("itemtest", 563, (g_language + 1));
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 46 || a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 47 || a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 39 || a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 40) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			if (a_inventory("itemtest", g_feld, g_akt_spieler).f_status > 0) {
				v_text1 = a_message_text("itemtest", 527, (g_language + 1));
			} else {
				v_text1 = "";
			}
		} else {
			v_text1 = a_message_text("itemtest", 528, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			p_unorequip(g_feld);
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 3) {
		v_text1 = a_message_text("itemtest", 529, (g_language + 1));
		if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 50 && !a_skills("itemtest", 82, g_akt_spieler).f_gewaehlt) {
			v_text1 = "";
		}
		v_foodvalue = a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_attri1;
		if (a_skills("itemtest", 95, g_akt_spieler).f_gewaehlt == 1) {
			v_foodvalue = (v_foodvalue * 2);
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 50 && !a_skills("itemtest", 82, g_akt_spieler).f_gewaehlt) {
				p_message(770, 2);
			} else {
				a_spieler("itemtest", g_akt_spieler).f_hunger = (a_spieler("itemtest", g_akt_spieler).f_hunger - v_foodvalue);
				if (a_spieler("itemtest", g_akt_spieler).f_hunger < 1) {
					a_spieler("itemtest", g_akt_spieler).f_hunger = 0;
				}
				if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 53) {
					a_spieler("itemtest", g_akt_spieler).f_durst = (a_spieler("itemtest", g_akt_spieler).f_durst - a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_attri1);
					if (a_spieler("itemtest", g_akt_spieler).f_durst < 1) {
						a_spieler("itemtest", g_akt_spieler).f_durst = 0;
					}
				}
				p_sound(62);
				p_leeren(g_feld);
				g_aktion = 1;
				p_delay(g_mydelay);
			}
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 23) {
		v_foodvalue = a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_attri1;
		if (a_skills("itemtest", 95, g_akt_spieler).f_gewaehlt == 1) {
			v_foodvalue = (v_foodvalue * 2);
		}
		v_text1 = a_message_text("itemtest", 549, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			a_spieler("itemtest", g_akt_spieler).f_durst = (a_spieler("itemtest", g_akt_spieler).f_durst - v_foodvalue);
			if (a_spieler("itemtest", g_akt_spieler).f_durst < 1) {
				a_spieler("itemtest", g_akt_spieler).f_durst = 0;
			}
			if (p_get_chance(100) < p_max(p_min(((a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_attri2 * 2) - (p_staerke() * 5)), 10), 90)) {
				a_spieler("itemtest", g_akt_spieler).f_betrunken = (p_myrand2((a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_attri2 / 2)) + 1);
			}
			p_sound(20);
			p_leeren(g_feld);
			g_aktion = 1;
			p_delay(g_mydelay);
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 353 || a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 351 || a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 354) {
		v_text1 = a_message_text("itemtest", 529, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 353) {
				a_spieler("itemtest", g_akt_spieler).f_lifepoints = (a_spieler("itemtest", g_akt_spieler).f_lifepoints + p_get_chance(61));
			}
			if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 351) {
				a_spieler("itemtest", g_akt_spieler).f_lifepoints = ((a_spieler("itemtest", g_akt_spieler).f_lifepoints + p_myrand(15)) + 5);
				a_spieler("itemtest", g_akt_spieler).f_poison = 0;
			}
			if (a_spieler("itemtest", g_akt_spieler).f_lifepoints > p_maxlife()) {
				a_spieler("itemtest", g_akt_spieler).f_lifepoints = p_maxlife();
			}
			if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 354) {
				a_spieler("itemtest", g_akt_spieler).f_mana = (a_spieler("itemtest", g_akt_spieler).f_mana + p_get_chance(62));
			}
			if (a_spieler("itemtest", g_akt_spieler).f_mana > p_maxmana()) {
				a_spieler("itemtest", g_akt_spieler).f_mana = p_maxmana();
			}
			p_sound(62);
			g_aktion = 1;
			p_leeren(g_feld);
			p_message(39, 2);
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 8) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			v_text1 = a_message_text("itemtest", 532, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 533, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			p_unorequip(g_feld);
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 6) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			v_text1 = a_message_text("itemtest", 532, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 533, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			p_unorequip(g_feld);
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 1) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			v_text1 = a_message_text("itemtest", 540, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 541, (g_language + 1));
		}
		if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 1 || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_klasse == 2 || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_klasse == 3) {
			v_text2 = a_message_text("itemtest", 542, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			p_unorequip(g_feld);
		}
		if (g_benutzen == 2) {
			p_werfen();
			g_abbrechen = 1;
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 13) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			v_text1 = a_message_text("itemtest", 540, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 541, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
				if (a_skills("itemtest", 142, g_akt_spieler).f_gewaehlt == 1) {
					p_message(874, 3);
				} else {
					for (v_i = 1; v_i <= 50; v_i += 1) {
						if (a_item("itemtest", a_inventory("itemtest", v_i, g_akt_spieler).f_name).f_type == 13 && a_inventory("itemtest", v_i, g_akt_spieler).f_benutzt == 1) {
							a_inventory("itemtest", v_i, g_akt_spieler).f_benutzt = 0;
							break;
						}
					}
					a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt = 1;
					p_delay(g_mydelay);
				}
			} else {
				a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt = 0;
				p_delay(g_mydelay);
			}
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 10) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			v_text1 = a_message_text("itemtest", 540, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 541, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			g_aktion = 1;
			if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
				if (a_skills("itemtest", 142, g_akt_spieler).f_gewaehlt == 1) {
					p_message(874, 3);
				} else {
					for (v_i = 1; v_i <= 50; v_i += 1) {
						if (a_item("itemtest", a_inventory("itemtest", v_i, g_akt_spieler).f_name).f_type == 10 && a_inventory("itemtest", v_i, g_akt_spieler).f_benutzt == 1) {
							a_inventory("itemtest", v_i, g_akt_spieler).f_benutzt = 0;
							break;
						}
					}
					a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt = 1;
					p_delay(g_mydelay);
				}
			} else {
				a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt = 0;
				p_delay(g_mydelay);
			}
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 9) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			v_text1 = a_message_text("itemtest", 532, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 533, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			p_unorequip(g_feld);
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 7) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			v_text1 = a_message_text("itemtest", 532, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 533, (g_language + 1));
		}
		v_gegstat = "";
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			p_unorequip(g_feld);
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 11) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			v_text1 = a_message_text("itemtest", 532, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 533, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			p_unorequip(g_feld);
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 240) {
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 4) {
			p_message(281, 3);
			g_benutzen = 0;
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 150) {
		v_text1 = a_message_text("itemtest", 606, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1) {
			if (p_gold_anzahl() >= 5000) {
				p_aufsteigen2();
				g_aktion = 1;
				p_gold_verlieren(5000);
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 193) {
		v_text1 = a_message_text("itemtest", 549, (g_language + 1));
		v_text2 = "";
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			if (a_inventory("itemtest", g_feld, g_akt_spieler).f_status > 0 && a_spieler("itemtest", g_akt_spieler).f_durst > 0) {
				a_inventory("itemtest", g_feld, g_akt_spieler).f_status = (a_inventory("itemtest", g_feld, g_akt_spieler).f_status - 1);
				a_spieler("itemtest", g_akt_spieler).f_durst = (a_spieler("itemtest", g_akt_spieler).f_durst - 60);
				if (a_spieler("itemtest", g_akt_spieler).f_durst < 1) {
					a_spieler("itemtest", g_akt_spieler).f_durst = 0;
				}
				a_spieler("itemtest", g_akt_spieler).f_verdursten = 0;
				p_sound(20);
				p_delay(g_mydelay);
				g_aktion = 1;
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 167) {
		if (!a_skills("itemtest", 82, g_akt_spieler).f_gewaehlt) {
			v_text1 = "";
		} else {
			v_text1 = a_message_text("itemtest", 549, (g_language + 1));
		}
		v_text2 = "";
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			v_foodvalue = a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_attri1;
			if (a_skills("itemtest", 95, g_akt_spieler).f_gewaehlt == 1) {
				v_foodvalue = (v_foodvalue * 2);
			}
			if (!a_skills("itemtest", 82, g_akt_spieler).f_gewaehlt) {
				p_message(770, 2);
			} else {
				a_spieler("itemtest", g_akt_spieler).f_durst = (a_spieler("itemtest", g_akt_spieler).f_durst - v_foodvalue);
				if (a_spieler("itemtest", g_akt_spieler).f_durst < 1) {
					a_spieler("itemtest", g_akt_spieler).f_durst = 0;
				}
				a_spieler("itemtest", g_akt_spieler).f_verdursten = 0;
				p_sound(20);
				p_leeren(g_feld);
				p_delay(g_mydelay);
				g_aktion = 1;
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 38) {
		v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		if (a_skills("itemtest", 64, g_akt_spieler).f_gewaehlt == 1 && (a_spells("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_status).f_level + 2) <= a_spieler("itemtest", g_akt_spieler).f_circle && !(a_learned("itemtest", g_akt_spieler, a_inventory("itemtest", g_feld, g_akt_spieler).f_status) & 384) && !p_zauber_nehmen(a_inventory("itemtest", g_feld, g_akt_spieler).f_status)) {
			v_text2 = a_message_text("itemtest", 552, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			a_zauberliste("itemtest", (g_akt_zauber + g_akt_zauber_offset)) = a_inventory("itemtest", g_feld, g_akt_spieler).f_status;
			g_item_spell = (a_inventory("itemtest", g_feld, g_akt_spieler).f_attri5 & 255);
			p_laby_screen();
			p_cast_it();
			p_leeren(g_feld);
			g_item_spell = 0;
			g_aktion = 1;
			p_delay(g_mydelay);
		}
		if (g_benutzen == 2) {
			if (a_skills("itemtest", 64, g_akt_spieler).f_gewaehlt == 1) {
				if ((a_spells("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_status).f_level + 2) <= a_spieler("itemtest", g_akt_spieler).f_circle) {
					v_learn_count = 15;
					for (v_i = 1; v_i <= 184; v_i += 1) {
						if ((a_learned("itemtest", g_akt_spieler, v_i) & 384) == 256) {
							v_learn_count -= 1;
						}
					}
					if (v_learn_count > 0) {
						a_learned("itemtest", g_akt_spieler, a_inventory("itemtest", g_feld, g_akt_spieler).f_status) += 256;
						p_message(483, 2);
					} else {
						p_message(482, 2);
					}
				}
			}
			p_leeren(g_feld);
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 231) {
		v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(1);
				if (!g_blocked) {
					g_aktion = 1;
					p_sound(26);
					if (a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 70) {
						if (a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_stat1 == 1) {
							p_message(524, 1);
						} else {
							p_setlaby((a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y), a_spieler("itemtest", g_akt_spieler).f_level, 71, 0, 0);
							p_leeren(g_feld);
							g_abbrechen = 1;
						}
					}
					if (a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 62) {
						a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld = 63;
						p_leeren(g_feld);
						g_abbrechen = 1;
					}
				} else {
					p_message(255, 1);
				}
				p_laby_screen();
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 219) {
		v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(1);
				if (!g_blocked) {
					g_aktion = 1;
					p_sound(26);
					if (a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 70) {
						if (a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_stat1 == 1) {
							p_message(524, 1);
						} else {
							p_setlaby((a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y), a_spieler("itemtest", g_akt_spieler).f_level, 71, 0, 0);
							p_leeren(g_feld);
							g_abbrechen = 1;
						}
					}
					if (a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 67) {
						a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld = 68;
						p_leeren(g_feld);
						g_abbrechen = 1;
					}
					if (a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 62) {
						a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld = 63;
						p_leeren(g_feld);
						g_abbrechen = 1;
					}
					if (a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 193) {
						a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld = 194;
						p_leeren(g_feld);
						g_abbrechen = 1;
					}
				} else {
					p_message(255, 1);
				}
				p_laby_screen();
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 267) {
		v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			a_zauberliste("itemtest", (g_akt_zauber + g_akt_zauber_offset)) = a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_attri1;
			g_item_spell = 1;
			p_cast_it();
			g_aktion = 1;
			g_item_spell = 0;
			if (p_get_chance(10)) {
				p_message(33, 3);
				p_leeren(g_feld);
			}
			g_item_spell = 0;
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 22) {
		if (a_inventory("itemtest", g_feld, g_akt_spieler).f_attri5 == 1) {
			v_brechfaktor = 20;
		}
		if (a_inventory("itemtest", g_feld, g_akt_spieler).f_attri5 == 2) {
			v_brechfaktor = 10;
		}
		if (a_inventory("itemtest", g_feld, g_akt_spieler).f_attri5 == 3) {
			v_brechfaktor = 5;
		}
		v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			a_zauberliste("itemtest", (g_akt_zauber + g_akt_zauber_offset)) = a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_attri1;
			p_laby_screen();
			g_aktion = 1;
			g_item_spell = (3 + (a_inventory("itemtest", g_feld, g_akt_spieler).f_attri5 * 2));
			p_cast_it();
			if (p_get_chance(v_brechfaktor)) {
				p_leeren(g_feld);
				p_message(34, 3);
				p_delay(g_mydelay);
				p_sound(55);
			}
			g_item_spell = 0;
			p_delay(g_mydelay);
			g_abbrechen = 1;
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 24) {
		v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			a_spieler("itemtest", g_akt_spieler).f_staff_pieces[a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_attri1] = 1;
			p_leeren(g_feld);
			p_was_last_piece();
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 241) {
		v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			a_zauberliste("itemtest", (g_akt_zauber + g_akt_zauber_offset)) = (91 + p_random(8));
			g_item_spell = 1;
			p_cast_it();
			g_aktion = 1;
			p_leeren(g_feld);
			g_abbrechen = 1;
			g_item_spell = 0;
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 169) {
		if (a_skills("itemtest", 88, g_akt_spieler).f_gewaehlt == 1) {
			v_text1 = a_message_text("itemtest", 555, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if ((g_benutzen == 1 || g_do_it > 0) && a_skills("itemtest", 88, g_akt_spieler).f_gewaehlt == 1) {
			if (p_radius() < 2) {
				p_message(946, 1);
			} else {
				p_show_automap(2);
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 247 || a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 244) {
		v_text1 = a_message_text("itemtest", 555, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			if (p_radius() < 2) {
				p_message(946, 1);
			} else {
				if (a_inventory("itemtest", g_feld, g_akt_spieler).f_status > 0) {
					a_zauberliste("itemtest", (g_akt_zauber + g_akt_zauber_offset)) = 105;
					g_item_spell = 1;
					g_aktion = 1;
					p_cast_it();
					g_item_spell = 0;
					a_inventory("itemtest", g_feld, g_akt_spieler).f_status = (a_inventory("itemtest", g_feld, g_akt_spieler).f_status - 1);
				} else {
					p_message(262, 3);
				}
			}
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 4) {
		if ((a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_name[2] == "Schwaches Gift" || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_name[2] == "Starkes Gift") && a_skills("itemtest", 118, g_akt_spieler).f_gewaehlt == 1) {
			v_text1 = a_message_text("itemtest", 557, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 549, (g_language + 1));
		}
		if (a_skills("itemtest", 43, g_akt_spieler).f_gewaehlt == 1) {
			v_text2 = a_message_text("itemtest", 728, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			g_aktion = 1;
			if ((a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_name[2] == "Schwaches Gift" || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_name[2] == "Starkes Gift") && a_skills("itemtest", 118, g_akt_spieler).f_gewaehlt == 1) {
				p_vergiften();
			} else {
				p_trinken(a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_attri1);
			}
			p_leeren(g_feld);
		}
		if (g_benutzen == 2) {
			g_aktion = 1;
			p_mischung(g_feld);
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 16) {
		v_text1 = "";
		if (a_skills("itemtest", 44, g_akt_spieler).f_gewaehlt == 1) {
			v_text1 = a_message_text("itemtest", 558, (g_language + 1));
		}
		if (a_skills("itemtest", 98, g_akt_spieler).f_gewaehlt == 1) {
			v_text2 = a_message_text("itemtest", 564, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			if (a_skills("itemtest", 44, g_akt_spieler).f_gewaehlt == 1) {
				v_i = p_backpackspace();
				if (v_i <= 50 || !a_inventory("itemtest", g_feld, g_akt_spieler).f_anzahl) {
					if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_anzahl) {
						v_i = g_feld;
					}
					p_leeren(g_feld);
					v_mag_geg = p_get_chance(999);
					a_inventory("itemtest", v_i, g_akt_spieler).f_name = v_mag_geg;
					a_inventory("itemtest", v_i, g_akt_spieler).f_benutzt = 0;
					a_inventory("itemtest", v_i, g_akt_spieler).f_anzahl = 0;
					a_inventory("itemtest", v_i, g_akt_spieler).f_status = 0;
					a_inventory("itemtest", v_i, g_akt_spieler).f_attri5 = p_get_chance(3);
					g_aktion = 1;
				}
			} else {
				p_message(328, 3);
			}
		}
		if (g_benutzen == 2) {
			g_aktion = 1;
			p_umwandeln(g_feld);
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 17) {
		v_text1 = a_message_text("itemtest", 529, (g_language + 1));
		v_text2 = "";
		if (a_skills("itemtest", 43, g_akt_spieler).f_gewaehlt == 1) {
			v_text2 = a_message_text("itemtest", 617, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			p_pilz_essen(a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_attri1);
			g_aktion = 1;
			p_leeren(g_feld);
		}
		if (g_benutzen == 2) {
			g_aktion = 1;
			p_alchemie(g_feld);
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 134) {
		v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		v_text2 = "";
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			v_stackplace = 0;
			for (v_i = 1; v_i <= 50; v_i += 1) {
				if (a_inventory("itemtest", v_i, g_akt_spieler).f_name == 39 && a_inventory("itemtest", v_i, g_akt_spieler).f_status == a_item("itemtest", 39).f_attri1) {
					v_stackplace = 1;
					break;
				}
				if (!a_inventory("itemtest", v_i, g_akt_spieler).f_name) {
					v_stackplace = 1;
					break;
				}
			}
			for (v_i = 1; v_i <= 50; v_i += 1) {
				if (a_inventory("itemtest", v_i, g_akt_spieler).f_name == 39 && !a_inventory("itemtest", v_i, g_akt_spieler).f_status) {
					if (!a_inventory("itemtest", v_i, g_akt_spieler).f_anzahl || !a_inventory("itemtest", g_feld, g_akt_spieler).f_anzahl || v_stackplace == 1) {
						p_sound(36);
						p_leeren(g_feld);
						p_leeren(v_i);
						p_in_rucksack(39, 1, 0);
						g_aktion = 1;
					}
				}
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 232) {
		v_text1 = a_message_text("itemtest", 559, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			if (a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, a_spieler("itemtest", g_akt_spieler).f_character_x, a_spieler("itemtest", g_akt_spieler).f_character_y).f_feld == 73) {
				p_sound(25);
				p_message(5, 2);
				if ((a_spieler("itemtest", g_akt_spieler).f_level + 1) > a_spieler("itemtest", g_akt_spieler).f_maxlevel) {
					p_aufsteigen();
				}
				p_neuer_level();
				g_abbrechen = 1;
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 355) {
		v_text1 = a_message_text("itemtest", 560, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(1);
				if (!g_blocked) {
					g_aktion = 1;
					v_testfeld = a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
					if (v_testfeld == 54 || v_testfeld == 53 || v_testfeld == 160 || v_testfeld == 161 || v_testfeld == 162 || v_testfeld == 163) {
						if (!a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_stat1) {
							a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_stat1 = 1;
							v_chance = (10 + p_luck());
							if (a_skills("itemtest", 95, g_akt_spieler).f_gewaehlt == 1) {
								v_chance = (v_chance * 2);
							}
							g_abbrechen = 1;
							if (p_get_chance(106) < v_chance) {
								v_i = p_backpackspace();
								if (v_i <= 50) {
									if (p_get_chance(100) < 95) {
										p_in_rucksack(356, 1, 0);
									} else {
										a_inventory("itemtest", v_i, g_akt_spieler).f_name = 26;
										a_inventory("itemtest", v_i, g_akt_spieler).f_status = (3 - p_get_chance(3));
									}
									p_message(496, 1);
								}
							} else {
								p_message(495, 1);
							}
						} else {
							p_message(494, 1);
						}
					} else {
						p_message(497, 3);
					}
				}
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 186) {
		v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			if (a_spieler("itemtest", g_akt_spieler).f_zauberbuch > 0) {
				v_i = p_backpackspace();
				if (v_i <= 50) {
					a_inventory("itemtest", v_i, g_akt_spieler).f_name = 38;
					a_inventory("itemtest", v_i, g_akt_spieler).f_benutzt = 0;
					a_inventory("itemtest", v_i, g_akt_spieler).f_status = p_get_chance(998);
					a_inventory("itemtest", v_i, g_akt_spieler).f_attri5 = (p_myrand(5) + 3);
					if ((a_learned("itemtest", g_akt_spieler, a_inventory("itemtest", g_feld, g_akt_spieler).f_status) & 512)) {
						a_inventory("itemtest", g_feld, g_akt_spieler).f_attri5 = (a_inventory("itemtest", g_feld, g_akt_spieler).f_attri5 | 256);
					}
					g_aktion = 1;
					a_spieler("itemtest", g_akt_spieler).f_zauberbuch -= 1;
				}
			} else {
				p_message(35, 3);
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 269) {
		v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(1);
				if (!g_blocked) {
					g_abbrechen = 1;
					g_aktion = 1;
					if (a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 80) {
						p_destroy_iceblock((a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y), a_spieler("itemtest", g_akt_spieler).f_level);
					} else {
						if (a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld == 112) {
							p_destroy_boulder((a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y), a_spieler("itemtest", g_akt_spieler).f_level);
							p_message(247, 1);
						}
					}
					if (p_get_chance(10)) {
						p_leeren(g_feld);
						p_message(253, 3);
					}
				} else {
					p_message(233, 3);
				}
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 270) {
		v_text1 = a_message_text("itemtest", 561, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			g_spell_x = 0;
			g_spell_y = 0;
			v_destination = p_select_field(0);
			if (v_destination == 1) {
				g_blocked = 0;
				p_los(1);
				if (!g_blocked) {
					v_testfeld = a_labyrinth("itemtest", a_spieler("itemtest", g_akt_spieler).f_level, (a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
					if (v_testfeld == 93 || v_testfeld == 69) {
						p_dig_treasure((a_spieler("itemtest", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("itemtest", g_akt_spieler).f_character_y + g_spell_y), a_spieler("itemtest", g_akt_spieler).f_level);
						if (!a_skills("itemtest", 79, g_akt_spieler).f_gewaehlt) {
							if (p_get_chance(10)) {
								p_leeren(g_feld);
								p_message(252, 3);
							}
						}
						g_aktion = 1;
						g_abbrechen = 1;
					}
				} else {
					p_message(233, 3);
				}
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 212 || a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 165 || a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 289) {
		v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 212) {
				a_zauberliste("itemtest", (g_akt_zauber + g_akt_zauber_offset)) = 27;
			}
			if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 165) {
				a_zauberliste("itemtest", (g_akt_zauber + g_akt_zauber_offset)) = 81;
			}
			if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 289) {
				a_zauberliste("itemtest", (g_akt_zauber + g_akt_zauber_offset)) = 55;
			}
			g_item_spell = 1;
			p_cast_it();
			if (p_get_chance(a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_attri1)) {
				p_sound(30);
				if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 212) {
					p_message(175, 3);
				} else {
					if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 165) {
						p_message(950, 3);
					} else {
						if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 289) {
							p_message(254, 3);
						}
					}
				}
				p_leeren(g_feld);
			}
			g_abbrechen = 1;
			g_aktion = 1;
			g_item_spell = 0;
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 18) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			v_text1 = a_message_text("itemtest", 532, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 533, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			p_unorequip(g_feld);
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 20) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			v_text1 = a_message_text("itemtest", 532, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 533, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			p_unorequip(g_feld);
		}
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 21) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			v_text1 = a_message_text("itemtest", 532, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 533, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			p_unorequip(g_feld);
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 146) {
		v_text1 = "";
		v_text2 = "";
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
	}
	if (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 19) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			v_text1 = a_message_text("itemtest", 532, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 533, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			p_unorequip(g_feld);
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 248) {
		v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if ((g_benutzen == 1 || g_do_it > 0) && p_backpackspace() <= 50) {
			if (a_spieler("itemtest", g_akt_spieler).f_kessel > 0) {
				p_in_rucksack(p_get_chance(997), 1, 0);
				a_spieler("itemtest", g_akt_spieler).f_kessel -= 1;
			} else {
				p_message(35, 3);
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 249) {
		v_text1 = a_message_text("itemtest", 624, (1 + g_language));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			switch (a_inventory("itemtest", g_feld, g_akt_spieler).f_status) {
			case 1:
				a_spieler("itemtest", g_akt_spieler).f_goblinlehre = (a_spieler("itemtest", g_akt_spieler).f_goblinlehre + 1);
				break;
			case 2:
				a_spieler("itemtest", g_akt_spieler).f_spinnenlehre = (a_spieler("itemtest", g_akt_spieler).f_spinnenlehre + 1);
				break;
			case 3:
				a_spieler("itemtest", g_akt_spieler).f_untotenlehre = (a_spieler("itemtest", g_akt_spieler).f_untotenlehre + 1);
				break;
			case 4:
				a_spieler("itemtest", g_akt_spieler).f_tierkunde = (a_spieler("itemtest", g_akt_spieler).f_tierkunde + 1);
				break;
			case 5:
				a_spieler("itemtest", g_akt_spieler).f_fallenlehre = (a_spieler("itemtest", g_akt_spieler).f_fallenlehre + 1);
				break;
			case 6:
				a_spieler("itemtest", g_akt_spieler).f_giftlehre = (a_spieler("itemtest", g_akt_spieler).f_giftlehre + 1);
				break;
			case 7:
				a_spieler("itemtest", g_akt_spieler).f_pflanzenlehre = (a_spieler("itemtest", g_akt_spieler).f_pflanzenlehre + 1);
				break;
			}
			p_message(625, 2);
			p_leeren(g_feld);
			g_aktion = 1;
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 159) {
		v_text1 = a_message_text("itemtest", 634, (g_language + 1));
		v_text2 = a_message_text("itemtest", 635, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			if (a_inventory("itemtest", g_feld, g_akt_spieler).f_status > 0) {
				a_zauberliste("itemtest", (g_akt_zauber + g_akt_zauber_offset)) = 138;
				g_item_spell = 1;
				p_cast_it();
				g_item_spell = 0;
				a_inventory("itemtest", g_feld, g_akt_spieler).f_status = (a_inventory("itemtest", g_feld, g_akt_spieler).f_status - 1);
			} else {
				p_message(262, 3);
			}
		}
		if (g_benutzen == 2 || v_do_it2 > 0) {
			a_zauberliste("itemtest", (g_akt_zauber + g_akt_zauber_offset)) = 139;
			g_item_spell = 1;
			p_laby_screen();
			g_aktion = 1;
			p_cast_it();
			g_item_spell = 0;
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 400) {
		if (!a_inventory("itemtest", g_feld, g_akt_spieler).f_benutzt) {
			v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		} else {
			v_text1 = a_message_text("itemtest", 541, (g_language + 1));
		}
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			p_unorequip(g_feld);
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 399) {
		v_text1 = a_message_text("itemtest", 866, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			if (a_inventory("itemtest", g_feld, g_akt_spieler).f_status > 0) {
				for (v_i = 1; v_i <= 8; v_i += 1) {
					p_laby_screen2();
					p_clipsprite(37, ((v_i * 31) - 31), 383, 31, 31);
					p_displaytransparentsprite(37, 160, 160);
					p_flipbuffers(1);
					p_delay(90);
				}
				a_inventory("itemtest", g_feld, g_akt_spieler).f_status = (a_inventory("itemtest", g_feld, g_akt_spieler).f_status - 1);
				a_spieler("itemtest", g_akt_spieler).f_character_x = a_spieler("itemtest", g_akt_spieler).f_old_pos_x;
				a_spieler("itemtest", g_akt_spieler).f_character_y = a_spieler("itemtest", g_akt_spieler).f_old_pos_y;
				a_spieler("itemtest", g_akt_spieler).f_level = a_spieler("itemtest", g_akt_spieler).f_old_level;
				a_spieler("itemtest", g_akt_spieler).f_lifepoints = a_spieler("itemtest", g_akt_spieler).f_old_lp;
				a_spieler("itemtest", g_akt_spieler).f_maxlifepoints = a_spieler("itemtest", g_akt_spieler).f_old_max_lp;
				a_spieler("itemtest", g_akt_spieler).f_mana = a_spieler("itemtest", g_akt_spieler).f_old_mp;
				a_spieler("itemtest", g_akt_spieler).f_maxmana = a_spieler("itemtest", g_akt_spieler).f_old_max_mp;
				for (v_i = 1; v_i <= 8; v_i += 1) {
					p_laby_screen2();
					p_clipsprite(37, ((v_i * 31) - 31), 383, 31, 31);
					p_displaytransparentsprite(37, 160, 160);
					p_flipbuffers(1);
					p_delay(90);
				}
			} else {
				p_message(262, 3);
			}
		}
	}
	if (a_inventory("itemtest", g_feld, g_akt_spieler).f_name == 401) {
		v_text1 = a_message_text("itemtest", 551, (g_language + 1));
		g_benutzen = 0;
		p_itemmenue(v_text1, v_text2, v_text3);
		if (g_benutzen == 1 || g_do_it > 0) {
			if (a_inventory("itemtest", g_feld, g_akt_spieler).f_status > 0) {
				p_duplizieren();
				a_inventory("itemtest", g_feld, g_akt_spieler).f_status = (a_inventory("itemtest", g_feld, g_akt_spieler).f_status - 1);
			} else {
				p_message(262, 3);
			}
		}
	}
	if (a_skills("itemtest", 98, g_akt_spieler).f_gewaehlt == 1 && (a_inventory("itemtest", g_feld, g_akt_spieler).f_status == 1 || a_inventory("itemtest", g_feld, g_akt_spieler).f_status == 2) && (a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 1 || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 6 || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 7 || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 8 || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 9 || a_item("itemtest", a_inventory("itemtest", g_feld, g_akt_spieler).f_name).f_type == 11) && g_benutzen == 3) {
		p_reparieren(g_feld);
		g_aktion = 1;
	}
	if (g_benutzen == 4) {
		p_ablegen();
	}
}

static intptr_t p_kampf() {
	struct st_monster_pointer v_act_monster;
	intptr_t v_akt_item = 0;
	intptr_t v_aktwaffe = 0;
	int16_t v_aktwaffe2 = 0;
	int16_t v_angriff = 0;
	int16_t v_art = 0;
	int16_t v_bg = 0;
	int16_t v_brechfaktor = 0;
	int16_t v_critical = 0;
	intptr_t v_critical_chance = 0;
	intptr_t v_i = 0;
	int16_t v_inhalt_x = 0;
	int16_t v_inhalt_y = 0;
	int16_t v_item = 0;
	int16_t v_maxi = 0;
	int16_t v_mini = 0;
	int16_t v_mon_no = 0;
	intptr_t v_regeneration = 0;
	int16_t v_schaden = 0;
	int16_t v_tile = 0;
	int16_t v_treffer = 0;
	intptr_t v_wohin = 0;
	intptr_t v_xx = 0;
	intptr_t v_yy = 0;
	v_mon_no = p_getmonster((a_spieler("kampf", g_akt_spieler).f_character_x + g_xmod), (a_spieler("kampf", g_akt_spieler).f_character_y + g_ymod), -1);
	v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
	if (a_skills("kampf", 139, g_akt_spieler).f_gewaehlt == 1) {
		p_message(708, 3);
	} else {
		if (p_has_trait2(v_mon_no, 17) > 0 && !p_ich_trage4() && !a_skills("kampf", 16, g_akt_spieler).f_gewaehlt) {
			p_message(736, 3);
		} else {
			v_tile = a_labyrinth("kampf", a_spieler("kampf", g_akt_spieler).f_level, a_spieler("kampf", g_akt_spieler).f_character_x, a_spieler("kampf", g_akt_spieler).f_character_y).f_feld;
			if (a_fields("kampf", v_tile).f_attri_floor) {
				v_bg = a_labyrinth("kampf", a_spieler("kampf", g_akt_spieler).f_level, a_spieler("kampf", g_akt_spieler).f_character_x, a_spieler("kampf", g_akt_spieler).f_character_y).f_stat2;
			} else {
				v_bg = 0;
			}
			p_draw_tile(v_tile, 7, 7, 0, 0, v_bg);
			if (p_getmonster(a_spieler("kampf", g_akt_spieler).f_character_x, a_spieler("kampf", g_akt_spieler).f_character_y, -1)) {
				p_draw_monster(7, 7, 0, 0);
			}
			p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
			v_item = a_laby_item("kampf", a_spieler("kampf", g_akt_spieler).f_character_x, a_spieler("kampf", g_akt_spieler).f_character_y).f_name[a_spieler("kampf", g_akt_spieler).f_level];
			if (v_item > 0) {
				p_draw_item(v_item, 7, 7, 0, 0);
			}
			p_draw_character(a_spieler("kampf", g_akt_spieler).f_face, 1, -3);
			v_inhalt_x = a_inhalt("kampf", a_spieler("kampf", g_akt_spieler).f_level);
			v_inhalt_y = 0;
			if (v_inhalt_x > 10) {
				do {
					v_inhalt_y = (v_inhalt_y + 1);
					v_inhalt_x = (v_inhalt_x - 10);
				} while (!(v_inhalt_x < 11));
			}
			if (v_inhalt_x == 10) {
				v_inhalt_x = 0;
				v_inhalt_y = (v_inhalt_y + 1);
			}
			g_sprite_x = (a_monster("kampf", v_mon_no).f_nr - 1);
			g_sprite_y = (g_sprite_x / 10);
			g_sprite_x = (g_sprite_x % 10);
			if (p_has_trait2(v_mon_no, 36) > 0 && p_habich(87) > 0) {
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 3;
			}
			if (p_has_trait2(v_mon_no, 37) > 0 && p_habich(86) > 0) {
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 3;
			}
			if (p_has_trait2(v_mon_no, 38) > 0 && p_habich(89) > 0) {
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 3;
			}
			v_angriff = p_spieler_angriffswert();
			v_angriff = (v_angriff - (a_monster("kampf", v_mon_no).f_abwehr * 10));
			if (v_angriff > 90) {
				v_angriff = 90;
			}
			if (v_angriff < 10) {
				v_angriff = 10;
			}
			v_mini = p_schaden_min();
			v_maxi = p_schaden_max();
			if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 3) {
				if (a_monster("kampf", v_mon_no).f_art == 1 && a_skills("kampf", 13, g_akt_spieler).f_gewaehlt == 1) {
					v_angriff = (v_angriff + 3);
					v_mini = (v_mini + 3);
					v_maxi = (v_maxi + 3);
				}
				if (a_monster("kampf", v_mon_no).f_art == 2 && a_skills("kampf", 15, g_akt_spieler).f_gewaehlt == 1) {
					v_angriff = (v_angriff + 3);
					v_mini = (v_mini + 3);
					v_maxi = (v_maxi + 3);
				}
				if (p_has_trait2(v_mon_no, 34) && a_skills("kampf", 14, g_akt_spieler).f_gewaehlt == 1) {
					v_angriff = (v_angriff + 3);
					v_mini = (v_mini + 3);
					v_maxi = (v_maxi + 3);
				}
				if (a_monster("kampf", v_mon_no).f_art == 10 && a_skills("kampf", 16, g_akt_spieler).f_gewaehlt == 1) {
					v_angriff = (v_angriff + 5);
					v_mini = (v_mini + 5);
					v_maxi = (v_maxi + 5);
				}
				if (p_has_trait2(v_mon_no, 33) == 1) {
					v_angriff = (v_angriff + (a_spieler("kampf", g_akt_spieler).f_goblinlehre * 2));
					v_mini = (v_mini + (a_spieler("kampf", g_akt_spieler).f_goblinlehre * 2));
					v_maxi = (v_maxi + (a_spieler("kampf", g_akt_spieler).f_goblinlehre * 2));
				}
				if (p_has_trait2(v_mon_no, 32) == 1) {
					v_angriff = (v_angriff + (a_spieler("kampf", g_akt_spieler).f_spinnenlehre * 2));
					v_mini = (v_mini + (a_spieler("kampf", g_akt_spieler).f_spinnenlehre * 2));
					v_maxi = (v_maxi + (a_spieler("kampf", g_akt_spieler).f_spinnenlehre * 2));
				}
				if (p_has_trait2(v_mon_no, 34) == 1) {
					v_angriff = (v_angriff + (a_spieler("kampf", g_akt_spieler).f_untotenlehre * 2));
					v_mini = (v_mini + (a_spieler("kampf", g_akt_spieler).f_untotenlehre * 2));
					v_maxi = (v_maxi + (a_spieler("kampf", g_akt_spieler).f_untotenlehre * 2));
				}
				if (a_monster("kampf", v_mon_no).f_art == 1) {
					v_angriff = (v_angriff + (a_spieler("kampf", g_akt_spieler).f_tierkunde * 2));
					v_mini = (v_mini + (a_spieler("kampf", g_akt_spieler).f_tierkunde * 2));
					v_maxi = (v_maxi + (a_spieler("kampf", g_akt_spieler).f_tierkunde * 2));
				}
				if ((a_monster("kampf", v_mon_no).f_art == 8 || v_mon_no == 65) && p_ich_trage2(164)) {
					v_angriff = (v_angriff + 7);
					v_mini = (v_mini + 7);
					v_maxi = (v_maxi + 7);
				}
				if (a_monster("kampf", v_mon_no).f_art == 7 && p_ich_trage2(162)) {
					v_angriff = (v_angriff + 7);
					v_mini = (v_mini + 7);
					v_maxi = (v_maxi + 7);
				}
				if (p_has_trait2(v_mon_no, 35) > 0 && p_habich(89) > 0) {
					v_angriff = (v_angriff + 3);
					v_mini = (v_mini + 3);
					v_maxi = (v_maxi + 3);
				}
				v_critical_chance = p_schaden_critical();
				v_critical = 0;
				v_treffer = p_get_chance(103);
				if (v_treffer < v_angriff || (a_spieler("kampf", g_akt_spieler).f_style == 5 && v_treffer < (100 - ((100 - v_angriff) / 2)))) {
					p_clipsprite(38, 0, 224, 32, 32);
					p_displaytransparentsprite(38, (160 + (g_xmod * 32)), (160 + (g_ymod * 32)));
					p_sound(p_random(12));
					for (v_i = 1; v_i <= 30; v_i += 1) {
						if (a_aktive("kampf", v_i, g_akt_spieler).f_nr == 110) {
							a_aktive("kampf", v_i, g_akt_spieler).f_nr = 0;
							a_aktive("kampf", v_i, g_akt_spieler).f_staerke = 0;
							a_aktive("kampf", v_i, g_akt_spieler).f_dauer = 0;
						}
					}
					v_schaden = (v_mini + p_myrand((v_maxi - v_mini)));
					if (a_spieler("kampf", g_akt_spieler).f_style != 3) {
						v_schaden = (v_schaden - p_myrand2(a_monster("kampf", v_mon_no).f_ruestung));
					}
					if (a_spieler("kampf", g_akt_spieler).f_style == 5 || a_spieler("kampf", g_akt_spieler).f_style == 6) {
						v_schaden = ((v_schaden * 3) / 4);
					}
					if (a_spieler("kampf", g_akt_spieler).f_style == 8 && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 1) {
						v_schaden = (v_schaden * 2);
					}
					if (v_schaden < 1) {
						v_schaden = 0;
					}
					if (p_get_chance(104) < v_critical_chance && v_schaden > 0) {
						p_clipsprite(38, 96, 224, 32, 32);
						p_displaytransparentsprite(38, (160 + (g_xmod * 32)), (160 + (g_ymod * 32)));
						v_critical = 1;
					}
					if (!v_critical) {
						v_wohin = p_screenoutput();
						p_startdrawing(v_wohin);
						p_drawingmode(1);
						v_xx = (175 + (g_xmod * 32));
						v_yy = (168 + (g_ymod * 32));
						p_drawtext((v_xx - (p_textwidth(p_str(v_schaden)) / 2)), v_yy, p_str(v_schaden), 16777215, 0);
						p_stopdrawing();
					}
					p_flipbuffers(1);
					p_delay(g_mydelay);
					v_i = 1;
					do {
						if (a_item("kampf", a_inventory("kampf", v_i, g_akt_spieler).f_name).f_type == 1 && a_inventory("kampf", v_i, g_akt_spieler).f_benutzt == 1) {
							v_aktwaffe = v_i;
						}
						v_i = (v_i + 1);
					} while (!(v_aktwaffe > 0 || v_i > 50));
					v_aktwaffe2 = 0;
					for (v_i = (v_aktwaffe + 1); v_i <= 50; v_i += 1) {
						if (a_item("kampf", a_inventory("kampf", v_i, g_akt_spieler).f_name).f_type == 1 && a_inventory("kampf", v_i, g_akt_spieler).f_benutzt == 1) {
							v_aktwaffe2 = v_i;
						}
					}
					v_brechfaktor = 5;
					if (p_has_trait2(v_mon_no, 39) == 1) {
						v_brechfaktor = 25;
					}
					if (a_spieler("kampf", g_akt_spieler).f_fluch == 25) {
						v_brechfaktor = (v_brechfaktor * 2);
					}
					if (p_get_chance(996) < v_brechfaktor) {
						if (v_aktwaffe > 0) {
							if (a_inventory("kampf", v_aktwaffe, g_akt_spieler).f_status == 1) {
								a_inventory("kampf", v_aktwaffe, g_akt_spieler).f_status = 2;
								p_un_equip(v_aktwaffe);
								p_message(449, 3);
							}
							if (!a_inventory("kampf", v_aktwaffe, g_akt_spieler).f_status) {
								a_inventory("kampf", v_aktwaffe, g_akt_spieler).f_status = 1;
								p_message(448, 3);
							}
						}
					}
					if (p_get_chance(996) < v_brechfaktor) {
						if (v_aktwaffe2 > 0) {
							if (a_inventory("kampf", v_aktwaffe2, g_akt_spieler).f_status == 1) {
								a_inventory("kampf", v_aktwaffe2, g_akt_spieler).f_status = 2;
								p_un_equip(v_aktwaffe);
								p_message(449, 3);
							}
							if (!a_inventory("kampf", v_aktwaffe2, g_akt_spieler).f_status) {
								a_inventory("kampf", v_aktwaffe2, g_akt_spieler).f_status = 1;
								p_message(448, 3);
							}
						}
					}
					v_akt_item = a_inventory("kampf", v_aktwaffe, g_akt_spieler).f_name;
					if (a_inventory("kampf", v_aktwaffe, g_akt_spieler).f_status == 4 || v_akt_item == 144 || v_akt_item == 381 || v_akt_item == 382 || v_akt_item == 238) {
						v_art = a_monster("kampf", v_mon_no).f_art;
						if (!p_has_trait2(v_mon_no, 3) && v_art != 3 && v_art != 9 && v_art != 10) {
							if (a_inventory("kampf", v_aktwaffe, g_akt_spieler).f_status == 4) {
								a_inventory("kampf", v_aktwaffe, g_akt_spieler).f_status = 0;
							}
							LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 4;
							LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration = (p_myrand(20) + 5);
						} else {
							p_message(456, 4);
						}
					}
					LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp - v_schaden);
					if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp < 1 || v_critical == 1) {
						p_zerstoert(3, 0);
						p_cleanup_monsters();
					} else {
						if (!LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status) {
							LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 1;
						}
						if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 2) {
							LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 0;
						}
						if (p_has_trait2(v_mon_no, 30) > 0) {
							p_clipsprite(1, 64, 224, 32, 32);
							p_displaysprite(1, (160 + (g_xmod * 32)), (160 + (g_ymod * 32)));
						} else {
							p_clipsprite(1, (v_inhalt_x * 32), (v_inhalt_y * 32), 32, 32);
							p_displaysprite(1, (160 + (g_xmod * 32)), (160 + (g_ymod * 32)));
						}
						p_clipsprite(9, (g_sprite_x * 32), (g_sprite_y * 32), 32, 32);
						p_displaytransparentsprite(9, (160 + (g_xmod * 32)), (160 + (g_ymod * 32)));
						p_laby_screen2();
						if (v_regeneration == 1) {
							p_laby_screen();
						}
					}
				} else {
					p_sound(24);
					p_message(286, 3);
				}
			}
		}
	}
}

static intptr_t p_laby_screen() {
	p_screen2();
	p_flipbuffers(1);
}

static intptr_t p_laby_screen2() {
	p_screen2();
}

static intptr_t p_merchant(int16_t v_merch_pos) {
	int16_t v_a = 0;
	int16_t v_b = 0;
	int16_t v_but_x = 0;
	int16_t v_but_y = 0;
	int16_t v_buy = 0;
	int16_t v_c = 0;
	int16_t v_d = 0;
	int16_t v_doubleclick = 0;
	int16_t v_face_x = 0;
	int16_t v_face_y = 0;
	std::string v_gegname;
	intptr_t v_i = 0;
	intptr_t v_ii = 0;
	intptr_t v_j = 0;
	intptr_t v_jb1 = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	int16_t v_obj_buy = 0;
	int16_t v_obj_sell = 0;
	int16_t v_oldmouse_x = 0;
	int16_t v_oldmouse_y = 0;
	int16_t v_pos = 0;
	int16_t v_price_buy = 0;
	int16_t v_price_sell = 0;
	intptr_t v_raus = 0;
	intptr_t v_result = 0;
	int16_t v_sel_x = 0;
	int16_t v_sel_y = 0;
	int16_t v_sell = 0;
	int16_t v_sprite_x = 0;
	int16_t v_sprite_y = 0;
	int16_t v_sr = 0;
	std::string v_text1;
	std::string v_text2;
	std::string v_text3;
	std::string v_tmptxt;
	int16_t v_type = 0;
	int16_t v_wait_release1 = 0;
	int16_t v_wait_release2 = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	v_sel_x = 1;
	v_sel_y = 1;
	v_wait_release1 = 0;
	v_wait_release2 = 0;
	v_doubleclick = 0;
	v_buy = -1;
	v_sell = 0;
	v_price_sell = 0;
	v_price_buy = 0;
	v_obj_sell = 0;
	v_obj_buy = 0;
	p_selectelement(ll_merchants, v_merch_pos);
	v_result = p_examinemouse();
	v_oldmouse_x = p_mousex();
	v_oldmouse_y = p_mousey();
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(-1);
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		v_tmptxt = a_message_text("merchant", 66, (1 + g_language)) + " (" + a_spieler("merchant", g_akt_spieler).f_name + ")";
		p_drawtext(((640 - p_textwidth(v_tmptxt)) / 2), 25, v_tmptxt, -1, 0);
		p_stopdrawing();
		p_read_joystick();
		p_examinekeyboard();
		if (v_wait_release2 == 1) {
			if (p_keyboardpushed(275) || g_jax == 1) {
				p_keydelay(1);
				v_wait_release2 = 0;
				v_sel_x = (v_sel_x + 1);
				if (v_sel_x > 16) {
					v_sel_x = 16;
				}
				if (v_sel_y > 5 && v_sel_x > 13) {
					v_sel_x = 13;
				}
			} else {
				if (p_keyboardpushed(276) || g_jax == -1) {
					p_keydelay(1);
					v_wait_release2 = 0;
					v_sel_x = (v_sel_x - 1);
					if (v_sel_x < 1) {
						v_sel_x = 1;
					}
				} else {
					if (p_keyboardpushed(274) || g_jay == 1) {
						p_keydelay(1);
						v_wait_release2 = 0;
						v_sel_y = (v_sel_y + 1);
						if (v_sel_y > 7) {
							v_sel_y = 7;
						}
						if (v_sel_y > 5 && v_sel_x > 13) {
							v_sel_x = 13;
						}
					} else {
						if (p_keyboardpushed(273) || g_jay == -1) {
							p_keydelay(1);
							v_wait_release2 = 0;
							v_sel_y = (v_sel_y - 1);
							if (v_sel_y < 1) {
								v_sel_y = 1;
							}
						}
					}
				}
			}
		} else {
			if (p_keydelay(0) || !(g_jax || g_jay || p_keyboardpushed(273) || p_keyboardpushed(274) || p_keyboardpushed(276) || p_keyboardpushed(275))) {
				v_wait_release2 = 1;
			}
		}
		if (!(p_keyboardpushed(13) || v_jb1 || p_keyboardpushed(32) || g_mmouse_links)) {
			v_wait_release1 = 1;
		}
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		g_mmouse_links = p_mousebutton(1);
		v_mmouse_rechts = p_mousebutton(2);
		v_doubleclick = p_doubleclick();
		v_buy = -1;
		v_sell = 0;
		v_price_sell = 0;
		v_price_buy = 0;
		v_obj_sell = 0;
		v_obj_buy = 0;
		v_x = 25;
		v_y = 80;
		v_face_x = ((LIST_CURRENT(ll_merchants,struct st_merch_items).f_face % 10) * 32);
		v_face_y = ((LIST_CURRENT(ll_merchants,struct st_merch_items).f_face / 10) * 32);
		p_clipsprite(1, v_face_x, v_face_y, 32, 32);
		p_displaytransparentsprite(1, ((v_x + 96) + 16), (v_y - 35));
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 7; v_j += 1) {
				v_pos = ((v_i - 1) + (8 * (v_j - 1)));
				if (v_sel_x == v_i && v_sel_y == v_j) {
					p_clipsprite(1, 0, 32, 32, 32);
					p_displaytransparentsprite(1, (v_x + ((v_i * 32) - 32)), (v_y + ((v_j * 32) - 32)));
					v_obj_buy = LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_pos].f_id;
					v_buy = v_pos;
					if ((p_keyboardpushed(13) || v_jb1 || p_keyboardpushed(32)) && v_wait_release1) {
						v_sell = -2;
						v_wait_release1 = 0;
					}
				} else {
					p_clipsprite(8, 480, 64, 32, 32);
					p_displaytransparentsprite(8, (v_x + ((v_i * 32) - 32)), (v_y + ((v_j * 32) - 32)));
				}
				v_a = (v_x + ((v_i * 32) - 32));
				v_b = (v_x + (v_i * 32));
				v_c = (v_y + ((v_j * 32) - 32));
				v_d = (v_y + (v_j * 32));
				if (v_mmouse_x > v_a && v_mmouse_x < v_b && v_mmouse_y > v_c && v_mmouse_y < v_d) {
					p_clipsprite(8, 224, 320, 32, 32);
					p_displaytransparentsprite(8, (v_x + ((v_i * 32) - 32)), (v_y + ((v_j * 32) - 32)));
					if (g_mmouse_links == 1) {
						v_sel_x = v_i;
						v_sel_y = v_j;
						v_buy = v_pos;
					}
					if (v_doubleclick) {
						v_sell = -2;
					}
				}
				if (LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_pos].f_id) {
					v_sprite_x = (LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_pos].f_id - 1);
					v_sprite_y = (v_sprite_x / 16);
					v_sprite_x = (v_sprite_x % 16);
					p_clipsprite(8, (v_sprite_x * 32), (v_sprite_y * 32), 32, 32);
					p_displaytransparentsprite(8, (v_x + ((v_i * 32) - 32)), (v_y + ((v_j * 32) - 32)));
				}
			}
		}
		if (v_obj_buy > 0) {
			v_price_buy = a_item("merchant", v_obj_buy).f_einkauf;
			a_inventory("merchant", 0, g_akt_spieler).f_name = v_obj_buy;
			a_inventory("merchant", 0, g_akt_spieler).f_benutzt = 0;
			if (v_obj_buy == 38) {
				v_price_buy = 35;
				a_inventory("merchant", 0, g_akt_spieler).f_status = LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_buy].f_spell;
				a_inventory("merchant", 0, g_akt_spieler).f_attri5 = (LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_buy].f_power | 256);
			} else {
				if (a_item("merchant", v_obj_buy).f_qualitaet == 2) {
					a_inventory("merchant", 0, g_akt_spieler).f_status = a_item("merchant", v_obj_buy).f_attri1;
				} else {
					a_inventory("merchant", 0, g_akt_spieler).f_status = 0;
				}
				if (a_item("merchant", v_obj_buy).f_qualitaet == 1) {
					v_price_buy = (v_price_buy * LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_buy].f_power);
					a_inventory("merchant", 0, g_akt_spieler).f_attri5 = LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_buy].f_power;
				}
				if (a_item("merchant", v_obj_buy).f_type == 4) {
					a_inventory("merchant", 0, g_akt_spieler).f_status = 1;
				} else {
					if (a_item("merchant", v_obj_buy).f_type == 17) {
						a_inventory("merchant", 0, g_akt_spieler).f_status = 1;
					}
				}
			}
			p_describe(0, 25, (v_y + 230), 25, 375);
			a_inventory("merchant", 0, g_akt_spieler).f_name = 0;
			if (a_skills("merchant", 116, g_akt_spieler).f_gewaehlt == 1) {
				v_price_buy = ((v_price_buy * 3) / 4);
				if (v_price_buy < 1) {
					v_price_buy = 1;
				}
			}
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 1));
			p_drawtext(25, (v_y + 275), p_str(v_price_buy) + " " + a_message_text("merchant", 8, (1 + g_language)), -1, 0);
			p_stopdrawing();
		}
		v_but_x = 310;
		v_but_y = v_y;
		if (v_mmouse_x >= v_but_x && v_mmouse_x <= (v_but_x + 32) && v_mmouse_y >= v_but_y && v_mmouse_y <= (v_but_y + 32)) {
			p_clipsprite(6, 64, 0, 31, 31);
			if (g_mmouse_links == 1 && v_wait_release1) {
				v_sell = -2;
				v_wait_release1 = 0;
			}
		} else {
			p_clipsprite(6, 0, 0, 31, 31);
		}
		p_displaytransparentsprite(6, v_but_x, v_but_y);
		v_x = 365;
		v_y = 80;
		p_clipsprite(0, 128, ((a_spieler("merchant", g_akt_spieler).f_maennchen * 32) - 32), 32, 32);
		p_displaytransparentsprite(0, ((v_x + 96) + 16), (v_y - 35));
		for (v_ii = 1; v_ii <= 50; v_ii += 1) {
			v_i = (((v_ii - 1) % 8) + 1);
			v_j = (((v_ii - 1) / 8) + 1);
			if (v_ii > 45) {
				v_i = (v_ii - 45);
				v_j = 7;
			}
			if (a_inventory("merchant", v_ii, g_akt_spieler).f_benutzt == 1) {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_drawingmode(1);
				p_frontcolor(p_rgb(120, 120, 120));
				p_box((v_x + ((v_i * 32) - 31)), (v_y + ((v_j * 32) - 31)), 30, 29, -1);
				p_stopdrawing();
			}
			if (v_sel_x == (v_i + 8) && v_sel_y == v_j) {
				p_clipsprite(1, 0, 32, 32, 32);
				p_displaytransparentsprite(1, (v_x + ((v_i * 32) - 32)), (v_y + ((v_j * 32) - 32)));
				v_obj_sell = a_inventory("merchant", v_ii, g_akt_spieler).f_name;
				v_sell = v_ii;
				if ((p_keyboardpushed(13) || v_jb1 || p_keyboardpushed(32)) && v_wait_release1) {
					v_buy = -2;
					v_wait_release1 = 0;
				}
			} else {
				p_clipsprite(8, 480, 64, 32, 32);
				p_displaytransparentsprite(8, (v_x + ((v_i * 32) - 32)), (v_y + ((v_j * 32) - 32)));
			}
			v_a = (v_x + ((v_i * 32) - 32));
			v_b = (v_x + (v_i * 32));
			v_c = (v_y + ((v_j * 32) - 32));
			v_d = (v_y + (v_j * 32));
			if (v_mmouse_x > v_a && v_mmouse_x < v_b && v_mmouse_y > v_c && v_mmouse_y < v_d) {
				p_clipsprite(8, 224, 320, 32, 32);
				p_displaytransparentsprite(8, (v_x + ((v_i * 32) - 32)), (v_y + ((v_j * 32) - 32)));
				if (g_mmouse_links == 1) {
					v_sel_x = (v_i + 8);
					v_sel_y = v_j;
				}
				if (v_doubleclick) {
					v_buy = -2;
					v_sell = v_ii;
					v_obj_sell = a_inventory("merchant", v_ii, g_akt_spieler).f_name;
				}
			}
			if (a_inventory("merchant", v_ii, g_akt_spieler).f_name) {
				v_sprite_x = (a_inventory("merchant", v_ii, g_akt_spieler).f_name - 1);
				v_sprite_y = (v_sprite_x / 16);
				v_sprite_x = (v_sprite_x % 16);
				p_clipsprite(8, (v_sprite_x * 32), (v_sprite_y * 32), 32, 32);
				p_displaytransparentsprite(8, (v_x + ((v_i * 32) - 32)), (v_y + ((v_j * 32) - 32)));
			}
			if (a_inventory("merchant", v_ii, g_akt_spieler).f_anzahl > 0) {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_frontcolor(p_rgb(255, 255, 255));
				p_drawingmode(1);
				p_drawtext((((v_x + (v_i * 32)) - p_textwidth(p_str(((int64_t) a_inventory("merchant", v_ii, g_akt_spieler).f_anzahl + 1)))) - 2), ((v_y + ((v_j * 32) - 32)) + 18), p_str(((int64_t) a_inventory("merchant", v_ii, g_akt_spieler).f_anzahl + 1)), -1, 0);
				p_stopdrawing();
			}
		}
		if (v_obj_sell > 0 && v_obj_sell <= 411) {
			v_type = a_item("merchant", v_obj_sell).f_type;
			v_gegname = "";
			v_sr = 0;
			if (v_obj_sell == 38) {
				v_sr = a_inventory("merchant", v_sell, g_akt_spieler).f_status;
				v_price_sell = 15;
				if ((a_learned("merchant", g_akt_spieler, v_sr) & 512)) {
					v_gegname = a_spells("merchant", v_sr).f_name[(1 + g_language)];
					if ((a_learned("merchant", g_akt_spieler, v_sr) & 384) || p_zauber_nehmen(v_sr)) {
						v_gegname += "+";
					}
					v_gegname += " (" + p_str(a_spells("merchant", v_sr).f_level) + ")";
				} else {
					v_gegname = a_message_text("merchant", 584, (1 + g_language));
				}
				v_sr = 1;
			}
			if (!v_sr) {
				v_price_sell = a_item("merchant", v_obj_sell).f_verkauf;
				if (a_item("merchant", v_obj_sell).f_qualitaet == 1 && a_item("merchant", v_obj_sell).f_type != 22) {
					v_price_sell = (a_item("merchant", v_obj_sell).f_verkauf * a_inventory("merchant", v_sell, g_akt_spieler).f_attri5);
				}
				if (v_obj_sell == 240) {
					switch (a_inventory("merchant", v_sell, g_akt_spieler).f_status) {
					case 0:
						v_price_sell = 50;
						break;
					case 1:
						v_price_sell = 150;
						break;
					case 2:
						v_price_sell = 300;
						break;
					}
				}
				if (v_type == 1 || v_type == 21 || (v_type >= 6 && v_type <= 11)) {
					if (a_inventory("merchant", v_sell, g_akt_spieler).f_status == 1) {
						v_price_sell = (v_price_sell / 2);
					}
					if (a_inventory("merchant", v_sell, g_akt_spieler).f_status == 2) {
						v_price_sell = 0;
					}
				}
				if (a_item("merchant", v_obj_sell).f_type == 22) {
					if (a_inventory("merchant", v_sell, g_akt_spieler).f_attri5 == 2) {
						v_price_sell = (v_price_sell * 1.2);
					}
					if (a_inventory("merchant", v_sell, g_akt_spieler).f_attri5 == 3) {
						v_price_sell = (v_price_sell * 1.5);
					}
				}
				if (v_obj_sell >= 75 && v_obj_sell <= 112) {
					if (!(a_mischen("merchant", (v_obj_sell - 75)).f_learned & p_pm(0)) && !a_inventory("merchant", v_sell, g_akt_spieler).f_status) {
						v_gegname = a_message_text("merchant", 586, (1 + g_language));
						v_price_sell = 15;
					}
				}
				if (v_obj_sell >= 65 && v_obj_sell <= 74) {
					if (!(a_mush_known("merchant", (v_obj_sell - 65)) & p_pm(0))) {
						v_gegname = a_message_text("merchant", 585, (1 + g_language));
						v_price_sell = 0;
					}
				}
				if (v_gegname == "" && v_obj_sell > 0) {
					v_gegname = a_item("merchant", v_obj_sell).f_name[(1 + g_language)];
				}
			}
			p_describe(v_sell, v_x, (v_y + 230), 25, 375);
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb(255, 255, 1));
			p_drawtext(v_x, (v_y + 280), a_message_text("merchant", 587, (1 + g_language)) + p_str(v_price_sell) + a_message_text("merchant", 8, (1 + g_language)), -1, 0);
			p_stopdrawing();
		}
		p_nachricht8(v_x, 400, p_gold_anzahl());
		v_but_x = 310;
		v_but_y = (v_y + 64);
		if (v_mmouse_x >= v_but_x && v_mmouse_x <= (v_but_x + 32) && v_mmouse_y >= v_but_y && v_mmouse_y <= (v_but_y + 32)) {
			p_clipsprite(6, 96, 0, 31, 31);
			if (g_mmouse_links == 1 && v_wait_release1) {
				v_buy = -2;
				v_wait_release1 = 0;
			}
		} else {
			p_clipsprite(6, 32, 0, 31, 31);
		}
		p_displaytransparentsprite(6, v_but_x, v_but_y);
		g_warten = (g_warten + 1);
		if (g_warten > 50) {
			if (v_buy >= 0 && v_sell == -2) {
				v_i = p_backpackspace();
				if (v_i <= 50 && p_gold_anzahl() >= v_price_buy) {
					p_gold_verlieren(v_price_buy);
					p_sound(58);
					p_nachricht7(a_message_text("merchant", 437, (1 + g_language)) + a_item("merchant", v_obj_buy).f_name[(1 + g_language)], 5);
					v_price_buy = 0;
					if (v_obj_buy == 38) {
						a_inventory("merchant", v_i, g_akt_spieler).f_name = 38;
						a_inventory("merchant", v_i, g_akt_spieler).f_benutzt = 0;
						a_inventory("merchant", v_i, g_akt_spieler).f_status = LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_buy].f_spell;
						a_inventory("merchant", v_i, g_akt_spieler).f_attri5 = (LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_buy].f_power | 256);
						a_learned("merchant", g_akt_spieler, a_inventory("merchant", v_i, g_akt_spieler).f_status) = (a_learned("merchant", g_akt_spieler, a_inventory("merchant", v_i, g_akt_spieler).f_status) | 512);
					} else {
						if (a_item("merchant", v_obj_buy).f_qualitaet == 1) {
							a_inventory("merchant", v_i, g_akt_spieler).f_name = v_obj_buy;
							a_inventory("merchant", v_i, g_akt_spieler).f_benutzt = 0;
							a_inventory("merchant", v_i, g_akt_spieler).f_status = 0;
							a_inventory("merchant", v_i, g_akt_spieler).f_attri5 = LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_buy].f_power;
						} else {
							if (a_item("merchant", v_obj_buy).f_type == 4) {
								a_mischen("merchant", (v_obj_buy - 75)).f_learned = (a_mischen("merchant", (v_obj_buy - 75)).f_learned | p_pm(0));
								for (v_i = 1; v_i <= 50; v_i += 1) {
									if (a_inventory("merchant", v_i, g_akt_spieler).f_name == v_obj_buy) {
										a_inventory("merchant", v_i, g_akt_spieler).f_status = 1;
									}
								}
							} else {
								if (a_item("merchant", v_obj_buy).f_type == 17) {
									a_mush_known("merchant", (v_obj_buy - 65)) = (a_mush_known("merchant", (v_obj_buy - 65)) | p_pm(0));
									for (v_i = 1; v_i <= 50; v_i += 1) {
										if (a_inventory("merchant", v_i, g_akt_spieler).f_name == v_obj_buy) {
											a_inventory("merchant", v_i, g_akt_spieler).f_status = 1;
										}
									}
								}
							}
							v_i = p_in_rucksack(v_obj_buy, 1, 0);
						}
					}
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_buy].f_id = 0;
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_buy].f_power = 0;
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_buy].f_spell = 0;
				}
				v_buy = 0;
				v_obj_buy = 0;
			}
			if (v_sell > 0 && v_buy == -2) {
				if (a_inventory("merchant", v_sell, g_akt_spieler).f_name && a_inventory("merchant", v_sell, g_akt_spieler).f_name != 150) {
					p_un_equip(v_sell);
					p_gold_finden2(v_price_sell);
					p_nachricht7(a_message_text("merchant", 438, (1 + g_language)) + v_gegname, 5);
					v_price_sell = 0;
					for (v_i = 0; v_i <= 55; v_i += 1) {
						if (!LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id) {
							LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_id = a_inventory("merchant", v_sell, g_akt_spieler).f_name;
							if (a_inventory("merchant", v_sell, g_akt_spieler).f_name == 38) {
								LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_spell = a_inventory("merchant", v_sell, g_akt_spieler).f_status;
								LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_power = a_inventory("merchant", v_sell, g_akt_spieler).f_attri5;
							} else {
								if (a_item("merchant", a_inventory("merchant", v_sell, g_akt_spieler).f_name).f_qualitaet == 1) {
									LIST_CURRENT(ll_merchants,struct st_merch_items).f_i[v_i].f_power = a_inventory("merchant", v_sell, g_akt_spieler).f_attri5;
								}
							}
							break;
						}
					}
					p_leeren(v_sell);
					v_sell = 0;
					v_obj_sell = 0;
				}
			}
		} else {
			p_delay(1);
			if (g_warten < 1000) {
				g_warten = (g_warten + 1);
			}
		}
		v_but_x = 593;
		v_but_y = 16;
		if (v_mmouse_x >= v_but_x && v_mmouse_x <= (v_but_x + 32) && v_mmouse_y >= v_but_y && v_mmouse_y <= (v_but_y + 32)) {
			p_clipsprite(6, 96, 32, 31, 31);
			if (g_mmouse_links == 1) {
				v_raus = 1;
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, v_but_x, v_but_y);
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		p_delay(g_mydelay3);
	} while (!(v_mmouse_rechts == 1 || p_keyboardpushed(27) || v_raus == 1));
	p_delay(g_mydelay);
}

static intptr_t p_mischung(int16_t v_feld) {
	int16_t v_geg = 0;
	int16_t v_gewa = 0;
	int16_t v_prob = 0;
	intptr_t v_welche = 0;
	v_geg = 0;
	v_welche = p_select_inventory(729);
	v_gewa = 0;
	if (v_feld == v_welche) {
		p_message(731, 1);
	} else {
		if (a_item("mischung", a_inventory("mischung", v_welche, g_akt_spieler).f_name).f_type == 4) {
			v_prob = a_mischen("mischung", (a_inventory("mischung", v_welche, g_akt_spieler).f_name - 75)).f_result;
			g_aktion = 1;
			p_leeren(v_feld);
			p_leeren(v_welche);
			if (v_prob == -1) {
				p_message(732, 1);
				p_spielerschaden(2, 1, 15, 0, 0);
			} else {
				p_in_rucksack(v_prob, 1, 0);
				p_message(733, 1);
			}
		} else {
			p_message(730, 1);
		}
	}
}

static intptr_t p_monster_angriff(int16_t v_x_r, int16_t v_y_r) {
	int16_t v_aktarmor = 0;
	int16_t v_akthandschuhe = 0;
	int16_t v_akthelm = 0;
	int16_t v_aktruestung = 0;
	int16_t v_aktschild = 0;
	int16_t v_aktstiefel = 0;
	int16_t v_angriff = 0;
	int16_t v_ausweichen = 0;
	int16_t v_brechfaktor = 0;
	int16_t v_chance = 0;
	int16_t v_counter = 0;
	int16_t v_egon = 0;
	int8_t v_geg = 0;
	int16_t v_geklaut = 0;
	intptr_t v_habich = 0;
	int16_t v_hugo = 0;
	intptr_t v_i = 0;
	int16_t v_mon_no = 0;
	int16_t v_schaden = 0;
	int16_t v_schaden2 = 0;
	intptr_t v_schaden_save = 0;
	int16_t v_schleichen = 0;
	int16_t v_schutz = 0;
	std::string v_temp_text;
	int16_t v_wasele = 0;
	intptr_t v_wohin = 0;
	intptr_t v_xx = 0;
	intptr_t v_yy = 0;
	intptr_t v_zw_x = 0;
	intptr_t v_zw_y = 0;
	v_mon_no = p_getmonster(v_x_r, v_y_r, -1);
	v_ausweichen = 0;
	if ((a_skills("monster_angriff", 6, g_akt_spieler).f_gewaehlt == 1 || a_spieler("monster_angriff", g_akt_spieler).f_style == 6) && p_get_chance(50)) {
		v_ausweichen = 1;
	}
	v_schleichen = 0;
	if (a_spieler("monster_angriff", g_akt_spieler).f_schleichen > 0 && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 1) {
		if (a_skills("monster_angriff", 73, g_akt_spieler).f_gewaehlt == 1) {
			v_chance = ((p_reflexe() + p_luck()) * 2);
		} else {
			v_chance = (p_reflexe() + p_luck());
		}
		if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 5 || LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 2) {
			v_chance = (v_chance * 2);
		}
		if (v_chance > 90) {
			v_chance = 90;
		}
		if (p_get_chance(100) < v_chance) {
			v_schleichen = 1;
		}
	}
	if (!v_ausweichen && !v_schleichen) {
		v_angriff = 50;
		if (p_has_trait2(v_mon_no, 32) && a_spinnenkoenigin("monster_angriff", a_spieler("monster_angriff", g_akt_spieler).f_level) == 1) {
			v_angriff = (v_angriff + 20);
		}
		if (p_has_trait2(v_mon_no, 33) && a_goblinkoenig("monster_angriff", a_spieler("monster_angriff", g_akt_spieler).f_level) == 1) {
			v_angriff = (v_angriff + 20);
		}
		if (p_has_trait2(v_mon_no, 34) && a_untotenherr("monster_angriff", a_spieler("monster_angriff", g_akt_spieler).f_level) == 1) {
			v_angriff = (v_angriff + 20);
		}
		if (a_spieler("monster_angriff", g_akt_spieler).f_fluch == 22) {
			v_egon = (a_monster("monster_angriff", v_mon_no).f_angriff * 15);
		} else {
			v_egon = (a_monster("monster_angriff", v_mon_no).f_angriff * 10);
		}
		v_angriff = (v_angriff + v_egon);
		if (p_habich(102) > 0) {
			v_angriff = (v_angriff / 2);
		}
		if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 5) {
			v_angriff = (v_angriff / 2);
		}
		v_angriff = (v_angriff - (p_reflexe() * 10));
		if (a_spieler("monster_angriff", g_akt_spieler).f_style == 1 || a_spieler("monster_angriff", g_akt_spieler).f_style == 2) {
			v_angriff = (v_angriff - 20);
		}
		if (v_angriff > 90) {
			v_angriff = 90;
		}
		if (v_angriff < 10) {
			v_angriff = 10;
		}
		if (a_spieler("monster_angriff", g_akt_spieler).f_fluch == 21) {
			v_angriff = 90;
		}
		if (p_get_chance(103) < v_angriff) {
			if (p_has_trait2(v_mon_no, 10) == 1) {
				p_sound(32);
				if (a_skills("monster_angriff", 102, g_akt_spieler).f_gewaehlt == 1 && p_get_chance(50)) {
					p_message(880, 2);
				} else {
					v_geg = 0;
					for (v_i = 1; v_i <= 50; v_i += 1) {
						if (a_inventory("monster_angriff", v_i, g_akt_spieler).f_name && !a_inventory("monster_angriff", v_i, g_akt_spieler).f_benutzt) {
							v_geg = 1;
						}
					}
					if (v_geg == 1) {
						v_geklaut = 0;
						v_counter = 1;
						do {
							v_wasele = (p_random(49) + 1);
							if (a_inventory("monster_angriff", v_wasele, g_akt_spieler).f_name && !a_inventory("monster_angriff", v_wasele, g_akt_spieler).f_benutzt) {
								v_geklaut = 1;
								v_temp_text = a_message_text("monster_angriff", 871, (g_language + 1)) + a_item("monster_angriff", a_inventory("monster_angriff", v_wasele, g_akt_spieler).f_name).f_name[(g_language + 1)];
								p_nachricht7(v_temp_text, 2);
								if (a_item("monster_angriff", a_inventory("monster_angriff", v_wasele, g_akt_spieler).f_name).f_name[(g_language + 1)] == "") {
									p_nachricht7(a_message_text("monster_angriff", 769, (1 + g_language)) + p_str(a_inventory("monster_angriff", v_wasele, g_akt_spieler).f_name), 1);
								}
								p_leeren(v_wasele);
							}
							v_counter = (v_counter + 1);
						} while (!(v_geklaut == 1 || v_counter > 500));
						if (v_counter > 500) {
							p_message(37, 2);
						}
					} else {
						p_message(37, 2);
					}
				}
			} else {
				p_zeige_unsichtbare(v_x_r, v_y_r);
				v_schaden = (p_myrand2(a_monster("monster_angriff", v_mon_no).f_staerke) + 1);
				if (p_habich(124) > 0) {
					p_message(431, 2);
				} else {
					if (p_has_trait2(v_mon_no, 32) && a_spinnenkoenigin("monster_angriff", a_spieler("monster_angriff", g_akt_spieler).f_level) == 1) {
						v_schaden = (v_schaden + 2);
					}
					if (p_has_trait2(v_mon_no, 33) && a_goblinkoenig("monster_angriff", a_spieler("monster_angriff", g_akt_spieler).f_level) == 1) {
						v_schaden = (v_schaden + 2);
					}
					if (p_has_trait2(v_mon_no, 34) && a_untotenherr("monster_angriff", a_spieler("monster_angriff", g_akt_spieler).f_level) == 1) {
						v_schaden = (v_schaden + 2);
					}
					if (a_spieler("monster_angriff", g_akt_spieler).f_fluch == 7) {
						v_schaden = (v_schaden * 2);
					}
					v_schutz = 0;
					if (a_spieler("monster_angriff", g_akt_spieler).f_fluch != 9) {
						p_schutz();
						v_schutz = (p_myrand((g_schutz_max - g_schutz_min)) + g_schutz_min);
						v_schaden = (v_schaden - v_schutz);
					}
					if (a_skills("monster_angriff", 8, g_akt_spieler).f_gewaehlt == 1) {
						v_schaden = (v_schaden - 1);
					}
					if (p_habich(143) > 1) {
						v_schaden = (v_schaden - 3);
					}
					if (v_schaden < 1) {
						v_schaden = 0;
					}
					if (!v_schaden && p_get_chance(50)) {
						v_schaden = 1;
					}
					v_habich = 0;
					for (v_i = 1; v_i <= 30; v_i += 1) {
						if (a_aktive("monster_angriff", v_i, g_akt_spieler).f_nr == 18) {
							v_habich = v_i;
						}
					}
					if (v_habich > 0) {
						v_schaden_save = v_schaden;
						v_schaden = (v_schaden - a_aktive("monster_angriff", v_habich, g_akt_spieler).f_staerke);
						if (v_schaden < 0) {
							v_schaden = 0;
						}
						a_spieler("monster_angriff", g_akt_spieler).f_lifepoints = (a_spieler("monster_angriff", g_akt_spieler).f_lifepoints - v_schaden);
						a_aktive("monster_angriff", v_habich, g_akt_spieler).f_staerke = (a_aktive("monster_angriff", v_habich, g_akt_spieler).f_staerke - v_schaden_save);
						if (a_aktive("monster_angriff", v_habich, g_akt_spieler).f_staerke < 1) {
							a_aktive("monster_angriff", v_habich, g_akt_spieler).f_staerke = 0;
							a_aktive("monster_angriff", v_habich, g_akt_spieler).f_dauer = 0;
							a_aktive("monster_angriff", v_habich, g_akt_spieler).f_nr = 0;
						}
					}
					p_clipsprite(38, 0, 224, 32, 32);
					p_displaytransparentsprite(38, 160, 160);
					if (a_labyrinth("monster_angriff", a_spieler("monster_angriff", g_akt_spieler).f_level, v_x_r, v_y_r).f_feld >= 137 && a_labyrinth("monster_angriff", a_spieler("monster_angriff", g_akt_spieler).f_level, v_x_r, v_y_r).f_feld <= 148) {
						p_sound(51);
					} else {
						if (!a_monster("monster_angriff", v_mon_no).f_sound) {
							p_sound(p_random(12));
						} else {
							p_sound(a_monster("monster_angriff", v_mon_no).f_sound);
						}
					}
					v_wohin = p_screenoutput();
					p_startdrawing(v_wohin);
					p_drawingmode(1);
					if (v_schaden < 10) {
						v_xx = 172;
						v_yy = 168;
					}
					if (v_schaden >= 10) {
						v_xx = 166;
						v_yy = 168;
					}
					if (v_schaden >= 100) {
						v_xx = 163;
						v_yy = 168;
					}
					p_frontcolor(p_rgb(255, 255, 255));
					p_drawtext(v_xx, v_yy, p_str(v_schaden), -1, 0);
					p_stopdrawing();
					p_flipbuffers(1);
					p_delay(g_mydelay);
					a_spieler("monster_angriff", g_akt_spieler).f_lifepoints = (a_spieler("monster_angriff", g_akt_spieler).f_lifepoints - v_schaden);
				}
				if (v_schaden > 0 && p_has_trait2(v_mon_no, 3) == 1) {
					if (p_habich(130) > 0) {
						p_message(256, 4);
					} else {
						p_add_poison((p_myrand2(10) + 1));
					}
				}
				if (v_schaden > 0 && p_has_trait2(v_mon_no, 44) == 1 && p_get_chance(100) < 10) {
					if (!a_spieler("monster_angriff", g_akt_spieler).f_krankheit) {
						a_spieler("monster_angriff", g_akt_spieler).f_krankheit = 1;
					} else {
						a_spieler("monster_angriff", g_akt_spieler).f_krankheit = (a_spieler("monster_angriff", g_akt_spieler).f_krankheit + 1);
					}
					a_spieler("monster_angriff", g_akt_spieler).f_krankheitdauer = ((a_spieler("monster_angriff", g_akt_spieler).f_krankheitdauer + p_myrand2(30)) + 1);
				}
				v_brechfaktor = 5;
				if (p_has_trait2(v_mon_no, 40) == 1) {
					v_brechfaktor = 25;
				}
				if (a_spieler("monster_angriff", g_akt_spieler).f_fluch == 25) {
					v_brechfaktor = (v_brechfaktor * 2);
				}
				if (p_get_chance(996) < v_brechfaktor) {
					v_aktruestung = 0;
					v_aktarmor = 0;
					v_aktschild = 0;
					v_akthelm = 0;
					v_akthandschuhe = 0;
					v_aktstiefel = 0;
					for (v_i = 1; v_i <= 50; v_i += 1) {
						if (a_item("monster_angriff", a_inventory("monster_angriff", v_i, g_akt_spieler).f_name).f_type == 6 && a_inventory("monster_angriff", v_i, g_akt_spieler).f_benutzt == 1) {
							v_akthelm = v_i;
						}
						if (a_item("monster_angriff", a_inventory("monster_angriff", v_i, g_akt_spieler).f_name).f_type == 7 && a_inventory("monster_angriff", v_i, g_akt_spieler).f_benutzt == 1) {
							v_akthandschuhe = v_i;
						}
						if (a_item("monster_angriff", a_inventory("monster_angriff", v_i, g_akt_spieler).f_name).f_type == 8 && a_inventory("monster_angriff", v_i, g_akt_spieler).f_benutzt == 1) {
							v_aktstiefel = v_i;
						}
						if (a_item("monster_angriff", a_inventory("monster_angriff", v_i, g_akt_spieler).f_name).f_type == 9 && a_inventory("monster_angriff", v_i, g_akt_spieler).f_benutzt == 1) {
							v_aktarmor = v_i;
						}
						if (a_item("monster_angriff", a_inventory("monster_angriff", v_i, g_akt_spieler).f_name).f_type == 11 && a_inventory("monster_angriff", v_i, g_akt_spieler).f_benutzt == 1) {
							v_aktschild = v_i;
						}
					}
					if (v_akthelm > 0 || v_akthandschuhe > 0 || v_aktstiefel > 0 || v_aktschild > 0 || v_aktarmor > 0) {
						do {
							v_hugo = (p_random(4) + 1);
							switch (v_hugo) {
							case 1:
								if (v_akthelm > 0) {
									v_aktruestung = v_akthelm;
								}
								break;
							case 2:
								if (v_akthandschuhe > 0) {
									v_aktruestung = v_akthandschuhe;
								}
								break;
							case 3:
								if (v_aktstiefel > 0) {
									v_aktruestung = v_aktstiefel;
								}
								break;
							case 4:
								if (v_aktarmor > 0) {
									v_aktruestung = v_aktarmor;
								}
								break;
							case 5:
								if (v_aktschild > 0) {
									v_aktruestung = v_aktschild;
								}
								break;
							}
						} while (!(v_aktruestung > 0));
					}
					if (v_aktruestung > 0) {
						if (a_inventory("monster_angriff", v_aktruestung, g_akt_spieler).f_status == 1) {
							a_inventory("monster_angriff", v_aktruestung, g_akt_spieler).f_status = 2;
							p_un_equip(v_aktruestung);
							p_message(451, 3);
						}
						if (!a_inventory("monster_angriff", v_aktruestung, g_akt_spieler).f_status) {
							a_inventory("monster_angriff", v_aktruestung, g_akt_spieler).f_status = 1;
							p_message(450, 3);
						}
					}
				}
				if (a_spieler("monster_angriff", g_akt_spieler).f_lifepoints < 1) {
					a_spieler("monster_angriff", g_akt_spieler).f_cause_of_death = 21;
					a_spieler("monster_angriff", g_akt_spieler).f_cause_of_death_monster = v_mon_no;
					p_tot();
				}
			}
		} else {
			p_zeige_unsichtbare(v_x_r, v_y_r);
			p_sound(24);
			p_message(291, 3);
		}
		if (!g_von_ferne) {
			v_zw_x = ((intptr_t) v_x_r - a_spieler("monster_angriff", g_akt_spieler).f_character_x);
			v_zw_y = ((intptr_t) v_y_r - a_spieler("monster_angriff", g_akt_spieler).f_character_y);
			if (p_habich(71) > 0) {
				v_schaden2 = 1;
				if (p_has_trait2(v_mon_no, 11)) {
					v_schaden2 = (v_schaden2 * 2);
				} else {
					if (p_has_trait2(v_mon_no, 12)) {
						v_schaden2 = 0;
					}
				}
				p_clipsprite(38, 0, 224, 32, 32);
				p_displaytransparentsprite(38, ((v_zw_x * 32) + 160), ((v_zw_y * 32) + 160));
				p_sound(p_random(12));
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_drawingmode(1);
				p_frontcolor(p_rgb(255, 255, 255));
				p_drawtext(((v_zw_x * 32) + 172), ((v_zw_y * 32) + 168), p_str(v_schaden2), -1, 0);
				p_stopdrawing();
				p_flipbuffers(1);
				p_delay(g_mydelay);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp - v_schaden2);
				if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp < 1) {
					p_zerstoert(2, 0);
					p_cleanup_monsters();
					v_mon_no = 0;
				} else {
					p_laby_screen();
					v_mon_no = p_getmonster(v_x_r, v_y_r, -1);
				}
			}
			if (p_habich(70) > 0 && v_mon_no) {
				v_schaden2 = 1;
				if (p_has_trait2(v_mon_no, 18)) {
					v_schaden2 = 0;
				}
				p_clipsprite(38, 64, 224, 32, 32);
				p_displaytransparentsprite(38, ((v_zw_x * 32) + 160), ((v_zw_y * 32) + 160));
				p_sound(p_random(12));
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_drawingmode(1);
				p_frontcolor(p_rgb(255, 255, 255));
				p_drawtext(((v_zw_x * 32) + 172), ((v_zw_y * 32) + 168), p_str(v_schaden2), -1, 0);
				p_stopdrawing();
				p_flipbuffers(1);
				p_delay(g_mydelay);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp - v_schaden2);
				if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp < 1) {
					p_zerstoert(2, 0);
					v_mon_no = 0;
					p_cleanup_monsters();
				} else {
					p_laby_screen();
					v_mon_no = p_getmonster(v_x_r, v_y_r, -1);
				}
			}
			if (p_habich(154) == 1 && v_mon_no && v_schaden) {
				p_clipsprite(38, 64, 224, 32, 32);
				p_displaytransparentsprite(38, ((v_zw_x * 32) + 160), ((v_zw_y * 32) + 160));
				p_sound(p_random(12));
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_drawingmode(1);
				p_frontcolor(p_rgb(255, 255, 255));
				p_drawtext(((v_zw_x * 32) + 172), ((v_zw_y * 32) + 168), p_str(v_schaden), -1, 0);
				p_stopdrawing();
				p_flipbuffers(1);
				p_delay(g_mydelay);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp - v_schaden);
				if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp < 1) {
					p_zerstoert(2, 0);
					p_cleanup_monsters();
				} else {
					p_laby_screen();
				}
			}
		}
	} else {
		if (v_schleichen > 0) {
			p_message(701, 2);
		} else {
			if (v_ausweichen > 0) {
				p_sound(24);
				p_message(178, 3);
			}
		}
	}
}

static intptr_t p_monster_attack_from_distance(int16_t v_aussehen, int16_t v_creature) {
	intptr_t v_akt_frame = 0;
	intptr_t v_i = 0;
	intptr_t v_startx = 0;
	intptr_t v_starty = 0;
	intptr_t v_zw_frame = 0;
	if (g_spell_x > 0) {
		v_startx = (32 * g_spell_x);
	}
	if (g_spell_x < 0) {
		v_startx = (-32 * g_spell_x);
	}
	if (g_spell_y > 0) {
		v_starty = (32 * g_spell_y);
	}
	if (g_spell_y < 0) {
		v_starty = (-32 * g_spell_y);
	}
	if (g_spell_x > 0) {
		v_i = v_startx;
		do {
			p_fenster(0);
			if (v_creature == 1) {
				p_laby_screen4();
			} else {
				p_laby_screen2();
			}
			if (v_aussehen == 1) {
				p_clipsprite(38, 0, 192, 32, 32);
				p_displaytransparentsprite(38, (160 + v_i), 160);
				v_i = (v_i - 2);
			}
			if (v_aussehen == 2) {
				p_clipsprite(38, 96, 96, 32, 32);
				p_displaytransparentsprite(38, (160 + v_i), 160);
				v_i = (v_i - 2);
			}
			if (v_aussehen == 3) {
				p_clipsprite(38, 32, 128, 32, 32);
				p_displaytransparentsprite(38, (160 + v_i), 160);
				v_i = (v_i - 2);
			}
			if (v_aussehen == 4) {
				p_clipsprite(38, 64, 128, 32, 32);
				p_displaytransparentsprite(38, (160 + v_i), 160);
				v_i = (v_i - 2);
			}
			if (v_aussehen == 5) {
				p_clipsprite(38, 32, 256, 32, 32);
				p_displaytransparentsprite(38, (160 + v_i), 160);
				v_i = (v_i - 2);
			}
			if (v_aussehen == 6) {
				if (g_spell_x > 0) {
					p_clipsprite(38, 96, 64, 32, 32);
					p_displaytransparentsprite(38, (160 + v_i), 160);
				}
				if (g_spell_x < 0) {
					p_clipsprite(38, 32, 64, 32, 32);
					p_displaytransparentsprite(38, (160 - v_i), 160);
				}
				if (g_spell_y > 0) {
					p_clipsprite(38, 0, 64, 32, 32);
					p_displaytransparentsprite(38, 160, (160 + v_i));
				}
				if (g_spell_y < 0) {
					p_clipsprite(38, 64, 64, 32, 32);
					p_displaytransparentsprite(38, 160, (160 - v_i));
				}
				p_delay(20);
				v_i = (v_i - 1);
			}
			if (v_aussehen == 7) {
				p_clipsprite(38, ((v_akt_frame * 32) - 32), 32, 32, 32);
				v_zw_frame = (v_zw_frame + 1);
				p_delay(20);
				if (v_zw_frame > 3) {
					v_akt_frame = (v_akt_frame + 1);
					if (v_akt_frame > 4) {
						v_akt_frame = 1;
					}
					v_zw_frame = 1;
				}
				p_displaytransparentsprite(38, (160 + v_i), 160);
				v_i = (v_i - 1);
			}
			if (v_aussehen == 8) {
				if (g_spell_x > 0) {
					p_clipsprite(38, 96, 160, 32, 32);
					p_displaytransparentsprite(38, (160 + v_i), 160);
				}
				if (g_spell_x < 0) {
					p_clipsprite(38, 32, 160, 32, 32);
					p_displaytransparentsprite(38, (160 - v_i), 160);
				}
				if (g_spell_y > 0) {
					p_clipsprite(38, 0, 160, 32, 32);
					p_displaytransparentsprite(38, 160, (160 + v_i));
				}
				if (g_spell_y < 0) {
					p_clipsprite(38, 64, 160, 32, 32);
					p_displaytransparentsprite(38, 160, (160 - v_i));
				}
				p_delay(20);
				v_i = (v_i - 1);
			}
			if (v_aussehen == 9) {
				p_clipsprite(8, 96, 576, 32, 32);
				p_displaytransparentsprite(8, (160 + v_i), 160);
				v_i = (v_i - 2);
			}
			v_i = (v_i - g_mydelay4);
			p_flipbuffers(1);
		} while (!(v_i <= 0));
	}
	if (g_spell_x < 0) {
		v_i = v_startx;
		do {
			p_fenster(0);
			if (v_creature == 1) {
				p_laby_screen4();
			} else {
				p_laby_screen2();
			}
			if (v_aussehen == 1) {
				p_clipsprite(38, 0, 192, 32, 32);
				p_displaytransparentsprite(38, (160 - v_i), 160);
				v_i = (v_i - 2);
			}
			if (v_aussehen == 2) {
				p_clipsprite(38, 32, 96, 32, 32);
				p_displaytransparentsprite(38, (160 - v_i), 160);
				v_i = (v_i - 2);
			}
			if (v_aussehen == 3) {
				p_clipsprite(38, 32, 128, 32, 32);
				p_displaytransparentsprite(38, (160 - v_i), 160);
				v_i = (v_i - 2);
			}
			if (v_aussehen == 4) {
				p_clipsprite(38, 64, 128, 32, 32);
				p_displaytransparentsprite(38, (160 - v_i), 160);
				v_i = (v_i - 2);
			}
			if (v_aussehen == 5) {
				p_clipsprite(38, 32, 256, 32, 32);
				p_displaytransparentsprite(38, (160 - v_i), 160);
				v_i = (v_i - 2);
			}
			if (v_aussehen == 6) {
				if (g_spell_x > 0) {
					p_clipsprite(38, 96, 64, 32, 32);
					p_displaytransparentsprite(38, (160 + v_i), 160);
				}
				if (g_spell_x < 0) {
					p_clipsprite(38, 32, 64, 32, 32);
					p_displaytransparentsprite(38, (160 - v_i), 160);
				}
				if (g_spell_y > 0) {
					p_clipsprite(38, 0, 64, 32, 32);
					p_displaytransparentsprite(38, 160, (160 + v_i));
				}
				if (g_spell_y < 0) {
					p_clipsprite(38, 64, 64, 32, 32);
					p_displaytransparentsprite(38, 160, (160 - v_i));
				}
				p_delay(20);
				v_i = (v_i - 1);
			}
			if (v_aussehen == 7) {
				p_clipsprite(38, ((v_akt_frame * 32) - 32), 32, 32, 32);
				v_zw_frame = (v_zw_frame + 1);
				p_delay(20);
				if (v_zw_frame > 3) {
					v_akt_frame = (v_akt_frame + 1);
					if (v_akt_frame > 4) {
						v_akt_frame = 1;
					}
					v_zw_frame = 1;
				}
				p_displaytransparentsprite(38, (160 - v_i), 160);
				v_i = (v_i - 1);
			}
			if (v_aussehen == 8) {
				if (g_spell_x > 0) {
					p_clipsprite(38, 96, 160, 32, 32);
					p_displaytransparentsprite(38, (160 + v_i), 160);
				}
				if (g_spell_x < 0) {
					p_clipsprite(38, 32, 160, 32, 32);
					p_displaytransparentsprite(38, (160 - v_i), 160);
				}
				if (g_spell_y > 0) {
					p_clipsprite(38, 0, 160, 32, 32);
					p_displaytransparentsprite(38, 160, (160 + v_i));
				}
				if (g_spell_y < 0) {
					p_clipsprite(38, 64, 160, 32, 32);
					p_displaytransparentsprite(38, 160, (160 - v_i));
				}
				p_delay(20);
				v_i = (v_i - 1);
			}
			if (v_aussehen == 9) {
				p_clipsprite(8, 96, 576, 32, 32);
				p_displaytransparentsprite(8, (160 - v_i), 160);
				v_i = (v_i - 2);
			}
			v_i = (v_i - g_mydelay4);
			p_flipbuffers(1);
		} while (!(v_i <= 0));
	}
	if (g_spell_y > 0) {
		v_i = v_starty;
		do {
			p_fenster(0);
			if (v_creature == 1) {
				p_laby_screen4();
			} else {
				p_laby_screen2();
			}
			if (v_aussehen == 1) {
				p_clipsprite(38, 0, 192, 32, 32);
				p_displaytransparentsprite(38, 160, (160 + v_i));
				v_i = (v_i - 2);
			}
			if (v_aussehen == 2) {
				p_clipsprite(38, 0, 96, 32, 32);
				p_displaytransparentsprite(38, 160, (160 + v_i));
				v_i = (v_i - 2);
			}
			if (v_aussehen == 3) {
				p_clipsprite(38, 32, 128, 32, 32);
				p_displaytransparentsprite(38, 160, (160 + v_i));
				v_i = (v_i - 2);
			}
			if (v_aussehen == 4) {
				p_clipsprite(38, 64, 128, 32, 32);
				p_displaytransparentsprite(38, 160, (160 + v_i));
				v_i = (v_i - 2);
			}
			if (v_aussehen == 5) {
				p_clipsprite(38, 32, 256, 32, 32);
				p_displaytransparentsprite(38, 160, (160 + v_i));
				v_i = (v_i - 2);
			}
			if (v_aussehen == 6) {
				if (g_spell_x > 0) {
					p_clipsprite(38, 96, 64, 32, 32);
					p_displaytransparentsprite(38, (160 + v_i), 160);
				}
				if (g_spell_x < 0) {
					p_clipsprite(38, 32, 64, 32, 32);
					p_displaytransparentsprite(38, (160 - v_i), 160);
				}
				if (g_spell_y > 0) {
					p_clipsprite(38, 0, 64, 32, 32);
					p_displaytransparentsprite(38, 160, (160 + v_i));
				}
				if (g_spell_y < 0) {
					p_clipsprite(38, 64, 64, 32, 32);
					p_displaytransparentsprite(38, 160, (160 - v_i));
				}
				p_delay(20);
				v_i = (v_i - 1);
			}
			if (v_aussehen == 7) {
				p_clipsprite(38, ((v_akt_frame * 32) - 32), 32, 32, 32);
				v_zw_frame = (v_zw_frame + 1);
				p_delay(20);
				if (v_zw_frame > 3) {
					v_akt_frame = (v_akt_frame + 1);
					if (v_akt_frame > 4) {
						v_akt_frame = 1;
					}
					v_zw_frame = 1;
				}
				p_displaytransparentsprite(38, 160, (160 + v_i));
				v_i = (v_i - 1);
			}
			if (v_aussehen == 8) {
				if (g_spell_x > 0) {
					p_clipsprite(38, 96, 160, 32, 32);
					p_displaytransparentsprite(38, (160 + v_i), 160);
				}
				if (g_spell_x < 0) {
					p_clipsprite(38, 32, 160, 32, 32);
					p_displaytransparentsprite(38, (160 - v_i), 160);
				}
				if (g_spell_y > 0) {
					p_clipsprite(38, 0, 160, 32, 32);
					p_displaytransparentsprite(38, 160, (160 + v_i));
				}
				if (g_spell_y < 0) {
					p_clipsprite(38, 64, 160, 32, 32);
					p_displaytransparentsprite(38, 160, (160 - v_i));
				}
				p_delay(20);
				v_i = (v_i - 1);
			}
			if (v_aussehen == 9) {
				p_clipsprite(8, 96, 576, 32, 32);
				p_displaytransparentsprite(8, 160, (160 + v_i));
				v_i = (v_i - 2);
			}
			v_i = (v_i - g_mydelay4);
			p_flipbuffers(1);
		} while (!(v_i <= 0));
	}
	if (g_spell_y < 0) {
		v_i = v_starty;
		do {
			p_fenster(0);
			if (v_creature == 1) {
				p_laby_screen4();
			} else {
				p_laby_screen2();
			}
			if (v_aussehen == 1) {
				p_clipsprite(38, 0, 192, 32, 32);
				p_displaytransparentsprite(38, 160, (160 - v_i));
				v_i = (v_i - 2);
			}
			if (v_aussehen == 2) {
				p_clipsprite(38, 64, 96, 32, 32);
				p_displaytransparentsprite(38, 160, (160 - v_i));
				v_i = (v_i - 2);
			}
			if (v_aussehen == 3) {
				p_clipsprite(38, 32, 128, 32, 32);
				p_displaytransparentsprite(38, 160, (160 - v_i));
				v_i = (v_i - 2);
			}
			if (v_aussehen == 4) {
				p_clipsprite(38, 64, 128, 32, 32);
				p_displaytransparentsprite(38, 160, (160 - v_i));
				v_i = (v_i - 2);
			}
			if (v_aussehen == 5) {
				p_clipsprite(38, 32, 256, 32, 32);
				p_displaytransparentsprite(38, 160, (160 - v_i));
				v_i = (v_i - 2);
			}
			if (v_aussehen == 6) {
				if (g_spell_x > 0) {
					p_clipsprite(38, 96, 64, 32, 32);
					p_displaytransparentsprite(38, (160 + v_i), 160);
				}
				if (g_spell_x < 0) {
					p_clipsprite(38, 32, 64, 32, 32);
					p_displaytransparentsprite(38, (160 - v_i), 160);
				}
				if (g_spell_y > 0) {
					p_clipsprite(38, 0, 64, 32, 32);
					p_displaytransparentsprite(38, 160, (160 + v_i));
				}
				if (g_spell_y < 0) {
					p_clipsprite(38, 64, 64, 32, 32);
					p_displaytransparentsprite(38, 160, (160 - v_i));
				}
				p_delay(20);
				v_i = (v_i - 1);
			}
			if (v_aussehen == 7) {
				p_clipsprite(38, ((v_akt_frame * 32) - 32), 32, 32, 32);
				v_zw_frame = (v_zw_frame + 1);
				p_delay(20);
				if (v_zw_frame > 3) {
					v_akt_frame = (v_akt_frame + 1);
					if (v_akt_frame > 4) {
						v_akt_frame = 1;
					}
					v_zw_frame = 1;
				}
				p_displaytransparentsprite(38, 160, (160 - v_i));
				v_i = (v_i - 1);
			}
			if (v_aussehen == 8) {
				if (g_spell_x > 0) {
					p_clipsprite(38, 96, 160, 32, 32);
					p_displaytransparentsprite(38, (160 + v_i), 160);
				}
				if (g_spell_x < 0) {
					p_clipsprite(38, 32, 160, 32, 32);
					p_displaytransparentsprite(38, (160 - v_i), 160);
				}
				if (g_spell_y > 0) {
					p_clipsprite(38, 0, 160, 32, 32);
					p_displaytransparentsprite(38, 160, (160 + v_i));
				}
				if (g_spell_y < 0) {
					p_clipsprite(38, 64, 160, 32, 32);
					p_displaytransparentsprite(38, 160, (160 - v_i));
				}
				p_delay(20);
				v_i = (v_i - 1);
			}
			if (v_aussehen == 9) {
				p_clipsprite(8, 96, 576, 32, 32);
				p_displaytransparentsprite(8, 160, (160 - v_i));
				v_i = (v_i - 2);
			}
			v_i = (v_i - g_mydelay4);
			p_flipbuffers(1);
		} while (!(v_i <= 0));
	}
}

static intptr_t p_monsterlore() {
	int16_t v_akt_item = 0;
	int16_t v_akt_tile = 0;
	std::string v_charges;
	intptr_t v_destination = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	int16_t v_mon = 0;
	int16_t v_okay = 0;
	int16_t v_raus = 0;
	intptr_t v_result = 0;
	std::string v_tempart;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_yn = 0;
	intptr_t v_yplus = 0;
	if (g_test == 1) {
		p_openconsole();
		p_print("----------- Dump of monster_list() : -------------");
		p_resetlist(ll_monster_list);
		while (p_nextelement(ll_monster_list)) {
			p_print("nr:" + p_str(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number) + "-" + a_monster("monsterlore", LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number).f_name[1] + " hp:" + p_str(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp) + " x:" + p_str(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x) + " y:" + p_str(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y) + " z:" + p_str(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z));
		}
	}
	v_raus = 0;
	g_spell_x = 0;
	g_spell_y = 0;
	v_yplus = 20;
	v_destination = p_select_field(1);
	if (v_destination == 1) {
		v_mon = p_getmonster((a_spieler("monsterlore", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("monsterlore", g_akt_spieler).f_character_y + g_spell_y), -1);
		v_akt_tile = a_labyrinth("monsterlore", a_spieler("monsterlore", g_akt_spieler).f_level, (a_spieler("monsterlore", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("monsterlore", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
		if (a_skills("monsterlore", 117, g_akt_spieler).f_gewaehlt == 1 || g_monsterauge == 1) {
			if (v_akt_tile == 97) {
				v_mon = 70;
				a_labyrinth("monsterlore", a_spieler("monsterlore", g_akt_spieler).f_level, (a_spieler("monsterlore", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("monsterlore", g_akt_spieler).f_character_y + g_spell_y)).f_feld = a_inhalt("monsterlore", a_spieler("monsterlore", g_akt_spieler).f_level);
				p_setmonster((a_spieler("monsterlore", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("monsterlore", g_akt_spieler).f_character_y + g_spell_y), a_spieler("monsterlore", g_akt_spieler).f_level, v_mon, a_monster("monsterlore", v_mon).f_nr, a_monster("monsterlore", v_mon).f_lebenspunkte, 0, 0, 0);
			}
		}
		if (a_matrix("monsterlore", (7 + g_spell_x), (7 + g_spell_y)) <= p_radius() || a_skills("monsterlore", 81, g_akt_spieler).f_gewaehlt) {
			do {
				p_fenster(0);
				p_clearscreen(p_rgb(0, 0, 0));
				p_draw_plain_frame(0);
				p_clipsprite(73, 1, 1, 606, 446);
				p_displaytransparentsprite(73, 17, 17);
				v_okay = 0;
				v_x = 75;
				v_yn = 50;
				if (v_mon && (!p_has_trait2(v_mon, 19) || p_habich(109) || p_habich(121) || a_skills("monsterlore", 81, g_akt_spieler).f_gewaehlt)) {
					v_okay = 1;
					p_draw_monster(2, 2, (v_x - 40), (v_yn - 12));
					v_wohin = p_screenoutput();
					p_startdrawing(v_wohin);
					p_drawingmode(1);
					p_frontcolor(p_rgb(255, 255, 255));
					p_drawtext(v_x, v_yn, p_nachricht5(115, v_mon), -1, 0);
					v_yn = (v_yn + v_yplus);
					switch (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status) {
					case 0:
						v_yn = (v_yn - v_yplus);
						break;
					case 1:
						p_drawtext(v_x, v_yn, a_message_text("monsterlore", 763, (1 + g_language)), -1, 0);
						break;
					case 2:
						p_drawtext(v_x, v_yn, a_message_text("monsterlore", 764, (1 + g_language)), -1, 0);
						break;
					case 3:
						p_drawtext(v_x, v_yn, a_message_text("monsterlore", 765, (1 + g_language)), -1, 0);
						break;
					case 4:
						p_drawtext(v_x, v_yn, a_message_text("monsterlore", 766, (1 + g_language)), -1, 0);
						break;
					case 5:
						p_drawtext(v_x, v_yn, a_message_text("monsterlore", 767, (1 + g_language)), -1, 0);
						break;
					case 6:
						p_drawtext(v_x, v_yn, a_message_text("monsterlore", 768, (1 + g_language)), -1, 0);
						break;
					}
					if (a_skills("monsterlore", 117, g_akt_spieler).f_gewaehlt == 1 || g_monsterauge == 1) {
						v_yn = (v_yn + v_yplus);
						v_tempart = "";
						switch (a_monster("monsterlore", v_mon).f_art) {
						case 1:
							v_tempart = a_message_text("monsterlore", 118, (1 + g_language));
							break;
						case 2:
							v_tempart = a_message_text("monsterlore", 119, (1 + g_language));
							break;
						case 3:
							v_tempart = a_message_text("monsterlore", 120, (1 + g_language));
							break;
						case 4:
							v_tempart = a_message_text("monsterlore", 121, (1 + g_language));
							break;
						case 5:
							v_tempart = a_message_text("monsterlore", 400, (1 + g_language));
							break;
						case 7:
							v_tempart = a_message_text("monsterlore", 401, (1 + g_language));
							break;
						case 8:
							v_tempart = a_message_text("monsterlore", 402, (1 + g_language));
							break;
						case 9:
							v_tempart = a_message_text("monsterlore", 403, (1 + g_language));
							break;
						case 10:
							v_tempart = a_message_text("monsterlore", 404, (1 + g_language));
							break;
						}
						p_drawtext(v_x, v_yn, p_nachricht6(116, v_tempart), -1, 0);
						v_yn = (v_yn + v_yplus);
						p_drawtext(v_x, v_yn, p_nachricht6(55, p_str(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp) + "/" + p_str(a_monster("monsterlore", v_mon).f_lebenspunkte)), -1, 0);
						v_yn = (v_yn + v_yplus);
						p_drawtext(v_x, v_yn, p_nachricht6(117, p_str(a_monster("monsterlore", v_mon).f_angriff) + "/" + p_str(a_monster("monsterlore", v_mon).f_abwehr)), -1, 0);
						v_yn = (v_yn + v_yplus);
						p_drawtext(v_x, v_yn, p_nachricht6(54, p_str(a_monster("monsterlore", v_mon).f_staerke)), -1, 0);
						v_yn = (v_yn + v_yplus);
						p_drawtext(v_x, v_yn, p_nachricht6(87, p_str(a_monster("monsterlore", v_mon).f_ruestung)), -1, 0);
						v_yn = (v_yn + v_yplus);
						p_explain(a_monster("monsterlore", v_mon).f_eigenschaft1, v_yn);
						v_yn = (v_yn + v_yplus);
						p_explain(a_monster("monsterlore", v_mon).f_eigenschaft2, v_yn);
						v_yn = (v_yn + v_yplus);
						p_explain(a_monster("monsterlore", v_mon).f_eigenschaft3, v_yn);
						v_yn = (v_yn + v_yplus);
						p_explain(a_monster("monsterlore", v_mon).f_eigenschaft4, v_yn);
						v_yn = (v_yn + v_yplus);
						p_explain(a_monster("monsterlore", v_mon).f_eigenschaft5, v_yn);
						v_yn = (v_yn + v_yplus);
						p_explain(a_monster("monsterlore", v_mon).f_eigenschaft6, v_yn);
						v_yn = (v_yn + v_yplus);
						p_explain(a_monster("monsterlore", v_mon).f_eigenschaft7, v_yn);
					}
					p_stopdrawing();
					v_yn = (v_yn + v_yplus);
				}
				v_akt_item = a_laby_item("monsterlore", (a_spieler("monsterlore", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("monsterlore", g_akt_spieler).f_character_y + g_spell_y)).f_name[a_spieler("monsterlore", g_akt_spieler).f_level];
				if (v_akt_item > 0) {
					if (a_item("monsterlore", v_akt_item).f_type != 17 || !a_skills("monsterlore", 126, g_akt_spieler).f_gewaehlt) {
						v_yn = (v_yn + v_yplus);
						p_draw_item(v_akt_item, 2, 2, (v_x - 40), (v_yn - 12));
						v_wohin = p_screenoutput();
						p_startdrawing(v_wohin);
						p_drawingmode(1);
						p_frontcolor(p_rgb(255, 255, 255));
						p_drawtext(v_x, v_yn, a_item("monsterlore", v_akt_item).f_name[(g_language + 1)], -1, 0);
						p_stopdrawing();
						v_yn = (v_yn + 32);
					}
				}
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_drawingmode(1);
				p_frontcolor(p_rgb(255, 255, 255));
				v_yn = (v_yn + v_yplus);
				p_drawtext(v_x, v_yn, a_fields("monsterlore", v_akt_tile).f_description[(g_language + 1)], -1, 0);
				if (v_akt_tile == 8 || v_akt_tile == 7) {
					v_charges = p_str(a_labyrinth("monsterlore", a_spieler("monsterlore", g_akt_spieler).f_level, (a_spieler("monsterlore", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("monsterlore", g_akt_spieler).f_character_y + g_spell_y)).f_stat1);
					p_drawtext(v_x, (v_yn + 15), a_message_text("monsterlore", 548, (g_language + 1)) + v_charges, -1, 0);
				}
				p_stopdrawing();
				p_draw_tile(v_akt_tile, 2, 2, (v_x - 40), (v_yn - 12), -1);
				p_examinekeyboard();
				v_result = p_examinemouse();
				v_mmouse_x = p_mousex();
				v_mmouse_y = p_mousey();
				v_mmouse_rechts = p_mousebutton(2);
				v_mmouse_links = p_mousebutton(1);
				p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
				if (!v_raus && !(p_keyboardpushed(13) || p_keyboardpushed(32) || v_mmouse_links || p_keyboardpushed(108))) {
					v_raus = 1;
				}
				if (v_raus == 1 && (v_mmouse_rechts || v_mmouse_links || p_keyboardpushed(32) || p_keyboardpushed(108))) {
					v_raus = 2;
				}
				if (v_raus == 2 && !(v_mmouse_rechts || v_mmouse_links || p_keyboardpushed(32) || p_keyboardpushed(108))) {
					v_raus = 3;
				}
				p_flipbuffers(1);
			} while (!(v_raus == 3 || p_keyboardpushed(27)));
		}
	}
}

static intptr_t p_monsterschaden(int16_t v_schaden) {
	struct st_monster_pointer v_act_monster;
	int16_t v_explo = 0;
	intptr_t v_i = 0;
	int16_t v_mon_no = 0;
	int16_t v_on_screen = 0;
	std::string v_willi;
	intptr_t v_wohin = 0;
	intptr_t v_xx = 0;
	intptr_t v_yy = 0;
	v_mon_no = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number;
	v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
	if (v_mon_no && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 7) {
		for (v_i = 1; v_i <= 30; v_i += 1) {
			if (a_aktive("monsterschaden", v_i, g_akt_spieler).f_nr == 110 && a_aktive("monsterschaden", v_i, g_akt_spieler).f_dauer != -1) {
				a_aktive("monsterschaden", v_i, g_akt_spieler).f_nr = 0;
				a_aktive("monsterschaden", v_i, g_akt_spieler).f_staerke = 0;
				a_aktive("monsterschaden", v_i, g_akt_spieler).f_dauer = 0;
			}
		}
		p_laby_screen2();
		v_on_screen = 0;
		if (g_spell_x > -6 && g_spell_x < 6 && g_spell_y > -6 && g_spell_y < 6) {
			v_on_screen = 1;
			p_clipsprite(38, 0, 224, 32, 32);
			p_displaytransparentsprite(38, (160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)));
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			if (v_schaden < 10) {
				v_xx = (172 + (g_spell_x * 32));
				v_yy = (168 + (g_spell_y * 32));
			}
			if (v_schaden >= 10) {
				v_xx = (166 + (g_spell_x * 32));
				v_yy = (168 + (g_spell_y * 32));
			}
			if (v_schaden >= 100) {
				v_xx = (163 + (g_spell_x * 32));
				v_yy = (168 + (g_spell_y * 32));
			}
			p_frontcolor(p_rgb(255, 255, 255));
			p_drawtext(v_xx, v_yy, p_str(v_schaden), -1, 0);
			p_stopdrawing();
			p_sound(p_random(12));
		}
		p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
		if (!p_habich(159)) {
			v_schaden = (v_schaden - p_myrand2(a_monster("monsterschaden", v_mon_no).f_ruestung));
			if (v_schaden < 1) {
				v_schaden = 0;
			}
		}
		LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp - v_schaden);
		if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp < 1) {
			v_explo = 0;
			if (p_has_trait2(v_mon_no, 42)) {
				v_explo = 1;
			}
			if (v_on_screen) {
				v_willi = a_monster("monsterschaden", v_mon_no).f_name[(1 + g_language)] + a_message_text("monsterschaden", 627, (g_language + 1));
				p_nachricht7(v_willi, 3);
				p_lernen(v_mon_no);
			}
			p_gott_check();
			if (p_has_trait2(v_mon_no, 30)) {
				p_remove_monster();
			} else {
				p_hinterlassen((a_spieler("monsterschaden", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("monsterschaden", g_akt_spieler).f_character_y + g_spell_y));
				p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
			}
			a_spieler("monsterschaden", g_akt_spieler).f_mks = (a_spieler("monsterschaden", g_akt_spieler).f_mks + 1);
			if (v_explo == 1) {
				p_explodiert(2);
			}
			p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
		} else {
			if (!LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status) {
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 1;
			}
			if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 2) {
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 0;
			}
			p_flipbuffers(1);
			if (v_on_screen) {
				p_delay(g_mydelay);
			}
		}
	}
	p_laby_screen();
	p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
}

static intptr_t p_move() {
	intptr_t v_elapsedtime2 = 0;
	intptr_t v_i = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_result = 0;
	intptr_t v_starttime2 = 0;
	if (g_xmod || g_ymod) {
		p_vor_bewegung();
	}
	if (g_xmod || g_ymod) {
		g_bewegt = 1;
	} else {
		g_bewegt = 0;
	}
	g_spielerwechsel = 0;
	g_schongemalt = 0;
	if (g_xmod || g_ymod) {
		a_spieler("move", g_akt_spieler).f_speed = (a_spieler("move", g_akt_spieler).f_speed - 1);
		for (v_i = 4; v_i <= 32; v_i += 4) {
			v_starttime2 = p_elapsedmilliseconds();
			g_framestep = (g_framestep + 1);
			if (g_framestep > 3) {
				g_framestep = 0;
				if (!g_frame) {
					g_frame = 1;
				} else {
					g_frame = 0;
				}
			}
			p_screen1(v_i);
			if (!g_no_mouse) {
				v_result = p_examinemouse();
				v_mmouse_x = p_mousex();
				v_mmouse_y = p_mousey();
				v_mmouse_links = p_mousebutton(1);
				v_mmouse_rechts = p_mousebutton(2);
				p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
			}
			v_elapsedtime2 = (p_elapsedmilliseconds() - v_starttime2);
			if (v_elapsedtime2 < 15) {
				p_delay((15 - v_elapsedtime2));
			}
			p_flipbuffers(1);
		}
		g_schongemalt = 1;
		a_spieler("move", g_akt_spieler).f_character_x = (a_spieler("move", g_akt_spieler).f_character_x + g_xmod);
		a_spieler("move", g_akt_spieler).f_character_y = (a_spieler("move", g_akt_spieler).f_character_y + g_ymod);
		p_update_automap();
		p_laby_screen2();
		p_falle();
		p_sonderfeld();
	}
}

static intptr_t p_mystisch() {
	int16_t v_angriff = 0;
	int8_t v_bogen = 0;
	intptr_t v_destination = 0;
	int16_t v_kritisch = 0;
	int16_t v_mon_no = 0;
	int8_t v_pfeil = 0;
	int16_t v_schaden = 0;
	v_bogen = 0;
	v_pfeil = 0;
	v_angriff = 0;
	v_schaden = 0;
	v_kritisch = 0;
	g_spell_x = 0;
	g_spell_y = 0;
	v_destination = p_select_field(0);
	if (v_destination == 1) {
		g_blocked = 0;
		p_los(0);
		if (!g_blocked) {
			if (a_spieler("mystisch", g_akt_spieler).f_lifepoints > 1) {
				v_mon_no = p_getmonster((a_spieler("mystisch", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("mystisch", g_akt_spieler).f_character_y + g_spell_y), -1);
				if (v_mon_no || p_isthydra((a_spieler("mystisch", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("mystisch", g_akt_spieler).f_character_y + g_spell_y))) {
					g_aktion = 1;
					p_sound(18);
					p_animate_projectile(2);
					v_schaden = p_max(5, (p_myrand((5 * a_spieler("mystisch", g_akt_spieler).f_level)) + a_spieler("mystisch", g_akt_spieler).f_level));
					p_hydra_zauber(v_schaden);
					p_getmonster((a_spieler("mystisch", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("mystisch", g_akt_spieler).f_character_y + g_spell_y), -1);
					p_monsterschaden(v_schaden);
					p_cleanup_monsters();
					p_spielerschaden(1, 3, 0, 0, 0);
				} else {
					p_message(246, 1);
				}
			} else {
				p_message(409, 1);
			}
		}
	}
}

static intptr_t p_nach_zug() {
	struct st_monster_pointer v_act_monster;
	int16_t v_akt_hinterhalt = 0;
	intptr_t v_art_n = 0;
	int16_t v_bg = 0;
	intptr_t v_gef = 0;
	int16_t v_hat_monster = 0;
	int16_t v_hugo = 0;
	intptr_t v_i = 0;
	intptr_t v_iii = 0;
	intptr_t v_jjj = 0;
	int16_t v_k = 0;
	intptr_t v_level = 0;
	int16_t v_mon_no = 0;
	int16_t v_poison_dam = 0;
	int16_t v_posx = 0;
	int16_t v_posy = 0;
	int16_t v_processed_already = 0;
	int16_t v_r = 0;
	intptr_t v_ring = 0;
	int16_t v_schaden = 0;
	intptr_t v_spell_x = 0;
	intptr_t v_spell_y = 0;
	int16_t v_tile = 0;
	int16_t v_unsichtbar = 0;
	int16_t v_welches = 0;
	intptr_t v_wohin = 0;
	int16_t v_x = 0;
	int16_t v_xx = 0;
	int16_t v_xxx = 0;
	int16_t v_y = 0;
	int16_t v_yy = 0;
	int16_t v_yyy = 0;
	int16_t v_zaehler = 0;
	int16_t v_zzz = 0;
	a_spieler("nach_zug", g_akt_spieler).f_moves = (a_spieler("nach_zug", g_akt_spieler).f_moves + 1);
	for (v_i = 1; v_i <= 30; v_i += 1) {
		if (a_aktive("nach_zug", v_i, g_akt_spieler).f_dauer == -2) {
			a_aktive("nach_zug", v_i, g_akt_spieler).f_dauer = 0;
			a_aktive("nach_zug", v_i, g_akt_spieler).f_nr = 0;
			a_aktive("nach_zug", v_i, g_akt_spieler).f_staerke = 0;
		}
	}
	a_spieler("nach_zug", g_akt_spieler).f_old_pos_x = a_spieler("nach_zug", g_akt_spieler).f_character_x;
	a_spieler("nach_zug", g_akt_spieler).f_old_pos_y = a_spieler("nach_zug", g_akt_spieler).f_character_y;
	a_spieler("nach_zug", g_akt_spieler).f_old_level = a_spieler("nach_zug", g_akt_spieler).f_level;
	a_spieler("nach_zug", g_akt_spieler).f_old_lp = a_spieler("nach_zug", g_akt_spieler).f_lifepoints;
	a_spieler("nach_zug", g_akt_spieler).f_old_max_lp = a_spieler("nach_zug", g_akt_spieler).f_maxlifepoints;
	a_spieler("nach_zug", g_akt_spieler).f_old_mp = a_spieler("nach_zug", g_akt_spieler).f_mana;
	a_spieler("nach_zug", g_akt_spieler).f_old_max_mp = a_spieler("nach_zug", g_akt_spieler).f_maxmana;
	if (a_skills("nach_zug", 77, g_akt_spieler).f_gewaehlt == 1) {
		if ((a_spieler("nach_zug", g_akt_spieler).f_moves % 2)) {
			a_spieler("nach_zug", g_akt_spieler).f_hinterhalt = (a_spieler("nach_zug", g_akt_spieler).f_hinterhalt + 1);
		}
	} else {
		a_spieler("nach_zug", g_akt_spieler).f_hinterhalt = (a_spieler("nach_zug", g_akt_spieler).f_hinterhalt + 1);
	}
	if (a_spieler("nach_zug", g_akt_spieler).f_fluch == 17) {
		a_spieler("nach_zug", g_akt_spieler).f_hinterhalt = (a_spieler("nach_zug", g_akt_spieler).f_hinterhalt + 1);
	}
	if (a_levelmod("nach_zug", a_spieler("nach_zug", g_akt_spieler).f_level) == 7) {
		a_spieler("nach_zug", g_akt_spieler).f_hinterhalt = (a_spieler("nach_zug", g_akt_spieler).f_hinterhalt + 2);
	}
	v_akt_hinterhalt = (a_spieler("nach_zug", g_akt_spieler).f_hinterhalt - 20);
	if (v_akt_hinterhalt > 0 && !p_habich(37)) {
		if (p_get_chance(100) < v_akt_hinterhalt) {
			a_spieler("nach_zug", g_akt_spieler).f_hinterhalt = 0;
			v_welches = 1;
			v_zaehler = 1;
			do {
				v_gef = 0;
				v_welches = (p_random(169) + 1);
				if (a_monster("nach_zug", v_welches).f_minlevel <= a_spieler("nach_zug", g_akt_spieler).f_level && !p_has_trait2(v_welches, 30)) {
					v_gef = p_has_trait2(v_welches, 2);
				}
				v_zaehler = (v_zaehler + 1);
			} while (!(v_gef == 1 || v_zaehler > 2000));
			if (v_zaehler > 2000) {
				v_welches = 1;
				if (a_sonderlevel("nach_zug", a_spieler("nach_zug", g_akt_spieler).f_level) == 10) {
					v_welches = 118;
				}
			}
			p_hinterhalt(v_welches);
			g_xmod = 0;
			g_ymod = 0;
		}
	}
	v_unsichtbar = 0;
	v_hat_monster = 0;
	if (p_habich(110) == 1 && p_get_chance(100) < 80) {
		v_unsichtbar = 1;
	}
	if (!v_unsichtbar) {
		for (v_i = 1; v_i <= 4; v_i += 1) {
			v_xx = (a_spieler("nach_zug", g_akt_spieler).f_character_x + p_neighbour_offset(v_i, 0));
			v_yy = (a_spieler("nach_zug", g_akt_spieler).f_character_y + p_neighbour_offset(v_i, 1));
			v_mon_no = p_getmonster(v_xx, v_yy, -1);
			if (v_mon_no) {
				if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 2 && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 3) {
					g_von_ferne = 0;
					v_hat_monster = 1;
					v_x = (7 + p_neighbour_offset(v_i, 0));
					v_y = (7 + p_neighbour_offset(v_i, 1));
					if (p_has_trait2(v_mon_no, 30) > 0) {
						p_draw_tile(53, v_x, v_y, 0, 0, -1);
					} else {
						v_tile = a_labyrinth("nach_zug", a_spieler("nach_zug", g_akt_spieler).f_level, v_xx, v_yy).f_feld;
						if (a_fields("nach_zug", v_tile).f_attri_floor) {
							v_bg = a_labyrinth("nach_zug", a_spieler("nach_zug", g_akt_spieler).f_level, ((a_spieler("nach_zug", g_akt_spieler).f_character_x - 7) + v_x), ((a_spieler("nach_zug", g_akt_spieler).f_character_y - 7) + v_y)).f_stat2;
						} else {
							v_bg = 0;
						}
						p_draw_tile(v_tile, v_x, v_y, 0, 0, v_bg);
					}
					if (a_laby_item("nach_zug", v_xx, v_yy).f_name[a_spieler("nach_zug", g_akt_spieler).f_level] > 0) {
						p_draw_item(a_laby_item("nach_zug", v_xx, v_yy).f_name[a_spieler("nach_zug", g_akt_spieler).f_level], v_x, v_y, 0, 0);
					}
					p_draw_monster(v_x, v_y, 0, -3);
					p_restaurieren();
					p_monster_angriff(v_xx, v_yy);
					if (p_has_trait2(v_mon_no, 30) > 0) {
						p_draw_tile(53, v_x, v_y, 0, 0, -1);
					} else {
						p_draw_tile(v_tile, v_x, v_y, 0, 0, v_bg);
					}
					if (a_laby_item("nach_zug", v_xx, v_yy).f_name[a_spieler("nach_zug", g_akt_spieler).f_level] > 0) {
						p_draw_item(a_laby_item("nach_zug", v_xx, v_yy).f_name[a_spieler("nach_zug", g_akt_spieler).f_level], v_x, v_y, 0, 0);
					}
					p_draw_monster(v_x, v_y, 0, 0);
					p_restaurieren();
				}
			}
		}
	} else {
		p_message(444, 2);
	}
	p_fernkampf();
	if (p_habich(165) > 0) {
		p_changecurrentelement(ll_monster_list, a_first_monster("nach_zug", a_spieler("nach_zug", g_akt_spieler).f_level).f_p);
		v_r = 6;
		while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == a_spieler("nach_zug", g_akt_spieler).f_level) {
			if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x > (a_spieler("nach_zug", g_akt_spieler).f_character_x - v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x < (a_spieler("nach_zug", g_akt_spieler).f_character_x + v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y > (a_spieler("nach_zug", g_akt_spieler).f_character_y - v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y < (a_spieler("nach_zug", g_akt_spieler).f_character_y + v_r)) {
				if (p_has_trait2(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number, 29) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 2) {
					if (p_get_chance(100) < 20) {
						v_spell_x = ((intptr_t) LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x - a_spieler("nach_zug", g_akt_spieler).f_character_x);
						v_spell_y = ((intptr_t) LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y - a_spieler("nach_zug", g_akt_spieler).f_character_y);
						p_sound(23);
						for (v_i = 1; v_i <= 8; v_i += 1) {
							p_clipsprite(37, ((v_i * 31) - 31), 383, 31, 31);
							p_displaytransparentsprite(37, (160 + (v_spell_x * 32)), (160 + (v_spell_y * 32)));
							p_flipbuffers(1);
							p_delay(90);
						}
						for (v_i = 1; v_i <= 8; v_i += 1) {
							p_clipsprite(37, ((v_i * 31) - 31), 414, 31, 31);
							p_displaytransparentsprite(37, (160 + (v_spell_x * 32)), (160 + (v_spell_y * 32)));
							p_flipbuffers(1);
							p_delay(90);
						}
						LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 2;
					}
				}
			}
			p_nextelement(ll_monster_list);
		}
	}
	if (p_habich(166) > 0) {
		p_changecurrentelement(ll_monster_list, a_first_monster("nach_zug", a_spieler("nach_zug", g_akt_spieler).f_level).f_p);
		v_r = 6;
		while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == a_spieler("nach_zug", g_akt_spieler).f_level) {
			if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x > (a_spieler("nach_zug", g_akt_spieler).f_character_x - v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x < (a_spieler("nach_zug", g_akt_spieler).f_character_x + v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y > (a_spieler("nach_zug", g_akt_spieler).f_character_y - v_r) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y < (a_spieler("nach_zug", g_akt_spieler).f_character_y + v_r)) {
				v_art_n = a_monster("nach_zug", LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number).f_art;
				if (v_art_n == 1 || v_art_n == 2) {
					if (p_get_chance(100) < 10) {
						v_spell_x = ((intptr_t) LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x - a_spieler("nach_zug", g_akt_spieler).f_character_x);
						v_spell_y = ((intptr_t) LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y - a_spieler("nach_zug", g_akt_spieler).f_character_y);
						p_sound(15);
						for (v_i = 1; v_i <= 8; v_i += 1) {
							p_clipsprite(37, ((v_i * 31) - 31), 383, 31, 31);
							p_displaytransparentsprite(37, (160 + (v_spell_x * 32)), (160 + (v_spell_y * 32)));
							p_flipbuffers(1);
							p_delay(90);
						}
						for (v_i = 1; v_i <= 8; v_i += 1) {
							p_clipsprite(37, ((v_i * 31) - 31), 414, 31, 31);
							p_displaytransparentsprite(37, (160 + (v_spell_x * 32)), (160 + (v_spell_y * 32)));
							p_flipbuffers(1);
							p_delay(90);
						}
						p_zerstoert(2, 0);
					}
				}
			}
			p_nextelement(ll_monster_list);
		}
		p_cleanup_monsters();
	}
	if (!a_skills("nach_zug", 83, g_akt_spieler).f_gewaehlt) {
		if (((p_ich_trage3(326) == 1 || p_habich(142) > 0) && p_get_chance(50)) || (!p_ich_trage3(326) && !p_habich(142))) {
			a_spieler("nach_zug", g_akt_spieler).f_durst = (a_spieler("nach_zug", g_akt_spieler).f_durst + 1);
		}
		if (a_spieler("nach_zug", g_akt_spieler).f_fluch == 14) {
			a_spieler("nach_zug", g_akt_spieler).f_durst = (a_spieler("nach_zug", g_akt_spieler).f_durst + 1);
		}
		if (a_sonderlevel("nach_zug", a_spieler("nach_zug", g_akt_spieler).f_level) == 9) {
			a_spieler("nach_zug", g_akt_spieler).f_durst = (a_spieler("nach_zug", g_akt_spieler).f_durst + 1);
		}
		if (a_spieler("nach_zug", g_akt_spieler).f_durst < 60) {
			a_spieler("nach_zug", g_akt_spieler).f_verdursten = 0;
		}
		if (a_spieler("nach_zug", g_akt_spieler).f_durst >= 60 && a_spieler("nach_zug", g_akt_spieler).f_durst < 90) {
			a_spieler("nach_zug", g_akt_spieler).f_verdursten = 1;
		}
		if (a_spieler("nach_zug", g_akt_spieler).f_durst >= 90 && a_spieler("nach_zug", g_akt_spieler).f_durst < 120) {
			a_spieler("nach_zug", g_akt_spieler).f_verdursten = 2;
		}
		if (a_spieler("nach_zug", g_akt_spieler).f_durst >= 120 && a_spieler("nach_zug", g_akt_spieler).f_durst < 320) {
			a_spieler("nach_zug", g_akt_spieler).f_verdursten = 3;
			p_spielerschaden(1, 3, 8, 0, 0);
		}
		if (a_spieler("nach_zug", g_akt_spieler).f_durst >= 320) {
			a_spieler("nach_zug", g_akt_spieler).f_verdursten = 4;
			p_spielerschaden(2, 3, 8, 0, 0);
		}
	}
	if (!a_skills("nach_zug", 83, g_akt_spieler).f_gewaehlt) {
		if (((p_ich_trage3(327) == 1 || p_habich(142) > 0) && p_get_chance(50)) || (!p_ich_trage3(327) && !p_habich(142))) {
			a_spieler("nach_zug", g_akt_spieler).f_hunger = (a_spieler("nach_zug", g_akt_spieler).f_hunger + 1);
		}
		if (a_spieler("nach_zug", g_akt_spieler).f_fluch == 13) {
			a_spieler("nach_zug", g_akt_spieler).f_hunger = (a_spieler("nach_zug", g_akt_spieler).f_hunger + 1);
		}
		if (a_spieler("nach_zug", g_akt_spieler).f_hunger < 80) {
			a_spieler("nach_zug", g_akt_spieler).f_verhungern = 0;
		}
		if (a_spieler("nach_zug", g_akt_spieler).f_hunger >= 80 && a_spieler("nach_zug", g_akt_spieler).f_hunger < 120) {
			a_spieler("nach_zug", g_akt_spieler).f_verhungern = 1;
		}
		if (a_spieler("nach_zug", g_akt_spieler).f_hunger >= 120 && a_spieler("nach_zug", g_akt_spieler).f_hunger < 160) {
			a_spieler("nach_zug", g_akt_spieler).f_verhungern = 2;
		}
		if (a_spieler("nach_zug", g_akt_spieler).f_hunger >= 160 && a_spieler("nach_zug", g_akt_spieler).f_hunger < 350) {
			a_spieler("nach_zug", g_akt_spieler).f_verhungern = 3;
			p_spielerschaden(1, 3, 9, 0, 0);
		}
		if (a_spieler("nach_zug", g_akt_spieler).f_hunger >= 350) {
			a_spieler("nach_zug", g_akt_spieler).f_verhungern = 4;
			p_spielerschaden(2, 3, 9, 0, 0);
		}
	}
	for (v_i = 1; v_i <= 30; v_i += 1) {
		if (a_aktive("nach_zug", v_i, g_akt_spieler).f_dauer > 1) {
			if (a_aktive("nach_zug", v_i, g_akt_spieler).f_dauer != -1) {
				a_aktive("nach_zug", v_i, g_akt_spieler).f_dauer = (a_aktive("nach_zug", v_i, g_akt_spieler).f_dauer - 1);
			}
		} else {
			if (a_aktive("nach_zug", v_i, g_akt_spieler).f_dauer == 1) {
				a_aktive("nach_zug", v_i, g_akt_spieler).f_dauer = 0;
				a_aktive("nach_zug", v_i, g_akt_spieler).f_nr = 0;
				a_aktive("nach_zug", v_i, g_akt_spieler).f_staerke = 0;
			}
		}
	}
	if (a_sonderlevel("nach_zug", a_spieler("nach_zug", g_akt_spieler).f_level) == 13) {
		if (a_spieler("nach_zug", g_akt_spieler).f_mana > 0) {
			a_spieler("nach_zug", g_akt_spieler).f_mana = (a_spieler("nach_zug", g_akt_spieler).f_mana - 1);
		}
	}
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_inventory("nach_zug", v_i, g_akt_spieler).f_benutzt == 1 && a_inventory("nach_zug", v_i, g_akt_spieler).f_name == 46) {
			a_inventory("nach_zug", v_i, g_akt_spieler).f_status = (a_inventory("nach_zug", v_i, g_akt_spieler).f_status - 1);
			if (a_inventory("nach_zug", v_i, g_akt_spieler).f_status < 1) {
				if (a_inventory("nach_zug", v_i, g_akt_spieler).f_anzahl > 0) {
					a_inventory("nach_zug", v_i, g_akt_spieler).f_anzahl = (a_inventory("nach_zug", v_i, g_akt_spieler).f_anzahl - 1);
					a_inventory("nach_zug", v_i, g_akt_spieler).f_status = a_item("nach_zug", a_inventory("nach_zug", v_i, g_akt_spieler).f_name).f_attri1;
				} else {
					a_inventory("nach_zug", v_i, g_akt_spieler).f_benutzt = 0;
					a_spieler("nach_zug", g_akt_spieler).f_light = (a_spieler("nach_zug", g_akt_spieler).f_light - 3);
				}
			}
		}
		if (a_inventory("nach_zug", v_i, g_akt_spieler).f_benutzt == 1 && a_inventory("nach_zug", v_i, g_akt_spieler).f_name == 39) {
			a_inventory("nach_zug", v_i, g_akt_spieler).f_status = (a_inventory("nach_zug", v_i, g_akt_spieler).f_status - 1);
			if (a_inventory("nach_zug", v_i, g_akt_spieler).f_status < 1) {
				if (a_inventory("nach_zug", v_i, g_akt_spieler).f_anzahl > 0) {
					a_inventory("nach_zug", v_i, g_akt_spieler).f_anzahl = (a_inventory("nach_zug", v_i, g_akt_spieler).f_anzahl - 1);
					a_inventory("nach_zug", v_i, g_akt_spieler).f_status = a_item("nach_zug", a_inventory("nach_zug", v_i, g_akt_spieler).f_name).f_attri1;
				} else {
					a_inventory("nach_zug", v_i, g_akt_spieler).f_benutzt = 0;
					a_spieler("nach_zug", g_akt_spieler).f_light = (a_spieler("nach_zug", g_akt_spieler).f_light - 4);
				}
			}
		}
	}
	if (a_spieler("nach_zug", g_akt_spieler).f_fluch == 2) {
		p_spielerschaden(1, 1, 18, 0, 0);
	}
	if (a_spieler("nach_zug", g_akt_spieler).f_fluchdauer == 1) {
		a_spieler("nach_zug", g_akt_spieler).f_fluchdauer = 0;
		a_spieler("nach_zug", g_akt_spieler).f_fluch = 0;
	} else {
		if (a_spieler("nach_zug", g_akt_spieler).f_fluchdauer > 1) {
			a_spieler("nach_zug", g_akt_spieler).f_fluchdauer = (a_spieler("nach_zug", g_akt_spieler).f_fluchdauer - 1);
		}
	}
	if (a_spieler("nach_zug", g_akt_spieler).f_betrunken > 0) {
		a_spieler("nach_zug", g_akt_spieler).f_betrunken = (a_spieler("nach_zug", g_akt_spieler).f_betrunken - 1);
	}
	if (a_spieler("nach_zug", g_akt_spieler).f_krankheit > 0) {
		if (p_get_chance(100) < 20) {
			p_spielerschaden(1, 2, 10, 0, 0);
		}
		if (p_get_chance(100) < 5) {
			a_spieler("nach_zug", g_akt_spieler).f_krankheit = (a_spieler("nach_zug", g_akt_spieler).f_krankheit + 1);
		}
		a_spieler("nach_zug", g_akt_spieler).f_krankheitdauer = (a_spieler("nach_zug", g_akt_spieler).f_krankheitdauer - 1);
		if (!a_spieler("nach_zug", g_akt_spieler).f_krankheitdauer) {
			a_spieler("nach_zug", g_akt_spieler).f_krankheit = 0;
		}
	}
	if (a_spieler("nach_zug", g_akt_spieler).f_poison == 1) {
		p_spielerschaden(1, 2, 10, 0, 0);
		a_spieler("nach_zug", g_akt_spieler).f_poison = 0;
		if (p_get_chance(102) < 10) {
			p_message(625, 4);
			a_spieler("nach_zug", g_akt_spieler).f_giftlehre = (a_spieler("nach_zug", g_akt_spieler).f_giftlehre + 1);
		}
	}
	if (a_spieler("nach_zug", g_akt_spieler).f_poison > 1) {
		v_poison_dam = ((a_spieler("nach_zug", g_akt_spieler).f_poison / 20) + 1);
		if (a_spieler("nach_zug", g_akt_spieler).f_fluch != 12) {
			a_spieler("nach_zug", g_akt_spieler).f_poison = (a_spieler("nach_zug", g_akt_spieler).f_poison - v_poison_dam);
			if (a_spieler("nach_zug", g_akt_spieler).f_poison > 1) {
				if (p_get_chance(100) < (a_spieler("nach_zug", g_akt_spieler).f_giftlehre * 2)) {
					a_spieler("nach_zug", g_akt_spieler).f_poison = (a_spieler("nach_zug", g_akt_spieler).f_poison - 1);
				}
			}
			if (a_skills("nach_zug", 86, g_akt_spieler).f_gewaehlt == 1 && a_spieler("nach_zug", g_akt_spieler).f_poison > 1) {
				a_spieler("nach_zug", g_akt_spieler).f_poison = (a_spieler("nach_zug", g_akt_spieler).f_poison - v_poison_dam);
			}
		} else {
			p_message(256, 6);
		}
		if (a_skills("nach_zug", 128, g_akt_spieler).f_gewaehlt == 1) {
			p_spielerschaden((v_poison_dam * 2), 2, 10, 0, 0);
		} else {
			p_spielerschaden(v_poison_dam, 2, 10, 0, 0);
		}
	}
	v_processed_already = 0;
	for (v_i = 1; v_i <= (g_akt_spieler - 1); v_i += 1) {
		if (a_spieler("nach_zug", v_i).f_level == a_spieler("nach_zug", g_akt_spieler).f_level && a_spieler("nach_zug", v_i).f_status == 1) {
			v_processed_already = 1;
			break;
		}
	}
	if (!v_processed_already) {
		if (g_spinnenkoenigin > 0 && p_get_chance(50)) {
			p_monster_setzen(a_spieler("nach_zug", g_akt_spieler).f_level, p_monster_random(a_spieler("nach_zug", g_akt_spieler).f_level, 8));
		}
		if (g_goblinkoenig > 0 && p_get_chance(50)) {
			p_monster_setzen(a_spieler("nach_zug", g_akt_spieler).f_level, p_monster_random(a_spieler("nach_zug", g_akt_spieler).f_level, 4));
		}
		if (g_untotenherr > 0 && p_get_chance(50)) {
			p_monster_setzen(a_spieler("nach_zug", g_akt_spieler).f_level, p_monster_random(a_spieler("nach_zug", g_akt_spieler).f_level, 3));
		}
		p_changecurrentelement(ll_monster_list, a_first_monster("nach_zug", a_spieler("nach_zug", g_akt_spieler).f_level).f_p);
		while (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z == a_spieler("nach_zug", g_akt_spieler).f_level) {
			v_posx = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x - a_spieler("nach_zug", g_akt_spieler).f_character_x);
			v_posy = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y - a_spieler("nach_zug", g_akt_spieler).f_character_y);
			v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
			if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 4) {
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration - 1);
				if (!LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration) {
					LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 0;
				}
				if (v_posx >= -6 && v_posx <= 6 && v_posy >= -6 && v_posy <= 6) {
					p_laby_screen2();
					p_clipsprite(38, 0, 224, 32, 32);
					p_displaytransparentsprite(38, (160 + (v_posx * 32)), (160 + (v_posy * 32)));
					v_wohin = p_screenoutput();
					p_startdrawing(v_wohin);
					p_drawingmode(1);
					p_frontcolor(p_rgb(255, 255, 255));
					p_drawtext((172 + (v_posx * 32)), (172 + (v_posy * 32)), "2", -1, 0);
					p_stopdrawing();
					p_sound(p_random(12));
					p_flipbuffers(1);
					p_delay(g_mydelay);
					p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
				}
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp - 2);
				if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp < 1) {
					p_zerstoert(4, 0);
					p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
				}
			}
			if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 5) {
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration - 1);
				if (!LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration) {
					LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 0;
				}
			}
			if (p_has_trait2(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number, 43) && p_get_chance(100) < 5) {
				v_hugo = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number;
				v_xxx = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x;
				v_yyy = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y;
				v_zzz = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z;
				for (v_k = 1; v_k <= 4; v_k += 1) {
					if (p_free_for_monster((v_xxx + p_neighbour_offset(v_k, 0)), (v_yyy + p_neighbour_offset(v_k, 1)), v_zzz)) {
						p_setmonster((v_xxx + p_neighbour_offset(v_k, 0)), (v_yyy + p_neighbour_offset(v_k, 1)), v_zzz, v_hugo, a_monster("nach_zug", v_hugo).f_nr, a_monster("nach_zug", v_hugo).f_lebenspunkte, 0, 0, 0);
						break;
					}
				}
				p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
			}
			if (p_has_trait2(LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number, 16) && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp < a_monster("nach_zug", LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number).f_lebenspunkte && LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 4) {
				if (v_posx >= -6 && v_posx <= 6 && v_posy >= -6 && v_posy <= 6) {
					p_sound(16);
					for (v_jjj = 1; v_jjj <= 5; v_jjj += 1) {
						for (v_iii = 1; v_iii <= 4; v_iii += 1) {
							p_laby_screen2();
							p_clipsprite(17, ((v_iii * 40) - 40), 1, 39, 39);
							p_displaytransparentsprite(17, (156 + (v_posx * 32)), (156 + (v_posy * 32)));
							p_flipbuffers(1);
							p_delay(70);
						}
					}
				}
				p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = ((LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp + p_myrand2(5)) + 1);
				if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp > a_monster("nach_zug", LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number).f_lebenspunkte) {
					LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = a_monster("nach_zug", LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number).f_lebenspunkte;
				}
			}
			if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 6) {
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration - 1);
				if (!LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration) {
					LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 0;
				}
				v_schaden = (p_myrand(5) + 1);
				if (v_posx >= -6 && v_posx <= 6 && v_posy >= -6 && v_posy <= 6) {
					p_sound(54);
					for (v_jjj = 1; v_jjj <= 5; v_jjj += 1) {
						for (v_iii = 1; v_iii <= 2; v_iii += 1) {
							p_laby_screen2();
							p_clipsprite(37, ((v_iii * 32) - 32), 448, 32, 32);
							p_displaytransparentsprite(37, (156 + (v_posx * 32)), (156 + (v_posy * 32)));
							p_flipbuffers(1);
							p_delay(100);
						}
					}
					p_laby_screen2();
					p_clipsprite(38, 0, 224, 32, 32);
					p_displaytransparentsprite(38, (160 + (v_posx * 32)), (160 + (v_posy * 32)));
					v_wohin = p_screenoutput();
					p_startdrawing(v_wohin);
					p_drawingmode(1);
					p_frontcolor(p_rgb(255, 255, 255));
					p_drawtext((172 + (v_posx * 32)), (172 + (v_posy * 32)), p_str(v_schaden), -1, 0);
					p_stopdrawing();
					p_sound(p_random(12));
					p_flipbuffers(1);
					p_delay(g_mydelay);
					p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
				}
				LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp - v_schaden);
				if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_hp < 1) {
					p_zerstoert(2, 0);
					p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
				}
			}
			p_nextelement(ll_monster_list);
		}
	}
	if (p_random(1)) {
		if (v_level > 3) {
			p_monster_setzen(a_spieler("nach_zug", g_akt_spieler).f_level, p_monster_random(a_spieler("nach_zug", g_akt_spieler).f_level, a_sonderlevel("nach_zug", a_spieler("nach_zug", g_akt_spieler).f_level)));
		}
		if (v_level > 15) {
			p_monster_setzen(a_spieler("nach_zug", g_akt_spieler).f_level, p_monster_random(a_spieler("nach_zug", g_akt_spieler).f_level, a_sonderlevel("nach_zug", a_spieler("nach_zug", g_akt_spieler).f_level)));
		}
		if (v_level > 30) {
			p_monster_setzen(a_spieler("nach_zug", g_akt_spieler).f_level, p_monster_random(a_spieler("nach_zug", g_akt_spieler).f_level, a_sonderlevel("nach_zug", a_spieler("nach_zug", g_akt_spieler).f_level)));
		}
	}
	if (p_habich(151) > 0) {
		if (a_spieler("nach_zug", g_akt_spieler).f_lifepoints < p_maxlife()) {
			a_spieler("nach_zug", g_akt_spieler).f_lifepoints = (a_spieler("nach_zug", g_akt_spieler).f_lifepoints + 1);
			if (a_spieler("nach_zug", g_akt_spieler).f_lifepoints > p_maxlife()) {
				a_spieler("nach_zug", g_akt_spieler).f_lifepoints = p_maxlife();
			}
		}
	}
	if (p_habich(183) > 0) {
		p_gold_finden2(1);
	}
	if (p_habich(80) > 0) {
		if (a_spieler("nach_zug", g_akt_spieler).f_lifepoints < p_maxlife()) {
			a_spieler("nach_zug", g_akt_spieler).f_lifepoints = (a_spieler("nach_zug", g_akt_spieler).f_lifepoints + 1);
			if (a_spieler("nach_zug", g_akt_spieler).f_lifepoints > p_maxlife()) {
				a_spieler("nach_zug", g_akt_spieler).f_lifepoints = p_maxlife();
			}
			v_ring = 0;
			for (v_i = 1; v_i <= 50; v_i += 1) {
				if (a_inventory("nach_zug", v_i, g_akt_spieler).f_name == 221 && a_inventory("nach_zug", v_i, g_akt_spieler).f_benutzt == 1) {
					v_ring = v_i;
				}
			}
			if (v_ring > 0) {
				a_inventory("nach_zug", v_ring, g_akt_spieler).f_status = (a_inventory("nach_zug", v_ring, g_akt_spieler).f_status - 1);
				if (!a_inventory("nach_zug", v_ring, g_akt_spieler).f_status) {
					p_leeren(v_ring);
					p_message(257, 1);
					p_terminate(80, 221);
				}
			}
		}
	}
	a_spieler("nach_zug", g_akt_spieler).f_speed = p_maxspeed();
	if (a_spieler("nach_zug", g_akt_spieler).f_creature_typ > 0) {
		a_spieler("nach_zug", g_akt_spieler).f_creature_speed = p_creature_speed();
	}
}

static intptr_t p_naechster() {
	intptr_t v_aktiv = 0;
	intptr_t v_i = 0;
	if (g_nr_of_players > 1) {
		v_aktiv = 0;
		for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
			if (a_spieler("naechster", v_i).f_status == 1) {
				v_aktiv = 1;
			}
		}
		if (v_aktiv == 1) {
			do {
				g_akt_spieler = (g_akt_spieler + 1);
				if (g_akt_spieler > g_nr_of_players) {
					g_akt_spieler = 1;
				}
			} while (!(a_spieler("naechster", g_akt_spieler).f_status == 1));
		}
		if (a_spieler("naechster", g_akt_spieler).f_creature_typ > 0) {
			a_spieler("naechster", g_akt_spieler).f_creature_speed = p_creature_speed();
		}
		g_xmod = 0;
		g_ymod = 0;
		p_laby_screen();
		p_delay(200);
	}
}

static intptr_t p_neuer_level() {
	int16_t v_geg = 0;
	int16_t v_hugo = 0;
	intptr_t v_j = 0;
	a_spieler("neuer_level", g_akt_spieler).f_level = (a_spieler("neuer_level", g_akt_spieler).f_level + 1);
	if (a_spieler("neuer_level", g_akt_spieler).f_level > 150) {
		p_ende();
	}
	p_clearlist(ll_movementlist);
	if (a_spieler("neuer_level", g_akt_spieler).f_level > a_spieler("neuer_level", g_akt_spieler).f_maxlevel) {
		a_spieler("neuer_level", g_akt_spieler).f_maxlevel = a_spieler("neuer_level", g_akt_spieler).f_level;
		a_spieler("neuer_level", g_akt_spieler).f_portal = 1;
		a_spieler("neuer_level", g_akt_spieler).f_teleport = 1;
		a_spieler("neuer_level", g_akt_spieler).f_nexus = 1;
		a_spieler("neuer_level", g_akt_spieler).f_zauberbuch = 1;
		a_spieler("neuer_level", g_akt_spieler).f_kessel = 1;
		a_spieler("neuer_level", g_akt_spieler).f_udjat_ben = 1;
		a_spieler("neuer_level", g_akt_spieler).f_stehlen = 2;
		a_spieler("neuer_level", g_akt_spieler).f_armageddon = 1;
		a_spieler("neuer_level", g_akt_spieler).f_pestilence = 1;
		a_spieler("neuer_level", g_akt_spieler).f_drachenform = 1;
		a_spieler("neuer_level", g_akt_spieler).f_macht = 1;
		a_spieler("neuer_level", g_akt_spieler).f_magic_apple = 2;
		a_spieler("neuer_level", g_akt_spieler).f_refresh = 2;
		a_spieler("neuer_level", g_akt_spieler).f_heal = 3;
		a_spieler("neuer_level", g_akt_spieler).f_ease_pain = 3;
		a_spieler("neuer_level", g_akt_spieler).f_heal_others = 3;
		a_spieler("neuer_level", g_akt_spieler).f_full_healing = 3;
		if (a_skills("neuer_level", 36, g_akt_spieler).f_gewaehlt == 1) {
			for (v_j = 1; v_j <= 30; v_j += 1) {
				if (a_aktive("neuer_level", v_j, g_akt_spieler).f_dauer > 0 && a_aktive("neuer_level", v_j, g_akt_spieler).f_dauer != -1) {
					a_aktive("neuer_level", v_j, g_akt_spieler).f_nr = 0;
					a_aktive("neuer_level", v_j, g_akt_spieler).f_staerke = 0;
					a_aktive("neuer_level", v_j, g_akt_spieler).f_dauer = 0;
				}
			}
			a_spieler("neuer_level", g_akt_spieler).f_mana = p_maxmana();
		}
		if (a_skills("neuer_level", 87, g_akt_spieler).f_gewaehlt == 1) {
			a_spieler("neuer_level", g_akt_spieler).f_lifepoints = p_maxlife();
		}
		if (a_skills("neuer_level", 30, g_akt_spieler).f_gewaehlt == 1) {
			p_in_rucksack(20, 1, 0);
		}
		if (a_skills("neuer_level", 32, g_akt_spieler).f_gewaehlt == 1) {
			v_hugo = (p_myrand(6) + 1);
			switch (v_hugo) {
			case 1:
				v_geg = 147;
				break;
			case 2:
				v_geg = 190;
				break;
			case 3:
				v_geg = 158;
				break;
			case 4:
				v_geg = 170;
				break;
			case 5:
				v_geg = 171;
				break;
			case 6:
				v_geg = 172;
				break;
			case 7:
				v_geg = 173;
				break;
			}
			p_in_rucksack(v_geg, 1, 0);
		}
		if (a_skills("neuer_level", 96, g_akt_spieler).f_gewaehlt == 1 && a_skill_trader("neuer_level", a_spieler("neuer_level", g_akt_spieler).f_level) >= 0) {
			p_merchant(a_skill_trader("neuer_level", a_spieler("neuer_level", g_akt_spieler).f_level));
		}
		if (a_skills("neuer_level", 27, g_akt_spieler).f_gewaehlt == 1) {
			p_gold_finden2((a_spieler("neuer_level", g_akt_spieler).f_level * 5));
		}
		if (a_skills("neuer_level", 122, g_akt_spieler).f_gewaehlt == 1 && !(a_spieler("neuer_level", g_akt_spieler).f_level % 2)) {
			a_spieler("neuer_level", g_akt_spieler).f_mana += 1;
			a_spieler("neuer_level", g_akt_spieler).f_maxmana += 1;
		}
		if (a_skills("neuer_level", 130, g_akt_spieler).f_gewaehlt == 1 && a_level_curse("neuer_level", a_spieler("neuer_level", g_akt_spieler).f_level)) {
			p_message(29, 6);
			if (!a_spieler("neuer_level", g_akt_spieler).f_fluch) {
				a_spieler("neuer_level", g_akt_spieler).f_fluch = a_level_curse("neuer_level", a_spieler("neuer_level", g_akt_spieler).f_level);
				if (a_spieler("neuer_level", g_akt_spieler).f_fluch == 23) {
					p_sound(37);
				} else {
					p_sound(32);
				}
				a_spieler("neuer_level", g_akt_spieler).f_fluchdauer = ((p_random(6) + 5) + a_spieler("neuer_level", g_akt_spieler).f_level);
			} else {
				a_spieler("neuer_level", g_akt_spieler).f_fluchdauer = (((a_spieler("neuer_level", g_akt_spieler).f_fluchdauer + p_random(6)) + 5) + a_spieler("neuer_level", g_akt_spieler).f_level);
			}
		}
	}
	if (!a_groesse("neuer_level", a_spieler("neuer_level", g_akt_spieler).f_level)) {
		p_gen_laby(a_spieler("neuer_level", g_akt_spieler).f_level);
	}
	if (a_sonderlevel("neuer_level", a_spieler("neuer_level", g_akt_spieler).f_level) > 0) {
		p_sonderlevel_text(a_sonderlevel("neuer_level", a_spieler("neuer_level", g_akt_spieler).f_level));
	}
	if (a_levelmod("neuer_level", a_spieler("neuer_level", g_akt_spieler).f_level) > 0) {
		p_levelmodtext(a_levelmod("neuer_level", a_spieler("neuer_level", g_akt_spieler).f_level));
	}
	a_spieler("neuer_level", g_akt_spieler).f_character_x = a_eingangx("neuer_level", a_spieler("neuer_level", g_akt_spieler).f_level);
	a_spieler("neuer_level", g_akt_spieler).f_character_y = a_eingangy("neuer_level", a_spieler("neuer_level", g_akt_spieler).f_level);
	a_spieler("neuer_level", g_akt_spieler).f_speed = p_maxspeed();
	a_spieler("neuer_level", g_akt_spieler).f_creature_x = a_eingangx("neuer_level", a_spieler("neuer_level", g_akt_spieler).f_level);
	a_spieler("neuer_level", g_akt_spieler).f_creature_y = a_eingangy("neuer_level", a_spieler("neuer_level", g_akt_spieler).f_level);
}

static intptr_t p_on_waterfield() {
	intptr_t v_i = 0;
	a_spieler("on_waterfield", g_akt_spieler).f_durst = 0;
	a_spieler("on_waterfield", g_akt_spieler).f_verdursten = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_inventory("on_waterfield", v_i, g_akt_spieler).f_name == 193) {
			a_inventory("on_waterfield", v_i, g_akt_spieler).f_status = 7;
		}
	}
	if (!p_habich(48) && !p_habich(86) && !p_habich(88)) {
		if (!p_habich(49)) {
			if (a_spieler("on_waterfield", g_akt_spieler).f_in_water) {
				p_sound(35);
			} else {
				p_sound(34);
				a_spieler("on_waterfield", g_akt_spieler).f_in_water = 1;
			}
			if (!a_skills("on_waterfield", 114, g_akt_spieler).f_gewaehlt) {
				g_aktion = 1;
				if (a_spieler("on_waterfield", g_akt_spieler).f_fluch == 19) {
					p_spielerschaden(2, 3, 12, 0, 0);
				} else {
					p_spielerschaden(1, 3, 12, 0, 0);
				}
			}
		}
	}
}

static intptr_t p_optionen() {
	intptr_t v_aktuell = 0;
	intptr_t v_clicked = 0;
	intptr_t v_i = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_mouse_links = 0;
	intptr_t v_mouse_rechts = 0;
	intptr_t v_pressed = 0;
	intptr_t v_result = 0;
	intptr_t v_y = 0;
	g_akt_option = 9;
	g_raushier = 0;
	v_pressed = 0;
	do {
		p_fenster(0);
		p_screen2();
		p_optionen_rahmen();
		p_get_actual_options();
		p_read_joystick();
		p_examinekeyboard();
		a_addelaymax("optionen", 1) = g_selectdelay;
		if (p_keyboardpushed(274) || g_jay > 0) {
			if (p_autodelay(1, 1, -2)) {
				p_autodelay(1, 2, -2);
				if (g_akt_option < 22) {
					g_akt_option = (g_akt_option + 1);
				}
			}
		} else {
			if (p_keyboardpushed(273) || g_jay < 0) {
				if (p_autodelay(1, 1, -2)) {
					p_autodelay(1, 2, -2);
					if (g_akt_option > 0) {
						g_akt_option = (g_akt_option - 1);
					}
				}
			} else {
				p_autodelay(1, 3, -2);
			}
		}
		if (p_keyboardpushed(13)) {
			v_pressed = 1;
		}
		g_mauszauber = 0;
		v_y = 52;
		v_aktuell = 1;
		if (v_mmouse_x > 365 && v_mmouse_x < 610) {
			for (v_i = 1; v_i <= g_anzz; v_i += 1) {
				if (v_mmouse_y >= v_y && v_mmouse_y <= (v_y + g_yplus)) {
					g_mauszauber = v_aktuell;
				}
				v_y = (v_y + g_yplus);
				v_aktuell = (v_aktuell + 1);
			}
		}
		v_clicked = 0;
		if (v_mouse_links == 1 && g_mauszauber > 0) {
			v_clicked = 1;
		}
		if (v_mmouse_x >= 320 && v_mmouse_x <= 352 && v_mmouse_y >= 16 && v_mmouse_y <= 48) {
			p_clipsprite(6, 96, 32, 31, 31);
			if (v_mouse_links == 1) {
				g_raushier = 1;
			}
		} else {
			p_clipsprite(6, 64, 32, 31, 31);
		}
		p_displaytransparentsprite(6, 320, 16);
		if (!g_no_mouse) {
			v_result = p_examinemouse();
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mouse_links = p_mousebutton(1);
			v_mouse_rechts = p_mousebutton(2);
			p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		}
		if (v_clicked == 1 && g_mauszauber > 0) {
			if (!v_mouse_links) {
				p_menupoint_clicked();
				v_clicked = 0;
			}
		}
		if (v_pressed == 1) {
			if (p_keyboardpushed(13)) {
			} else {
				p_menupoint_selected();
				v_pressed = 0;
			}
		}
		p_flipbuffers(1);
	} while (!(g_raushier == 1 || v_mouse_rechts == 1 || a_jb("optionen", 1) == 1 || p_keyboardpushed(27)));
	p_autodelay(0, 5, -2);
}

static intptr_t p_pilz_essen(int16_t v_welchen) {
	a_spieler("pilz_essen", g_akt_spieler).f_hunger = (a_spieler("pilz_essen", g_akt_spieler).f_hunger - 10);
	if (a_spieler("pilz_essen", g_akt_spieler).f_hunger < 0) {
		a_spieler("pilz_essen", g_akt_spieler).f_hunger = 0;
	}
	switch (v_welchen) {
	case 0:
		p_message(38, 4);
		break;
	case 1:
		a_spieler("pilz_essen", g_akt_spieler).f_lifepoints = (a_spieler("pilz_essen", g_akt_spieler).f_lifepoints + 2);
		if (a_spieler("pilz_essen", g_akt_spieler).f_lifepoints > a_spieler("pilz_essen", g_akt_spieler).f_maxlifepoints) {
			a_spieler("pilz_essen", g_akt_spieler).f_lifepoints = a_spieler("pilz_essen", g_akt_spieler).f_maxlifepoints;
		}
		p_message(39, 4);
		break;
	case 2:
		a_spieler("pilz_essen", g_akt_spieler).f_lifepoints = (a_spieler("pilz_essen", g_akt_spieler).f_lifepoints + 4);
		if (a_spieler("pilz_essen", g_akt_spieler).f_lifepoints > a_spieler("pilz_essen", g_akt_spieler).f_maxlifepoints) {
			a_spieler("pilz_essen", g_akt_spieler).f_lifepoints = a_spieler("pilz_essen", g_akt_spieler).f_maxlifepoints;
		}
		p_message(39, 4);
		break;
	case 3:
		p_add_poison((5 + p_myrand2(10)));
		p_message(40, 4);
		break;
	case 4:
		p_add_poison((15 + p_myrand2(15)));
		p_message(40, 4);
		break;
	case 5:
		a_zauberliste("pilz_essen", (g_akt_zauber + g_akt_zauber_offset)) = 85;
		g_item_spell = (5 + p_myrand(5));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 6:
		p_message(41, 4);
		break;
	case 7:
		a_spieler("pilz_essen", g_akt_spieler).f_fluch = 5;
		a_spieler("pilz_essen", g_akt_spieler).f_fluchdauer = (p_myrand2(10) + 5);
		p_message(42, 4);
		break;
	case 8:
		a_spieler("pilz_essen", g_akt_spieler).f_mana = (a_spieler("pilz_essen", g_akt_spieler).f_mana + 2);
		if (a_spieler("pilz_essen", g_akt_spieler).f_mana > p_maxmana()) {
			a_spieler("pilz_essen", g_akt_spieler).f_mana = p_maxmana();
		}
		p_message(43, 4);
		break;
	case 9:
		a_spieler("pilz_essen", g_akt_spieler).f_mana = (a_spieler("pilz_essen", g_akt_spieler).f_mana + 4);
		if (a_spieler("pilz_essen", g_akt_spieler).f_mana > p_maxmana()) {
			a_spieler("pilz_essen", g_akt_spieler).f_mana = p_maxmana();
		}
		p_message(43, 4);
		break;
	default:
		p_message(38, 4);
		break;
	}
}

static intptr_t p_raum(int16_t v_act_nr_in_level) {
	int16_t v_akt_falle = 0;
	intptr_t v_anhaenger = 0;
	int16_t v_boden = 0;
	intptr_t v_falle = 0;
	intptr_t v_hugo = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_koenig = 0;
	intptr_t v_level = 0;
	intptr_t v_mon = 0;
	int16_t v_was = 0;
	int16_t v_welcher = 0;
	int16_t v_welches = 0;
	intptr_t v_zaehler = 0;
	for (v_i = 1; v_i <= 8; v_i += 1) {
		for (v_j = 1; v_j <= 8; v_j += 1) {
			a_automap("raum", (v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y)).f_feld[a_spieler("raum", g_akt_spieler).f_level] = 0;
		}
	}
	switch (LIST_CURRENT(ll_room_list,struct st_room_type).f_type) {
	case 1:
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 64, LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 65, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		break;
	case 2:
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 56, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 57, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 56, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 60, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 61, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 57, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 58, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 59, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 58, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 59, 0, 0);
		break;
	case 3:
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 8, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		break;
	case 4:
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 7, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		break;
	case 5:
		p_sonderlevel_text(19);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 15, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 15, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 15, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 16, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 15, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 15, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 15, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 16, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 15, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 15, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 15, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 16, 0, 0);
		break;
	case 6:
		p_sonderlevel_text(18);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 17, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 17, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 17, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 18, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 17, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 17, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 17, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 18, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 17, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 17, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 17, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 18, 0, 0);
		break;
	case 7:
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 78, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 79, g_nr_of_players, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		break;
	case 8:
		p_sonderlevel_text(28);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				v_welches = 1;
				do {
					v_welches = (p_random(169) + 1);
					v_zaehler = (v_zaehler + 1);
				} while (!(a_monster("raum", v_welches).f_minlevel <= a_spieler("raum", g_akt_spieler).f_level && !p_has_trait2(v_welches, 30)));
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
				p_setmonster((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, v_welches, a_monster("raum", v_welches).f_nr, a_monster("raum", v_welches).f_lebenspunkte, 0, 0, 0);
			}
		}
		a_spieler("raum", g_akt_spieler).f_character_x = (LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5);
		a_spieler("raum", g_akt_spieler).f_character_y = (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5);
		break;
	case 9:
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		v_was = p_finden2();
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 67, v_was, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		v_was = p_finden2();
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 68, v_was, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		v_was = p_finden2();
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 67, v_was, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		for (v_i = 3; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		break;
	case 10:
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		for (v_i = 1; v_i <= 3; v_i += 1) {
			for (v_j = 1; v_j <= 3; v_j += 1) {
				p_setlaby(((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x) + 3), ((v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y) + 3), a_spieler("raum", g_akt_spieler).f_level, 9, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
			}
		}
		for (v_i = 3; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		break;
	case 11:
		p_sonderlevel_text(12);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 8), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 8), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 8), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 8), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 8), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 8), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 8), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 8), a_spieler("raum", g_akt_spieler).f_level, 98, 1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		break;
	case 12:
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 54, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		break;
	case 13:
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		v_was = p_find1();
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 6, v_was, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		v_was = p_find1();
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 6, v_was, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		v_was = p_find1();
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 6, v_was, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		for (v_i = 3; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		break;
	case 14:
		p_sonderlevel_text(26);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			for (v_j = 2; v_j <= 7; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, 40, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
			}
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 42, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 42, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + v_i), a_spieler("raum", g_akt_spieler).f_level, 42, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + v_i), a_spieler("raum", g_akt_spieler).f_level, 42, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		}
		for (v_i = 3; v_i <= 6; v_i += 1) {
			v_hugo = 32;
			p_setmonster((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, v_hugo, a_monster("raum", v_hugo).f_nr, a_monster("raum", v_hugo).f_lebenspunkte, v_hugo, 0, 0);
		}
		v_hugo = 56;
		p_setmonster((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, v_hugo, a_monster("raum", v_hugo).f_nr, a_monster("raum", v_hugo).f_lebenspunkte, 0, 0, v_act_nr_in_level);
		LIST_CURRENT(ll_room_list,struct st_room_type).f_exit_x = (LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6);
		LIST_CURRENT(ll_room_list,struct st_room_type).f_exit_y = (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2);
		a_spieler("raum", g_akt_spieler).f_character_x = (LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4);
		a_spieler("raum", g_akt_spieler).f_character_y = (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6);
		p_laby_screen();
		g_xmod = 0;
		g_ymod = 0;
		break;
	case 15:
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 82, LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 65, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		break;
	case 16:
		v_boden = (113 + p_random(3));
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, v_boden, 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, (122 + p_random(9)), v_act_nr_in_level, v_boden);
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		break;
	case 17:
		p_sonderlevel_text(13);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			for (v_j = 2; v_j <= 7; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, 89, 0, 0);
			}
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 1, 0);
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 1, 0);
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + v_i), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 1, 0);
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + v_i), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 1, 0);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 5, 0, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 5, 0, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 5, 0, 89);
		v_was = p_finden2();
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 68, v_was, 89);
		v_hugo = 62;
		p_setmonster((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, v_hugo, a_monster("raum", v_hugo).f_nr, a_monster("raum", v_hugo).f_lebenspunkte, 0, 0, v_act_nr_in_level);
		LIST_CURRENT(ll_room_list,struct st_room_type).f_exit_x = (LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4);
		LIST_CURRENT(ll_room_list,struct st_room_type).f_exit_y = (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2);
		a_spieler("raum", g_akt_spieler).f_character_x = (LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4);
		a_spieler("raum", g_akt_spieler).f_character_y = (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6);
		p_laby_screen();
		g_xmod = 0;
		g_ymod = 0;
		break;
	case 18:
		p_sonderlevel_text(14);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		for (v_i = 2; v_i <= 6; v_i += 1) {
			for (v_j = 2; v_j <= 6; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, 110, 0, 0);
			}
		}
		v_was = p_finden2();
		p_setlaby((4 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (4 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, 68, v_was, 110);
		p_laby_screen();
		g_xmod = 0;
		g_ymod = 0;
		break;
	case 19:
		p_sonderlevel_text(15);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			for (v_j = 2; v_j <= 7; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, 110, 0, 0);
			}
		}
		p_setlaby((5 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (5 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, 118, LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((4 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (4 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
		p_setlaby((4 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (5 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
		p_setlaby((5 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (4 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
		p_laby_screen();
		g_xmod = 0;
		g_ymod = 0;
		break;
	case 20:
		p_sonderlevel_text(16);
		v_boden = (113 + p_random(3));
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, v_boden, 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 123, -1, v_boden);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 124, -1, v_boden);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 125, -1, v_boden);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 126, -1, v_boden);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 129, -1, v_boden);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 130, -1, v_boden);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 65, -1, v_boden);
		break;
	case 21:
		p_sonderlevel_text(17);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 9; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			for (v_j = 2; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, 89, 0, 0);
			}
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 1, 0);
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 8), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 1, 0);
		}
		for (v_i = 2; v_i <= 8; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + v_i), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 1, 0);
		}
		for (v_i = 2; v_i <= 8; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + v_i), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 1, 0);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 137, v_act_nr_in_level, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 138, v_act_nr_in_level, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 139, v_act_nr_in_level, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 140, v_act_nr_in_level, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 141, v_act_nr_in_level, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 142, v_act_nr_in_level, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 143, v_act_nr_in_level, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 144, v_act_nr_in_level, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 145, v_act_nr_in_level, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 146, v_act_nr_in_level, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 147, v_act_nr_in_level, 89);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 148, v_act_nr_in_level, 89);
		a_spieler("raum", g_akt_spieler).f_character_x = (LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4);
		a_spieler("raum", g_akt_spieler).f_character_y = (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7);
		LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 = 9;
		p_laby_screen();
		g_xmod = 0;
		g_ymod = 0;
		break;
	case 22:
		p_sonderlevel_text(20);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 1, 0);
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 1, 0);
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + v_i), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 1, 0);
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + v_i), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 1, 0);
		}
		v_was = p_finden2();
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 68, v_was, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		v_was = p_find1();
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 6, v_was, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		v_was = p_find1();
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 6, v_was, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 9, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 9, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 9, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		v_hugo = 78;
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
		p_setmonster((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, v_hugo, a_monster("raum", v_hugo).f_nr, a_monster("raum", v_hugo).f_lebenspunkte, 0, 0, 0);
		p_laby_screen();
		g_xmod = 0;
		g_ymod = 0;
		break;
	case 23:
		p_sonderlevel_text(21);
		v_boden = (113 + p_random(3));
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, v_boden, 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 129, 2, v_boden);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 8, 1, v_boden);
		break;
	case 24:
		p_sonderlevel_text(22);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			for (v_j = 2; v_j <= 7; v_j += 1) {
				if (p_random(100) < 90) {
					p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, 53, 1, 0);
				} else {
					p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, 72, p_wassermonster_random(a_spieler("raum", g_akt_spieler).f_level), 0);
				}
			}
		}
		for (v_i = 4; v_i <= 4; v_i += 1) {
			for (v_j = 4; v_j <= 5; v_j += 1) {
				v_hugo = p_random(100);
				if (v_hugo > 40 && v_hugo < 60) {
					p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, 160, 0, 0);
				}
				if (v_hugo >= 60 && v_hugo < 80) {
					v_was = p_find1();
					p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, 161, v_was, 0);
				}
				if (v_hugo >= 80 && v_hugo < 90) {
					p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, 163, 0, 0);
				}
				if (v_hugo >= 90) {
					v_was = p_finden2();
					p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, 162, v_was, 0);
				}
			}
		}
		p_setlaby((2 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (2 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
		p_setlaby((2 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (7 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
		p_setlaby((7 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (2 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
		p_setlaby((7 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (7 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
		p_laby_screen();
		g_xmod = 0;
		g_ymod = 0;
		break;
	case 25:
		p_sonderlevel_text(23);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 119, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 164, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		break;
	case 26:
		p_sonderlevel_text(24);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			for (v_j = 2; v_j <= 7; v_j += 1) {
				if (v_level < 10) {
					v_falle = (p_random(2) + 22);
				}
				if (v_level > 9) {
					v_falle = (p_random(8) + 22);
				}
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, v_falle, p_random(99), p_random(99));
			}
		}
		a_spieler("raum", g_akt_spieler).f_character_x = (LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4);
		a_spieler("raum", g_akt_spieler).f_character_y = (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4);
		p_laby_screen();
		g_xmod = 0;
		g_ymod = 0;
		break;
	case 27:
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 84, LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 65, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		break;
	case 28:
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 86, LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 65, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		break;
	case 29:
		p_sonderlevel_text(25);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		for (v_i = 3; v_i <= 7; v_i += 1) {
			for (v_j = 3; v_j <= 7; v_j += 1) {
				p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + v_j), a_spieler("raum", g_akt_spieler).f_level, 107, 0, 0);
			}
		}
		for (v_i = 3; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 102, 1, 0);
		}
		for (v_i = 3; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 102, 1, 0);
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + v_i), a_spieler("raum", g_akt_spieler).f_level, 102, 1, 0);
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + v_i), a_spieler("raum", g_akt_spieler).f_level, 102, 1, 0);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 196, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 195, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 197, 0, 0);
		v_welcher = p_random(2);
		switch (v_welcher) {
		case 0:
			v_koenig = 121;
			v_anhaenger = 125;
			a_spinnenkoenigin("raum", a_spieler("raum", g_akt_spieler).f_level) = 1;
			break;
		case 1:
			v_koenig = 122;
			v_anhaenger = 15;
			a_goblinkoenig("raum", a_spieler("raum", g_akt_spieler).f_level) = 1;
			break;
		case 2:
			v_koenig = 123;
			v_anhaenger = 16;
			a_untotenherr("raum", a_spieler("raum", g_akt_spieler).f_level) = 1;
			break;
		}
		p_setmonster((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, v_koenig, a_monster("raum", v_koenig).f_nr, a_monster("raum", v_koenig).f_lebenspunkte, 0, 0, v_act_nr_in_level);
		p_setmonster((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, v_anhaenger, a_monster("raum", v_anhaenger).f_nr, a_monster("raum", v_anhaenger).f_lebenspunkte, 0, 0, 0);
		LIST_CURRENT(ll_room_list,struct st_room_type).f_exit_x = (LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5);
		LIST_CURRENT(ll_room_list,struct st_room_type).f_exit_y = (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2);
		p_setmonster((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, v_anhaenger, a_monster("raum", v_anhaenger).f_nr, a_monster("raum", v_anhaenger).f_lebenspunkte, 0, 0, 0);
		a_spieler("raum", g_akt_spieler).f_character_x = (LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5);
		a_spieler("raum", g_akt_spieler).f_character_y = (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6);
		g_xmod = 0;
		g_ymod = 0;
		break;
	case 30:
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 87, LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 65, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 7), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 96, 0, 0);
		break;
	case 31:
		p_sonderlevel_text(29);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (2 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			p_setlaby((2 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			p_setlaby((7 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
		}
		for (v_i = 4; v_i <= 7; v_i += 1) {
			p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (7 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			p_setlaby((4 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
		}
		for (v_i = 3; v_i <= 7; v_i += 1) {
			if (a_spieler("raum", g_akt_spieler).f_level < 10) {
				v_akt_falle = (p_random(2) + 22);
			}
			if (a_spieler("raum", g_akt_spieler).f_level > 9) {
				v_akt_falle = (p_random(8) + 22);
			}
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + v_i), a_spieler("raum", g_akt_spieler).f_level, v_akt_falle, p_random(99), p_random(99));
		}
		for (v_i = 4; v_i <= 6; v_i += 1) {
			if (a_spieler("raum", g_akt_spieler).f_level < 10) {
				v_akt_falle = (p_random(2) + 22);
			}
			if (a_spieler("raum", g_akt_spieler).f_level > 9) {
				v_akt_falle = (p_random(8) + 22);
			}
			p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, v_akt_falle, p_random(99), p_random(99));
		}
		if (a_spieler("raum", g_akt_spieler).f_level < 10) {
			v_akt_falle = (p_random(2) + 22);
		}
		if (a_spieler("raum", g_akt_spieler).f_level > 9) {
			v_akt_falle = (p_random(8) + 22);
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, v_akt_falle, p_random(99), p_random(99));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 9, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 9, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 9, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 68, p_finden2(), a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		break;
	case 32:
		p_sonderlevel_text(30);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		for (v_i = 2; v_i <= 7; v_i += 1) {
			p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (2 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
		}
		for (v_i = 2; v_i <= 6; v_i += 1) {
			p_setlaby((2 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			p_setlaby((2 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			p_setlaby((7 + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
		}
		for (v_i = 4; v_i <= 7; v_i += 1) {
			p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (4 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (6 + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_mit_was("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
		}
		v_mon = 139;
		p_setmonster((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, v_mon, a_monster("raum", v_mon).f_nr, a_monster("raum", v_mon).f_lebenspunkte, 0, 0, 0);
		v_mon = 131;
		p_setmonster((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, v_mon, a_monster("raum", v_mon).f_nr, a_monster("raum", v_mon).f_lebenspunkte, 0, 0, 0);
		v_mon = 108;
		p_setmonster((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, v_mon, a_monster("raum", v_mon).f_nr, a_monster("raum", v_mon).f_lebenspunkte, 0, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 70, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 70, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 70, 2, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 9, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 6, p_finden2(), a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 231, 0, 0);
		break;
	case 33:
		p_sonderlevel_text(31);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 207, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 207, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 207, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 207, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 207, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 207, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 207, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 65, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 6, p_find1(), a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		for (v_i = 2; v_i <= 7; v_i += 1) {
			for (v_j = 2; v_j <= 7; v_j += 1) {
				if (p_random(100) > 50) {
					v_mon = p_ork();
					if (a_labyrinth("raum", a_spieler("raum", g_akt_spieler).f_level, (LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_j)).f_feld != 65) {
						p_setmonster((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + v_i), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + v_j), a_spieler("raum", g_akt_spieler).f_level, v_mon, a_monster("raum", v_mon).f_nr, a_monster("raum", v_mon).f_lebenspunkte, 0, 0, 0);
					}
				}
			}
		}
		break;
	case 34:
		p_sonderlevel_text(32);
		for (v_i = 1; v_i <= 8; v_i += 1) {
			for (v_j = 1; v_j <= 8; v_j += 1) {
				p_setlaby((v_i + LIST_CURRENT(ll_room_list,struct st_room_type).f_x), (v_j + LIST_CURRENT(ll_room_list,struct st_room_type).f_y), a_spieler("raum", g_akt_spieler).f_level, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level), 0, 0);
			}
		}
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 207, 0, a_inhalt("raum", a_spieler("raum", g_akt_spieler).f_level));
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 136, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 136, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 136, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, 136, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, 136, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 136, 0, 0);
		p_setlaby((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 136, 0, 0);
		v_mon = 37;
		p_setmonster((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 4), a_spieler("raum", g_akt_spieler).f_level, v_mon, a_monster("raum", v_mon).f_nr, a_monster("raum", v_mon).f_lebenspunkte, 0, 0, 0);
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, (65 + p_random(9)), 0, 0);
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, (65 + p_random(9)), 0, 0);
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, (65 + p_random(9)), 0, 0);
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 5), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, (65 + p_random(9)), 0, 0);
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 5), a_spieler("raum", g_akt_spieler).f_level, (65 + p_random(9)), 0, 0);
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, (65 + p_random(9)), 0, 0);
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 6), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, (65 + p_random(9)), 0, 0);
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 353, 0, 0);
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 4), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 2), a_spieler("raum", g_akt_spieler).f_level, 353, 0, 0);
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 353, 0, 0);
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 3), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 3), a_spieler("raum", g_akt_spieler).f_level, 353, 0, 0);
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 6), a_spieler("raum", g_akt_spieler).f_level, 353, 0, 0);
		p_setitem((LIST_CURRENT(ll_room_list,struct st_room_type).f_x + 2), (LIST_CURRENT(ll_room_list,struct st_room_type).f_y + 7), a_spieler("raum", g_akt_spieler).f_level, 353, 0, 0);
		break;
	}
	p_flipbuffers(1);
}

static intptr_t p_schnelltasten() {
	intptr_t v_j = 0;
	int8_t v_xx = 0;
	for (v_j = 1; v_j <= 10; v_j += 1) {
		if (p_keyboardpushed(a_num_keys("schnelltasten", v_j)) && a_quickspells("schnelltasten", v_j, g_akt_spieler) > 0) {
			a_zauberliste("schnelltasten", (g_akt_zauber + g_akt_zauber_offset)) = a_quickspells("schnelltasten", v_j, g_akt_spieler);
			p_cast_it();
			p_laby_screen();
			return 1;
		}
	}
	if (g_joystick_used == 1) {
		p_read_joystick();
		for (v_xx = 1; v_xx <= 8; v_xx += 1) {
			if (a_jb("schnelltasten", (v_xx + 4)) && a_quickspells2("schnelltasten", v_xx, g_akt_spieler) > 0) {
				a_zauberliste("schnelltasten", (g_akt_zauber + g_akt_zauber_offset)) = a_quickspells2("schnelltasten", v_xx, g_akt_spieler);
				p_cast_it();
				p_laby_screen();
				return 1;
			}
		}
	}
}

static intptr_t p_screen1(int16_t v_i) {
	int16_t v_okay = 0;
	p_clearscreen(p_rgb(0, 0, 0));
	p_draw_screen(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
	v_okay = 0;
	if (!a_skills("screen1", 80, g_akt_spieler).f_gewaehlt) {
		p_draw_screen3(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
	}
	if (!a_skills("screen1", 79, g_akt_spieler).f_gewaehlt) {
		p_draw_screen4(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
	}
	if (!a_skills("screen1", 81, g_akt_spieler).f_gewaehlt) {
		p_draw_screen7(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
	}
	p_show_sight();
	if (a_skills("screen1", 80, g_akt_spieler).f_gewaehlt == 1) {
		p_draw_screen3(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
	}
	if (a_skills("screen1", 79, g_akt_spieler).f_gewaehlt == 1) {
		p_draw_screen4(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
		if (!a_skills("screen1", 81, g_akt_spieler).f_gewaehlt) {
			p_draw_screen9(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
		}
	}
	if (a_skills("screen1", 81, g_akt_spieler).f_gewaehlt == 1) {
		p_draw_screen7(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
	}
	p_draw_characters(((g_xmod * v_i) * -1), ((g_ymod * v_i) * -1));
	p_draw_character(a_spieler("screen1", g_akt_spieler).f_face, g_frame, 0);
	p_laby_rahmen(0);
	p_show_logo();
	p_show_varys(0);
	p_show_buttons();
	p_show_schnellinventory();
}

static intptr_t p_screen2() {
	int16_t v_okay = 0;
	p_clearscreen(p_rgb(0, 0, 0));
	v_okay = 0;
	p_draw_screen(0, 0);
	if (!a_skills("screen2", 80, g_akt_spieler).f_gewaehlt) {
		p_draw_screen3(0, 0);
	}
	if (!a_skills("screen2", 79, g_akt_spieler).f_gewaehlt) {
		p_draw_screen4(0, 0);
	}
	if (!a_skills("screen2", 81, g_akt_spieler).f_gewaehlt) {
		p_draw_screen7(0, 0);
	}
	p_show_sight();
	if (a_skills("screen2", 80, g_akt_spieler).f_gewaehlt == 1) {
		p_draw_screen3(0, 0);
	}
	if (a_skills("screen2", 79, g_akt_spieler).f_gewaehlt == 1) {
		p_draw_screen4(0, 0);
		if (!a_skills("screen2", 81, g_akt_spieler).f_gewaehlt) {
			p_draw_screen9(0, 0);
		}
	}
	if (a_skills("screen2", 81, g_akt_spieler).f_gewaehlt == 1) {
		p_draw_screen7(0, 0);
	}
	p_draw_characters(0, 0);
	p_draw_character(a_spieler("screen2", g_akt_spieler).f_face, g_frame, 0);
	p_laby_rahmen(0);
	p_show_logo();
	p_show_varys(0);
	p_show_buttons();
	p_show_schnellinventory();
}

static intptr_t p_select_field(int16_t v_monster_lore) {
	int16_t v_akt_tile = 0;
	int16_t v_done = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	int16_t v_mon = 0;
	int16_t v_mouse_x_old = 0;
	int16_t v_mouse_y_old = 0;
	intptr_t v_mouseklick = 0;
	intptr_t v_result = 0;
	std::string v_was;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	intptr_t v_y = 0;
	intptr_t v_yn = 0;
	v_done = 0;
	do {
		p_fenster(0);
		v_result = p_examinemouse();
		v_mouse_x_old = p_mousex();
		v_mouse_y_old = p_mousey();
		g_mmouse_links = p_mousebutton(1);
		g_mmouse_rechts = p_mousebutton(2);
		p_examinekeyboard();
		p_read_joystick();
		a_addelaymax("select_field", 1) = g_selectdelay;
		if (p_keyboardpushed(273) || g_jay == -1) {
			if (p_autodelay(1, 1, -2)) {
				p_autodelay(1, 2, -2);
				g_spell_y = (g_spell_y - 1);
			}
		} else {
			if (p_keyboardpushed(274) || g_jay == 1) {
				if (p_autodelay(1, 1, -2)) {
					p_autodelay(1, 2, -2);
					g_spell_y = (g_spell_y + 1);
				}
			} else {
				if (p_keyboardpushed(276) || g_jax == -1) {
					if (p_autodelay(1, 1, -2)) {
						p_autodelay(1, 2, -2);
						g_spell_x = (g_spell_x - 1);
					}
				} else {
					if (p_keyboardpushed(275) || g_jax == 1) {
						if (p_autodelay(1, 1, -2)) {
							p_autodelay(1, 2, -2);
							g_spell_x = (g_spell_x + 1);
						}
					} else {
						p_autodelay(1, 3, -2);
					}
				}
			}
		}
		if (g_spell_x > 4) {
			g_spell_x = 4;
		}
		if (g_spell_y > 4) {
			g_spell_y = 4;
		}
		if (g_spell_x < -4) {
			g_spell_x = -4;
		}
		if (g_spell_y < -4) {
			g_spell_y = -4;
		}
		p_laby_screen2();
		v_x = 30;
		v_y = 30;
		v_mouseklick = 0;
		for (v_i = 1; v_i <= 9; v_i += 1) {
			for (v_j = 1; v_j <= 9; v_j += 1) {
				if (g_mmouse_x >= ((v_x + (v_i * 32)) - 32) && g_mmouse_x <= (v_x + (v_i * 32)) && g_mmouse_y >= ((v_y + (v_j * 32)) - 32) && g_mmouse_y <= (v_y + (v_j * 32))) {
					if (g_mmouse_x != v_mouse_x_old || g_mmouse_y != v_mouse_y_old) {
						v_mouse_x_old = g_mmouse_x;
						v_mouse_y_old = g_mmouse_y;
						g_spell_x = (v_i - 5);
						g_spell_y = (v_j - 5);
					}
					if (g_mmouse_links == 1) {
						v_mouseklick = 1;
					}
				}
			}
		}
		if (v_monster_lore == 1) {
			if (a_matrix("select_field", (7 + g_spell_x), (7 + g_spell_y)) <= p_radius()) {
				v_mon = p_getmonster((a_spieler("select_field", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("select_field", g_akt_spieler).f_character_y + g_spell_y), -1);
				if (v_mon && (!p_has_trait2(v_mon, 19) || p_habich(109) || p_habich(121) || a_skills("select_field", 81, g_akt_spieler).f_gewaehlt)) {
					v_was = a_monster("select_field", v_mon).f_name[(g_language + 1)];
				} else {
					v_akt_tile = a_labyrinth("select_field", a_spieler("select_field", g_akt_spieler).f_level, (a_spieler("select_field", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("select_field", g_akt_spieler).f_character_y + g_spell_y)).f_feld;
					v_was = a_fields("select_field", v_akt_tile).f_description[(1 + g_language)];
				}
				v_x = 25;
				v_yn = 365;
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_drawingmode(1);
				p_frontcolor(p_rgb(255, 255, 255));
				p_drawtext(v_x, v_yn, v_was, -1, 0);
				p_stopdrawing();
			}
		}
		p_clipsprite(1, 0, 32, 32, 32);
		p_displaytransparentsprite(1, (160 + (g_spell_x * 32)), (160 + (g_spell_y * 32)));
		p_draw_mousepointer(g_mmouse_x, g_mmouse_y);
		p_flipbuffers(1);
		if (p_keyboardpushed(32) || p_keyboardpushed(13) || p_keyboardpushed(102) || p_keyboardpushed(97) || p_keyboardpushed(108)) {
			if (v_done == 1) {
				v_done = 2;
			}
		} else {
			if (!v_done) {
				v_done = 1;
			}
		}
		if (p_keyboardpushed(27) || g_mmouse_rechts == 1) {
			return 0;
		}
	} while (!(v_done == 2 || v_mouseklick == 1 || a_jb("select_field", 1)));
	p_autodelay(0, 5, -2);
	return 1;
}

static intptr_t p_shapechange(int16_t v_type, int16_t v_spell) {
	int16_t v_special = 0;
	if (a_spieler("shapechange", g_akt_spieler).f_mana > (p_zauberkosten(v_type) - 1) || g_item_spell) {
		p_zug_verlieren();
		p_mana_verlieren(v_type);
		v_special = p_erfolgreich(v_type);
		if (v_special > 0) {
			p_sound(28);
			p_sternchen(160, 160, 5);
			p_eintragen(v_type, 1, (((a_spells("shapechange", v_type).f_duration * p_power(v_spell)) * v_special) * p_get_weaving(-1)), 0);
		}
	} else {
		p_message(194, 2);
	}
}

static intptr_t p_show_schnellinventory() {
	intptr_t v_aktuell = 0;
	intptr_t v_i = 0;
	int16_t v_menuposx = 0;
	int16_t v_menuposy = 0;
	int16_t v_sprite_x = 0;
	int16_t v_sprite_y = 0;
	intptr_t v_wohin = 0;
	v_menuposx = 23;
	v_menuposy = 431;
	for (v_i = 1; v_i <= 10; v_i += 1) {
		v_aktuell = 0;
		if (a_inventory("show_schnellinventory", (v_i + 40), g_akt_spieler).f_benutzt == 1) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_frontcolor(p_rgb(120, 120, 120));
			p_box((v_menuposx + ((v_i * 32) - 31)), (v_menuposy + 1), 30, 30, -1);
			p_stopdrawing();
		}
		if (g_mmouse_x > ((v_menuposx + (v_i * 32)) - 32) && g_mmouse_x < (v_menuposx + (v_i * 32)) && g_mmouse_y > v_menuposy && g_mmouse_y < (v_menuposy + 32)) {
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_frontcolor(p_rgb(0, 0, 0));
			p_box(400, 300, 224, 45, -1);
			p_stopdrawing();
			p_describe((v_i + 40), 400, 300, -1, -1);
			p_clipsprite(8, 224, 320, 32, 32);
			p_displaytransparentsprite(8, ((v_menuposx + (v_i * 32)) - 32), v_menuposy);
			v_aktuell = 1;
			if (g_mmouse_links == 1 && !g_aktion) {
				g_aktion = 1;
				g_feld = (v_i + 40);
				if (a_inventory("show_schnellinventory", g_feld, g_akt_spieler).f_name) {
					if (!a_inventory("show_schnellinventory", g_feld, g_akt_spieler).f_benutzt) {
						g_do_it = 1;
						p_itemtest();
						g_do_it = 0;
					} else {
						g_do_it2 = 1;
						p_itemtest();
						g_do_it2 = 0;
					}
					p_laby_screen();
					p_delay(100);
					throw Lv_nach_zauber;
				}
			}
		} else {
			p_clipsprite(8, 480, 64, 32, 32);
			p_displaytransparentsprite(8, ((v_menuposx + (v_i * 32)) - 32), v_menuposy);
		}
		if (a_inventory("show_schnellinventory", (v_i + 40), g_akt_spieler).f_name) {
			v_sprite_x = a_inventory("show_schnellinventory", (v_i + 40), g_akt_spieler).f_name;
			if (v_sprite_x == 46 && a_inventory("show_schnellinventory", (v_i + 40), g_akt_spieler).f_benutzt == 1) {
				v_sprite_x = 47;
			}
			if (v_sprite_x == 39 && a_inventory("show_schnellinventory", (v_i + 40), g_akt_spieler).f_benutzt == 1) {
				v_sprite_x = 40;
			}
			v_sprite_y = 0;
			if (v_sprite_x > 16) {
				do {
					v_sprite_y = (v_sprite_y + 1);
					v_sprite_x = (v_sprite_x - 16);
				} while (!(v_sprite_x < 17));
			}
			p_clipsprite(8, ((v_sprite_x * 32) - 32), (v_sprite_y * 32), 32, 32);
			p_displaytransparentsprite(8, ((v_menuposx + (v_i * 32)) - 32), v_menuposy);
			if (a_inventory("show_schnellinventory", (v_i + 40), g_akt_spieler).f_anzahl > 0) {
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_frontcolor(p_rgb(255, 255, 255));
				p_drawingmode(1);
				p_drawtext((((v_menuposx + (v_i * 32)) - 2) - p_textwidth(p_str(((int64_t) a_inventory("show_schnellinventory", (v_i + 40), g_akt_spieler).f_anzahl + 1)))), (v_menuposy + 18), p_str(((int64_t) a_inventory("show_schnellinventory", (v_i + 40), g_akt_spieler).f_anzahl + 1)), -1, 0);
				p_stopdrawing();
			}
		}
	}
}

static intptr_t p_sog() {
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	for (v_j = 1; v_j <= 5; v_j += 1) {
		for (v_i = 1; v_i <= 4; v_i += 1) {
			p_laby_screen2();
			if (v_i == 1) {
				p_clipsprite(17, 80, 40, 39, 39);
			}
			if (v_i == 2) {
				p_clipsprite(17, 120, 40, 39, 39);
			}
			if (v_i == 3) {
				p_clipsprite(17, 1, 80, 39, 39);
			}
			if (v_i == 4) {
				p_clipsprite(17, 40, 80, 39, 39);
			}
			p_displaytransparentsprite(17, (156 + (g_spell_x * 32)), (156 + (g_spell_y * 32)));
			p_flipbuffers(1);
			p_delay(90);
		}
	}
}

static intptr_t p_sonderfeld() {
	intptr_t v_egon = 0;
	int16_t v_entdecken = 0;
	intptr_t v_gef_rolle = 0;
	intptr_t v_hugo = 0;
	intptr_t v_i = 0;
	int16_t v_inhalt_x = 0;
	int16_t v_inhalt_y = 0;
	intptr_t v_k = 0;
	intptr_t v_nach_kampf = 0;
	intptr_t v_obje = 0;
	int16_t v_stiefel = 0;
	int16_t v_type = 0;
	int16_t v_welches = 0;
	int16_t v_xoffs = 0;
	intptr_t v_xsave = 0;
	int16_t v_yoffs = 0;
	intptr_t v_ysave = 0;
	v_inhalt_x = a_inhalt("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level);
	v_inhalt_y = 0;
	if (v_inhalt_x > 10) {
		do {
			v_inhalt_y = (v_inhalt_y + 1);
			v_inhalt_x = (v_inhalt_x - 10);
		} while (!(v_inhalt_x < 11));
	}
	if (v_inhalt_x == 10) {
		v_inhalt_x = 0;
		v_inhalt_y = (v_inhalt_y + 1);
	}
	if (g_bewegt == 1) {
		v_type = a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_feld;
		if (!a_fields("sonderfeld", v_type).f_water) {
			a_spieler("sonderfeld", g_akt_spieler).f_in_water = 0;
		}
		switch (v_type) {
		case 79:
			if (a_skills("sonderfeld", 105, g_akt_spieler).f_gewaehlt == 1 || a_skills("sonderfeld", 106, g_akt_spieler).f_gewaehlt == 1 || a_skills("sonderfeld", 107, g_akt_spieler).f_gewaehlt == 1 || a_skills("sonderfeld", 108, g_akt_spieler).f_gewaehlt == 1 || a_skills("sonderfeld", 109, g_akt_spieler).f_gewaehlt == 1 || a_skills("sonderfeld", 110, g_akt_spieler).f_gewaehlt == 1) {
				if (a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_stat1 > 0) {
					a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_stat1 = (a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_stat1 - 1);
					p_altar();
					a_spieler("sonderfeld", g_akt_spieler).f_character_y = (a_spieler("sonderfeld", g_akt_spieler).f_character_y - 1);
					p_laby_screen();
				} else {
					p_message(654, 5);
				}
			} else {
				p_message(655, 5);
			}
			g_aktion = 1;
			break;
		case 93:
			if (!a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_stat1) {
				p_message(446, 1);
				a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_stat1 = 1;
			}
			break;
		case 98:
			g_aktion = 1;
			if (a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_stat1 == 1) {
				a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_stat1 = 0;
				if (p_get_chance(100) < 30) {
					v_hugo = p_random(7);
					if (!v_hugo || v_hugo == 1 || v_hugo == 2) {
						v_egon = (p_random(2) + 1);
						if (v_egon == 1) {
							v_welches = 4;
						}
						if (v_egon == 2) {
							v_welches = 16;
						}
						if (v_egon == 3) {
							v_welches = 22;
						}
						p_hinterhalt(v_welches);
					}
					if (v_hugo == 3 || v_hugo == 4) {
						p_gold_stack();
					}
					if (v_hugo == 5) {
						v_obje = p_find1();
						p_in_rucksack(v_obje, 1, 0);
						if (v_obje >= 75 && v_obje <= 112 && !(a_mischen("sonderfeld", (v_obje - 75)).f_learned & p_pm(0))) {
							v_obje = 998;
						}
						p_nachricht2(6, v_obje);
					}
					if (v_hugo == 6 || v_hugo == 7) {
						p_in_rucksack(1, 1, 0);
					}
				} else {
					p_message(445, 1);
				}
			}
			break;
		case 18:
			if (a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_stat1 != 1) {
				if (a_spieler("sonderfeld", g_akt_spieler).f_fluch != 16) {
					a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_stat1 = 1;
					if (p_get_chance(100) < (20 + (p_luck() * 5))) {
						p_sound(14);
						v_obje = (p_random(37) + 75);
						p_in_rucksack(v_obje, 1, 0);
						p_message(309, 5);
					}
				} else {
					p_message(7, 6);
				}
				g_aktion = 1;
			}
			break;
		case 16:
			if (a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_stat1 != 1) {
				if (a_spieler("sonderfeld", g_akt_spieler).f_fluch != 16) {
					a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_stat1 = 1;
					if (p_get_chance(100) < (20 + (p_luck() * 5))) {
						p_sound(14);
						v_gef_rolle = (v_gef_rolle + 1);
						p_in_rucksack(38, 1, 0);
						p_message(310, 5);
					}
				} else {
					p_message(7, 6);
				}
				g_aktion = 1;
			}
			break;
		case 81:
			if (!a_skills("sonderfeld", 86, g_akt_spieler).f_gewaehlt && !p_habich(130)) {
				g_aktion = 1;
				p_add_poison(10);
			} else {
				p_message(256, 4);
			}
			break;
		case 201:
			if (!a_skills("sonderfeld", 86, g_akt_spieler).f_gewaehlt && !p_habich(130)) {
				p_add_poison(10);
			} else {
				p_message(256, 4);
			}
			break;
		case 40:
			if (!p_habich(7) && !p_habich(70)) {
				p_spielerschaden(1, 1, 11, 0, 0);
			}
			g_aktion = 1;
			break;
		case 41:
			if (!p_habich(7) && !p_habich(70)) {
				p_spielerschaden(2, 1, 11, 0, 0);
			}
			g_aktion = 1;
			break;
		case 110:
			if (!p_habich(7) && !p_habich(70) && !p_habich(48) && !p_habich(86) && !p_habich(88)) {
				if (!a_sonderlevel("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level)) {
					p_spielerschaden(5, 1, 11, 0, 0);
					g_aktion = 1;
				}
			}
			break;
		case 53:
			if (!(p_habich(48) && p_habich(86) && p_habich(88) && p_habich(49))) {
				if (a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_stat1 == 1) {
					a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y).f_stat1 = 0;
					if (p_get_chance(100) < 20) {
						p_gold_stack();
					}
				}
			}
			p_on_waterfield();
			break;
		case 160:
			p_on_waterfield();
			break;
		case 161:
			p_on_waterfield();
			break;
		case 163:
			p_on_waterfield();
			break;
		case 162:
			p_on_waterfield();
			break;
		case 74:
			p_sound(14);
			p_sternchen(156, 156, 4);
			v_xsave = a_spieler("sonderfeld", g_akt_spieler).f_character_x;
			v_ysave = a_spieler("sonderfeld", g_akt_spieler).f_character_y;
			a_spieler("sonderfeld", g_akt_spieler).f_character_x = a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, v_xsave, v_ysave).f_stat1;
			a_spieler("sonderfeld", g_akt_spieler).f_character_y = a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, v_xsave, v_ysave).f_stat2;
			p_clearlist(ll_movementlist);
			p_update_automap();
			p_laby_screen();
			v_nach_kampf = 1;
			break;
		case 209:
			p_sound(46);
			p_setlaby(a_spieler("sonderfeld", g_akt_spieler).f_character_x, a_spieler("sonderfeld", g_akt_spieler).f_character_y, a_spieler("sonderfeld", g_akt_spieler).f_level, 210, 0, 0);
			break;
		case 208:
			v_stiefel = 0;
			for (v_i = 1; v_i <= 50; v_i += 1) {
				if (a_item("sonderfeld", a_inventory("sonderfeld", v_i, g_akt_spieler).f_name).f_type == 8 && a_inventory("sonderfeld", v_i, g_akt_spieler).f_benutzt == 1) {
					v_stiefel = v_i;
				}
			}
			if (p_habich(48) || p_habich(86) || p_habich(88)) {
				p_message(865, 2);
			} else {
				if (!v_stiefel) {
					if (p_habich(124) > 0) {
						p_message(431, 2);
					} else {
						p_spielerschaden(1, 1, 17, 0, 0);
						p_message(831, 3);
					}
				} else {
					p_message(832, 1);
					if (p_get_chance(996) < 5) {
						if (a_inventory("sonderfeld", v_stiefel, g_akt_spieler).f_status == 1) {
							a_inventory("sonderfeld", v_stiefel, g_akt_spieler).f_status = 2;
							p_un_equip(v_stiefel);
							p_message(451, 3);
						}
						if (!a_inventory("sonderfeld", v_stiefel, g_akt_spieler).f_status) {
							a_inventory("sonderfeld", v_stiefel, g_akt_spieler).f_status = 1;
							p_message(450, 3);
						}
					}
				}
			}
			break;
		case 65:
			if (!p_habich(7) && !p_habich(70)) {
				p_sound(15);
				p_spielerschaden(1, 1, 11, 0, 0);
				p_laby_screen();
				g_aktion = 1;
			}
			break;
		}
		v_entdecken = p_entdecken();
		for (v_k = 1; v_k <= 4; v_k += 1) {
			v_xoffs = p_neighbour_offset(v_k, 0);
			v_yoffs = p_neighbour_offset(v_k, 1);
			if ((a_spieler("sonderfeld", g_akt_spieler).f_character_x + v_xoffs) >= 0 && (a_spieler("sonderfeld", g_akt_spieler).f_character_y + v_yoffs) >= 0) {
				if (a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, (a_spieler("sonderfeld", g_akt_spieler).f_character_x + v_xoffs), (a_spieler("sonderfeld", g_akt_spieler).f_character_y + v_yoffs)).f_feld == 20) {
					if (a_labyrinth("sonderfeld", a_spieler("sonderfeld", g_akt_spieler).f_level, (a_spieler("sonderfeld", g_akt_spieler).f_character_x + v_xoffs), (a_spieler("sonderfeld", g_akt_spieler).f_character_y + v_yoffs)).f_stat1 < v_entdecken) {
						p_setlaby((a_spieler("sonderfeld", g_akt_spieler).f_character_x + v_xoffs), (a_spieler("sonderfeld", g_akt_spieler).f_character_y + v_yoffs), a_spieler("sonderfeld", g_akt_spieler).f_level, 21, 0, 0);
						p_sound(23);
						p_clearlist(ll_movementlist);
						p_laby_screen();
						p_delay(g_mydelay);
						if (a_skills("sonderfeld", 109, g_akt_spieler).f_gewaehlt == 1 && p_get_chance(105) < (100 - (a_spieler("sonderfeld", g_akt_spieler).f_level * 2))) {
							a_spieler("sonderfeld", g_akt_spieler).f_maxlifepoints = (a_spieler("sonderfeld", g_akt_spieler).f_maxlifepoints + 1);
							p_message(325, 5);
						}
					}
				}
			}
		}
		if (g_autopickup == 1) {
			p_autopickup();
		}
	}
}

static intptr_t p_spielerschaden(int16_t v_schaden, int16_t v_farbe, int16_t v_sterbegrund, int16_t v_modx, int16_t v_mody) {
	int16_t v_inhalt_x = 0;
	int16_t v_inhalt_y = 0;
	intptr_t v_wohin = 0;
	v_inhalt_x = a_inhalt("spielerschaden", a_spieler("spielerschaden", g_akt_spieler).f_level);
	v_inhalt_y = 0;
	if (v_inhalt_x > 10) {
		do {
			v_inhalt_y = (v_inhalt_y + 1);
			v_inhalt_x = (v_inhalt_x - 10);
		} while (!(v_inhalt_x < 11));
	}
	if (v_inhalt_x == 10) {
		v_inhalt_x = 0;
		v_inhalt_y = (v_inhalt_y + 1);
	}
	a_spieler("spielerschaden", g_akt_spieler).f_lifepoints = (a_spieler("spielerschaden", g_akt_spieler).f_lifepoints - v_schaden);
	if (v_sterbegrund != 24) {
		p_laby_screen2();
	}
	if (v_farbe == 1) {
		p_clipsprite(38, 0, 224, 32, 32);
	}
	if (v_farbe == 2) {
		p_clipsprite(38, 32, 224, 32, 32);
	}
	if (v_farbe == 3) {
		p_clipsprite(38, 64, 224, 32, 32);
	}
	p_displaytransparentsprite(38, (160 + (v_modx * 32)), (160 + (v_mody * 32)));
	p_sound(p_random(12));
	v_wohin = p_screenoutput();
	p_startdrawing(v_wohin);
	p_drawingmode(1);
	p_frontcolor(p_rgb(255, 255, 255));
	if (v_schaden < 10) {
		p_drawtext((172 + (v_modx * 32)), (168 + (v_mody * 32)), p_str(v_schaden), -1, 0);
	}
	if (v_schaden >= 10) {
		p_drawtext((166 + (v_modx * 32)), (168 + (v_mody * 32)), p_str(v_schaden), -1, 0);
	}
	if (v_schaden >= 100) {
		p_drawtext((163 + (v_modx * 32)), (168 + (v_mody * 32)), p_str(v_schaden), -1, 0);
	}
	p_stopdrawing();
	p_flipbuffers(1);
	p_delay(500);
	if (v_sterbegrund == 4 && a_spieler("spielerschaden", g_akt_spieler).f_lifepoints < 1) {
		a_spieler("spielerschaden", g_akt_spieler).f_lifepoints = 1;
	}
	if (a_spieler("spielerschaden", g_akt_spieler).f_lifepoints < 1) {
		a_spieler("spielerschaden", g_akt_spieler).f_cause_of_death = v_sterbegrund;
		p_tot();
	}
}

static intptr_t p_spraygrafik(intptr_t v_radius, intptr_t v_dauer) {
	intptr_t v_b = 0;
	intptr_t v_g = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_r = 0;
	intptr_t v_wohin = 0;
	intptr_t v_z = 0;
	v_z = 175;
	for (v_i = 1; v_i <= v_dauer; v_i += 1) {
		p_laby_screen2();
		for (v_j = 0; v_j <= 350; v_j += 10) {
			v_r = p_random(1);
			v_g = p_random(1);
			v_b = p_random(1);
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_drawingmode(1);
			p_frontcolor(p_rgb((v_r * 255), (v_g * 255), (v_b * 255)));
			p_line(v_z, v_z, (p_sin(v_j) * v_radius), (p_cos(v_j) * v_radius), -1);
			p_stopdrawing();
		}
		p_flipbuffers(1);
		p_delay(100);
	}
}

static intptr_t p_stehlen() {
	intptr_t v_blocked = 0;
	intptr_t v_destination = 0;
	intptr_t v_hugo = 0;
	int16_t v_mon_no = 0;
	intptr_t v_obje = 0;
	int16_t v_okay = 0;
	int16_t v_stehl = 0;
	g_spell_x = 0;
	g_spell_y = 0;
	v_destination = p_select_field(0);
	if (v_destination == 1) {
		v_blocked = 0;
		p_los(1);
		if (a_spieler("stehlen", g_akt_spieler).f_stehlen > 0) {
			if (!v_blocked) {
				v_mon_no = p_getmonster((a_spieler("stehlen", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("stehlen", g_akt_spieler).f_character_y + g_spell_y), -1);
				if (p_has_trait2(v_mon_no, 4)) {
					if (p_backpackspace() > 50) {
						p_message(428, 2);
					} else {
						if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 1) {
							p_message(522, 2);
						} else {
							g_aktion = 1;
							a_spieler("stehlen", g_akt_spieler).f_stehlen = (a_spieler("stehlen", g_akt_spieler).f_stehlen - 1);
							v_stehl = ((p_reflexe() * 8) + (p_luck() * 6));
							if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 2) {
								v_stehl = (v_stehl + 30);
							}
							if (v_stehl > 90) {
								v_stehl = 90;
							}
							if (p_get_chance(100) < v_stehl) {
								if (!p_has_trait2(v_mon_no, 27)) {
									v_hugo = 1;
								} else {
									v_hugo = p_get_chance(100);
								}
								if (v_hugo < 80) {
									v_obje = p_find1();
								} else {
									v_obje = p_finden2();
								}
								p_in_rucksack(v_obje, 1, 0);
								v_okay = 0;
								if (v_obje >= 75 && v_obje <= 112 && !(a_mischen("stehlen", (v_obje - 75)).f_learned & p_pm(0))) {
									p_message(199, 2);
									v_okay = 1;
								}
								if (v_obje == 38) {
									p_message(443, 2);
									v_okay = 1;
								}
								if (!v_okay) {
									p_nachricht2(44, v_obje);
								}
							} else {
								p_message(261, 2);
								LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 1;
							}
						}
					}
				} else {
					p_message(197, 2);
				}
			} else {
				p_message(196, 2);
			}
		} else {
			p_message(45, 2);
		}
	}
}

static intptr_t p_sternchen(int16_t v_x, int16_t v_y, int16_t v_stern) {
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	for (v_i = 1; v_i <= 20; v_i += 1) {
		a_xsprites("sternchen", v_i) = 0;
		a_ysprites("sternchen", v_i) = 0;
		a_fsprites("sternchen", v_i) = ((0 - v_i) - 1);
		a_rsprites("sternchen", v_i) = 1;
	}
	for (v_j = 1; v_j <= 30; v_j += 1) {
		p_laby_screen2();
		for (v_i = 1; v_i <= 20; v_i += 1) {
			a_fsprites("sternchen", v_i) = (a_fsprites("sternchen", v_i) + a_rsprites("sternchen", v_i));
			if (a_fsprites("sternchen", v_i) >= 4) {
				a_rsprites("sternchen", v_i) = -1;
			}
			if (a_fsprites("sternchen", v_i) == -1) {
				a_xsprites("sternchen", v_i) = p_random(32);
				a_ysprites("sternchen", v_i) = p_random(32);
				a_rsprites("sternchen", v_i) = 1;
			}
			if (a_fsprites("sternchen", v_i) >= 0) {
				p_clipsprite(20, (a_fsprites("sternchen", v_i) + (v_stern * 5)), ((v_stern * 9) - 9), 9, 9);
				p_displaytransparentsprite(20, ((v_x + a_xsprites("sternchen", v_i)) - 5), ((v_y + a_ysprites("sternchen", v_i)) - 5));
			}
		}
		p_flipbuffers(1);
		p_delay(50);
	}
}

static intptr_t p_teacher(int16_t v_which) {
	int16_t v_act_nr_in_level = 0;
	intptr_t v_aktion = 0;
	if (a_skills("teacher", 134, g_akt_spieler).f_gewaehlt == 1 || a_spieler("teacher", g_akt_spieler).f_fluch == 26) {
		p_message(327, 6);
		p_cleartile(a_spieler("teacher", g_akt_spieler).f_character_x, a_spieler("teacher", g_akt_spieler).f_character_y, -1);
	} else {
		if (a_labyrinth("teacher", a_spieler("teacher", g_akt_spieler).f_level, a_spieler("teacher", g_akt_spieler).f_character_x, a_spieler("teacher", g_akt_spieler).f_character_y).f_stat1 == -1) {
			p_gefaehrte(v_which);
		}
		if (a_labyrinth("teacher", a_spieler("teacher", g_akt_spieler).f_level, a_spieler("teacher", g_akt_spieler).f_character_x, a_spieler("teacher", g_akt_spieler).f_character_y).f_stat1 > 0) {
			v_act_nr_in_level = a_labyrinth("teacher", a_spieler("teacher", g_akt_spieler).f_level, a_spieler("teacher", g_akt_spieler).f_character_x, a_spieler("teacher", g_akt_spieler).f_character_y).f_stat1;
			p_lehrer(v_which, v_act_nr_in_level);
		}
	}
	p_laby_screen();
	v_aktion = 1;
}

static intptr_t p_tot() {
	intptr_t v_aktiv = 0;
	int8_t v_eintrag = 0;
	std::string v_endezeit;
	intptr_t v_herz = 0;
	intptr_t v_i = 0;
	intptr_t v_j = 0;
	intptr_t v_k = 0;
	std::string v_last_words;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	intptr_t v_mouse_x_old = 0;
	intptr_t v_mouse_y_old = 0;
	int16_t v_punkte = 0;
	intptr_t v_result = 0;
	intptr_t v_tot = 0;
	int16_t v_warten = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x = 0;
	int16_t v_xx = 0;
	intptr_t v_y = 0;
	int16_t v_yy = 0;
	intptr_t v_zaehler = 0;
	v_herz = 0;
	for (v_i = 1; v_i <= 50; v_i += 1) {
		if (a_inventory("tot", v_i, g_akt_spieler).f_name == 146) {
			v_herz = v_i;
		}
	}
	if (!v_herz) {
		p_sound(31);
		a_spieler("tot", g_akt_spieler).f_status = 3;
		a_spieler("tot", g_akt_spieler).f_creature_typ = 0;
		a_spieler("tot", g_akt_spieler).f_creature_lifepoints = 0;
		v_punkte = p_punkte();
		v_eintrag = 0;
		v_i = 1;
		do {
			if (v_punkte > a_hscores("tot", v_i).f_punkte) {
				v_eintrag = v_i;
			}
			v_i = (v_i + 1);
		} while (!(v_i > 30 || v_eintrag > 0));
		if (v_eintrag > 0) {
			v_warten = 0;
			v_xx = 100;
			v_yy = 120;
			do {
				p_fenster(0);
				p_clearscreen(p_rgb(0, 0, 0));
				p_laby_rahmen(0);
				p_show_logo();
				p_show_varys(0);
				p_clipsprite(19, 1, 1, 335, 335);
				p_displaytransparentsprite(19, 16, 16);
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_drawingmode(1);
				p_frontcolor(p_rgb(0, 0, 0));
				p_box(v_xx, v_yy, 150, 17, -1);
				p_drawtext(130, 40, a_message_text("tot", 83, (1 + g_language)), -1, 0);
				p_drawtext(80, 55, a_message_text("tot", 79, (1 + g_language)), -1, 0);
				p_drawtext(80, 70, a_message_text("tot", 80, (1 + g_language)), -1, 0);
				p_frontcolor(p_rgb(255, 255, 255));
				p_drawtext(v_xx, v_yy, g_myname, -1, 0);
				p_stopdrawing();
				v_result = p_examinemouse();
				v_mmouse_x = p_mousex();
				v_mmouse_y = p_mousey();
				v_mmouse_links = p_mousebutton(1);
				p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
				v_mouse_x_old = v_mmouse_x;
				v_mouse_y_old = v_mmouse_y;
				p_examinekeyboard();
				p_read_joystick();
				g_myname = p_keyboard_string(g_myname, 0);
				if (p_len(g_myname) > 25) {
					g_myname = p_mid(g_myname, 1, 25);
				}
				v_warten = (v_warten + 1);
				if (v_warten < 3) {
					v_wohin = p_screenoutput();
					p_startdrawing(v_wohin);
					p_drawingmode(1);
					p_frontcolor(p_rgb(255, 255, 255));
					p_line((v_xx + p_textwidth(g_myname)), v_yy, 0, 15, -1);
					p_line(((v_xx + 1) + p_textwidth(g_myname)), v_yy, 0, 15, -1);
					p_stopdrawing();
				}
				if (v_warten > 4) {
					v_warten = 0;
				}
				p_flipbuffers(1);
				p_delay(20);
			} while (!(p_keyboardpushed(13) || a_jb("tot", 1) == 1));
			v_j = 30;
			while (v_j > v_eintrag) {
				a_hscores("tot", v_j).f_version = a_hscores("tot", (v_j - 1)).f_version;
				a_hscores("tot", v_j).f_name = a_hscores("tot", (v_j - 1)).f_name;
				a_hscores("tot", v_j).f_level = a_hscores("tot", (v_j - 1)).f_level;
				a_hscores("tot", v_j).f_gold = a_hscores("tot", (v_j - 1)).f_gold;
				a_hscores("tot", v_j).f_mks = a_hscores("tot", (v_j - 1)).f_mks;
				a_hscores("tot", v_j).f_punkte = a_hscores("tot", (v_j - 1)).f_punkte;
				a_hscores("tot", v_j).f_maennchen = a_hscores("tot", (v_j - 1)).f_maennchen;
				a_hscores("tot", v_j).f_anfangszeit = a_hscores("tot", (v_j - 1)).f_anfangszeit;
				a_hscores("tot", v_j).f_endezeit = a_hscores("tot", (v_j - 1)).f_endezeit;
				a_hscores("tot", v_j).f_maxlifepoints = a_hscores("tot", (v_j - 1)).f_maxlifepoints;
				a_hscores("tot", v_j).f_maxmana = a_hscores("tot", (v_j - 1)).f_maxmana;
				a_hscores("tot", v_j).f_attack = a_hscores("tot", (v_j - 1)).f_attack;
				a_hscores("tot", v_j).f_dexterity = a_hscores("tot", (v_j - 1)).f_dexterity;
				a_hscores("tot", v_j).f_strength = a_hscores("tot", (v_j - 1)).f_strength;
				a_hscores("tot", v_j).f_maxspeed = a_hscores("tot", (v_j - 1)).f_maxspeed;
				a_hscores("tot", v_j).f_perception = a_hscores("tot", (v_j - 1)).f_perception;
				a_hscores("tot", v_j).f_luck_score = a_hscores("tot", (v_j - 1)).f_luck_score;
				a_hscores("tot", v_j).f_power_score = a_hscores("tot", (v_j - 1)).f_power_score;
				a_hscores("tot", v_j).f_circle = a_hscores("tot", (v_j - 1)).f_circle;
				a_hscores("tot", v_j).f_stabteile = a_hscores("tot", (v_j - 1)).f_stabteile;
				a_hscores("tot", v_j).f_moves = a_hscores("tot", (v_j - 1)).f_moves;
				a_hscores("tot", v_j).f_cause_of_death = a_hscores("tot", (v_j - 1)).f_cause_of_death;
				a_hscores("tot", v_j).f_cause_of_death_monster = a_hscores("tot", (v_j - 1)).f_cause_of_death_monster;
				for (v_k = 1; v_k <= 30; v_k += 1) {
					a_hscores("tot", v_j).f_skills[v_k] = a_hscores("tot", (v_j - 1)).f_skills[v_k];
				}
				v_j = (v_j - 1);
			}
			g_letzter_eintrag = v_eintrag;
			if (v_eintrag > 0) {
				v_endezeit = p_formatdate("%yyyy%mm%dd%hh%ii%ss", p_date());
				a_hscores("tot", v_eintrag).f_version = "4.3.2";
				a_hscores("tot", v_eintrag).f_name = a_spieler("tot", g_akt_spieler).f_name;
				a_hscores("tot", v_eintrag).f_level = a_spieler("tot", g_akt_spieler).f_maxlevel;
				a_hscores("tot", v_eintrag).f_gold = p_gold_anzahl();
				a_hscores("tot", v_eintrag).f_mks = a_spieler("tot", g_akt_spieler).f_mks;
				a_hscores("tot", v_eintrag).f_punkte = v_punkte;
				a_hscores("tot", v_eintrag).f_maennchen = a_spieler("tot", g_akt_spieler).f_maennchen;
				a_hscores("tot", v_eintrag).f_anfangszeit = g_anfangszeit;
				a_hscores("tot", v_eintrag).f_endezeit = v_endezeit;
				a_hscores("tot", v_eintrag).f_maxlifepoints = a_spieler("tot", g_akt_spieler).f_maxlifepoints;
				a_hscores("tot", v_eintrag).f_maxmana = a_spieler("tot", g_akt_spieler).f_maxmana;
				a_hscores("tot", v_eintrag).f_attack = a_spieler("tot", g_akt_spieler).f_attack;
				a_hscores("tot", v_eintrag).f_dexterity = a_spieler("tot", g_akt_spieler).f_dexterity;
				a_hscores("tot", v_eintrag).f_strength = a_spieler("tot", g_akt_spieler).f_strength;
				a_hscores("tot", v_eintrag).f_maxspeed = a_spieler("tot", g_akt_spieler).f_maxspeed;
				a_hscores("tot", v_eintrag).f_perception = a_spieler("tot", g_akt_spieler).f_perception;
				a_hscores("tot", v_eintrag).f_luck_score = a_spieler("tot", g_akt_spieler).f_luck_score;
				a_hscores("tot", v_eintrag).f_power_score = a_spieler("tot", g_akt_spieler).f_power_score;
				a_hscores("tot", v_eintrag).f_circle = a_spieler("tot", g_akt_spieler).f_circle;
				a_hscores("tot", v_eintrag).f_stabteile = p_anz_staffpieces();
				a_hscores("tot", v_eintrag).f_moves = a_spieler("tot", g_akt_spieler).f_moves;
				a_hscores("tot", v_eintrag).f_cause_of_death = a_spieler("tot", g_akt_spieler).f_cause_of_death;
				a_hscores("tot", v_eintrag).f_cause_of_death_monster = a_spieler("tot", g_akt_spieler).f_cause_of_death_monster;
				a_high_skill.dim("high_skill", 31);
				for (v_i = 1; v_i <= 30; v_i += 1) {
					a_high_skill("tot", v_i) = 0;
				}
				v_zaehler = 1;
				for (v_i = 2; v_i <= 144; v_i += 1) {
					if (a_skills("tot", v_i, g_akt_spieler).f_gewaehlt == 1) {
						a_high_skill("tot", v_zaehler) = a_skills("tot", v_i, g_akt_spieler).f_nummer;
						v_zaehler = (v_zaehler + 1);
					}
				}
				for (v_k = 1; v_k <= 30; v_k += 1) {
					a_hscores("tot", v_eintrag).f_skills[v_k] = a_high_skill("tot", v_k);
				}
				p_new_highscore(g_myname);
				p_show_highscore();
			}
		} else {
			do {
				p_fenster(0);
				p_clearscreen(p_rgb(0, 0, 0));
				p_laby_rahmen(0);
				p_show_logo();
				p_show_varys(0);
				p_clipsprite(19, 1, 1, 335, 335);
				p_displaytransparentsprite(19, 16, 16);
				v_wohin = p_screenoutput();
				p_startdrawing(v_wohin);
				p_drawingmode(1);
				p_frontcolor(p_rgb(255, 255, 255));
				p_drawtext(130, 25, p_nachricht4(83), -1, 0);
				p_stopdrawing();
				v_result = p_examinemouse();
				v_mmouse_x = p_mousex();
				v_mmouse_y = p_mousey();
				v_mmouse_links = p_mousebutton(1);
				p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
				v_mouse_x_old = v_mmouse_x;
				v_mouse_y_old = v_mmouse_y;
				p_examinekeyboard();
				p_flipbuffers(1);
			} while (!(v_mmouse_links == 1 || p_keyboardpushed(13) || a_jb("tot", 1) == 1));
		}
		v_aktiv = 0;
		for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
			if (a_spieler("tot", v_i).f_status == 1) {
				v_aktiv = 1;
			}
		}
		if (v_aktiv == 1) {
			p_naechster();
		} else {
			v_tot = 1;
			for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
				if (a_spieler("tot", v_i).f_status < 3) {
					v_tot = 0;
				}
			}
			if (v_tot == 1) {
				throw Lv_again;
			}
		}
	} else {
		p_leeren(v_herz);
		do {
			p_fenster(0);
			p_clearscreen(p_rgb(0, 0, 0));
			p_laby_rahmen(0);
			p_show_logo();
			p_show_varys(0);
			p_show_buttons();
			p_clipsprite(27, 1, 1, 335, 335);
			p_displaytransparentsprite(27, 16, 16);
			v_x = 160;
			v_y = 35;
			v_wohin = p_screenoutput();
			p_startdrawing(v_wohin);
			p_frontcolor(p_rgb(255, 1, 1));
			p_drawingmode(1);
			p_drawtext(v_x, v_y, p_nachricht4(176), -1, 0);
			v_y = ((v_y + g_yplus) + 5);
			p_drawtext(v_x, v_y, p_nachricht4(177), -1, 0);
			p_stopdrawing();
			p_examinekeyboard();
			v_result = p_examinemouse();
			v_mmouse_x = p_mousex();
			v_mmouse_y = p_mousey();
			v_mmouse_rechts = p_mousebutton(2);
			p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
			p_flipbuffers(1);
		} while (!(p_keyboardpushed(13) || v_mmouse_rechts == 1 || a_jb("tot", 1) == 1));
		a_spieler("tot", g_akt_spieler).f_lifepoints = p_maxlife();
		p_naechster();
	}
}

static intptr_t p_trinken(int16_t v_welchen) {
	intptr_t v_i = 0;
	a_spieler("trinken", g_akt_spieler).f_durst -= 10;
	if (a_spieler("trinken", g_akt_spieler).f_durst < 0) {
		a_spieler("trinken", g_akt_spieler).f_durst = 0;
	}
	switch (v_welchen) {
	case 0:
		p_message(38, 4);
		break;
	case 1:
		a_spieler("trinken", g_akt_spieler).f_lifepoints = ((a_spieler("trinken", g_akt_spieler).f_lifepoints + p_random(10)) + 3);
		if (a_spieler("trinken", g_akt_spieler).f_lifepoints > a_spieler("trinken", g_akt_spieler).f_maxlifepoints) {
			a_spieler("trinken", g_akt_spieler).f_lifepoints = a_spieler("trinken", g_akt_spieler).f_maxlifepoints;
		}
		p_message(46, 4);
		break;
	case 2:
		a_spieler("trinken", g_akt_spieler).f_lifepoints = p_maxlife();
		p_message(47, 4);
		break;
	case 3:
		if (p_habich(130) > 0) {
			p_message(256, 4);
		} else {
			p_add_poison((p_myrand2(10) + 1));
			p_message(40, 4);
		}
		break;
	case 4:
		if (p_habich(130) > 0) {
			p_message(256, 4);
		} else {
			p_add_poison((p_myrand2(15) + 15));
			p_message(40, 4);
		}
		break;
	case 5:
		p_aufsteigen2();
		break;
	case 6:
		for (v_i = 1; v_i <= 3; v_i += 1) {
			p_aufsteigen2();
		}
		break;
	case 7:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 85;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 8:
		p_message(41, 4);
		break;
	case 9:
		a_spieler("trinken", g_akt_spieler).f_fluch = 5;
		a_spieler("trinken", g_akt_spieler).f_fluchdauer = (p_myrand2(15) + 1);
		p_message(42, 4);
		break;
	case 10:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 48;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 11:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 18;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 12:
		a_spieler("trinken", g_akt_spieler).f_mana = ((a_spieler("trinken", g_akt_spieler).f_mana + p_myrand(10)) + 3);
		if (a_spieler("trinken", g_akt_spieler).f_mana > p_maxmana()) {
			a_spieler("trinken", g_akt_spieler).f_mana = p_maxmana();
		}
		p_message(43, 4);
		break;
	case 13:
		a_spieler("trinken", g_akt_spieler).f_mana = p_maxmana();
		p_message(43, 4);
		break;
	case 14:
		a_spieler("trinken", g_akt_spieler).f_poison = 0;
		p_message(222, 4);
		break;
	case 15:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 68;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 16:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 7;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 17:
		a_spieler("trinken", g_akt_spieler).f_mana = 0;
		p_message(222, 4);
		break;
	case 18:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 110;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 19:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 59;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 20:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 26;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 21:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 70;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 22:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 71;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 23:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 86;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 24:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 87;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 25:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 88;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 26:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 89;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 27:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 90;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 28:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 49;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 29:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 46;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 30:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 109;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 31:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 45;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 32:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 52;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 33:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 124;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 35:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 130;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 36:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 142;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 34:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 151;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	case 37:
		a_zauberliste("trinken", (g_akt_zauber + g_akt_zauber_offset)) = 154;
		g_item_spell = (5 + p_myrand(3));
		p_cast_it();
		g_item_spell = 0;
		break;
	default:
		p_message(38, 4);
		break;
	}
}

static intptr_t p_umwandeln(int16_t v_feld) {
	int16_t v_geg = 0;
	int16_t v_gewa = 0;
	intptr_t v_welche = 0;
	v_geg = 0;
	v_welche = p_select_inventory(565);
	v_gewa = 0;
	if (a_item("umwandeln", a_inventory("umwandeln", v_welche, g_akt_spieler).f_name).f_type == 13) {
		v_gewa = 1;
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 218 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 209 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 210) {
			v_geg = 190;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 199 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 217 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 213) {
			v_geg = 172;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 198 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 213) {
			v_geg = 173;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 211 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 197 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 215) {
			v_geg = 171;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 216 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 214) {
			v_geg = 158;
		}
	}
	if (a_item("umwandeln", a_inventory("umwandeln", v_welche, g_akt_spieler).f_name).f_klasse == 1) {
		v_gewa = 1;
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 218 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 209 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 210) {
			v_geg = 142;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 199 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 217) {
			v_geg = 143;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 198 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 213) {
			v_geg = 237;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 211 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 197 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 215) {
			v_geg = 144;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 216) {
			v_geg = 162;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 214) {
			v_geg = 162;
		}
	}
	if (a_item("umwandeln", a_inventory("umwandeln", v_welche, g_akt_spieler).f_name).f_klasse == 2) {
		v_gewa = 1;
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 218 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 209 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 210) {
			v_geg = 376;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 199 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 217 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 216) {
			v_geg = 378;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 198 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 213) {
			v_geg = 385;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 211 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 197 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 215) {
			v_geg = 381;
		}
	}
	if (a_item("umwandeln", a_inventory("umwandeln", v_welche, g_akt_spieler).f_name).f_klasse == 3) {
		v_gewa = 1;
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 218 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 209 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 210) {
			v_geg = 377;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 199 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 217 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 216) {
			v_geg = 379;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 198 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 213) {
			v_geg = 49;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 211 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 197 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 215) {
			v_geg = 382;
		}
	}
	if (a_item("umwandeln", a_inventory("umwandeln", v_welche, g_akt_spieler).f_name).f_klasse == 4) {
		v_gewa = 1;
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 218 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 209 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 210) {
			v_geg = 233;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 199 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 217 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 216) {
			v_geg = 235;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 198 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 213) {
			v_geg = 236;
		}
		if (a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 211 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 197 || a_inventory("umwandeln", v_feld, g_akt_spieler).f_name == 215) {
			v_geg = 238;
		}
	}
	if (!v_gewa) {
		p_message(566, 1);
	} else {
		if (v_geg > 0) {
			p_leeren(v_feld);
			p_leeren(v_welche);
			p_in_rucksack(v_geg, 1, 0);
			g_aktion = 1;
			p_message(567, 1);
		}
	}
}

static intptr_t p_unorequip(int16_t v_slot) {
	if (!a_inventory("unorequip", v_slot, g_akt_spieler).f_benutzt) {
		p_equip(v_slot);
	} else {
		p_un_equip(v_slot);
	}
}

static intptr_t p_vor_bewegung() {
	int16_t v_act_nr_in_level = 0;
	int16_t v_act_tile = 0;
	intptr_t v_akt_schleichen = 0;
	int16_t v_angriff = 0;
	intptr_t v_ausweichen = 0;
	intptr_t v_critical_chance = 0;
	intptr_t v_frame = 0;
	int16_t v_frei = 0;
	int8_t v_gesetzt = 0;
	intptr_t v_habich = 0;
	intptr_t v_hugo = 0;
	intptr_t v_i = 0;
	intptr_t v_inhalt_x = 0;
	intptr_t v_inhalt_y = 0;
	int16_t v_kk = 0;
	intptr_t v_maxi = 0;
	intptr_t v_mini = 0;
	int16_t v_mon_no = 0;
	int16_t v_monstat = 0;
	int16_t v_nr_of_monsters = 0;
	int16_t v_richtung = 0;
	intptr_t v_schaden = 0;
	intptr_t v_schaden_save = 0;
	int16_t v_schutz = 0;
	intptr_t v_schutz_max = 0;
	intptr_t v_schutz_min = 0;
	intptr_t v_spell_x = 0;
	intptr_t v_spell_y = 0;
	intptr_t v_sprite_x = 0;
	intptr_t v_sprite_y = 0;
	int16_t v_testfeld = 0;
	int16_t v_treffer = 0;
	intptr_t v_unsichtbar = 0;
	intptr_t v_vorbei = 0;
	intptr_t v_wohin = 0;
	intptr_t v_x_r = 0;
	intptr_t v_xmod_save = 0;
	intptr_t v_xx = 0;
	intptr_t v_y_r = 0;
	intptr_t v_ymod_save = 0;
	intptr_t v_yy = 0;
	int16_t v_zaehler = 0;
	if (a_spieler("vor_bewegung", g_akt_spieler).f_betrunken > 0) {
		v_zaehler = 1;
		v_frei = 0;
		do {
			v_richtung = (p_random(3) + 1);
			switch (v_richtung) {
			case 1:
				if (a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + 1), a_spieler("vor_bewegung", g_akt_spieler).f_character_y).f_feld == a_inhalt("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level)) {
					g_xmod = 1;
					g_ymod = 0;
					v_frei = 1;
				}
				break;
			case 2:
				if (a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x - 1), a_spieler("vor_bewegung", g_akt_spieler).f_character_y).f_feld == a_inhalt("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level)) {
					g_xmod = -1;
					g_ymod = 0;
					v_frei = 1;
				}
				break;
			case 3:
				if (a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, a_spieler("vor_bewegung", g_akt_spieler).f_character_x, (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + 1)).f_feld == a_inhalt("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level)) {
					g_xmod = 0;
					g_ymod = 1;
					v_frei = 1;
				}
				break;
			case 4:
				if (a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, a_spieler("vor_bewegung", g_akt_spieler).f_character_x, (a_spieler("vor_bewegung", g_akt_spieler).f_character_y - 1)).f_feld == a_inhalt("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level)) {
					g_xmod = 0;
					g_ymod = -1;
					v_frei = 1;
				}
				break;
			}
			v_zaehler = (v_zaehler + 1);
		} while (!(v_frei == 1 || v_zaehler > 500));
	}
	if (a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_feld == 210 && !p_habich(86)) {
		if (p_get_chance(100) < (p_staerke() * 3)) {
			p_message(829, 1);
			p_setlaby((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), a_spieler("vor_bewegung", g_akt_spieler).f_level, 209, 0, 0);
		} else {
			p_message(827, 1);
		}
		g_xmod = 0;
		g_ymod = 0;
		a_spieler("vor_bewegung", g_akt_spieler).f_speed = 0;
		g_aktion = 1;
	}
	if (a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_feld >= 137 && a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_feld <= 148) {
		v_act_nr_in_level = a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_stat2;
		v_vorbei = 0;
		if (a_spieler("vor_bewegung", g_akt_spieler).f_schleichen > 0) {
			v_akt_schleichen = p_schleichen();
			if (p_get_chance(100) < v_akt_schleichen) {
				p_message(1, 2);
				v_vorbei = 1;
			} else {
				p_message(2, 3);
				g_xmod = 0;
				g_ymod = 0;
				p_laby_screen();
				a_spieler("vor_bewegung", g_akt_spieler).f_speed = 0;
				g_aktion = 1;
			}
		} else {
			if (a_skills("vor_bewegung", 139, g_akt_spieler).f_gewaehlt == 1) {
				p_message(708, 3);
			} else {
				v_angriff = p_spieler_angriffswert();
				v_mini = p_schaden_min();
				v_maxi = p_schaden_max();
				v_critical_chance = p_schaden_critical();
				v_treffer = p_get_chance(103);
				if (v_treffer < v_angriff) {
					p_clipsprite(38, 0, 224, 32, 32);
					p_displaysprite(38, (160 + (g_xmod * 32)), (160 + (g_ymod * 32)));
					if (v_treffer < v_critical_chance) {
						p_clipsprite(38, 96, 224, 32, 32);
						p_displaysprite(38, (160 + (g_xmod * 32)), (160 + (g_ymod * 32)));
						p_hydra_cut_head(v_act_nr_in_level);
					} else {
						v_schaden = (p_myrand((v_maxi - v_mini)) + v_mini);
						if (v_schaden > p_min(p_max(((a_spieler("vor_bewegung", g_akt_spieler).f_level / 2) + 1), 6), 15)) {
							p_hydra_cut_head(v_act_nr_in_level);
						} else {
							p_hydra_grow_head(v_act_nr_in_level);
						}
					}
				} else {
					p_message(286, 3);
				}
				a_spieler("vor_bewegung", g_akt_spieler).f_speed = 0;
				g_aktion = 1;
				g_xmod = 0;
				g_ymod = 0;
			}
		}
		if (!v_vorbei) {
			v_ausweichen = 0;
			if (a_skills("vor_bewegung", 6, g_akt_spieler).f_gewaehlt == 1 && p_get_chance(50)) {
				v_ausweichen = 1;
			}
			if (!v_ausweichen) {
				v_angriff = 80;
				v_angriff = (v_angriff - (p_reflexe() * 10));
				if (v_angriff < 10) {
					v_angriff = 10;
				}
				if (a_spieler("vor_bewegung", g_akt_spieler).f_fluch == 21) {
					v_angriff = 90;
				}
				if (p_get_chance(100) < v_angriff) {
					v_schaden = (p_myrand2((a_spieler("vor_bewegung", g_akt_spieler).f_level / 4)) + (a_spieler("vor_bewegung", g_akt_spieler).f_level / 4));
					if (p_habich(124) > 0) {
						p_message(431, 2);
					} else {
						if (p_has_trait2(v_mon_no, 32) && a_spinnenkoenigin("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level) == 1) {
							v_schaden = (v_schaden + 2);
						}
						if (p_has_trait2(v_mon_no, 33) && a_goblinkoenig("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level) == 1) {
							v_schaden = (v_schaden + 2);
						}
						if (p_has_trait2(v_mon_no, 34) && a_untotenherr("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level) == 1) {
							v_schaden = (v_schaden + 2);
						}
						if (a_spieler("vor_bewegung", g_akt_spieler).f_fluch == 7) {
							v_schaden = (v_schaden * 2);
						}
						v_schutz = 0;
						if (a_spieler("vor_bewegung", g_akt_spieler).f_fluch != 9) {
							p_schutz();
							v_schutz = (p_myrand((v_schutz_max - v_schutz_min)) + v_schutz_min);
							v_schaden = (v_schaden - v_schutz);
						}
						if (a_skills("vor_bewegung", 8, g_akt_spieler).f_gewaehlt == 1) {
							v_schaden = (v_schaden - 1);
						}
						if (p_habich(143) > 1) {
							v_schaden = (v_schaden - 3);
						}
						if (v_schaden < 1) {
							v_schaden = 0;
						}
						if (!v_schaden && p_get_chance(50)) {
							v_schaden = 1;
						}
						v_habich = 0;
						for (v_i = 1; v_i <= 30; v_i += 1) {
							if (a_aktive("vor_bewegung", v_i, g_akt_spieler).f_nr == 18) {
								v_habich = v_i;
							}
						}
						if (v_habich > 0) {
							v_schaden_save = v_schaden;
							v_schaden = (v_schaden - a_aktive("vor_bewegung", v_habich, g_akt_spieler).f_staerke);
							if (v_schaden < 0) {
								v_schaden = 0;
							}
							a_spieler("vor_bewegung", g_akt_spieler).f_lifepoints = (a_spieler("vor_bewegung", g_akt_spieler).f_lifepoints - v_schaden);
							a_aktive("vor_bewegung", v_habich, g_akt_spieler).f_staerke = (a_aktive("vor_bewegung", v_habich, g_akt_spieler).f_staerke - v_schaden_save);
							if (a_aktive("vor_bewegung", v_habich, g_akt_spieler).f_staerke < 1) {
								a_aktive("vor_bewegung", v_habich, g_akt_spieler).f_staerke = 0;
								a_aktive("vor_bewegung", v_habich, g_akt_spieler).f_dauer = 0;
								a_aktive("vor_bewegung", v_habich, g_akt_spieler).f_nr = 0;
							}
						}
						p_clipsprite(38, 0, 224, 32, 32);
						p_displaytransparentsprite(38, 160, 160);
						if (a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, v_x_r, v_y_r).f_feld >= 137 && a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, v_x_r, v_y_r).f_feld <= 148) {
							p_sound(51);
						} else {
							if (!a_monster("vor_bewegung", v_mon_no).f_sound) {
								p_sound(p_random(12));
							} else {
								p_sound(a_monster("vor_bewegung", v_mon_no).f_sound);
							}
						}
						v_wohin = p_screenoutput();
						p_startdrawing(v_wohin);
						p_drawingmode(1);
						if (v_schaden < 10) {
							v_xx = 172;
							v_yy = 168;
						}
						if (v_schaden >= 10) {
							v_xx = 166;
							v_yy = 168;
						}
						if (v_schaden >= 100) {
							v_xx = 163;
							v_yy = 168;
						}
						p_frontcolor(p_rgb(255, 255, 255));
						p_drawtext(v_xx, v_yy, p_str(v_schaden), -1, 0);
						p_stopdrawing();
						p_flipbuffers(1);
						p_delay(g_mydelay);
						a_spieler("vor_bewegung", g_akt_spieler).f_lifepoints = (a_spieler("vor_bewegung", g_akt_spieler).f_lifepoints - v_schaden);
					}
					if (a_spieler("vor_bewegung", g_akt_spieler).f_lifepoints < 1) {
						a_spieler("vor_bewegung", g_akt_spieler).f_cause_of_death = 20;
						p_tot();
					} else {
						p_clipsprite(1, (v_inhalt_x * 32), (v_inhalt_y * 32), 32, 32);
						p_displaysprite(1, 160, 160);
						p_draw_character(a_spieler("vor_bewegung", g_akt_spieler).f_face, v_frame, 0);
						p_flipbuffers(1);
					}
				} else {
					p_message(291, 3);
				}
			} else {
				p_message(178, 3);
			}
		}
	}
	v_mon_no = p_getmonster((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), -1);
	if (v_mon_no) {
		if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status != 3) {
			if (a_spieler("vor_bewegung", g_akt_spieler).f_schleichen > 0 || p_habich(110) > 0) {
				v_akt_schleichen = p_schleichen();
				if (p_get_chance(100) < v_akt_schleichen) {
					p_message(1, 2);
				} else {
					p_message(2, 3);
					if (!LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status) {
						LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 1;
					}
					if (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status == 2) {
						LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 0;
					}
					g_xmod = 0;
					g_ymod = 0;
					p_laby_screen();
					a_spieler("vor_bewegung", g_akt_spieler).f_speed = 0;
					g_aktion = 1;
					for (v_i = 1; v_i <= 30; v_i += 1) {
						if (a_aktive("vor_bewegung", v_i, g_akt_spieler).f_nr == 110) {
							a_aktive("vor_bewegung", v_i, g_akt_spieler).f_nr = 0;
							a_aktive("vor_bewegung", v_i, g_akt_spieler).f_staerke = 0;
							a_aktive("vor_bewegung", v_i, g_akt_spieler).f_dauer = 0;
						}
					}
				}
			} else {
				v_unsichtbar = 0;
				if (p_has_trait2(v_mon_no, 19) == 1 && !p_habich(109) && !p_habich(121)) {
					v_unsichtbar = 1;
				}
				if ((v_unsichtbar == 1 && p_get_chance(100) < 20) || !v_unsichtbar) {
					v_sprite_x = (a_monster("vor_bewegung", v_mon_no).f_nr - 1);
					v_sprite_y = (v_sprite_x / 10);
					v_sprite_x = (v_sprite_x % 10);
					if (a_skills("vor_bewegung", 18, g_akt_spieler).f_gewaehlt == 1 || a_spieler("vor_bewegung", g_akt_spieler).f_style == 9) {
						v_xmod_save = g_xmod;
						v_ymod_save = g_ymod;
						v_nr_of_monsters = 0;
						a_mon_here.dim("mon_here", 5);
						for (v_i = 1; v_i <= 4; v_i += 1) {
							if (p_getmonster((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + p_neighbour_offset(v_i, 0)), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + p_neighbour_offset(v_i, 1)), -1)) {
								v_nr_of_monsters = (v_nr_of_monsters + 1);
								a_mon_here("vor_bewegung", v_i) = 1;
							} else {
								a_mon_here("vor_bewegung", v_i) = 0;
							}
						}
						if (v_nr_of_monsters > 1) {
							for (v_i = 1; v_i <= 12; v_i += 1) {
								p_laby_screen2();
								p_clipsprite(70, (-32 + (32 * v_i)), 0, 32, 32);
								p_displaytransparentsprite(70, (156 + (v_spell_x * 32)), (156 + (v_spell_y * 32)));
								p_flipbuffers(1);
								p_delay(90);
							}
						}
						for (v_i = 4; v_i >= 1; v_i -= 1) {
							g_xmod = p_neighbour_offset(v_i, 0);
							g_ymod = p_neighbour_offset(v_i, 1);
							if (a_mon_here("vor_bewegung", v_i)) {
								p_kampf();
							}
						}
						g_xmod = v_xmod_save;
						g_ymod = v_ymod_save;
					} else {
						p_kampf();
					}
					v_mon_no = p_getmonster((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), -1);
					if ((a_skills("vor_bewegung", 20, g_akt_spieler).f_gewaehlt == 1 || a_spieler("vor_bewegung", g_akt_spieler).f_style == 7) && v_mon_no) {
						p_kampf();
					}
					v_mon_no = p_getmonster((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), -1);
					if (v_mon_no) {
						v_gesetzt = 0;
						v_xmod_save = g_xmod;
						v_ymod_save = g_ymod;
						if (p_has_trait2(v_mon_no, 6) == 1 && p_get_chance(100) < 60) {
							if (p_has_trait2(v_mon_no, 30) == 1) {
								for (v_kk = 1; v_kk <= 4; v_kk += 1) {
									g_xmod = p_neighbour_offset(v_kk, 0);
									g_ymod = p_neighbour_offset(v_kk, 1);
									if (p_free_for_water_monster((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), 0)) {
										p_aufstehen(a_monster("vor_bewegung", v_mon_no).f_nr);
										p_setmonster((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), a_spieler("vor_bewegung", g_akt_spieler).f_level, v_mon_no, a_monster("vor_bewegung", v_mon_no).f_nr, a_monster("vor_bewegung", v_mon_no).f_lebenspunkte, 0, 0, 0);
										v_gesetzt = 1;
									}
								}
							} else {
								for (v_kk = 1; v_kk <= 4; v_kk += 1) {
									g_xmod = p_neighbour_offset(v_kk, 0);
									g_ymod = p_neighbour_offset(v_kk, 1);
									if (p_free_for_monster((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), 0)) {
										p_aufstehen(a_monster("vor_bewegung", v_mon_no).f_nr);
										p_setmonster((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), a_spieler("vor_bewegung", g_akt_spieler).f_level, v_mon_no, a_monster("vor_bewegung", v_mon_no).f_nr, a_monster("vor_bewegung", v_mon_no).f_lebenspunkte, 0, 0, 0);
										v_gesetzt = 1;
									}
								}
							}
						}
						g_xmod = v_xmod_save;
						g_ymod = v_ymod_save;
						if (v_gesetzt == 1) {
							p_laby_screen2();
							p_message(36, 3);
						}
					}
					if (a_skills("vor_bewegung", 19, g_akt_spieler).f_gewaehlt == 1 && !v_mon_no) {
						a_spieler("vor_bewegung", g_akt_spieler).f_speed = (a_spieler("vor_bewegung", g_akt_spieler).f_speed - 1);
					} else {
						a_spieler("vor_bewegung", g_akt_spieler).f_speed = 0;
						g_aktion = 1;
					}
				} else {
					p_message(441, 2);
					a_spieler("vor_bewegung", g_akt_spieler).f_speed = 0;
					g_aktion = 1;
				}
				g_xmod = 0;
				g_ymod = 0;
			}
		} else {
			p_message(457, 5);
		}
	}
	v_act_tile = a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_feld;
	if (v_act_tile == 97) {
		v_hugo = 70;
		p_cleartile((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), -1);
		p_setmonster((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), a_spieler("vor_bewegung", g_akt_spieler).f_level, v_hugo, a_monster("vor_bewegung", v_hugo).f_nr, a_monster("vor_bewegung", v_hugo).f_lebenspunkte, 0, 0, 0);
		a_spieler("vor_bewegung", g_akt_spieler).f_speed = 0;
		g_aktion = 1;
		g_xmod = 0;
		g_ymod = 0;
	}
	if (v_act_tile == 80) {
		v_angriff = (p_spieler_angriffswert() / 2);
		if (p_get_chance(103) < v_angriff) {
			p_sound(30);
			p_cleartile((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), -1);
			p_delay(g_mydelay);
			p_laby_screen();
		} else {
			p_message(3, 2);
			if (!p_habich(68)) {
				p_sound(15);
				p_spielerschaden(1, 3, 13, 0, 0);
			} else {
				p_message(315, 2);
			}
			p_delay(g_mydelay);
		}
		a_spieler("vor_bewegung", g_akt_spieler).f_speed = 0;
		g_aktion = 1;
		g_xmod = 0;
		g_ymod = 0;
	}
	if (!a_skills("vor_bewegung", 126, g_akt_spieler).f_gewaehlt) {
		if (v_act_tile >= 22 && v_act_tile <= 30) {
			if (a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_stat1 < p_find_trap()) {
				p_setlaby((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_feld + 9), 0, 0);
				g_xmod = 0;
				g_ymod = 0;
				p_sound(23);
				p_laby_screen();
				p_flipbuffers(1);
				p_delay(g_mydelay);
			}
		}
		if (v_act_tile == 75) {
			if (p_get_chance(100) < p_find_treasure()) {
				a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_feld = 69;
				g_xmod = 0;
				g_ymod = 0;
				p_sound(23);
				p_laby_screen();
				p_delay(g_mydelay);
			}
		}
	}
	if (v_act_tile == 47) {
		v_act_nr_in_level = a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_stat2;
		if (g_test == 1) {
			p_printn("act_nr_in_level:" + p_str(v_act_nr_in_level));
		}
		p_resetlist(ll_room_list);
		do {
			p_nextelement(ll_room_list);
		} while (!(LIST_CURRENT(ll_room_list,struct st_room_type).f_level == a_spieler("vor_bewegung", g_akt_spieler).f_level && LIST_CURRENT(ll_room_list,struct st_room_type).f_nr_in_level == v_act_nr_in_level));
		if (LIST_CURRENT(ll_room_list,struct st_room_type).f_visions == 1 && a_skills("vor_bewegung", 97, g_akt_spieler).f_gewaehlt == 1) {
			LIST_CURRENT(ll_room_list,struct st_room_type).f_visions = 0;
			switch (LIST_CURRENT(ll_room_list,struct st_room_type).f_type) {
			case 0:
				p_message(458, 2);
				break;
			case 1:
				p_message(458, 2);
				break;
			case 2:
				p_message(459, 2);
				break;
			case 3:
				p_message(460, 2);
				break;
			case 4:
				p_message(461, 2);
				break;
			case 5:
				p_message(462, 2);
				break;
			case 6:
				p_message(463, 2);
				break;
			case 7:
				p_message(464, 2);
				break;
			case 8:
				p_message(465, 2);
				break;
			case 9:
				p_message(466, 2);
				break;
			case 10:
				p_message(467, 2);
				break;
			case 11:
				p_message(468, 2);
				break;
			case 12:
				p_message(469, 2);
				break;
			case 13:
				p_message(470, 2);
				break;
			case 14:
				p_message(471, 2);
				break;
			case 15:
				p_message(458, 2);
				break;
			case 16:
				p_message(472, 2);
				break;
			case 17:
				p_message(473, 2);
				break;
			case 18:
				p_message(470, 2);
				break;
			case 19:
				p_message(470, 2);
				break;
			case 20:
				p_message(474, 2);
				break;
			case 21:
				p_message(475, 2);
				break;
			case 22:
				p_message(470, 2);
				break;
			case 23:
				p_message(476, 2);
				break;
			case 24:
				p_message(477, 2);
				break;
			case 25:
				p_message(478, 2);
				break;
			case 26:
				p_message(479, 2);
				break;
			case 27:
				p_message(458, 2);
				break;
			case 28:
				p_message(458, 2);
				break;
			case 29:
				p_message(507, 2);
				break;
			}
			g_xmod = 0;
			g_ymod = 0;
		} else {
			p_raum(v_act_nr_in_level);
		}
	}
	if (a_fields("vor_bewegung", v_act_tile).f_block_walk) {
		g_xmod = 0;
		g_ymod = 0;
	}
	switch (v_act_tile) {
	case 70:
		if (a_skills("vor_bewegung", 74, g_akt_spieler).f_gewaehlt == 1 || a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_stat1 == 2) {
			if (a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_stat1 == 1) {
				p_message(524, 1);
			} else {
				p_sound(63);
				p_setlaby((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), a_spieler("vor_bewegung", g_akt_spieler).f_level, 71, 0, 0);
				p_laby_screen();
				p_delay(g_mydelay);
			}
		} else {
			p_sound(15);
			p_message(185, 1);
		}
		g_xmod = 0;
		g_ymod = 0;
		break;
	case 72:
		v_mon_no = a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_stat1;
		v_monstat = a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_stat2;
		p_aufstehen2(a_monster("vor_bewegung", v_mon_no).f_nr);
		p_setlaby((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), a_spieler("vor_bewegung", g_akt_spieler).f_level, 53, 0, 0);
		p_setmonster((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), a_spieler("vor_bewegung", g_akt_spieler).f_level, v_mon_no, a_monster("vor_bewegung", v_mon_no).f_nr, a_monster("vor_bewegung", v_mon_no).f_lebenspunkte, v_monstat, 0, 0);
		g_xmod = 0;
		g_ymod = 0;
		p_laby_screen();
		p_sound(34);
		break;
	}
	v_testfeld = a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_feld;
	if (p_istknochen(v_testfeld) == 1) {
		if (!p_habich(38) && !v_mon_no) {
			if (a_labyrinth("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level, (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod)).f_stat1 == 1 || a_spieler("vor_bewegung", g_akt_spieler).f_fluch == 10) {
				p_sound(22);
				p_aufstehen(23);
				p_cleartile((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), -1);
				p_setmonster((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod), (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod), a_spieler("vor_bewegung", g_akt_spieler).f_level, 4, a_monster("vor_bewegung", 4).f_nr, a_monster("vor_bewegung", 4).f_lebenspunkte, 0, 0, 0);
				g_xmod = 0;
				g_ymod = 0;
				a_spieler("vor_bewegung", g_akt_spieler).f_speed = 0;
				g_aktion = 1;
				p_laby_screen();
			}
		}
	}
	if ((a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod) < 1 || (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod) < 1 || (a_spieler("vor_bewegung", g_akt_spieler).f_character_x + g_xmod) > a_groesse("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level) || (a_spieler("vor_bewegung", g_akt_spieler).f_character_y + g_ymod) > a_groesse("vor_bewegung", a_spieler("vor_bewegung", g_akt_spieler).f_level)) {
		g_xmod = 0;
		g_ymod = 0;
	}
}

static intptr_t p_was_last_piece() {
	intptr_t v_act_piece = 0;
	intptr_t v_finished = 0;
	v_finished = 1;
	for (v_act_piece = 1; v_act_piece <= 9; v_act_piece += 1) {
		if (!a_spieler("was_last_piece", g_akt_spieler).f_staff_pieces[v_act_piece]) {
			v_finished = 0;
		}
	}
	if (v_finished == 1) {
		p_ende();
	}
}

static intptr_t p_werfen() {
	struct st_monster_pointer v_act_monster;
	intptr_t v_angriff = 0;
	intptr_t v_destination = 0;
	int16_t v_maxschaden = 0;
	int16_t v_mon_no = 0;
	intptr_t v_okay = 0;
	int16_t v_schaden = 0;
	if (!a_inventory("werfen", g_feld, g_akt_spieler).f_benutzt) {
		g_spell_x = 0;
		g_spell_y = 0;
		v_destination = p_select_field(0);
		if (v_destination == 1) {
			g_blocked = 0;
			p_los(1);
			if (!g_blocked) {
				v_mon_no = p_getmonster((a_spieler("werfen", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("werfen", g_akt_spieler).f_character_y + g_spell_y), -1);
				v_act_monster.f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
				if (v_mon_no) {
					g_aktion = 1;
					p_sound(33);
					if (a_item("werfen", a_inventory("werfen", g_feld, g_akt_spieler).f_name).f_klasse == 5) {
						p_animate_projectile(7);
					}
					if (a_item("werfen", a_inventory("werfen", g_feld, g_akt_spieler).f_name).f_klasse == 2) {
						p_animate_projectile(8);
					}
					if (a_item("werfen", a_inventory("werfen", g_feld, g_akt_spieler).f_name).f_klasse == 3) {
						p_animate_projectile(9);
					}
					v_angriff = 60;
					if (a_skills("werfen", 112, g_akt_spieler).f_gewaehlt == 1) {
						v_angriff = (v_angriff + 50);
					}
					if (v_angriff > 90) {
						v_angriff = 90;
					}
					if (v_angriff < 10) {
						v_angriff = 10;
					}
					if (p_get_chance(103) < v_angriff) {
						v_maxschaden = (a_item("werfen", a_inventory("werfen", g_feld, g_akt_spieler).f_name).f_attri2 + a_spieler("werfen", g_akt_spieler).f_strength);
						if (a_skills("werfen", 112, g_akt_spieler).f_gewaehlt == 1) {
							v_maxschaden = (v_maxschaden + 2);
						}
						v_schaden = p_myrand(v_maxschaden);
						p_hydra_zauber(v_schaden);
						p_changecurrentelement(ll_monster_list, v_act_monster.f_p);
						p_monsterschaden(v_schaden);
						if (a_inventory("werfen", g_feld, g_akt_spieler).f_status == 4) {
							a_inventory("werfen", g_feld, g_akt_spieler).f_status = 0;
							if (!p_has_trait2(v_mon_no, 3)) {
								LIST_CURRENT(ll_monster_list,struct st_monster_type).f_status = 4;
								LIST_CURRENT(ll_monster_list,struct st_monster_type).f_duration = (p_myrand(20) + 5);
							} else {
								p_message(456, 4);
							}
						}
					} else {
						p_message(16, 3);
					}
					v_okay = 0;
					if (!a_laby_item("werfen", (a_spieler("werfen", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("werfen", g_akt_spieler).f_character_y + g_spell_y)).f_name[a_spieler("werfen", g_akt_spieler).f_level] && !v_okay) {
						p_setitem((a_spieler("werfen", g_akt_spieler).f_character_x + g_spell_x), (a_spieler("werfen", g_akt_spieler).f_character_y + g_spell_y), a_spieler("werfen", g_akt_spieler).f_level, a_inventory("werfen", g_feld, g_akt_spieler).f_name, a_inventory("werfen", g_feld, g_akt_spieler).f_attri5, a_inventory("werfen", g_feld, g_akt_spieler).f_status);
						v_okay = 1;
					}
					if (!a_laby_item("werfen", ((a_spieler("werfen", g_akt_spieler).f_character_x + g_spell_x) + 1), (a_spieler("werfen", g_akt_spieler).f_character_y + g_spell_y)).f_name[a_spieler("werfen", g_akt_spieler).f_level] && !v_okay) {
						p_setitem(((a_spieler("werfen", g_akt_spieler).f_character_x + g_spell_x) + 1), (a_spieler("werfen", g_akt_spieler).f_character_y + g_spell_y), a_spieler("werfen", g_akt_spieler).f_level, a_inventory("werfen", g_feld, g_akt_spieler).f_name, a_inventory("werfen", g_feld, g_akt_spieler).f_attri5, a_inventory("werfen", g_feld, g_akt_spieler).f_status);
						v_okay = 1;
					}
					if (!a_laby_item("werfen", ((a_spieler("werfen", g_akt_spieler).f_character_x + g_spell_x) - 1), (a_spieler("werfen", g_akt_spieler).f_character_y + g_spell_y)).f_name[a_spieler("werfen", g_akt_spieler).f_level] && !v_okay) {
						p_setitem(((a_spieler("werfen", g_akt_spieler).f_character_x + g_spell_x) - 1), (a_spieler("werfen", g_akt_spieler).f_character_y + g_spell_y), a_spieler("werfen", g_akt_spieler).f_level, a_inventory("werfen", g_feld, g_akt_spieler).f_name, a_inventory("werfen", g_feld, g_akt_spieler).f_attri5, a_inventory("werfen", g_feld, g_akt_spieler).f_status);
						v_okay = 1;
					}
					if (!a_laby_item("werfen", (a_spieler("werfen", g_akt_spieler).f_character_x + g_spell_x), ((a_spieler("werfen", g_akt_spieler).f_character_y + g_spell_y) + 1)).f_name[a_spieler("werfen", g_akt_spieler).f_level] && !v_okay) {
						p_setitem((a_spieler("werfen", g_akt_spieler).f_character_x + g_spell_x), ((a_spieler("werfen", g_akt_spieler).f_character_y + g_spell_y) + 1), a_spieler("werfen", g_akt_spieler).f_level, a_inventory("werfen", g_feld, g_akt_spieler).f_name, a_inventory("werfen", g_feld, g_akt_spieler).f_attri5, a_inventory("werfen", g_feld, g_akt_spieler).f_status);
						v_okay = 1;
					}
					if (!a_laby_item("werfen", (a_spieler("werfen", g_akt_spieler).f_character_x + g_spell_x), ((a_spieler("werfen", g_akt_spieler).f_character_y + g_spell_y) - 1)).f_name[a_spieler("werfen", g_akt_spieler).f_level] && !v_okay) {
						p_setitem((a_spieler("werfen", g_akt_spieler).f_character_x + g_spell_x), ((a_spieler("werfen", g_akt_spieler).f_character_y + g_spell_y) - 1), a_spieler("werfen", g_akt_spieler).f_level, a_inventory("werfen", g_feld, g_akt_spieler).f_name, a_inventory("werfen", g_feld, g_akt_spieler).f_attri5, a_inventory("werfen", g_feld, g_akt_spieler).f_status);
						v_okay = 1;
					}
					p_leeren(g_feld);
					p_laby_screen();
					p_delay(g_mydelay);
				} else {
					p_message(246, 3);
				}
			} else {
				p_message(233, 3);
			}
		}
	}
}

static intptr_t p_wounded_hero() {
	int16_t v_heilen = 0;
	intptr_t v_heilen2 = 0;
	intptr_t v_i = 0;
	intptr_t v_mmouse_links = 0;
	intptr_t v_mmouse_rechts = 0;
	intptr_t v_mmouse_x = 0;
	intptr_t v_mmouse_y = 0;
	int8_t v_raus = 0;
	intptr_t v_result = 0;
	int16_t v_sel = 0;
	int16_t v_trank = 0;
	int16_t v_trank2 = 0;
	int16_t v_was = 0;
	intptr_t v_wohin = 0;
	intptr_t v_yy = 0;
	v_sel = 1;
	v_trank2 = 0;
	do {
		p_fenster(0);
		p_clearscreen(p_rgb(0, 0, 0));
		p_draw_plain_frame(-1);
		v_raus = 0;
		v_trank = 0;
		v_heilen = 0;
		v_yy = 65;
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_drawingmode(1);
		p_frontcolor(p_rgb(255, 255, 255));
		p_drawtext(190, v_yy, a_message_text("wounded_hero", 508, (1 + g_language)), -1, 0);
		v_yy = (v_yy + 15);
		p_drawtext(190, v_yy, a_message_text("wounded_hero", 509, (1 + g_language)), -1, 0);
		p_clipsprite(1, 192, 640, 32, 32);
		p_displaysprite(1, 50, 70);
		p_read_joystick();
		p_examinekeyboard();
		if (p_keyboardpushed(273) || g_jay == -1) {
			v_sel = (v_sel - 1);
			if (v_sel < 1) {
				v_sel = 1;
			}
		}
		if (p_keyboardpushed(274) || g_jay == 1) {
			v_sel = (v_sel + 1);
			if (v_sel > 3) {
				v_sel = 3;
			}
		}
		v_result = p_examinemouse();
		v_mmouse_x = p_mousex();
		v_mmouse_y = p_mousey();
		v_mmouse_links = p_mousebutton(1);
		v_mmouse_rechts = p_mousebutton(2);
		if (v_mmouse_x > 40 && v_mmouse_x < 600 && v_mmouse_y > 120 && v_mmouse_y < 140) {
			p_frontcolor(p_rgb(150, 150, 150));
			p_box(40, 120, 550, 20, -1);
			if (v_sel == 1) {
				p_frontcolor(p_rgb(1, 1, 255));
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			p_drawtext(40, 120, a_message_text("wounded_hero", 510, (1 + g_language)), -1, 0);
			if (v_mmouse_links == 1) {
				v_raus = 1;
				v_trank = 1;
			}
		} else {
			if (v_sel == 1) {
				p_frontcolor(p_rgb(1, 1, 255));
				if (p_keyboardpushed(13) || a_jb("wounded_hero", 1)) {
					v_raus = 1;
					v_trank = 1;
				}
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			p_drawtext(40, 120, a_message_text("wounded_hero", 510, (1 + g_language)), -1, 0);
		}
		if (v_trank == 1) {
			for (v_i = 1; v_i <= 50; v_i += 1) {
				if (a_item("wounded_hero", a_inventory("wounded_hero", v_i, g_akt_spieler).f_name).f_name[2] == "Schwacher Heiltrank" || a_item("wounded_hero", a_inventory("wounded_hero", v_i, g_akt_spieler).f_name).f_name[2] == "Starker Heiltrank") {
					v_trank2 = v_i;
				}
			}
			if (v_trank2 > 0) {
				p_message(514, 1);
				p_message(515, 1);
				p_leeren(v_trank2);
				p_setlaby(a_spieler("wounded_hero", g_akt_spieler).f_character_x, a_spieler("wounded_hero", g_akt_spieler).f_character_y, a_spieler("wounded_hero", g_akt_spieler).f_level, 203, 0, 0);
				g_aktion = 1;
			} else {
				p_message(517, 1);
			}
		}
		if (v_mmouse_x > 40 && v_mmouse_x < 600 && v_mmouse_y > 140 && v_mmouse_y < 160) {
			p_frontcolor(p_rgb(150, 150, 150));
			p_box(40, 140, 550, 20, -1);
			if (v_sel == 2) {
				p_frontcolor(p_rgb(1, 1, 255));
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			p_drawtext(40, 140, a_message_text("wounded_hero", 511, (1 + g_language)), -1, 0);
			if (v_mmouse_links == 1) {
				v_raus = 1;
				v_heilen = 1;
			}
		} else {
			if (v_sel == 2) {
				p_frontcolor(p_rgb(1, 1, 255));
				if (p_keyboardpushed(13) || a_jb("wounded_hero", 1)) {
					v_raus = 1;
					v_heilen = 1;
				}
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			p_drawtext(40, 140, a_message_text("wounded_hero", 511, (1 + g_language)), -1, 0);
		}
		v_heilen2 = 0;
		if (v_heilen == 1) {
			if (a_skills("wounded_hero", 51, g_akt_spieler).f_gewaehlt == 1 && a_spieler("wounded_hero", g_akt_spieler).f_circle >= 7) {
				v_heilen2 = 1;
			}
			if ((a_learned("wounded_hero", g_akt_spieler, 100) & 384)) {
				v_heilen2 = 1;
			}
			if (v_heilen2 == 1) {
				if (a_spieler("wounded_hero", g_akt_spieler).f_mana >= 2) {
					a_spieler("wounded_hero", g_akt_spieler).f_mana = (a_spieler("wounded_hero", g_akt_spieler).f_mana - 2);
					p_sound(16);
					p_message(514, 1);
					p_message(515, 1);
					p_setlaby(a_spieler("wounded_hero", g_akt_spieler).f_character_x, a_spieler("wounded_hero", g_akt_spieler).f_character_y, a_spieler("wounded_hero", g_akt_spieler).f_level, 203, 0, 0);
					v_trank2 = 1;
					g_aktion = 1;
				} else {
					p_message(194, 1);
				}
			} else {
				p_message(516, 1);
			}
		}
		if (v_mmouse_x > 40 && v_mmouse_x < 600 && v_mmouse_y > 160 && v_mmouse_y < 180) {
			p_frontcolor(p_rgb(150, 150, 150));
			p_box(40, 160, 550, 20, -1);
			if (v_sel == 2) {
				p_frontcolor(p_rgb(1, 1, 255));
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			p_drawtext(40, 160, a_message_text("wounded_hero", 512, (1 + g_language)), -1, 0);
			if (v_mmouse_links == 1) {
				v_raus = 1;
			}
		} else {
			if (v_sel == 2) {
				p_frontcolor(p_rgb(1, 1, 255));
				if (p_keyboardpushed(13) || a_jb("wounded_hero", 1)) {
					v_raus = 1;
				}
			} else {
				p_frontcolor(p_rgb(255, 255, 255));
			}
			p_drawtext(40, 160, a_message_text("wounded_hero", 512, (1 + g_language)), -1, 0);
		}
		p_stopdrawing();
		p_draw_mousepointer(v_mmouse_x, v_mmouse_y);
		p_flipbuffers(1);
		p_delay(g_mydelay3);
	} while (!(v_mmouse_rechts == 1 || v_raus == 1 || p_keyboardpushed(27)));
	if (v_trank2 > 0) {
		v_i = p_backpackspace();
		if (v_i <= 50) {
			v_was = 0;
			switch (p_random(7)) {
			case 0:
				v_was = 220;
				break;
			case 1:
				v_was = 263;
				break;
			case 2:
				v_was = 148;
				break;
			case 3:
				v_was = 253;
				break;
			case 4:
				v_was = 230;
				break;
			case 5:
				v_was = 241;
				break;
			case 6:
				v_was = 155;
				break;
			case 7:
				v_was = 280;
				break;
			}
			p_in_rucksack(v_was, 1, 0);
			p_sound(14);
		}
	}
}

static intptr_t p_zerstoert(int16_t v_color, int16_t v_no_explo) {
	int16_t v_explo = 0;
	intptr_t v_inhalt_x = 0;
	intptr_t v_inhalt_y = 0;
	int16_t v_mon_no = 0;
	std::string v_willi;
	int16_t v_x = 0;
	int16_t v_y = 0;
	v_mon_no = LIST_CURRENT(ll_monster_list,struct st_monster_type).f_number;
	v_x = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_x - a_spieler("zerstoert", g_akt_spieler).f_character_x);
	v_y = (LIST_CURRENT(ll_monster_list,struct st_monster_type).f_y - a_spieler("zerstoert", g_akt_spieler).f_character_y);
	if (v_mon_no) {
		v_explo = 0;
		if (p_has_trait2(v_mon_no, 42) > 0 && !v_no_explo) {
			v_explo = 1;
		}
		a_spieler("zerstoert", g_akt_spieler).f_mks = (a_spieler("zerstoert", g_akt_spieler).f_mks + 1);
		v_willi = " ";
		v_willi = a_monster("zerstoert", v_mon_no).f_name[(1 + g_language)] + a_message_text("zerstoert", 627, (g_language + 1));
		p_lernen(v_mon_no);
		if (p_has_trait2(v_mon_no, 30) > 0) {
			p_remove_monster();
		} else {
			p_hinterlassen((a_spieler("zerstoert", g_akt_spieler).f_character_x + v_x), (a_spieler("zerstoert", g_akt_spieler).f_character_y + v_y));
		}
		if (p_has_trait2(v_mon_no, 30) > 0) {
			p_clipsprite(1, 64, 224, 32, 32);
			p_displaysprite(1, (160 + (v_x * 32)), (160 + (v_y * 32)));
		} else {
			p_clipsprite(1, (v_inhalt_x * 32), (v_inhalt_y * 32), 32, 32);
			p_displaysprite(1, (160 + (v_x * 32)), (160 + (v_y * 32)));
		}
		p_laby_screen2();
		p_nachricht7(v_willi, v_color);
		p_gott_check();
		if (v_explo == 1) {
			g_spell_x = v_x;
			g_spell_y = v_y;
			p_explodiert(2);
		}
	}
}

static intptr_t p_zwischenbild() {
	intptr_t v_wohin = 0;
	if (g_zw_bild) {
		g_schongemalt = 1;
		v_wohin = p_screenoutput();
		p_startdrawing(v_wohin);
		p_frontcolor(p_rgb(0, 0, 0));
		p_box(400, 110, 150, 50, -1);
		p_stopdrawing();
		p_laby_rahmen(0);
		p_show_logo();
		switch (g_zw_bild) {
		case 1:
			p_hilfe();
			break;
		case 2:
			p_inv();
			p_laby_screen();
			if (g_aktion == 1) {
				throw Lv_nach_zauber;
			}
			break;
		case 3:
			p_cast_spell();
			p_laby_screen();
			if (g_aktion == 1) {
				throw Lv_nach_zauber;
			}
			break;
		case 4:
			if (a_skills("zwischenbild", 113, g_akt_spieler).f_gewaehlt == 1 && a_labyrinth("zwischenbild", a_spieler("zwischenbild", g_akt_spieler).f_level, a_spieler("zwischenbild", g_akt_spieler).f_character_x, a_spieler("zwischenbild", g_akt_spieler).f_character_y).f_feld == 73) {
				p_message(5, 2);
				if ((a_spieler("zwischenbild", g_akt_spieler).f_level + 1) > a_spieler("zwischenbild", g_akt_spieler).f_maxlevel) {
					p_aufsteigen();
				}
				p_neuer_level();
				p_naechster();
			}
			break;
		case 5:
			p_optionen();
			p_laby_screen();
			break;
		case 6:
			p_character_info();
			p_laby_screen();
			break;
		case 7:
			p_monsterlore();
			p_laby_screen();
			break;
		case 8:
			if (!a_spieler("zwischenbild", g_akt_spieler).f_schleichen) {
				a_spieler("zwischenbild", g_akt_spieler).f_schleichen = 1;
				if (a_spieler("zwischenbild", g_akt_spieler).f_speed > p_maxspeed()) {
					a_spieler("zwischenbild", g_akt_spieler).f_speed = p_maxspeed();
				}
			} else {
				a_spieler("zwischenbild", g_akt_spieler).f_schleichen = 0;
			}
			p_laby_screen();
			p_flipbuffers(1);
			p_delay(g_mydelay);
			break;
		case 9:
			p_bogen();
			p_laby_screen();
			if (g_aktion == 1) {
				throw Lv_nach_zauber;
			}
			break;
		case 10:
			p_stehlen();
			p_laby_screen();
			if (g_aktion == 1) {
				throw Lv_nach_zauber;
			}
			break;
		case 11:
			if (a_skills("zwischenbild", 94, g_akt_spieler).f_gewaehlt == 1) {
				p_mystisch();
				p_laby_screen();
				if (g_aktion == 1) {
					throw Lv_nach_zauber;
				}
			}
			break;
		case 12:
			if (p_radius() < 2) {
				p_message(946, 1);
			} else {
				p_show_automap(0);
			}
			break;
		case 13:
			p_show_old_messages();
			break;
		}
		g_zw_bild = 0;
	}
}

int main() {
	enum label gotolabel = NOLABEL;
	init_random();
	init_text();
	DISPATCH: try {
		switch (gotolabel) {
		case NOLABEL: break;
		case Lv_again: goto L_again;
		case Lv_geladen: goto L_geladen;
		case Lv_nach_zauber: goto L_nach_zauber;
		}
		a_f_keys.dim("f_keys", 13);
		a_f_keys("main program", 1) = 282;
		a_f_keys("main program", 2) = 283;
		a_f_keys("main program", 3) = 284;
		a_f_keys("main program", 4) = 285;
		a_f_keys("main program", 5) = 286;
		a_f_keys("main program", 6) = 287;
		a_f_keys("main program", 7) = 288;
		a_f_keys("main program", 8) = 289;
		a_f_keys("main program", 9) = 290;
		a_f_keys("main program", 10) = 291;
		a_f_keys("main program", 11) = 292;
		a_f_keys("main program", 12) = 293;
		a_num_keys.dim("num_keys", 11);
		a_num_keys("main program", 0) = 48;
		a_num_keys("main program", 1) = 49;
		a_num_keys("main program", 2) = 50;
		a_num_keys("main program", 3) = 51;
		a_num_keys("main program", 4) = 52;
		a_num_keys("main program", 5) = 53;
		a_num_keys("main program", 6) = 54;
		a_num_keys("main program", 7) = 55;
		a_num_keys("main program", 8) = 56;
		a_num_keys("main program", 9) = 57;
		a_num_keys("main program", 10) = 48;
		a_numpad_keys.dim("numpad_keys", 11);
		a_numpad_keys("main program", 0) = 256;
		a_numpad_keys("main program", 1) = 257;
		a_numpad_keys("main program", 2) = 258;
		a_numpad_keys("main program", 3) = 259;
		a_numpad_keys("main program", 4) = 260;
		a_numpad_keys("main program", 5) = 261;
		a_numpad_keys("main program", 6) = 262;
		a_numpad_keys("main program", 7) = 263;
		a_numpad_keys("main program", 8) = 264;
		a_numpad_keys("main program", 9) = 265;
		a_numpad_keys("main program", 10) = 256;
		a_labyrinth.dim("labyrinth", 152, 202, 202);
		a_first_monster.dim("first_monster", 152);
		g_dead_monsters = 0;
		a_first_item.dim("first_item", 152);
		a_laby_item.dim("laby_item", 202, 202);
		a_eingangx.dim("eingangx", 152);
		a_eingangy.dim("eingangy", 152);
		a_ausgangx.dim("ausgangx", 152);
		a_ausgangy.dim("ausgangy", 152);
		a_sonderlevel.dim("sonderlevel", 152);
		a_levelmod.dim("levelmod", 152);
		a_groesse.dim("groesse", 152);
		a_inhalt.dim("inhalt", 152);
		a_mit_was.dim("mit_was", 152);
		a_visionen.dim("visionen", 152);
		a_fluss.dim("fluss", 152);
		a_spinnenkoenigin.dim("spinnenkoenigin", 152);
		a_goblinkoenig.dim("goblinkoenig", 152);
		a_untotenherr.dim("untotenherr", 152);
		a_skill_trader.dim("skill_trader", 152);
		a_small_trader.dim("small_trader", 152);
		a_level_curse.dim("level_curse", 152);
		a_automap.dim("automap", 202, 202);
		a_aktive.dim("aktive", 32, 5);
		a_skills.dim("skills", 146, 5);
		a_unmoeglich.dim("unmoeglich", 218);
		a_hscores.dim("hscores", 32);
		a_inventory.dim("inventory", 52, 5);
		a_new_item.dim("new_item", 2);
		a_item.dim("item", 413);
		a_fields.dim("fields", 212);
		a_spells.dim("spells", 201);
		a_learned.dim("learned", 5, 185);
		a_mischen.dim("mischen", 38);
		a_alch_buff.dim("alch_buff", 51);
		a_spell_chance_buff.dim("spell_chance_buff", 51);
		a_lore_chance_buff.dim("lore_chance_buff", 51);
		a_hit_chance_buff.dim("hit_chance_buff", 51);
		a_critical_chance_buff.dim("critical_chance_buff", 51);
		a_god_bonus_buff.dim("god_bonus_buff", 51);
		a_fish_buff.dim("fish_buff", 51);
		a_damage_buff.dim("damage_buff", 51);
		a_damage_buff2.dim("damage_buff2", 51);
		a_wand_buff.dim("wand_buff", 51);
		a_scroll_buff.dim("scroll_buff", 51);
		a_break_chance_buff.dim("break_chance_buff", 51);
		a_gold_buff.dim("gold_buff", 51);
		a_boulder_buff.dim("boulder_buff", 51);
		a_herb_buff.dim("herb_buff", 51);
		a_crysolit_buff.dim("crysolit_buff", 51);
		a_general_percent_buff.dim("general_percent_buff", 51);
		a_monster.dim("monster", 179);
		a_mush_known.dim("mush_known", 10);
		a_zauberliste.dim("zauberliste", 501);
		a_old_messages.dim("old_messages", 26, 5);
		a_creature.dim("creature", 16);
		a_language.dim("language", 3);
		a_language("main program", 0).f_buttonpos = 34;
		a_language("main program", 1).f_buttonpos = 68;
		a_language("main program", 2).f_buttonpos = 612;
		g_gb_callfromtitlescreen = 0;
		g_akt_spieler = 1;
		g_test = 0;
		g_language = 0;
		g_win_mode = 1;
		g_nr_of_saves = 0;
		g_flaschen = 1;
		g_released = 1;
		g_itemmenue_aktiv = 0;
		g_joystick_used = 0;
		g_no_mouse = 0;
		g_knopf5 = 0;
		g_mit_was_normal = 1;
		g_inhalt_normal = 4;
		g_bewegen = 0;
		g_aktuell = 0;
		g_anz_levels = 0;
		g_frame = 0;
		g_framestep = 0;
		v_messages = "";
		g_zw_bild = 0;
		v_angreifen = 1;
		v_nach_kampf = 0;
		g_bewegt = 0;
		g_nr_of_players = 1;
		g_von_ferne = 0;
		g_mydelay = 600;
		g_mydelay2 = 0;
		g_mydelay3 = 30;
		g_mydelay4 = 0;
		g_autopickup = 1;
		g_keydelay = 15;
		g_keydelay2 = 3;
		g_selectdelay = 150;
		g_schutz_min = 0;
		g_schutz_max = 0;
		g_behinderung = 0;
		g_anfangszeit = " ";
		g_skills_menu = 1;
		g_maennchen_menu = 1;
		g_cinfo_menu = 1;
		g_letzter_eintrag = 0;
		g_anz_zauber = 0;
		g_akt_option = 1;
		g_do_it = 0;
		g_do_it2 = 0;
		v_do_it3 = 0;
		v_do_it4 = 0;
		g_sound = 1;
		g_music = 1;
		g_klicking = 1;
		g_adcount = 1;
		g_admax = 10;
		g_abbrechen = 0;
		v_room_cursprite_nr = -1;
		v_room_curtext_nr = -1;
		v_room_curtext = "";
		g_no_room_intro = 0;
		g_monsterauge = 0;
		g_over_item = 0;
		g_warten = 0;
		g_matrix_pos_x = 0;
		g_matrix_pos_y = 0;
		g_in_sight = 0;
		g_raushier = 0;
		g_key_repeat_delay = 90;
		a_spieler.dim("spieler", 5);
		a_message_text.dim("message_text", 1001, 4);
		a_xsprites.dim("xsprites", 21);
		a_ysprites.dim("ysprites", 21);
		a_fsprites.dim("fsprites", 21);
		a_rsprites.dim("rsprites", 21);
		a_optionenliste.dim("optionenliste", 131);
		a_quickspells.dim("quickspells", 11, 5);
		a_quickspells2.dim("quickspells2", 9, 5);
		a_savenames.dim("savenames", 12);
		a_savedatum.dim("savedatum", 12);
		a_addelay.dim("addelay", ((g_admax + 10) + 1));
		a_addelaymax.dim("addelaymax", ((g_admax + 10) + 1));
		a_matrix.dim("matrix", 15, 15);
		a_matrix2.dim("matrix2", 15, 15);
		a_school_names.dim("school_names", 17);
		a_school_numbers.dim("school_numbers", 17);
		a_school_clip_icon_pos.dim("school_clip_icon_pos", 17);
		a_jb.dim("jb", 13);
		a_message_text("main program", 1, 1) = "You sneak by!";
		a_message_text("main program", 1, 2) = "Du schleichst vorbei!";
		a_message_text("main program", 1, 3) = "Has pasado!";
		a_message_text("main program", 2, 1) = "You were spotted!";
		a_message_text("main program", 2, 2) = "Du wurdest bemerkt!";
		a_message_text("main program", 2, 3) = "Te han descubierto!";
		a_message_text("main program", 3, 1) = "The ice block is too strong!";
		a_message_text("main program", 3, 2) = "Der Eisblock ist zu hart!";
		a_message_text("main program", 3, 3) = "El bloque de hielo pesa demasiado!";
		a_message_text("main program", 4, 1) = "An ambush!";
		a_message_text("main program", 4, 2) = "Ein Hinterhalt!";
		a_message_text("main program", 4, 3) = "Una emboscada!";
		a_message_text("main program", 5, 1) = "You climb down!";
		a_message_text("main program", 5, 2) = "Du kletterst hinab!";
		a_message_text("main program", 5, 3) = "Desciendes!";
		a_message_text("main program", 6, 1) = "You found: ";
		a_message_text("main program", 6, 2) = "Du findest: ";
		a_message_text("main program", 6, 3) = "Has encontrado: ";
		a_message_text("main program", 7, 1) = "Curse of Leprechaun!";
		a_message_text("main program", 7, 2) = "Fluch des Leprechaun!";
		a_message_text("main program", 7, 3) = "Maldici\363n del Leproso!";
		a_message_text("main program", 8, 1) = " gold";
		a_message_text("main program", 8, 2) = " Goldst\374cke";
		a_message_text("main program", 8, 3) = " oro";
		a_message_text("main program", 9, 1) = "Curse of Seth!";
		a_message_text("main program", 9, 2) = "Fluch des Seth!";
		a_message_text("main program", 9, 3) = "Maldici\363n de Seth!";
		a_message_text("main program", 10, 1) = "You found a mushroom!";
		a_message_text("main program", 10, 2) = "Du findest einen Pilz!";
		a_message_text("main program", 10, 3) = "Encuentras una seta!";
		a_message_text("main program", 11, 1) = "You refill your water!";
		a_message_text("main program", 11, 2) = "Du f\374llst dein Wasser auf!";
		a_message_text("main program", 11, 3) = "Llenas tu agua";
		a_message_text("main program", 12, 1) = "Your offering has been accepted!!!";
		a_message_text("main program", 12, 2) = "Deine Gabe wurde erh\366rt!!!";
		a_message_text("main program", 12, 3) = "Tu oferta ha sido aceptada!!!";
		a_message_text("main program", 13, 1) = "Your offering was rejected!";
		a_message_text("main program", 13, 2) = "Deine Gabe wurde nicht erh\366rt!";
		a_message_text("main program", 13, 3) = "Tu oferta ha sido rechazada!";
		a_message_text("main program", 14, 1) = "No bow/sling/arrows/stones!";
		a_message_text("main program", 14, 2) = "Kein Bogen/Schleuder/Pfeile/Steine!";
		a_message_text("main program", 14, 3) = "Sin arco/honda/flechas/piedras!";
		a_message_text("main program", 16, 1) = "You missed!";
		a_message_text("main program", 16, 2) = "Du verfehlst!";
		a_message_text("main program", 16, 3) = "Pierdes!";
		a_message_text("main program", 17, 1) = "A Spear Trap hits you!";
		a_message_text("main program", 17, 2) = "Eine Speerfalle trifft dich!";
		a_message_text("main program", 17, 3) = "Una Lanza te alcanza!";
		a_message_text("main program", 18, 1) = "An Axe Trap hits you!";
		a_message_text("main program", 18, 2) = "Eine Axtfalle trifft dich!";
		a_message_text("main program", 18, 3) = "Un Hacha te alcanza!";
		a_message_text("main program", 19, 1) = "A dart hits you!";
		a_message_text("main program", 19, 2) = "Eine Pfeilfalle trifft dich!";
		a_message_text("main program", 19, 3) = "Un Dardo te alcanza!";
		a_message_text("main program", 20, 1) = "A Rune Trap hits you!";
		a_message_text("main program", 20, 2) = "Eine Runenfalle trifft dich!";
		a_message_text("main program", 20, 3) = "Una Runa te alcanza!";
		a_message_text("main program", 21, 1) = "You are protected against Rune Traps!";
		a_message_text("main program", 21, 2) = "Du bist gegen Runenfallen gesch\374tzt!";
		a_message_text("main program", 21, 3) = "Estas protegido contra Runas!";
		a_message_text("main program", 22, 1) = "You fall into a Trapdoor!";
		a_message_text("main program", 22, 2) = "Du st\374rzt in eine Fallgrube!";
		a_message_text("main program", 22, 3) = "Caes en una trampilla!";
		a_message_text("main program", 23, 1) = "A rune steals your Mana!";
		a_message_text("main program", 23, 2) = "Eine Rune stiehlt dein Mana!";
		a_message_text("main program", 23, 3) = "Una Runa te ha robado el Mana!";
		a_message_text("main program", 24, 1) = "An arrow gets fired at you!";
		a_message_text("main program", 24, 2) = "Ein Pfeil wird auf dich abgefeuert!";
		a_message_text("main program", 24, 3) = "Se lanza una Flecha hacia ti!";
		a_message_text("main program", 25, 1) = "You are protected against arrows!";
		a_message_text("main program", 25, 2) = "Du bist vor Geschossen gesch\374tzt!";
		a_message_text("main program", 25, 3) = "Estas protegido contra flechas!";
		a_message_text("main program", 26, 1) = "You evaded a hostile spell!";
		a_message_text("main program", 26, 2) = "Du hast einen fremden Zauber abgewehrt!";
		a_message_text("main program", 26, 3) = "Has evadido un hechizo enemigo!";
		a_message_text("main program", 27, 1) = "A fireball gets fired at you!";
		a_message_text("main program", 27, 2) = "Ein Feuerball wird auf dich geworfen!";
		a_message_text("main program", 27, 3) = "Se lanza una bola de Fuego contra ti!";
		a_message_text("main program", 28, 1) = "You are protected against fire!";
		a_message_text("main program", 28, 2) = "Du bist gegen Feuer gesch\374tzt!";
		a_message_text("main program", 28, 3) = "Estas protegido contra el fuego!";
		a_message_text("main program", 29, 1) = "You get cursed!";
		a_message_text("main program", 29, 2) = "Ein Fluch trifft dich!";
		a_message_text("main program", 29, 3) = "Has sido maldito!";
		a_message_text("main program", 30, 1) = "A spell steals an item from you!";
		a_message_text("main program", 30, 2) = "Ein Zauber raubt dir einen Gegenstand!";
		a_message_text("main program", 30, 3) = "Un hechizo te roba un objeto!";
		a_message_text("main program", 31, 1) = "A spell drains your Mana!";
		a_message_text("main program", 31, 2) = "Ein Zauber raubt dir Mana!";
		a_message_text("main program", 31, 3) = "Un hechizo te roba tu Mana!";
		a_message_text("main program", 32, 1) = "A spell drains your Life Points!";
		a_message_text("main program", 32, 2) = "Ein Zauber raubt dir LPs!";
		a_message_text("main program", 32, 3) = "Un hechizo te roba tus Puntos de Vida!";
		a_message_text("main program", 33, 1) = "The head explodes!";
		a_message_text("main program", 33, 2) = "Der Kopf zerspringt!";
		a_message_text("main program", 33, 3) = "La Cabeza explota!";
		a_message_text("main program", 34, 1) = "The staff explodes!";
		a_message_text("main program", 34, 2) = "Der Zauberstab zerspringt!";
		a_message_text("main program", 34, 3) = "El Bast\363n explota!";
		a_message_text("main program", 35, 1) = "Only once per level!";
		a_message_text("main program", 35, 2) = "Nur einmal pro Ebene!";
		a_message_text("main program", 35, 3) = "Solo una vez por nivel!";
		a_message_text("main program", 36, 1) = "The monster calls for backup!";
		a_message_text("main program", 36, 2) = "Das Monster holt Verst\344rkung!";
		a_message_text("main program", 36, 3) = "El Monstruo pide ayuda!";
		a_message_text("main program", 37, 1) = "Nothing could be stolen!";
		a_message_text("main program", 37, 2) = "Nichts konnte gestohlen werden!";
		a_message_text("main program", 37, 3) = "No te pudieron robar!";
		a_message_text("main program", 38, 1) = "It tastes awful!";
		a_message_text("main program", 38, 2) = "Schmeckt widerlich!";
		a_message_text("main program", 38, 3) = "Su sabor es asqueroso!";
		a_message_text("main program", 39, 1) = "You feel better!";
		a_message_text("main program", 39, 2) = "Du f\374hlst dich besser!";
		a_message_text("main program", 39, 3) = "Te encuentras mejor!";
		a_message_text("main program", 40, 1) = "You are poisoned!";
		a_message_text("main program", 40, 2) = "Du hast dich vergiftet!";
		a_message_text("main program", 40, 3) = "Estas envenenado!";
		a_message_text("main program", 41, 1) = "You lose your strength!";
		a_message_text("main program", 41, 2) = "Du verlierst deine Kraft!";
		a_message_text("main program", 41, 3) = "Pierdes la fuerza!";
		a_message_text("main program", 42, 1) = "You are paralyzed!";
		a_message_text("main program", 42, 2) = "Du bist paralysiert!";
		a_message_text("main program", 42, 3) = "Estas paralizado!";
		a_message_text("main program", 43, 1) = "Your Mana is coming back!";
		a_message_text("main program", 43, 2) = "Dein Mana kehrt zur\374ck!";
		a_message_text("main program", 43, 3) = "Estas recuperando el Mana!";
		a_message_text("main program", 44, 1) = "You steal ";
		a_message_text("main program", 44, 2) = "Du stiehlst ";
		a_message_text("main program", 44, 3) = "Robas ";
		a_message_text("main program", 45, 1) = "Only twice per level!";
		a_message_text("main program", 45, 2) = "Nur 2 mal pro Ebene!";
		a_message_text("main program", 45, 3) = "Solo dos veces por nivel!";
		a_message_text("main program", 46, 1) = "You get healed!";
		a_message_text("main program", 46, 2) = "Du wirst geheilt!";
		a_message_text("main program", 46, 3) = "Te curas!";
		a_message_text("main program", 47, 1) = "You get completely healed!";
		a_message_text("main program", 47, 2) = "Du wirst vollst\344ndig geheilt!";
		a_message_text("main program", 47, 3) = "Te curas totalmente!";
		a_message_text("main program", 48, 1) = "The spell did not work!";
		a_message_text("main program", 48, 2) = "Der Zauber ist dir misslungen!";
		a_message_text("main program", 48, 3) = "El hechizo no ha funcionado!";
		a_message_text("main program", 49, 1) = "Only once per level!";
		a_message_text("main program", 49, 2) = "Nur einmal pro ebene!";
		a_message_text("main program", 49, 3) = "Solo una vez por nivel!";
		a_message_text("main program", 50, 1) = "You gain experience!";
		a_message_text("main program", 50, 2) = "Du gewinnst Erfahrung!";
		a_message_text("main program", 50, 3) = "Ganas experiencia!";
		a_message_text("main program", 51, 1) = "Choose what to advance:";
		a_message_text("main program", 51, 2) = "W\344hle Verbesserung:";
		a_message_text("main program", 51, 3) = "Escoje la mejora:";
		a_message_text("main program", 52, 1) = "Attack:";
		a_message_text("main program", 52, 2) = "Angriff:";
		a_message_text("main program", 52, 3) = "Ataque:";
		a_message_text("main program", 53, 1) = "Dexterity:";
		a_message_text("main program", 53, 2) = "Geschick:";
		a_message_text("main program", 53, 3) = "Destreza:";
		a_message_text("main program", 54, 1) = "Strength:";
		a_message_text("main program", 54, 2) = "St\344rke:";
		a_message_text("main program", 54, 3) = "Fuerza:";
		a_message_text("main program", 55, 1) = "Life Points:";
		a_message_text("main program", 55, 2) = "Lebenspunkte:";
		a_message_text("main program", 55, 3) = "Puntos de Vida:";
		a_message_text("main program", 56, 1) = "Speed:";
		a_message_text("main program", 56, 2) = "Geschwindigkeit:";
		a_message_text("main program", 56, 3) = "Velocidad:";
		a_message_text("main program", 57, 1) = "Perception:";
		a_message_text("main program", 57, 2) = "Wahrnehmung:";
		a_message_text("main program", 57, 3) = "Percepci\363n:";
		a_message_text("main program", 58, 1) = "Luck:";
		a_message_text("main program", 58, 2) = "Gl\374ck:";
		a_message_text("main program", 58, 3) = "Suerte:";
		a_message_text("main program", 59, 1) = "Mana:";
		a_message_text("main program", 59, 2) = "Mana:";
		a_message_text("main program", 59, 3) = "Mana:";
		a_message_text("main program", 60, 1) = "Spell Power:";
		a_message_text("main program", 60, 2) = "Zauberkraft:";
		a_message_text("main program", 60, 3) = "Poder de Hechizos:";
		a_message_text("main program", 61, 1) = "Spell Circle:";
		a_message_text("main program", 61, 2) = "Zirkel:";
		a_message_text("main program", 61, 3) = "C\355rculo de Hechizos:";
		a_message_text("main program", 62, 1) = "Your Udjat Eye";
		a_message_text("main program", 62, 2) = "Dein Udjat Auge";
		a_message_text("main program", 62, 3) = "Tu ojo Udjat";
		a_message_text("main program", 63, 1) = " grants";
		a_message_text("main program", 63, 2) = " gew\344hrt dir";
		a_message_text("main program", 63, 3) = " te";
		a_message_text("main program", 64, 1) = "you another advancement";
		a_message_text("main program", 64, 2) = "eine weitere Verbesserung";
		a_message_text("main program", 64, 3) = "concede otro Avance";
		a_message_text("main program", 65, 1) = "Your deep wisdom";
		a_message_text("main program", 65, 2) = "Deine tiefe Weisheit";
		a_message_text("main program", 65, 3) = "Tu Sabiduria profunda";
		a_message_text("main program", 66, 1) = "A merchant offers you his goods:";
		a_message_text("main program", 66, 2) = "Ein H\344ndler bietet dir seine Waren an:";
		a_message_text("main program", 66, 3) = "Un comerciante te ofrece sus bienes:";
		a_message_text("main program", 67, 1) = "Help";
		a_message_text("main program", 67, 2) = "Hilfe";
		a_message_text("main program", 67, 3) = "Ayuda";
		a_message_text("main program", 68, 1) = "I: Inventory";
		a_message_text("main program", 68, 2) = "I: Inventar";
		a_message_text("main program", 68, 3) = "I: Inventario";
		a_message_text("main program", 69, 1) = "C: Cast Spell";
		a_message_text("main program", 69, 2) = "C: Zaubern";
		a_message_text("main program", 69, 3) = "C: Lanzar Hechizo";
		a_message_text("main program", 70, 1) = "D: Character Data";
		a_message_text("main program", 70, 2) = "D: Charakterdaten";
		a_message_text("main program", 70, 3) = "D: Datos del Personaje";
		a_message_text("main program", 71, 1) = "S: Sneak";
		a_message_text("main program", 71, 2) = "S: Schleichen";
		a_message_text("main program", 71, 3) = "S: Escaparse";
		a_message_text("main program", 72, 1) = "K: Climb";
		a_message_text("main program", 72, 2) = "K: Klettern";
		a_message_text("main program", 72, 3) = "K: Escalar";
		a_message_text("main program", 73, 1) = "P: Pick Pocket";
		a_message_text("main program", 73, 2) = "P: Stehlen";
		a_message_text("main program", 73, 3) = "P: Robar";
		a_message_text("main program", 74, 1) = "A: Mystic Attack";
		a_message_text("main program", 74, 2) = "A: Mystische Attacke";
		a_message_text("main program", 74, 3) = "A: Ataque Mistico";
		a_message_text("main program", 75, 1) = "Continue: Return or Right Mouse Button";
		a_message_text("main program", 75, 2) = "Weiter: Return oder rechte Maustaste";
		a_message_text("main program", 75, 3) = "Continuar: Intro o Boton Derecho";
		a_message_text("main program", 76, 1) = "Options";
		a_message_text("main program", 76, 2) = "Optionen";
		a_message_text("main program", 76, 3) = "Opciones";
		a_message_text("main program", 77, 1) = "Moves:";
		a_message_text("main program", 77, 2) = "Zugweite:";
		a_message_text("main program", 77, 3) = "Movimientos:";
		a_message_text("main program", 78, 1) = "Stealth";
		a_message_text("main program", 78, 2) = "Schleichen";
		a_message_text("main program", 78, 3) = "Cautela";
		a_message_text("main program", 79, 1) = "You got a new high score!";
		a_message_text("main program", 79, 2) = "Du hast es in den Highscore geschafft!";
		a_message_text("main program", 79, 3) = "Has conseguido una puntuacion alta!";
		a_message_text("main program", 80, 1) = "Please enter your last words:";
		a_message_text("main program", 80, 2) = "Bitte gib deine letzten Worte ein:";
		a_message_text("main program", 80, 3) = "Por favor, entra sus ultimas palabras:";
		a_message_text("main program", 81, 1) = "You got a new high score!";
		a_message_text("main program", 81, 2) = "Ihr habt es in den Highscore geschafft!";
		a_message_text("main program", 81, 3) = "Conseguieron una puntuaci\363n alta!";
		a_message_text("main program", 82, 1) = "Please enter your names:";
		a_message_text("main program", 82, 2) = "Gebt eure Namen ein:";
		a_message_text("main program", 82, 3) = "Por favor, entrad vuestros nombres:";
		a_message_text("main program", 83, 1) = "You are dead!";
		a_message_text("main program", 83, 2) = "Du bist tot!";
		a_message_text("main program", 83, 3) = "Estas muerto!";
		a_message_text("main program", 84, 1) = "Killed Monsters:";
		a_message_text("main program", 84, 2) = "Get\366tete Monster:";
		a_message_text("main program", 84, 3) = "Monstruos matados:";
		a_message_text("main program", 85, 1) = "Gold:";
		a_message_text("main program", 85, 2) = "Goldst\374cke:";
		a_message_text("main program", 85, 3) = "Oro:";
		a_message_text("main program", 86, 1) = "Encumbrance:";
		a_message_text("main program", 86, 2) = "Behinderung:";
		a_message_text("main program", 86, 3) = "Estorbos:";
		a_message_text("main program", 87, 1) = "Armor:";
		a_message_text("main program", 87, 2) = "R\374stung:";
		a_message_text("main program", 87, 3) = "Armadura:";
		a_message_text("main program", 88, 1) = "Damage:";
		a_message_text("main program", 88, 2) = "Schaden:";
		a_message_text("main program", 88, 3) = "Da\361o:";
		a_message_text("main program", 89, 1) = "Thirst:";
		a_message_text("main program", 89, 2) = "Durst:";
		a_message_text("main program", 89, 3) = "Sed:";
		a_message_text("main program", 90, 1) = "Hunger:";
		a_message_text("main program", 90, 2) = "Hunger:";
		a_message_text("main program", 90, 3) = "Hambre:";
		a_message_text("main program", 91, 1) = "Power:";
		a_message_text("main program", 91, 2) = "Macht:";
		a_message_text("main program", 91, 3) = "Poder:";
		a_message_text("main program", 92, 1) = "character data: ";
		a_message_text("main program", 92, 2) = "Characterdaten: ";
		a_message_text("main program", 92, 3) = "Datos de personaje: ";
		a_message_text("main program", 93, 1) = "Points";
		a_message_text("main program", 93, 2) = "Punkte";
		a_message_text("main program", 93, 3) = "Puntos";
		a_message_text("main program", 94, 1) = "Thirsty";
		a_message_text("main program", 94, 2) = "Durstig";
		a_message_text("main program", 94, 3) = "Sediento";
		a_message_text("main program", 95, 1) = "Very Thirsty";
		a_message_text("main program", 95, 2) = "Sehr Durstig";
		a_message_text("main program", 95, 3) = "Muy Sediento";
		a_message_text("main program", 96, 1) = "Dehydrated 1";
		a_message_text("main program", 96, 2) = "Am verdursten 1";
		a_message_text("main program", 96, 3) = "Estas Muriendo de Sed 1";
		a_message_text("main program", 97, 1) = "Hungry";
		a_message_text("main program", 97, 2) = "Hungrig";
		a_message_text("main program", 97, 3) = "Hambriento";
		a_message_text("main program", 98, 1) = "Very Hungry";
		a_message_text("main program", 98, 2) = "Sehr Hungrig";
		a_message_text("main program", 98, 3) = "Muy Hambriento";
		a_message_text("main program", 99, 1) = "Starving 1";
		a_message_text("main program", 99, 2) = "Am verhungern 1";
		a_message_text("main program", 99, 3) = "Estas Muriendo de Hambre 1";
		a_message_text("main program", 100, 1) = "Choose Spell";
		a_message_text("main program", 100, 2) = "W\344hle Zauber";
		a_message_text("main program", 100, 3) = "Escoje el Hechizo";
		a_message_text("main program", 101, 1) = "Cost:";
		a_message_text("main program", 101, 2) = "Kosten:";
		a_message_text("main program", 101, 3) = "Coste:";
		a_message_text("main program", 102, 1) = "Duration:";
		a_message_text("main program", 102, 2) = "Dauer:";
		a_message_text("main program", 102, 3) = "Duraci\363n:";
		a_message_text("main program", 103, 1) = "Chance:";
		a_message_text("main program", 103, 2) = "Chance:";
		a_message_text("main program", 103, 3) = "Oportunidades:";
		a_message_text("main program", 104, 1) = "    Choose an item to turn to gold:";
		a_message_text("main program", 104, 2) = "W\344hle einen Gegenstand zum verwandeln:";
		a_message_text("main program", 104, 3) = "Escoje un objeto para cambiarlo en oro:";
		a_message_text("main program", 105, 1) = "Your Gold: ";
		a_message_text("main program", 105, 2) = "Dein Gold: ";
		a_message_text("main program", 105, 3) = "Tu Oro:";
		a_message_text("main program", 106, 1) = "Start Game";
		a_message_text("main program", 106, 2) = "Spiel starten";
		a_message_text("main program", 106, 3) = "Comenzar";
		a_message_text("main program", 107, 1) = "German";
		a_message_text("main program", 107, 2) = "Deutsch";
		a_message_text("main program", 107, 3) = "Aleman";
		a_message_text("main program", 108, 1) = "English";
		a_message_text("main program", 108, 2) = "Englisch";
		a_message_text("main program", 108, 3) = "Ingles";
		a_message_text("main program", 109, 1) = "High Scores";
		a_message_text("main program", 109, 2) = "Highscores";
		a_message_text("main program", 109, 3) = "Highscores";
		a_message_text("main program", 110, 1) = "Credits";
		a_message_text("main program", 110, 2) = "Credits";
		a_message_text("main program", 110, 3) = "Cr\351ditos";
		a_message_text("main program", 111, 1) = "Quit";
		a_message_text("main program", 111, 2) = "Beenden";
		a_message_text("main program", 111, 3) = "Salir";
		a_message_text("main program", 112, 1) = "Choose number of players";
		a_message_text("main program", 112, 2) = "W\344hle Anzahl Spieler";
		a_message_text("main program", 112, 3) = "Escoje n\372mero de jugadores";
		a_message_text("main program", 113, 1) = "Player";
		a_message_text("main program", 113, 2) = "Spieler";
		a_message_text("main program", 113, 3) = "Jugador";
		a_message_text("main program", 114, 1) = "            Choose your skills (Player ";
		a_message_text("main program", 114, 2) = "Suche deine Eigenschaften aus (Spieler ";
		a_message_text("main program", 114, 3) = "       Escoje tus habilidades (Jugador ";
		a_message_text("main program", 115, 1) = "Name: ";
		a_message_text("main program", 115, 2) = "Name: ";
		a_message_text("main program", 115, 3) = "Nombre: ";
		a_message_text("main program", 116, 1) = "Type: ";
		a_message_text("main program", 116, 2) = "Art: ";
		a_message_text("main program", 116, 3) = "Tipo: ";
		a_message_text("main program", 117, 1) = "Attack/Defense: ";
		a_message_text("main program", 117, 2) = "Angriff/Abwehr: ";
		a_message_text("main program", 117, 3) = "Ataque/Defensa: ";
		a_message_text("main program", 118, 1) = "Animal";
		a_message_text("main program", 118, 2) = "Tier";
		a_message_text("main program", 118, 3) = "Animal";
		a_message_text("main program", 119, 1) = "Human";
		a_message_text("main program", 119, 2) = "Mensch";
		a_message_text("main program", 119, 3) = "Humano";
		a_message_text("main program", 120, 1) = "Undead";
		a_message_text("main program", 120, 2) = "Untoter";
		a_message_text("main program", 120, 3) = "No-muerto";
		a_message_text("main program", 121, 1) = "Plant";
		a_message_text("main program", 121, 2) = "Pflanze";
		a_message_text("main program", 121, 3) = "Planta";
		a_message_text("main program", 122, 1) = "The Nameless Curse";
		a_message_text("main program", 122, 2) = "Der Namenlose Fluch";
		a_message_text("main program", 122, 3) = "La maldici\363n sin nombre";
		a_message_text("main program", 123, 1) = "prevents you";
		a_message_text("main program", 123, 2) = "verhindert deinen";
		a_message_text("main program", 123, 3) = "evita que";
		a_message_text("main program", 124, 1) = "from gaining experience!";
		a_message_text("main program", 124, 2) = "Erfahrungsgewinn!";
		a_message_text("main program", 124, 3) = "ganes experiencia!";
		a_message_text("main program", 125, 1) = "Your stupidity";
		a_message_text("main program", 125, 2) = "Deine Dummheit";
		a_message_text("main program", 125, 3) = "Tu estupidez";
		a_message_text("main program", 126, 1) = "This is your end!";
		a_message_text("main program", 126, 2) = "Das ist dein Ende!";
		a_message_text("main program", 126, 3) = "Este es tu fin!";
		a_message_text("main program", 127, 1) = "A mighty Fire Demon";
		a_message_text("main program", 127, 2) = "Ein m\344chtiger Feuerd\344mon";
		a_message_text("main program", 127, 3) = "Un poderoso Diablo de Fuego";
		a_message_text("main program", 128, 1) = "materializes and wants to";
		a_message_text("main program", 128, 2) = "steigt empor und will dir";
		a_message_text("main program", 128, 3) = "se materializa y quiere";
		a_message_text("main program", 129, 1) = "take your life!";
		a_message_text("main program", 129, 2) = "dein Leben nehmen!";
		a_message_text("main program", 129, 3) = "llevarse tu vida!";
		a_message_text("main program", 130, 1) = "Spanish";
		a_message_text("main program", 130, 2) = "Spanisch";
		a_message_text("main program", 130, 3) = "Espa\361ol";
		a_message_text("main program", 131, 1) = "Nameless Curse";
		a_message_text("main program", 131, 2) = "Der namelose Fluch";
		a_message_text("main program", 131, 3) = "Maldici\363n sin Nombre";
		a_message_text("main program", 132, 1) = "Curse of Tiamat";
		a_message_text("main program", 132, 2) = "Fluch der Tiamat";
		a_message_text("main program", 132, 3) = "Maldici\363n del Tiamat";
		a_message_text("main program", 133, 1) = "Curse of Hekate";
		a_message_text("main program", 133, 2) = "Fluch der Hekate";
		a_message_text("main program", 133, 3) = "Maldici\363n del Hekate";
		a_message_text("main program", 134, 1) = "Curse of Ares";
		a_message_text("main program", 134, 2) = "Fluch des Ares";
		a_message_text("main program", 134, 3) = "Maldici\363n del Ares";
		a_message_text("main program", 135, 1) = "Curse of Paralysis";
		a_message_text("main program", 135, 2) = "Fluch Paralyse";
		a_message_text("main program", 135, 3) = "Paralisis";
		a_message_text("main program", 136, 1) = "Curse of Artemis";
		a_message_text("main program", 136, 2) = "Fluch der Artemis";
		a_message_text("main program", 136, 3) = "Maldici\363n de Artemisa";
		a_message_text("main program", 137, 1) = "Curse of Achilles";
		a_message_text("main program", 137, 2) = "Fluch des Achilles";
		a_message_text("main program", 137, 3) = "Maldici\363n de Achilles";
		a_message_text("main program", 138, 1) = "Curse of Blindness";
		a_message_text("main program", 138, 2) = "Fluch Blindheit";
		a_message_text("main program", 138, 3) = "Maldici\363n del Ciego";
		a_message_text("main program", 139, 1) = "Curse of Hephaistos";
		a_message_text("main program", 139, 2) = "Fluch des Hephaistos";
		a_message_text("main program", 139, 3) = "Maldici\363n del Hephaistos";
		a_message_text("main program", 140, 1) = "Curse of Hades";
		a_message_text("main program", 140, 2) = "Fluch des Hades";
		a_message_text("main program", 140, 3) = "Maldici\363n de Hades";
		a_message_text("main program", 141, 1) = "Curse of Seth";
		a_message_text("main program", 141, 2) = "Fluch des Seth";
		a_message_text("main program", 141, 3) = "Maldici\363n del Seth";
		a_message_text("main program", 142, 1) = "Curse of Apophis";
		a_message_text("main program", 142, 2) = "Fluch des Apophis";
		a_message_text("main program", 142, 3) = "Maldici\363n del Apophis";
		a_message_text("main program", 143, 1) = "Curse of Dagda";
		a_message_text("main program", 143, 2) = "Fluch des Dagda";
		a_message_text("main program", 143, 3) = "Maldici\363n del Dagda";
		a_message_text("main program", 144, 1) = "Curse of Naiaden";
		a_message_text("main program", 144, 2) = "Fluch der Naiaden";
		a_message_text("main program", 144, 3) = "Maldici\363n del Naiaden";
		a_message_text("main program", 145, 1) = "Curse of Osiris";
		a_message_text("main program", 145, 2) = "Fluch des Osiris";
		a_message_text("main program", 145, 3) = "Maldici\363n de Osiris";
		a_message_text("main program", 146, 1) = "Curse of the Leprechaun";
		a_message_text("main program", 146, 2) = "Fluch des Leprechaun";
		a_message_text("main program", 146, 3) = "Maldici\363n del Leproso";
		a_message_text("main program", 147, 1) = "Curse of Marduk";
		a_message_text("main program", 147, 2) = "Fluch des Marduk";
		a_message_text("main program", 147, 3) = "Maldici\363n de Marduk";
		a_message_text("main program", 148, 1) = "Curse of Astarte";
		a_message_text("main program", 148, 2) = "Fluch der Astarte";
		a_message_text("main program", 148, 3) = "Maldici\363n de Astarte";
		a_message_text("main program", 149, 1) = "Curse of Poseidon";
		a_message_text("main program", 149, 2) = "Fluch des Poseidon";
		a_message_text("main program", 149, 3) = "Maldici\363n de Poseidon";
		a_message_text("main program", 150, 1) = "Curse of Tanis";
		a_message_text("main program", 150, 2) = "Fluch der Tanis";
		a_message_text("main program", 150, 3) = "Maldici\363n de Tanis";
		a_message_text("main program", 151, 1) = "Curse of Athene";
		a_message_text("main program", 151, 2) = "Fluch der Athene";
		a_message_text("main program", 151, 3) = "Maldici\363n del Athene";
		a_message_text("main program", 152, 1) = "Curse of Morrigu";
		a_message_text("main program", 152, 2) = "Fluch der Morrigu";
		a_message_text("main program", 152, 3) = "Maldici\363n del Morrigu";
		a_message_text("main program", 153, 1) = "Curse of the Chicken";
		a_message_text("main program", 153, 2) = "H\374hnerfluch";
		a_message_text("main program", 153, 3) = "Maldici\363n del Pollo";
		a_message_text("main program", 154, 1) = "Name";
		a_message_text("main program", 154, 2) = "Name";
		a_message_text("main program", 154, 3) = "Nombre";
		a_message_text("main program", 155, 1) = "Killed Monsters";
		a_message_text("main program", 155, 2) = "Get\366tete Monster";
		a_message_text("main program", 155, 3) = "Monstruos Matados";
		a_message_text("main program", 156, 1) = "Gold";
		a_message_text("main program", 156, 2) = "Gold";
		a_message_text("main program", 156, 3) = "Oro";
		a_message_text("main program", 157, 1) = "You enter a cavern made of ice.";
		a_message_text("main program", 157, 2) = "Du betrittst eine Eiskaverne.";
		a_message_text("main program", 157, 3) = "Entras una Cueva de Hielo.";
		a_message_text("main program", 158, 1) = "You shiver immediately.";
		a_message_text("main program", 158, 2) = "Dir wird sofort bitterkalt.";
		a_message_text("main program", 158, 3) = "Empiezas a sentir mucho frio.";
		a_message_text("main program", 159, 1) = "Will you find a frosty death";
		a_message_text("main program", 159, 2) = "Wirst du hier einen frostigen";
		a_message_text("main program", 159, 3) = "Vas a morir de congelado aqui?";
		a_message_text("main program", 160, 1) = "here?";
		a_message_text("main program", 160, 2) = "Tod finden?";
		a_message_text("main program", 160, 3) = "";
		a_message_text("main program", 161, 1) = "You enter a cavern made of fire.";
		a_message_text("main program", 161, 2) = "Du betrittst eine Feuerkaverne.";
		a_message_text("main program", 161, 3) = "Entras una Cueva de Fuego.";
		a_message_text("main program", 162, 1) = "You immediately start to sweat.";
		a_message_text("main program", 162, 2) = "Du beginst sofort zu schwitzen.";
		a_message_text("main program", 162, 3) = "Empiezas a sentir mucho calor.";
		a_message_text("main program", 163, 1) = "Will you find a hot death";
		a_message_text("main program", 163, 2) = "Wirst du hier einen feurigen";
		a_message_text("main program", 163, 3) = "Vas a morir de quemado aqui?";
		a_message_text("main program", 164, 1) = "here?";
		a_message_text("main program", 164, 2) = "Tod finden?";
		a_message_text("main program", 164, 3) = "";
		a_message_text("main program", 165, 1) = "You enter a gigantic graveyard.";
		a_message_text("main program", 165, 2) = "Du betrittst einen riesigen Friedhof.";
		a_message_text("main program", 165, 3) = "Entras en un enorme cementerio.";
		a_message_text("main program", 166, 1) = "You can smell death.";
		a_message_text("main program", 166, 2) = "Du kannst den Tod hier riechen.";
		a_message_text("main program", 166, 3) = "Puedes oler la muerte en este sitio.";
		a_message_text("main program", 167, 1) = "Will you join the dead here?";
		a_message_text("main program", 167, 2) = "Wirst du ihr Schicksal teilen?";
		a_message_text("main program", 167, 3) = "Te uniras a los muertos aqui?";
		a_message_text("main program", 168, 1) = "You enter the Lair of Goblins.";
		a_message_text("main program", 168, 2) = "Du betrittst einen Goblinbau.";
		a_message_text("main program", 168, 3) = "Entras en una cueva de Goblins.";
		a_message_text("main program", 169, 1) = "There are a lot of";
		a_message_text("main program", 169, 2) = "Hier wimmelt es nur so von diesen";
		a_message_text("main program", 169, 3) = "Hay muchisimos de estos";
		a_message_text("main program", 170, 1) = "ugly creatures here.";
		a_message_text("main program", 170, 2) = "abscheulichen Kreaturen.";
		a_message_text("main program", 170, 3) = "horribles monstruos.";
		a_message_text("main program", 171, 1) = "Take care!";
		a_message_text("main program", 171, 2) = "Sei vorsichtig!";
		a_message_text("main program", 171, 3) = "Vigila!";
		a_message_text("main program", 172, 1) = "You have found the Den of Thieves.";
		a_message_text("main program", 172, 2) = "Du hast den Unterschlupf einer";
		a_message_text("main program", 172, 3) = "Encontraste el campamento de una banda de";
		a_message_text("main program", 173, 1) = "Take care that they don't steal";
		a_message_text("main program", 173, 2) = "Diebesbande gefunden. Sei vorsichtig";
		a_message_text("main program", 173, 3) = "ladrones. Vigila para que no te";
		a_message_text("main program", 174, 1) = "all your belongings!";
		a_message_text("main program", 174, 2) = "das dir nicht alles geklaut wird!";
		a_message_text("main program", 174, 3) = "roben tus cosas!";
		a_message_text("main program", 175, 1) = "You break the Lockpicks!";
		a_message_text("main program", 175, 2) = "Die Dietriche brechen ab!";
		a_message_text("main program", 175, 3) = "Rompiste las Ganzuas!";
		a_message_text("main program", 176, 1) = "Your Heartstone saves";
		a_message_text("main program", 176, 2) = "Dein steinernes Herz";
		a_message_text("main program", 176, 3) = "Tu corazon de Piedra te";
		a_message_text("main program", 177, 1) = "your life!";
		a_message_text("main program", 177, 2) = "rettet dir das Leben!";
		a_message_text("main program", 177, 3) = "salva la Vida!";
		a_message_text("main program", 178, 1) = "You evaded the attack!";
		a_message_text("main program", 178, 2) = "Du bist ausgewichen!";
		a_message_text("main program", 178, 3) = "Esquivaste el ataque!";
		a_message_text("main program", 179, 1) = "The Curse of Astarte prevents you from finding something!";
		a_message_text("main program", 179, 2) = "Der Fluch der Astarte verhindert das du etwas findest!";
		a_message_text("main program", 179, 3) = "La Maldicion de Astarte te impide encontrar algo!";
		a_message_text("main program", 180, 1) = "You dodged the trap!";
		a_message_text("main program", 180, 2) = "Du bist der Falle ausgewichen!";
		a_message_text("main program", 180, 3) = "Evadiste la trampa!";
		a_message_text("main program", 181, 1) = "You fly over the trapdoor!";
		a_message_text("main program", 181, 2) = "Du fliegt \374ber die Fallt\374re!";
		a_message_text("main program", 181, 3) = "Vuelas sobre la trampa!";
		a_message_text("main program", 182, 1) = "Works on bones only!";
		a_message_text("main program", 182, 2) = "Funktioniert nur auf Knochen!";
		a_message_text("main program", 182, 3) = "Funciona solamente en Huesos!";
		a_message_text("main program", 183, 1) = "Works on Nexus only!";
		a_message_text("main program", 183, 2) = "Funktioniert nur auf Nexus!";
		a_message_text("main program", 183, 3) = "Funciona solamente en Nexo!";
		a_message_text("main program", 184, 1) = "Works on Sanctum only!";
		a_message_text("main program", 184, 2) = "Funktioniert nur auf Sanktum!";
		a_message_text("main program", 184, 3) = "Funciona solamente en Santuarios!";
		a_message_text("main program", 185, 1) = "The door is locked!";
		a_message_text("main program", 185, 2) = "Die T\374r ist verschlossen!";
		a_message_text("main program", 185, 3) = "La puerta esta cerrada con llave!";
		a_message_text("main program", 186, 1) = "Press space!";
		a_message_text("main program", 186, 2) = "Mit Space gehts weiter!";
		a_message_text("main program", 186, 3) = "Pulsa Espacio para continuar!";
		a_message_text("main program", 187, 1) = "You are protected against magic!";
		a_message_text("main program", 187, 2) = "Du bist gegen magie gesch\374tzt!";
		a_message_text("main program", 187, 3) = "Estas protegido contra la magia!";
		a_message_text("main program", 188, 1) = "Your creature triggered a trap!";
		a_message_text("main program", 188, 2) = "Deine Kreatur hat eine Falle ausgel\366st!";
		a_message_text("main program", 188, 3) = "Tu criatura ha destruido una trampa!";
		a_message_text("main program", 189, 1) = "Target is not an animal!";
		a_message_text("main program", 189, 2) = "Das ist kein Tier!";
		a_message_text("main program", 189, 3) = "No es un animal!";
		a_message_text("main program", 190, 1) = "Target is not undead!";
		a_message_text("main program", 190, 2) = "Das ist kein Untoter!";
		a_message_text("main program", 190, 3) = "No es un no-muerto!";
		a_message_text("main program", 191, 1) = "Your creature is destroyed!";
		a_message_text("main program", 191, 2) = "Deine Kreatur ist vernichtet!";
		a_message_text("main program", 191, 3) = "Tu criatura es destruida!";
		a_message_text("main program", 192, 1) = "Next player!";
		a_message_text("main program", 192, 2) = "N\344chster Spieler!";
		a_message_text("main program", 192, 3) = "Proximo jugador!";
		a_message_text("main program", 193, 1) = "You reached a new level!";
		a_message_text("main program", 193, 2) = "Du erreichst einen neuen Level!";
		a_message_text("main program", 193, 3) = "Entras en un nuevo nivel!";
		a_message_text("main program", 194, 1) = "You do not have enough Mana!";
		a_message_text("main program", 194, 2) = "Du hast nicht genug Mana!";
		a_message_text("main program", 194, 3) = "No tienes suficiente Mana!";
		a_message_text("main program", 195, 1) = "Your creature falls into a trap!";
		a_message_text("main program", 195, 2) = "Deine Kreatur f\344llt in eine Grube!";
		a_message_text("main program", 195, 3) = "Tu criatura cae en una trampa!";
		a_message_text("main program", 196, 1) = "You have to see the monster!";
		a_message_text("main program", 196, 2) = "Du musst das Monster sehen k\366nnen!";
		a_message_text("main program", 196, 3) = "Tienes que ver el monstruo!";
		a_message_text("main program", 197, 1) = "This monster can't be robbed!";
		a_message_text("main program", 197, 2) = "Dieses Monster kann nicht bestohelen werden!";
		a_message_text("main program", 197, 3) = "No puedes robar a este monstruo!";
		a_message_text("main program", 198, 1) = "You stole a jewel!";
		a_message_text("main program", 198, 2) = "Du hast einen Edelstein geklaut!";
		a_message_text("main program", 198, 3) = "Robaste una piedra preciosa!";
		a_message_text("main program", 199, 1) = "You stole a potion!";
		a_message_text("main program", 199, 2) = "Du hast einen Trank geklaut!";
		a_message_text("main program", 199, 3) = "Robaste un pocion!";
		a_message_text("main program", 200, 1) = "Immune against bewiching!";
		a_message_text("main program", 200, 2) = "Immun gegen verhexen!";
		a_message_text("main program", 200, 3) = "Inmune contra brujeria!";
		a_message_text("main program", 201, 1) = "You enter an underground forest";
		a_message_text("main program", 201, 2) = "Du betrittst einen unterirdischen Wald";
		a_message_text("main program", 201, 3) = "Entras en un bosque subterraneo";
		a_message_text("main program", 202, 1) = "Who will be living here?";
		a_message_text("main program", 202, 2) = "Wer wird hier wohl leben?";
		a_message_text("main program", 202, 3) = "Quien estara viviendo aqu\355?";
		a_message_text("main program", 203, 1) = "This nun can increase your luck";
		a_message_text("main program", 203, 2) = "Diese Nonne kann dein Gl\374ck steigern";
		a_message_text("main program", 203, 3) = "Esta Monja puede aumentar tu suerte";
		a_message_text("main program", 204, 1) = "This warrior can teach you to attack";
		a_message_text("main program", 204, 2) = "Dieser Krieger kann deinen Angriff verbessern";
		a_message_text("main program", 204, 3) = "Este luchador puede aumentar tu ataque";
		a_message_text("main program", 205, 1) = "Trainer of Dexterity";
		a_message_text("main program", 205, 2) = "Geschick-Lehrer";
		a_message_text("main program", 205, 3) = "Entrenador de Destreza";
		a_message_text("main program", 206, 1) = "Trainer of Strength";
		a_message_text("main program", 206, 2) = "St\344rke-Lehrer";
		a_message_text("main program", 206, 3) = "Entrenador de Fuerza";
		a_message_text("main program", 207, 1) = "Trainer of Life Points";
		a_message_text("main program", 207, 2) = "Lebenspunkte-Lehrer";
		a_message_text("main program", 207, 3) = "Entrenador de Puntos de Vida";
		a_message_text("main program", 208, 1) = "Trainer of Speed";
		a_message_text("main program", 208, 2) = "Geschwindigkeits-Lehrer";
		a_message_text("main program", 208, 3) = "Entrenador de Velocidad";
		a_message_text("main program", 209, 1) = "This little faerie can increase your Perception";
		a_message_text("main program", 209, 2) = "Diese kleine Fee kann deine Wahrnehmung steigern";
		a_message_text("main program", 209, 3) = "Esta hada puede aumentar tu Percepci\363n";
		a_message_text("main program", 210, 1) = "Trainer of Mana";
		a_message_text("main program", 210, 2) = "Mana-Lehrer";
		a_message_text("main program", 210, 3) = "Entrenador de Mana";
		a_message_text("main program", 211, 1) = "This witch can increase your Spell Power";
		a_message_text("main program", 211, 2) = "Diese Hexe kann deine Zauberkraft verbessern";
		a_message_text("main program", 211, 3) = "Esta Bruja puede aumentar tu Poder de Hechizos";
		a_message_text("main program", 212, 1) = "This archmage can teach you Spell Circles";
		a_message_text("main program", 212, 2) = "Dieser Erzmagier kann dir Zirkel beibringen";
		a_message_text("main program", 212, 3) = "Este Archimago puede aumentar tu C\355rculo";
		a_message_text("main program", 213, 1) = "The training costs you: ";
		a_message_text("main program", 213, 2) = "Das Training kostet: ";
		a_message_text("main program", 213, 3) = "El entrenamiento cuesta: ";
		a_message_text("main program", 214, 1) = "Train";
		a_message_text("main program", 214, 2) = "Trainieren";
		a_message_text("main program", 214, 3) = "Entrenar";
		a_message_text("main program", 215, 1) = "You do not have enough gold!";
		a_message_text("main program", 215, 2) = "Du hast nicht genug Gold!";
		a_message_text("main program", 215, 3) = "No tienes suficiente oro!";
		a_message_text("main program", 216, 1) = "Your actual rating:";
		a_message_text("main program", 216, 2) = "Dein aktueller Wert:";
		a_message_text("main program", 216, 3) = "Ahora tienes:";
		a_message_text("main program", 217, 1) = "You have been trained";
		a_message_text("main program", 217, 2) = "Du wurdest trainiert";
		a_message_text("main program", 217, 3) = "Has sido entrenado";
		a_message_text("main program", 218, 1) = "This is your end!";
		a_message_text("main program", 218, 2) = "Das ist dein Ende!";
		a_message_text("main program", 218, 3) = "Este es tu Fin!";
		a_message_text("main program", 219, 1) = "You have fallen into the lair";
		a_message_text("main program", 219, 2) = "Du ist in den Bau eines";
		a_message_text("main program", 219, 3) = "Caiste en la guarida de un";
		a_message_text("main program", 220, 1) = "of a horrible dragon!";
		a_message_text("main program", 220, 2) = "schrecklichen Drachen gefallen!";
		a_message_text("main program", 220, 3) = "dragon horrible!";
		a_message_text("main program", 221, 1) = "You are unobservant!";
		a_message_text("main program", 221, 2) = "Du bist unaufmerksam!";
		a_message_text("main program", 221, 3) = "Eres despistado!";
		a_message_text("main program", 222, 1) = "You have been cured from poison!";
		a_message_text("main program", 222, 2) = "Du bist entgiftet worden!";
		a_message_text("main program", 222, 3) = "Te has curado del veneno!";
		a_message_text("main program", 223, 1) = "You lose all your Mana!";
		a_message_text("main program", 223, 2) = "Du verlierst all dein Mana!";
		a_message_text("main program", 223, 3) = "Pierdes todo tu Mana!";
		a_message_text("main program", 224, 1) = "You already carry a weapon!";
		a_message_text("main program", 224, 2) = "Du tr\344gst schon eine Waffe!";
		a_message_text("main program", 224, 3) = "Ya llevas equipada una arma!";
		a_message_text("main program", 225, 1) = "You already wear boots!";
		a_message_text("main program", 225, 2) = "Du tr\344gst schon Stiefel!";
		a_message_text("main program", 225, 3) = "Ya llevas puestas unas botas!";
		a_message_text("main program", 226, 1) = "You already wear a helmet!";
		a_message_text("main program", 226, 2) = "Du tr\344gst schon einen Helm!";
		a_message_text("main program", 226, 3) = "Ya llevas puesto casco!";
		a_message_text("main program", 227, 1) = "You already wear gloves!";
		a_message_text("main program", 227, 2) = "Du tr\344gst schon Handschuhe!";
		a_message_text("main program", 227, 3) = "Ya llevas puestos unos guantes!";
		a_message_text("main program", 228, 1) = "You already wear armor!";
		a_message_text("main program", 228, 2) = "Du tr\344gst schon eine R\374stung!";
		a_message_text("main program", 228, 3) = "Ya llevas una armadura!";
		a_message_text("main program", 229, 1) = "You already carry a shield!";
		a_message_text("main program", 229, 2) = "Du tr\344gst schon ein Schild!";
		a_message_text("main program", 229, 3) = "Ya llevas equipado un escudo!";
		a_message_text("main program", 230, 1) = "You need both hands!";
		a_message_text("main program", 230, 2) = "Du ben\366tigst beide H\344nde!";
		a_message_text("main program", 230, 3) = "Necesitas ambas manos!";
		a_message_text("main program", 231, 1) = "You carry a two-handed weapon!";
		a_message_text("main program", 231, 2) = "Du tr\344gst eine Zweihandwaffe!";
		a_message_text("main program", 231, 3) = "Tienes equipada una arma a dos manos!";
		a_message_text("main program", 232, 1) = "This trainer trained you already";
		a_message_text("main program", 232, 2) = "Dieser Lehrer hat dich schon trainiert";
		a_message_text("main program", 232, 3) = "Este profesor ya te enseno algo";
		a_message_text("main program", 233, 1) = "You can't see the destination!";
		a_message_text("main program", 233, 2) = "Du kannt das Ziel nicht sehen!";
		a_message_text("main program", 233, 3) = "No puedes ver el destino!";
		a_message_text("main program", 234, 1) = "You enter a room with a lake of";
		a_message_text("main program", 234, 2) = "Du betrittst einen Raum mit einem";
		a_message_text("main program", 234, 3) = "Entras en una cueva con un lago";
		a_message_text("main program", 235, 1) = "lava and treasure!";
		a_message_text("main program", 235, 2) = "Lavasee und einem Schatz!";
		a_message_text("main program", 235, 3) = "de lava y un tesoro!";
		a_message_text("main program", 236, 1) = "A piece of the Staff of";
		a_message_text("main program", 236, 2) = "Ein Teil des Stabes des";
		a_message_text("main program", 236, 3) = "Una parte del Bast\363n del";
		a_message_text("main program", 237, 1) = "the Last Covenant!";
		a_message_text("main program", 237, 2) = "letzten B\374ndnisses!";
		a_message_text("main program", 237, 3) = "Ultimo Convenio!";
		a_message_text("main program", 238, 1) = "You found one piece of the staff!";
		a_message_text("main program", 238, 2) = "Du hast einen Teil des Stabes gefunden!";
		a_message_text("main program", 238, 3) = "Encontraste una parte del bast\363n!";
		a_message_text("main program", 239, 1) = "Staff Pieces: ";
		a_message_text("main program", 239, 2) = "Stabteile: ";
		a_message_text("main program", 239, 3) = "Partes del bast\363n: ";
		a_message_text("main program", 240, 1) = " , you made it!";
		a_message_text("main program", 240, 2) = " , du hast es geschafft!";
		a_message_text("main program", 240, 3) = " , lo conseguiste!";
		a_message_text("main program", 241, 1) = "You will see the daylight again!";
		a_message_text("main program", 241, 2) = "Du wirst das Tageslicht wiedersehen!";
		a_message_text("main program", 241, 3) = "Volveras a ver el sol!";
		a_message_text("main program", 242, 1) = "You can enter your name into";
		a_message_text("main program", 242, 2) = "Du kannst dich in die Liste";
		a_message_text("main program", 242, 3) = "Puedes escribir tu nombre en";
		a_message_text("main program", 243, 1) = "the List of Survivors";
		a_message_text("main program", 243, 2) = "der \334berlebenden eintragen";
		a_message_text("main program", 243, 3) = "la lista de los sobrevivientes";
		a_message_text("main program", 244, 1) = "We hope you liked Lost Labyrinth!";
		a_message_text("main program", 244, 2) = "Wir hoffen Lost Labyrinth hat dir gefallen!";
		a_message_text("main program", 244, 3) = "Esperamos que disfrutaras de Lost Labyrinth!";
		a_message_text("main program", 245, 1) = "Enter your name:";
		a_message_text("main program", 245, 2) = "Gib deinen Namen ein:";
		a_message_text("main program", 245, 3) = "Ingresa tu nombre:";
		a_message_text("main program", 246, 1) = "There is nobody there!";
		a_message_text("main program", 246, 2) = "Da ist niemand!";
		a_message_text("main program", 246, 3) = "No hay nadie!";
		a_message_text("main program", 247, 1) = "You remove the rock!";
		a_message_text("main program", 247, 2) = "Du entfernst den Stein!";
		a_message_text("main program", 247, 3) = "Remueves la piedra!";
		a_message_text("main program", 248, 1) = "You found a treasure!";
		a_message_text("main program", 248, 2) = "Du hast einen Schatz gefunden!";
		a_message_text("main program", 248, 3) = "Encontraste un tesoro!";
		a_message_text("main program", 249, 1) = "Reason of Death: ";
		a_message_text("main program", 249, 2) = "Todesgrund: ";
		a_message_text("main program", 249, 3) = "Tipo de Muerto: ";
		a_message_text("main program", 250, 1) = "Skills: ";
		a_message_text("main program", 250, 2) = "F\344higkeiten: ";
		a_message_text("main program", 250, 3) = "Habilidades: ";
		a_message_text("main program", 251, 1) = "The map dissolves!";
		a_message_text("main program", 251, 2) = "Die Karte zerf\344llt!";
		a_message_text("main program", 251, 3) = "El mapa desaparece!";
		a_message_text("main program", 252, 1) = "The shovel breaks!";
		a_message_text("main program", 252, 2) = "Die Schaufel zerbricht!";
		a_message_text("main program", 252, 3) = "La pala se rompe!";
		a_message_text("main program", 253, 1) = "The pickaxe breaks!";
		a_message_text("main program", 253, 2) = "Die Spitzhacke zerbricht!";
		a_message_text("main program", 253, 3) = "La piqueta se rompe!";
		a_message_text("main program", 254, 1) = "The traptool breaks!";
		a_message_text("main program", 254, 2) = "Das Fallenwerkzeug zerbricht!";
		a_message_text("main program", 254, 3) = "Las herramientas para trampas se rompen!";
		a_message_text("main program", 255, 1) = "You cannot open this!";
		a_message_text("main program", 255, 2) = "Das kannst du nicht \366ffnen!";
		a_message_text("main program", 255, 3) = "No puedes abrir eso!";
		a_message_text("main program", 256, 1) = "You are immune to poison!";
		a_message_text("main program", 256, 2) = "Du bist immun gegen Gift!";
		a_message_text("main program", 256, 3) = "Eres inmune contra el veneno!";
		a_message_text("main program", 257, 1) = "The ring disappears!";
		a_message_text("main program", 257, 2) = "Der Ring verschwindet!";
		a_message_text("main program", 257, 3) = "El anillo desaparece!";
		a_message_text("main program", 258, 1) = "The Nexus disappears!";
		a_message_text("main program", 258, 2) = "Der Nexus verschwindet!";
		a_message_text("main program", 258, 3) = "El Nexo desaparece!";
		a_message_text("main program", 259, 1) = "The Sanctum disappears!";
		a_message_text("main program", 259, 2) = "Das Sanktum verschwindet!";
		a_message_text("main program", 259, 3) = "El Santuario desaparece!";
		a_message_text("main program", 260, 1) = "You already wear a ring!";
		a_message_text("main program", 260, 2) = "Du tr\344gst schon einen Ring!";
		a_message_text("main program", 260, 3) = "Ya llevas puesto un anillo!";
		a_message_text("main program", 261, 1) = "You have been spotted!";
		a_message_text("main program", 261, 2) = "Du wurdest bemerkt!";
		a_message_text("main program", 261, 3) = "Te han descubierto!";
		a_message_text("main program", 262, 1) = "No charges left!";
		a_message_text("main program", 262, 2) = "Keine Ladungen mehr!";
		a_message_text("main program", 262, 3) = "No quedan mas cargas!";
		a_message_text("main program", 263, 1) = "This was the last arrow!";
		a_message_text("main program", 263, 2) = "Das war der letzte Pfeil!";
		a_message_text("main program", 263, 3) = "Esa fue la ultima flecha!";
		a_message_text("main program", 264, 1) = "Works on walls only!";
		a_message_text("main program", 264, 2) = "Funktioniert nur auf W\344nde!";
		a_message_text("main program", 264, 3) = "Funciona solamente con paredes!";
		a_message_text("main program", 265, 1) = "Immune against fire!";
		a_message_text("main program", 265, 2) = "Immun gegen Feuer!";
		a_message_text("main program", 265, 3) = "Inmune al fuego!";
		a_message_text("main program", 266, 1) = "Immune against petrification!";
		a_message_text("main program", 266, 2) = "Immun gegen Versteinern!";
		a_message_text("main program", 266, 3) = "Imune a la petrificaci\363n!";
		a_message_text("main program", 267, 1) = "Immune against ice!";
		a_message_text("main program", 267, 2) = "Immun gegen Eis!";
		a_message_text("main program", 267, 3) = "Imune al hielo!";
		a_message_text("main program", 268, 1) = "Immune against dehydration!";
		a_message_text("main program", 268, 2) = "Immun gegen Dehydration!";
		a_message_text("main program", 268, 3) = "Inmune a la deshidrataci\363n!";
		a_message_text("main program", 269, 1) = "Has no fear!";
		a_message_text("main program", 269, 2) = "Hat keine Angst!";
		a_message_text("main program", 269, 3) = "No tiene miedo!";
		a_message_text("main program", 270, 1) = "You enter a tavern";
		a_message_text("main program", 270, 2) = "Du betrittst eine Taverne";
		a_message_text("main program", 270, 3) = "Entras en una taverna";
		a_message_text("main program", 271, 1) = "filled with courageous";
		a_message_text("main program", 271, 2) = "gef\374llt mit wagemutigen";
		a_message_text("main program", 271, 3) = "llena de aventureros";
		a_message_text("main program", 272, 1) = "adventurers.";
		a_message_text("main program", 272, 2) = "Abenteurern.";
		a_message_text("main program", 272, 3) = "sin miedo.";
		a_message_text("main program", 273, 1) = "This fighter will work";
		a_message_text("main program", 273, 2) = "Dieser K\344mpfer w\374rde sich ";
		a_message_text("main program", 273, 3) = "Este luchador trabajaria";
		a_message_text("main program", 274, 1) = "for you!";
		a_message_text("main program", 274, 2) = "dir anschliessen!";
		a_message_text("main program", 274, 3) = "por ti!";
		a_message_text("main program", 275, 1) = "He wants: ";
		a_message_text("main program", 275, 2) = "Er will: ";
		a_message_text("main program", 275, 3) = "El quiere: ";
		a_message_text("main program", 276, 1) = "His attributes: ";
		a_message_text("main program", 276, 2) = "Seine Werte: ";
		a_message_text("main program", 276, 3) = "Sus atributos: ";
		a_message_text("main program", 277, 1) = "Yes";
		a_message_text("main program", 277, 2) = "Ja";
		a_message_text("main program", 277, 3) = "Si";
		a_message_text("main program", 278, 1) = "No";
		a_message_text("main program", 278, 2) = "Nein";
		a_message_text("main program", 278, 3) = "No";
		a_message_text("main program", 279, 1) = "Do you accept?";
		a_message_text("main program", 279, 2) = "Akzeptierst du?";
		a_message_text("main program", 279, 3) = "Aceptas?";
		a_message_text("main program", 280, 1) = "You got a bodyguard!";
		a_message_text("main program", 280, 2) = "Du hast nun einen Leibw\344chter!";
		a_message_text("main program", 280, 3) = "Ahora tienes guardaespaldas!";
		a_message_text("main program", 281, 1) = "Cannot be dropped!";
		a_message_text("main program", 281, 2) = "Kann nicht abgelegt werden!";
		a_message_text("main program", 281, 3) = "No puedes tirarlo!";
		a_message_text("main program", 282, 1) = "You entered the lair of the";
		a_message_text("main program", 282, 2) = "Du hast den Bau des gr\366ssten";
		a_message_text("main program", 282, 3) = "Entraste en la guarida del monstruo";
		a_message_text("main program", 283, 1) = "biggest monster in the Labyrinth!";
		a_message_text("main program", 283, 2) = "Monsters des Labyrinths betreten!";
		a_message_text("main program", 283, 3) = "mas grande del Laberinto!";
		a_message_text("main program", 284, 1) = "Here lives the ancient Hydra!!!";
		a_message_text("main program", 284, 2) = "Hier lebt die uralte Hydra!!!";
		a_message_text("main program", 284, 3) = "Aqui vive una Hydra anciana!!!";
		a_message_text("main program", 285, 1) = "Will you serve as food here?";
		a_message_text("main program", 285, 2) = "Wirst du hier als Futter enden?";
		a_message_text("main program", 285, 3) = "Vas a ser tu su proxima comida?";
		a_message_text("main program", 286, 1) = "You missed!";
		a_message_text("main program", 286, 2) = "Du schl\344gst vorbei!";
		a_message_text("main program", 286, 3) = "No alcanzaste!";
		a_message_text("main program", 287, 1) = "You destroyed one head!";
		a_message_text("main program", 287, 2) = "Du hast einen Kopf abgeschlagen!";
		a_message_text("main program", 287, 3) = "Le cortaste una cabeza!";
		a_message_text("main program", 288, 1) = "You destroyed the Hydra!";
		a_message_text("main program", 288, 2) = "Du hast die Hydra vernichtet!";
		a_message_text("main program", 288, 3) = "Mataste a la Hydra!!";
		a_message_text("main program", 289, 1) = "The Hydra has ";
		a_message_text("main program", 289, 2) = "Du Hydra hat nun ";
		a_message_text("main program", 289, 3) = "La Hydra ahora tiene ";
		a_message_text("main program", 290, 1) = " heads!";
		a_message_text("main program", 290, 2) = " K\366pfe!";
		a_message_text("main program", 290, 3) = " cabezas!";
		a_message_text("main program", 291, 1) = "The monster missed!";
		a_message_text("main program", 291, 2) = "Das monster verfehlt dich!";
		a_message_text("main program", 291, 3) = "El monstruo no alcanza!";
		a_message_text("main program", 292, 1) = "You enter the Hall of";
		a_message_text("main program", 292, 2) = "Du betrittst die Halle der";
		a_message_text("main program", 292, 3) = "Entras en la Sala de";
		a_message_text("main program", 293, 1) = "Illusions!";
		a_message_text("main program", 293, 2) = "Illusionen!";
		a_message_text("main program", 293, 3) = "Ilusiones!";
		a_message_text("main program", 294, 1) = "Will you be able to find the exit?";
		a_message_text("main program", 294, 2) = "Wirst du hier den Ausgang finden?";
		a_message_text("main program", 294, 3) = "Vas a encontrar la salida aqui?";
		a_message_text("main program", 295, 1) = "Itsy bitsy spiders!";
		a_message_text("main program", 295, 2) = "Spinnen, Spinnen ,Spinnen!";
		a_message_text("main program", 295, 3) = "Ara\361as, Ara\361as, Ara\361as!";
		a_message_text("main program", 296, 1) = "This is a big lair full of them.";
		a_message_text("main program", 296, 2) = "Das ist wohl ein riesiger Bau.";
		a_message_text("main program", 296, 3) = "Esto es una guarida llena de ellas.";
		a_message_text("main program", 297, 1) = "Take care that they don't bite you!";
		a_message_text("main program", 297, 2) = "Pass auf das sie dich nicht beissen!";
		a_message_text("main program", 297, 3) = "Cuidate que no te piquen!";
		a_message_text("main program", 298, 1) = "Game saved!";
		a_message_text("main program", 298, 2) = "Spiel gesichert!";
		a_message_text("main program", 298, 3) = "Juego guardado!";
		a_message_text("main program", 299, 1) = "Game loaded!";
		a_message_text("main program", 299, 2) = "Spiel geladen!";
		a_message_text("main program", 299, 3) = "Juego cargado!";
		a_message_text("main program", 300, 1) = "Your creature missed!";
		a_message_text("main program", 300, 2) = "Deine Kreatur verfehlt!";
		a_message_text("main program", 300, 3) = "Tu criatura no alcanza!";
		a_message_text("main program", 301, 1) = "You found the secret laboratory";
		a_message_text("main program", 301, 2) = "Du hast das geheime Labor";
		a_message_text("main program", 301, 3) = "Encontraste el laboratorio secreto";
		a_message_text("main program", 302, 1) = "of an alchemist!";
		a_message_text("main program", 302, 2) = "eines Alchimisten gefunden!";
		a_message_text("main program", 302, 3) = "de un alquimista!";
		a_message_text("main program", 303, 1) = "Maybe you can find some";
		a_message_text("main program", 303, 2) = "Vielleicht findest du hier den";
		a_message_text("main program", 303, 3) = "Tal vez puedes encontrar";
		a_message_text("main program", 304, 1) = "potions here.";
		a_message_text("main program", 304, 2) = "einen oder anderen Trank.";
		a_message_text("main program", 304, 3) = "algunas pociones.";
		a_message_text("main program", 305, 1) = "You found a secret library.";
		a_message_text("main program", 305, 2) = "Du hast eine geheime Bibliothek";
		a_message_text("main program", 305, 3) = "Encontraste una libreria";
		a_message_text("main program", 306, 1) = "";
		a_message_text("main program", 306, 2) = "gefunden.";
		a_message_text("main program", 306, 3) = "secreta.";
		a_message_text("main program", 307, 1) = "Maybe you can find some scrolls";
		a_message_text("main program", 307, 2) = "Vielleicht kannst du ein paar";
		a_message_text("main program", 307, 3) = "Tal vez puedes encontrar algunos";
		a_message_text("main program", 308, 1) = "here.";
		a_message_text("main program", 308, 2) = "Schriftrollen finden.";
		a_message_text("main program", 308, 3) = "hechizos.";
		a_message_text("main program", 309, 1) = "You found a potion!";
		a_message_text("main program", 309, 2) = "Du findest einen Trank!";
		a_message_text("main program", 309, 3) = "Encontraste una pocion!";
		a_message_text("main program", 310, 1) = "You found a scroll!";
		a_message_text("main program", 310, 2) = "Du findest eine Schriftrolle!";
		a_message_text("main program", 310, 3) = "Encontraste un pergamino!";
		a_message_text("main program", 311, 1) = "You found an apple!";
		a_message_text("main program", 311, 2) = "Du findest einen Apfel!";
		a_message_text("main program", 311, 3) = "Encontraste una manzana!";
		a_message_text("main program", 312, 1) = "The monster resisted your spell!";
		a_message_text("main program", 312, 2) = "Das Monster hat deinen Zauber dispelled!";
		a_message_text("main program", 312, 3) = "El monstruo ha cancelado tu hechizo!";
		a_message_text("main program", 313, 1) = "The monster breathes fire!";
		a_message_text("main program", 313, 2) = "Das Monster spuckt Feuer!";
		a_message_text("main program", 313, 3) = "El monstruo lanza fuego!";
		a_message_text("main program", 314, 1) = "The monster breathes ice!";
		a_message_text("main program", 314, 2) = "Das Monster spuckt Eis!";
		a_message_text("main program", 314, 3) = "El monstruo lanza hielo!";
		a_message_text("main program", 315, 1) = "You are protected against cold!";
		a_message_text("main program", 315, 2) = "Du bist gegen K\344lte geschutzt!";
		a_message_text("main program", 315, 3) = "Estas protegido contra el frio!";
		a_message_text("main program", 316, 1) = "The monster breathes venom!";
		a_message_text("main program", 316, 2) = "Das Monster spuckt Gift!";
		a_message_text("main program", 316, 3) = "El monstruo lanza veneno!";
		a_message_text("main program", 317, 1) = "The monster throws lightning!";
		a_message_text("main program", 317, 2) = "Das Monster wirft Blitze!";
		a_message_text("main program", 317, 3) = "El monstruo lanza rayos!";
		a_message_text("main program", 318, 1) = "The monster petrifies you!";
		a_message_text("main program", 318, 2) = "Das Monster versteinert dich!";
		a_message_text("main program", 318, 3) = "El monstruo te petrifica!";
		a_message_text("main program", 319, 1) = "The monster kills you with his gaze!";
		a_message_text("main program", 319, 2) = "Das Monster t\366tet dich mit einem Blick!";
		a_message_text("main program", 319, 3) = "El monstruo te mata con una mirada!";
		a_message_text("main program", 320, 1) = "Wrong program version!";
		a_message_text("main program", 320, 2) = "Falsche Programmversion!";
		a_message_text("main program", 320, 3) = "Versi\363n del programa erronea!";
		a_message_text("main program", 321, 1) = "Your God of War grants you a Life Point!";
		a_message_text("main program", 321, 2) = "Dein Kriegsgott schenkt dir einen Lebenspunkt!";
		a_message_text("main program", 321, 3) = "Tu Dios de la guerra te ortoga un Punto de Vida!";
		a_message_text("main program", 322, 1) = "Your God of Death grants you a Mana Point!";
		a_message_text("main program", 322, 2) = "Dein Todesgott schenkt dir einen Manapunkt!";
		a_message_text("main program", 322, 3) = "Tu Dios de la muerte te ortoga un Punto de Mana!";
		a_message_text("main program", 323, 1) = "Your Goddess of Healing grants you a Life Point!";
		a_message_text("main program", 323, 2) = "Deine G\366ttin der Heilung schenkt dir einen Lebenspunkt!";
		a_message_text("main program", 323, 3) = "Tu Diosa de la curaci\363n te ortoga un Punto de Vida!";
		a_message_text("main program", 324, 1) = "Your Goddess of Wisdom grants you a Mana Point!";
		a_message_text("main program", 324, 2) = "Deine G\366ttin der Weisheit schenkt dir einen Manapunkt!";
		a_message_text("main program", 324, 3) = "Tu Diosa de la sabiduria te ortoga un Punto de Mana!";
		a_message_text("main program", 325, 1) = "Your God of Secrets grants you a Life Point!";
		a_message_text("main program", 325, 2) = "Dein Gott der Geheimnisse schenkt dir einen Lebenspunkt!";
		a_message_text("main program", 325, 3) = "Tu Dios de los secretos te ortoga un Punto de Vida!";
		a_message_text("main program", 326, 1) = "Your God of Wealth grants you a Life Point!";
		a_message_text("main program", 326, 2) = "Dein Gott des Reichtums schenkt dir einen Lebenspunkt!";
		a_message_text("main program", 326, 3) = "Tu Dios de la riqueza te ortoga un Punto de Vida!";
		a_message_text("main program", 327, 1) = "Nobody wants to talk to you!";
		a_message_text("main program", 327, 2) = "Niemand will mit dir reden!";
		a_message_text("main program", 327, 3) = "Nadie quiere hablar contigo!";
		a_message_text("main program", 328, 1) = "You do not have Thaumaturgy!";
		a_message_text("main program", 328, 2) = "Du hast keine Thaumaturgie!";
		a_message_text("main program", 328, 3) = "No tienes Taumaturgia!";
		a_message_text("main program", 329, 1) = "Immune against lightning!";
		a_message_text("main program", 329, 2) = "Immun gegen Blitze!";
		a_message_text("main program", 329, 3) = "Inmune a los relampagos!";
		a_message_text("main program", 330, 1) = "High score saved on the Internet!";
		a_message_text("main program", 330, 2) = "Highscore im Internet gespeichert!";
		a_message_text("main program", 330, 3) = "Puntuaci\363n alta a\361adida a internet!";
		a_message_text("main program", 331, 1) = "You enter a room with a";
		a_message_text("main program", 331, 2) = "Du betrittst einen Raum mit";
		a_message_text("main program", 331, 3) = "Entras en una habitaci\363n con";
		a_message_text("main program", 332, 1) = "treasure!";
		a_message_text("main program", 332, 2) = "einem Schatz!";
		a_message_text("main program", 332, 3) = "un tesoro!";
		a_message_text("main program", 333, 1) = "But it's protected!";
		a_message_text("main program", 333, 2) = "Leider ist er bewacht!";
		a_message_text("main program", 333, 3) = "Pero esta protegido!";
		a_message_text("main program", 334, 1) = "Reinforced stone!";
		a_message_text("main program", 334, 2) = "Zu harter Stein!";
		a_message_text("main program", 334, 3) = "El muro es demasiado fuerte!";
		a_message_text("main program", 335, 1) = "This is the room of an old";
		a_message_text("main program", 335, 2) = "Dies ist der Raum eines";
		a_message_text("main program", 335, 3) = "Esta es la habitaci\363n de un";
		a_message_text("main program", 336, 1) = "wizard!";
		a_message_text("main program", 336, 2) = "alten Zaubereres!";
		a_message_text("main program", 336, 3) = "mago viejo!";
		a_message_text("main program", 337, 1) = "Maybe he could be of help?";
		a_message_text("main program", 337, 2) = "Vielleicht kann er dir helfen?";
		a_message_text("main program", 337, 3) = "Tal vez el puede ayudarte?";
		a_message_text("main program", 338, 1) = "Hello my friend!";
		a_message_text("main program", 338, 2) = "Hallo mein Freund!";
		a_message_text("main program", 338, 3) = "Hola Amigo!";
		a_message_text("main program", 339, 1) = "Shall I do something for you?";
		a_message_text("main program", 339, 2) = "Soll ich etwas f\374r dich tun?";
		a_message_text("main program", 339, 3) = "Puedo hacer algo por ti?";
		a_message_text("main program", 340, 1) = "Kill all monsters in this level?";
		a_message_text("main program", 340, 2) = "Alle monster dieses Levels t\366ten?";
		a_message_text("main program", 340, 3) = "Matar todos los montruos de este nivel?";
		a_message_text("main program", 341, 1) = "Destroy all the traps?";
		a_message_text("main program", 341, 2) = "Alle Fallen zerst\366ren?";
		a_message_text("main program", 341, 3) = "Destruir todas las trampas?";
		a_message_text("main program", 342, 1) = "Open all doors?";
		a_message_text("main program", 342, 2) = "Alle T\374ren \366ffnen?";
		a_message_text("main program", 342, 3) = "Abrir todas las puertas?";
		a_message_text("main program", 343, 1) = "Heal you completely?";
		a_message_text("main program", 343, 2) = "Dich vollst\344ndig heilen?";
		a_message_text("main program", 343, 3) = "Curarte totalmente?";
		a_message_text("main program", 344, 1) = "The wizard disappears!";
		a_message_text("main program", 344, 2) = "Der Zauberer verschwindet!";
		a_message_text("main program", 344, 3) = "El mago desaparece!";
		a_message_text("main program", 345, 1) = "You found an underground pond!";
		a_message_text("main program", 345, 2) = "Du hast einen unterirdischen Teich gefunden!";
		a_message_text("main program", 345, 3) = "Encontraste un lago subterraneo!";
		a_message_text("main program", 346, 1) = "Maybe you can dive in and";
		a_message_text("main program", 346, 2) = "Vielleicht kannst du hier tauchen";
		a_message_text("main program", 346, 3) = "Tal vez puedes bucear y encontrar";
		a_message_text("main program", 347, 1) = "find some treasures?";
		a_message_text("main program", 347, 2) = "und Sch\344tze finden?";
		a_message_text("main program", 347, 3) = "tesoros?";
		a_message_text("main program", 348, 1) = "Some potions broke: ";
		a_message_text("main program", 348, 2) = "Einige Tr\344nke zerbrachen: ";
		a_message_text("main program", 348, 3) = "Algunos pociones se rompieron: ";
		a_message_text("main program", 349, 1) = "Flying";
		a_message_text("main program", 349, 2) = "Fliegt";
		a_message_text("main program", 349, 3) = "Volar";
		a_message_text("main program", 350, 1) = "Sets Ambushes";
		a_message_text("main program", 350, 2) = "Legt Hinterhalte";
		a_message_text("main program", 350, 3) = "Hace Emboscadas";
		a_message_text("main program", 351, 1) = "Poisonous";
		a_message_text("main program", 351, 2) = "Giftig";
		a_message_text("main program", 351, 3) = "Venenoso";
		a_message_text("main program", 352, 1) = "Can Be Robbed";
		a_message_text("main program", 352, 2) = "Ist bestehlbar";
		a_message_text("main program", 352, 3) = "Puede Ser Robado";
		a_message_text("main program", 353, 1) = "Ranged Combat";
		a_message_text("main program", 353, 2) = "Fernkampf";
		a_message_text("main program", 353, 3) = "Arco";
		a_message_text("main program", 354, 1) = "Calls for Backup";
		a_message_text("main program", 354, 2) = "Holt Verst\344rkung";
		a_message_text("main program", 354, 3) = "Pide Ayuda";
		a_message_text("main program", 355, 1) = "Dry";
		a_message_text("main program", 355, 2) = "Trocken";
		a_message_text("main program", 355, 3) = "Seco";
		a_message_text("main program", 356, 1) = "Can be scared";
		a_message_text("main program", 356, 2) = "Kennt Angst";
		a_message_text("main program", 356, 3) = "Tiene Miedo";
		a_message_text("main program", 357, 1) = "Can Be Charmed";
		a_message_text("main program", 357, 2) = "Befreundbar";
		a_message_text("main program", 357, 3) = "Puede Ser Encantado";
		a_message_text("main program", 358, 1) = "Robs";
		a_message_text("main program", 358, 2) = "Stiehlt";
		a_message_text("main program", 358, 3) = "Roba";
		a_message_text("main program", 359, 1) = "Burns";
		a_message_text("main program", 359, 2) = "Brennt";
		a_message_text("main program", 359, 3) = "Quema";
		a_message_text("main program", 360, 1) = "Fire Resistant";
		a_message_text("main program", 360, 2) = "Feuerfest";
		a_message_text("main program", 360, 3) = "Inmune al Fuego";
		a_message_text("main program", 361, 1) = "Stoneproof";
		a_message_text("main program", 361, 2) = "Steinfest";
		a_message_text("main program", 361, 3) = "Inmune a la Piedra";
		a_message_text("main program", 362, 1) = "Throws Lightning";
		a_message_text("main program", 362, 2) = "Wirft Blitze";
		a_message_text("main program", 362, 3) = "Tira Rayos";
		a_message_text("main program", 363, 1) = "Can dispel magic";
		a_message_text("main program", 363, 2) = "Dispel";
		a_message_text("main program", 363, 3) = "Contrarresta";
		a_message_text("main program", 364, 1) = "Regenerates";
		a_message_text("main program", 364, 2) = "Regeneriert";
		a_message_text("main program", 364, 3) = "Regeneraci\363n";
		a_message_text("main program", 365, 1) = "Resists normal weapons";
		a_message_text("main program", 365, 2) = "Unverwundbar f\374r normale Waffen";
		a_message_text("main program", 365, 3) = "Inmune al Da\361o";
		a_message_text("main program", 366, 1) = "Iceproof";
		a_message_text("main program", 366, 2) = "Eisfest";
		a_message_text("main program", 366, 3) = "Inmune al Hielo";
		a_message_text("main program", 367, 1) = "Invisible";
		a_message_text("main program", 367, 2) = "Unsichtbar";
		a_message_text("main program", 367, 3) = "Transparente";
		a_message_text("main program", 368, 1) = "Breathes Fire";
		a_message_text("main program", 368, 2) = "Feueratem";
		a_message_text("main program", 368, 3) = "Escupe Fuego";
		a_message_text("main program", 369, 1) = "Breathes Venom";
		a_message_text("main program", 369, 2) = "Giftatem";
		a_message_text("main program", 369, 3) = "Escupe Veneno";
		a_message_text("main program", 370, 1) = "Petrifies";
		a_message_text("main program", 370, 2) = "Versteinert";
		a_message_text("main program", 370, 3) = "Petrifica";
		a_message_text("main program", 371, 1) = "Breathes Ice";
		a_message_text("main program", 371, 2) = "Frostatem";
		a_message_text("main program", 371, 3) = "Escupe Hielo";
		a_message_text("main program", 372, 1) = "View of Death";
		a_message_text("main program", 372, 2) = "Todesblick";
		a_message_text("main program", 372, 3) = "Mirada de la Muerte";
		a_message_text("main program", 373, 1) = "Lightningproof";
		a_message_text("main program", 373, 2) = "Blitzfest";
		a_message_text("main program", 373, 3) = "Inmune a Rayos";
		a_message_text("main program", 374, 1) = "May drop loot";
		a_message_text("main program", 374, 2) = "Schatz m\366glich";
		a_message_text("main program", 374, 3) = "Tiene un Tesoro";
		a_message_text("main program", 375, 1) = "May drop magical item";
		a_message_text("main program", 375, 2) = "Magischer Schatz m\366glich";
		a_message_text("main program", 375, 3) = "Tiene un Tesoro Magico";
		a_message_text("main program", 376, 1) = "Resits Critical Hits";
		a_message_text("main program", 376, 2) = "Immun kritische Treffer";
		a_message_text("main program", 376, 3) = "Inmune a Golpes Cr\355ticos";
		a_message_text("main program", 377, 1) = "Magical Darkness";
		a_message_text("main program", 377, 2) = "Magische Dunkelheit";
		a_message_text("main program", 377, 3) = "Oscuridad Magica";
		a_message_text("main program", 378, 1) = "It's very dark in here...";
		a_message_text("main program", 378, 2) = "Es ist sehr dunkel hier...";
		a_message_text("main program", 378, 3) = "Esta muy oscuro aqu\355...";
		a_message_text("main program", 379, 1) = "You can't see your own hands!";
		a_message_text("main program", 379, 2) = "Du kannst deine eigenen H\344nde nicht sehen!";
		a_message_text("main program", 379, 3) = "No puedes ver tus propias manos!";
		a_message_text("main program", 380, 1) = "Fierce Traps";
		a_message_text("main program", 380, 2) = "Gef\344hrliche Fallen";
		a_message_text("main program", 380, 3) = "Trampas Peligrosas";
		a_message_text("main program", 381, 1) = "Watch out, the traps here could";
		a_message_text("main program", 381, 2) = "Sei vorsichtig die Fallen hier";
		a_message_text("main program", 381, 3) = "Cuidate. Las trampas aqui podrian";
		a_message_text("main program", 382, 1) = "be deadly!";
		a_message_text("main program", 382, 2) = "k\366nnten t\366dlich sein!";
		a_message_text("main program", 382, 3) = "matarte r\341pidamente!";
		a_message_text("main program", 383, 1) = "Monsters!";
		a_message_text("main program", 383, 2) = "Monster!";
		a_message_text("main program", 383, 3) = "Monstruos!";
		a_message_text("main program", 384, 1) = "There are a lot of monsters in";
		a_message_text("main program", 384, 2) = "In diesem Level sind unglaublich";
		a_message_text("main program", 384, 3) = "En este nivel hay muchisimos";
		a_message_text("main program", 385, 1) = "this level!";
		a_message_text("main program", 385, 2) = "viele Monster!";
		a_message_text("main program", 385, 3) = "monstruos!";
		a_message_text("main program", 386, 1) = "Blocked Exit!";
		a_message_text("main program", 386, 2) = "Verschlossener Ausgang!";
		a_message_text("main program", 386, 3) = "Salida bloqueada!";
		a_message_text("main program", 387, 1) = "You have to find the switch";
		a_message_text("main program", 387, 2) = "Du musst den Schalter finden";
		a_message_text("main program", 387, 3) = "Tienes que encontrar el interruptor";
		a_message_text("main program", 388, 1) = "to get out!";
		a_message_text("main program", 388, 2) = "um zu entkommen!";
		a_message_text("main program", 388, 3) = "para escapar!";
		a_message_text("main program", 389, 1) = "You pressed the button!";
		a_message_text("main program", 389, 2) = "Du hast den Knopf gedr\374ckt!";
		a_message_text("main program", 389, 3) = "Accionaste el interuptor!";
		a_message_text("main program", 390, 1) = "No Nexus!";
		a_message_text("main program", 390, 2) = "Kein Nexus!";
		a_message_text("main program", 390, 3) = "No Nexos!";
		a_message_text("main program", 391, 1) = "This level has no Nexus!";
		a_message_text("main program", 391, 2) = "Dieser Level hat keinen Nexus!";
		a_message_text("main program", 391, 3) = "En este nivel no hay Nexos!";
		a_message_text("main program", 392, 1) = "No Sanctum!";
		a_message_text("main program", 392, 2) = "Kein Sanktum!";
		a_message_text("main program", 392, 3) = "No Santuarios!";
		a_message_text("main program", 393, 1) = "This level has no Sanctum!";
		a_message_text("main program", 393, 2) = "Dieser Level hat kein Sanktum!";
		a_message_text("main program", 393, 3) = "En este nivel no hay Santuarios!";
		a_message_text("main program", 394, 1) = "Ambushes!";
		a_message_text("main program", 394, 2) = "Hinteralte!";
		a_message_text("main program", 394, 3) = "Emboscadas!";
		a_message_text("main program", 395, 1) = "The chances to get ambushed here";
		a_message_text("main program", 395, 2) = "Die Wahrscheinlichkeit hier in einen";
		a_message_text("main program", 395, 3) = "La posibilidad de encontrar un emboscada";
		a_message_text("main program", 396, 1) = "are very high!";
		a_message_text("main program", 396, 2) = "Hinterhalt zu geraten ist hoch!";
		a_message_text("main program", 396, 3) = "aqui es enorme!";
		a_message_text("main program", 397, 1) = "Poisonous Fog!";
		a_message_text("main program", 397, 2) = "Giftiger Nebel!";
		a_message_text("main program", 397, 3) = "Niebla Venenosa!";
		a_message_text("main program", 398, 1) = "The whole level is filled with fog!";
		a_message_text("main program", 398, 2) = "Der ganze Level ist mit Nebel gef\374llt!";
		a_message_text("main program", 398, 3) = "Todo el nivel esta lleno de niebla!";
		a_message_text("main program", 399, 1) = "And it's poisonous!";
		a_message_text("main program", 399, 2) = "Und dieser ist giftig!";
		a_message_text("main program", 399, 3) = "Y es venenosa!";
		a_message_text("main program", 400, 1) = "Angel";
		a_message_text("main program", 400, 2) = "Engel";
		a_message_text("main program", 400, 3) = "Angel";
		a_message_text("main program", 401, 1) = "Demon";
		a_message_text("main program", 401, 2) = "D\344mon";
		a_message_text("main program", 401, 3) = "Demonio";
		a_message_text("main program", 402, 1) = "Dragon";
		a_message_text("main program", 402, 2) = "Drache";
		a_message_text("main program", 402, 3) = "Dragon";
		a_message_text("main program", 403, 1) = "Construct";
		a_message_text("main program", 403, 2) = "Konstrukt";
		a_message_text("main program", 403, 3) = "Construcci\363n";
		a_message_text("main program", 404, 1) = "Wraith";
		a_message_text("main program", 404, 2) = "Geist";
		a_message_text("main program", 404, 3) = "Fantasma";
		a_message_text("main program", 405, 1) = "Load";
		a_message_text("main program", 405, 2) = "Laden";
		a_message_text("main program", 405, 3) = "Cargar";
		a_message_text("main program", 406, 1) = "No savegame!";
		a_message_text("main program", 406, 2) = "Kein Savegame!";
		a_message_text("main program", 406, 3) = "No hay ningun juego guardado!";
		a_message_text("main program", 407, 1) = "Could not be saved!";
		a_message_text("main program", 407, 2) = "Konnte nicht speichern!";
		a_message_text("main program", 407, 3) = "No se pudo guardar!";
		a_message_text("main program", 408, 1) = "X: Skip Turn";
		a_message_text("main program", 408, 2) = "X: Zug Beenden";
		a_message_text("main program", 408, 3) = "X: Terminar Turno";
		a_message_text("main program", 409, 1) = "Not enough Life Points!";
		a_message_text("main program", 409, 2) = "Nicht genug Lebenspunkte!";
		a_message_text("main program", 409, 3) = "No tienes suficientes Puntos de Vida!";
		a_message_text("main program", 410, 1) = "You found a forgotten forge!";
		a_message_text("main program", 410, 2) = "Du hast eine vergessene Schmiede gefunden!";
		a_message_text("main program", 410, 3) = "Enconstraste una forja olvidada!";
		a_message_text("main program", 411, 1) = "Maybe you can make a weapon?";
		a_message_text("main program", 411, 2) = "Vielleicht kannst du eine Waffe schmieden?";
		a_message_text("main program", 411, 3) = "Tal vez puedes forjar una arma?";
		a_message_text("main program", 412, 1) = "You repaired all your weapons and armor!";
		a_message_text("main program", 412, 2) = "Du hast alle deine Waffen und R\374stungen repariert!";
		a_message_text("main program", 412, 3) = "Arreglaste todas sus armas y armaduras!";
		a_message_text("main program", 413, 1) = "The forge is destroyed!";
		a_message_text("main program", 413, 2) = "Die Schmiede ist zerst\366rt!";
		a_message_text("main program", 413, 3) = "La forja se rompe!";
		a_message_text("main program", 414, 1) = "You couldn't forge anything!";
		a_message_text("main program", 414, 2) = "Du konntest nicht schmieden!";
		a_message_text("main program", 414, 3) = "No pudiste forjar nada!";
		a_message_text("main program", 415, 1) = "ESC: Release/Lock Mouse";
		a_message_text("main program", 415, 2) = "ESC: Maus Freigeben/Benutzen";
		a_message_text("main program", 415, 3) = "ESC: Soltar/Bloquear el Raton";
		a_message_text("main program", 416, 1) = "Do Not Train";
		a_message_text("main program", 416, 2) = "Nicht Trainieren";
		a_message_text("main program", 416, 3) = "No Entrenar";
		a_message_text("main program", 417, 1) = "You already wear a belt!";
		a_message_text("main program", 417, 2) = "Du tr\344gst schon einen Guertel!";
		a_message_text("main program", 417, 3) = "Ya llevas equipado un cintur\363n!";
		a_message_text("main program", 418, 1) = "You already wear an amulet!";
		a_message_text("main program", 418, 2) = "Du tr\344gst schon ein Amulett!";
		a_message_text("main program", 418, 3) = "Ya llevas equipado un medallon!";
		a_message_text("main program", 419, 1) = "You already wear a mask!";
		a_message_text("main program", 419, 2) = "Du tr\344gst schon eine Maske!";
		a_message_text("main program", 419, 3) = "Ya llevas equipada una m\341scara!";
		a_message_text("main program", 420, 1) = "Extremely Hot!";
		a_message_text("main program", 420, 2) = "T\366dliche Hitze!";
		a_message_text("main program", 420, 3) = "Muy Caliente!";
		a_message_text("main program", 421, 1) = "The tempreture in this level is extremely hot!";
		a_message_text("main program", 421, 2) = "Dieser Level ist unglaublich heiss!";
		a_message_text("main program", 421, 3) = "La temperatura de este nivel es muy alta!";
		a_message_text("main program", 422, 1) = "Don't get burned here!";
		a_message_text("main program", 422, 2) = "Verbrenne dich nicht!";
		a_message_text("main program", 422, 3) = "No te quemes aqui!";
		a_message_text("main program", 423, 1) = "Extremely Cold!";
		a_message_text("main program", 423, 2) = "T\366dliche K\344lte!";
		a_message_text("main program", 423, 3) = "Muy Frio!";
		a_message_text("main program", 424, 1) = "The tempreture in this level is extremely cold!";
		a_message_text("main program", 424, 2) = "Dieser Level ist unglaublich kalt!";
		a_message_text("main program", 424, 3) = "La temperatura de este nivel es muy baja!";
		a_message_text("main program", 425, 1) = "Take care not to freeze to death!";
		a_message_text("main program", 425, 2) = "Pass auf das du nicht erfrierst!";
		a_message_text("main program", 425, 3) = "Ten Cuidad para no te morirte congelado!";
		a_message_text("main program", 426, 1) = "This room seems to be empty!";
		a_message_text("main program", 426, 2) = "Dieser Raum scheint leer zu sein!";
		a_message_text("main program", 426, 3) = "Esta habitacion parece estar vacia!";
		a_message_text("main program", 427, 1) = "You are protected agaist lightning!";
		a_message_text("main program", 427, 2) = "Du bist gegen Blitze gesch\374tzt!";
		a_message_text("main program", 427, 3) = "Estas protegido contra rayos!";
		a_message_text("main program", 428, 1) = "Your backpack is full!";
		a_message_text("main program", 428, 2) = "Dein Rucksack ist voll!";
		a_message_text("main program", 428, 3) = "Tu mochila esta llena!";
		a_message_text("main program", 429, 1) = "You evaded being petrified!";
		a_message_text("main program", 429, 2) = "Du konntest verhindern versteinert zu werden!";
		a_message_text("main program", 429, 3) = "Evitaste ser convertido en piedra!";
		a_message_text("main program", 430, 1) = "You evaded being killed by Deathvision!";
		a_message_text("main program", 430, 2) = "Du konntest einen Todesblick verhindern!";
		a_message_text("main program", 430, 3) = "Pudiste evitar la mirada de la muerte!";
		a_message_text("main program", 431, 1) = "You are invulnerable!";
		a_message_text("main program", 431, 2) = "Du bist unverwundbar!";
		a_message_text("main program", 431, 3) = "Eres invulnerable!";
		a_message_text("main program", 432, 1) = "This was the last stone!";
		a_message_text("main program", 432, 2) = "Das war der letzte Stein!";
		a_message_text("main program", 432, 3) = "Esa fue tu ultima piedra!";
		a_message_text("main program", 433, 1) = "You already carry a ranged weapon!";
		a_message_text("main program", 433, 2) = "Du tr\344gst schon eine Fernkampf Waffe!";
		a_message_text("main program", 433, 3) = "Ya llevas equipada una arma de largo alcance!";
		a_message_text("main program", 434, 1) = "You already carry a two-handed weapon!";
		a_message_text("main program", 434, 2) = "Du tr\344gst schon eine Zweihandwaffe!";
		a_message_text("main program", 434, 3) = "Ya llevas equipada una arma a dos manos!";
		a_message_text("main program", 435, 1) = "You already carry 2 weapons!";
		a_message_text("main program", 435, 2) = "Du tr\344gst schon 2 Waffen!";
		a_message_text("main program", 435, 3) = "Ya llevas equipada dos armas!";
		a_message_text("main program", 436, 1) = "Number of Rounds";
		a_message_text("main program", 436, 2) = "Anzahl Runden";
		a_message_text("main program", 436, 3) = "Cantidad de turnos";
		a_message_text("main program", 437, 1) = "You bought: ";
		a_message_text("main program", 437, 2) = "Du hast gekauft: ";
		a_message_text("main program", 437, 3) = "Compraste: ";
		a_message_text("main program", 438, 1) = "You sold: ";
		a_message_text("main program", 438, 2) = "Du hast verkauft: ";
		a_message_text("main program", 438, 3) = "Vendiste: ";
		a_message_text("main program", 439, 1) = "You go one level up!";
		a_message_text("main program", 439, 2) = "Du gehst einen Level nach oben!";
		a_message_text("main program", 439, 3) = "Entras en el pr\363ximo nivel!";
		a_message_text("main program", 440, 1) = "This is the first level!";
		a_message_text("main program", 440, 2) = "Das ist der erste Level!";
		a_message_text("main program", 440, 3) = "Esto es el primer nivel!";
		a_message_text("main program", 441, 1) = "Invisible opponent!";
		a_message_text("main program", 441, 2) = "Unsichtbarer Gegner!";
		a_message_text("main program", 441, 3) = "Oponente invisible!";
		a_message_text("main program", 442, 1) = "This was the last stone!";
		a_message_text("main program", 442, 2) = "Das war der letzte Stein!";
		a_message_text("main program", 442, 3) = "Esa fue la ultima piedra!";
		a_message_text("main program", 443, 1) = "You stole a scroll!";
		a_message_text("main program", 443, 2) = "Du stiehlst eine Schriftrolle!";
		a_message_text("main program", 443, 3) = "Robaste un pergamino!";
		a_message_text("main program", 444, 1) = "You are invisible!";
		a_message_text("main program", 444, 2) = "Du bist unsichtbar!";
		a_message_text("main program", 444, 3) = "Eres invisible!";
		a_message_text("main program", 445, 1) = "You found nothing!";
		a_message_text("main program", 445, 2) = "Du findest nichts!";
		a_message_text("main program", 445, 3) = "No encontraste nada!";
		a_message_text("main program", 446, 1) = "Maybe something is buried here?";
		a_message_text("main program", 446, 2) = "Vielleicht ist hier etwas vergraben?";
		a_message_text("main program", 446, 3) = "Tal vez hay algo escondido aqui?";
		a_message_text("main program", 447, 1) = "Now move the character!";
		a_message_text("main program", 447, 2) = "Jetzt der Character!";
		a_message_text("main program", 447, 3) = "Mueve ahora el personaje!";
		a_message_text("main program", 448, 1) = "Your weapon has been damaged!";
		a_message_text("main program", 448, 2) = "Deine Waffe wurde besch\344digt!";
		a_message_text("main program", 448, 3) = "Tu arma fue da\361ada!";
		a_message_text("main program", 449, 1) = "Your weapon broke!";
		a_message_text("main program", 449, 2) = "Deine Waffe zerbrach!";
		a_message_text("main program", 449, 3) = "Tu arma se rompe!";
		a_message_text("main program", 450, 1) = "Your armor has been damaged!";
		a_message_text("main program", 450, 2) = "Deine R\374stung wurde besch\344digt!";
		a_message_text("main program", 450, 3) = "Tu armadura fue da\361ada!";
		a_message_text("main program", 451, 1) = "Your armor broke!";
		a_message_text("main program", 451, 2) = "Deine R\374stung zerbrach!";
		a_message_text("main program", 451, 3) = "Tu armadura se rompe!";
		a_message_text("main program", 452, 1) = "    Choose an item to poison:";
		a_message_text("main program", 452, 2) = "W\344hle einen Gegenstand zum vergiften:";
		a_message_text("main program", 452, 3) = "   Escoje un objeto para envenenar:";
		a_message_text("main program", 453, 1) = "The weapon is poisonous now!";
		a_message_text("main program", 453, 2) = "Die Waffe ist nun giftig!";
		a_message_text("main program", 453, 3) = "La arma ya esta envenenada!";
		a_message_text("main program", 454, 1) = "Only weapons!";
		a_message_text("main program", 454, 2) = "Nur Waffen!";
		a_message_text("main program", 454, 3) = "Solo armas!";
		a_message_text("main program", 455, 1) = "This weapon is broken!";
		a_message_text("main program", 455, 2) = "Diese Waffe ist kaputt!";
		a_message_text("main program", 455, 3) = "Esta arma esta rota!";
		a_message_text("main program", 456, 1) = "Cannot be poisoned!";
		a_message_text("main program", 456, 2) = "Kann nicht vergiftet werden!";
		a_message_text("main program", 456, 3) = "No lo puedes envenenar!";
		a_message_text("main program", 457, 1) = "You move by!";
		a_message_text("main program", 457, 2) = "Du l\344ufst vorbei!";
		a_message_text("main program", 457, 3) = "Pasas!";
		a_message_text("main program", 458, 1) = "Merchant!!!";
		a_message_text("main program", 458, 2) = "H\344ndler!!!";
		a_message_text("main program", 458, 3) = "Comerciante!!!";
		a_message_text("main program", 459, 1) = "Forest!!!";
		a_message_text("main program", 459, 2) = "Wald!!!";
		a_message_text("main program", 459, 3) = "Bosque!!!";
		a_message_text("main program", 460, 1) = "Pentagram!!!";
		a_message_text("main program", 460, 2) = "Pentagram!!!";
		a_message_text("main program", 460, 3) = "Pentagrama!!!";
		a_message_text("main program", 461, 1) = "Sanctum!!!";
		a_message_text("main program", 461, 2) = "Sanktum!!!";
		a_message_text("main program", 461, 3) = "Santuario!!!";
		a_message_text("main program", 462, 1) = "Library!!!";
		a_message_text("main program", 462, 2) = "Bibliothek!!!";
		a_message_text("main program", 462, 3) = "Libreria!!!";
		a_message_text("main program", 463, 1) = "Laboratory!!!";
		a_message_text("main program", 463, 2) = "Labor!!!";
		a_message_text("main program", 463, 3) = "Laboratorio!!!";
		a_message_text("main program", 464, 1) = "Statue!!!";
		a_message_text("main program", 464, 2) = "Statue!!!";
		a_message_text("main program", 464, 3) = "Estatua!!!";
		a_message_text("main program", 465, 1) = "Monster Trap!!!";
		a_message_text("main program", 465, 2) = "Monsterfalle!!!";
		a_message_text("main program", 465, 3) = "Trampa de Monstruos!!!";
		a_message_text("main program", 466, 1) = "Chests!!!";
		a_message_text("main program", 466, 2) = "Truhen!!!";
		a_message_text("main program", 466, 3) = "Cajas!!!";
		a_message_text("main program", 467, 1) = "Gold!!!";
		a_message_text("main program", 467, 2) = "Gold!!!";
		a_message_text("main program", 467, 3) = "Oro!!!";
		a_message_text("main program", 468, 1) = "Cemetary!!!";
		a_message_text("main program", 468, 2) = "Friedhof!!!";
		a_message_text("main program", 468, 3) = "Cementerio!!!";
		a_message_text("main program", 469, 1) = "Pond!!!";
		a_message_text("main program", 469, 2) = "Brunnen!!!";
		a_message_text("main program", 469, 3) = "Pozo!!!";
		a_message_text("main program", 470, 1) = "Treasure!!!";
		a_message_text("main program", 470, 2) = "Schatz!!!";
		a_message_text("main program", 470, 3) = "Tesoro!!!";
		a_message_text("main program", 471, 1) = "Fire Demon!!!";
		a_message_text("main program", 471, 2) = "Feuerd\344mon!!!";
		a_message_text("main program", 471, 3) = "Demonio de Fuego!!!";
		a_message_text("main program", 472, 1) = "Teacher!!!";
		a_message_text("main program", 472, 2) = "Lehrer!!!";
		a_message_text("main program", 472, 3) = "Maestro!!!";
		a_message_text("main program", 473, 1) = "Dragon!!!";
		a_message_text("main program", 473, 2) = "Drache!!!";
		a_message_text("main program", 473, 3) = "Dragon!!!";
		a_message_text("main program", 474, 1) = "Tavern!!!";
		a_message_text("main program", 474, 2) = "Taverne!!!";
		a_message_text("main program", 474, 3) = "Taverna!!!";
		a_message_text("main program", 475, 1) = "Hydra!!!";
		a_message_text("main program", 475, 2) = "Hydra!!!";
		a_message_text("main program", 475, 3) = "Hydra!!!";
		a_message_text("main program", 476, 1) = "Mage!!!";
		a_message_text("main program", 476, 2) = "Magier!!!";
		a_message_text("main program", 476, 3) = "Mago!!!";
		a_message_text("main program", 477, 1) = "Lake!!!";
		a_message_text("main program", 477, 2) = "See!!!";
		a_message_text("main program", 477, 3) = "Lago!!!";
		a_message_text("main program", 478, 1) = "Forge!!!";
		a_message_text("main program", 478, 2) = "Schmiede!!!";
		a_message_text("main program", 478, 3) = "Forja!!!";
		a_message_text("main program", 479, 1) = "Traps!!!";
		a_message_text("main program", 479, 2) = "Fallen!!!";
		a_message_text("main program", 479, 3) = "Trampas!!!";
		a_message_text("main program", 480, 1) = "Monster does not sleep!";
		a_message_text("main program", 480, 2) = "Monster schl\344ft nicht!";
		a_message_text("main program", 480, 3) = "Montruo no se duerme!";
		a_message_text("main program", 481, 1) = "Sleeps";
		a_message_text("main program", 481, 2) = "Schl\344ft";
		a_message_text("main program", 481, 3) = "Duerme";
		a_message_text("main program", 482, 1) = "You can not learn more spells!";
		a_message_text("main program", 482, 2) = "Du kannst nicht mehr Spr\374che lernen!";
		a_message_text("main program", 482, 3) = "No pudiste aprender el hechizo!";
		a_message_text("main program", 483, 1) = "You know a new spell!";
		a_message_text("main program", 483, 2) = "Du kannst einen neuen Spruch!";
		a_message_text("main program", 483, 3) = "Conoces un nuevo hechizo!";
		a_message_text("main program", 484, 1) = "You enter an old cemetary!";
		a_message_text("main program", 484, 2) = "Du betrittst einen alten Friedhof!";
		a_message_text("main program", 484, 3) = "Entras en un antiguo cementerio!";
		a_message_text("main program", 485, 1) = "It smells like rotting corpses here!";
		a_message_text("main program", 485, 2) = "Es riecht nach Verwesung hier!";
		a_message_text("main program", 485, 3) = "Huele a muerto aqui!";
		a_message_text("main program", 486, 1) = "Configuration saved!";
		a_message_text("main program", 486, 2) = "Einstellungen gesichert!";
		a_message_text("main program", 486, 3) = "Configuraci\363n guardada!";
		a_message_text("main program", 487, 1) = "Configuration could not be saved!";
		a_message_text("main program", 487, 2) = "Einstellungen konnten nicht gesichert werden!";
		a_message_text("main program", 487, 3) = "No pude guardar la configuraci\363n!";
		a_message_text("main program", 488, 1) = "The Desert of Forgetfulness!";
		a_message_text("main program", 488, 2) = "Die W\374ste des Vergessens!";
		a_message_text("main program", 488, 3) = "El Desierto del Olvido!";
		a_message_text("main program", 489, 1) = "Its really hot and dry here!";
		a_message_text("main program", 489, 2) = "Es ist unglaublich heiss und trocken hier!";
		a_message_text("main program", 489, 3) = "Esta todo seco y hace mucho calor!";
		a_message_text("main program", 490, 1) = "Don't run out of water!";
		a_message_text("main program", 490, 2) = "Pass auf das du nicht verdurstest!";
		a_message_text("main program", 490, 3) = "No te quedes sin agua!";
		a_message_text("main program", 491, 1) = "The Archipelago of the Ancients!";
		a_message_text("main program", 491, 2) = "Der Archipel der Alten!";
		a_message_text("main program", 491, 3) = "El Archipelago de los Ancianos!";
		a_message_text("main program", 492, 1) = "A great ocean with small islands...";
		a_message_text("main program", 492, 2) = "Ein grosses Meer mit kleinen Inseln...";
		a_message_text("main program", 492, 3) = "Un mar grande con muchas islas pequenas...";
		a_message_text("main program", 493, 1) = "Maybe we can find some treasure here...";
		a_message_text("main program", 493, 2) = "Vielleicht k\366nnen wir hier Sch\344tze finden...";
		a_message_text("main program", 493, 3) = "Tal vez podamos encontrar tesoros aqu\355...";
		a_message_text("main program", 494, 1) = "This spot has been fished already!";
		a_message_text("main program", 494, 2) = "Hier wurde schon gefischt!";
		a_message_text("main program", 494, 3) = "Ya pescaste aqu\355!";
		a_message_text("main program", 495, 1) = "You couldn't catch anything!";
		a_message_text("main program", 495, 2) = "Du konntest nichts fangen!";
		a_message_text("main program", 495, 3) = "No pudiste pescar nada!";
		a_message_text("main program", 496, 1) = "You caught something!";
		a_message_text("main program", 496, 2) = "Du hast etwas gefangen!";
		a_message_text("main program", 496, 3) = "Pescaste algo!";
		a_message_text("main program", 497, 1) = "Only in water!";
		a_message_text("main program", 497, 2) = "Nur in Wasser!";
		a_message_text("main program", 497, 3) = "Solamente en el agua!";
		a_message_text("main program", 498, 1) = "The rune explodes and destroys your creature!";
		a_message_text("main program", 498, 2) = "Die Rune explodiert und zerst\366rt deine Kreatur!";
		a_message_text("main program", 498, 3) = "La runa explota y destruye a tu criatura!";
		a_message_text("main program", 499, 1) = "The rune explodes and damages your creature!";
		a_message_text("main program", 499, 2) = "Die Rune explodiert und verletzt deine Kreatur!";
		a_message_text("main program", 499, 3) = "La runa explota y da\361a a tu criatura!";
		a_message_text("main program", 500, 1) = "You enter a wonderful throne room!";
		a_message_text("main program", 500, 2) = "Du betrittst einen prunkvollen Thronsaal!";
		a_message_text("main program", 500, 3) = "Entras en los aposentos de un rey!";
		a_message_text("main program", 501, 1) = "The king looks at you and smiles!";
		a_message_text("main program", 501, 2) = "Der K\366nig schaut dich grinsend an!";
		a_message_text("main program", 501, 3) = "El rey te mira sonriendo maliciosamente!";
		a_message_text("main program", 502, 1) = "It seems he doesn't want to let you go!";
		a_message_text("main program", 502, 2) = "Er scheint dich nicht gehen lassen zu wollen!";
		a_message_text("main program", 502, 3) = "Parece que no va a dejarte ir!";
		a_message_text("main program", 503, 1) = "Does not need air!";
		a_message_text("main program", 503, 2) = "Braucht keine Luft!";
		a_message_text("main program", 503, 3) = "No necesita aire!";
		a_message_text("main program", 504, 1) = "The Swamp of Loneliness!";
		a_message_text("main program", 504, 2) = "Der Sumpf der Einsamkeit!";
		a_message_text("main program", 504, 3) = "El Pantano de la Soledad!";
		a_message_text("main program", 505, 1) = "The air here is very bad!";
		a_message_text("main program", 505, 2) = "Die luft hier ist sehr schlecht!";
		a_message_text("main program", 505, 3) = "El aire aqu\355 es muy malo!";
		a_message_text("main program", 506, 1) = "Don't get lost!";
		a_message_text("main program", 506, 2) = "Verlaufe dich nicht!";
		a_message_text("main program", 506, 3) = "No te pierdas!";
		a_message_text("main program", 507, 1) = "Throne Room!!!";
		a_message_text("main program", 507, 2) = "Thronsaal!!!";
		a_message_text("main program", 507, 3) = "Aposento!!!";
		a_message_text("main program", 508, 1) = "The wounded hero";
		a_message_text("main program", 508, 2) = "Der verwundete Krieger";
		a_message_text("main program", 508, 3) = "El luchador herido";
		a_message_text("main program", 509, 1) = "Please my friend. Help me if you can!";
		a_message_text("main program", 509, 2) = "Bitte mein Freund hilf mir wenn du kannst!";
		a_message_text("main program", 509, 3) = "Por favor amigo. Ayudame si puedes!";
		a_message_text("main program", 510, 1) = "Use healing potion";
		a_message_text("main program", 510, 2) = "Benutze Heiltrank";
		a_message_text("main program", 510, 3) = "Usas poci\363n de curaci\363n";
		a_message_text("main program", 511, 1) = "Cast Heal Others";
		a_message_text("main program", 511, 2) = "Zaubere Andere heilen";
		a_message_text("main program", 511, 3) = "Lanzas curar a otros sobre \351l";
		a_message_text("main program", 512, 1) = "I cannot help you";
		a_message_text("main program", 512, 2) = "Ich kann dir nicht helfen";
		a_message_text("main program", 512, 3) = "No puedo ayudarte";
		a_message_text("main program", 513, 1) = "Hello my friend!";
		a_message_text("main program", 513, 2) = "Hallo mein Freund!";
		a_message_text("main program", 513, 3) = "Hola mi amigo!";
		a_message_text("main program", 514, 1) = "Thank you, my friend!";
		a_message_text("main program", 514, 2) = "Danke mein Freund!";
		a_message_text("main program", 514, 3) = "Gracias amigo!";
		a_message_text("main program", 515, 1) = "You saved my life!";
		a_message_text("main program", 515, 2) = "Du hast mein Leben gerettet!";
		a_message_text("main program", 515, 3) = "Me salvaste la vida!";
		a_message_text("main program", 516, 1) = "You do not have Heal Others!";
		a_message_text("main program", 516, 2) = "Du kennst den Spruch andere heilen nicht!";
		a_message_text("main program", 516, 3) = "No conoces el hechizo Curar Otros!";
		a_message_text("main program", 517, 1) = "You do not have a healing potion!";
		a_message_text("main program", 517, 2) = "Du besitzt keinen Heiltrank!";
		a_message_text("main program", 517, 3) = "No tienes una poci\363n de curaci\363n!";
		a_message_text("main program", 518, 1) = "Automap";
		a_message_text("main program", 518, 2) = "Automap";
		a_message_text("main program", 518, 3) = "Automapa";
		a_message_text("main program", 519, 1) = "Screen mode changed!";
		a_message_text("main program", 519, 2) = "Fenstermodus gewechselt!";
		a_message_text("main program", 519, 3) = "Modo de Ventana cambiado!";
		a_message_text("main program", 520, 1) = "Restart the program for the change to take effect!";
		a_message_text("main program", 520, 2) = "Starte das Programm neu!";
		a_message_text("main program", 520, 3) = "Reinicia el programa!";
		a_message_text("main program", 521, 1) = "You get teleported back to the entrance!";
		a_message_text("main program", 521, 2) = "Du wirst zum Eingang teleportiert!";
		a_message_text("main program", 521, 3) = "Eres teletransportado a la entrada!";
		a_message_text("main program", 522, 1) = "The monster is alerted!";
		a_message_text("main program", 522, 2) = "Das monster ist alarmiert!";
		a_message_text("main program", 522, 3) = "El monstruo esta alerta!";
		a_message_text("main program", 523, 1) = "What do you want to offer the gods?";
		a_message_text("main program", 523, 2) = "Was m\366chtest du den G\366ttern opfern?";
		a_message_text("main program", 523, 3) = "Que quieres sacrificar a los dioses?";
		a_message_text("main program", 524, 1) = "You cannot open this door!";
		a_message_text("main program", 524, 2) = "Diese T\374r kannst du nicht \366ffnen!";
		a_message_text("main program", 524, 3) = "No puedes abrir esta puerta!";
		a_message_text("main program", 525, 1) = "Level:";
		a_message_text("main program", 525, 2) = "Ebene:";
		a_message_text("main program", 525, 3) = "Nivel:";
		a_message_text("main program", 526, 1) = "Duration: ";
		a_message_text("main program", 526, 2) = "Brenndauer: ";
		a_message_text("main program", 526, 3) = "Duraci\363n: ";
		a_message_text("main program", 527, 1) = "Light?";
		a_message_text("main program", 527, 2) = "Entfachen?";
		a_message_text("main program", 527, 3) = "Encender?";
		a_message_text("main program", 528, 1) = "Put out?";
		a_message_text("main program", 528, 2) = "L\366schen?";
		a_message_text("main program", 528, 3) = "Apagar?";
		a_message_text("main program", 529, 1) = "Eat?";
		a_message_text("main program", 529, 2) = "Essen?";
		a_message_text("main program", 529, 3) = "Come?";
		a_message_text("main program", 530, 1) = "Value: ";
		a_message_text("main program", 530, 2) = "N\344hrwert: ";
		a_message_text("main program", 530, 3) = "Valor: ";
		a_message_text("main program", 531, 1) = "Heal 1-6 Life Points";
		a_message_text("main program", 531, 2) = "Heilen 1-6 Lebenspunkte";
		a_message_text("main program", 531, 3) = "Curan 1-6 Puntos de Vida";
		a_message_text("main program", 532, 1) = "Wear?";
		a_message_text("main program", 532, 2) = "Anziehen?";
		a_message_text("main program", 532, 3) = "Ponerse?";
		a_message_text("main program", 533, 1) = "Remove?";
		a_message_text("main program", 533, 2) = "Ausziehen?";
		a_message_text("main program", 533, 3) = "Quitarse?";
		a_message_text("main program", 534, 1) = "Enc: ";
		a_message_text("main program", 534, 2) = "Beh: ";
		a_message_text("main program", 534, 3) = "Ent: ";
		a_message_text("main program", 535, 1) = " Prot: ";
		a_message_text("main program", 535, 2) = " Schu: ";
		a_message_text("main program", 535, 3) = " Prot: ";
		a_message_text("main program", 536, 1) = "(Dam) ";
		a_message_text("main program", 536, 2) = "(Besch) ";
		a_message_text("main program", 536, 3) = "(Da\361ado) ";
		a_message_text("main program", 537, 1) = "(Dest) ";
		a_message_text("main program", 537, 2) = "(Zerst) ";
		a_message_text("main program", 537, 3) = "(Roto) ";
		a_message_text("main program", 538, 1) = "(Ench) ";
		a_message_text("main program", 538, 2) = "(Verz) ";
		a_message_text("main program", 538, 3) = "(Hechi) ";
		a_message_text("main program", 539, 1) = "(Poisoned) ";
		a_message_text("main program", 539, 2) = "(Vergiftet) ";
		a_message_text("main program", 539, 3) = "(Envenenado) ";
		a_message_text("main program", 540, 1) = "Equip?";
		a_message_text("main program", 540, 2) = "In die Hand nehmen?";
		a_message_text("main program", 540, 3) = "Equipar?";
		a_message_text("main program", 541, 1) = "Unequip?";
		a_message_text("main program", 541, 2) = "In Rucksack?";
		a_message_text("main program", 541, 3) = "Desequipar?";
		a_message_text("main program", 542, 1) = "Throw?";
		a_message_text("main program", 542, 2) = "Werfen?";
		a_message_text("main program", 542, 3) = "Tirar?";
		a_message_text("main program", 543, 1) = "Att: ";
		a_message_text("main program", 543, 2) = "Att: ";
		a_message_text("main program", 543, 3) = "Ata: ";
		a_message_text("main program", 544, 1) = " Dam: ";
		a_message_text("main program", 544, 2) = " Schad: ";
		a_message_text("main program", 544, 3) = " Da\361o: ";
		a_message_text("main program", 545, 1) = " Crit: ";
		a_message_text("main program", 545, 2) = " Krit: ";
		a_message_text("main program", 545, 3) = " Crit: ";
		a_message_text("main program", 546, 1) = "Am. ";
		a_message_text("main program", 546, 2) = "Anz. ";
		a_message_text("main program", 546, 3) = "Am. ";
		a_message_text("main program", 547, 1) = " +2 Strength";
		a_message_text("main program", 547, 2) = " +2 St\344rke";
		a_message_text("main program", 547, 3) = " +2 Fuerza";
		a_message_text("main program", 548, 1) = "Charges: ";
		a_message_text("main program", 548, 2) = "Ladungen: ";
		a_message_text("main program", 548, 3) = "Cargas: ";
		a_message_text("main program", 549, 1) = "Drink?";
		a_message_text("main program", 549, 2) = "Trinken?";
		a_message_text("main program", 549, 3) = "Beber?";
		a_message_text("main program", 550, 1) = " sips a 60";
		a_message_text("main program", 550, 2) = " Schluck a 60";
		a_message_text("main program", 550, 3) = " sorbos a 60";
		a_message_text("main program", 551, 1) = "Use?";
		a_message_text("main program", 551, 2) = "Benutzen?";
		a_message_text("main program", 551, 3) = "Usar?";
		a_message_text("main program", 552, 1) = "Learn?";
		a_message_text("main program", 552, 2) = "Lernen?";
		a_message_text("main program", 552, 3) = "Aprender?";
		a_message_text("main program", 553, 1) = "Unknown ";
		a_message_text("main program", 553, 2) = "Unbekannt ";
		a_message_text("main program", 553, 3) = "Desconocido ";
		a_message_text("main program", 554, 1) = "Needs a Sanctum";
		a_message_text("main program", 554, 2) = "Ben\366tigt Sanktum";
		a_message_text("main program", 554, 3) = "Se necesita el altar";
		a_message_text("main program", 555, 1) = "View?";
		a_message_text("main program", 555, 2) = "Anschauen?";
		a_message_text("main program", 555, 3) = "Ver?";
		a_message_text("main program", 556, 1) = "No equipped item selectable!";
		a_message_text("main program", 556, 2) = "Nur unbenutzte Gegenst\344nde w\344hlbar!";
		a_message_text("main program", 556, 3) = "No equipped item selectable!";
		a_message_text("main program", 557, 1) = "Poison?";
		a_message_text("main program", 557, 2) = "Vergiften?";
		a_message_text("main program", 557, 3) = "Envenenar?";
		a_message_text("main program", 558, 1) = "Thaumaturgy?";
		a_message_text("main program", 558, 2) = "Thaumaturgie?";
		a_message_text("main program", 558, 3) = "Taumaturgia?";
		a_message_text("main program", 559, 1) = "Climb down?";
		a_message_text("main program", 559, 2) = "Hinabsteigen?";
		a_message_text("main program", 559, 3) = "Bajar?";
		a_message_text("main program", 560, 1) = "Fish here?";
		a_message_text("main program", 560, 2) = "Hier angeln?";
		a_message_text("main program", 560, 3) = "Pescar aqu\355?";
		a_message_text("main program", 561, 1) = "Dig?";
		a_message_text("main program", 561, 2) = "Graben?";
		a_message_text("main program", 561, 3) = "Cavar?";
		a_message_text("main program", 562, 1) = "You repaired your weapons/shield/armor!";
		a_message_text("main program", 562, 2) = "Du hast deine Waffen/Schilde/R\374stungen repariert!";
		a_message_text("main program", 562, 3) = "Arreglaste tus armas/armaduras/escudos!";
		a_message_text("main program", 563, 1) = "Repair?";
		a_message_text("main program", 563, 2) = "Reparieren?";
		a_message_text("main program", 563, 3) = "Arreglar?";
		a_message_text("main program", 564, 1) = "Combine with a weapon?";
		a_message_text("main program", 564, 2) = "Mit Waffe kombinieren?";
		a_message_text("main program", 564, 3) = "Combinar con una arma?";
		a_message_text("main program", 565, 1) = "With which weapon?";
		a_message_text("main program", 565, 2) = "Mit welcher Waffe?";
		a_message_text("main program", 565, 3) = "Con que arma?";
		a_message_text("main program", 566, 1) = "Is not the right weapon!";
		a_message_text("main program", 566, 2) = "Ist keine geeignete!";
		a_message_text("main program", 566, 3) = "Esa arma no sirve!";
		a_message_text("main program", 567, 1) = "You created a magical weapon!";
		a_message_text("main program", 567, 2) = "Du hast eine magische Waffe erschaffen!";
		a_message_text("main program", 567, 3) = "Creaste una arma magica!";
		a_message_text("main program", 568, 1) = "Save your Lost Labyrinth game";
		a_message_text("main program", 568, 2) = "Speichere deine Lost Labyrinth Spielst\344nde";
		a_message_text("main program", 568, 3) = "Guarda tus partidas de Lost Labyrinth";
		a_message_text("main program", 569, 1) = "Select a slot";
		a_message_text("main program", 569, 2) = "W\344hle eine Position aus";
		a_message_text("main program", 569, 3) = "Seleciona una posici\363n";
		a_message_text("main program", 570, 1) = "Load your Lost Labyrinth game";
		a_message_text("main program", 570, 2) = "Lade deine Lost Labyrinth Spielst\344nde";
		a_message_text("main program", 570, 3) = "Carga tus partidas de Lost Labyrinth";
		a_message_text("main program", 571, 1) = "Name:";
		a_message_text("main program", 571, 2) = "Name:";
		a_message_text("main program", 571, 3) = "Nombre:";
		a_message_text("main program", 572, 1) = "Help: Special Keys";
		a_message_text("main program", 572, 2) = "Hilfe: Tastenbelegung";
		a_message_text("main program", 572, 3) = "Ayuda: Teclas Especiales";
		a_message_text("main program", 573, 1) = "Look around";
		a_message_text("main program", 573, 2) = "Umsehen";
		a_message_text("main program", 573, 3) = "Mirar";
		a_message_text("main program", 574, 1) = "Sneak";
		a_message_text("main program", 574, 2) = "Schleichen";
		a_message_text("main program", 574, 3) = "Andar en Silencio";
		a_message_text("main program", 575, 1) = "Climb";
		a_message_text("main program", 575, 2) = "Klettern";
		a_message_text("main program", 575, 3) = "Escalar";
		a_message_text("main program", 576, 1) = "Steal";
		a_message_text("main program", 576, 2) = "Stehlen";
		a_message_text("main program", 576, 3) = "Robar";
		a_message_text("main program", 577, 1) = "Inventory";
		a_message_text("main program", 577, 2) = "Inventar";
		a_message_text("main program", 577, 3) = "Inventorio";
		a_message_text("main program", 578, 1) = "Attributes";
		a_message_text("main program", 578, 2) = "Attribute";
		a_message_text("main program", 578, 3) = "Atributos";
		a_message_text("main program", 579, 1) = "Ranged Combat";
		a_message_text("main program", 579, 2) = "Fernkampf";
		a_message_text("main program", 579, 3) = "Arco";
		a_message_text("main program", 580, 1) = "Cast Spell";
		a_message_text("main program", 580, 2) = "Zaubern";
		a_message_text("main program", 580, 3) = "Hechizar";
		a_message_text("main program", 581, 1) = "Options";
		a_message_text("main program", 581, 2) = "Optionen";
		a_message_text("main program", 581, 3) = "Opciones";
		a_message_text("main program", 582, 1) = "Skip Turn";
		a_message_text("main program", 582, 2) = "Runde Beenden";
		a_message_text("main program", 582, 3) = "Terminar Turno";
		a_message_text("main program", 583, 1) = "Mystic Bolt";
		a_message_text("main program", 583, 2) = "Mystischer Schlag";
		a_message_text("main program", 583, 3) = "Ataque M\355stico";
		a_message_text("main program", 584, 1) = "Unknown scroll";
		a_message_text("main program", 584, 2) = "Unbekannte Schriftrolle";
		a_message_text("main program", 584, 3) = "Hechizo desconocido";
		a_message_text("main program", 585, 1) = "Unknown mushroom";
		a_message_text("main program", 585, 2) = "Unbekannter Pilz";
		a_message_text("main program", 585, 3) = "Hongo desconocido";
		a_message_text("main program", 586, 1) = "Unknown potion";
		a_message_text("main program", 586, 2) = "Unbekannter Trank";
		a_message_text("main program", 586, 3) = "Poci\363n desconocida";
		a_message_text("main program", 587, 1) = "The merchant offers: ";
		a_message_text("main program", 587, 2) = "Der H\344ndler bietet: ";
		a_message_text("main program", 587, 3) = "El comerciante ofrece: ";
		a_message_text("main program", 588, 1) = "Warrior*";
		a_message_text("main program", 588, 2) = "K\344mpfer*";
		a_message_text("main program", 588, 3) = "Luchador*";
		a_message_text("main program", 589, 1) = "Thief*";
		a_message_text("main program", 589, 2) = "Dieb*";
		a_message_text("main program", 589, 3) = "Ladron*";
		a_message_text("main program", 590, 1) = "White Mage*";
		a_message_text("main program", 590, 2) = "Weisser Magier*";
		a_message_text("main program", 590, 3) = "Mago Blanco*";
		a_message_text("main program", 591, 1) = "Archer*";
		a_message_text("main program", 591, 2) = "Bogensch\374tze*";
		a_message_text("main program", 591, 3) = "Arquero*";
		a_message_text("main program", 592, 1) = "Necromancer*";
		a_message_text("main program", 592, 2) = "Nekromant*";
		a_message_text("main program", 592, 3) = "Nigromante*";
		a_message_text("main program", 593, 1) = "Select your spell:";
		a_message_text("main program", 593, 2) = "W\344hle deinen Zauber:";
		a_message_text("main program", 593, 3) = "Elige tu hechizo:";
		a_message_text("main program", 594, 1) = "Your active spells get terminated!";
		a_message_text("main program", 594, 2) = "Deine aktiven Zauber werden beendet!";
		a_message_text("main program", 594, 3) = "Tus hechizos activos se han acabado!";
		a_message_text("main program", 595, 1) = "Sacrifice a valuable Item";
		a_message_text("main program", 595, 2) = "Opfere einen wertvollen Gegenstand";
		a_message_text("main program", 595, 3) = "Sacrifica un objeto de valor";
		a_message_text("main program", 596, 1) = "Not valuable enough!";
		a_message_text("main program", 596, 2) = "Nicht wertvoll genug!";
		a_message_text("main program", 596, 3) = "No tiene valor sufficiente!";
		a_message_text("main program", 597, 1) = "Weight: ";
		a_message_text("main program", 597, 2) = "Gewicht: ";
		a_message_text("main program", 597, 3) = "Peso: ";
		a_message_text("main program", 598, 1) = " Kilo";
		a_message_text("main program", 598, 2) = " Kilo";
		a_message_text("main program", 598, 3) = " Quilo";
		a_message_text("main program", 599, 1) = "Does not want to talk to you!";
		a_message_text("main program", 599, 2) = "Will nicht mit dir reden!";
		a_message_text("main program", 599, 3) = "No quiere hablar contigo!";
		a_message_text("main program", 600, 1) = "Is not a monster!";
		a_message_text("main program", 600, 2) = "Ist kein Monster!";
		a_message_text("main program", 600, 3) = "No es un monstruo!";
		a_message_text("main program", 601, 1) = "Is not a plant!";
		a_message_text("main program", 601, 2) = "Ist keine Pflanze!";
		a_message_text("main program", 601, 3) = "No es una planta!";
		a_message_text("main program", 602, 1) = "Is not a ghost!";
		a_message_text("main program", 602, 2) = "Ist kein Geist!";
		a_message_text("main program", 602, 3) = "No es una fantasma!";
		a_message_text("main program", 603, 1) = "The monster shows you the exit!";
		a_message_text("main program", 603, 2) = "Das Tier zeigt dir den Ausgang!";
		a_message_text("main program", 603, 3) = "El animal te muestra la escalera!";
		a_message_text("main program", 604, 1) = "Sacrifice a gem";
		a_message_text("main program", 604, 2) = "Opfere einen Edelstein";
		a_message_text("main program", 604, 3) = "Sacrifica una piedra preciosa";
		a_message_text("main program", 605, 1) = "Not a gem!";
		a_message_text("main program", 605, 2) = "Kein Edelstein!";
		a_message_text("main program", 605, 3) = "No es una piedra preciosa!";
		a_message_text("main program", 606, 1) = "Buy experience (5000 G)?";
		a_message_text("main program", 606, 2) = "Kaufe Erfahrung (5000 G)?";
		a_message_text("main program", 606, 3) = "Compra experi\351ncia (5000 O)?";
		a_message_text("main program", 607, 1) = "Alerted Monsters!";
		a_message_text("main program", 607, 2) = "Alarmierte Monster!";
		a_message_text("main program", 607, 3) = "Monstruos Alertados!";
		a_message_text("main program", 608, 1) = "All monsters in this level know you";
		a_message_text("main program", 608, 2) = "Alle monster in diesem Level wissen das";
		a_message_text("main program", 608, 3) = "Todos los monstruos en este nivel saben";
		a_message_text("main program", 609, 1) = "are coming and are alerted!";
		a_message_text("main program", 609, 2) = "du kommst und sind alarmiert!";
		a_message_text("main program", 609, 3) = "que vienes y son alertados!";
		a_message_text("main program", 610, 1) = "Gives 1-6 Mana Points";
		a_message_text("main program", 610, 2) = "Gibt 1-6 Manapunkte";
		a_message_text("main program", 610, 3) = "Da 1-6 Puntos de Mana";
		a_message_text("main program", 611, 1) = "You cannot blow this away!";
		a_message_text("main program", 611, 2) = "Das kannst du nicht wegblasen!";
		a_message_text("main program", 611, 3) = "No puedes soplar de lejos eso!";
		a_message_text("main program", 612, 1) = "Critical Hits: ";
		a_message_text("main program", 612, 2) = "Kritische Treffer: ";
		a_message_text("main program", 612, 3) = "Golpes Cr\355ticos: ";
		a_message_text("main program", 613, 1) = "Avoid Traps: ";
		a_message_text("main program", 613, 2) = "Fallen Ausweichen: ";
		a_message_text("main program", 613, 3) = "Eludir Trampas: ";
		a_message_text("main program", 614, 1) = "Find Traps: ";
		a_message_text("main program", 614, 2) = "Fallen Finden: ";
		a_message_text("main program", 614, 3) = "Encontrar Trampas: ";
		a_message_text("main program", 615, 1) = "Chance to Hit: ";
		a_message_text("main program", 615, 2) = "Trefferchance: ";
		a_message_text("main program", 615, 3) = "Posibilidades de Impactar: ";
		a_message_text("main program", 616, 1) = "The monster is blind!";
		a_message_text("main program", 616, 2) = "Das monster ist blind!";
		a_message_text("main program", 616, 3) = "El monstruo es ciego!";
		a_message_text("main program", 617, 1) = "Alchemy?";
		a_message_text("main program", 617, 2) = "Alchemie?";
		a_message_text("main program", 617, 3) = "Alquimia?";
		a_message_text("main program", 618, 1) = "Goblinlore";
		a_message_text("main program", 618, 2) = "Goblinlehre";
		a_message_text("main program", 618, 3) = "Sabiduria de goblins";
		a_message_text("main program", 619, 1) = "Spiderlore";
		a_message_text("main program", 619, 2) = "Spinnenlehre";
		a_message_text("main program", 619, 3) = "Sabiduria de ara\361as";
		a_message_text("main program", 620, 1) = "Undeadlore";
		a_message_text("main program", 620, 2) = "Untotenlehre";
		a_message_text("main program", 620, 3) = "Sabiduria de no-muertos";
		a_message_text("main program", 621, 1) = "Animallore";
		a_message_text("main program", 621, 2) = "Tierkunde";
		a_message_text("main program", 621, 3) = "Sabiduria de animales";
		a_message_text("main program", 622, 1) = "Traplore";
		a_message_text("main program", 622, 2) = "Fallenlehre";
		a_message_text("main program", 622, 3) = "Sabiduria de trampas";
		a_message_text("main program", 623, 1) = "Poisonlore";
		a_message_text("main program", 623, 2) = "Giftlehre";
		a_message_text("main program", 623, 3) = "Sabiduria de venenos";
		a_message_text("main program", 624, 1) = "Read?";
		a_message_text("main program", 624, 2) = "Lesen?";
		a_message_text("main program", 624, 3) = "Leer?";
		a_message_text("main program", 625, 1) = "You learned something new!";
		a_message_text("main program", 625, 2) = "Du hast etwas neues gelernt!";
		a_message_text("main program", 625, 3) = "Aprendiste algo nuevo!";
		a_message_text("main program", 626, 1) = "Killed by ";
		a_message_text("main program", 626, 2) = "Erschlagen von ";
		a_message_text("main program", 626, 3) = "Muerto por ";
		a_message_text("main program", 627, 1) = " destroyed!";
		a_message_text("main program", 627, 2) = " vernichtet!";
		a_message_text("main program", 627, 3) = " destruido!";
		a_message_text("main program", 628, 1) = "Plantlore";
		a_message_text("main program", 628, 2) = "Pflanzenkunde";
		a_message_text("main program", 628, 3) = "Sabiduria de Plantas";
		a_message_text("main program", 629, 1) = "Prevent Attack: ";
		a_message_text("main program", 629, 2) = "Angriff Vermeiden: ";
		a_message_text("main program", 629, 3) = "Prevenir Ataque: ";
		a_message_text("main program", 630, 1) = "Petrified";
		a_message_text("main program", 630, 2) = "Versteinert";
		a_message_text("main program", 630, 3) = "Petrificado";
		a_message_text("main program", 631, 1) = "Killed by Ancient Hydra";
		a_message_text("main program", 631, 2) = "Erschlagen von Uralter Hydra";
		a_message_text("main program", 631, 3) = "Muerto por una Hydra Anciana";
		a_message_text("main program", 632, 1) = "Only on empty field!";
		a_message_text("main program", 632, 2) = "Nur auf leerem Feld!";
		a_message_text("main program", 632, 3) = "Solamente en un campo vacio!";
		a_message_text("main program", 633, 1) = "No anchor point!";
		a_message_text("main program", 633, 2) = "Kein Ankerpunkt!";
		a_message_text("main program", 633, 3) = "No punto de ancla!";
		a_message_text("main program", 634, 1) = "Set anchor point";
		a_message_text("main program", 634, 2) = "Ankerpunkt setzen";
		a_message_text("main program", 634, 3) = "Crear punto de ancla";
		a_message_text("main program", 635, 1) = "Go to anchor point";
		a_message_text("main program", 635, 2) = "Zum Ankerpunkt gehen";
		a_message_text("main program", 635, 3) = "Mover a punto de ancla";
		a_message_text("main program", 634, 1) = "Set anchor point";
		a_message_text("main program", 634, 2) = "Ankerpunkt setzen";
		a_message_text("main program", 634, 3) = "Crear punto de ancla";
		a_message_text("main program", 635, 1) = "Go to anchor point";
		a_message_text("main program", 635, 2) = "Zum Ankerpunkt gehen";
		a_message_text("main program", 635, 3) = "Mover a punto de ancla";
		a_message_text("main program", 636, 1) = " (Unarmed)";
		a_message_text("main program", 636, 2) = " (Waffenlos)";
		a_message_text("main program", 636, 3) = " (Sin Arma)";
		a_message_text("main program", 637, 1) = "Sacrifice a black gem";
		a_message_text("main program", 637, 2) = "Opfere einen schwarzen Edelstein";
		a_message_text("main program", 637, 3) = "Sacrifica una piedra preciosa negra";
		a_message_text("main program", 638, 1) = "Not a black gem!";
		a_message_text("main program", 638, 2) = "Kein schwarzer Edelstein!";
		a_message_text("main program", 638, 3) = "No es una piedra preciosa negra!";
		a_message_text("main program", 639, 1) = "All Skills";
		a_message_text("main program", 639, 2) = "Alle F\344higkeiten";
		a_message_text("main program", 639, 3) = "Todas las Habilidades";
		a_message_text("main program", 640, 1) = "Monster Trap!";
		a_message_text("main program", 640, 2) = "Monsterfalle!";
		a_message_text("main program", 640, 3) = "Trampa de monstruos!";
		a_message_text("main program", 641, 1) = "At first the room seems empty...";
		a_message_text("main program", 641, 2) = "Zuerst scheint der Raum leer zu sein...";
		a_message_text("main program", 641, 3) = "Al principio crees que la habitacion esta vacia...";
		a_message_text("main program", 642, 1) = "But then you realize that you have";
		a_message_text("main program", 642, 2) = "Doch dann bemerkt du das du von";
		a_message_text("main program", 642, 3) = "Pero pronto ves que tu estas rodeado";
		a_message_text("main program", 643, 1) = "been surrounded by monsters!";
		a_message_text("main program", 643, 2) = "Monstern umringt wurdest!";
		a_message_text("main program", 643, 3) = "por monstruos!";
		a_message_text("main program", 644, 1) = "Choose your character (Player ";
		a_message_text("main program", 644, 2) = "W\344hle wie du aussiehst (Spieler ";
		a_message_text("main program", 644, 3) = "Selecciona tu figura (Jugador ";
		a_message_text("main program", 645, 1) = "Poisoned ";
		a_message_text("main program", 645, 2) = "Vergiftet ";
		a_message_text("main program", 645, 3) = "Envenenado ";
		a_message_text("main program", 646, 1) = "Weapon damaged!";
		a_message_text("main program", 646, 2) = "Waffe besch\344digt!";
		a_message_text("main program", 646, 3) = "Arma da\361ada!";
		a_message_text("main program", 647, 1) = "Armor damaged!";
		a_message_text("main program", 647, 2) = "R\374stung besch\344digt!";
		a_message_text("main program", 647, 3) = "Armadura da\361ada!";
		a_message_text("main program", 648, 1) = "The rune prevents you from trespassing!";
		a_message_text("main program", 648, 2) = "Die Rune verhindert das du die \374berquerst!";
		a_message_text("main program", 648, 3) = "La runa no te deja continuar!";
		a_message_text("main program", 649, 1) = "Drop";
		a_message_text("main program", 649, 2) = "Ablegen";
		a_message_text("main program", 649, 3) = "Quitar";
		a_message_text("main program", 650, 1) = "Cancel";
		a_message_text("main program", 650, 2) = "Abbrechen";
		a_message_text("main program", 650, 3) = "Cancelar";
		a_message_text("main program", 651, 1) = "Illusionary Walls!";
		a_message_text("main program", 651, 2) = "Illusionsw\344nde!";
		a_message_text("main program", 651, 3) = "Paredes Iluscionarias!";
		a_message_text("main program", 652, 1) = "This level contains a lot of";
		a_message_text("main program", 652, 2) = "Diese Ebene enth\344lt eine";
		a_message_text("main program", 652, 3) = "Este nivel contiene muchas";
		a_message_text("main program", 653, 1) = "walls you can walk through!";
		a_message_text("main program", 653, 2) = "Menge Geheimt\374ren!";
		a_message_text("main program", 653, 3) = "puertas secretas!";
		a_message_text("main program", 654, 1) = "No more sacrifices here!";
		a_message_text("main program", 654, 2) = "Keine Opfer mehr hier!";
		a_message_text("main program", 654, 3) = "No mas sacrificios aqu\355!";
		a_message_text("main program", 655, 1) = "You have no god!";
		a_message_text("main program", 655, 2) = "Du hast keinen Gott!";
		a_message_text("main program", 655, 3) = "No tienes dios!";
		a_message_text("main program", 656, 1) = "Dispel";
		a_message_text("main program", 656, 2) = "Aufl\366sen";
		a_message_text("main program", 656, 3) = "Dispersar";
		a_message_text("main program", 657, 1) = "Q: Message History";
		a_message_text("main program", 657, 2) = "Q: Alte Nachrichten";
		a_message_text("main program", 657, 3) = "Q: Mensajes Viejos";
		a_message_text("main program", 658, 1) = "Scroll";
		a_message_text("main program", 658, 2) = "Schriftrolle";
		a_message_text("main program", 658, 3) = "Hechizo";
		a_message_text("main program", 659, 1) = "Jewel";
		a_message_text("main program", 659, 2) = "Edelstein";
		a_message_text("main program", 659, 3) = "Piedra preciosa";
		a_message_text("main program", 660, 1) = "Message History";
		a_message_text("main program", 660, 2) = "Alte Nachrichten";
		a_message_text("main program", 660, 3) = "Mensajes Viejos";
		a_message_text("main program", 661, 1) = "Low Life Points!!!";
		a_message_text("main program", 661, 2) = "Wenig Lebenspunkte!!!";
		a_message_text("main program", 661, 3) = "Pocos Puntos de Vida!!!";
		a_message_text("main program", 662, 1) = "Dying!!!";
		a_message_text("main program", 662, 2) = "Am sterben!!!";
		a_message_text("main program", 662, 3) = "Muriendo!!!";
		a_message_text("main program", 663, 1) = "You get teleported to an old level!";
		a_message_text("main program", 663, 2) = "Du wirst in einen alten Level teleportiert!";
		a_message_text("main program", 663, 3) = "Te teleportan a un viejo nivel!";
		a_message_text("main program", 664, 1) = "Choose the game speed";
		a_message_text("main program", 664, 2) = "W\344hle die Spielgeschwindigkeit";
		a_message_text("main program", 664, 3) = "Elije la velocidad del juego";
		a_message_text("main program", 665, 1) = "Messages";
		a_message_text("main program", 665, 2) = "Nachrichten";
		a_message_text("main program", 665, 3) = "Mensajes";
		a_message_text("main program", 666, 1) = "Release Creature";
		a_message_text("main program", 666, 2) = "Kreatur freigeben";
		a_message_text("main program", 666, 3) = "Liberar Criatura";
		a_message_text("main program", 667, 1) = "You released your creature";
		a_message_text("main program", 667, 2) = "Du hast deine Kreatur freigegeben";
		a_message_text("main program", 667, 3) = "Liberaste tu Criatura";
		a_message_text("main program", 668, 1) = "Only in water";
		a_message_text("main program", 668, 2) = "Nur im Wasser";
		a_message_text("main program", 668, 3) = "Solo en agua";
		a_message_text("main program", 669, 1) = "Unique";
		a_message_text("main program", 669, 2) = "Einmalig";
		a_message_text("main program", 669, 3) = "Unico";
		a_message_text("main program", 670, 1) = "Spider";
		a_message_text("main program", 670, 2) = "Spinne";
		a_message_text("main program", 670, 3) = "Ara\361a";
		a_message_text("main program", 671, 1) = "Goblin";
		a_message_text("main program", 671, 2) = "Goblin";
		a_message_text("main program", 671, 3) = "Goblin";
		a_message_text("main program", 672, 1) = "Undead";
		a_message_text("main program", 672, 2) = "Untot";
		a_message_text("main program", 672, 3) = "No-muerto";
		a_message_text("main program", 673, 1) = "Rat";
		a_message_text("main program", 673, 2) = "Ratte";
		a_message_text("main program", 673, 3) = "Rata";
		a_message_text("main program", 674, 1) = "Wolf";
		a_message_text("main program", 674, 2) = "Wolf";
		a_message_text("main program", 674, 3) = "Lobo";
		a_message_text("main program", 675, 1) = "Bat";
		a_message_text("main program", 675, 2) = "Fledermaus";
		a_message_text("main program", 675, 3) = "Murcielago";
		a_message_text("main program", 676, 1) = "Cat";
		a_message_text("main program", 676, 2) = "Katze";
		a_message_text("main program", 676, 3) = "Gato";
		a_message_text("main program", 677, 1) = "Breaks Weapons";
		a_message_text("main program", 677, 2) = "Zerbricht Waffen";
		a_message_text("main program", 677, 3) = "Rompe Armas";
		a_message_text("main program", 678, 1) = "Breaks Armor";
		a_message_text("main program", 678, 2) = "Zerbricht R\374stung";
		a_message_text("main program", 678, 3) = "Rompe Armadura";
		a_message_text("main program", 679, 1) = "A stone gets thrown at you!";
		a_message_text("main program", 679, 2) = "Ein Stein wird nach dir geworfen!";
		a_message_text("main program", 679, 3) = "Se lanza una piedra hacia ti!";
		a_message_text("main program", 680, 1) = "Killed by a Spear Trap";
		a_message_text("main program", 680, 2) = "Get\366tet von Speerfalle";
		a_message_text("main program", 680, 3) = "Muerto por una Trampa de Lanza";
		a_message_text("main program", 681, 1) = "Killed by an Axe Trap";
		a_message_text("main program", 681, 2) = "Get\366tet von Axtfalle";
		a_message_text("main program", 681, 3) = "Muerto por una Trampa de Hacha";
		a_message_text("main program", 682, 1) = "Killed by a Dart Trap";
		a_message_text("main program", 682, 2) = "Get\366tet von Pfeilfalle";
		a_message_text("main program", 682, 3) = "Muerto por una Trampa de Dardo";
		a_message_text("main program", 683, 1) = "Killed by a Trapdoor";
		a_message_text("main program", 683, 2) = "Get\366tet von Fallgrube";
		a_message_text("main program", 683, 3) = "Muerto por una trampilla";
		a_message_text("main program", 684, 1) = "Killed by a Fireball";
		a_message_text("main program", 684, 2) = "Get\366tet von Feuerball";
		a_message_text("main program", 684, 3) = "Muerto por una Bola de Fuego";
		a_message_text("main program", 685, 1) = "Killed by a Frostball";
		a_message_text("main program", 685, 2) = "Get\366tet von Eisschlag";
		a_message_text("main program", 685, 3) = "Muerto por una Bola de Hielo";
		a_message_text("main program", 686, 1) = "Killed by Drain Life";
		a_message_text("main program", 686, 2) = "Get\366tet von Dunklem Sog";
		a_message_text("main program", 686, 3) = "Muerto por un drenaje de vida";
		a_message_text("main program", 687, 1) = "Killed by dehydration";
		a_message_text("main program", 687, 2) = "Verdursted";
		a_message_text("main program", 687, 3) = "Muerto de sed";
		a_message_text("main program", 688, 1) = "Killed by starvation";
		a_message_text("main program", 688, 2) = "Verhungert";
		a_message_text("main program", 688, 3) = "Muerto de hambre";
		a_message_text("main program", 689, 1) = "Killed by poison";
		a_message_text("main program", 689, 2) = "Get\366tet von Gift";
		a_message_text("main program", 689, 3) = "Muerto por veneno";
		a_message_text("main program", 690, 1) = "Killed by fire";
		a_message_text("main program", 690, 2) = "Get\366tet von Feuer";
		a_message_text("main program", 690, 3) = "Muerto por fuego";
		a_message_text("main program", 691, 1) = "Drowned";
		a_message_text("main program", 691, 2) = "Ertrunken";
		a_message_text("main program", 691, 3) = "Ahogado";
		a_message_text("main program", 692, 1) = "Froze to death";
		a_message_text("main program", 692, 2) = "Erfroren";
		a_message_text("main program", 692, 3) = "Muerto de frio";
		a_message_text("main program", 693, 1) = "Survived the Labyrinth!";
		a_message_text("main program", 693, 2) = "\334berlebte das Labyrinth!";
		a_message_text("main program", 693, 3) = "Sobrevivio al Laberinto!";
		a_message_text("main program", 694, 1) = "Only three times per level!";
		a_message_text("main program", 694, 2) = "Nur dreimal pro Ebene!";
		a_message_text("main program", 694, 3) = "Solamente 3 veces por nivel!";
		a_message_text("main program", 695, 1) = "(Common) ";
		a_message_text("main program", 695, 2) = "(Normaler) ";
		a_message_text("main program", 695, 3) = "(Menor) ";
		a_message_text("main program", 696, 1) = "(Elder) ";
		a_message_text("main program", 696, 2) = "(Alter) ";
		a_message_text("main program", 696, 3) = "(Normal) ";
		a_message_text("main program", 697, 1) = "(Ancient) ";
		a_message_text("main program", 697, 2) = "(Uralter) ";
		a_message_text("main program", 697, 3) = "(Mayor) ";
		a_message_text("main program", 698, 1) = "Enter: Select";
		a_message_text("main program", 698, 2) = "Enter: Ausw\344hlen";
		a_message_text("main program", 698, 3) = "Enter: Selecciona";
		a_message_text("main program", 699, 1) = "Drunken";
		a_message_text("main program", 699, 2) = "Betrunken";
		a_message_text("main program", 699, 3) = "Borracho";
		a_message_text("main program", 700, 1) = "You found some water";
		a_message_text("main program", 700, 2) = "Du findest etwas Wasser";
		a_message_text("main program", 700, 3) = "Encontraste poco de agua";
		a_message_text("main program", 701, 1) = "The monster does not notice you!";
		a_message_text("main program", 701, 2) = "Das Monster bemerkt dich nicht!";
		a_message_text("main program", 701, 3) = "El monstruo no te percibe!";
		a_message_text("main program", 702, 1) = "Animations";
		a_message_text("main program", 702, 2) = "Animationen";
		a_message_text("main program", 702, 3) = "Animaciones";
		a_message_text("main program", 703, 1) = "Magic resistance:";
		a_message_text("main program", 703, 2) = "Magieresistenz:";
		a_message_text("main program", 703, 3) = "Resistencia magia:";
		a_message_text("main program", 704, 1) = "Destroy?";
		a_message_text("main program", 704, 2) = "Zerst\366ren?";
		a_message_text("main program", 704, 3) = "Romper?";
		a_message_text("main program", 705, 1) = "Sure?";
		a_message_text("main program", 705, 2) = "Sicher?";
		a_message_text("main program", 705, 3) = "Seguro?";
		a_message_text("main program", 706, 1) = "The monster explodes!";
		a_message_text("main program", 706, 2) = "Das monster explodiert!";
		a_message_text("main program", 706, 3) = "El monstruo explota!";
		a_message_text("main program", 707, 1) = "Died in an explosion!";
		a_message_text("main program", 707, 2) = "Starb an einer Explosion!";
		a_message_text("main program", 707, 3) = "Muerto por una explosi\363n!";
		a_message_text("main program", 708, 1) = "You cannot attack!";
		a_message_text("main program", 708, 2) = "Du kannst nicht angreifen!";
		a_message_text("main program", 708, 3) = "No puedes atacar!";
		a_message_text("main program", 709, 1) = "Normal";
		a_message_text("main program", 709, 2) = "normal";
		a_message_text("main program", 709, 3) = "normal";
		a_message_text("main program", 710, 1) = "Offensive Combat";
		a_message_text("main program", 710, 2) = "Offensiver Kampf";
		a_message_text("main program", 710, 3) = "Combate Ofensivo";
		a_message_text("main program", 711, 1) = "Defensive Combat";
		a_message_text("main program", 711, 2) = "Defensiver Kampf";
		a_message_text("main program", 711, 3) = "Combate Defensivo";
		a_message_text("main program", 712, 1) = "Sunder";
		a_message_text("main program", 712, 2) = "Hammer";
		a_message_text("main program", 712, 3) = "Martillo";
		a_message_text("main program", 713, 1) = "Impale";
		a_message_text("main program", 713, 2) = "Verhaken";
		a_message_text("main program", 713, 3) = "Impale";
		a_message_text("main program", 714, 1) = "Whirling Blades";
		a_message_text("main program", 714, 2) = "Wirbelnde Klingen";
		a_message_text("main program", 714, 3) = "Dagas Voladoras";
		a_message_text("main program", 715, 1) = "Staff Defense";
		a_message_text("main program", 715, 2) = "Stabverteidigung";
		a_message_text("main program", 715, 3) = "Bast\363n Defensa";
		a_message_text("main program", 716, 1) = "Swift Blade";
		a_message_text("main program", 716, 2) = "Flinke Klinge";
		a_message_text("main program", 716, 3) = "Ataque R\341pido";
		a_message_text("main program", 717, 1) = "Hidden Blade";
		a_message_text("main program", 717, 2) = "Versteckte Klinge";
		a_message_text("main program", 717, 3) = "Ataque Escondido";
		a_message_text("main program", 718, 1) = "Sweeping Attack";
		a_message_text("main program", 718, 2) = "Sturmangriff";
		a_message_text("main program", 718, 3) = "Ataque Continuo";
		a_message_text("main program", 719, 1) = "Is used!";
		a_message_text("main program", 719, 2) = "Wird benutzt!";
		a_message_text("main program", 719, 3) = "Esta usada!";
		a_message_text("main program", 720, 1) = "Space: Toggle";
		a_message_text("main program", 720, 2) = "Space: Ausl\366sen";
		a_message_text("main program", 720, 3) = "Space: Usar";
		a_message_text("main program", 721, 1) = "Toggle? (Space)";
		a_message_text("main program", 721, 2) = "Ausl\366sen? (Space)";
		a_message_text("main program", 721, 3) = "Usar? (Space)";
		a_message_text("main program", 722, 1) = "A lot of treasure!";
		a_message_text("main program", 722, 2) = "Ein grosser Schatz!";
		a_message_text("main program", 722, 3) = "Un tesoro grande!";
		a_message_text("main program", 723, 1) = "And it seems...";
		a_message_text("main program", 723, 2) = "Und er scheint...";
		a_message_text("main program", 723, 3) = "Y parece...";
		a_message_text("main program", 724, 1) = "unprotected...";
		a_message_text("main program", 724, 2) = "unbewacht zu sein...";
		a_message_text("main program", 724, 3) = "desprotegido...";
		a_message_text("main program", 725, 1) = "You found a prison!";
		a_message_text("main program", 725, 2) = "Du hast ein Gef\344ngnis entdeckt!";
		a_message_text("main program", 725, 3) = "Encontraste un prisi\363n!";
		a_message_text("main program", 726, 1) = "Maybe there are prisoners inside...";
		a_message_text("main program", 726, 2) = "Vielleicht hat es Gefangene...";
		a_message_text("main program", 726, 3) = "Tal vez hay prisionieros...";
		a_message_text("main program", 727, 1) = "And maybe something of worth...";
		a_message_text("main program", 727, 2) = "Und vielleicht etwas von wert...";
		a_message_text("main program", 727, 3) = "Y tal vez cosas de valor...";
		a_message_text("main program", 728, 1) = "Mix with another potion?";
		a_message_text("main program", 728, 2) = "Mit anderem Trank mischen?";
		a_message_text("main program", 728, 3) = "Mezclar con otro poci\363n?";
		a_message_text("main program", 729, 1) = "Select another potion!";
		a_message_text("main program", 729, 2) = "W\344hle anderen Trank!";
		a_message_text("main program", 729, 3) = "Elige otra poci\363n!";
		a_message_text("main program", 730, 1) = "This is not a potion!";
		a_message_text("main program", 730, 2) = "Das ist kein Trank!";
		a_message_text("main program", 730, 3) = "No es poci\363n!";
		a_message_text("main program", 731, 1) = "Not with itself!";
		a_message_text("main program", 731, 2) = "Nicht mit sich selber!";
		a_message_text("main program", 731, 3) = "No consigo misma!";
		a_message_text("main program", 732, 1) = "The potion explodes!";
		a_message_text("main program", 732, 2) = "Der Trank explodiert!";
		a_message_text("main program", 732, 3) = "La poci\363n explota!";
		a_message_text("main program", 733, 1) = "You created a new potion!";
		a_message_text("main program", 733, 2) = "Du hast nun einen neuen Trank!";
		a_message_text("main program", 733, 3) = "Ahora tienes una nueva poci\363n!";
		a_message_text("main program", 734, 1) = "Potion";
		a_message_text("main program", 734, 2) = "Trank";
		a_message_text("main program", 734, 3) = "Poci\363n";
		a_message_text("main program", 735, 1) = "Has no life!";
		a_message_text("main program", 735, 2) = "Hat kein Leben!";
		a_message_text("main program", 735, 3) = "No tiene vida!";
		a_message_text("main program", 736, 1) = "Cannot be damaged by normal weapons!";
		a_message_text("main program", 736, 2) = "Kann nicht mit normalen Waffen verletzt werden!";
		a_message_text("main program", 736, 3) = "No lo puedes danar con armas normales!";
		a_message_text("main program", 737, 1) = "You had a special success with this spell!";
		a_message_text("main program", 737, 2) = "Dieser Zauber ist dir besonders gut gelungen!";
		a_message_text("main program", 737, 3) = "Este hechizo te ha salido mejor de lo normal!";
		a_message_text("main program", 738, 1) = "You botched this spell!";
		a_message_text("main program", 738, 2) = "Dieser Zauber war ein R\374ckschlag!";
		a_message_text("main program", 738, 3) = "Este hechizo ha sido un fracaso!";
		a_message_text("main program", 739, 1) = "Killed by a botched spell";
		a_message_text("main program", 739, 2) = "Wurde von Zauberfehlschlag get\366tet";
		a_message_text("main program", 739, 3) = "Muerto por un hechizo fracasado";
		a_message_text("main program", 740, 1) = "Joystick 1 and 'Y' = Yes";
		a_message_text("main program", 740, 2) = "Joystick 1 und 'Y' = Ja";
		a_message_text("main program", 740, 3) = "Joystick 1 y 'Y' = Si";
		a_message_text("main program", 741, 1) = "Joystick 2 and 'N' = No";
		a_message_text("main program", 741, 2) = "Joystick 2 und 'N' = Nein";
		a_message_text("main program", 741, 3) = "Joystick 2 y 'N' = No";
		a_message_text("main program", 742, 1) = "Orc Village";
		a_message_text("main program", 742, 2) = "Ork Dorf";
		a_message_text("main program", 742, 3) = "Pueblo Orco";
		a_message_text("main program", 743, 1) = "You can see a lot of Orcs";
		a_message_text("main program", 743, 2) = "Du kannst eine Menge Orks";
		a_message_text("main program", 743, 3) = "Puedes ver un monton de Orcos";
		a_message_text("main program", 744, 1) = "and some huts here.";
		a_message_text("main program", 744, 2) = "und einige H\374tten sehen.";
		a_message_text("main program", 744, 3) = "y algunas casitas.";
		a_message_text("main program", 745, 1) = "Maybe they are hiding something?";
		a_message_text("main program", 745, 2) = "Vielleicht verstecken sie etwas?";
		a_message_text("main program", 745, 3) = "Tal vez esconden algo?";
		a_message_text("main program", 746, 1) = "Witch Garden";
		a_message_text("main program", 746, 2) = "Hexenhaus";
		a_message_text("main program", 746, 3) = "Casa de Bruja";
		a_message_text("main program", 747, 1) = "Be careful that she does not see you!";
		a_message_text("main program", 747, 2) = "Sei vorsichtig das sie dich nicht sieht!";
		a_message_text("main program", 747, 3) = "Cuidate de que no te pille!";
		a_message_text("main program", 748, 1) = "Upload your high score?";
		a_message_text("main program", 748, 2) = "Deinen Highscore hochladen?";
		a_message_text("main program", 748, 3) = "Subir tu alta puntuaci\363n?";
		a_message_text("main program", 749, 1) = "Curse of Magneto";
		a_message_text("main program", 749, 2) = "Fluch des Magneto";
		a_message_text("main program", 749, 3) = "Maldici\363n de Magneto";
		a_message_text("main program", 750, 1) = "Curse of Gaia";
		a_message_text("main program", 750, 2) = "Fluch der Gaia";
		a_message_text("main program", 750, 3) = "Maldici\363n de Gaia";
		a_message_text("main program", 751, 1) = "Curse of Nosferatu";
		a_message_text("main program", 751, 2) = "Fluch des Nosferatu";
		a_message_text("main program", 751, 3) = "Maldici\363n de Nosferatu";
		a_message_text("main program", 752, 1) = "The monster petrifies creature!";
		a_message_text("main program", 752, 2) = "Das Monster versteinert die Kreatur!";
		a_message_text("main program", 752, 3) = "El monstruo petrifica la kriatura!";
		a_message_text("main program", 753, 1) = "Creature evaded being killed by Deathvision!";
		a_message_text("main program", 753, 2) = "Die Kreatur konnte einen Todesblick verhindern!";
		a_message_text("main program", 753, 3) = "La Kriatura evito la mirada de la muerte!";
		a_message_text("main program", 754, 1) = "The monster kills the creature with his gaze!";
		a_message_text("main program", 754, 2) = "Das Monster t\366tet deine Kreatur mit einem Blick!";
		a_message_text("main program", 754, 3) = "El monstruo mata su kriatura con una mirada!";
		a_message_text("main program", 755, 1) = "A fireball gets fired at your creature!";
		a_message_text("main program", 755, 2) = "Ein Feuerball wird auf deine Kreatur geworfen!";
		a_message_text("main program", 755, 3) = "Se lanza una bola de Fuego contra su kriatura!";
		a_message_text("main program", 756, 1) = "A firelance gets fired at you!";
		a_message_text("main program", 756, 2) = "Eine Feuerlanze wird auf dich geworfen!";
		a_message_text("main program", 756, 3) = "Se lanza una Lanza de Fuego contra ti!";
		a_message_text("main program", 757, 1) = "Max. Lifepoints / 3";
		a_message_text("main program", 757, 2) = "Max. Lebenspunkte / 3";
		a_message_text("main program", 757, 3) = "Max. Puntos de Vida / 3";
		a_message_text("main program", 758, 1) = "Max. Lifepoints / 2";
		a_message_text("main program", 758, 2) = "Max. Lebenspunkte / 2";
		a_message_text("main program", 758, 3) = "Max. Puntos de Vida / 2";
		a_message_text("main program", 759, 1) = "Max. Lifepoints * 3";
		a_message_text("main program", 759, 2) = "Max. Lebenspunkte * 3";
		a_message_text("main program", 759, 3) = "Max. Puntos de Vida * 3";
		a_message_text("main program", 760, 1) = "Sight: ";
		a_message_text("main program", 760, 2) = "Sichtweite: ";
		a_message_text("main program", 760, 3) = "Vista: ";
		a_message_text("main program", 761, 1) = "Can walk through walls";
		a_message_text("main program", 761, 2) = "Kann durch Mauern laufen";
		a_message_text("main program", 761, 3) = "Puede caminar a traves de muros";
		a_message_text("main program", 762, 1) = "Blows in doors";
		a_message_text("main program", 762, 2) = "Schl\344gt T\374ren ein";
		a_message_text("main program", 762, 3) = "Destruye puertas";
		a_message_text("main program", 763, 1) = "Alert: Impossible to sneak by";
		a_message_text("main program", 763, 2) = "Alarmiert: Unm\366glich vorbeizuschleichen";
		a_message_text("main program", 763, 3) = "Alerta: Impossible deslizarse sigilosamente";
		a_message_text("main program", 764, 1) = "Sleeps: Does not attack. Easy to sneak by";
		a_message_text("main program", 764, 2) = "Schl\344ft: Greift nicht an. Einfach vorbeizuschleichen";
		a_message_text("main program", 764, 3) = "Duerme: No ataqua. Facilmente se puede deslizar sigilosamente";
		a_message_text("main program", 765, 1) = "Friend: Does never attack. Lets you pass";
		a_message_text("main program", 765, 2) = "Freund: Greift nie an. L\344sst dich vorbei";
		a_message_text("main program", 765, 3) = "Amigo: Nunca ataqua. Te deja pasar";
		a_message_text("main program", 766, 1) = "Poisoned: gets damage each round";
		a_message_text("main program", 766, 2) = "Vergiftet: nimmt jede Runde Schaden";
		a_message_text("main program", 766, 3) = "Envenenado: Recibe dano cada turno";
		a_message_text("main program", 767, 1) = "Blind: Does not attack. Easy to sneak by";
		a_message_text("main program", 767, 2) = "Blind: Greift nicht an. Einfach vorbeizuschleichen";
		a_message_text("main program", 767, 3) = "Ciego: No ataqua. Facilmente se puede deslizar sigilosamente";
		a_message_text("main program", 768, 1) = "Swarmed: gets damage each round";
		a_message_text("main program", 768, 2) = "Schwarm: nimmt jede Runde Schaden";
		a_message_text("main program", 768, 3) = "Tropado: Recibe dano cada turno";
		a_message_text("main program", 769, 1) = "Broken item: ";
		a_message_text("main program", 769, 2) = "Zerbrochener Gegenstand: ";
		a_message_text("main program", 769, 3) = "Objeto rota: ";
		a_message_text("main program", 770, 1) = "Only cannibals can eat that!";
		a_message_text("main program", 770, 2) = "Nur kannibalen k\366nnen das essen!";
		a_message_text("main program", 770, 3) = "Solamente canibales pueden comer eso!";
		a_message_text("main program", 771, 1) = "Part: ";
		a_message_text("main program", 771, 2) = "Teil: ";
		a_message_text("main program", 771, 3) = "Parte: ";
		a_message_text("main program", 772, 1) = "Starving 2";
		a_message_text("main program", 772, 2) = "Am verhungern 2";
		a_message_text("main program", 772, 3) = "Estas Muriendo de Hambre 2";
		a_message_text("main program", 773, 1) = "Dehydrated 2";
		a_message_text("main program", 773, 2) = "Am verdursten 2";
		a_message_text("main program", 773, 3) = "Estas Muriendo de Sed 2";
		a_message_text("main program", 774, 1) = "";
		a_message_text("main program", 774, 2) = "";
		a_message_text("main program", 774, 3) = "";
		a_message_text("main program", 775, 1) = "";
		a_message_text("main program", 775, 2) = "";
		a_message_text("main program", 775, 3) = "";
		a_message_text("main program", 776, 1) = "";
		a_message_text("main program", 776, 2) = "";
		a_message_text("main program", 776, 3) = "";
		a_message_text("main program", 777, 1) = "";
		a_message_text("main program", 777, 2) = "";
		a_message_text("main program", 777, 3) = "";
		a_message_text("main program", 778, 1) = "";
		a_message_text("main program", 778, 2) = "";
		a_message_text("main program", 778, 3) = "";
		a_message_text("main program", 779, 1) = "";
		a_message_text("main program", 779, 2) = "";
		a_message_text("main program", 779, 3) = "";
		a_message_text("main program", 780, 1) = "";
		a_message_text("main program", 780, 2) = "";
		a_message_text("main program", 780, 3) = "";
		a_message_text("main program", 781, 1) = "";
		a_message_text("main program", 781, 2) = "";
		a_message_text("main program", 781, 3) = "";
		a_message_text("main program", 782, 1) = "";
		a_message_text("main program", 782, 2) = "";
		a_message_text("main program", 782, 3) = "";
		a_message_text("main program", 783, 1) = "";
		a_message_text("main program", 783, 2) = "";
		a_message_text("main program", 783, 3) = "";
		a_message_text("main program", 784, 1) = "";
		a_message_text("main program", 784, 2) = "";
		a_message_text("main program", 784, 3) = "";
		a_message_text("main program", 785, 1) = "";
		a_message_text("main program", 785, 2) = "";
		a_message_text("main program", 785, 3) = "";
		a_message_text("main program", 786, 1) = "";
		a_message_text("main program", 786, 2) = "";
		a_message_text("main program", 786, 3) = "";
		a_message_text("main program", 787, 1) = "";
		a_message_text("main program", 787, 2) = "";
		a_message_text("main program", 787, 3) = "";
		a_message_text("main program", 788, 1) = "";
		a_message_text("main program", 788, 2) = "";
		a_message_text("main program", 788, 3) = "";
		a_message_text("main program", 789, 1) = "";
		a_message_text("main program", 789, 2) = "";
		a_message_text("main program", 789, 3) = "";
		a_message_text("main program", 790, 1) = "";
		a_message_text("main program", 790, 2) = "";
		a_message_text("main program", 790, 3) = "";
		a_message_text("main program", 791, 1) = "";
		a_message_text("main program", 791, 2) = "";
		a_message_text("main program", 791, 3) = "";
		a_message_text("main program", 792, 1) = "";
		a_message_text("main program", 792, 2) = "";
		a_message_text("main program", 792, 3) = "";
		a_message_text("main program", 793, 1) = "";
		a_message_text("main program", 793, 2) = "";
		a_message_text("main program", 793, 3) = "";
		a_message_text("main program", 794, 1) = "";
		a_message_text("main program", 794, 2) = "";
		a_message_text("main program", 794, 3) = "";
		a_message_text("main program", 795, 1) = "";
		a_message_text("main program", 795, 2) = "";
		a_message_text("main program", 795, 3) = "";
		a_message_text("main program", 796, 1) = "";
		a_message_text("main program", 796, 2) = "";
		a_message_text("main program", 796, 3) = "";
		a_message_text("main program", 797, 1) = "";
		a_message_text("main program", 797, 2) = "";
		a_message_text("main program", 797, 3) = "";
		a_message_text("main program", 798, 1) = "";
		a_message_text("main program", 798, 2) = "";
		a_message_text("main program", 798, 3) = "";
		a_message_text("main program", 799, 1) = "";
		a_message_text("main program", 799, 2) = "";
		a_message_text("main program", 799, 3) = "";
		a_message_text("main program", 800, 1) = "";
		a_message_text("main program", 800, 2) = "";
		a_message_text("main program", 800, 3) = "";
		a_message_text("main program", 801, 1) = "";
		a_message_text("main program", 801, 2) = "";
		a_message_text("main program", 801, 3) = "";
		a_message_text("main program", 802, 1) = "";
		a_message_text("main program", 802, 2) = "";
		a_message_text("main program", 802, 3) = "";
		a_message_text("main program", 803, 1) = "";
		a_message_text("main program", 803, 2) = "";
		a_message_text("main program", 803, 3) = "";
		a_message_text("main program", 804, 1) = "";
		a_message_text("main program", 804, 2) = "";
		a_message_text("main program", 804, 3) = "";
		a_message_text("main program", 805, 1) = "";
		a_message_text("main program", 805, 2) = "";
		a_message_text("main program", 805, 3) = "";
		a_message_text("main program", 806, 1) = "G: Steal";
		a_message_text("main program", 806, 2) = "G: Stehlen";
		a_message_text("main program", 806, 3) = "G: Robar";
		a_message_text("main program", 807, 1) = "L: Look Around";
		a_message_text("main program", 807, 2) = "L: Umschauen";
		a_message_text("main program", 807, 3) = "L: Observar";
		a_message_text("main program", 808, 1) = "V: Climb";
		a_message_text("main program", 808, 2) = "V: Klettern";
		a_message_text("main program", 808, 3) = "V: Trepar";
		a_message_text("main program", 809, 1) = "Mana Loss";
		a_message_text("main program", 809, 2) = "Manaschwund";
		a_message_text("main program", 809, 3) = "Perder Mana";
		a_message_text("main program", 810, 1) = "This level seems to";
		a_message_text("main program", 810, 2) = "Diese Ebene scheint dir";
		a_message_text("main program", 810, 3) = "Te parece que este nivel";
		a_message_text("main program", 811, 1) = "steal your Mana!";
		a_message_text("main program", 811, 2) = "dein Mana zu stehlen!";
		a_message_text("main program", 811, 3) = "te roba el Mana!";
		a_message_text("main program", 812, 1) = "Indestructible Walls";
		a_message_text("main program", 812, 2) = "Unzerst\366rbare W\344nde";
		a_message_text("main program", 812, 3) = "Paredes indestruibles";
		a_message_text("main program", 813, 1) = "The walls in this level are";
		a_message_text("main program", 813, 2) = "Die W\344nde in dieser Ebene";
		a_message_text("main program", 813, 3) = "Las paredes en este nivel no";
		a_message_text("main program", 814, 1) = "unaffected by portals";
		a_message_text("main program", 814, 2) = "sind immun gegen Portal";
		a_message_text("main program", 814, 3) = "se puede afectar con portal";
		a_message_text("main program", 815, 1) = "Teleporter Lock";
		a_message_text("main program", 815, 2) = "Teleportersperre";
		a_message_text("main program", 815, 3) = "No teleportaci\363n";
		a_message_text("main program", 816, 1) = "In this level, all teleport";
		a_message_text("main program", 816, 2) = "In dieser Ebene sind alle";
		a_message_text("main program", 816, 3) = "En este nivel todos los hechizos";
		a_message_text("main program", 817, 1) = "spells are useless!";
		a_message_text("main program", 817, 2) = "Teleport Zauber nutzlos!";
		a_message_text("main program", 817, 3) = "de teleportaci\363n no funcionan!";
		a_message_text("main program", 818, 1) = "Light";
		a_message_text("main program", 818, 2) = "Licht";
		a_message_text("main program", 818, 3) = "Luz";
		a_message_text("main program", 819, 1) = "Readme";
		a_message_text("main program", 819, 2) = "Liesmich";
		a_message_text("main program", 819, 3) = "Leeme";
		a_message_text("main program", 820, 1) = "Readme Spells";
		a_message_text("main program", 820, 2) = "Liesmich Zauber";
		a_message_text("main program", 820, 3) = "Leeme Hechizos";
		a_message_text("main program", 821, 1) = "Throws stones";
		a_message_text("main program", 821, 2) = "Wirft Steine";
		a_message_text("main program", 821, 3) = "Tira piedras";
		a_message_text("main program", 822, 1) = "Explodes";
		a_message_text("main program", 822, 2) = "Explodiert";
		a_message_text("main program", 822, 3) = "Explota";
		a_message_text("main program", 823, 1) = "Multiplies";
		a_message_text("main program", 823, 2) = "Vermehrend";
		a_message_text("main program", 823, 3) = "Multiplica";
		a_message_text("main program", 824, 1) = "Infectious";
		a_message_text("main program", 824, 2) = "Ansteckend";
		a_message_text("main program", 824, 3) = "Contagioso";
		a_message_text("main program", 825, 1) = "Disease";
		a_message_text("main program", 825, 2) = "Krankheit";
		a_message_text("main program", 825, 3) = "Enfermedad";
		a_message_text("main program", 826, 1) = "Cannot be moved!";
		a_message_text("main program", 826, 2) = "Kann nicht geschoben werden!";
		a_message_text("main program", 826, 3) = "No lo se puede mover!";
		a_message_text("main program", 827, 1) = "You are too weak!";
		a_message_text("main program", 827, 2) = "Du warst zu schwach!";
		a_message_text("main program", 827, 3) = "Estuviste demasiado debil!";
		a_message_text("main program", 828, 1) = "You moved the stone!";
		a_message_text("main program", 828, 2) = "Du hast den Stein verschoben!";
		a_message_text("main program", 828, 3) = "Moviste la piedra!";
		a_message_text("main program", 829, 1) = "You open the gate!";
		a_message_text("main program", 829, 2) = "Du \366ffnest das Gatter!";
		a_message_text("main program", 829, 3) = "Abres la puerta!";
		a_message_text("main program", 830, 1) = "Killed by spike pit";
		a_message_text("main program", 830, 2) = "Get\366tet von Nagelgrube";
		a_message_text("main program", 830, 3) = "Muerto por trampa de clavos";
		a_message_text("main program", 831, 1) = "You got hurt by a spike pit!";
		a_message_text("main program", 831, 2) = "Du wurdest von Nagelgrube verletzt!";
		a_message_text("main program", 831, 3) = "Te heriste en una trampa de clavos!";
		a_message_text("main program", 832, 1) = "Your shoes protect you from the spikes!";
		a_message_text("main program", 832, 2) = "Deine Schuhe sch\374tzen dich vor den N\344geln!";
		a_message_text("main program", 832, 3) = "Tus Zapatos te protegen de los clavos!";
		a_message_text("main program", 833, 1) = "Your creature got hurt by a spike pit!";
		a_message_text("main program", 833, 2) = "Deine Kreatur wurde von Nagelgrube verletzt!";
		a_message_text("main program", 833, 3) = "Tu criatura fue herida por una trampa de clavos!";
		a_message_text("main program", 834, 1) = "Immune to Wind";
		a_message_text("main program", 834, 2) = "Immun gegen Wind";
		a_message_text("main program", 834, 3) = "Imune a Viento";
		a_message_text("main program", 835, 1) = "Immune to Arcane Energies";
		a_message_text("main program", 835, 2) = "Immun gegen Arkane Energien";
		a_message_text("main program", 835, 3) = "Imune a Energias Arcanas";
		a_message_text("main program", 836, 1) = "Spike Pit";
		a_message_text("main program", 836, 2) = "Nagelgrube";
		a_message_text("main program", 836, 3) = "Trampa de Clavos";
		a_message_text("main program", 837, 1) = "Gate";
		a_message_text("main program", 837, 2) = "Gatter";
		a_message_text("main program", 837, 3) = "Puerta";
		a_message_text("main program", 838, 1) = "No experience gain";
		a_message_text("main program", 838, 2) = "Kein Erfahrungsgewinn";
		a_message_text("main program", 838, 3) = "No ganas experiencia";
		a_message_text("main program", 839, 1) = "One point of damage per round";
		a_message_text("main program", 839, 2) = "Ein Punkt Schaden pro Runde";
		a_message_text("main program", 839, 3) = "Un punto de da\361o por turno";
		a_message_text("main program", 840, 1) = "Your Spell Power is 1";
		a_message_text("main program", 840, 2) = "Deine Zaubermacht ist 1";
		a_message_text("main program", 840, 3) = "Tu Poder de Hechizos es 1";
		a_message_text("main program", 841, 1) = "Your Attack is 1";
		a_message_text("main program", 841, 2) = "Deine Attacke ist 1";
		a_message_text("main program", 841, 3) = "Tu Ataque es 1";
		a_message_text("main program", 842, 1) = "Your Movement is 1";
		a_message_text("main program", 842, 2) = "Deine Bewegung ist 1";
		a_message_text("main program", 842, 3) = "Tu Movimiento es 1";
		a_message_text("main program", 843, 1) = "Your Dexetrity is 1";
		a_message_text("main program", 843, 2) = "Deine Geschicklichkeit ist 1";
		a_message_text("main program", 843, 3) = "Tu Destreza es 1";
		a_message_text("main program", 844, 1) = "Monsters do double damage";
		a_message_text("main program", 844, 2) = "Monster richten doppelten Schaden an";
		a_message_text("main program", 844, 3) = "Monstruos hacen el doble de da\361o";
		a_message_text("main program", 845, 1) = "Sight is 1";
		a_message_text("main program", 845, 2) = "Sichtweite ist 1";
		a_message_text("main program", 845, 3) = "Tu Vista es 1";
		a_message_text("main program", 846, 1) = "Armor is useless";
		a_message_text("main program", 846, 2) = "R\374stung ist nutzlos";
		a_message_text("main program", 846, 3) = "La armadura \351s inutil";
		a_message_text("main program", 847, 1) = "All skeletons wake up";
		a_message_text("main program", 847, 2) = "Alle skelette wachen auf";
		a_message_text("main program", 847, 3) = "Todos los esqueletos se levantan";
		a_message_text("main program", 848, 1) = "You can't use pentagrams";
		a_message_text("main program", 848, 2) = "Du kannt das Pentagramm nicht benutzen";
		a_message_text("main program", 848, 3) = "No puedes usar el pentagrama";
		a_message_text("main program", 849, 1) = "Poison lasts forever";
		a_message_text("main program", 849, 2) = "Gift dauert endlos";
		a_message_text("main program", 849, 3) = "Veneno incurable";
		a_message_text("main program", 850, 1) = "You starve twice as fast";
		a_message_text("main program", 850, 2) = "Du verhungerst doppelt so schnell";
		a_message_text("main program", 850, 3) = "Tienes el doble de hambre de lo normal";
		a_message_text("main program", 851, 1) = "You dehydrate twice as fast";
		a_message_text("main program", 851, 2) = "Du verdurstest doppelt so schnell";
		a_message_text("main program", 851, 3) = "Te deshidratas el doble de r\341pido";
		a_message_text("main program", 852, 1) = "You can't use the Sanctum";
		a_message_text("main program", 852, 2) = "Du kannst das Sanktum nicht benutzen";
		a_message_text("main program", 852, 3) = "No puedes usar el Santuario";
		a_message_text("main program", 853, 1) = "You can't pick up gold";
		a_message_text("main program", 853, 2) = "Du kannst kein Gold aufnehmen";
		a_message_text("main program", 853, 3) = "No puedes llevar oro";
		a_message_text("main program", 854, 1) = "Ambushes twice as often";
		a_message_text("main program", 854, 2) = "Doppelt so viele Hinterhalte";
		a_message_text("main program", 854, 3) = "El doble de prob. de emboscadas";
		a_message_text("main program", 855, 1) = "All chests are empty";
		a_message_text("main program", 855, 2) = "Alle Truhen sind leer";
		a_message_text("main program", 855, 3) = "Todas la cajas estan vacias";
		a_message_text("main program", 856, 1) = "Double damage from drowning";
		a_message_text("main program", 856, 2) = "Doppelter Schaden durch ertrinken";
		a_message_text("main program", 856, 3) = "El doble de da\361o al huir";
		a_message_text("main program", 857, 1) = "Duration of all spells is halved";
		a_message_text("main program", 857, 2) = "Dauer aller Zauber halbiert";
		a_message_text("main program", 857, 3) = "Duraci\363n de los hechizos es la mitad";
		a_message_text("main program", 858, 1) = "Monsters hit better in close combat";
		a_message_text("main program", 858, 2) = "Monster treffen besser im Nahkampf";
		a_message_text("main program", 858, 3) = "Los monstruos alcazan mejor en combate cuerpo a cuerpo";
		a_message_text("main program", 859, 1) = "Monsters hit better in ranged combat";
		a_message_text("main program", 859, 2) = "Monster treffen besser im Fernkampf";
		a_message_text("main program", 859, 3) = "Los monstruos alcazan mejor en combate a distancia";
		a_message_text("main program", 860, 1) = "Very bad attributes";
		a_message_text("main program", 860, 2) = "Sehr schlechte Attribute";
		a_message_text("main program", 860, 3) = "Muy malos atributos";
		a_message_text("main program", 861, 1) = "Weight counts twice";
		a_message_text("main program", 861, 2) = "Gewicht z\344hlt doppelt";
		a_message_text("main program", 861, 3) = "Peso cuenta dos veces";
		a_message_text("main program", 862, 1) = "Weapons and armor break twice as often";
		a_message_text("main program", 862, 2) = "Waffen und R\374stungen brechen doppelt so oft";
		a_message_text("main program", 862, 3) = "Armas y armadura se rompen con el doble de facilidad";
		a_message_text("main program", 863, 1) = "Merchants and trainers flee from you";
		a_message_text("main program", 863, 2) = "H\344ndler und Lehrer fliehen vor dir";
		a_message_text("main program", 863, 3) = "Comerciantes y profesores se escapan de ti";
		a_message_text("main program", 864, 1) = "Only a witch can ride that!";
		a_message_text("main program", 864, 2) = "Nur eine Hexe kann darauf reiten!";
		a_message_text("main program", 864, 3) = "Solo una bruja puede montar eso!";
		a_message_text("main program", 865, 1) = "You fly over the spike pit!";
		a_message_text("main program", 865, 2) = "Du fliegst \374ber die Nagelgrube!";
		a_message_text("main program", 865, 3) = "Vuelas sobre la trampa de clavos!";
		a_message_text("main program", 866, 1) = "Move through time?";
		a_message_text("main program", 866, 2) = "Springe durch die Zeit?";
		a_message_text("main program", 866, 3) = "Saltar a traves del tiempo?";
		a_message_text("main program", 867, 1) = "Room Text Dummy1";
		a_message_text("main program", 867, 2) = "Room Text Dummy1";
		a_message_text("main program", 867, 3) = "Room Text Dummy1";
		a_message_text("main program", 868, 1) = "Room Text Dummy2";
		a_message_text("main program", 868, 2) = "Room Text Dummy2";
		a_message_text("main program", 868, 3) = "Room Text Dummy2";
		a_message_text("main program", 869, 1) = "Room Text Dummy3";
		a_message_text("main program", 869, 2) = "Room Text Dummy3";
		a_message_text("main program", 869, 3) = "Room Text Dummy3";
		a_message_text("main program", 870, 1) = "Room Text Dummy4";
		a_message_text("main program", 870, 2) = "Room Text Dummy4";
		a_message_text("main program", 870, 3) = "Room Text Dummy4";
		a_message_text("main program", 871, 1) = "You have been robbed: ";
		a_message_text("main program", 871, 2) = "Du wurdest bestohlen: ";
		a_message_text("main program", 871, 3) = "Te han robado: ";
		a_message_text("main program", 872, 1) = "You can't wear armor";
		a_message_text("main program", 872, 2) = "Du kannst keine R\374stung tragen";
		a_message_text("main program", 872, 3) = "No puedes usar armadura";
		a_message_text("main program", 873, 1) = "You can't use weapons";
		a_message_text("main program", 873, 2) = "Du kannst keine Waffe tragen";
		a_message_text("main program", 873, 3) = "No puedes usar armas";
		a_message_text("main program", 874, 1) = "You can't use bows";
		a_message_text("main program", 874, 2) = "Du kannst keinen bogen tragen";
		a_message_text("main program", 874, 3) = "No puedes usar arcos";
		a_message_text("main program", 875, 1) = "    Choose a scroll to copy:";
		a_message_text("main program", 875, 2) = "W\344hle eine Schriftrolle zum kopieren:";
		a_message_text("main program", 875, 3) = "Escoje un Pergamino para copiarlo:";
		a_message_text("main program", 876, 1) = "Is not a scroll";
		a_message_text("main program", 876, 2) = "Ist keine Schriftrolle";
		a_message_text("main program", 876, 3) = "No es pergamino";
		a_message_text("main program", 877, 1) = "You copied a scroll";
		a_message_text("main program", 877, 2) = "Du hast eine Schriftrolle kopiert";
		a_message_text("main program", 877, 3) = "Copiaste un pergamino";
		a_message_text("main program", 878, 1) = "LP:";
		a_message_text("main program", 878, 2) = "LP:";
		a_message_text("main program", 878, 3) = "PdV:";
		a_message_text("main program", 879, 1) = "MP:";
		a_message_text("main program", 879, 2) = "MP:";
		a_message_text("main program", 879, 3) = "PdM:";
		a_message_text("main program", 880, 1) = "Your awareness prevents the robbing attempt!";
		a_message_text("main program", 880, 2) = "Deine Aufmerksamkeit verhindert den Diebstahl!";
		a_message_text("main program", 880, 3) = "Tu atenci\363n impide que te roben!";
		a_message_text("main program", 881, 1) = "You destroyed a rune";
		a_message_text("main program", 881, 2) = "Du hast eine Rune zerst\366rt";
		a_message_text("main program", 881, 3) = "Destruiste una runa";
		a_message_text("main program", 882, 1) = "Is not a rune";
		a_message_text("main program", 882, 2) = "Ist keine Rune";
		a_message_text("main program", 882, 3) = "No es una runa";
		a_message_text("main program", 883, 1) = "Your Gold:";
		a_message_text("main program", 883, 2) = "Dein Gold: ";
		a_message_text("main program", 883, 3) = "Tu oro:";
		a_message_text("main program", 884, 1) = "Blocked by:";
		a_message_text("main program", 884, 2) = "Blockiert durch:";
		a_message_text("main program", 884, 3) = "Bloqueado por:";
		a_message_text("main program", 885, 1) = "Basic Magic";
		a_message_text("main program", 885, 2) = "Basismagie";
		a_message_text("main program", 885, 3) = "Magia Basica";
		a_message_text("main program", 886, 1) = "F: Fire Arrow";
		a_message_text("main program", 886, 2) = "F: Fernkampf";
		a_message_text("main program", 886, 3) = "F: Lanza flecha";
		a_message_text("main program", 887, 1) = "This is no humanoid";
		a_message_text("main program", 887, 2) = "Das ist kein Humanoide";
		a_message_text("main program", 887, 3) = "No es humanoide";
		a_message_text("main program", 888, 1) = "Monster lore grants you twice it's value as bonus";
		a_message_text("main program", 889, 1) = "to attack and damage against monsters of their type";
		a_message_text("main program", 888, 2) = "Dieser Wert geht doppelt ein als Bonus auf";
		a_message_text("main program", 889, 2) = "Angriff und Schaden bei Monstern dieses Typs";
		a_message_text("main program", 888, 3) = "El conocimiento de monstruos a\361ade su valor doblado como bonus";
		a_message_text("main program", 889, 3) = "al ataque y da\361o contra monstruos de ese tipo";
		a_message_text("main program", 890, 1) = "Trap lore grants you twice it's value as bonus";
		a_message_text("main program", 891, 1) = "to finding and dodging traps";
		a_message_text("main program", 890, 2) = "Dieser Wert geht doppelt ein als Bonus zum";
		a_message_text("main program", 891, 2) = "Finden und Ausweichen von Fallen";
		a_message_text("main program", 890, 3) = "El conocimiento de trampas a\361ade su valor doblado como bonus";
		a_message_text("main program", 891, 3) = "para encontrar y esquivar trampas";
		a_message_text("main program", 892, 1) = "Poison lore grants you twice it's value as chance";
		a_message_text("main program", 893, 1) = "(in percent) each turn to reduce the duration of a poisoning";
		a_message_text("main program", 892, 2) = "Giftlehre gew\344hrt pro Zug eine Wahrscheinlichkeit von";
		a_message_text("main program", 893, 2) = "2% x Wert, die Dauer einer Vergiftung zu reduzieren";
		a_message_text("main program", 892, 3) = "El conocimientos de venenos a\361ade su valor doblado a la posibilidad";
		a_message_text("main program", 893, 3) = "(en porcentage) de reducir la duraci\363n del veneno cada turno";
		a_message_text("main program", 894, 1) = "Your chance to hit monsters in melee combat.";
		a_message_text("main program", 895, 1) = "It is reduced by the monster's ability to dodge, so your real chance is lower";
		a_message_text("main program", 894, 2) = "Die Wahrscheinlichkeit f\374r einen Treffer im Nahkampf. Da davon noch";
		a_message_text("main program", 895, 2) = "die Ausweichfertigkeit des Monsters abgezogen wird, ist der resultierende Wert geringer";
		a_message_text("main program", 894, 3) = "Tu posibilidad de impactar un monstruo en combate cuerpo a cuerpo.";
		a_message_text("main program", 895, 3) = "Es reducida por la habilidad del monstruo de esquivar, por lo que tu posibilidad real es menor";
		a_message_text("main program", 896, 1) = "Your chance to score a critical hit (instant kill) in melee combat.";
		a_message_text("main program", 897, 1) = "(luck+dex)x1%+weapon , 30% max., some monsters are immune to critical hits";
		a_message_text("main program", 896, 2) = "Deine Wahrscheinlichkeit einen t\366dlichen Treffer zu landen.";
		a_message_text("main program", 897, 2) = "(Gl\374ck+Geschick)x1%+Waffe , 30% max., Manche Monster sind immun gegen kritische Treffer";
		a_message_text("main program", 896, 3) = "Tu posibilidad de hacer golpes cr\355ticos (muerte instantanea) en combates cuerpo a cuerpo.";
		a_message_text("main program", 897, 3) = "(suerte+destreza)x1%+arma , 30% max., algunos monstruos son inmunes a golpes cr\355ticos";
		a_message_text("main program", 898, 1) = "Your base ability to sneak by un-alerted monsters.";
		a_message_text("main program", 899, 1) = "This is further influenced by the monster's level and status (blind,sleeping etc.).";
		a_message_text("main program", 898, 2) = "Basis Wahrscheinlichkeit an einem Monster vorbeizuschleichen";
		a_message_text("main program", 899, 2) = "Level und Status (alarmiert,blind etc.) des Monsters beinflussen den eng\374ltigen Wert";
		a_message_text("main program", 898, 3) = "Tu Habilidad base de burlar monstruos que no esten alerta.";
		a_message_text("main program", 899, 3) = "Esta influenciada por el nivel del monstruo y el estado (ciego,dormido etc.).";
		a_message_text("main program", 900, 1) = "Reset all skills";
		a_message_text("main program", 900, 2) = "Alle F\344higkeiten zur\374cksetzen";
		a_message_text("main program", 900, 3) = "Limpia toda la selecci\363n";
		a_message_text("main program", 901, 1) = "Save current skills to template";
		a_message_text("main program", 901, 2) = "Gew\344hlte F\344higkeiten in Template speichern";
		a_message_text("main program", 901, 3) = "guarda abilidades elegidas en una platilla";
		a_message_text("main program", 902, 1) = "Load a character template";
		a_message_text("main program", 902, 2) = "Charakter-Template laden";
		a_message_text("main program", 902, 3) = "carga una platilla";
		a_message_text("main program", 903, 1) = "Please distribute all skill points";
		a_message_text("main program", 903, 2) = "Bitte verteile alle Skill Punkte";
		a_message_text("main program", 903, 3) = "Por favor distribuye todos los puntos de habilidad";
		a_message_text("main program", 904, 1) = "[ new template ]";
		a_message_text("main program", 904, 2) = "[ neues Template ]";
		a_message_text("main program", 904, 3) = "[ nueva platilla ]";
		a_message_text("main program", 905, 1) = "< save to disk & exit >";
		a_message_text("main program", 905, 2) = "< Eingabe beenden & Speichern >";
		a_message_text("main program", 905, 3) = "< guarda a disco & sale >";
		a_message_text("main program", 906, 1) = "Back to main menu";
		a_message_text("main program", 906, 2) = "Zur\374ck zum Hauptmen\374";
		a_message_text("main program", 906, 3) = "Volver al men\372";
		a_message_text("main program", 907, 1) = "Accept selection and enter the Labyrinth";
		a_message_text("main program", 907, 2) = "Auswahl best\344tigen und Labyrinth betreten";
		a_message_text("main program", 907, 3) = "Acceptar la selecci\363n y entrar al laberinto";
		a_message_text("main program", 908, 1) = "Chance to spot traps";
		a_message_text("main program", 909, 1) = "Gets more difficult with dungeon level";
		a_message_text("main program", 908, 2) = "Wahrscheinlichkeit, eine Falle zu entdecken";
		a_message_text("main program", 909, 2) = "Schwierigkeit steigt mit dem Level";
		a_message_text("main program", 908, 3) = "Posibilidad de encontrar trampas";
		a_message_text("main program", 909, 3) = "Se hace m\341s d\355ficil con cada nivel";
		a_message_text("main program", 910, 1) = "Basic chance to dodge mechanical traps, rune traps cannot be dodged";
		a_message_text("main program", 911, 1) = "Gets more difficult with dungeon level";
		a_message_text("main program", 910, 2) = "Wahrscheinlichkeit, einer mechanischen Falle auszuweichen. Runenfallen";
		a_message_text("main program", 911, 2) = "kann man nicht ausweichen. Schwierigkeit steigt mit dem Level";
		a_message_text("main program", 910, 3) = "Posibilidad base de esquivar trampas mec\341nicas. No sirve para trampas r\372nicas.";
		a_message_text("main program", 911, 3) = "Se hace m\341s d\355ficil con cada nivel";
		a_message_text("main program", 912, 1) = "Basic chance to dodge an attack (dodging skill NOT included)";
		a_message_text("main program", 913, 1) = "The monster's attack rating effect the result.";
		a_message_text("main program", 912, 2) = "Wahrscheinlichkeit zum Ausweichen eines Angriffs (ohne Ausweichen Fertigkeit)";
		a_message_text("main program", 913, 2) = "Der Angriffswert des Monsters verringert den resultierenden Wert";
		a_message_text("main program", 912, 3) = "Posibilidad base de esquivar un ataque (Habilidad de esquivar NO incluida)";
		a_message_text("main program", 913, 3) = "El valor de ataque del enemigo afecta el resultado.";
		a_message_text("main program", 914, 1) = "Chance to resist hostile magic";
		a_message_text("main program", 914, 2) = "Wahrscheinlichkeit Magie zu widerstehen";
		a_message_text("main program", 914, 3) = "Posibilidad de resistir magia hostil";
		a_message_text("main program", 915, 1) = "Find Secret Doors: ";
		a_message_text("main program", 915, 2) = "Geheimt\374ren Finden: ";
		a_message_text("main program", 915, 3) = "Encontrar puertas secretas: ";
		a_message_text("main program", 916, 1) = "Chance to find secret doors";
		a_message_text("main program", 916, 2) = "Wahrscheinlichkeit Geheimt\374ren zu entdecken";
		a_message_text("main program", 916, 3) = "Posibilidad de encontrar puertas secretas";
		a_message_text("main program", 917, 1) = "Find Treasure: ";
		a_message_text("main program", 917, 2) = "Schatz Finden: ";
		a_message_text("main program", 917, 3) = "Econtrar tesoro: ";
		a_message_text("main program", 918, 1) = "Chance to find hidden treasure";
		a_message_text("main program", 918, 2) = "Wahrscheinlichkeit vergrabene Sch\344tze zu entdecken";
		a_message_text("main program", 918, 3) = "Posibilidad de encontrar tesoros ocultos";
		a_message_text("main program", 919, 1) = "Your life points - You'll die if it get's 0. Max.: 150";
		a_message_text("main program", 919, 2) = "Lebenspunkte - Bei 0 Punkten stirbt man. Max.: 150";
		a_message_text("main program", 919, 3) = "Tus puntos de vida - Mueres al llegar a 0. Max.: 150";
		a_message_text("main program", 920, 1) = "Your Spell points - needed to cast spells. Max.: 150";
		a_message_text("main program", 920, 2) = "Zauberpunkete - ben\366tigt zum Zaubern. Max.: 150";
		a_message_text("main program", 920, 3) = "Tus puntos de hechizo - necesarios para lanzar hechizos. Max.: 150";
		a_message_text("main program", 921, 1) = "Basic attack rating for melee and ranged combat";
		a_message_text("main program", 921, 2) = "Basis Angriffswert f\374r Nah- und Fernkampf";
		a_message_text("main program", 921, 3) = "Valor del ataque b\341sico en combate cuerpo a cuerpo y a distancia";
		a_message_text("main program", 922, 1) = "Dexterity: effects dodging traps and attacks";
		a_message_text("main program", 923, 1) = "and chance for sneak,criticals and stealing. Max.: 15";
		a_message_text("main program", 922, 2) = "Gewandtheit: beeinflusst Ausweichen(Fallen/Angriff)";
		a_message_text("main program", 923, 2) = "und Chancen f\374r Schleichen,Kritische T. u. Stehlen. Max.: 15";
		a_message_text("main program", 922, 3) = "La Destreza es \372til para esquivar trampas y ataques";
		a_message_text("main program", 923, 3) = "y da bonus al sigilo, robar y hacer cr\355ticos. Max.: 15";
		a_message_text("main program", 924, 1) = "Strength: effects damage in melee and ranged combat, reduces encumbrance,";
		a_message_text("main program", 925, 1) = "and is needed to lift portcullis' or move boulders. normal maximum: 15";
		a_message_text("main program", 924, 2) = "St\344rke: bestimmt Schaden in Nah- und Fernkampf, reduziert Gewichtsbelastung,";
		a_message_text("main program", 925, 2) = "und wird ben\366tigt zum Heben von Fallgittern und Schieben von Felsen. Normales Maximum: 15";
		a_message_text("main program", 924, 3) = "La Fuerza afecta el da\361o en combate cuerpo a cuerpo y a distancia, reduce el estorbo";
		a_message_text("main program", 925, 3) = "y es necesaria para levantar verjas o mover piedras. M\341ximo normal: 15";
		a_message_text("main program", 926, 1) = "Speed: The number of steps you can make per turn. Max.: 25";
		a_message_text("main program", 926, 2) = "Geschwindigkeit: Anzahl Schritte pro Zug. Max.: 25";
		a_message_text("main program", 926, 3) = "La velocidad influye en el n\372mero de pasos que puedes hacer por turno. Max.: 25";
		a_message_text("main program", 927, 1) = "Perception helps to find traps,secret doors and hidden treasure. Max.: 15";
		a_message_text("main program", 927, 2) = "Wahrnehmung hilft Fallen,Geheimt\374ren und Sch\344tze zu finden. Max.: 15";
		a_message_text("main program", 927, 3) = "La Percepci\363n ayuda a encontrar trampas, puertas secretas y tesoros secretos. Max.: 15";
		a_message_text("main program", 928, 1) = "Luck effect many things like e.g. sneaking,finding Stuff, avoiding dangers. Max.: 15";
		a_message_text("main program", 928, 2) = "Gl\374ck, beeinflusst vieles z.B. Schleichen, Dinge finden, Gefahren vermeiden. Max.: 15";
		a_message_text("main program", 928, 3) = "La Suerte ayuda en varios aspectos: sigilo, encontrar cosas, evitar peligros.. Max.: 15";
		a_message_text("main program", 929, 1) = "Power rating effects most spells (amount of damage,duration time) Max.: 15";
		a_message_text("main program", 929, 2) = "Zauber-Macht beeinflusst viele Zauber (Schadensmenge, Dauer, Reichweite) Max.: 15";
		a_message_text("main program", 929, 3) = "El Poder mejora el efecto de muchos hechizos (cantidad de da\361o,duraci\363n) Max.: 15";
		a_message_text("main program", 930, 1) = "Your Spell Circle determines which spells you have available. Highest Spell Level: 15";
		a_message_text("main program", 930, 2) = "Zirkel: Nur Zauber bis zu dieser Stufe sind verf\374gbar. H\366chste Spruch Stufe: 15";
		a_message_text("main program", 930, 3) = "Tu C\355rculo de Hechizos determina los hechizos disponibles. M\341ximo nivel de Hechizo: 15";
		a_message_text("main program", 931, 1) = "When your hunger reaches 160, you start to take damage each turn";
		a_message_text("main program", 931, 2) = "Ab einem Hunger-Wert von 160, nimmt man jede Runde Schaden";
		a_message_text("main program", 931, 3) = "Cuando tu hambre llega a 160 empiezas a recibir da\361o cada turno";
		a_message_text("main program", 932, 1) = "When your thirst reaches 120, you start to take damage each turn";
		a_message_text("main program", 932, 2) = "Ab einem Durst von 120, nimmt man jede Runde Schaden";
		a_message_text("main program", 932, 3) = "Cuando tu sed llega a 120 empiezas a recibir da\361o cada turno";
		a_message_text("main program", 933, 1) = "The amount of damage you deal out in melee combat";
		a_message_text("main program", 933, 2) = "Die H\366he des Schadens im Nahkampf";
		a_message_text("main program", 933, 3) = "La cantidad de da\361o que recibes en un combato cuerpo a cuerpo";
		a_message_text("main program", 934, 1) = "Armor rating is substracted from damage taken in combat";
		a_message_text("main program", 934, 2) = "Der R\374st-Wert vermindert den im Kampf erlittenen Schaden";
		a_message_text("main program", 934, 3) = "El valor de la armadura es restado del da\361o recibido en combate";
		a_message_text("main program", 935, 1) = "Encumbrance through armor substract %10 from your attack- and spell success rating";
		a_message_text("main program", 935, 2) = "Behinderung durch R\374stung vermindert Angriffswert und Zauber-Erfolgsrate um 10%.";
		a_message_text("main program", 935, 3) = "El estorbo con armadura resta el 10% de tu ataque y de lanzar hechizos con \351xito.";
		a_message_text("main program", 936, 1) = "The number of eliminated Monsters";
		a_message_text("main program", 936, 2) = "Die Zahl der vernichteten Monster";
		a_message_text("main program", 936, 3) = "El n\372mero de monstruos eliminados";
		a_message_text("main program", 937, 1) = "Gold can be spent at merchants and trainers, and one can by experience.";
		a_message_text("main program", 937, 2) = "Gold ben\366tigt man f\374r H\344ndler und Lehrer, und man kann Erfahrung kaufen.";
		a_message_text("main program", 937, 3) = "Puedes gastar el oro con mercaderes y entrenadores, y puedes comprar experiencia.";
		a_message_text("main program", 938, 1) = "If you collect 9 pieces of the staff, you win the game.";
		a_message_text("main program", 938, 2) = "Wenn man 9 Teile des Stabes sammelt, hat man das Spiel gewonnen.";
		a_message_text("main program", 938, 3) = "Si consigues las 9 partes del bast\363n ganas el juego.";
		a_message_text("main program", 939, 1) = "The number of rounds you spent in the labyrinth.";
		a_message_text("main program", 939, 2) = "Die Anzahl der im Labyrinth verbrachten Runden.";
		a_message_text("main program", 939, 3) = "N\372mero de turnos usados en el laberinto.";
		a_message_text("main program", 940, 1) = "Points for highscore: 10xlevel + kills/5 + gold/10 + 100xstaff-pieces";
		a_message_text("main program", 941, 1) = "Points for kills and gold can not exceed the points for reached levels";
		a_message_text("main program", 940, 2) = "Highscore Punktzahl: 10xLevel + Kills/5 + Gold/10 + 100xStabteile";
		a_message_text("main program", 941, 2) = "Man bekommt nie mehr Punkte f\374r Kills oder Gold, als f\374r erreichte Level";
		a_message_text("main program", 940, 3) = "Puntuaci\363n final: 10xNivel + victimas/5 + oro/10 + 100xpieza de baston";
		a_message_text("main program", 941, 3) = "Los puntos por muertos y oro no pueden superar los puntos por nivel superado";
		a_message_text("main program", 942, 1) = "Split Stack";
		a_message_text("main program", 942, 2) = "Aufteilen";
		a_message_text("main program", 942, 3) = "Separar Grupo";
		a_message_text("main program", 943, 1) = "Move to another slot";
		a_message_text("main program", 943, 2) = "Bewegen im Gep\344ck";
		a_message_text("main program", 943, 3) = "Mover a otra casilla";
		a_message_text("main program", 944, 1) = "Select target slot for";
		a_message_text("main program", 944, 2) = "W\344hle neuen Platz f\374r";
		a_message_text("main program", 944, 3) = "Selecciona una casilla para";
		a_message_text("main program", 945, 1) = "Can not equip a whole item stack";
		a_message_text("main program", 945, 2) = "Nur einzelne Ausr\374stung verwendbar";
		a_message_text("main program", 945, 3) = "No puedes equiparte el grupo de objetos";
		a_message_text("main program", 946, 1) = "You can't see anything";
		a_message_text("main program", 946, 2) = "Du kannst nichts erkennen";
		a_message_text("main program", 946, 3) = "No puedes ver nada";
		a_message_text("main program", 947, 1) = "You skipped a turn";
		a_message_text("main program", 947, 2) = "Du setzt aus";
		a_message_text("main program", 947, 3) = "Esperas";
		a_message_text("main program", 948, 1) = "damaged";
		a_message_text("main program", 948, 2) = "besch\344digt";
		a_message_text("main program", 948, 3) = "da\361ada";
		a_message_text("main program", 949, 1) = "broken";
		a_message_text("main program", 949, 2) = "zerbrochen";
		a_message_text("main program", 949, 3) = "rompa";
		a_message_text("main program", 950, 1) = "The frozen lightning breaks!";
		a_message_text("main program", 950, 2) = "Die gefrorenen Blitze zerbrechen!";
		a_message_text("main program", 950, 3) = "Los rayos enfriados se rompen!";
		a_message_text("main program", 951, 1) = "infinite";
		a_message_text("main program", 951, 2) = "ewig";
		a_message_text("main program", 951, 3) = "infinite";
		a_message_text("main program", 952, 1) = "Only on water";
		a_message_text("main program", 952, 2) = "Nur auf Wasser";
		a_message_text("main program", 952, 3) = "Solamente con aqua";
		a_message_text("main program", 953, 1) = "You disarmed the trap";
		a_message_text("main program", 953, 2) = "Du entsch\344rfst die Falle";
		a_message_text("main program", 953, 3) = "Disarmas la trampa";
		a_message_text("main program", 954, 1) = "Sacrifice a weapon";
		a_message_text("main program", 954, 2) = "Opfere eine Waffe";
		a_message_text("main program", 954, 3) = "Sacrifice una arma";
		a_message_text("main program", 955, 1) = "That is not a weapon";
		a_message_text("main program", 955, 2) = "Das ist keine Waffe";
		a_message_text("main program", 955, 3) = "Eso no es una arma";
		a_message_text("main program", 956, 1) = "Enabled";
		a_message_text("main program", 956, 2) = "Eingeschaltet";
		a_message_text("main program", 956, 3) = "Prendido";
		a_message_text("main program", 957, 1) = "Disabled";
		a_message_text("main program", 957, 2) = "Ausgeschaltet";
		a_message_text("main program", 957, 3) = "Apagado";
		a_message_text("main program", 958, 1) = "On";
		a_message_text("main program", 958, 2) = "Ein";
		a_message_text("main program", 958, 3) = "Predido";
		a_message_text("main program", 959, 1) = "Off";
		a_message_text("main program", 959, 2) = "Aus";
		a_message_text("main program", 959, 3) = "Apagado";
		a_message_text("main program", 960, 1) = "Abort Game";
		a_message_text("main program", 960, 2) = "Spiel abbrechen";
		a_message_text("main program", 960, 3) = "Terminar Juego";
		a_message_text("main program", 961, 1) = "Quit Program";
		a_message_text("main program", 961, 2) = "Programm beenden";
		a_message_text("main program", 961, 3) = "Salir del Programa";
		a_message_text("main program", 962, 1) = "Game Speed";
		a_message_text("main program", 962, 2) = "Spielgeschwindigkeit";
		a_message_text("main program", 962, 3) = "Velocidad del Juego";
		a_message_text("main program", 963, 1) = "Save Settings";
		a_message_text("main program", 963, 2) = "Einstellungen speichern";
		a_message_text("main program", 963, 3) = "Guardar Configuracion";
		a_message_text("main program", 964, 1) = "Fullscreen/Windowed";
		a_message_text("main program", 964, 2) = "Vollbild/Fenster";
		a_message_text("main program", 964, 3) = "Fullscreen/Ventana";
		a_message_text("main program", 965, 1) = "Enable Joystick";
		a_message_text("main program", 965, 2) = "Joystick einschalten";
		a_message_text("main program", 965, 3) = "Activar Joystick";
		a_message_text("main program", 966, 1) = "No Mouse";
		a_message_text("main program", 966, 2) = "Keine Maus";
		a_message_text("main program", 966, 3) = "No raton";
		a_message_text("main program", 967, 1) = "Auto-Toggle";
		a_message_text("main program", 967, 2) = "Auto-Toggle";
		a_message_text("main program", 967, 3) = "Auto-Usar";
		a_message_text("main program", 968, 1) = "Sounds";
		a_message_text("main program", 968, 2) = "Sound";
		a_message_text("main program", 968, 3) = "Sonidos";
		a_message_text("main program", 969, 1) = "Music";
		a_message_text("main program", 969, 2) = "Musik";
		a_message_text("main program", 969, 3) = "Musica";
		a_message_text("main program", 970, 1) = "Clicking";
		a_message_text("main program", 970, 2) = "Klicken";
		a_message_text("main program", 970, 3) = "Klickear";
		a_message_text("main program", 971, 1) = "Bow = Button 5";
		a_message_text("main program", 971, 2) = "Bogen = Knopf 5";
		a_message_text("main program", 971, 3) = "Arco = Buton 5";
		a_message_text("main program", 972, 1) = "MP/LP graphical";
		a_message_text("main program", 972, 2) = "MP/LP grafisch";
		a_message_text("main program", 972, 3) = "PdM/PdV con graficas";
		a_message_text("main program", 973, 1) = "Clicking";
		a_message_text("main program", 973, 2) = "Klicken";
		a_message_text("main program", 973, 3) = "Klickear";
		a_message_text("main program", 974, 1) = "Save";
		a_message_text("main program", 974, 2) = "Sichern";
		a_message_text("main program", 974, 3) = "Guardar";
		a_message_text("main program", 975, 1) = "Mousepointer";
		a_message_text("main program", 975, 2) = "Mauszeiger";
		a_message_text("main program", 975, 3) = "Aspecto del raton";
		a_message_text("main program", 976, 1) = "delete a template";
		a_message_text("main program", 976, 2) = "Template l\366schen";
		a_message_text("main program", 976, 3) = "borre una platilla";
		a_message_text("main program", 977, 1) = "a silver/gold key opens this chest";
		a_message_text("main program", 977, 2) = "Ein silberner/goldener Schl\374ssel \366ffnet diese Truhe";
		a_message_text("main program", 977, 3) = "una llave de plata/oro abre esa caja";
		a_message_text("main program", 978, 1) = "a golden key opens this chest";
		a_message_text("main program", 978, 2) = "Ein goldener Schl\374ssel \366ffnet diese Truhe";
		a_message_text("main program", 978, 3) = "una llave de oro abre esa caja";
		a_message_text("main program", 979, 1) = "You botched the spell!";
		a_message_text("main program", 979, 2) = "Schwerer Zauberfehler!";
		a_message_text("main program", 979, 3) = "Habia un accidente magico!";
		a_message_text("main program", 980, 1) = "Creature evaded being petrified!";
		a_message_text("main program", 980, 2) = "Kreatur konnte verhindern versteinert zu werden!";
		a_message_text("main program", 980, 3) = "Kriatura evito ser convertido en piedra!";
		a_message_text("main program", 997, 0) = "English";
		a_message_text("main program", 997, 1) = "Englisch";
		a_message_text("main program", 997, 2) = "Ingles";
		a_message_text("main program", 998, 0) = "German";
		a_message_text("main program", 998, 1) = "Deutsch";
		a_message_text("main program", 998, 2) = "Aleman";
		a_message_text("main program", 999, 0) = "Spanish";
		a_message_text("main program", 999, 1) = "Spanisch";
		a_message_text("main program", 999, 2) = "Espa\361ol";
		g_spalte = 0;
		g_zeile = 0;
		v_ok_button = 0;
		for (v_i = 1; v_i <= 411; v_i += 1) {
			a_item("main program", v_i).f_name[2] = "";
			a_item("main program", v_i).f_name[1] = "";
			a_item("main program", v_i).f_name[3] = "";
			a_item("main program", v_i).f_type = 0;
			a_item("main program", v_i).f_klasse = 0;
			a_item("main program", v_i).f_magisch = 0;
			a_item("main program", v_i).f_qualitaet = 0;
			a_item("main program", v_i).f_info[2] = "";
			a_item("main program", v_i).f_info[1] = "";
			a_item("main program", v_i).f_info[3] = "";
			a_item("main program", v_i).f_einkauf = 0;
			a_item("main program", v_i).f_verkauf = 0;
			a_item("main program", v_i).f_gewicht = 0;
			a_item("main program", v_i).f_unique = 0;
			a_item("main program", v_i).f_attri1 = 0;
			a_item("main program", v_i).f_attri2 = 0;
			a_item("main program", v_i).f_attri3 = 0;
			a_item("main program", v_i).f_attri4 = 0;
		}
		a_item("main program", 1).f_name[2] = "Dolch";
		a_item("main program", 1).f_name[1] = "Dagger";
		a_item("main program", 1).f_name[3] = "Daga";
		a_item("main program", 1).f_type = 1;
		a_item("main program", 1).f_use_type = 1;
		a_item("main program", 1).f_klasse = 5;
		a_item("main program", 1).f_einkauf = 5;
		a_item("main program", 1).f_verkauf = 3;
		a_item("main program", 1).f_gewicht = 5;
		a_item("main program", 1).f_attri1 = 0;
		a_item("main program", 1).f_attri2 = 1;
		a_item("main program", 1).f_attri3 = 5;
		a_item("main program", 1).f_attri4 = 1;
		a_item("main program", 2).f_name[2] = "Bih\344nder (2H)";
		a_item("main program", 2).f_name[1] = "Bastard Sword (2H)";
		a_item("main program", 2).f_name[3] = "Espada Bastarda (2M)";
		a_item("main program", 2).f_type = 1;
		a_item("main program", 2).f_use_type = 1;
		a_item("main program", 2).f_klasse = 1;
		a_item("main program", 2).f_einkauf = 50;
		a_item("main program", 2).f_verkauf = 30;
		a_item("main program", 2).f_gewicht = 30;
		a_item("main program", 2).f_attri1 = 0;
		a_item("main program", 2).f_attri2 = 4;
		a_item("main program", 2).f_attri3 = 5;
		a_item("main program", 2).f_attri4 = 2;
		a_item("main program", 3).f_name[2] = "Langschwert";
		a_item("main program", 3).f_name[1] = "Longsword";
		a_item("main program", 3).f_name[3] = "Espada Larga";
		a_item("main program", 3).f_type = 1;
		a_item("main program", 3).f_use_type = 1;
		a_item("main program", 3).f_klasse = 1;
		a_item("main program", 3).f_einkauf = 40;
		a_item("main program", 3).f_verkauf = 20;
		a_item("main program", 3).f_gewicht = 25;
		a_item("main program", 3).f_attri1 = 1;
		a_item("main program", 3).f_attri2 = 3;
		a_item("main program", 3).f_attri3 = 5;
		a_item("main program", 3).f_attri4 = 1;
		a_item("main program", 4).f_name[2] = "Peitsche";
		a_item("main program", 4).f_name[1] = "Whip";
		a_item("main program", 4).f_name[3] = "L\341tigo";
		a_item("main program", 4).f_type = 1;
		a_item("main program", 4).f_use_type = 1;
		a_item("main program", 4).f_einkauf = 10;
		a_item("main program", 4).f_verkauf = 5;
		a_item("main program", 4).f_gewicht = 10;
		a_item("main program", 4).f_attri1 = 2;
		a_item("main program", 4).f_attri2 = 1;
		a_item("main program", 4).f_attri3 = 10;
		a_item("main program", 4).f_attri4 = 1;
		a_item("main program", 5).f_name[2] = "Stabkeule";
		a_item("main program", 5).f_name[1] = "Poleaxe";
		a_item("main program", 5).f_name[3] = "Hacha";
		a_item("main program", 5).f_type = 1;
		a_item("main program", 5).f_use_type = 1;
		a_item("main program", 5).f_klasse = 4;
		a_item("main program", 5).f_einkauf = 20;
		a_item("main program", 5).f_verkauf = 10;
		a_item("main program", 5).f_gewicht = 20;
		a_item("main program", 5).f_attri1 = 0;
		a_item("main program", 5).f_attri2 = 3;
		a_item("main program", 5).f_attri3 = 5;
		a_item("main program", 5).f_attri4 = 1;
		a_item("main program", 6).f_name[2] = "Kampfstab (2H)";
		a_item("main program", 6).f_name[1] = "Fighting Stick (2H)";
		a_item("main program", 6).f_name[3] = "Bast\363n de Combate (2M)";
		a_item("main program", 6).f_type = 1;
		a_item("main program", 6).f_use_type = 1;
		a_item("main program", 6).f_klasse = 6;
		a_item("main program", 6).f_einkauf = 10;
		a_item("main program", 6).f_verkauf = 5;
		a_item("main program", 6).f_gewicht = 15;
		a_item("main program", 6).f_attri1 = 1;
		a_item("main program", 6).f_attri2 = 2;
		a_item("main program", 6).f_attri3 = 15;
		a_item("main program", 6).f_attri4 = 2;
		a_item("main program", 7).f_name[2] = "Morgenstern (1H)";
		a_item("main program", 7).f_name[1] = "Morning Star (1H)";
		a_item("main program", 7).f_name[3] = "Estrella del Alba (1M)";
		a_item("main program", 7).f_type = 1;
		a_item("main program", 7).f_use_type = 1;
		a_item("main program", 7).f_einkauf = 40;
		a_item("main program", 7).f_verkauf = 20;
		a_item("main program", 7).f_gewicht = 25;
		a_item("main program", 7).f_attri1 = 1;
		a_item("main program", 7).f_attri2 = 2;
		a_item("main program", 7).f_attri3 = 10;
		a_item("main program", 7).f_attri4 = 1;
		a_item("main program", 8).f_name[2] = "Morgenstern (2H)";
		a_item("main program", 8).f_name[1] = "Morning Star (2H)";
		a_item("main program", 8).f_name[3] = "Estrella del Alba (2M)";
		a_item("main program", 8).f_type = 1;
		a_item("main program", 8).f_use_type = 1;
		a_item("main program", 8).f_einkauf = 45;
		a_item("main program", 8).f_verkauf = 25;
		a_item("main program", 8).f_gewicht = 35;
		a_item("main program", 8).f_attri1 = 2;
		a_item("main program", 8).f_attri2 = 4;
		a_item("main program", 8).f_attri3 = 10;
		a_item("main program", 8).f_attri4 = 2;
		a_item("main program", 9).f_name[2] = "Speer";
		a_item("main program", 9).f_name[1] = "Spear";
		a_item("main program", 9).f_name[3] = "Lanza";
		a_item("main program", 9).f_type = 1;
		a_item("main program", 9).f_use_type = 1;
		a_item("main program", 9).f_klasse = 3;
		a_item("main program", 9).f_einkauf = 30;
		a_item("main program", 9).f_verkauf = 15;
		a_item("main program", 9).f_gewicht = 20;
		a_item("main program", 9).f_attri1 = 2;
		a_item("main program", 9).f_attri2 = 3;
		a_item("main program", 9).f_attri3 = 10;
		a_item("main program", 9).f_attri4 = 1;
		a_item("main program", 10).f_name[2] = "Dreizack (2H)";
		a_item("main program", 10).f_name[1] = "Pike (2H)";
		a_item("main program", 10).f_name[3] = "Pica (2M)";
		a_item("main program", 10).f_type = 1;
		a_item("main program", 10).f_use_type = 1;
		a_item("main program", 10).f_klasse = 8;
		a_item("main program", 10).f_einkauf = 40;
		a_item("main program", 10).f_verkauf = 20;
		a_item("main program", 10).f_gewicht = 30;
		a_item("main program", 10).f_attri1 = 0;
		a_item("main program", 10).f_attri2 = 4;
		a_item("main program", 10).f_attri3 = 10;
		a_item("main program", 10).f_attri4 = 2;
		a_item("main program", 11).f_name[2] = "Axt (1H)";
		a_item("main program", 11).f_name[1] = "Axe (1H)";
		a_item("main program", 11).f_name[3] = "Hacha (1M)";
		a_item("main program", 11).f_type = 1;
		a_item("main program", 11).f_use_type = 1;
		a_item("main program", 11).f_klasse = 2;
		a_item("main program", 11).f_einkauf = 40;
		a_item("main program", 11).f_verkauf = 20;
		a_item("main program", 11).f_gewicht = 25;
		a_item("main program", 11).f_attri1 = -1;
		a_item("main program", 11).f_attri2 = 3;
		a_item("main program", 11).f_attri3 = 5;
		a_item("main program", 11).f_attri4 = 1;
		a_item("main program", 12).f_name[2] = "Speer (2H)";
		a_item("main program", 12).f_name[1] = "Spear (2H)";
		a_item("main program", 12).f_name[3] = "Lanza (2M)";
		a_item("main program", 12).f_type = 1;
		a_item("main program", 12).f_use_type = 1;
		a_item("main program", 12).f_klasse = 3;
		a_item("main program", 12).f_einkauf = 50;
		a_item("main program", 12).f_verkauf = 30;
		a_item("main program", 12).f_gewicht = 30;
		a_item("main program", 12).f_attri1 = -1;
		a_item("main program", 12).f_attri2 = 4;
		a_item("main program", 12).f_attri3 = 5;
		a_item("main program", 12).f_attri4 = 2;
		a_item("main program", 13).f_name[2] = "Axt";
		a_item("main program", 13).f_name[1] = "Axe";
		a_item("main program", 13).f_name[3] = "Hacha";
		a_item("main program", 13).f_type = 1;
		a_item("main program", 13).f_use_type = 1;
		a_item("main program", 13).f_klasse = 2;
		a_item("main program", 13).f_einkauf = 30;
		a_item("main program", 13).f_verkauf = 20;
		a_item("main program", 13).f_gewicht = 30;
		a_item("main program", 13).f_attri1 = 1;
		a_item("main program", 13).f_attri2 = 2;
		a_item("main program", 13).f_attri3 = 5;
		a_item("main program", 13).f_attri4 = 1;
		a_item("main program", 14).f_name[2] = "Axt (2H)";
		a_item("main program", 14).f_name[1] = "Axe (2H)";
		a_item("main program", 14).f_name[3] = "Hacha (2H)";
		a_item("main program", 14).f_type = 1;
		a_item("main program", 14).f_use_type = 1;
		a_item("main program", 14).f_klasse = 2;
		a_item("main program", 14).f_einkauf = 40;
		a_item("main program", 14).f_verkauf = 25;
		a_item("main program", 14).f_gewicht = 35;
		a_item("main program", 14).f_attri1 = 1;
		a_item("main program", 14).f_attri2 = 3;
		a_item("main program", 14).f_attri3 = 6;
		a_item("main program", 14).f_attri4 = 2;
		a_item("main program", 15).f_name[2] = "Langaxt (2H)";
		a_item("main program", 15).f_name[1] = "Poleaxe (2H)";
		a_item("main program", 15).f_name[3] = "Hacha (2M)";
		a_item("main program", 15).f_type = 1;
		a_item("main program", 15).f_use_type = 1;
		a_item("main program", 15).f_klasse = 8;
		a_item("main program", 15).f_einkauf = 45;
		a_item("main program", 15).f_verkauf = 25;
		a_item("main program", 15).f_gewicht = 35;
		a_item("main program", 15).f_attri1 = 2;
		a_item("main program", 15).f_attri2 = 4;
		a_item("main program", 15).f_attri3 = 6;
		a_item("main program", 15).f_attri4 = 2;
		a_item("main program", 16).f_name[2] = "Langaxt (2H)";
		a_item("main program", 16).f_name[1] = "Poleaxe (2H)";
		a_item("main program", 16).f_name[3] = "Hacha (2M)";
		a_item("main program", 16).f_type = 1;
		a_item("main program", 16).f_use_type = 1;
		a_item("main program", 16).f_klasse = 8;
		a_item("main program", 16).f_einkauf = 55;
		a_item("main program", 16).f_verkauf = 35;
		a_item("main program", 16).f_gewicht = 35;
		a_item("main program", 16).f_attri1 = 2;
		a_item("main program", 16).f_attri2 = 5;
		a_item("main program", 16).f_attri3 = 10;
		a_item("main program", 16).f_attri4 = 2;
		a_item("main program", 21).f_name[2] = "Bogen";
		a_item("main program", 21).f_name[1] = "Bow";
		a_item("main program", 21).f_name[3] = "Arco";
		a_item("main program", 21).f_type = 10;
		a_item("main program", 21).f_use_type = 1;
		a_item("main program", 21).f_einkauf = 45;
		a_item("main program", 21).f_verkauf = 25;
		a_item("main program", 21).f_gewicht = 20;
		a_item("main program", 21).f_attri1 = 1;
		a_item("main program", 21).f_attri2 = 3;
		a_item("main program", 21).f_attri3 = 10;
		a_item("main program", 21).f_attri4 = 2;
		a_item("main program", 22).f_name[2] = "Armbrust";
		a_item("main program", 22).f_name[1] = "Crossbow";
		a_item("main program", 22).f_name[3] = "Ballesta";
		a_item("main program", 22).f_type = 10;
		a_item("main program", 22).f_use_type = 1;
		a_item("main program", 22).f_einkauf = 55;
		a_item("main program", 22).f_verkauf = 35;
		a_item("main program", 22).f_gewicht = 30;
		a_item("main program", 22).f_attri1 = 3;
		a_item("main program", 22).f_attri2 = 4;
		a_item("main program", 22).f_attri3 = 10;
		a_item("main program", 22).f_attri4 = 2;
		a_item("main program", 18).f_name[2] = "Kriegshammer (2H)";
		a_item("main program", 18).f_name[1] = "War Hammer (2H)";
		a_item("main program", 18).f_name[3] = "Martillo de Guerra (2M)";
		a_item("main program", 18).f_type = 1;
		a_item("main program", 18).f_use_type = 1;
		a_item("main program", 18).f_klasse = 4;
		a_item("main program", 18).f_einkauf = 55;
		a_item("main program", 18).f_verkauf = 30;
		a_item("main program", 18).f_gewicht = 45;
		a_item("main program", 18).f_attri1 = -1;
		a_item("main program", 18).f_attri2 = 5;
		a_item("main program", 18).f_attri3 = 10;
		a_item("main program", 18).f_attri4 = 2;
		a_item("main program", 19).f_name[2] = "Schleuder";
		a_item("main program", 19).f_name[1] = "Sling";
		a_item("main program", 19).f_name[3] = "Honda";
		a_item("main program", 19).f_type = 10;
		a_item("main program", 19).f_use_type = 1;
		a_item("main program", 19).f_einkauf = 15;
		a_item("main program", 19).f_verkauf = 10;
		a_item("main program", 19).f_gewicht = 5;
		a_item("main program", 19).f_attri1 = 1;
		a_item("main program", 19).f_attri2 = 2;
		a_item("main program", 19).f_attri3 = 5;
		a_item("main program", 19).f_attri4 = 2;
		a_item("main program", 17).f_name[2] = "Nunchakus (2H)";
		a_item("main program", 17).f_name[1] = "Nunchakus (2H)";
		a_item("main program", 17).f_name[3] = "Nunchakus (2M)";
		a_item("main program", 17).f_type = 1;
		a_item("main program", 17).f_use_type = 1;
		a_item("main program", 17).f_einkauf = 30;
		a_item("main program", 17).f_verkauf = 15;
		a_item("main program", 17).f_gewicht = 15;
		a_item("main program", 17).f_attri1 = 1;
		a_item("main program", 17).f_attri2 = 3;
		a_item("main program", 17).f_attri3 = 15;
		a_item("main program", 17).f_attri4 = 2;
		a_item("main program", 20).f_name[2] = "Pfeile";
		a_item("main program", 20).f_name[1] = "Arrows";
		a_item("main program", 20).f_name[3] = "Flechas";
		a_item("main program", 20).f_type = 13;
		a_item("main program", 20).f_use_type = 1;
		a_item("main program", 20).f_qualitaet = 2;
		a_item("main program", 20).f_einkauf = 4;
		a_item("main program", 20).f_verkauf = 2;
		a_item("main program", 20).f_gewicht = 1;
		a_item("main program", 20).f_attri1 = 10;
		a_item("main program", 20).f_attri2 = 0;
		a_item("main program", 20).f_attri3 = 1;
		a_item("main program", 20).f_attri4 = 5;
		a_item("main program", 23).f_name[2] = "Umhang";
		a_item("main program", 23).f_name[1] = "Cape";
		a_item("main program", 23).f_name[3] = "Capa";
		a_item("main program", 23).f_type = 9;
		a_item("main program", 23).f_use_type = 1;
		a_item("main program", 23).f_einkauf = 10;
		a_item("main program", 23).f_verkauf = 5;
		a_item("main program", 23).f_gewicht = 5;
		a_item("main program", 23).f_attri1 = 0;
		a_item("main program", 23).f_attri2 = 0;
		a_item("main program", 23).f_attri3 = 1;
		a_item("main program", 24).f_name[2] = "Lederhelm";
		a_item("main program", 24).f_name[1] = "Leather Helmet";
		a_item("main program", 24).f_name[3] = "Casco de Cuero";
		a_item("main program", 24).f_type = 6;
		a_item("main program", 24).f_use_type = 1;
		a_item("main program", 24).f_einkauf = 5;
		a_item("main program", 24).f_verkauf = 2;
		a_item("main program", 24).f_gewicht = 5;
		a_item("main program", 24).f_attri1 = 0;
		a_item("main program", 24).f_attri2 = 0;
		a_item("main program", 24).f_attri3 = 1;
		a_item("main program", 25).f_name[2] = "Knochenhelm";
		a_item("main program", 25).f_name[1] = "Bone Helmet";
		a_item("main program", 25).f_name[3] = "Casco de Huesos";
		a_item("main program", 25).f_type = 6;
		a_item("main program", 25).f_use_type = 1;
		a_item("main program", 25).f_einkauf = 10;
		a_item("main program", 25).f_verkauf = 5;
		a_item("main program", 25).f_gewicht = 10;
		a_item("main program", 25).f_attri1 = 0;
		a_item("main program", 25).f_attri2 = 0;
		a_item("main program", 25).f_attri3 = 2;
		a_item("main program", 26).f_name[2] = "Lederstiefel";
		a_item("main program", 26).f_name[1] = "Leather Boots";
		a_item("main program", 26).f_name[3] = "Botas de Cuero";
		a_item("main program", 26).f_type = 8;
		a_item("main program", 26).f_use_type = 1;
		a_item("main program", 26).f_einkauf = 20;
		a_item("main program", 26).f_verkauf = 10;
		a_item("main program", 26).f_gewicht = 5;
		a_item("main program", 26).f_attri1 = 0;
		a_item("main program", 26).f_attri2 = 0;
		a_item("main program", 26).f_attri3 = 1;
		a_item("main program", 27).f_name[2] = "Lederstiefel";
		a_item("main program", 27).f_name[1] = "Leather Boots";
		a_item("main program", 27).f_name[3] = "Botas de Cuero";
		a_item("main program", 27).f_type = 8;
		a_item("main program", 27).f_use_type = 1;
		a_item("main program", 27).f_einkauf = 40;
		a_item("main program", 27).f_verkauf = 20;
		a_item("main program", 27).f_gewicht = 7;
		a_item("main program", 27).f_attri1 = 0;
		a_item("main program", 27).f_attri2 = 0;
		a_item("main program", 27).f_attri3 = 2;
		a_item("main program", 28).f_name[2] = "Handschuhe";
		a_item("main program", 28).f_name[1] = "Gloves";
		a_item("main program", 28).f_name[3] = "Guantes";
		a_item("main program", 28).f_type = 7;
		a_item("main program", 28).f_use_type = 1;
		a_item("main program", 28).f_einkauf = 5;
		a_item("main program", 28).f_verkauf = 2;
		a_item("main program", 28).f_gewicht = 2;
		a_item("main program", 28).f_attri1 = 0;
		a_item("main program", 28).f_attri2 = 0;
		a_item("main program", 28).f_attri3 = 1;
		a_item("main program", 29).f_name[2] = "Handschuhe";
		a_item("main program", 29).f_name[1] = "Gloves";
		a_item("main program", 29).f_name[3] = "Guantes";
		a_item("main program", 29).f_type = 7;
		a_item("main program", 29).f_use_type = 1;
		a_item("main program", 29).f_einkauf = 7;
		a_item("main program", 29).f_verkauf = 3;
		a_item("main program", 29).f_gewicht = 3;
		a_item("main program", 29).f_attri1 = 0;
		a_item("main program", 29).f_attri2 = 0;
		a_item("main program", 29).f_attri3 = 2;
		a_item("main program", 30).f_name[2] = "Rundschild";
		a_item("main program", 30).f_name[1] = "Round Shield";
		a_item("main program", 30).f_name[3] = "Escudo Redondo";
		a_item("main program", 30).f_type = 11;
		a_item("main program", 30).f_use_type = 1;
		a_item("main program", 30).f_einkauf = 7;
		a_item("main program", 30).f_verkauf = 3;
		a_item("main program", 30).f_gewicht = 10;
		a_item("main program", 30).f_attri1 = 1;
		a_item("main program", 30).f_attri2 = 1;
		a_item("main program", 30).f_attri3 = 2;
		a_item("main program", 31).f_name[2] = "Kiteschild";
		a_item("main program", 31).f_name[1] = "Kite Shield";
		a_item("main program", 31).f_name[3] = "Escudo Cometa";
		a_item("main program", 31).f_type = 11;
		a_item("main program", 31).f_use_type = 1;
		a_item("main program", 31).f_einkauf = 15;
		a_item("main program", 31).f_verkauf = 8;
		a_item("main program", 31).f_gewicht = 20;
		a_item("main program", 31).f_attri1 = 2;
		a_item("main program", 31).f_attri2 = 2;
		a_item("main program", 31).f_attri3 = 3;
		a_item("main program", 32).f_name[2] = "Lederr\374stung";
		a_item("main program", 32).f_name[1] = "Leather Armor";
		a_item("main program", 32).f_name[3] = "Armadura de Cuero";
		a_item("main program", 32).f_type = 9;
		a_item("main program", 32).f_use_type = 1;
		a_item("main program", 32).f_einkauf = 30;
		a_item("main program", 32).f_verkauf = 15;
		a_item("main program", 32).f_gewicht = 20;
		a_item("main program", 32).f_attri1 = 1;
		a_item("main program", 32).f_attri2 = 0;
		a_item("main program", 32).f_attri3 = 2;
		a_item("main program", 33).f_name[2] = "Wattierte Lederr\374stung";
		a_item("main program", 33).f_name[1] = "Enforced Leather Armor";
		a_item("main program", 33).f_name[3] = "Armadura de Cuero Endurecido";
		a_item("main program", 33).f_type = 9;
		a_item("main program", 33).f_use_type = 1;
		a_item("main program", 33).f_einkauf = 40;
		a_item("main program", 33).f_verkauf = 25;
		a_item("main program", 33).f_gewicht = 20;
		a_item("main program", 33).f_attri1 = 2;
		a_item("main program", 33).f_attri2 = 1;
		a_item("main program", 33).f_attri3 = 2;
		a_item("main program", 34).f_name[2] = "Schuppenpanzer";
		a_item("main program", 34).f_name[1] = "Scalemail";
		a_item("main program", 34).f_name[3] = "Cota de Escamas";
		a_item("main program", 34).f_type = 9;
		a_item("main program", 34).f_use_type = 1;
		a_item("main program", 34).f_einkauf = 60;
		a_item("main program", 34).f_verkauf = 30;
		a_item("main program", 34).f_gewicht = 30;
		a_item("main program", 34).f_attri1 = 3;
		a_item("main program", 34).f_attri2 = 1;
		a_item("main program", 34).f_attri3 = 3;
		a_item("main program", 35).f_name[2] = "Kettenhemd";
		a_item("main program", 35).f_name[1] = "Chainmail";
		a_item("main program", 35).f_name[3] = "Cota de Mallas";
		a_item("main program", 35).f_type = 9;
		a_item("main program", 35).f_use_type = 1;
		a_item("main program", 35).f_einkauf = 65;
		a_item("main program", 35).f_verkauf = 35;
		a_item("main program", 35).f_gewicht = 50;
		a_item("main program", 35).f_attri1 = 3;
		a_item("main program", 35).f_attri2 = 2;
		a_item("main program", 35).f_attri3 = 3;
		a_item("main program", 36).f_name[2] = "Plattenpanzer";
		a_item("main program", 36).f_name[1] = "Platemail";
		a_item("main program", 36).f_name[3] = "Cota de Placas";
		a_item("main program", 36).f_type = 9;
		a_item("main program", 36).f_use_type = 1;
		a_item("main program", 36).f_einkauf = 150;
		a_item("main program", 36).f_verkauf = 80;
		a_item("main program", 36).f_gewicht = 125;
		a_item("main program", 36).f_attri1 = 4;
		a_item("main program", 36).f_attri2 = 2;
		a_item("main program", 36).f_attri3 = 4;
		a_item("main program", 37).f_name[2] = "Vollr\374stung";
		a_item("main program", 37).f_name[1] = "Full Armor";
		a_item("main program", 37).f_name[3] = "Armadura Completa";
		a_item("main program", 37).f_type = 9;
		a_item("main program", 37).f_use_type = 1;
		a_item("main program", 37).f_einkauf = 200;
		a_item("main program", 37).f_verkauf = 120;
		a_item("main program", 37).f_gewicht = 160;
		a_item("main program", 37).f_attri1 = 4;
		a_item("main program", 37).f_attri2 = 3;
		a_item("main program", 37).f_attri3 = 4;
		a_item("main program", 156).f_name[2] = "Zauberr\374stung";
		a_item("main program", 156).f_name[1] = "Magical Armor";
		a_item("main program", 156).f_name[3] = "Armadura M\341gica";
		a_item("main program", 156).f_type = 9;
		a_item("main program", 156).f_use_type = 1;
		a_item("main program", 156).f_einkauf = 400;
		a_item("main program", 156).f_verkauf = 0;
		a_item("main program", 156).f_gewicht = 100;
		a_item("main program", 156).f_attri1 = 3;
		a_item("main program", 156).f_attri2 = 3;
		a_item("main program", 156).f_attri3 = 5;
		a_item("main program", 39).f_name[2] = "Lampe";
		a_item("main program", 39).f_name[1] = "Lamp";
		a_item("main program", 39).f_name[3] = "L\341mpara";
		a_item("main program", 39).f_type = 2;
		a_item("main program", 39).f_use_type = 5;
		a_item("main program", 39).f_qualitaet = 2;
		a_item("main program", 39).f_einkauf = 15;
		a_item("main program", 39).f_verkauf = 7;
		a_item("main program", 39).f_gewicht = 10;
		a_item("main program", 39).f_attri1 = 150;
		a_item("main program", 44).f_name[2] = "Brot";
		a_item("main program", 44).f_name[1] = "Bread";
		a_item("main program", 44).f_name[3] = "Pan";
		a_item("main program", 44).f_type = 3;
		a_item("main program", 44).f_use_type = 3;
		a_item("main program", 44).f_einkauf = 10;
		a_item("main program", 44).f_verkauf = 5;
		a_item("main program", 44).f_gewicht = 3;
		a_item("main program", 44).f_attri1 = 120;
		a_item("main program", 42).f_name[2] = "Schinken";
		a_item("main program", 42).f_name[1] = "Ham";
		a_item("main program", 42).f_name[3] = "Jam\363n";
		a_item("main program", 42).f_type = 3;
		a_item("main program", 42).f_use_type = 3;
		a_item("main program", 42).f_einkauf = 20;
		a_item("main program", 42).f_verkauf = 10;
		a_item("main program", 42).f_gewicht = 5;
		a_item("main program", 42).f_attri1 = 150;
		a_item("main program", 50).f_name[2] = "Menschenfleich";
		a_item("main program", 50).f_name[1] = "Human meat";
		a_item("main program", 50).f_name[3] = "Carne de hombre";
		a_item("main program", 50).f_type = 3;
		a_item("main program", 50).f_use_type = 3;
		a_item("main program", 50).f_einkauf = 17;
		a_item("main program", 50).f_verkauf = 6;
		a_item("main program", 50).f_gewicht = 5;
		a_item("main program", 50).f_attri1 = 150;
		a_item("main program", 43).f_name[2] = "H\374hnchen";
		a_item("main program", 43).f_name[1] = "Chicken";
		a_item("main program", 43).f_name[3] = "Pollo";
		a_item("main program", 43).f_type = 3;
		a_item("main program", 43).f_use_type = 3;
		a_item("main program", 43).f_einkauf = 15;
		a_item("main program", 43).f_verkauf = 8;
		a_item("main program", 43).f_gewicht = 3;
		a_item("main program", 43).f_attri1 = 100;
		a_item("main program", 46).f_name[2] = "Fackel";
		a_item("main program", 46).f_name[1] = "Torch";
		a_item("main program", 46).f_name[3] = "Antorcha";
		a_item("main program", 46).f_type = 2;
		a_item("main program", 46).f_use_type = 5;
		a_item("main program", 46).f_qualitaet = 2;
		a_item("main program", 46).f_einkauf = 3;
		a_item("main program", 46).f_verkauf = 1;
		a_item("main program", 46).f_gewicht = 3;
		a_item("main program", 46).f_attri1 = 100;
		a_item("main program", 54).f_name[2] = "Hut des Erzmagiers";
		a_item("main program", 54).f_name[1] = "Hat of the Archmage";
		a_item("main program", 54).f_name[3] = "Sombrero del Archimago";
		a_item("main program", 54).f_info[2] = "+7 Mana";
		a_item("main program", 54).f_info[1] = "+7 Mana";
		a_item("main program", 54).f_info[3] = "+7 Mana";
		a_item("main program", 54).f_type = 6;
		a_item("main program", 54).f_use_type = 1;
		a_item("main program", 54).f_einkauf = 800;
		a_item("main program", 54).f_verkauf = 400;
		a_item("main program", 54).f_gewicht = 5;
		a_item("main program", 56).f_name[2] = "Apfel";
		a_item("main program", 56).f_name[1] = "Apple";
		a_item("main program", 56).f_name[3] = "Manzana";
		a_item("main program", 56).f_type = 3;
		a_item("main program", 56).f_use_type = 3;
		a_item("main program", 56).f_einkauf = 3;
		a_item("main program", 56).f_verkauf = 1;
		a_item("main program", 56).f_gewicht = 1;
		a_item("main program", 56).f_attri1 = 30;
		a_item("main program", 242).f_name[2] = "Magischer Apfel";
		a_item("main program", 242).f_name[1] = "Magic Apple";
		a_item("main program", 242).f_name[3] = "Manzana M\341gica";
		a_item("main program", 242).f_type = 3;
		a_item("main program", 242).f_use_type = 3;
		a_item("main program", 242).f_einkauf = 0;
		a_item("main program", 242).f_verkauf = 0;
		a_item("main program", 242).f_gewicht = 1;
		a_item("main program", 242).f_attri1 = 60;
		a_item("main program", 55).f_name[2] = "Erdbeere";
		a_item("main program", 55).f_name[1] = "Strawberry";
		a_item("main program", 55).f_name[3] = "Fresa";
		a_item("main program", 55).f_type = 3;
		a_item("main program", 55).f_use_type = 3;
		a_item("main program", 55).f_einkauf = 3;
		a_item("main program", 55).f_verkauf = 1;
		a_item("main program", 55).f_gewicht = 1;
		a_item("main program", 55).f_attri1 = 25;
		a_item("main program", 57).f_name[2] = "Bananen";
		a_item("main program", 57).f_name[1] = "Bananas";
		a_item("main program", 57).f_name[3] = "Bananas";
		a_item("main program", 57).f_type = 3;
		a_item("main program", 57).f_use_type = 3;
		a_item("main program", 57).f_einkauf = 3;
		a_item("main program", 57).f_verkauf = 1;
		a_item("main program", 57).f_gewicht = 1;
		a_item("main program", 57).f_attri1 = 40;
		a_item("main program", 58).f_name[2] = "Birne";
		a_item("main program", 58).f_name[1] = "Pear";
		a_item("main program", 58).f_name[3] = "Pera";
		a_item("main program", 58).f_type = 3;
		a_item("main program", 58).f_use_type = 3;
		a_item("main program", 58).f_einkauf = 3;
		a_item("main program", 58).f_verkauf = 1;
		a_item("main program", 58).f_gewicht = 1;
		a_item("main program", 58).f_attri1 = 35;
		a_item("main program", 59).f_name[2] = "Ananas";
		a_item("main program", 59).f_name[1] = "Pineapple";
		a_item("main program", 59).f_name[3] = "Pi\361as";
		a_item("main program", 59).f_type = 3;
		a_item("main program", 59).f_use_type = 3;
		a_item("main program", 59).f_einkauf = 3;
		a_item("main program", 59).f_verkauf = 1;
		a_item("main program", 59).f_gewicht = 1;
		a_item("main program", 59).f_attri1 = 45;
		a_item("main program", 60).f_name[2] = "Tomate";
		a_item("main program", 60).f_name[1] = "Tomato";
		a_item("main program", 60).f_name[3] = "Tomate";
		a_item("main program", 60).f_type = 3;
		a_item("main program", 60).f_use_type = 3;
		a_item("main program", 60).f_einkauf = 3;
		a_item("main program", 60).f_verkauf = 1;
		a_item("main program", 60).f_gewicht = 1;
		a_item("main program", 60).f_attri1 = 15;
		a_item("main program", 61).f_name[2] = "Kirschen";
		a_item("main program", 61).f_name[1] = "Cherries";
		a_item("main program", 61).f_name[3] = "Cerezas";
		a_item("main program", 61).f_type = 3;
		a_item("main program", 61).f_use_type = 3;
		a_item("main program", 61).f_einkauf = 3;
		a_item("main program", 61).f_verkauf = 1;
		a_item("main program", 61).f_gewicht = 1;
		a_item("main program", 61).f_attri1 = 10;
		a_item("main program", 62).f_name[2] = "Zitrone";
		a_item("main program", 62).f_name[1] = "Lemon";
		a_item("main program", 62).f_name[3] = "Lim\363n";
		a_item("main program", 62).f_type = 3;
		a_item("main program", 62).f_use_type = 3;
		a_item("main program", 62).f_einkauf = 3;
		a_item("main program", 62).f_verkauf = 1;
		a_item("main program", 62).f_gewicht = 1;
		a_item("main program", 62).f_attri1 = 20;
		a_item("main program", 63).f_name[2] = "Orange";
		a_item("main program", 63).f_name[1] = "Orange";
		a_item("main program", 63).f_name[3] = "Naranja";
		a_item("main program", 63).f_type = 3;
		a_item("main program", 63).f_use_type = 3;
		a_item("main program", 63).f_einkauf = 3;
		a_item("main program", 63).f_verkauf = 1;
		a_item("main program", 63).f_gewicht = 1;
		a_item("main program", 63).f_attri1 = 33;
		a_item("main program", 64).f_name[2] = "Trauben";
		a_item("main program", 64).f_name[1] = "Grapes";
		a_item("main program", 64).f_name[3] = "Uvas";
		a_item("main program", 64).f_type = 3;
		a_item("main program", 64).f_use_type = 3;
		a_item("main program", 64).f_einkauf = 3;
		a_item("main program", 64).f_verkauf = 1;
		a_item("main program", 64).f_gewicht = 1;
		a_item("main program", 64).f_attri1 = 37;
		a_item("main program", 134).f_name[2] = "\326l";
		a_item("main program", 134).f_name[1] = "Oil";
		a_item("main program", 134).f_name[3] = "Aceite";
		a_item("main program", 134).f_type = 2;
		a_item("main program", 134).f_use_type = 2;
		a_item("main program", 134).f_einkauf = 3;
		a_item("main program", 134).f_verkauf = 1;
		a_item("main program", 134).f_gewicht = 1;
		a_item("main program", 147).f_name[2] = "Magische Pfeile";
		a_item("main program", 147).f_name[1] = "Magic Arrows";
		a_item("main program", 147).f_name[3] = "Flechas M\341gicas";
		a_item("main program", 147).f_type = 13;
		a_item("main program", 147).f_use_type = 1;
		a_item("main program", 147).f_qualitaet = 2;
		a_item("main program", 147).f_einkauf = 2;
		a_item("main program", 147).f_verkauf = 0;
		a_item("main program", 147).f_gewicht = 1;
		a_item("main program", 147).f_magisch = 1;
		a_item("main program", 147).f_attri1 = 10;
		a_item("main program", 147).f_attri2 = 1;
		a_item("main program", 147).f_attri3 = 2;
		a_item("main program", 147).f_attri4 = 10;
		a_item("main program", 163).f_name[2] = "Zauberschwert";
		a_item("main program", 163).f_name[1] = "Magical Sword";
		a_item("main program", 163).f_name[3] = "Espada M\341gica";
		a_item("main program", 163).f_type = 1;
		a_item("main program", 163).f_use_type = 1;
		a_item("main program", 163).f_klasse = 1;
		a_item("main program", 163).f_einkauf = 40;
		a_item("main program", 163).f_verkauf = 0;
		a_item("main program", 163).f_gewicht = 25;
		a_item("main program", 163).f_magisch = 1;
		a_item("main program", 163).f_attri1 = 2;
		a_item("main program", 163).f_attri2 = 5;
		a_item("main program", 163).f_attri3 = 10;
		a_item("main program", 163).f_attri4 = 1;
		a_item("main program", 186).f_name[2] = "Zauberbuch";
		a_item("main program", 186).f_name[1] = "Grimoire";
		a_item("main program", 186).f_name[3] = "Grimorio";
		a_item("main program", 186).f_type = 14;
		a_item("main program", 186).f_use_type = 2;
		a_item("main program", 186).f_einkauf = 1600;
		a_item("main program", 186).f_verkauf = 800;
		a_item("main program", 186).f_gewicht = 2;
		a_item("main program", 186).f_unique = 1;
		a_item("main program", 193).f_name[2] = "Wasserschlauch";
		a_item("main program", 193).f_name[1] = "Waterskin";
		a_item("main program", 193).f_name[3] = "Piel para Agua";
		a_item("main program", 193).f_type = 15;
		a_item("main program", 193).f_use_type = 4;
		a_item("main program", 193).f_qualitaet = 2;
		a_item("main program", 193).f_einkauf = 10;
		a_item("main program", 193).f_verkauf = 3;
		a_item("main program", 193).f_gewicht = 5;
		a_item("main program", 193).f_attri1 = 7;
		a_item("main program", 167).f_name[2] = "Blut";
		a_item("main program", 167).f_name[1] = "Blood";
		a_item("main program", 167).f_name[3] = "Sangre";
		a_item("main program", 167).f_type = 15;
		a_item("main program", 167).f_use_type = 4;
		a_item("main program", 167).f_einkauf = 8;
		a_item("main program", 167).f_verkauf = 2;
		a_item("main program", 167).f_gewicht = 2;
		a_item("main program", 167).f_attri1 = 80;
		a_item("main program", 240).f_name[2] = "Udjat Auge";
		a_item("main program", 240).f_name[1] = "Udjat Eye";
		a_item("main program", 240).f_name[3] = "Ojo de Udjat";
		a_item("main program", 240).f_info[2] = "Bonus XP";
		a_item("main program", 240).f_info[1] = "XP Bonus";
		a_item("main program", 240).f_info[3] = "avance";
		a_item("main program", 240).f_type = 15;
		a_item("main program", 240).f_use_type = 0;
		a_item("main program", 240).f_qualitaet = 2;
		a_item("main program", 240).f_einkauf = 12000;
		a_item("main program", 240).f_verkauf = 1000;
		a_item("main program", 240).f_gewicht = 2;
		a_item("main program", 240).f_unique = 1;
		a_item("main program", 240).f_attri1 = 3;
		a_item("main program", 254).f_name[2] = "Zauberschild";
		a_item("main program", 254).f_name[1] = "Magical Shield";
		a_item("main program", 254).f_name[3] = "Escudo Magico";
		a_item("main program", 254).f_type = 11;
		a_item("main program", 254).f_use_type = 1;
		a_item("main program", 254).f_einkauf = 15;
		a_item("main program", 254).f_verkauf = 0;
		a_item("main program", 254).f_gewicht = 20;
		a_item("main program", 254).f_attri1 = 1;
		a_item("main program", 254).f_attri2 = 2;
		a_item("main program", 254).f_attri3 = 3;
		a_item("main program", 254).f_attri4 = 2;
		a_item("main program", 239).f_name[2] = "Handschuhe des Gargantua";
		a_item("main program", 239).f_name[1] = "Gloves of Gargantua";
		a_item("main program", 239).f_name[3] = "Guantes de Gargantua";
		a_item("main program", 239).f_info[1] = "+2 Strength";
		a_item("main program", 239).f_info[2] = "+2 St\344rke";
		a_item("main program", 239).f_info[3] = "+2 Fuerza";
		a_item("main program", 239).f_type = 7;
		a_item("main program", 239).f_use_type = 1;
		a_item("main program", 239).f_einkauf = 600;
		a_item("main program", 239).f_verkauf = 300;
		a_item("main program", 239).f_gewicht = 2;
		a_item("main program", 248).f_name[2] = "Kessel der Alchimie";
		a_item("main program", 248).f_name[1] = "Mortar of Alchemy";
		a_item("main program", 248).f_name[3] = "Mortero de Alquimista";
		a_item("main program", 248).f_type = 15;
		a_item("main program", 248).f_use_type = 2;
		a_item("main program", 248).f_einkauf = 1600;
		a_item("main program", 248).f_verkauf = 800;
		a_item("main program", 248).f_gewicht = 50;
		a_item("main program", 248).f_unique = 1;
		a_item("main program", 200).f_name[2] = "Schuhe des Hermes";
		a_item("main program", 200).f_name[1] = "Shoes of Hermes";
		a_item("main program", 200).f_name[3] = "Zapatos de Hermes";
		a_item("main program", 200).f_info[2] = "+3 Zugweite";
		a_item("main program", 200).f_info[1] = "+3 Speed";
		a_item("main program", 200).f_info[3] = "+3 Velocidad";
		a_item("main program", 200).f_type = 8;
		a_item("main program", 200).f_use_type = 1;
		a_item("main program", 200).f_einkauf = 500;
		a_item("main program", 200).f_verkauf = 250;
		a_item("main program", 200).f_gewicht = 5;
		a_item("main program", 142).f_name[2] = "Flammenschwert";
		a_item("main program", 142).f_name[1] = "Flaming Sword";
		a_item("main program", 142).f_name[3] = "Espada Flam\355gera";
		a_item("main program", 142).f_type = 1;
		a_item("main program", 142).f_use_type = 1;
		a_item("main program", 142).f_klasse = 1;
		a_item("main program", 142).f_einkauf = 600;
		a_item("main program", 142).f_verkauf = 350;
		a_item("main program", 142).f_gewicht = 25;
		a_item("main program", 142).f_magisch = 1;
		a_item("main program", 142).f_attri1 = 2;
		a_item("main program", 142).f_attri2 = 4;
		a_item("main program", 142).f_attri3 = 7;
		a_item("main program", 142).f_attri4 = 1;
		a_item("main program", 143).f_name[2] = "Eisschwert";
		a_item("main program", 143).f_name[1] = "Ice Sword";
		a_item("main program", 143).f_name[3] = "Espada de Hielo";
		a_item("main program", 143).f_type = 1;
		a_item("main program", 143).f_use_type = 1;
		a_item("main program", 143).f_klasse = 1;
		a_item("main program", 143).f_einkauf = 600;
		a_item("main program", 143).f_verkauf = 350;
		a_item("main program", 143).f_gewicht = 25;
		a_item("main program", 143).f_magisch = 1;
		a_item("main program", 143).f_attri1 = 2;
		a_item("main program", 143).f_attri2 = 4;
		a_item("main program", 143).f_attri3 = 7;
		a_item("main program", 143).f_attri4 = 1;
		a_item("main program", 144).f_name[2] = "Giftschwert";
		a_item("main program", 144).f_name[1] = "Poison Sword";
		a_item("main program", 144).f_name[3] = "Espada Envenenada";
		a_item("main program", 144).f_type = 1;
		a_item("main program", 144).f_use_type = 1;
		a_item("main program", 144).f_klasse = 1;
		a_item("main program", 144).f_einkauf = 600;
		a_item("main program", 144).f_verkauf = 300;
		a_item("main program", 144).f_gewicht = 25;
		a_item("main program", 144).f_magisch = 1;
		a_item("main program", 144).f_attri1 = 2;
		a_item("main program", 144).f_attri2 = 4;
		a_item("main program", 144).f_attri3 = 7;
		a_item("main program", 144).f_attri4 = 1;
		a_item("main program", 177).f_name[2] = "Stab der Portale";
		a_item("main program", 177).f_name[1] = "Staff of Portals";
		a_item("main program", 177).f_name[3] = "Vara de los Portales";
		a_item("main program", 177).f_type = 22;
		a_item("main program", 177).f_use_type = 2;
		a_item("main program", 177).f_qualitaet = 1;
		a_item("main program", 177).f_einkauf = 800;
		a_item("main program", 177).f_verkauf = 400;
		a_item("main program", 177).f_gewicht = 3;
		a_item("main program", 177).f_attri1 = 21;
		a_item("main program", 178).f_name[2] = "Stab des Schutzes";
		a_item("main program", 178).f_name[1] = "Staff of Protection";
		a_item("main program", 178).f_name[3] = "Vara de Protecci\363n";
		a_item("main program", 178).f_type = 22;
		a_item("main program", 178).f_use_type = 2;
		a_item("main program", 178).f_qualitaet = 1;
		a_item("main program", 178).f_einkauf = 600;
		a_item("main program", 178).f_verkauf = 300;
		a_item("main program", 178).f_gewicht = 3;
		a_item("main program", 178).f_attri1 = 18;
		a_item("main program", 179).f_name[2] = "Stab des Todes";
		a_item("main program", 179).f_name[1] = "Staff of Death";
		a_item("main program", 179).f_name[3] = "Vara de la Muerte";
		a_item("main program", 179).f_type = 22;
		a_item("main program", 179).f_use_type = 2;
		a_item("main program", 179).f_qualitaet = 1;
		a_item("main program", 179).f_einkauf = 600;
		a_item("main program", 179).f_verkauf = 300;
		a_item("main program", 179).f_gewicht = 3;
		a_item("main program", 179).f_attri1 = 67;
		a_item("main program", 180).f_name[2] = "Stab des Lichtes";
		a_item("main program", 180).f_name[1] = "Staff of Light";
		a_item("main program", 180).f_name[3] = "Vara de la Llama";
		a_item("main program", 180).f_type = 22;
		a_item("main program", 180).f_use_type = 2;
		a_item("main program", 180).f_qualitaet = 1;
		a_item("main program", 180).f_einkauf = 700;
		a_item("main program", 180).f_verkauf = 400;
		a_item("main program", 180).f_gewicht = 3;
		a_item("main program", 180).f_attri1 = 30;
		a_item("main program", 181).f_name[2] = "Stab der Heilung";
		a_item("main program", 181).f_name[1] = "Staff of Healing";
		a_item("main program", 181).f_name[3] = "Vara de la Curaci\363n";
		a_item("main program", 181).f_type = 22;
		a_item("main program", 181).f_use_type = 2;
		a_item("main program", 181).f_qualitaet = 1;
		a_item("main program", 181).f_einkauf = 800;
		a_item("main program", 181).f_verkauf = 400;
		a_item("main program", 181).f_gewicht = 3;
		a_item("main program", 181).f_attri1 = 3;
		a_item("main program", 182).f_name[2] = "Stab des Midas";
		a_item("main program", 182).f_name[1] = "Staff of Midas";
		a_item("main program", 182).f_name[3] = "Vara de Midas";
		a_item("main program", 182).f_type = 22;
		a_item("main program", 182).f_use_type = 2;
		a_item("main program", 182).f_qualitaet = 1;
		a_item("main program", 182).f_einkauf = 2000;
		a_item("main program", 182).f_verkauf = 1000;
		a_item("main program", 182).f_gewicht = 3;
		a_item("main program", 182).f_attri1 = 42;
		a_item("main program", 183).f_name[2] = "Stab des \326ffnens";
		a_item("main program", 183).f_name[1] = "Staff of Opening";
		a_item("main program", 183).f_name[3] = "Vara de la Abertura";
		a_item("main program", 183).f_type = 22;
		a_item("main program", 183).f_use_type = 2;
		a_item("main program", 183).f_qualitaet = 1;
		a_item("main program", 183).f_einkauf = 800;
		a_item("main program", 183).f_verkauf = 400;
		a_item("main program", 183).f_gewicht = 3;
		a_item("main program", 183).f_attri1 = 27;
		a_item("main program", 184).f_name[2] = "Stab des Feuers";
		a_item("main program", 184).f_name[1] = "Staff of Fire";
		a_item("main program", 184).f_name[3] = "Vara del Fuego";
		a_item("main program", 184).f_type = 22;
		a_item("main program", 184).f_use_type = 2;
		a_item("main program", 184).f_qualitaet = 1;
		a_item("main program", 184).f_einkauf = 500;
		a_item("main program", 184).f_verkauf = 250;
		a_item("main program", 184).f_gewicht = 3;
		a_item("main program", 184).f_attri1 = 22;
		a_item("main program", 152).f_name[2] = "Stab der K\344lte";
		a_item("main program", 152).f_name[1] = "Staff of Coldness";
		a_item("main program", 152).f_name[3] = "Vara del Fr\355o";
		a_item("main program", 152).f_type = 22;
		a_item("main program", 152).f_use_type = 2;
		a_item("main program", 152).f_qualitaet = 1;
		a_item("main program", 152).f_einkauf = 300;
		a_item("main program", 152).f_verkauf = 150;
		a_item("main program", 152).f_gewicht = 3;
		a_item("main program", 152).f_attri1 = 28;
		a_item("main program", 295).f_name[2] = "Stab der Winde";
		a_item("main program", 295).f_name[1] = "Staff of Winds";
		a_item("main program", 295).f_name[3] = "Vara del Viento";
		a_item("main program", 295).f_type = 22;
		a_item("main program", 295).f_use_type = 2;
		a_item("main program", 295).f_qualitaet = 1;
		a_item("main program", 295).f_einkauf = 450;
		a_item("main program", 295).f_verkauf = 225;
		a_item("main program", 295).f_gewicht = 3;
		a_item("main program", 295).f_attri1 = 108;
		a_item("main program", 296).f_name[2] = "Stab der Meteore";
		a_item("main program", 296).f_name[1] = "Staff of Meteors";
		a_item("main program", 296).f_name[3] = "Vara de los Meteoros";
		a_item("main program", 296).f_type = 22;
		a_item("main program", 296).f_use_type = 2;
		a_item("main program", 296).f_qualitaet = 1;
		a_item("main program", 296).f_einkauf = 500;
		a_item("main program", 296).f_verkauf = 250;
		a_item("main program", 296).f_gewicht = 3;
		a_item("main program", 296).f_attri1 = 117;
		a_item("main program", 297).f_name[2] = "Stab der Trockenheit";
		a_item("main program", 297).f_name[1] = "Staff of Dryness";
		a_item("main program", 297).f_name[3] = "Vara de la Aridez";
		a_item("main program", 297).f_type = 22;
		a_item("main program", 297).f_use_type = 2;
		a_item("main program", 297).f_qualitaet = 1;
		a_item("main program", 297).f_einkauf = 400;
		a_item("main program", 297).f_verkauf = 200;
		a_item("main program", 297).f_gewicht = 3;
		a_item("main program", 297).f_attri1 = 29;
		a_item("main program", 298).f_name[2] = "Stab des Wassers";
		a_item("main program", 298).f_name[1] = "Staff of Water";
		a_item("main program", 298).f_name[3] = "Vara del Agua";
		a_item("main program", 298).f_type = 22;
		a_item("main program", 298).f_use_type = 2;
		a_item("main program", 298).f_qualitaet = 1;
		a_item("main program", 298).f_einkauf = 500;
		a_item("main program", 298).f_verkauf = 250;
		a_item("main program", 298).f_gewicht = 3;
		a_item("main program", 298).f_attri1 = 73;
		a_item("main program", 299).f_name[2] = "Stab des Feuers";
		a_item("main program", 299).f_name[1] = "Staff of Fire";
		a_item("main program", 299).f_name[3] = "Vara del Fuego";
		a_item("main program", 299).f_type = 22;
		a_item("main program", 299).f_use_type = 2;
		a_item("main program", 299).f_qualitaet = 1;
		a_item("main program", 299).f_einkauf = 500;
		a_item("main program", 299).f_verkauf = 250;
		a_item("main program", 299).f_gewicht = 3;
		a_item("main program", 299).f_attri1 = 22;
		a_item("main program", 300).f_name[2] = "Stab des Sternenfeuers";
		a_item("main program", 300).f_name[1] = "Staff of Starfire";
		a_item("main program", 300).f_name[3] = "Vara de las Estrellas";
		a_item("main program", 300).f_type = 22;
		a_item("main program", 300).f_use_type = 2;
		a_item("main program", 300).f_qualitaet = 1;
		a_item("main program", 300).f_einkauf = 500;
		a_item("main program", 300).f_verkauf = 250;
		a_item("main program", 300).f_gewicht = 3;
		a_item("main program", 300).f_attri1 = 76;
		a_item("main program", 301).f_name[2] = "Stab der Untoten";
		a_item("main program", 301).f_name[1] = "Staff of the Undead";
		a_item("main program", 301).f_name[3] = "Vara de los No-Muertos";
		a_item("main program", 301).f_type = 22;
		a_item("main program", 301).f_use_type = 2;
		a_item("main program", 301).f_qualitaet = 1;
		a_item("main program", 301).f_einkauf = 400;
		a_item("main program", 301).f_verkauf = 200;
		a_item("main program", 301).f_gewicht = 3;
		a_item("main program", 301).f_attri1 = 17;
		a_item("main program", 267).f_name[2] = "Haupt der Medusa";
		a_item("main program", 267).f_name[1] = "Head of Medusa";
		a_item("main program", 267).f_name[3] = "Cabeza de Medusa";
		a_item("main program", 267).f_type = 15;
		a_item("main program", 267).f_use_type = 2;
		a_item("main program", 267).f_einkauf = 800;
		a_item("main program", 267).f_verkauf = 400;
		a_item("main program", 267).f_gewicht = 10;
		a_item("main program", 267).f_attri1 = 62;
		a_item("main program", 267).f_attri2 = 10;
		a_item("main program", 169).f_name[2] = "Karte";
		a_item("main program", 169).f_name[1] = "Map";
		a_item("main program", 169).f_name[3] = "Mapa";
		a_item("main program", 169).f_type = 15;
		a_item("main program", 169).f_use_type = 2;
		a_item("main program", 169).f_einkauf = 900;
		a_item("main program", 169).f_verkauf = 450;
		a_item("main program", 169).f_gewicht = 1;
		a_item("main program", 169).f_unique = 1;
		a_item("main program", 197).f_name[2] = "Edelstein T\374rkies";
		a_item("main program", 197).f_name[1] = "Turquoise Gem";
		a_item("main program", 197).f_name[3] = "Piedra Preciosa Turquesa";
		a_item("main program", 197).f_type = 16;
		a_item("main program", 197).f_use_type = 0;
		a_item("main program", 197).f_einkauf = 450;
		a_item("main program", 197).f_verkauf = 225;
		a_item("main program", 197).f_gewicht = 1;
		a_item("main program", 198).f_name[2] = "Edelstein Gelb";
		a_item("main program", 198).f_name[1] = "Yellow Gem";
		a_item("main program", 198).f_name[3] = "Piedra Preciosa Amarilla";
		a_item("main program", 198).f_type = 16;
		a_item("main program", 198).f_use_type = 0;
		a_item("main program", 198).f_einkauf = 350;
		a_item("main program", 198).f_verkauf = 175;
		a_item("main program", 198).f_gewicht = 1;
		a_item("main program", 199).f_name[2] = "Edelstein Blau";
		a_item("main program", 199).f_name[1] = "Blue Gem";
		a_item("main program", 199).f_name[3] = "Piedra Preciosa Azul";
		a_item("main program", 199).f_type = 16;
		a_item("main program", 199).f_use_type = 0;
		a_item("main program", 199).f_einkauf = 500;
		a_item("main program", 199).f_verkauf = 250;
		a_item("main program", 199).f_gewicht = 1;
		a_item("main program", 209).f_name[2] = "Edelstein Rot";
		a_item("main program", 209).f_name[1] = "Red Gem";
		a_item("main program", 209).f_name[3] = "Piedra Preciosa Roja";
		a_item("main program", 209).f_type = 16;
		a_item("main program", 209).f_use_type = 0;
		a_item("main program", 209).f_einkauf = 600;
		a_item("main program", 209).f_verkauf = 300;
		a_item("main program", 209).f_gewicht = 1;
		a_item("main program", 210).f_name[2] = "Bernstein";
		a_item("main program", 210).f_name[1] = "Amberstone";
		a_item("main program", 210).f_name[3] = "Ambar";
		a_item("main program", 210).f_type = 16;
		a_item("main program", 210).f_use_type = 0;
		a_item("main program", 210).f_einkauf = 400;
		a_item("main program", 210).f_verkauf = 200;
		a_item("main program", 210).f_gewicht = 1;
		a_item("main program", 211).f_name[2] = "Edelstein Gr\374n";
		a_item("main program", 211).f_name[1] = "Green Gem";
		a_item("main program", 211).f_name[3] = "Piedra Preciosa Verde";
		a_item("main program", 211).f_type = 16;
		a_item("main program", 211).f_use_type = 0;
		a_item("main program", 211).f_einkauf = 550;
		a_item("main program", 211).f_verkauf = 275;
		a_item("main program", 211).f_gewicht = 1;
		a_item("main program", 213).f_name[2] = "Edelstein Weiss";
		a_item("main program", 213).f_name[1] = "White Gem";
		a_item("main program", 213).f_name[3] = "Piedra Preciosa Blanca";
		a_item("main program", 213).f_type = 16;
		a_item("main program", 213).f_use_type = 0;
		a_item("main program", 213).f_einkauf = 500;
		a_item("main program", 213).f_verkauf = 250;
		a_item("main program", 213).f_gewicht = 1;
		a_item("main program", 214).f_name[2] = "Edelstein Schwarz";
		a_item("main program", 214).f_name[1] = "Black Gem";
		a_item("main program", 214).f_name[3] = "Piedra Preciosa Negra";
		a_item("main program", 214).f_type = 16;
		a_item("main program", 214).f_use_type = 0;
		a_item("main program", 214).f_einkauf = 370;
		a_item("main program", 214).f_verkauf = 175;
		a_item("main program", 214).f_gewicht = 1;
		a_item("main program", 215).f_name[2] = "Jade";
		a_item("main program", 215).f_name[1] = "Jade";
		a_item("main program", 215).f_name[3] = "Jade";
		a_item("main program", 215).f_type = 16;
		a_item("main program", 215).f_use_type = 0;
		a_item("main program", 215).f_einkauf = 370;
		a_item("main program", 215).f_verkauf = 175;
		a_item("main program", 215).f_gewicht = 1;
		a_item("main program", 216).f_name[2] = "Mondstein";
		a_item("main program", 216).f_name[1] = "Moonstone";
		a_item("main program", 216).f_name[3] = "Piedra de la Luna";
		a_item("main program", 216).f_type = 16;
		a_item("main program", 216).f_use_type = 0;
		a_item("main program", 216).f_einkauf = 400;
		a_item("main program", 216).f_verkauf = 200;
		a_item("main program", 216).f_gewicht = 1;
		a_item("main program", 217).f_name[2] = "Opal";
		a_item("main program", 217).f_name[1] = "Opal";
		a_item("main program", 217).f_name[3] = "Opalo";
		a_item("main program", 217).f_type = 16;
		a_item("main program", 217).f_use_type = 0;
		a_item("main program", 217).f_einkauf = 300;
		a_item("main program", 217).f_verkauf = 150;
		a_item("main program", 217).f_gewicht = 1;
		a_item("main program", 218).f_name[2] = "Tigerauge";
		a_item("main program", 218).f_name[1] = "Tigereye";
		a_item("main program", 218).f_name[3] = "Ojo de Tigre";
		a_item("main program", 218).f_type = 16;
		a_item("main program", 218).f_use_type = 0;
		a_item("main program", 218).f_einkauf = 350;
		a_item("main program", 218).f_verkauf = 175;
		a_item("main program", 218).f_gewicht = 1;
		a_item("main program", 212).f_name[2] = "Dietriche";
		a_item("main program", 212).f_name[1] = "Lockpicks";
		a_item("main program", 212).f_name[3] = "Ganz\372as";
		a_item("main program", 212).f_info[2] = "\326ffnet T\374ren und Truhen";
		a_item("main program", 212).f_info[1] = "Opens doors and chests";
		a_item("main program", 212).f_info[3] = "Abre puertas y cajas";
		a_item("main program", 212).f_type = 0;
		a_item("main program", 212).f_use_type = 2;
		a_item("main program", 212).f_einkauf = 100;
		a_item("main program", 212).f_verkauf = 50;
		a_item("main program", 212).f_gewicht = 2;
		a_item("main program", 212).f_attri1 = 20;
		a_item("main program", 220).f_name[2] = "Ring der Zwerge";
		a_item("main program", 220).f_name[1] = "Ring of the Dwarfs";
		a_item("main program", 220).f_name[3] = "Anillo de los Enanos";
		a_item("main program", 220).f_info[2] = "Findet Fallen (+20 %)";
		a_item("main program", 220).f_info[1] = "Finds traps (+20 %)";
		a_item("main program", 220).f_info[3] = "Desvela trampas (+20 %)";
		a_item("main program", 220).f_type = 18;
		a_item("main program", 220).f_use_type = 1;
		a_item("main program", 220).f_einkauf = 700;
		a_item("main program", 220).f_verkauf = 350;
		a_item("main program", 220).f_gewicht = 1;
		a_item("main program", 221).f_name[2] = "Ring des Lebens";
		a_item("main program", 221).f_name[1] = "Ring of Life";
		a_item("main program", 221).f_name[3] = "Anillo de Vida";
		a_item("main program", 221).f_info[2] = "Regeneriert Leben";
		a_item("main program", 221).f_info[1] = "Regenerates life";
		a_item("main program", 221).f_info[3] = "Regenera vida";
		a_item("main program", 221).f_type = 18;
		a_item("main program", 221).f_use_type = 1;
		a_item("main program", 221).f_qualitaet = 2;
		a_item("main program", 221).f_einkauf = 1800;
		a_item("main program", 221).f_verkauf = 900;
		a_item("main program", 221).f_gewicht = 1;
		a_item("main program", 221).f_attri1 = 350;
		a_item("main program", 146).f_name[2] = "Steinernes Herz";
		a_item("main program", 146).f_name[1] = "Heartstone";
		a_item("main program", 146).f_name[3] = "Coraz\363n de Piedra";
		a_item("main program", 146).f_info[2] = "Verhindert Tod";
		a_item("main program", 146).f_info[1] = "Saves from death";
		a_item("main program", 146).f_info[3] = "Protege de la muerte";
		a_item("main program", 146).f_type = 15;
		a_item("main program", 146).f_use_type = 0;
		a_item("main program", 146).f_einkauf = 1000;
		a_item("main program", 146).f_verkauf = 500;
		a_item("main program", 146).f_gewicht = 5;
		a_item("main program", 146).f_unique = 1;
		a_item("main program", 260).f_name[2] = "Hut des Meistersch\374tzen";
		a_item("main program", 260).f_name[1] = "Cap of the Master Archer";
		a_item("main program", 260).f_name[3] = "Sombrero del Maestro del Arco";
		a_item("main program", 260).f_info[2] = "+10 Trefferchance mit Bogen";
		a_item("main program", 260).f_info[1] = "+10 to hit with bow";
		a_item("main program", 260).f_info[3] = "+10 para impactar con arcos";
		a_item("main program", 260).f_type = 6;
		a_item("main program", 260).f_use_type = 1;
		a_item("main program", 260).f_einkauf = 400;
		a_item("main program", 260).f_verkauf = 200;
		a_item("main program", 260).f_gewicht = 5;
		a_item("main program", 260).f_attri3 = 10;
		a_item("main program", 232).f_name[2] = "Seil";
		a_item("main program", 232).f_name[1] = "Rope";
		a_item("main program", 232).f_name[3] = "Cuerda";
		a_item("main program", 232).f_type = 15;
		a_item("main program", 232).f_use_type = 2;
		a_item("main program", 232).f_einkauf = 20;
		a_item("main program", 232).f_verkauf = 10;
		a_item("main program", 232).f_gewicht = 5;
		a_item("main program", 190).f_name[2] = "Oger-Pfeile";
		a_item("main program", 190).f_name[1] = "Ogre Arrows";
		a_item("main program", 190).f_name[3] = "Flechas del Ogro";
		a_item("main program", 190).f_type = 13;
		a_item("main program", 190).f_use_type = 1;
		a_item("main program", 190).f_qualitaet = 2;
		a_item("main program", 190).f_einkauf = 2;
		a_item("main program", 190).f_verkauf = 1;
		a_item("main program", 190).f_gewicht = 1;
		a_item("main program", 190).f_magisch = 1;
		a_item("main program", 190).f_attri1 = 10;
		a_item("main program", 190).f_attri2 = 0;
		a_item("main program", 190).f_attri3 = 5;
		a_item("main program", 190).f_attri4 = 5;
		a_item("main program", 75).f_name[2] = "Wirkungslos";
		a_item("main program", 75).f_name[1] = "Useless";
		a_item("main program", 75).f_name[3] = "Sin Utilidad";
		a_item("main program", 75).f_type = 4;
		a_item("main program", 75).f_attri1 = 0;
		a_item("main program", 75).f_use_type = 4;
		a_item("main program", 75).f_einkauf = 2;
		a_item("main program", 75).f_verkauf = 0;
		a_item("main program", 75).f_gewicht = 2;
		a_item("main program", 76).f_name[2] = "Schwacher Heiltrank";
		a_item("main program", 76).f_name[1] = "Weak Healing Potion";
		a_item("main program", 76).f_name[3] = "Poci\363n de Curaci\363n Pequena";
		a_item("main program", 76).f_type = 4;
		a_item("main program", 76).f_attri1 = 1;
		a_item("main program", 76).f_use_type = 4;
		a_item("main program", 76).f_einkauf = 20;
		a_item("main program", 76).f_verkauf = 10;
		a_item("main program", 76).f_gewicht = 2;
		a_item("main program", 77).f_name[2] = "Starker Heiltrank";
		a_item("main program", 77).f_name[1] = "Strong Healing Potion";
		a_item("main program", 77).f_name[3] = "Poci\363n de Curaci\363n Grande";
		a_item("main program", 77).f_type = 4;
		a_item("main program", 77).f_attri1 = 2;
		a_item("main program", 77).f_use_type = 4;
		a_item("main program", 77).f_einkauf = 50;
		a_item("main program", 77).f_verkauf = 25;
		a_item("main program", 77).f_gewicht = 2;
		a_item("main program", 78).f_name[2] = "Schwaches Gift";
		a_item("main program", 78).f_name[1] = "Weak Poison";
		a_item("main program", 78).f_name[3] = "Veneno D\351bil";
		a_item("main program", 78).f_type = 4;
		a_item("main program", 78).f_attri1 = 3;
		a_item("main program", 78).f_use_type = 4;
		a_item("main program", 78).f_einkauf = 20;
		a_item("main program", 78).f_verkauf = 10;
		a_item("main program", 78).f_gewicht = 2;
		a_item("main program", 79).f_name[2] = "Starkes Gift";
		a_item("main program", 79).f_name[1] = "Strong Poison";
		a_item("main program", 79).f_name[3] = "Veneno Fuerte";
		a_item("main program", 79).f_type = 4;
		a_item("main program", 79).f_attri1 = 4;
		a_item("main program", 79).f_use_type = 4;
		a_item("main program", 79).f_einkauf = 50;
		a_item("main program", 79).f_verkauf = 25;
		a_item("main program", 79).f_gewicht = 2;
		a_item("main program", 80).f_name[2] = "Trank der Helden";
		a_item("main program", 80).f_name[1] = "Potion of Heroes";
		a_item("main program", 80).f_name[3] = "Poci\363n del Heroe";
		a_item("main program", 80).f_type = 4;
		a_item("main program", 80).f_attri1 = 5;
		a_item("main program", 80).f_use_type = 4;
		a_item("main program", 80).f_einkauf = 200;
		a_item("main program", 80).f_verkauf = 100;
		a_item("main program", 80).f_gewicht = 2;
		a_item("main program", 81).f_name[2] = "Trank der G\366tter";
		a_item("main program", 81).f_name[1] = "Potion of the Gods";
		a_item("main program", 81).f_name[3] = "Poci\363n de los Dioses";
		a_item("main program", 81).f_type = 4;
		a_item("main program", 81).f_attri1 = 6;
		a_item("main program", 81).f_use_type = 4;
		a_item("main program", 81).f_einkauf = 700;
		a_item("main program", 81).f_verkauf = 350;
		a_item("main program", 81).f_gewicht = 2;
		a_item("main program", 82).f_name[2] = "St\344rketrank";
		a_item("main program", 82).f_name[1] = "Potion of Strength";
		a_item("main program", 82).f_name[3] = "Poci\363n de la Fuerza";
		a_item("main program", 82).f_type = 4;
		a_item("main program", 82).f_attri1 = 7;
		a_item("main program", 82).f_use_type = 4;
		a_item("main program", 82).f_einkauf = 50;
		a_item("main program", 82).f_verkauf = 25;
		a_item("main program", 82).f_gewicht = 2;
		a_item("main program", 83).f_name[2] = "Schw\344chetrank";
		a_item("main program", 83).f_name[1] = "Potion of Weakness";
		a_item("main program", 83).f_name[3] = "Poci\363n de la Debilidad";
		a_item("main program", 83).f_type = 4;
		a_item("main program", 83).f_attri1 = 8;
		a_item("main program", 83).f_use_type = 4;
		a_item("main program", 83).f_einkauf = 40;
		a_item("main program", 83).f_verkauf = 20;
		a_item("main program", 83).f_gewicht = 2;
		a_item("main program", 84).f_name[2] = "Paralysetrank";
		a_item("main program", 84).f_name[1] = "Potion of Paralysis";
		a_item("main program", 84).f_name[3] = "Poci\363n de la Paralisis";
		a_item("main program", 84).f_type = 4;
		a_item("main program", 84).f_attri1 = 9;
		a_item("main program", 84).f_use_type = 4;
		a_item("main program", 84).f_einkauf = 40;
		a_item("main program", 84).f_verkauf = 20;
		a_item("main program", 84).f_gewicht = 2;
		a_item("main program", 85).f_name[2] = "Trank des Fliegens";
		a_item("main program", 85).f_name[1] = "Flying Potion";
		a_item("main program", 85).f_name[3] = "Poci\363n para Volar";
		a_item("main program", 85).f_type = 4;
		a_item("main program", 85).f_attri1 = 10;
		a_item("main program", 85).f_use_type = 4;
		a_item("main program", 85).f_einkauf = 50;
		a_item("main program", 85).f_verkauf = 25;
		a_item("main program", 85).f_gewicht = 2;
		a_item("main program", 86).f_name[2] = "Trank des Schutzes";
		a_item("main program", 86).f_name[1] = "Potion of Protection";
		a_item("main program", 86).f_name[3] = "Poci\363n de Protecci\363n";
		a_item("main program", 86).f_type = 4;
		a_item("main program", 86).f_attri1 = 11;
		a_item("main program", 86).f_use_type = 4;
		a_item("main program", 86).f_einkauf = 50;
		a_item("main program", 86).f_verkauf = 25;
		a_item("main program", 86).f_gewicht = 2;
		a_item("main program", 87).f_name[2] = "Schwacher Manatrank";
		a_item("main program", 87).f_name[1] = "Weak Mana Potion";
		a_item("main program", 87).f_name[3] = "Poci\363n de Mana Pequena";
		a_item("main program", 87).f_type = 4;
		a_item("main program", 87).f_attri1 = 12;
		a_item("main program", 87).f_use_type = 4;
		a_item("main program", 87).f_einkauf = 50;
		a_item("main program", 87).f_verkauf = 25;
		a_item("main program", 87).f_gewicht = 2;
		a_item("main program", 88).f_name[2] = "Starker Manatrank";
		a_item("main program", 88).f_name[1] = "Strong Mana Potion";
		a_item("main program", 88).f_name[3] = "Poci\363n de Mana Grande";
		a_item("main program", 88).f_type = 4;
		a_item("main program", 88).f_attri1 = 13;
		a_item("main program", 88).f_use_type = 4;
		a_item("main program", 88).f_einkauf = 100;
		a_item("main program", 88).f_verkauf = 50;
		a_item("main program", 88).f_gewicht = 2;
		a_item("main program", 89).f_name[2] = "Gegengift";
		a_item("main program", 89).f_name[1] = "Antidote";
		a_item("main program", 89).f_name[3] = "Ant\355doto";
		a_item("main program", 89).f_type = 4;
		a_item("main program", 89).f_attri1 = 14;
		a_item("main program", 89).f_use_type = 4;
		a_item("main program", 89).f_einkauf = 50;
		a_item("main program", 89).f_verkauf = 25;
		a_item("main program", 89).f_gewicht = 2;
		a_item("main program", 90).f_name[2] = "K\344lteschutz";
		a_item("main program", 90).f_name[1] = "Cold Protection";
		a_item("main program", 90).f_name[3] = "Proteci\363n Contra Fr\355o";
		a_item("main program", 90).f_type = 4;
		a_item("main program", 90).f_attri1 = 15;
		a_item("main program", 90).f_use_type = 4;
		a_item("main program", 90).f_einkauf = 40;
		a_item("main program", 90).f_verkauf = 20;
		a_item("main program", 90).f_gewicht = 2;
		a_item("main program", 91).f_name[2] = "Hitzeschutz";
		a_item("main program", 91).f_name[1] = "Heat Protection";
		a_item("main program", 91).f_name[3] = "Proteci\363n Contra Calor";
		a_item("main program", 91).f_type = 4;
		a_item("main program", 91).f_attri1 = 16;
		a_item("main program", 91).f_use_type = 4;
		a_item("main program", 91).f_einkauf = 40;
		a_item("main program", 91).f_verkauf = 20;
		a_item("main program", 91).f_gewicht = 2;
		a_item("main program", 92).f_name[2] = "Magieleere";
		a_item("main program", 92).f_name[1] = "Mana Void";
		a_item("main program", 92).f_name[3] = "Perder Mana";
		a_item("main program", 92).f_type = 4;
		a_item("main program", 92).f_attri1 = 17;
		a_item("main program", 92).f_use_type = 4;
		a_item("main program", 92).f_einkauf = 20;
		a_item("main program", 92).f_verkauf = 10;
		a_item("main program", 92).f_gewicht = 2;
		a_item("main program", 93).f_name[2] = "Unsichtbarkeit";
		a_item("main program", 93).f_name[1] = "Invisibility";
		a_item("main program", 93).f_name[3] = "Invisibilidad";
		a_item("main program", 93).f_type = 4;
		a_item("main program", 93).f_attri1 = 18;
		a_item("main program", 93).f_use_type = 4;
		a_item("main program", 93).f_einkauf = 40;
		a_item("main program", 93).f_verkauf = 20;
		a_item("main program", 93).f_gewicht = 2;
		a_item("main program", 94).f_name[2] = "Macht";
		a_item("main program", 94).f_name[1] = "Might";
		a_item("main program", 94).f_name[3] = "Poder";
		a_item("main program", 94).f_type = 4;
		a_item("main program", 94).f_attri1 = 19;
		a_item("main program", 94).f_use_type = 4;
		a_item("main program", 94).f_einkauf = 50;
		a_item("main program", 94).f_verkauf = 25;
		a_item("main program", 94).f_gewicht = 2;
		a_item("main program", 95).f_name[2] = "Fallen sp\374ren";
		a_item("main program", 95).f_name[1] = "Sense Traps";
		a_item("main program", 95).f_name[3] = "Sentir Trampas";
		a_item("main program", 95).f_type = 4;
		a_item("main program", 95).f_attri1 = 20;
		a_item("main program", 95).f_use_type = 4;
		a_item("main program", 95).f_einkauf = 40;
		a_item("main program", 95).f_verkauf = 20;
		a_item("main program", 95).f_gewicht = 2;
		a_item("main program", 96).f_name[2] = "Winteratem";
		a_item("main program", 96).f_name[1] = "Breath of Winter";
		a_item("main program", 96).f_name[3] = "Aliento Invernal";
		a_item("main program", 96).f_type = 4;
		a_item("main program", 96).f_attri1 = 21;
		a_item("main program", 96).f_use_type = 4;
		a_item("main program", 96).f_einkauf = 40;
		a_item("main program", 96).f_verkauf = 20;
		a_item("main program", 96).f_gewicht = 2;
		a_item("main program", 97).f_name[2] = "Flammenaura";
		a_item("main program", 97).f_name[1] = "Aura of Fire";
		a_item("main program", 97).f_name[3] = "Aura de Fuego";
		a_item("main program", 97).f_type = 4;
		a_item("main program", 97).f_attri1 = 22;
		a_item("main program", 97).f_use_type = 4;
		a_item("main program", 97).f_einkauf = 40;
		a_item("main program", 97).f_verkauf = 20;
		a_item("main program", 97).f_gewicht = 2;
		a_item("main program", 98).f_name[2] = "Fledermausgestalt";
		a_item("main program", 98).f_name[1] = "Bat Shape";
		a_item("main program", 98).f_name[3] = "Cuerpo de Murcielago";
		a_item("main program", 98).f_type = 4;
		a_item("main program", 98).f_attri1 = 23;
		a_item("main program", 98).f_use_type = 4;
		a_item("main program", 98).f_einkauf = 20;
		a_item("main program", 98).f_verkauf = 10;
		a_item("main program", 98).f_gewicht = 2;
		a_item("main program", 99).f_name[2] = "Wolfsgestalt";
		a_item("main program", 99).f_name[1] = "Wolf Shape";
		a_item("main program", 99).f_name[3] = "Cuerpo de Lobo";
		a_item("main program", 99).f_type = 4;
		a_item("main program", 99).f_attri1 = 24;
		a_item("main program", 99).f_use_type = 4;
		a_item("main program", 99).f_einkauf = 60;
		a_item("main program", 99).f_verkauf = 30;
		a_item("main program", 99).f_gewicht = 2;
		a_item("main program", 100).f_name[2] = "Vogelgestalt";
		a_item("main program", 100).f_name[1] = "Bird Shape";
		a_item("main program", 100).f_name[3] = "Cuerpo de Pajaro";
		a_item("main program", 100).f_type = 4;
		a_item("main program", 100).f_attri1 = 25;
		a_item("main program", 100).f_use_type = 4;
		a_item("main program", 100).f_einkauf = 20;
		a_item("main program", 100).f_verkauf = 10;
		a_item("main program", 100).f_gewicht = 2;
		a_item("main program", 101).f_name[2] = "Katzengestalt";
		a_item("main program", 101).f_name[1] = "Cat Shape";
		a_item("main program", 101).f_name[3] = "Cuerpo de Gato";
		a_item("main program", 101).f_type = 4;
		a_item("main program", 101).f_attri1 = 26;
		a_item("main program", 101).f_use_type = 4;
		a_item("main program", 101).f_einkauf = 40;
		a_item("main program", 101).f_verkauf = 20;
		a_item("main program", 101).f_gewicht = 2;
		a_item("main program", 102).f_name[2] = "Drachengestalt";
		a_item("main program", 102).f_name[1] = "Dragon Shape";
		a_item("main program", 102).f_name[3] = "Cuerpo de Drag\363n";
		a_item("main program", 102).f_type = 4;
		a_item("main program", 102).f_attri1 = 27;
		a_item("main program", 102).f_use_type = 4;
		a_item("main program", 102).f_einkauf = 80;
		a_item("main program", 102).f_verkauf = 40;
		a_item("main program", 102).f_gewicht = 2;
		a_item("main program", 103).f_name[2] = "\334bers Wasser Gehen";
		a_item("main program", 103).f_name[1] = "Walk on Water";
		a_item("main program", 103).f_name[3] = "Caminar Sobre el Agua";
		a_item("main program", 103).f_type = 4;
		a_item("main program", 103).f_attri1 = 28;
		a_item("main program", 103).f_use_type = 1;
		a_item("main program", 103).f_einkauf = 35;
		a_item("main program", 103).f_verkauf = 18;
		a_item("main program", 103).f_gewicht = 2;
		a_item("main program", 104).f_name[2] = "Schutz vor Geschossen";
		a_item("main program", 104).f_name[1] = "Ward Against Missiles";
		a_item("main program", 104).f_name[3] = "Protecci\363n Contra Misiles";
		a_item("main program", 104).f_type = 4;
		a_item("main program", 104).f_attri1 = 29;
		a_item("main program", 104).f_use_type = 1;
		a_item("main program", 104).f_einkauf = 35;
		a_item("main program", 104).f_verkauf = 18;
		a_item("main program", 104).f_gewicht = 2;
		a_item("main program", 105).f_name[2] = "Unsichtbares Sehen";
		a_item("main program", 105).f_name[1] = "View Invisible";
		a_item("main program", 105).f_name[3] = "Ver lo Invisible";
		a_item("main program", 105).f_type = 4;
		a_item("main program", 105).f_attri1 = 30;
		a_item("main program", 105).f_use_type = 1;
		a_item("main program", 105).f_einkauf = 20;
		a_item("main program", 105).f_verkauf = 10;
		a_item("main program", 105).f_gewicht = 2;
		a_item("main program", 106).f_name[2] = "Magieschutz";
		a_item("main program", 106).f_name[1] = "Ward Against Magic";
		a_item("main program", 106).f_name[3] = "Protecci\363n M\341gica";
		a_item("main program", 106).f_type = 4;
		a_item("main program", 106).f_attri1 = 31;
		a_item("main program", 106).f_use_type = 1;
		a_item("main program", 106).f_einkauf = 50;
		a_item("main program", 106).f_verkauf = 25;
		a_item("main program", 106).f_gewicht = 2;
		a_item("main program", 107).f_name[2] = "Hexensicht";
		a_item("main program", 107).f_name[1] = "Witch Sight";
		a_item("main program", 107).f_name[3] = "Vista de Bruja";
		a_item("main program", 107).f_type = 4;
		a_item("main program", 107).f_attri1 = 32;
		a_item("main program", 107).f_use_type = 1;
		a_item("main program", 107).f_einkauf = 40;
		a_item("main program", 107).f_verkauf = 20;
		a_item("main program", 107).f_gewicht = 2;
		a_item("main program", 108).f_name[2] = "Unverwundbarkeit";
		a_item("main program", 108).f_name[1] = "Invulnerability";
		a_item("main program", 108).f_name[3] = "Invulnerabilidad";
		a_item("main program", 108).f_type = 4;
		a_item("main program", 108).f_attri1 = 33;
		a_item("main program", 108).f_use_type = 1;
		a_item("main program", 108).f_einkauf = 90;
		a_item("main program", 108).f_verkauf = 45;
		a_item("main program", 108).f_gewicht = 2;
		a_item("main program", 109).f_name[2] = "Regeneration";
		a_item("main program", 109).f_name[1] = "Regeneration";
		a_item("main program", 109).f_name[3] = "Regeneraci\363n";
		a_item("main program", 109).f_type = 4;
		a_item("main program", 109).f_attri1 = 34;
		a_item("main program", 109).f_use_type = 4;
		a_item("main program", 109).f_einkauf = 30;
		a_item("main program", 109).f_verkauf = 15;
		a_item("main program", 109).f_gewicht = 2;
		a_item("main program", 110).f_name[2] = "Giftschutz";
		a_item("main program", 110).f_name[1] = "Poison Protection";
		a_item("main program", 110).f_name[3] = "Protecci\363n Veneno";
		a_item("main program", 110).f_type = 4;
		a_item("main program", 110).f_attri1 = 35;
		a_item("main program", 110).f_use_type = 4;
		a_item("main program", 110).f_einkauf = 30;
		a_item("main program", 110).f_verkauf = 15;
		a_item("main program", 110).f_gewicht = 2;
		a_item("main program", 111).f_name[2] = "Selbsthypnose";
		a_item("main program", 111).f_name[1] = "Self Hypnosis";
		a_item("main program", 111).f_name[3] = "Hipnotizar uno Mismo";
		a_item("main program", 111).f_type = 4;
		a_item("main program", 111).f_attri1 = 36;
		a_item("main program", 111).f_use_type = 4;
		a_item("main program", 111).f_einkauf = 20;
		a_item("main program", 111).f_verkauf = 10;
		a_item("main program", 111).f_gewicht = 2;
		a_item("main program", 112).f_name[2] = "Lebensbund";
		a_item("main program", 112).f_name[1] = "Life Bond";
		a_item("main program", 112).f_name[3] = "Bono de Vida";
		a_item("main program", 112).f_type = 4;
		a_item("main program", 112).f_attri1 = 37;
		a_item("main program", 112).f_use_type = 4;
		a_item("main program", 112).f_einkauf = 25;
		a_item("main program", 112).f_verkauf = 12;
		a_item("main program", 112).f_gewicht = 2;
		a_item("main program", 65).f_name[2] = "Wirkungslos";
		a_item("main program", 65).f_name[1] = "Useless";
		a_item("main program", 65).f_name[3] = "Sin Utilidad";
		a_item("main program", 65).f_type = 17;
		a_item("main program", 65).f_attri1 = 0;
		a_item("main program", 65).f_use_type = 3;
		a_item("main program", 65).f_einkauf = 2;
		a_item("main program", 65).f_verkauf = 0;
		a_item("main program", 65).f_gewicht = 1;
		a_item("main program", 66).f_name[2] = "Schwacher Heilpilz";
		a_item("main program", 66).f_name[1] = "Weak Healing Mushroom";
		a_item("main program", 66).f_name[3] = "Hongo de Curaci\363n Peque\361o";
		a_item("main program", 66).f_type = 17;
		a_item("main program", 66).f_attri1 = 1;
		a_item("main program", 66).f_use_type = 3;
		a_item("main program", 66).f_einkauf = 4;
		a_item("main program", 66).f_verkauf = 2;
		a_item("main program", 66).f_gewicht = 1;
		a_item("main program", 67).f_name[2] = "Starker Heilpilz";
		a_item("main program", 67).f_name[1] = "Strong Healing Mushroom";
		a_item("main program", 67).f_name[3] = "Hongo de Curaci\363n Grande";
		a_item("main program", 67).f_type = 17;
		a_item("main program", 67).f_attri1 = 2;
		a_item("main program", 67).f_use_type = 3;
		a_item("main program", 67).f_einkauf = 8;
		a_item("main program", 67).f_verkauf = 4;
		a_item("main program", 67).f_gewicht = 1;
		a_item("main program", 68).f_name[2] = "Schwach Giftig";
		a_item("main program", 68).f_name[1] = "Weak Poisoning";
		a_item("main program", 68).f_name[3] = "Poco Venenoso";
		a_item("main program", 68).f_type = 17;
		a_item("main program", 68).f_attri1 = 3;
		a_item("main program", 68).f_use_type = 3;
		a_item("main program", 68).f_einkauf = 2;
		a_item("main program", 68).f_verkauf = 0;
		a_item("main program", 68).f_gewicht = 1;
		a_item("main program", 69).f_name[2] = "Stark Giftig";
		a_item("main program", 69).f_name[1] = "Strong Poisoning";
		a_item("main program", 69).f_name[3] = "Muy Venenoso";
		a_item("main program", 69).f_type = 17;
		a_item("main program", 69).f_attri1 = 4;
		a_item("main program", 69).f_use_type = 3;
		a_item("main program", 69).f_einkauf = 4;
		a_item("main program", 69).f_verkauf = 0;
		a_item("main program", 69).f_gewicht = 1;
		a_item("main program", 70).f_name[2] = "St\344rkepilz";
		a_item("main program", 70).f_name[1] = "Mushroom of Strength";
		a_item("main program", 70).f_name[3] = "Hongo de Fuerza";
		a_item("main program", 70).f_type = 17;
		a_item("main program", 70).f_attri1 = 5;
		a_item("main program", 70).f_use_type = 3;
		a_item("main program", 70).f_einkauf = 2;
		a_item("main program", 70).f_verkauf = 0;
		a_item("main program", 70).f_gewicht = 1;
		a_item("main program", 71).f_name[2] = "Schw\344chepilz";
		a_item("main program", 71).f_name[1] = "Mushroom of Weakness";
		a_item("main program", 71).f_name[3] = "Hongo de Weakness";
		a_item("main program", 71).f_type = 17;
		a_item("main program", 71).f_attri1 = 6;
		a_item("main program", 71).f_use_type = 3;
		a_item("main program", 71).f_einkauf = 2;
		a_item("main program", 71).f_verkauf = 0;
		a_item("main program", 71).f_gewicht = 1;
		a_item("main program", 72).f_name[2] = "Paralysepilz";
		a_item("main program", 72).f_name[1] = "Paralysing Mushroom";
		a_item("main program", 72).f_name[3] = "Hongo Paralizante";
		a_item("main program", 72).f_type = 17;
		a_item("main program", 72).f_attri1 = 7;
		a_item("main program", 72).f_use_type = 3;
		a_item("main program", 72).f_einkauf = 4;
		a_item("main program", 72).f_verkauf = 2;
		a_item("main program", 72).f_gewicht = 1;
		a_item("main program", 73).f_name[2] = "Schwacher Manapilz";
		a_item("main program", 73).f_name[1] = "Weak Mana Mushroom";
		a_item("main program", 73).f_name[3] = "Hongo de Mana Peque\361o";
		a_item("main program", 73).f_type = 17;
		a_item("main program", 73).f_attri1 = 8;
		a_item("main program", 73).f_use_type = 3;
		a_item("main program", 73).f_einkauf = 2;
		a_item("main program", 73).f_verkauf = 1;
		a_item("main program", 73).f_gewicht = 1;
		a_item("main program", 74).f_name[2] = "Starker Manapilz";
		a_item("main program", 74).f_name[1] = "Strong Mana Mushroom";
		a_item("main program", 74).f_name[3] = "Hongo de Mana Grande";
		a_item("main program", 74).f_type = 17;
		a_item("main program", 74).f_attri1 = 9;
		a_item("main program", 74).f_use_type = 3;
		a_item("main program", 74).f_einkauf = 6;
		a_item("main program", 74).f_verkauf = 3;
		a_item("main program", 74).f_gewicht = 1;
		a_item("main program", 145).f_name[2] = "G\374rtel der Riesenst\344rke";
		a_item("main program", 145).f_name[1] = "Belt of Giant Strength";
		a_item("main program", 145).f_name[3] = "Cintur\363n de Fuerza Gigante";
		a_item("main program", 145).f_info[2] = " St\344rke";
		a_item("main program", 145).f_info[1] = " Strength";
		a_item("main program", 145).f_info[3] = " Fuerza";
		a_item("main program", 145).f_type = 19;
		a_item("main program", 145).f_use_type = 1;
		a_item("main program", 145).f_qualitaet = 1;
		a_item("main program", 145).f_einkauf = 200;
		a_item("main program", 145).f_verkauf = 100;
		a_item("main program", 145).f_gewicht = 3;
		a_item("main program", 51).f_name[2] = "Helm des Gr\374nen Ritters";
		a_item("main program", 51).f_name[1] = "Helmet of the Green Knight";
		a_item("main program", 51).f_name[3] = "Casco del Caballero Verde";
		a_item("main program", 51).f_info[2] = "+7 Lebenspunkte";
		a_item("main program", 51).f_info[1] = "+7 to Life Points";
		a_item("main program", 51).f_info[3] = "+7 Puntos de Vida";
		a_item("main program", 51).f_type = 6;
		a_item("main program", 51).f_use_type = 1;
		a_item("main program", 51).f_einkauf = 300;
		a_item("main program", 51).f_verkauf = 150;
		a_item("main program", 51).f_gewicht = 7;
		a_item("main program", 51).f_attri1 = 0;
		a_item("main program", 51).f_attri2 = 0;
		a_item("main program", 51).f_attri3 = 8;
		a_item("main program", 255).f_name[2] = "Ring der Sidhe";
		a_item("main program", 255).f_name[1] = "Ring of the Sidhe";
		a_item("main program", 255).f_name[3] = "Anillo del Sidhe";
		a_item("main program", 255).f_info[2] = " Zauberkraft";
		a_item("main program", 255).f_info[1] = " Spellpower";
		a_item("main program", 255).f_info[3] = " Poder de Hechizos";
		a_item("main program", 255).f_type = 18;
		a_item("main program", 255).f_use_type = 1;
		a_item("main program", 255).f_qualitaet = 1;
		a_item("main program", 255).f_einkauf = 200;
		a_item("main program", 255).f_verkauf = 100;
		a_item("main program", 255).f_gewicht = 1;
		a_item("main program", 135).f_name[2] = "Amulett der Geister";
		a_item("main program", 135).f_name[1] = "Amulet of the Ghosts";
		a_item("main program", 135).f_name[3] = "Medall\363n de los Fantasmas";
		a_item("main program", 135).f_info[2] = "Unsichtbares sehen";
		a_item("main program", 135).f_info[1] = "See invisible";
		a_item("main program", 135).f_info[3] = "Ver lo invisible";
		a_item("main program", 135).f_type = 20;
		a_item("main program", 135).f_use_type = 1;
		a_item("main program", 135).f_einkauf = 150;
		a_item("main program", 135).f_verkauf = 75;
		a_item("main program", 135).f_gewicht = 2;
		a_item("main program", 136).f_name[2] = "Amulett der Hexenk\366nigin";
		a_item("main program", 136).f_name[1] = "Amulet of the Witchqueen";
		a_item("main program", 136).f_name[3] = "Medall\363n de la Bruja Maestra";
		a_item("main program", 136).f_info[2] = "Schutz gegen Blitze";
		a_item("main program", 136).f_info[1] = "Protection: lightning";
		a_item("main program", 136).f_info[3] = "Protecci\363n contra rayos";
		a_item("main program", 136).f_type = 20;
		a_item("main program", 136).f_use_type = 1;
		a_item("main program", 136).f_einkauf = 200;
		a_item("main program", 136).f_verkauf = 100;
		a_item("main program", 136).f_gewicht = 2;
		a_item("main program", 137).f_name[2] = "Amulett des Bergk\366nigs";
		a_item("main program", 137).f_name[1] = "Amulet of the Mountainking";
		a_item("main program", 137).f_name[3] = "Medallon del Rey de la Montana";
		a_item("main program", 137).f_info[2] = "Schutz Gegen Versteinern";
		a_item("main program", 137).f_info[1] = "Protection: petrification";
		a_item("main program", 137).f_info[3] = "Protecci\363n contra petrificaci\363n";
		a_item("main program", 137).f_type = 20;
		a_item("main program", 137).f_use_type = 1;
		a_item("main program", 137).f_einkauf = 300;
		a_item("main program", 137).f_verkauf = 150;
		a_item("main program", 137).f_gewicht = 2;
		a_item("main program", 138).f_name[2] = "Drachenaugen Amulett";
		a_item("main program", 138).f_name[1] = "Dragons Eye Medallion";
		a_item("main program", 138).f_name[3] = "Medall\363n del Drag\363n";
		a_item("main program", 138).f_info[2] = " Zauberkraft";
		a_item("main program", 138).f_info[1] = " Spell Power";
		a_item("main program", 138).f_info[3] = " Poder de Hechizos";
		a_item("main program", 138).f_type = 20;
		a_item("main program", 138).f_use_type = 1;
		a_item("main program", 138).f_qualitaet = 1;
		a_item("main program", 138).f_einkauf = 200;
		a_item("main program", 138).f_verkauf = 100;
		a_item("main program", 138).f_gewicht = 2;
		a_item("main program", 139).f_name[2] = "Amulett des Ewigen Winters";
		a_item("main program", 139).f_name[1] = "Amulet of Eternal Cold";
		a_item("main program", 139).f_name[3] = "Medall\363n del Invierno";
		a_item("main program", 139).f_info[2] = "K\344lteaura";
		a_item("main program", 139).f_info[1] = "Aura of Cold";
		a_item("main program", 139).f_info[3] = "Aura de Fr\355o";
		a_item("main program", 139).f_type = 20;
		a_item("main program", 139).f_use_type = 1;
		a_item("main program", 139).f_einkauf = 400;
		a_item("main program", 139).f_verkauf = 200;
		a_item("main program", 139).f_gewicht = 2;
		a_item("main program", 140).f_name[2] = "Amulett des D\344monenf\374rsten";
		a_item("main program", 140).f_name[1] = "Amulet of the Demonlord";
		a_item("main program", 140).f_name[3] = "Medallon del Rey Demonio";
		a_item("main program", 140).f_info[2] = "Hitzeaura";
		a_item("main program", 140).f_info[1] = "Aura of Heat";
		a_item("main program", 140).f_info[3] = "Aura de Calor";
		a_item("main program", 140).f_type = 20;
		a_item("main program", 140).f_use_type = 1;
		a_item("main program", 140).f_einkauf = 400;
		a_item("main program", 140).f_verkauf = 200;
		a_item("main program", 140).f_gewicht = 2;
		a_item("main program", 261).f_name[2] = "Amulett der Zwerge";
		a_item("main program", 261).f_name[1] = "Amulet of the Dwarves";
		a_item("main program", 261).f_name[3] = "Medall\363n de los Enanos";
		a_item("main program", 261).f_info[2] = "Findet Fallen (+30 %)";
		a_item("main program", 261).f_info[1] = "Finds traps (+30 %)";
		a_item("main program", 261).f_info[3] = "Encuantra trampas (+30 %)";
		a_item("main program", 261).f_type = 20;
		a_item("main program", 261).f_use_type = 1;
		a_item("main program", 261).f_einkauf = 250;
		a_item("main program", 261).f_verkauf = 125;
		a_item("main program", 261).f_gewicht = 2;
		a_item("main program", 262).f_name[2] = "Amulett des Gl\374cks";
		a_item("main program", 262).f_name[1] = "Amulet of Luck";
		a_item("main program", 262).f_name[3] = "Medall\363n de la Suerte";
		a_item("main program", 262).f_info[2] = " Gl\374ck";
		a_item("main program", 262).f_info[1] = " Luck";
		a_item("main program", 262).f_info[3] = " Suerte";
		a_item("main program", 262).f_type = 20;
		a_item("main program", 262).f_use_type = 1;
		a_item("main program", 262).f_qualitaet = 1;
		a_item("main program", 262).f_einkauf = 200;
		a_item("main program", 262).f_verkauf = 100;
		a_item("main program", 262).f_gewicht = 2;
		a_item("main program", 263).f_name[2] = "Amulett der Dualit\344t";
		a_item("main program", 263).f_name[1] = "Amulet of Duality";
		a_item("main program", 263).f_name[3] = "Medall\363n de la Distracci\363n";
		a_item("main program", 263).f_info[2] = "Lenkt Gegner ab";
		a_item("main program", 263).f_info[1] = "Distracts enemies";
		a_item("main program", 263).f_info[3] = "Distrae enemigos";
		a_item("main program", 263).f_type = 20;
		a_item("main program", 263).f_use_type = 1;
		a_item("main program", 263).f_einkauf = 500;
		a_item("main program", 263).f_verkauf = 250;
		a_item("main program", 263).f_gewicht = 2;
		a_item("main program", 264).f_name[2] = "Amulett der Feen";
		a_item("main program", 264).f_name[1] = "Amulet of the Fairies";
		a_item("main program", 264).f_name[3] = "Medall\363n de las Hadas";
		a_item("main program", 264).f_info[2] = "Unsichtbarkeit";
		a_item("main program", 264).f_info[1] = "Invisibility";
		a_item("main program", 264).f_info[3] = "Invisibilidad";
		a_item("main program", 264).f_type = 20;
		a_item("main program", 264).f_use_type = 1;
		a_item("main program", 264).f_einkauf = 700;
		a_item("main program", 264).f_verkauf = 350;
		a_item("main program", 264).f_gewicht = 2;
		a_item("main program", 265).f_name[2] = "Amulett der Vier Winde";
		a_item("main program", 265).f_name[1] = "Amulet of the Four Winds";
		a_item("main program", 265).f_name[3] = "Medall\363n de los Cuatro Vientos";
		a_item("main program", 265).f_info[2] = " Geschwindigkeit";
		a_item("main program", 265).f_info[1] = " Speed";
		a_item("main program", 265).f_info[3] = " Velocidad";
		a_item("main program", 265).f_type = 20;
		a_item("main program", 265).f_use_type = 1;
		a_item("main program", 265).f_qualitaet = 1;
		a_item("main program", 265).f_einkauf = 200;
		a_item("main program", 265).f_verkauf = 100;
		a_item("main program", 265).f_gewicht = 2;
		a_item("main program", 266).f_name[2] = "Amulett der Troglodyten";
		a_item("main program", 266).f_name[1] = "Amulet of the Troglodytes";
		a_item("main program", 266).f_name[3] = "Medall\363n de los Trogloditas";
		a_item("main program", 266).f_info[2] = "\334bers Wasser gehen";
		a_item("main program", 266).f_info[1] = "Walk on water";
		a_item("main program", 266).f_info[3] = "Caminar sobre el agua";
		a_item("main program", 266).f_type = 20;
		a_item("main program", 266).f_use_type = 1;
		a_item("main program", 266).f_einkauf = 200;
		a_item("main program", 266).f_verkauf = 100;
		a_item("main program", 266).f_gewicht = 2;
		a_item("main program", 148).f_name[2] = "Maske des Vergessenen K\366nigs";
		a_item("main program", 148).f_name[1] = "Mask of the Forgotten King";
		a_item("main program", 148).f_name[3] = "M\341scara del Rey Olvidado";
		a_item("main program", 148).f_info[2] = " Wahrnehmung";
		a_item("main program", 148).f_info[1] = " Perception";
		a_item("main program", 148).f_info[3] = " Percepci\363n";
		a_item("main program", 148).f_type = 21;
		a_item("main program", 148).f_use_type = 1;
		a_item("main program", 148).f_qualitaet = 1;
		a_item("main program", 148).f_einkauf = 200;
		a_item("main program", 148).f_verkauf = 100;
		a_item("main program", 148).f_gewicht = 3;
		a_item("main program", 148).f_attri1 = 0;
		a_item("main program", 148).f_attri2 = 0;
		a_item("main program", 148).f_attri3 = 1;
		a_item("main program", 187).f_name[2] = "Elfen Bogen";
		a_item("main program", 187).f_name[1] = "Bow of the Elves";
		a_item("main program", 187).f_name[3] = "Arco de los Elfos";
		a_item("main program", 187).f_type = 10;
		a_item("main program", 187).f_use_type = 1;
		a_item("main program", 187).f_einkauf = 45;
		a_item("main program", 187).f_verkauf = 25;
		a_item("main program", 187).f_gewicht = 15;
		a_item("main program", 187).f_magisch = 1;
		a_item("main program", 187).f_attri1 = 2;
		a_item("main program", 187).f_attri2 = 5;
		a_item("main program", 187).f_attri3 = 10;
		a_item("main program", 187).f_attri4 = 2;
		a_item("main program", 157).f_name[2] = "Magischer Bogen";
		a_item("main program", 157).f_name[1] = "Magic Bow";
		a_item("main program", 157).f_name[3] = "Arco M\341gico";
		a_item("main program", 157).f_type = 10;
		a_item("main program", 157).f_use_type = 1;
		a_item("main program", 157).f_einkauf = 45;
		a_item("main program", 157).f_verkauf = 0;
		a_item("main program", 157).f_gewicht = 12;
		a_item("main program", 157).f_magisch = 1;
		a_item("main program", 157).f_attri1 = 2;
		a_item("main program", 157).f_attri2 = 5;
		a_item("main program", 157).f_attri3 = 10;
		a_item("main program", 157).f_attri4 = 2;
		a_item("main program", 201).f_name[2] = "G\374rtel der Mitternacht";
		a_item("main program", 201).f_name[1] = "Belt of Midnight";
		a_item("main program", 201).f_name[3] = "Cintur\363n de la Medianoche";
		a_item("main program", 201).f_info[2] = "+10% Schleichen";
		a_item("main program", 201).f_info[1] = "+10% Stealth";
		a_item("main program", 201).f_info[3] = "+10% Furtivo";
		a_item("main program", 201).f_type = 19;
		a_item("main program", 201).f_use_type = 1;
		a_item("main program", 201).f_einkauf = 50;
		a_item("main program", 201).f_verkauf = 25;
		a_item("main program", 201).f_gewicht = 3;
		a_item("main program", 201).f_attri1 = 0;
		a_item("main program", 201).f_attri2 = 0;
		a_item("main program", 201).f_attri3 = 0;
		a_item("main program", 256).f_name[2] = "Ring der Verlorenen Tr\344ume";
		a_item("main program", 256).f_name[1] = "Ring of Lost Dreams";
		a_item("main program", 256).f_name[3] = "Anillo de los Sue\361os Perdidos";
		a_item("main program", 256).f_info[2] = " Wahrnehmung";
		a_item("main program", 256).f_info[1] = " Perception";
		a_item("main program", 256).f_info[3] = " Percepci\363n";
		a_item("main program", 256).f_type = 18;
		a_item("main program", 256).f_use_type = 1;
		a_item("main program", 256).f_qualitaet = 1;
		a_item("main program", 256).f_einkauf = 200;
		a_item("main program", 256).f_verkauf = 100;
		a_item("main program", 256).f_gewicht = 1;
		a_item("main program", 257).f_name[2] = "Ring des Blutdurstes";
		a_item("main program", 257).f_name[1] = "Ring of Bloodlust";
		a_item("main program", 257).f_name[3] = "Anillo del Dolor";
		a_item("main program", 257).f_info[2] = " Schaden";
		a_item("main program", 257).f_info[1] = " Damage";
		a_item("main program", 257).f_info[3] = " Da\361o";
		a_item("main program", 257).f_type = 18;
		a_item("main program", 257).f_use_type = 1;
		a_item("main program", 257).f_qualitaet = 1;
		a_item("main program", 257).f_einkauf = 150;
		a_item("main program", 257).f_verkauf = 75;
		a_item("main program", 257).f_gewicht = 1;
		a_item("main program", 231).f_name[2] = "Silberner Schl\374ssel";
		a_item("main program", 231).f_name[1] = "Silver Key";
		a_item("main program", 231).f_name[3] = "Llave de Plata";
		a_item("main program", 231).f_info[1] = "(Opens chests and doors)";
		a_item("main program", 231).f_info[2] = "(\326ffnet Truhen und T\374ren)";
		a_item("main program", 231).f_info[3] = "(Abre cajas y puertas)";
		a_item("main program", 231).f_type = 15;
		a_item("main program", 231).f_use_type = 2;
		a_item("main program", 231).f_einkauf = 10;
		a_item("main program", 231).f_verkauf = 5;
		a_item("main program", 231).f_gewicht = 1;
		a_item("main program", 219).f_name[2] = "Goldener Schl\374ssel";
		a_item("main program", 219).f_name[1] = "Golden Key";
		a_item("main program", 219).f_name[3] = "Llave de Oro";
		a_item("main program", 219).f_info[1] = "(Opens chests and doors)";
		a_item("main program", 219).f_info[2] = "(\326ffnet Truhen und T\374ren)";
		a_item("main program", 219).f_info[3] = "(Abre cajas y puertas)";
		a_item("main program", 219).f_type = 15;
		a_item("main program", 219).f_use_type = 2;
		a_item("main program", 219).f_einkauf = 30;
		a_item("main program", 219).f_verkauf = 15;
		a_item("main program", 219).f_gewicht = 1;
		a_item("main program", 222).f_name[2] = "Umhang der Sidhe";
		a_item("main program", 222).f_name[1] = "Robe of the Sidhe";
		a_item("main program", 222).f_name[3] = "Capa del Sidhe";
		a_item("main program", 222).f_info[2] = " Zauberkraft";
		a_item("main program", 222).f_info[1] = " Spell Power";
		a_item("main program", 222).f_info[3] = " Poder de Hechizos";
		a_item("main program", 222).f_type = 9;
		a_item("main program", 222).f_use_type = 1;
		a_item("main program", 222).f_qualitaet = 1;
		a_item("main program", 222).f_einkauf = 200;
		a_item("main program", 222).f_verkauf = 100;
		a_item("main program", 222).f_gewicht = 5;
		a_item("main program", 222).f_attri1 = 0;
		a_item("main program", 222).f_attri2 = 0;
		a_item("main program", 222).f_attri3 = 1;
		a_item("main program", 223).f_name[2] = "Umhang des Wahnsinnigen Magiers";
		a_item("main program", 223).f_name[1] = "Robe of the Mad Magician";
		a_item("main program", 223).f_name[3] = "Capa del Mago Loco";
		a_item("main program", 223).f_info[2] = "+4 Lebenspunkte";
		a_item("main program", 223).f_info[1] = "+4 Life Points";
		a_item("main program", 223).f_info[3] = "+4 Puntos de Vida";
		a_item("main program", 223).f_type = 9;
		a_item("main program", 223).f_use_type = 1;
		a_item("main program", 223).f_einkauf = 300;
		a_item("main program", 223).f_verkauf = 150;
		a_item("main program", 223).f_gewicht = 5;
		a_item("main program", 223).f_attri1 = 0;
		a_item("main program", 223).f_attri2 = 0;
		a_item("main program", 223).f_attri3 = 1;
		a_item("main program", 269).f_name[2] = "Spitzhacke";
		a_item("main program", 269).f_name[1] = "Pickaxe";
		a_item("main program", 269).f_name[3] = "Piqueta";
		a_item("main program", 269).f_info[2] = "Entfernt Steine";
		a_item("main program", 269).f_info[1] = "Removes boulders";
		a_item("main program", 269).f_info[3] = "Remueve piedras";
		a_item("main program", 269).f_type = 15;
		a_item("main program", 269).f_use_type = 2;
		a_item("main program", 269).f_klasse = 2;
		a_item("main program", 269).f_einkauf = 30;
		a_item("main program", 269).f_verkauf = 15;
		a_item("main program", 269).f_gewicht = 25;
		a_item("main program", 270).f_name[2] = "Schaufel";
		a_item("main program", 270).f_name[1] = "Shovel";
		a_item("main program", 270).f_name[3] = "Pala";
		a_item("main program", 270).f_info[2] = "Findet vergrabene Sch\344tze";
		a_item("main program", 270).f_info[1] = "Finds hidden treasures";
		a_item("main program", 270).f_info[3] = "Encuentra tesoros enterrados";
		a_item("main program", 270).f_type = 15;
		a_item("main program", 270).f_use_type = 2;
		a_item("main program", 270).f_einkauf = 30;
		a_item("main program", 270).f_verkauf = 15;
		a_item("main program", 270).f_gewicht = 20;
		a_item("main program", 149).f_name[2] = "Ring der Naiaden";
		a_item("main program", 149).f_name[1] = "Ring of the Naiads";
		a_item("main program", 149).f_name[3] = "Anillo de las Niades";
		a_item("main program", 149).f_info[2] = "+4 Mana";
		a_item("main program", 149).f_info[1] = "+4 Mana";
		a_item("main program", 149).f_info[3] = "+4 Mana";
		a_item("main program", 149).f_type = 18;
		a_item("main program", 149).f_use_type = 1;
		a_item("main program", 149).f_einkauf = 220;
		a_item("main program", 149).f_verkauf = 110;
		a_item("main program", 149).f_gewicht = 1;
		a_item("main program", 253).f_name[2] = "Ring der Ogerst\344rke";
		a_item("main program", 253).f_name[1] = "Ring of Ogre Strength";
		a_item("main program", 253).f_name[3] = "Anillo de la Fuerza de Ogro";
		a_item("main program", 253).f_info[2] = " St\344rke";
		a_item("main program", 253).f_info[1] = " Strength";
		a_item("main program", 253).f_info[3] = " Fuerza";
		a_item("main program", 253).f_type = 18;
		a_item("main program", 253).f_use_type = 1;
		a_item("main program", 253).f_qualitaet = 1;
		a_item("main program", 253).f_einkauf = 200;
		a_item("main program", 253).f_verkauf = 100;
		a_item("main program", 253).f_gewicht = 1;
		a_item("main program", 153).f_name[2] = "Umhang der Schatten";
		a_item("main program", 153).f_name[1] = "Robe of Shadows";
		a_item("main program", 153).f_name[3] = "Capa de las Sombras";
		a_item("main program", 153).f_info[2] = "+2 Schleichen";
		a_item("main program", 153).f_info[1] = "+2 Sneaking";
		a_item("main program", 153).f_info[3] = "+2 Escaparse";
		a_item("main program", 153).f_type = 9;
		a_item("main program", 153).f_use_type = 1;
		a_item("main program", 153).f_einkauf = 200;
		a_item("main program", 153).f_verkauf = 100;
		a_item("main program", 153).f_gewicht = 5;
		a_item("main program", 153).f_attri1 = 0;
		a_item("main program", 153).f_attri2 = 0;
		a_item("main program", 153).f_attri3 = 1;
		a_item("main program", 228).f_name[2] = "Umhang aus Drachenschuppen";
		a_item("main program", 228).f_name[1] = "Robe of Dragonscales";
		a_item("main program", 228).f_name[3] = "Capa de Piel de Drag\363n";
		a_item("main program", 228).f_info[2] = " St\344rke";
		a_item("main program", 228).f_info[1] = " Strength";
		a_item("main program", 228).f_info[3] = " Fuerza";
		a_item("main program", 228).f_type = 9;
		a_item("main program", 228).f_use_type = 1;
		a_item("main program", 228).f_qualitaet = 1;
		a_item("main program", 228).f_einkauf = 200;
		a_item("main program", 228).f_verkauf = 100;
		a_item("main program", 228).f_gewicht = 5;
		a_item("main program", 228).f_attri1 = 0;
		a_item("main program", 228).f_attri2 = 0;
		a_item("main program", 228).f_attri3 = 2;
		a_item("main program", 229).f_name[2] = "Krone der K\366nigin der Sidhe";
		a_item("main program", 229).f_name[1] = "Crown of the Sidhe Queen";
		a_item("main program", 229).f_name[3] = "Corona de la Reina de los Sidhe";
		a_item("main program", 229).f_info[2] = " Zauberkraft";
		a_item("main program", 229).f_info[1] = " Spell Power";
		a_item("main program", 229).f_info[3] = " Poder de Hechizos";
		a_item("main program", 229).f_type = 6;
		a_item("main program", 229).f_use_type = 1;
		a_item("main program", 229).f_qualitaet = 1;
		a_item("main program", 229).f_einkauf = 200;
		a_item("main program", 229).f_verkauf = 100;
		a_item("main program", 229).f_gewicht = 3;
		a_item("main program", 229).f_attri1 = 0;
		a_item("main program", 229).f_attri2 = 0;
		a_item("main program", 229).f_attri3 = 1;
		a_item("main program", 230).f_name[2] = "Krone der Drachen";
		a_item("main program", 230).f_name[1] = "Crown of the Dragons";
		a_item("main program", 230).f_name[3] = "Corona de los Dragones";
		a_item("main program", 230).f_info[2] = " St\344rke";
		a_item("main program", 230).f_info[1] = " Strength";
		a_item("main program", 230).f_info[3] = " Fuerza";
		a_item("main program", 230).f_type = 6;
		a_item("main program", 230).f_use_type = 1;
		a_item("main program", 230).f_qualitaet = 1;
		a_item("main program", 230).f_einkauf = 200;
		a_item("main program", 230).f_verkauf = 100;
		a_item("main program", 230).f_gewicht = 3;
		a_item("main program", 230).f_attri1 = 0;
		a_item("main program", 230).f_attri2 = 0;
		a_item("main program", 230).f_attri3 = 1;
		a_item("main program", 237).f_name[2] = "Schwert des Lichts";
		a_item("main program", 237).f_name[1] = "Sword of Light";
		a_item("main program", 237).f_name[3] = "Espada de la Luz";
		a_item("main program", 237).f_type = 1;
		a_item("main program", 237).f_use_type = 1;
		a_item("main program", 237).f_klasse = 1;
		a_item("main program", 237).f_einkauf = 1000;
		a_item("main program", 237).f_verkauf = 500;
		a_item("main program", 237).f_gewicht = 25;
		a_item("main program", 237).f_magisch = 1;
		a_item("main program", 237).f_attri1 = 2;
		a_item("main program", 237).f_attri2 = 4;
		a_item("main program", 237).f_attri3 = 10;
		a_item("main program", 237).f_attri4 = 1;
		a_item("main program", 224).f_name[2] = "Umhang der Feen";
		a_item("main program", 224).f_name[1] = "Robe of the Fairies";
		a_item("main program", 224).f_name[3] = "Capa de las Hagas";
		a_item("main program", 224).f_info[2] = "+20% Magieschutz";
		a_item("main program", 224).f_info[1] = "+20% Magical Resistance";
		a_item("main program", 224).f_info[3] = "+20% Resistencia Magica";
		a_item("main program", 224).f_type = 9;
		a_item("main program", 224).f_use_type = 1;
		a_item("main program", 224).f_einkauf = 230;
		a_item("main program", 224).f_verkauf = 115;
		a_item("main program", 224).f_gewicht = 5;
		a_item("main program", 224).f_attri1 = 0;
		a_item("main program", 224).f_attri2 = 0;
		a_item("main program", 224).f_attri3 = 1;
		a_item("main program", 225).f_name[2] = "Umhang des Ewigen Frosts";
		a_item("main program", 225).f_name[1] = "Robe of Eternal Frost";
		a_item("main program", 225).f_name[3] = "Capa de Invierno Eterno";
		a_item("main program", 225).f_info[2] = "Erschafft K\344lteaura";
		a_item("main program", 225).f_info[1] = "Creates Aura of Cold";
		a_item("main program", 225).f_info[3] = "Crea Aura de Fr\355o";
		a_item("main program", 225).f_type = 9;
		a_item("main program", 225).f_use_type = 1;
		a_item("main program", 225).f_einkauf = 300;
		a_item("main program", 225).f_verkauf = 150;
		a_item("main program", 225).f_gewicht = 5;
		a_item("main program", 225).f_attri1 = 0;
		a_item("main program", 225).f_attri2 = 0;
		a_item("main program", 225).f_attri3 = 1;
		a_item("main program", 247).f_name[2] = "Spiegel aus Obsidian";
		a_item("main program", 247).f_name[1] = "Obsidian Mirror";
		a_item("main program", 247).f_name[3] = "Espejo de Obsidiano";
		a_item("main program", 247).f_info[2] = "Zeigt Karte";
		a_item("main program", 247).f_info[1] = "Shows map";
		a_item("main program", 247).f_info[3] = "Muestra mapa";
		a_item("main program", 247).f_type = 15;
		a_item("main program", 247).f_use_type = 2;
		a_item("main program", 247).f_qualitaet = 2;
		a_item("main program", 247).f_einkauf = 1500;
		a_item("main program", 247).f_verkauf = 750;
		a_item("main program", 247).f_gewicht = 3;
		a_item("main program", 247).f_unique = 1;
		a_item("main program", 247).f_attri1 = 15;
		a_item("main program", 244).f_name[2] = "Kristallkugel";
		a_item("main program", 244).f_name[1] = "Crystal Ball";
		a_item("main program", 244).f_name[3] = "Bola de Cristal";
		a_item("main program", 244).f_info[2] = "Zeigt Karte";
		a_item("main program", 244).f_info[1] = "Shows map";
		a_item("main program", 244).f_info[3] = "Muestra mapa";
		a_item("main program", 244).f_type = 15;
		a_item("main program", 244).f_use_type = 2;
		a_item("main program", 244).f_qualitaet = 2;
		a_item("main program", 244).f_unique = 1;
		a_item("main program", 244).f_einkauf = 1200;
		a_item("main program", 244).f_verkauf = 600;
		a_item("main program", 244).f_gewicht = 3;
		a_item("main program", 244).f_attri1 = 10;
		a_item("main program", 241).f_name[2] = "Flaschengeist";
		a_item("main program", 241).f_name[1] = "Ghost in a Bottle";
		a_item("main program", 241).f_name[3] = "Fantasma en Botella";
		a_item("main program", 241).f_type = 15;
		a_item("main program", 241).f_use_type = 2;
		a_item("main program", 241).f_einkauf = 200;
		a_item("main program", 241).f_verkauf = 100;
		a_item("main program", 241).f_gewicht = 2;
		a_item("main program", 292).f_name[2] = "Stahlkugeln";
		a_item("main program", 292).f_name[1] = "Steel Balls";
		a_item("main program", 292).f_name[3] = "Bolas de Piedra";
		a_item("main program", 292).f_type = 13;
		a_item("main program", 292).f_use_type = 1;
		a_item("main program", 292).f_qualitaet = 2;
		a_item("main program", 292).f_einkauf = 4;
		a_item("main program", 292).f_verkauf = 2;
		a_item("main program", 292).f_gewicht = 2;
		a_item("main program", 292).f_attri1 = 20;
		a_item("main program", 292).f_attri2 = 1;
		a_item("main program", 292).f_attri3 = 1;
		a_item("main program", 292).f_attri4 = 5;
		a_item("main program", 291).f_name[2] = "Steine";
		a_item("main program", 291).f_name[1] = "Stones";
		a_item("main program", 291).f_name[3] = "Piedras";
		a_item("main program", 291).f_type = 13;
		a_item("main program", 291).f_use_type = 1;
		a_item("main program", 291).f_qualitaet = 2;
		a_item("main program", 291).f_einkauf = 4;
		a_item("main program", 291).f_verkauf = 2;
		a_item("main program", 291).f_gewicht = 2;
		a_item("main program", 291).f_attri1 = 10;
		a_item("main program", 291).f_attri2 = 0;
		a_item("main program", 291).f_attri3 = 1;
		a_item("main program", 291).f_attri4 = 5;
		a_item("main program", 302).f_name[2] = "Ring der Schatten";
		a_item("main program", 302).f_name[1] = "Ring of Shadows";
		a_item("main program", 302).f_name[3] = "Anillo de las Sombras";
		a_item("main program", 302).f_info[2] = " Schleichen";
		a_item("main program", 302).f_info[1] = " Stealth";
		a_item("main program", 302).f_info[3] = " Escabullirse";
		a_item("main program", 302).f_type = 18;
		a_item("main program", 302).f_use_type = 1;
		a_item("main program", 302).f_qualitaet = 1;
		a_item("main program", 302).f_einkauf = 150;
		a_item("main program", 302).f_verkauf = 75;
		a_item("main program", 302).f_gewicht = 1;
		a_item("main program", 303).f_name[2] = "Ring der Elfen";
		a_item("main program", 303).f_name[1] = "Ring of the Elves";
		a_item("main program", 303).f_name[3] = "Anillo de los Elfos";
		a_item("main program", 303).f_info[2] = " Angriff im Fernkampf";
		a_item("main program", 303).f_info[1] = " Attack with ranged weapons";
		a_item("main program", 303).f_info[3] = " Ataque con arcos";
		a_item("main program", 303).f_type = 18;
		a_item("main program", 303).f_use_type = 1;
		a_item("main program", 303).f_qualitaet = 1;
		a_item("main program", 303).f_einkauf = 150;
		a_item("main program", 303).f_verkauf = 75;
		a_item("main program", 303).f_gewicht = 1;
		a_item("main program", 304).f_name[2] = "Ring der Naga";
		a_item("main program", 304).f_name[1] = "Ring of the Naga";
		a_item("main program", 304).f_name[3] = "Anillo del Naga";
		a_item("main program", 304).f_info[2] = " Schaden im Fernkampf";
		a_item("main program", 304).f_info[1] = " Damage in ranged combat";
		a_item("main program", 304).f_info[3] = " Da\361o con arcos";
		a_item("main program", 304).f_type = 18;
		a_item("main program", 304).f_use_type = 1;
		a_item("main program", 304).f_qualitaet = 1;
		a_item("main program", 304).f_einkauf = 150;
		a_item("main program", 304).f_verkauf = 75;
		a_item("main program", 304).f_gewicht = 1;
		a_item("main program", 305).f_name[2] = "Ring der Feenk\366nigin";
		a_item("main program", 305).f_name[1] = "Ring of the Fairy Queen";
		a_item("main program", 305).f_name[3] = "Anillo de la Reina de las Hadas";
		a_item("main program", 305).f_info[2] = "0 Wiederstand gegen Magie";
		a_item("main program", 305).f_info[1] = "0 Resistance to magic";
		a_item("main program", 305).f_info[3] = "0 Resistencia contra magia";
		a_item("main program", 305).f_type = 18;
		a_item("main program", 305).f_use_type = 1;
		a_item("main program", 305).f_qualitaet = 1;
		a_item("main program", 305).f_einkauf = 150;
		a_item("main program", 305).f_verkauf = 75;
		a_item("main program", 305).f_gewicht = 1;
		a_item("main program", 306).f_name[2] = "Ring des Gehenna";
		a_item("main program", 306).f_name[1] = "Ring of Gehenna";
		a_item("main program", 306).f_name[3] = "Anillo de Gehenna";
		a_item("main program", 306).f_info[2] = "Flammenaura";
		a_item("main program", 306).f_info[1] = "Aura of Fire";
		a_item("main program", 306).f_info[3] = "Aura de Fuego";
		a_item("main program", 306).f_type = 18;
		a_item("main program", 306).f_use_type = 1;
		a_item("main program", 306).f_einkauf = 400;
		a_item("main program", 306).f_verkauf = 200;
		a_item("main program", 306).f_gewicht = 1;
		a_item("main program", 307).f_name[2] = "Ring der Schneek\366nigin";
		a_item("main program", 307).f_name[1] = "Ring of the Snowqueen";
		a_item("main program", 307).f_name[3] = "Anillo de la Reina de la Nieve";
		a_item("main program", 307).f_info[2] = "K\344lteaura";
		a_item("main program", 307).f_info[1] = "Aura of Cold";
		a_item("main program", 307).f_info[3] = "Aura de Fr\355o";
		a_item("main program", 307).f_type = 18;
		a_item("main program", 307).f_use_type = 1;
		a_item("main program", 307).f_einkauf = 400;
		a_item("main program", 307).f_verkauf = 200;
		a_item("main program", 307).f_gewicht = 1;
		a_item("main program", 155).f_name[2] = "Klinge des Letzten Ritters";
		a_item("main program", 155).f_name[1] = "Sword of the Last Knight";
		a_item("main program", 155).f_name[3] = "Espada del \332ltimo Caballero";
		a_item("main program", 155).f_type = 1;
		a_item("main program", 155).f_use_type = 1;
		a_item("main program", 155).f_klasse = 1;
		a_item("main program", 155).f_einkauf = 150;
		a_item("main program", 155).f_verkauf = 75;
		a_item("main program", 155).f_gewicht = 25;
		a_item("main program", 155).f_magisch = 1;
		a_item("main program", 155).f_attri1 = 2;
		a_item("main program", 155).f_attri2 = 5;
		a_item("main program", 155).f_attri3 = 10;
		a_item("main program", 155).f_attri4 = 1;
		a_item("main program", 156).f_name[2] = "Magisches Kettenhemd";
		a_item("main program", 156).f_name[1] = "Magical Chainmail";
		a_item("main program", 156).f_name[3] = "Cota de Malla M\341gica";
		a_item("main program", 156).f_type = 9;
		a_item("main program", 156).f_use_type = 1;
		a_item("main program", 156).f_einkauf = 400;
		a_item("main program", 156).f_verkauf = 240;
		a_item("main program", 156).f_gewicht = 50;
		a_item("main program", 156).f_attri1 = 2;
		a_item("main program", 156).f_attri2 = 4;
		a_item("main program", 156).f_attri3 = 5;
		a_item("main program", 157).f_name[2] = "Zauberbogen";
		a_item("main program", 157).f_name[1] = "Magical Bow";
		a_item("main program", 157).f_name[3] = "Arco M\341gico";
		a_item("main program", 157).f_type = 10;
		a_item("main program", 157).f_use_type = 1;
		a_item("main program", 157).f_einkauf = 120;
		a_item("main program", 157).f_verkauf = 60;
		a_item("main program", 157).f_gewicht = 15;
		a_item("main program", 157).f_magisch = 1;
		a_item("main program", 157).f_attri1 = 2;
		a_item("main program", 157).f_attri2 = 5;
		a_item("main program", 157).f_attri3 = 15;
		a_item("main program", 157).f_attri4 = 2;
		a_item("main program", 158).f_name[2] = "Elfen Pfeile";
		a_item("main program", 158).f_name[1] = "Elven Arrows";
		a_item("main program", 158).f_name[3] = "Flechas de los Elfos";
		a_item("main program", 158).f_type = 13;
		a_item("main program", 158).f_use_type = 1;
		a_item("main program", 158).f_qualitaet = 2;
		a_item("main program", 158).f_einkauf = 10;
		a_item("main program", 158).f_verkauf = 5;
		a_item("main program", 158).f_gewicht = 1;
		a_item("main program", 158).f_magisch = 1;
		a_item("main program", 158).f_attri1 = 20;
		a_item("main program", 158).f_attri2 = 2;
		a_item("main program", 158).f_attri3 = 3;
		a_item("main program", 158).f_attri4 = 15;
		a_item("main program", 160).f_name[2] = "Magische Lederr\374stung";
		a_item("main program", 160).f_name[1] = "Magical Leather Armor";
		a_item("main program", 160).f_name[3] = "Armadura de Cuero M\341gica";
		a_item("main program", 160).f_type = 9;
		a_item("main program", 160).f_use_type = 1;
		a_item("main program", 160).f_einkauf = 100;
		a_item("main program", 160).f_verkauf = 50;
		a_item("main program", 160).f_gewicht = 10;
		a_item("main program", 160).f_attri1 = 2;
		a_item("main program", 160).f_attri2 = 2;
		a_item("main program", 160).f_attri3 = 3;
		a_item("main program", 41).f_name[2] = "Degen";
		a_item("main program", 41).f_name[1] = "Rapier";
		a_item("main program", 41).f_name[3] = "Florette";
		a_item("main program", 41).f_type = 1;
		a_item("main program", 41).f_use_type = 1;
		a_item("main program", 41).f_klasse = 7;
		a_item("main program", 41).f_einkauf = 15;
		a_item("main program", 41).f_verkauf = 8;
		a_item("main program", 41).f_gewicht = 10;
		a_item("main program", 41).f_attri1 = 1;
		a_item("main program", 41).f_attri2 = 2;
		a_item("main program", 41).f_attri3 = 6;
		a_item("main program", 41).f_attri4 = 1;
		a_item("main program", 161).f_name[2] = "Magischer Degen";
		a_item("main program", 161).f_name[1] = "Magical Rapier";
		a_item("main program", 161).f_name[3] = "Florette Magico";
		a_item("main program", 161).f_type = 1;
		a_item("main program", 161).f_use_type = 1;
		a_item("main program", 161).f_klasse = 7;
		a_item("main program", 161).f_einkauf = 45;
		a_item("main program", 161).f_verkauf = 26;
		a_item("main program", 161).f_gewicht = 10;
		a_item("main program", 161).f_magisch = 1;
		a_item("main program", 161).f_attri1 = 2;
		a_item("main program", 161).f_attri2 = 4;
		a_item("main program", 161).f_attri3 = 10;
		a_item("main program", 161).f_attri4 = 1;
		a_item("main program", 53).f_name[2] = "Nahrung";
		a_item("main program", 53).f_name[1] = "Food";
		a_item("main program", 53).f_name[3] = "Comida";
		a_item("main program", 53).f_type = 3;
		a_item("main program", 53).f_use_type = 3;
		a_item("main program", 53).f_einkauf = 15;
		a_item("main program", 53).f_verkauf = 8;
		a_item("main program", 53).f_gewicht = 3;
		a_item("main program", 53).f_attri1 = 150;
		a_item("main program", 52).f_name[2] = "Fellkappe";
		a_item("main program", 52).f_name[1] = "Leather Hat";
		a_item("main program", 52).f_name[3] = "Gorro de Cuero";
		a_item("main program", 52).f_type = 6;
		a_item("main program", 52).f_use_type = 1;
		a_item("main program", 52).f_einkauf = 4;
		a_item("main program", 52).f_verkauf = 2;
		a_item("main program", 52).f_gewicht = 3;
		a_item("main program", 52).f_attri1 = 0;
		a_item("main program", 52).f_attri2 = 0;
		a_item("main program", 52).f_attri3 = 1;
		a_item("main program", 164).f_name[2] = "Drachent\366ter (+7 Ang/Sch)";
		a_item("main program", 164).f_name[1] = "Dragonslayer (+7 Att/Dam)";
		a_item("main program", 164).f_name[3] = "Mata Dragones (+7 Ata/Dan)";
		a_item("main program", 164).f_type = 1;
		a_item("main program", 164).f_use_type = 1;
		a_item("main program", 164).f_klasse = 1;
		a_item("main program", 164).f_einkauf = 150;
		a_item("main program", 164).f_verkauf = 75;
		a_item("main program", 164).f_gewicht = 25;
		a_item("main program", 164).f_magisch = 1;
		a_item("main program", 164).f_attri1 = 1;
		a_item("main program", 164).f_attri2 = 4;
		a_item("main program", 164).f_attri3 = 8;
		a_item("main program", 164).f_attri4 = 1;
		a_item("main program", 162).f_name[2] = "D\344monent\366ter (+7 Ang/Sch)";
		a_item("main program", 162).f_name[1] = "Demonslayer (+7 Att/Dam)";
		a_item("main program", 162).f_name[3] = "Mata Demonios (+7 Ata/Dan)";
		a_item("main program", 162).f_type = 1;
		a_item("main program", 162).f_use_type = 1;
		a_item("main program", 162).f_klasse = 1;
		a_item("main program", 162).f_einkauf = 150;
		a_item("main program", 162).f_verkauf = 75;
		a_item("main program", 162).f_gewicht = 25;
		a_item("main program", 162).f_magisch = 1;
		a_item("main program", 162).f_attri1 = 1;
		a_item("main program", 162).f_attri2 = 4;
		a_item("main program", 162).f_attri3 = 8;
		a_item("main program", 162).f_attri4 = 1;
		a_item("main program", 326).f_name[2] = "Kette des Ewigen Wassers";
		a_item("main program", 326).f_name[1] = "Necklace of Hydration";
		a_item("main program", 326).f_name[3] = "Colgante de la Hidrataci\363n";
		a_item("main program", 326).f_info[2] = "Verlangsamt Verdursten";
		a_item("main program", 326).f_info[1] = "Slows down thirst";
		a_item("main program", 326).f_info[3] = "Calma la sed";
		a_item("main program", 326).f_type = 20;
		a_item("main program", 326).f_use_type = 1;
		a_item("main program", 326).f_einkauf = 250;
		a_item("main program", 326).f_verkauf = 125;
		a_item("main program", 326).f_gewicht = 2;
		a_item("main program", 327).f_name[2] = "Kette der Askese";
		a_item("main program", 327).f_name[1] = "Necklace of Slow Digestion";
		a_item("main program", 327).f_name[3] = "Cadena de la Digesti\363n Lenta";
		a_item("main program", 327).f_info[2] = "Verlangsamt Verhungern";
		a_item("main program", 327).f_info[1] = "Slows down hunger";
		a_item("main program", 327).f_info[3] = "Calma el hambre";
		a_item("main program", 327).f_type = 20;
		a_item("main program", 327).f_use_type = 1;
		a_item("main program", 327).f_einkauf = 250;
		a_item("main program", 327).f_verkauf = 125;
		a_item("main program", 327).f_gewicht = 2;
		a_item("main program", 353).f_name[2] = "Heilkr\344uter";
		a_item("main program", 353).f_name[1] = "Healing Herbs";
		a_item("main program", 353).f_name[3] = "Hierbas Curativas";
		a_item("main program", 353).f_type = 15;
		a_item("main program", 353).f_use_type = 2;
		a_item("main program", 353).f_einkauf = 2;
		a_item("main program", 353).f_verkauf = 1;
		a_item("main program", 353).f_gewicht = 1;
		a_item("main program", 355).f_name[2] = "Angel";
		a_item("main program", 355).f_name[1] = "Fishing Rod";
		a_item("main program", 355).f_name[3] = "Ca\361a de Pescar";
		a_item("main program", 355).f_type = 15;
		a_item("main program", 355).f_use_type = 3;
		a_item("main program", 355).f_einkauf = 15;
		a_item("main program", 355).f_verkauf = 7;
		a_item("main program", 355).f_gewicht = 4;
		a_item("main program", 356).f_name[2] = "Fisch";
		a_item("main program", 356).f_name[1] = "Fish";
		a_item("main program", 356).f_name[3] = "Pescado";
		a_item("main program", 356).f_type = 3;
		a_item("main program", 356).f_use_type = 3;
		a_item("main program", 356).f_einkauf = 4;
		a_item("main program", 356).f_verkauf = 2;
		a_item("main program", 356).f_gewicht = 2;
		a_item("main program", 356).f_attri1 = 60;
		a_item("main program", 165).f_name[2] = "Gefrorene Blitze";
		a_item("main program", 165).f_name[1] = "Frozen Lightning";
		a_item("main program", 165).f_name[3] = "Rayos Helados";
		a_item("main program", 165).f_info[2] = "Blitzschlag";
		a_item("main program", 165).f_info[1] = "Lightning bolt";
		a_item("main program", 165).f_info[3] = "Rel\341mpago";
		a_item("main program", 165).f_type = 15;
		a_item("main program", 165).f_use_type = 2;
		a_item("main program", 165).f_einkauf = 500;
		a_item("main program", 165).f_verkauf = 250;
		a_item("main program", 165).f_gewicht = 2;
		a_item("main program", 165).f_attri1 = 15;
		a_item("main program", 289).f_name[2] = "Fallenwerkzeug";
		a_item("main program", 289).f_name[1] = "Trap Toolkit";
		a_item("main program", 289).f_name[3] = "Herramientos para Trampas";
		a_item("main program", 289).f_info[2] = "Zerst\366rt Fallen";
		a_item("main program", 289).f_info[1] = "Disarms traps";
		a_item("main program", 289).f_info[3] = "Destruye trampas";
		a_item("main program", 289).f_type = 15;
		a_item("main program", 289).f_use_type = 2;
		a_item("main program", 289).f_einkauf = 100;
		a_item("main program", 289).f_verkauf = 50;
		a_item("main program", 289).f_gewicht = 2;
		a_item("main program", 289).f_attri1 = 10;
		a_item("main program", 280).f_name[2] = "Goldene Stabaxt (2h)";
		a_item("main program", 280).f_name[1] = "Golden Poleaxe (2h)";
		a_item("main program", 280).f_name[3] = "Hacha de Oro (2M)";
		a_item("main program", 280).f_type = 1;
		a_item("main program", 280).f_use_type = 1;
		a_item("main program", 280).f_klasse = 8;
		a_item("main program", 280).f_einkauf = 140;
		a_item("main program", 280).f_verkauf = 70;
		a_item("main program", 280).f_gewicht = 35;
		a_item("main program", 280).f_attri1 = 3;
		a_item("main program", 280).f_attri2 = 8;
		a_item("main program", 280).f_attri3 = 10;
		a_item("main program", 280).f_attri4 = 2;
		a_item("main program", 281).f_name[2] = "Goldener Kriegshammer";
		a_item("main program", 281).f_name[1] = "Golden Warhammer";
		a_item("main program", 281).f_name[3] = "Martillo de Guerra de Oro";
		a_item("main program", 281).f_type = 1;
		a_item("main program", 281).f_use_type = 1;
		a_item("main program", 281).f_klasse = 4;
		a_item("main program", 281).f_einkauf = 120;
		a_item("main program", 281).f_verkauf = 60;
		a_item("main program", 281).f_gewicht = 45;
		a_item("main program", 281).f_attri1 = 0;
		a_item("main program", 281).f_attri2 = 4;
		a_item("main program", 281).f_attri3 = 8;
		a_item("main program", 281).f_attri4 = 1;
		a_item("main program", 286).f_name[2] = "Roter Speer";
		a_item("main program", 286).f_name[1] = "Red Spear";
		a_item("main program", 286).f_name[3] = "Lanza Roja";
		a_item("main program", 286).f_type = 1;
		a_item("main program", 286).f_use_type = 1;
		a_item("main program", 286).f_klasse = 3;
		a_item("main program", 286).f_einkauf = 100;
		a_item("main program", 286).f_verkauf = 50;
		a_item("main program", 286).f_gewicht = 25;
		a_item("main program", 286).f_attri1 = 2;
		a_item("main program", 286).f_attri2 = 5;
		a_item("main program", 286).f_attri3 = 12;
		a_item("main program", 286).f_attri4 = 1;
		a_item("main program", 284).f_name[2] = "Goldener Dreizack (2H)";
		a_item("main program", 284).f_name[1] = "Golden Pike (2H)";
		a_item("main program", 284).f_name[3] = "Pica de Oro (2M)";
		a_item("main program", 284).f_type = 1;
		a_item("main program", 284).f_use_type = 1;
		a_item("main program", 284).f_klasse = 8;
		a_item("main program", 284).f_einkauf = 120;
		a_item("main program", 284).f_verkauf = 60;
		a_item("main program", 284).f_gewicht = 35;
		a_item("main program", 284).f_attri1 = 1;
		a_item("main program", 284).f_attri2 = 6;
		a_item("main program", 284).f_attri3 = 12;
		a_item("main program", 284).f_attri4 = 2;
		a_item("main program", 287).f_name[2] = "Blutige Streitaxt (2H)";
		a_item("main program", 287).f_name[1] = "Bloody Battleaxe (2H)";
		a_item("main program", 287).f_name[3] = "Hacha de Combate de la Sangre (2M)";
		a_item("main program", 287).f_type = 1;
		a_item("main program", 287).f_use_type = 1;
		a_item("main program", 287).f_klasse = 2;
		a_item("main program", 287).f_einkauf = 140;
		a_item("main program", 287).f_verkauf = 70;
		a_item("main program", 287).f_gewicht = 35;
		a_item("main program", 287).f_attri1 = 3;
		a_item("main program", 287).f_attri2 = 7;
		a_item("main program", 287).f_attri3 = 9;
		a_item("main program", 287).f_attri4 = 2;
		a_item("main program", 288).f_name[2] = "Goldener Streitkolben";
		a_item("main program", 288).f_name[1] = "Golden Battlemace";
		a_item("main program", 288).f_name[3] = "Hacha de Oro";
		a_item("main program", 288).f_type = 1;
		a_item("main program", 288).f_use_type = 1;
		a_item("main program", 288).f_klasse = 4;
		a_item("main program", 288).f_einkauf = 130;
		a_item("main program", 288).f_verkauf = 65;
		a_item("main program", 288).f_gewicht = 30;
		a_item("main program", 288).f_attri1 = 1;
		a_item("main program", 288).f_attri2 = 5;
		a_item("main program", 288).f_attri3 = 8;
		a_item("main program", 288).f_attri4 = 1;
		a_item("main program", 357).f_name[2] = "Stahlhelm";
		a_item("main program", 357).f_name[1] = "Steel Helmet";
		a_item("main program", 357).f_name[3] = "Casco de Acero";
		a_item("main program", 357).f_type = 6;
		a_item("main program", 357).f_use_type = 1;
		a_item("main program", 357).f_einkauf = 25;
		a_item("main program", 357).f_verkauf = 12;
		a_item("main program", 357).f_gewicht = 10;
		a_item("main program", 357).f_attri1 = 1;
		a_item("main program", 357).f_attri2 = 1;
		a_item("main program", 357).f_attri3 = 2;
		a_item("main program", 358).f_name[2] = "Stahlhelm mit Kette";
		a_item("main program", 358).f_name[1] = "Steel Helmet with Chain";
		a_item("main program", 358).f_name[3] = "Casco de Acero con Cadena";
		a_item("main program", 358).f_type = 6;
		a_item("main program", 358).f_use_type = 1;
		a_item("main program", 358).f_einkauf = 35;
		a_item("main program", 358).f_verkauf = 17;
		a_item("main program", 358).f_gewicht = 12;
		a_item("main program", 358).f_attri1 = 1;
		a_item("main program", 358).f_attri2 = 1;
		a_item("main program", 358).f_attri3 = 3;
		a_item("main program", 359).f_name[2] = "Dolchs\344ge";
		a_item("main program", 359).f_name[1] = "Dagger Saw";
		a_item("main program", 359).f_name[3] = "Daga con Sierra";
		a_item("main program", 359).f_type = 1;
		a_item("main program", 359).f_use_type = 1;
		a_item("main program", 359).f_klasse = 5;
		a_item("main program", 359).f_einkauf = 8;
		a_item("main program", 359).f_verkauf = 4;
		a_item("main program", 359).f_gewicht = 4;
		a_item("main program", 359).f_attri1 = 0;
		a_item("main program", 359).f_attri2 = 2;
		a_item("main program", 359).f_attri3 = 6;
		a_item("main program", 359).f_attri4 = 1;
		a_item("main program", 360).f_name[2] = "Foil";
		a_item("main program", 360).f_name[1] = "Florett";
		a_item("main program", 360).f_name[3] = "Florete";
		a_item("main program", 360).f_type = 1;
		a_item("main program", 360).f_use_type = 1;
		a_item("main program", 360).f_klasse = 7;
		a_item("main program", 360).f_einkauf = 18;
		a_item("main program", 360).f_verkauf = 9;
		a_item("main program", 360).f_gewicht = 10;
		a_item("main program", 360).f_attri1 = 1;
		a_item("main program", 360).f_attri2 = 2;
		a_item("main program", 360).f_attri3 = 8;
		a_item("main program", 360).f_attri4 = 1;
		a_item("main program", 361).f_name[2] = "Langdolch";
		a_item("main program", 361).f_name[1] = "Long Dagger";
		a_item("main program", 361).f_name[3] = "Daga Larga";
		a_item("main program", 361).f_type = 1;
		a_item("main program", 361).f_use_type = 1;
		a_item("main program", 361).f_klasse = 5;
		a_item("main program", 361).f_einkauf = 10;
		a_item("main program", 361).f_verkauf = 5;
		a_item("main program", 361).f_gewicht = 5;
		a_item("main program", 361).f_attri1 = 0;
		a_item("main program", 361).f_attri2 = 2;
		a_item("main program", 361).f_attri3 = 7;
		a_item("main program", 361).f_attri4 = 1;
		a_item("main program", 362).f_name[2] = "Langdolch 2";
		a_item("main program", 362).f_name[1] = "Long Dagger 2";
		a_item("main program", 362).f_name[3] = "Daga Larga 2";
		a_item("main program", 362).f_type = 1;
		a_item("main program", 362).f_use_type = 1;
		a_item("main program", 362).f_klasse = 5;
		a_item("main program", 362).f_einkauf = 12;
		a_item("main program", 362).f_verkauf = 6;
		a_item("main program", 362).f_gewicht = 6;
		a_item("main program", 362).f_attri1 = 0;
		a_item("main program", 362).f_attri2 = 2;
		a_item("main program", 362).f_attri3 = 9;
		a_item("main program", 362).f_attri4 = 1;
		a_item("main program", 363).f_name[2] = "Kurzschwert";
		a_item("main program", 363).f_name[1] = "Shortsword";
		a_item("main program", 363).f_name[3] = "Espada Corta";
		a_item("main program", 363).f_type = 1;
		a_item("main program", 363).f_use_type = 1;
		a_item("main program", 363).f_klasse = 1;
		a_item("main program", 363).f_einkauf = 30;
		a_item("main program", 363).f_verkauf = 15;
		a_item("main program", 363).f_gewicht = 15;
		a_item("main program", 363).f_attri1 = 1;
		a_item("main program", 363).f_attri2 = 2;
		a_item("main program", 363).f_attri3 = 5;
		a_item("main program", 363).f_attri4 = 1;
		a_item("main program", 364).f_name[2] = "Falchion";
		a_item("main program", 364).f_name[1] = "Falchion";
		a_item("main program", 364).f_name[3] = "Bachete";
		a_item("main program", 364).f_type = 1;
		a_item("main program", 364).f_use_type = 1;
		a_item("main program", 364).f_klasse = 1;
		a_item("main program", 364).f_einkauf = 50;
		a_item("main program", 364).f_verkauf = 25;
		a_item("main program", 364).f_gewicht = 25;
		a_item("main program", 364).f_attri1 = 1;
		a_item("main program", 364).f_attri2 = 3;
		a_item("main program", 364).f_attri3 = 10;
		a_item("main program", 364).f_attri4 = 1;
		a_item("main program", 365).f_name[2] = "Gewellter Dolch";
		a_item("main program", 365).f_name[1] = "Serpent Dagger";
		a_item("main program", 365).f_name[3] = "Daga con Forma de Serpiente";
		a_item("main program", 365).f_type = 1;
		a_item("main program", 365).f_use_type = 1;
		a_item("main program", 365).f_klasse = 5;
		a_item("main program", 365).f_einkauf = 14;
		a_item("main program", 365).f_verkauf = 7;
		a_item("main program", 365).f_gewicht = 6;
		a_item("main program", 365).f_attri1 = 0;
		a_item("main program", 365).f_attri2 = 2;
		a_item("main program", 365).f_attri3 = 12;
		a_item("main program", 365).f_attri4 = 1;
		a_item("main program", 366).f_name[2] = "Falchion 2";
		a_item("main program", 366).f_name[1] = "Falchion 2";
		a_item("main program", 366).f_name[3] = "Machete 2";
		a_item("main program", 366).f_type = 1;
		a_item("main program", 366).f_use_type = 1;
		a_item("main program", 366).f_klasse = 1;
		a_item("main program", 366).f_einkauf = 60;
		a_item("main program", 366).f_verkauf = 30;
		a_item("main program", 366).f_gewicht = 30;
		a_item("main program", 366).f_attri1 = 1;
		a_item("main program", 366).f_attri2 = 3;
		a_item("main program", 366).f_attri3 = 15;
		a_item("main program", 366).f_attri4 = 1;
		a_item("main program", 368).f_name[2] = "Breitschwert";
		a_item("main program", 368).f_name[1] = "Broadsword";
		a_item("main program", 368).f_name[3] = "Espada Gruesa";
		a_item("main program", 368).f_type = 1;
		a_item("main program", 368).f_use_type = 1;
		a_item("main program", 368).f_klasse = 1;
		a_item("main program", 368).f_einkauf = 50;
		a_item("main program", 368).f_verkauf = 25;
		a_item("main program", 368).f_gewicht = 30;
		a_item("main program", 368).f_attri1 = 1;
		a_item("main program", 368).f_attri2 = 4;
		a_item("main program", 368).f_attri3 = 0;
		a_item("main program", 368).f_attri4 = 1;
		a_item("main program", 369).f_name[2] = "Breitschwert 2";
		a_item("main program", 369).f_name[1] = "Broadsword 2";
		a_item("main program", 369).f_name[3] = "Espada Gruesa 2";
		a_item("main program", 369).f_type = 1;
		a_item("main program", 369).f_use_type = 1;
		a_item("main program", 369).f_klasse = 1;
		a_item("main program", 369).f_einkauf = 60;
		a_item("main program", 369).f_verkauf = 30;
		a_item("main program", 369).f_gewicht = 32;
		a_item("main program", 369).f_attri1 = 1;
		a_item("main program", 369).f_attri2 = 4;
		a_item("main program", 369).f_attri3 = 5;
		a_item("main program", 369).f_attri4 = 1;
		a_item("main program", 370).f_name[2] = "Zweih\344nder";
		a_item("main program", 370).f_name[1] = "Two-Handed Sword";
		a_item("main program", 370).f_name[3] = "Espada a Dos Manos";
		a_item("main program", 370).f_type = 1;
		a_item("main program", 370).f_use_type = 1;
		a_item("main program", 370).f_klasse = 1;
		a_item("main program", 370).f_einkauf = 80;
		a_item("main program", 370).f_verkauf = 40;
		a_item("main program", 370).f_gewicht = 35;
		a_item("main program", 370).f_attri1 = 2;
		a_item("main program", 370).f_attri2 = 6;
		a_item("main program", 370).f_attri3 = 5;
		a_item("main program", 370).f_attri4 = 2;
		a_item("main program", 371).f_name[2] = "Zweih\344nder 2";
		a_item("main program", 371).f_name[1] = "Two-Handed Sword 2";
		a_item("main program", 371).f_name[3] = "Espada a Dos Manos 2";
		a_item("main program", 371).f_type = 1;
		a_item("main program", 371).f_use_type = 1;
		a_item("main program", 371).f_klasse = 1;
		a_item("main program", 371).f_einkauf = 90;
		a_item("main program", 371).f_verkauf = 45;
		a_item("main program", 371).f_gewicht = 40;
		a_item("main program", 371).f_attri1 = 2;
		a_item("main program", 371).f_attri2 = 6;
		a_item("main program", 371).f_attri3 = 10;
		a_item("main program", 371).f_attri4 = 2;
		a_item("main program", 372).f_name[2] = "Stahl Hellebarde (2H)";
		a_item("main program", 372).f_name[1] = "Steel Poleaxe (2H)";
		a_item("main program", 372).f_name[3] = "Hacha de Acero (2M)";
		a_item("main program", 372).f_type = 1;
		a_item("main program", 372).f_use_type = 1;
		a_item("main program", 372).f_klasse = 8;
		a_item("main program", 372).f_einkauf = 80;
		a_item("main program", 372).f_verkauf = 40;
		a_item("main program", 372).f_gewicht = 45;
		a_item("main program", 372).f_attri1 = 2;
		a_item("main program", 372).f_attri2 = 6;
		a_item("main program", 372).f_attri3 = 10;
		a_item("main program", 372).f_attri4 = 2;
		a_item("main program", 373).f_name[2] = "Stahl Helebarde 2 (2H)";
		a_item("main program", 373).f_name[1] = "Steel Poleaxe 2 (2H)";
		a_item("main program", 373).f_name[3] = "Hacha de Acero 2 (2M)";
		a_item("main program", 373).f_type = 1;
		a_item("main program", 373).f_use_type = 1;
		a_item("main program", 373).f_klasse = 8;
		a_item("main program", 373).f_einkauf = 90;
		a_item("main program", 373).f_verkauf = 45;
		a_item("main program", 373).f_gewicht = 47;
		a_item("main program", 373).f_attri1 = 2;
		a_item("main program", 373).f_attri2 = 7;
		a_item("main program", 373).f_attri3 = 12;
		a_item("main program", 373).f_attri4 = 2;
		a_item("main program", 374).f_name[2] = "Holz Sense";
		a_item("main program", 374).f_name[1] = "Wooden Sickle";
		a_item("main program", 374).f_name[3] = "Hoz de Madera";
		a_item("main program", 374).f_type = 1;
		a_item("main program", 374).f_use_type = 1;
		a_item("main program", 374).f_einkauf = 30;
		a_item("main program", 374).f_verkauf = 15;
		a_item("main program", 374).f_gewicht = 20;
		a_item("main program", 374).f_attri1 = 0;
		a_item("main program", 374).f_attri2 = 4;
		a_item("main program", 374).f_attri3 = 15;
		a_item("main program", 374).f_attri4 = 2;
		a_item("main program", 375).f_name[2] = "Stahl Sense";
		a_item("main program", 375).f_name[1] = "Steel Sickle";
		a_item("main program", 375).f_name[3] = "Hoz de Acero";
		a_item("main program", 375).f_type = 1;
		a_item("main program", 375).f_use_type = 1;
		a_item("main program", 375).f_einkauf = 50;
		a_item("main program", 375).f_verkauf = 25;
		a_item("main program", 375).f_gewicht = 25;
		a_item("main program", 375).f_attri1 = 0;
		a_item("main program", 375).f_attri2 = 5;
		a_item("main program", 375).f_attri3 = 15;
		a_item("main program", 375).f_attri4 = 2;
		a_item("main program", 347).f_name[2] = "Schuhe des Wasserwandelns";
		a_item("main program", 347).f_name[1] = "Shoes of Waterwalking";
		a_item("main program", 347).f_name[3] = "Zapatos del Caminante del Agua";
		a_item("main program", 347).f_type = 8;
		a_item("main program", 347).f_use_type = 1;
		a_item("main program", 347).f_einkauf = 200;
		a_item("main program", 347).f_verkauf = 100;
		a_item("main program", 347).f_gewicht = 3;
		a_item("main program", 347).f_attri1 = 0;
		a_item("main program", 347).f_attri2 = 0;
		a_item("main program", 347).f_attri3 = 1;
		a_item("main program", 348).f_name[2] = "Schuhe des Eiswandelns";
		a_item("main program", 348).f_name[1] = "Shoes of Icewalking";
		a_item("main program", 348).f_name[3] = "Zapatos del Caminante del Hielo";
		a_item("main program", 348).f_type = 8;
		a_item("main program", 348).f_use_type = 1;
		a_item("main program", 348).f_einkauf = 200;
		a_item("main program", 348).f_verkauf = 100;
		a_item("main program", 348).f_gewicht = 3;
		a_item("main program", 348).f_attri1 = 0;
		a_item("main program", 348).f_attri2 = 0;
		a_item("main program", 348).f_attri3 = 1;
		a_item("main program", 349).f_name[2] = "Schuhe des Feuerwandelns";
		a_item("main program", 349).f_name[1] = "Shoes of Firewalking";
		a_item("main program", 349).f_name[3] = "Zapatos del Caminante del Fuego";
		a_item("main program", 349).f_type = 8;
		a_item("main program", 349).f_use_type = 1;
		a_item("main program", 349).f_einkauf = 200;
		a_item("main program", 349).f_verkauf = 100;
		a_item("main program", 349).f_gewicht = 3;
		a_item("main program", 349).f_attri1 = 0;
		a_item("main program", 349).f_attri2 = 0;
		a_item("main program", 349).f_attri3 = 1;
		a_item("main program", 150).f_name[2] = "Geldbeutel";
		a_item("main program", 150).f_name[1] = "Moneybag";
		a_item("main program", 150).f_name[3] = "Billetera";
		a_item("main program", 150).f_type = 15;
		a_item("main program", 150).f_use_type = 0;
		a_item("main program", 150).f_gewicht = 1;
		a_item("main program", 351).f_name[2] = "Horn Eines Einhorns (Heilt Gift)";
		a_item("main program", 351).f_name[1] = "Unicorn Horn (Heals Poison)";
		a_item("main program", 351).f_name[3] = "Cornudo de Unicornio (Cura Veneno)";
		a_item("main program", 351).f_type = 15;
		a_item("main program", 351).f_use_type = 2;
		a_item("main program", 351).f_einkauf = 40;
		a_item("main program", 351).f_verkauf = 20;
		a_item("main program", 351).f_gewicht = 2;
		a_item("main program", 354).f_name[2] = "Crysolit";
		a_item("main program", 354).f_name[1] = "Crysolit";
		a_item("main program", 354).f_name[3] = "Crysolit";
		a_item("main program", 354).f_type = 15;
		a_item("main program", 354).f_use_type = 2;
		a_item("main program", 354).f_einkauf = 6;
		a_item("main program", 354).f_verkauf = 3;
		a_item("main program", 354).f_gewicht = 1;
		a_item("main program", 171).f_name[2] = "Pfeile der Naga";
		a_item("main program", 171).f_name[1] = "Naga Arrows";
		a_item("main program", 171).f_name[3] = "Flechas del Naga";
		a_item("main program", 171).f_type = 13;
		a_item("main program", 171).f_use_type = 1;
		a_item("main program", 171).f_qualitaet = 2;
		a_item("main program", 171).f_einkauf = 12;
		a_item("main program", 171).f_verkauf = 6;
		a_item("main program", 171).f_gewicht = 1;
		a_item("main program", 171).f_magisch = 1;
		a_item("main program", 171).f_attri1 = 10;
		a_item("main program", 171).f_attri2 = 0;
		a_item("main program", 171).f_attri3 = 1;
		a_item("main program", 171).f_attri4 = 5;
		a_item("main program", 249).f_name[2] = "Buch des Wissens";
		a_item("main program", 249).f_name[1] = "Lorebook";
		a_item("main program", 249).f_name[3] = "Libro de Sabiduria";
		a_item("main program", 249).f_type = 15;
		a_item("main program", 249).f_use_type = 6;
		a_item("main program", 249).f_einkauf = 150;
		a_item("main program", 249).f_verkauf = 75;
		a_item("main program", 249).f_gewicht = 2;
		a_item("main program", 159).f_name[2] = "Tor des Universums";
		a_item("main program", 159).f_name[1] = "Dimensional Gate";
		a_item("main program", 159).f_name[3] = "Puerta Dimensional";
		a_item("main program", 159).f_type = 15;
		a_item("main program", 159).f_use_type = 2;
		a_item("main program", 159).f_qualitaet = 2;
		a_item("main program", 159).f_einkauf = 1500;
		a_item("main program", 159).f_verkauf = 750;
		a_item("main program", 159).f_gewicht = 4;
		a_item("main program", 159).f_unique = 1;
		a_item("main program", 159).f_attri1 = 3;
		a_item("main program", 376).f_name[2] = "Flammenaxt";
		a_item("main program", 376).f_name[1] = "Flaming Axe";
		a_item("main program", 376).f_name[3] = "Hacha Llameante";
		a_item("main program", 376).f_type = 1;
		a_item("main program", 376).f_use_type = 1;
		a_item("main program", 376).f_klasse = 2;
		a_item("main program", 376).f_einkauf = 650;
		a_item("main program", 376).f_verkauf = 325;
		a_item("main program", 376).f_gewicht = 28;
		a_item("main program", 376).f_magisch = 1;
		a_item("main program", 376).f_attri1 = 2;
		a_item("main program", 376).f_attri2 = 4;
		a_item("main program", 376).f_attri3 = 9;
		a_item("main program", 376).f_attri4 = 1;
		a_item("main program", 377).f_name[2] = "Flammenspeer (2H)";
		a_item("main program", 377).f_name[1] = "Flaming Spear (2H)";
		a_item("main program", 377).f_name[3] = "Lanza Llameante (2M)";
		a_item("main program", 377).f_type = 1;
		a_item("main program", 377).f_use_type = 1;
		a_item("main program", 377).f_klasse = 3;
		a_item("main program", 377).f_einkauf = 700;
		a_item("main program", 377).f_verkauf = 350;
		a_item("main program", 377).f_gewicht = 30;
		a_item("main program", 377).f_magisch = 1;
		a_item("main program", 377).f_attri1 = 2;
		a_item("main program", 377).f_attri2 = 5;
		a_item("main program", 377).f_attri3 = 7;
		a_item("main program", 377).f_attri4 = 2;
		a_item("main program", 378).f_name[2] = "Eisaxt";
		a_item("main program", 378).f_name[1] = "Ice Axe";
		a_item("main program", 378).f_name[3] = "Hacha de Hielo";
		a_item("main program", 378).f_type = 1;
		a_item("main program", 378).f_use_type = 1;
		a_item("main program", 378).f_klasse = 2;
		a_item("main program", 378).f_einkauf = 650;
		a_item("main program", 378).f_verkauf = 325;
		a_item("main program", 378).f_gewicht = 28;
		a_item("main program", 378).f_magisch = 1;
		a_item("main program", 378).f_attri1 = 2;
		a_item("main program", 378).f_attri2 = 4;
		a_item("main program", 378).f_attri3 = 9;
		a_item("main program", 378).f_attri4 = 1;
		a_item("main program", 379).f_name[2] = "Eisspeer (2H)";
		a_item("main program", 379).f_name[1] = "Ice Spear (2H)";
		a_item("main program", 379).f_name[3] = "Lanza de Hielo (2M)";
		a_item("main program", 379).f_type = 1;
		a_item("main program", 379).f_use_type = 1;
		a_item("main program", 379).f_klasse = 3;
		a_item("main program", 379).f_einkauf = 700;
		a_item("main program", 379).f_verkauf = 350;
		a_item("main program", 379).f_gewicht = 30;
		a_item("main program", 379).f_magisch = 1;
		a_item("main program", 379).f_attri1 = 2;
		a_item("main program", 379).f_attri2 = 5;
		a_item("main program", 379).f_attri3 = 7;
		a_item("main program", 379).f_attri4 = 2;
		a_item("main program", 381).f_name[2] = "Giftige Axt";
		a_item("main program", 381).f_name[1] = "Poison Axe";
		a_item("main program", 381).f_name[3] = "Hacha de Veneno";
		a_item("main program", 381).f_type = 1;
		a_item("main program", 381).f_use_type = 1;
		a_item("main program", 381).f_klasse = 2;
		a_item("main program", 381).f_einkauf = 650;
		a_item("main program", 381).f_verkauf = 325;
		a_item("main program", 381).f_gewicht = 28;
		a_item("main program", 381).f_magisch = 1;
		a_item("main program", 381).f_attri1 = 2;
		a_item("main program", 381).f_attri2 = 4;
		a_item("main program", 381).f_attri3 = 9;
		a_item("main program", 381).f_attri4 = 1;
		a_item("main program", 382).f_name[2] = "Giftiger Speer (2H)";
		a_item("main program", 382).f_name[1] = "Poisonous Spear (2H)";
		a_item("main program", 382).f_name[3] = "Lanza de Veneno (2M)";
		a_item("main program", 382).f_type = 1;
		a_item("main program", 382).f_use_type = 1;
		a_item("main program", 382).f_klasse = 3;
		a_item("main program", 382).f_einkauf = 700;
		a_item("main program", 382).f_verkauf = 350;
		a_item("main program", 382).f_gewicht = 30;
		a_item("main program", 382).f_magisch = 1;
		a_item("main program", 382).f_attri1 = 2;
		a_item("main program", 382).f_attri2 = 5;
		a_item("main program", 382).f_attri3 = 7;
		a_item("main program", 382).f_attri4 = 2;
		a_item("main program", 49).f_name[2] = "Speer des Lichts (2H)";
		a_item("main program", 49).f_name[1] = "Spear of Light (2H)";
		a_item("main program", 49).f_name[3] = "Lanza de la Luz (2M)";
		a_item("main program", 49).f_type = 1;
		a_item("main program", 49).f_use_type = 1;
		a_item("main program", 49).f_klasse = 3;
		a_item("main program", 49).f_einkauf = 1000;
		a_item("main program", 49).f_verkauf = 500;
		a_item("main program", 49).f_gewicht = 30;
		a_item("main program", 49).f_magisch = 1;
		a_item("main program", 49).f_attri1 = 2;
		a_item("main program", 49).f_attri2 = 5;
		a_item("main program", 49).f_attri3 = 7;
		a_item("main program", 49).f_attri4 = 2;
		a_item("main program", 380).f_name[2] = "Magische Axt (2H)";
		a_item("main program", 380).f_name[1] = "Magic Axe (2H)";
		a_item("main program", 380).f_name[3] = "Hacha M\341gica (2M)";
		a_item("main program", 380).f_type = 1;
		a_item("main program", 380).f_use_type = 1;
		a_item("main program", 380).f_klasse = 2;
		a_item("main program", 380).f_einkauf = 600;
		a_item("main program", 380).f_verkauf = 300;
		a_item("main program", 380).f_gewicht = 20;
		a_item("main program", 380).f_magisch = 1;
		a_item("main program", 380).f_attri1 = 2;
		a_item("main program", 380).f_attri2 = 4;
		a_item("main program", 380).f_attri3 = 15;
		a_item("main program", 380).f_attri4 = 2;
		a_item("main program", 385).f_name[2] = "Axt des Lichts";
		a_item("main program", 385).f_name[1] = "Axe of Light";
		a_item("main program", 385).f_name[3] = "Hacha de la Luz";
		a_item("main program", 385).f_type = 1;
		a_item("main program", 385).f_use_type = 1;
		a_item("main program", 385).f_klasse = 2;
		a_item("main program", 385).f_einkauf = 1000;
		a_item("main program", 385).f_verkauf = 500;
		a_item("main program", 385).f_gewicht = 20;
		a_item("main program", 385).f_magisch = 1;
		a_item("main program", 385).f_attri1 = 2;
		a_item("main program", 385).f_attri2 = 4;
		a_item("main program", 385).f_attri3 = 9;
		a_item("main program", 385).f_attri4 = 1;
		a_item("main program", 383).f_name[2] = "Bier";
		a_item("main program", 383).f_name[1] = "Beer";
		a_item("main program", 383).f_name[3] = "Cerveza";
		a_item("main program", 383).f_type = 23;
		a_item("main program", 383).f_use_type = 4;
		a_item("main program", 383).f_einkauf = 5;
		a_item("main program", 383).f_verkauf = 2;
		a_item("main program", 383).f_gewicht = 2;
		a_item("main program", 383).f_attri1 = 35;
		a_item("main program", 383).f_attri2 = 20;
		a_item("main program", 384).f_name[2] = "Wein";
		a_item("main program", 384).f_name[1] = "Wine";
		a_item("main program", 384).f_name[3] = "Vino";
		a_item("main program", 384).f_type = 23;
		a_item("main program", 384).f_use_type = 4;
		a_item("main program", 384).f_einkauf = 6;
		a_item("main program", 384).f_verkauf = 3;
		a_item("main program", 384).f_gewicht = 2;
		a_item("main program", 384).f_attri1 = 35;
		a_item("main program", 384).f_attri2 = 30;
		a_item("main program", 170).f_name[2] = "Explodierende Pfeile";
		a_item("main program", 170).f_name[1] = "Exploding Arrows";
		a_item("main program", 170).f_name[3] = "Flechas Que Explotan";
		a_item("main program", 170).f_type = 13;
		a_item("main program", 170).f_use_type = 1;
		a_item("main program", 170).f_qualitaet = 2;
		a_item("main program", 170).f_einkauf = 10;
		a_item("main program", 170).f_verkauf = 5;
		a_item("main program", 170).f_gewicht = 1;
		a_item("main program", 170).f_magisch = 1;
		a_item("main program", 170).f_attri1 = 10;
		a_item("main program", 170).f_attri2 = 0;
		a_item("main program", 170).f_attri3 = 2;
		a_item("main program", 170).f_attri4 = 5;
		a_item("main program", 173).f_name[2] = "Zielsuchende Pfeile";
		a_item("main program", 173).f_name[1] = "Aiming Arrows";
		a_item("main program", 173).f_name[3] = "Flechas de Alcanzar";
		a_item("main program", 173).f_type = 13;
		a_item("main program", 173).f_use_type = 1;
		a_item("main program", 173).f_qualitaet = 2;
		a_item("main program", 173).f_einkauf = 8;
		a_item("main program", 173).f_verkauf = 4;
		a_item("main program", 173).f_gewicht = 1;
		a_item("main program", 173).f_magisch = 1;
		a_item("main program", 173).f_attri1 = 10;
		a_item("main program", 173).f_attri2 = 0;
		a_item("main program", 173).f_attri3 = 3;
		a_item("main program", 173).f_attri4 = 15;
		a_item("main program", 387).f_name[2] = "Stab der Pflanzenvernichtung";
		a_item("main program", 387).f_name[1] = "Staff of Destroy Plants";
		a_item("main program", 387).f_name[3] = "Vara de la Muerte de Plantas";
		a_item("main program", 387).f_type = 22;
		a_item("main program", 387).f_use_type = 2;
		a_item("main program", 387).f_qualitaet = 1;
		a_item("main program", 387).f_einkauf = 400;
		a_item("main program", 387).f_verkauf = 300;
		a_item("main program", 387).f_gewicht = 3;
		a_item("main program", 387).f_attri1 = 132;
		a_item("main program", 388).f_name[2] = "Stab des Vergiftens";
		a_item("main program", 388).f_name[1] = "Staff of Poisoning";
		a_item("main program", 388).f_name[3] = "Vara de Envenenar";
		a_item("main program", 388).f_type = 22;
		a_item("main program", 388).f_use_type = 2;
		a_item("main program", 388).f_qualitaet = 1;
		a_item("main program", 388).f_einkauf = 400;
		a_item("main program", 388).f_verkauf = 200;
		a_item("main program", 388).f_gewicht = 3;
		a_item("main program", 388).f_attri1 = 125;
		a_item("main program", 389).f_name[2] = "Stab des Ewigen Schlafes";
		a_item("main program", 389).f_name[1] = "Staff of Eternal Sleep";
		a_item("main program", 389).f_name[3] = "Vara de Dormir";
		a_item("main program", 389).f_type = 22;
		a_item("main program", 389).f_use_type = 2;
		a_item("main program", 389).f_qualitaet = 1;
		a_item("main program", 389).f_einkauf = 400;
		a_item("main program", 389).f_verkauf = 200;
		a_item("main program", 389).f_gewicht = 3;
		a_item("main program", 389).f_attri1 = 127;
		a_item("main program", 390).f_name[2] = "Stab der Telekinesis";
		a_item("main program", 390).f_name[1] = "Staff of Telekinesis";
		a_item("main program", 390).f_name[3] = "Vara de Telekinesis";
		a_item("main program", 390).f_type = 22;
		a_item("main program", 390).f_use_type = 2;
		a_item("main program", 390).f_qualitaet = 1;
		a_item("main program", 390).f_einkauf = 500;
		a_item("main program", 390).f_verkauf = 250;
		a_item("main program", 390).f_gewicht = 3;
		a_item("main program", 390).f_attri1 = 129;
		a_item("main program", 391).f_name[2] = "Stab der Luftleere";
		a_item("main program", 391).f_name[1] = "Staff of Vacuum";
		a_item("main program", 391).f_name[3] = "Vara del Vac\355o";
		a_item("main program", 391).f_type = 22;
		a_item("main program", 391).f_use_type = 2;
		a_item("main program", 391).f_qualitaet = 1;
		a_item("main program", 391).f_einkauf = 500;
		a_item("main program", 391).f_verkauf = 250;
		a_item("main program", 391).f_gewicht = 3;
		a_item("main program", 391).f_attri1 = 131;
		a_item("main program", 392).f_name[2] = "Stab des Blendens";
		a_item("main program", 392).f_name[1] = "Staff of Blindness";
		a_item("main program", 392).f_name[3] = "Vara del Ciego";
		a_item("main program", 392).f_type = 22;
		a_item("main program", 392).f_use_type = 2;
		a_item("main program", 392).f_qualitaet = 1;
		a_item("main program", 392).f_einkauf = 500;
		a_item("main program", 392).f_verkauf = 250;
		a_item("main program", 392).f_gewicht = 3;
		a_item("main program", 392).f_attri1 = 137;
		a_item("main program", 393).f_name[2] = "Stab des Dimensionstausches";
		a_item("main program", 393).f_name[1] = "Staff of Planeshifting";
		a_item("main program", 393).f_name[3] = "Vara del Cambio de Dimensiones";
		a_item("main program", 393).f_type = 22;
		a_item("main program", 393).f_use_type = 2;
		a_item("main program", 393).f_qualitaet = 1;
		a_item("main program", 393).f_einkauf = 500;
		a_item("main program", 393).f_verkauf = 250;
		a_item("main program", 393).f_gewicht = 3;
		a_item("main program", 393).f_attri1 = 144;
		a_item("main program", 394).f_name[2] = "Stab des Verdorrens";
		a_item("main program", 394).f_name[1] = "Staff of Withering";
		a_item("main program", 394).f_name[3] = "Vara de la Marchitaci\363n";
		a_item("main program", 394).f_type = 22;
		a_item("main program", 394).f_use_type = 2;
		a_item("main program", 394).f_qualitaet = 1;
		a_item("main program", 394).f_einkauf = 500;
		a_item("main program", 394).f_verkauf = 250;
		a_item("main program", 394).f_gewicht = 3;
		a_item("main program", 394).f_attri1 = 149;
		a_item("main program", 395).f_name[2] = "Stab der Todeswolke";
		a_item("main program", 395).f_name[1] = "Staff of Deathcloud";
		a_item("main program", 395).f_name[3] = "Vara de la Nube de Muerte";
		a_item("main program", 395).f_type = 22;
		a_item("main program", 395).f_use_type = 2;
		a_item("main program", 395).f_qualitaet = 1;
		a_item("main program", 395).f_einkauf = 500;
		a_item("main program", 395).f_verkauf = 250;
		a_item("main program", 395).f_gewicht = 3;
		a_item("main program", 395).f_attri1 = 150;
		a_item("main program", 172).f_name[2] = "Frost Pfeile";
		a_item("main program", 172).f_name[1] = "Freezing Arrows";
		a_item("main program", 172).f_name[3] = "Flechas de Hielo";
		a_item("main program", 172).f_type = 13;
		a_item("main program", 172).f_use_type = 1;
		a_item("main program", 172).f_qualitaet = 2;
		a_item("main program", 172).f_einkauf = 10;
		a_item("main program", 172).f_verkauf = 5;
		a_item("main program", 172).f_gewicht = 1;
		a_item("main program", 172).f_magisch = 1;
		a_item("main program", 172).f_attri1 = 10;
		a_item("main program", 172).f_attri2 = 0;
		a_item("main program", 172).f_attri3 = 3;
		a_item("main program", 172).f_attri4 = 5;
		a_item("main program", 396).f_name[2] = "Honig";
		a_item("main program", 396).f_name[1] = "Honey";
		a_item("main program", 396).f_name[3] = "Miel";
		a_item("main program", 396).f_type = 3;
		a_item("main program", 396).f_use_type = 3;
		a_item("main program", 396).f_einkauf = 5;
		a_item("main program", 396).f_verkauf = 2;
		a_item("main program", 396).f_gewicht = 2;
		a_item("main program", 396).f_attri1 = 50;
		a_item("main program", 399).f_name[2] = "Stundenglas";
		a_item("main program", 399).f_name[1] = "Hourglass";
		a_item("main program", 399).f_name[3] = "Horas Cristal";
		a_item("main program", 399).f_info[2] = "(Setzt Zug zur\374ck)";
		a_item("main program", 399).f_info[1] = "(Reverts turn)";
		a_item("main program", 399).f_info[3] = "(Revierte el turno)";
		a_item("main program", 399).f_type = 15;
		a_item("main program", 399).f_use_type = 2;
		a_item("main program", 399).f_qualitaet = 2;
		a_item("main program", 399).f_einkauf = 800;
		a_item("main program", 399).f_verkauf = 450;
		a_item("main program", 399).f_gewicht = 1;
		a_item("main program", 399).f_attri1 = 10;
		a_item("main program", 400).f_name[2] = "Fliegender Besen";
		a_item("main program", 400).f_name[1] = "Broomstick";
		a_item("main program", 400).f_name[3] = "Escoba Voladora";
		a_item("main program", 400).f_info[2] = "nur f\374r Hexen";
		a_item("main program", 400).f_info[1] = "only for witches";
		a_item("main program", 400).f_info[3] = "Solo puede por bruja";
		a_item("main program", 400).f_type = 15;
		a_item("main program", 400).f_use_type = 2;
		a_item("main program", 400).f_einkauf = 700;
		a_item("main program", 400).f_verkauf = 0;
		a_item("main program", 400).f_gewicht = 10;
		a_item("main program", 401).f_name[2] = "Kalligrafie Set";
		a_item("main program", 401).f_name[1] = "Calligraphy Set";
		a_item("main program", 401).f_name[3] = "Instrumentos de Caligrafia";
		a_item("main program", 401).f_type = 15;
		a_item("main program", 401).f_use_type = 2;
		a_item("main program", 401).f_qualitaet = 2;
		a_item("main program", 401).f_einkauf = 100;
		a_item("main program", 401).f_verkauf = 50;
		a_item("main program", 401).f_gewicht = 2;
		a_item("main program", 401).f_attri1 = 3;
		a_item("main program", 233).f_name[2] = "Feuerhammer (2H)";
		a_item("main program", 233).f_name[1] = "Firehammer (2H)";
		a_item("main program", 233).f_name[3] = "Martillo de Fuego (2M)";
		a_item("main program", 233).f_type = 1;
		a_item("main program", 233).f_use_type = 1;
		a_item("main program", 233).f_klasse = 4;
		a_item("main program", 233).f_einkauf = 600;
		a_item("main program", 233).f_verkauf = 300;
		a_item("main program", 233).f_gewicht = 42;
		a_item("main program", 233).f_magisch = 1;
		a_item("main program", 233).f_attri1 = -1;
		a_item("main program", 233).f_attri2 = 5;
		a_item("main program", 233).f_attri3 = 12;
		a_item("main program", 233).f_attri4 = 2;
		a_item("main program", 234).f_name[2] = "Eisenhammer (2H)";
		a_item("main program", 234).f_name[1] = "Ironhammer (2H)";
		a_item("main program", 234).f_name[3] = "Martillo de Hierro (2M)";
		a_item("main program", 234).f_type = 1;
		a_item("main program", 234).f_use_type = 1;
		a_item("main program", 234).f_klasse = 4;
		a_item("main program", 234).f_einkauf = 40;
		a_item("main program", 234).f_verkauf = 20;
		a_item("main program", 234).f_gewicht = 38;
		a_item("main program", 234).f_attri1 = -1;
		a_item("main program", 234).f_attri2 = 4;
		a_item("main program", 234).f_attri3 = 10;
		a_item("main program", 234).f_attri4 = 2;
		a_item("main program", 235).f_name[2] = "Eishammer (2H)";
		a_item("main program", 235).f_name[1] = "Icehammer (2H)";
		a_item("main program", 235).f_name[3] = "Martillo de Hielo (2M)";
		a_item("main program", 235).f_type = 1;
		a_item("main program", 235).f_use_type = 1;
		a_item("main program", 235).f_klasse = 4;
		a_item("main program", 235).f_einkauf = 600;
		a_item("main program", 235).f_verkauf = 300;
		a_item("main program", 235).f_gewicht = 42;
		a_item("main program", 235).f_magisch = 1;
		a_item("main program", 235).f_attri1 = -1;
		a_item("main program", 235).f_attri2 = 5;
		a_item("main program", 235).f_attri3 = 12;
		a_item("main program", 235).f_attri4 = 2;
		a_item("main program", 236).f_name[2] = "Hammer des Lichts (2H)";
		a_item("main program", 236).f_name[1] = "Hammer of Light (2H)";
		a_item("main program", 236).f_name[3] = "Martillo de la Luz (2M)";
		a_item("main program", 236).f_type = 1;
		a_item("main program", 236).f_use_type = 1;
		a_item("main program", 236).f_klasse = 4;
		a_item("main program", 236).f_einkauf = 1000;
		a_item("main program", 236).f_verkauf = 500;
		a_item("main program", 236).f_gewicht = 35;
		a_item("main program", 236).f_magisch = 1;
		a_item("main program", 236).f_attri1 = -1;
		a_item("main program", 236).f_attri2 = 4;
		a_item("main program", 236).f_attri3 = 10;
		a_item("main program", 236).f_attri4 = 2;
		a_item("main program", 238).f_name[2] = "Gifthammer (2H)";
		a_item("main program", 238).f_name[1] = "Poison Hammer (2H)";
		a_item("main program", 238).f_name[3] = "Martillo de Veneno (2M)";
		a_item("main program", 238).f_type = 1;
		a_item("main program", 238).f_use_type = 1;
		a_item("main program", 238).f_klasse = 4;
		a_item("main program", 238).f_einkauf = 550;
		a_item("main program", 238).f_verkauf = 275;
		a_item("main program", 238).f_gewicht = 42;
		a_item("main program", 238).f_magisch = 1;
		a_item("main program", 238).f_attri1 = -1;
		a_item("main program", 238).f_attri2 = 5;
		a_item("main program", 238).f_attri3 = 12;
		a_item("main program", 238).f_attri4 = 2;
		a_item("main program", 38).f_name[2] = "Schriftrolle";
		a_item("main program", 38).f_name[1] = "Scroll";
		a_item("main program", 38).f_name[3] = "Hechizo";
		a_item("main program", 38).f_type = 5;
		a_item("main program", 38).f_use_type = 6;
		a_item("main program", 38).f_einkauf = 35;
		a_item("main program", 38).f_verkauf = 17;
		a_item("main program", 38).f_gewicht = 0;
		a_item("main program", 38).f_magisch = 0;
		a_item("main program", 403).f_name[2] = "Stab des letzten B\374ndnisses";
		a_item("main program", 403).f_name[1] = "Staff of the last covenant";
		a_item("main program", 403).f_name[3] = "Baston del ultimo convento";
		a_item("main program", 403).f_type = 24;
		a_item("main program", 403).f_use_type = 2;
		a_item("main program", 403).f_einkauf = 5000;
		a_item("main program", 403).f_verkauf = 2000;
		a_item("main program", 403).f_gewicht = 1;
		a_item("main program", 403).f_attri1 = 1;
		a_item("main program", 404).f_name[2] = "Stab des letzten B\374ndnisses";
		a_item("main program", 404).f_name[1] = "Staff of the last covenant";
		a_item("main program", 404).f_name[3] = "Baston del ultimo convento";
		a_item("main program", 404).f_type = 24;
		a_item("main program", 404).f_use_type = 2;
		a_item("main program", 404).f_einkauf = 5000;
		a_item("main program", 404).f_verkauf = 2000;
		a_item("main program", 404).f_gewicht = 1;
		a_item("main program", 404).f_attri1 = 2;
		a_item("main program", 405).f_name[2] = "Stab des letzten B\374ndnisses";
		a_item("main program", 405).f_name[1] = "Staff of the last covenant";
		a_item("main program", 405).f_name[3] = "Baston del ultimo convento";
		a_item("main program", 405).f_type = 24;
		a_item("main program", 405).f_use_type = 2;
		a_item("main program", 405).f_einkauf = 5000;
		a_item("main program", 405).f_verkauf = 2000;
		a_item("main program", 405).f_gewicht = 1;
		a_item("main program", 405).f_attri1 = 3;
		a_item("main program", 406).f_name[2] = "Stab des letzten B\374ndnisses";
		a_item("main program", 406).f_name[1] = "Staff of the last covenant";
		a_item("main program", 406).f_name[3] = "Baston del ultimo convento";
		a_item("main program", 406).f_type = 24;
		a_item("main program", 406).f_use_type = 2;
		a_item("main program", 406).f_einkauf = 5000;
		a_item("main program", 406).f_verkauf = 2000;
		a_item("main program", 406).f_gewicht = 1;
		a_item("main program", 406).f_attri1 = 4;
		a_item("main program", 407).f_name[2] = "Stab des letzten B\374ndnisses";
		a_item("main program", 407).f_name[1] = "Staff of the last covenant";
		a_item("main program", 407).f_name[3] = "Baston del ultimo convento";
		a_item("main program", 407).f_type = 24;
		a_item("main program", 407).f_use_type = 2;
		a_item("main program", 407).f_einkauf = 5000;
		a_item("main program", 407).f_verkauf = 2000;
		a_item("main program", 407).f_gewicht = 1;
		a_item("main program", 407).f_attri1 = 5;
		a_item("main program", 408).f_name[2] = "Stab des letzten B\374ndnisses";
		a_item("main program", 408).f_name[1] = "Staff of the last covenant";
		a_item("main program", 408).f_name[3] = "Baston del ultimo convento";
		a_item("main program", 408).f_type = 24;
		a_item("main program", 408).f_use_type = 2;
		a_item("main program", 408).f_einkauf = 5000;
		a_item("main program", 408).f_verkauf = 2000;
		a_item("main program", 408).f_gewicht = 1;
		a_item("main program", 408).f_attri1 = 6;
		a_item("main program", 409).f_name[2] = "Stab des letzten B\374ndnisses";
		a_item("main program", 409).f_name[1] = "Staff of the last covenant";
		a_item("main program", 409).f_name[3] = "Baston del ultimo convento";
		a_item("main program", 409).f_type = 24;
		a_item("main program", 409).f_use_type = 2;
		a_item("main program", 409).f_einkauf = 5000;
		a_item("main program", 409).f_verkauf = 2000;
		a_item("main program", 409).f_gewicht = 1;
		a_item("main program", 409).f_attri1 = 7;
		a_item("main program", 410).f_name[2] = "Stab des letzten B\374ndnisses";
		a_item("main program", 410).f_name[1] = "Staff of the last covenant";
		a_item("main program", 410).f_name[3] = "Baston del ultimo convento";
		a_item("main program", 410).f_type = 24;
		a_item("main program", 410).f_use_type = 2;
		a_item("main program", 410).f_einkauf = 5000;
		a_item("main program", 410).f_verkauf = 2000;
		a_item("main program", 410).f_gewicht = 1;
		a_item("main program", 410).f_attri1 = 8;
		a_item("main program", 411).f_name[2] = "Stab des letzten B\374ndnisses";
		a_item("main program", 411).f_name[1] = "Staff of the last covenant";
		a_item("main program", 411).f_name[3] = "Baston del ultimo convento";
		a_item("main program", 411).f_type = 24;
		a_item("main program", 411).f_use_type = 2;
		a_item("main program", 411).f_einkauf = 5000;
		a_item("main program", 411).f_verkauf = 2000;
		a_item("main program", 411).f_gewicht = 1;
		a_item("main program", 411).f_attri1 = 9;
		for (v_i = 1; v_i <= 211; v_i += 1) {
			a_fields("main program", v_i).f_description[1] = "";
			a_fields("main program", v_i).f_description[2] = "";
			a_fields("main program", v_i).f_description[3] = "";
			a_fields("main program", v_i).f_water = 0;
			a_fields("main program", v_i).f_block_walk = 0;
			a_fields("main program", v_i).f_block_los = 0;
			a_fields("main program", v_i).f_block_item = 0;
			a_fields("main program", v_i).f_block_spawn = 0;
			a_fields("main program", v_i).f_attri_floor = 0;
		}
		v_act_field = 0;
		a_fields("main program", v_act_field).f_description[1] = "Empty";
		a_fields("main program", v_act_field).f_description[2] = "Leer";
		a_fields("main program", v_act_field).f_description[3] = "Vacio";
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 1;
		a_fields("main program", v_act_field).f_description[1] = "Wall";
		a_fields("main program", v_act_field).f_description[2] = "Mauer";
		a_fields("main program", v_act_field).f_description[3] = "Muro";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 2;
		a_fields("main program", v_act_field).f_description[1] = "Exit";
		a_fields("main program", v_act_field).f_description[2] = "Ausgang";
		a_fields("main program", v_act_field).f_description[3] = "Salida";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 3;
		a_fields("main program", v_act_field).f_description[1] = "Entry";
		a_fields("main program", v_act_field).f_description[2] = "Eingang";
		a_fields("main program", v_act_field).f_description[3] = "Entrada";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 4;
		a_fields("main program", v_act_field).f_description[1] = "Empty";
		a_fields("main program", v_act_field).f_description[2] = "Leer";
		a_fields("main program", v_act_field).f_description[3] = "Vacio";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 5;
		a_fields("main program", v_act_field).f_description[1] = "Skeleton";
		a_fields("main program", v_act_field).f_description[2] = "Skelett";
		a_fields("main program", v_act_field).f_description[3] = "Esqueleto";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 6;
		a_fields("main program", v_act_field).f_description[1] = "Chest";
		a_fields("main program", v_act_field).f_description[2] = "Truhe";
		a_fields("main program", v_act_field).f_description[3] = "Caja";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 7;
		a_fields("main program", v_act_field).f_description[1] = "Sanctum";
		a_fields("main program", v_act_field).f_description[2] = "Sanktum";
		a_fields("main program", v_act_field).f_description[3] = "Santuario";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 8;
		a_fields("main program", v_act_field).f_description[1] = "Nexus";
		a_fields("main program", v_act_field).f_description[2] = "Nexus";
		a_fields("main program", v_act_field).f_description[3] = "Nexo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 9;
		a_fields("main program", v_act_field).f_description[1] = "Gold";
		a_fields("main program", v_act_field).f_description[2] = "Gold";
		a_fields("main program", v_act_field).f_description[3] = "Oro";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 10;
		a_fields("main program", v_act_field).f_description[1] = "Cursor";
		a_fields("main program", v_act_field).f_description[2] = "Cursor";
		a_fields("main program", v_act_field).f_description[3] = "Cursor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 11;
		a_fields("main program", v_act_field).f_description[1] = "Cursor";
		a_fields("main program", v_act_field).f_description[2] = "Cursor";
		a_fields("main program", v_act_field).f_description[3] = "Cursor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 12;
		a_fields("main program", v_act_field).f_description[1] = "Cursor";
		a_fields("main program", v_act_field).f_description[2] = "Cursor";
		a_fields("main program", v_act_field).f_description[3] = "Cursor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 13;
		a_fields("main program", v_act_field).f_description[1] = "Cursor";
		a_fields("main program", v_act_field).f_description[2] = "Cursor";
		a_fields("main program", v_act_field).f_description[3] = "Cursor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 14;
		a_fields("main program", v_act_field).f_description[1] = "Cursor";
		a_fields("main program", v_act_field).f_description[2] = "Cursor";
		a_fields("main program", v_act_field).f_description[3] = "Cursor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 15;
		a_fields("main program", v_act_field).f_description[1] = "Books";
		a_fields("main program", v_act_field).f_description[2] = "B\374cher";
		a_fields("main program", v_act_field).f_description[3] = "Libros";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 16;
		a_fields("main program", v_act_field).f_description[1] = "Books";
		a_fields("main program", v_act_field).f_description[2] = "B\374cher";
		a_fields("main program", v_act_field).f_description[3] = "Libros";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 17;
		a_fields("main program", v_act_field).f_description[1] = "Laboratory";
		a_fields("main program", v_act_field).f_description[2] = "Labor";
		a_fields("main program", v_act_field).f_description[3] = "Laboratorio";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 18;
		a_fields("main program", v_act_field).f_description[1] = "Laboratory";
		a_fields("main program", v_act_field).f_description[2] = "Labor";
		a_fields("main program", v_act_field).f_description[3] = "Laboratorio";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 19;
		a_fields("main program", v_act_field).f_description[1] = "Switch";
		a_fields("main program", v_act_field).f_description[2] = "Schalter";
		a_fields("main program", v_act_field).f_description[3] = "Interruptor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 20;
		a_fields("main program", v_act_field).f_description[1] = "Wall";
		a_fields("main program", v_act_field).f_description[2] = "Wand";
		a_fields("main program", v_act_field).f_description[3] = "Muro";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 21;
		a_fields("main program", v_act_field).f_description[1] = "Door";
		a_fields("main program", v_act_field).f_description[2] = "T\374re";
		a_fields("main program", v_act_field).f_description[3] = "Puerta";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 22;
		a_fields("main program", v_act_field).f_description[1] = "Floor";
		a_fields("main program", v_act_field).f_description[2] = "Boden";
		a_fields("main program", v_act_field).f_description[3] = "Suelo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 23;
		a_fields("main program", v_act_field).f_description[1] = "Floor";
		a_fields("main program", v_act_field).f_description[2] = "Boden";
		a_fields("main program", v_act_field).f_description[3] = "Suelo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 24;
		a_fields("main program", v_act_field).f_description[1] = "Floor";
		a_fields("main program", v_act_field).f_description[2] = "Boden";
		a_fields("main program", v_act_field).f_description[3] = "Suelo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 25;
		a_fields("main program", v_act_field).f_description[1] = "Floor";
		a_fields("main program", v_act_field).f_description[2] = "Boden";
		a_fields("main program", v_act_field).f_description[3] = "Suelo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 26;
		a_fields("main program", v_act_field).f_description[1] = "Floor";
		a_fields("main program", v_act_field).f_description[2] = "Boden";
		a_fields("main program", v_act_field).f_description[3] = "Suelo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 27;
		a_fields("main program", v_act_field).f_description[1] = "Floor";
		a_fields("main program", v_act_field).f_description[2] = "Boden";
		a_fields("main program", v_act_field).f_description[3] = "Suelo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 28;
		a_fields("main program", v_act_field).f_description[1] = "Floor";
		a_fields("main program", v_act_field).f_description[2] = "Boden";
		a_fields("main program", v_act_field).f_description[3] = "Suelo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 29;
		a_fields("main program", v_act_field).f_description[1] = "Floor";
		a_fields("main program", v_act_field).f_description[2] = "Boden";
		a_fields("main program", v_act_field).f_description[3] = "Suelo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 30;
		a_fields("main program", v_act_field).f_description[1] = "Floor";
		a_fields("main program", v_act_field).f_description[2] = "Boden";
		a_fields("main program", v_act_field).f_description[3] = "Suelo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 30;
		a_fields("main program", v_act_field).f_description[1] = "Floor";
		a_fields("main program", v_act_field).f_description[2] = "Boden";
		a_fields("main program", v_act_field).f_description[3] = "Suelo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 31;
		a_fields("main program", v_act_field).f_description[1] = "Speartrap";
		a_fields("main program", v_act_field).f_description[2] = "Speerfalle";
		a_fields("main program", v_act_field).f_description[3] = "Trampa de Lanzas";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 32;
		a_fields("main program", v_act_field).f_description[1] = "Darttrap";
		a_fields("main program", v_act_field).f_description[2] = "Pfeilfalle";
		a_fields("main program", v_act_field).f_description[3] = "Trampa de Dartos";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 33;
		a_fields("main program", v_act_field).f_description[1] = "Trapdoor";
		a_fields("main program", v_act_field).f_description[2] = "Fallgrube";
		a_fields("main program", v_act_field).f_description[3] = "Trampillaa";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 34;
		a_fields("main program", v_act_field).f_description[1] = "Runetrap Poison";
		a_fields("main program", v_act_field).f_description[2] = "Runenfalle Gift";
		a_fields("main program", v_act_field).f_description[3] = "Trampa de Runas veneno";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 35;
		a_fields("main program", v_act_field).f_description[1] = "Runetrap Fire";
		a_fields("main program", v_act_field).f_description[2] = "Runenfalle Feuer";
		a_fields("main program", v_act_field).f_description[3] = "Trampa de Runas fuego";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 36;
		a_fields("main program", v_act_field).f_description[1] = "Runetrap Ice";
		a_fields("main program", v_act_field).f_description[2] = "Runenfalle Eis";
		a_fields("main program", v_act_field).f_description[3] = "Trampa de Runas hielo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 37;
		a_fields("main program", v_act_field).f_description[1] = "Mana Drain";
		a_fields("main program", v_act_field).f_description[2] = "Manaleere";
		a_fields("main program", v_act_field).f_description[3] = "Saca Mana";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 38;
		a_fields("main program", v_act_field).f_description[1] = "Axetrap";
		a_fields("main program", v_act_field).f_description[2] = "Axtfalle";
		a_fields("main program", v_act_field).f_description[3] = "Trampa de Hacha";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 39;
		a_fields("main program", v_act_field).f_description[1] = "Runetrap Curse";
		a_fields("main program", v_act_field).f_description[2] = "Runenfalle Fluch";
		a_fields("main program", v_act_field).f_description[3] = "Trampa de Runas Maldiccion";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 40;
		a_fields("main program", v_act_field).f_description[1] = "Fire";
		a_fields("main program", v_act_field).f_description[2] = "Feuer";
		a_fields("main program", v_act_field).f_description[3] = "Fuego";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 41;
		a_fields("main program", v_act_field).f_description[1] = "Fire";
		a_fields("main program", v_act_field).f_description[2] = "Feuer";
		a_fields("main program", v_act_field).f_description[3] = "Fuego";
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 42;
		a_fields("main program", v_act_field).f_description[1] = "Fire";
		a_fields("main program", v_act_field).f_description[2] = "Feuer";
		a_fields("main program", v_act_field).f_description[3] = "Fuego";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 43;
		a_fields("main program", v_act_field).f_description[1] = "Stars";
		a_fields("main program", v_act_field).f_description[2] = "Sterne";
		a_fields("main program", v_act_field).f_description[3] = "Estrellas";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 44;
		a_fields("main program", v_act_field).f_description[1] = "Stars";
		a_fields("main program", v_act_field).f_description[2] = "Sterne";
		a_fields("main program", v_act_field).f_description[3] = "Estrellas";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 45;
		a_fields("main program", v_act_field).f_description[1] = "Moon";
		a_fields("main program", v_act_field).f_description[2] = "Mond";
		a_fields("main program", v_act_field).f_description[3] = "Luna";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 46;
		a_fields("main program", v_act_field).f_description[1] = "Skeleton";
		a_fields("main program", v_act_field).f_description[2] = "Skelett";
		a_fields("main program", v_act_field).f_description[3] = "Esqueleto";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 47;
		a_fields("main program", v_act_field).f_description[1] = "Room";
		a_fields("main program", v_act_field).f_description[2] = "Raum";
		a_fields("main program", v_act_field).f_description[3] = "Habitaci\363n";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 48;
		a_fields("main program", v_act_field).f_description[1] = "Switch";
		a_fields("main program", v_act_field).f_description[2] = "Knopf";
		a_fields("main program", v_act_field).f_description[3] = "Interruptor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 49;
		a_fields("main program", v_act_field).f_description[1] = "Island";
		a_fields("main program", v_act_field).f_description[2] = "Insel";
		a_fields("main program", v_act_field).f_description[3] = "Isla";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 50;
		a_fields("main program", v_act_field).f_description[1] = "Island";
		a_fields("main program", v_act_field).f_description[2] = "Insel";
		a_fields("main program", v_act_field).f_description[3] = "Isla";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 51;
		a_fields("main program", v_act_field).f_description[1] = "Island";
		a_fields("main program", v_act_field).f_description[2] = "Insel";
		a_fields("main program", v_act_field).f_description[3] = "Isla";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 52;
		a_fields("main program", v_act_field).f_description[1] = "Island";
		a_fields("main program", v_act_field).f_description[2] = "Insel";
		a_fields("main program", v_act_field).f_description[3] = "Isla";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 53;
		a_fields("main program", v_act_field).f_description[1] = "Water";
		a_fields("main program", v_act_field).f_description[2] = "Wasser";
		a_fields("main program", v_act_field).f_description[3] = "Aqua";
		a_fields("main program", v_act_field).f_water = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 2;
		v_act_field = 54;
		a_fields("main program", v_act_field).f_description[1] = "Well";
		a_fields("main program", v_act_field).f_description[2] = "Brunnen";
		a_fields("main program", v_act_field).f_description[3] = "Fuente";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 55;
		a_fields("main program", v_act_field).f_description[1] = "Tombstone";
		a_fields("main program", v_act_field).f_description[2] = "Grabstein";
		a_fields("main program", v_act_field).f_description[3] = "L\341pida";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 56;
		a_fields("main program", v_act_field).f_description[1] = "Tree";
		a_fields("main program", v_act_field).f_description[2] = "Baum";
		a_fields("main program", v_act_field).f_description[3] = "Arbol";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 57;
		a_fields("main program", v_act_field).f_description[1] = "Tree";
		a_fields("main program", v_act_field).f_description[2] = "Baum";
		a_fields("main program", v_act_field).f_description[3] = "Arbol";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 58;
		a_fields("main program", v_act_field).f_description[1] = "Tree";
		a_fields("main program", v_act_field).f_description[2] = "Baum";
		a_fields("main program", v_act_field).f_description[3] = "Arbol";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 59;
		a_fields("main program", v_act_field).f_description[1] = "Tree";
		a_fields("main program", v_act_field).f_description[2] = "Baum";
		a_fields("main program", v_act_field).f_description[3] = "Arbol";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 60;
		a_fields("main program", v_act_field).f_description[1] = "Tree";
		a_fields("main program", v_act_field).f_description[2] = "Baum";
		a_fields("main program", v_act_field).f_description[3] = "Arbol";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 61;
		a_fields("main program", v_act_field).f_description[1] = "Tree";
		a_fields("main program", v_act_field).f_description[2] = "Baum";
		a_fields("main program", v_act_field).f_description[3] = "Arbol";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 62;
		a_fields("main program", v_act_field).f_description[1] = "Blue Chest";
		a_fields("main program", v_act_field).f_description[2] = "Blaue Truhe";
		a_fields("main program", v_act_field).f_description[3] = "Caja azul";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 63;
		a_fields("main program", v_act_field).f_description[1] = "Blue Chest";
		a_fields("main program", v_act_field).f_description[2] = "Blaue Truhe";
		a_fields("main program", v_act_field).f_description[3] = "Caja azul";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 64;
		a_fields("main program", v_act_field).f_description[1] = "Trader";
		a_fields("main program", v_act_field).f_description[2] = "H\344ndler";
		a_fields("main program", v_act_field).f_description[3] = "Commerciante";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 65;
		a_fields("main program", v_act_field).f_description[1] = "Campfire";
		a_fields("main program", v_act_field).f_description[2] = "Lagerfeuer";
		a_fields("main program", v_act_field).f_description[3] = "Fogata";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 66;
		a_fields("main program", v_act_field).f_description[1] = "Trader";
		a_fields("main program", v_act_field).f_description[2] = "H\344ndler";
		a_fields("main program", v_act_field).f_description[3] = "Commerciante";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 67;
		a_fields("main program", v_act_field).f_description[1] = "Green Chest";
		a_fields("main program", v_act_field).f_description[2] = "Gr\374ne Truhe";
		a_fields("main program", v_act_field).f_description[3] = "Caja verde";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 68;
		a_fields("main program", v_act_field).f_description[1] = "Green Chest";
		a_fields("main program", v_act_field).f_description[2] = "Gr\374ne Truhe";
		a_fields("main program", v_act_field).f_description[3] = "Caja verde";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 69;
		a_fields("main program", v_act_field).f_description[1] = "Hidden Treasure";
		a_fields("main program", v_act_field).f_description[2] = "Versteckter Schatz";
		a_fields("main program", v_act_field).f_description[3] = "Tesoro escondido";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 70;
		a_fields("main program", v_act_field).f_description[1] = "Door";
		a_fields("main program", v_act_field).f_description[2] = "T\374r";
		a_fields("main program", v_act_field).f_description[3] = "Puerta";
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 71;
		a_fields("main program", v_act_field).f_description[1] = "Door";
		a_fields("main program", v_act_field).f_description[2] = "T\374r";
		a_fields("main program", v_act_field).f_description[3] = "Puerta";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 72;
		a_fields("main program", v_act_field).f_description[1] = "Water";
		a_fields("main program", v_act_field).f_description[2] = "Wasser";
		a_fields("main program", v_act_field).f_description[3] = "Aqua";
		a_fields("main program", v_act_field).f_water = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 73;
		a_fields("main program", v_act_field).f_description[1] = "Shaft";
		a_fields("main program", v_act_field).f_description[2] = "Schacht";
		a_fields("main program", v_act_field).f_description[3] = "Agujero";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 74;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 75;
		a_fields("main program", v_act_field).f_description[1] = "Buried Treasire";
		a_fields("main program", v_act_field).f_description[2] = "Vergrabener Schatz";
		a_fields("main program", v_act_field).f_description[3] = "Tesoro enterrado";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 76;
		a_fields("main program", v_act_field).f_description[1] = "Water";
		a_fields("main program", v_act_field).f_description[2] = "Wasser";
		a_fields("main program", v_act_field).f_description[3] = "Aqua";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 77;
		a_fields("main program", v_act_field).f_description[1] = "Thore";
		a_fields("main program", v_act_field).f_description[2] = "Thron";
		a_fields("main program", v_act_field).f_description[3] = "Trono";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 78;
		a_fields("main program", v_act_field).f_description[1] = "Altar";
		a_fields("main program", v_act_field).f_description[2] = "Altar";
		a_fields("main program", v_act_field).f_description[3] = "Altar";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 79;
		a_fields("main program", v_act_field).f_description[1] = "Altar";
		a_fields("main program", v_act_field).f_description[2] = "Altar";
		a_fields("main program", v_act_field).f_description[3] = "Altar";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 80;
		a_fields("main program", v_act_field).f_description[1] = "Ice";
		a_fields("main program", v_act_field).f_description[2] = "Eis";
		a_fields("main program", v_act_field).f_description[3] = "Hielo";
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 81;
		a_fields("main program", v_act_field).f_description[1] = "Poison";
		a_fields("main program", v_act_field).f_description[2] = "Gift";
		a_fields("main program", v_act_field).f_description[3] = "Veneno";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 82;
		a_fields("main program", v_act_field).f_description[1] = "Trader";
		a_fields("main program", v_act_field).f_description[2] = "H\344ndler";
		a_fields("main program", v_act_field).f_description[3] = "Commerciante";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 83;
		a_fields("main program", v_act_field).f_description[1] = "Trader";
		a_fields("main program", v_act_field).f_description[2] = "H\344ndler";
		a_fields("main program", v_act_field).f_description[3] = "Commerciante";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 84;
		a_fields("main program", v_act_field).f_description[1] = "Trader";
		a_fields("main program", v_act_field).f_description[2] = "H\344ndler";
		a_fields("main program", v_act_field).f_description[3] = "Commerciante";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 85;
		a_fields("main program", v_act_field).f_description[1] = "Trader";
		a_fields("main program", v_act_field).f_description[2] = "H\344ndler";
		a_fields("main program", v_act_field).f_description[3] = "Commerciante";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 86;
		a_fields("main program", v_act_field).f_description[1] = "Trader";
		a_fields("main program", v_act_field).f_description[2] = "H\344ndler";
		a_fields("main program", v_act_field).f_description[3] = "Commerciante";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 87;
		a_fields("main program", v_act_field).f_description[1] = "Trader";
		a_fields("main program", v_act_field).f_description[2] = "H\344ndler";
		a_fields("main program", v_act_field).f_description[3] = "Commerciante";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 88;
		a_fields("main program", v_act_field).f_description[1] = "Cave Wall";
		a_fields("main program", v_act_field).f_description[2] = "H\366hlenwand";
		a_fields("main program", v_act_field).f_description[3] = "Muro de Cueva";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 89;
		a_fields("main program", v_act_field).f_description[1] = "Cave Floor";
		a_fields("main program", v_act_field).f_description[2] = "H\366hlenboden";
		a_fields("main program", v_act_field).f_description[3] = "Suelo de Cueva";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 90;
		a_fields("main program", v_act_field).f_description[1] = "Cave Wall";
		a_fields("main program", v_act_field).f_description[2] = "H\366hlenwand";
		a_fields("main program", v_act_field).f_description[3] = "Muro de Cueva";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 91;
		a_fields("main program", v_act_field).f_description[1] = "Cave Floor";
		a_fields("main program", v_act_field).f_description[2] = "H\366hlenboden";
		a_fields("main program", v_act_field).f_description[3] = "Suelo de Cueva";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 92;
		a_fields("main program", v_act_field).f_description[1] = "Key";
		a_fields("main program", v_act_field).f_description[2] = "Schl\374ssel";
		a_fields("main program", v_act_field).f_description[3] = "Llave";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 93;
		a_fields("main program", v_act_field).f_description[1] = "Skeleton";
		a_fields("main program", v_act_field).f_description[2] = "Skelett";
		a_fields("main program", v_act_field).f_description[3] = "Esqueleto";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 94;
		a_fields("main program", v_act_field).f_description[1] = "Grass";
		a_fields("main program", v_act_field).f_description[2] = "Gras";
		a_fields("main program", v_act_field).f_description[3] = "C\351sped";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 95;
		a_fields("main program", v_act_field).f_description[1] = "Stone";
		a_fields("main program", v_act_field).f_description[2] = "Stein";
		a_fields("main program", v_act_field).f_description[3] = "Piedra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 96;
		a_fields("main program", v_act_field).f_description[1] = "Bush";
		a_fields("main program", v_act_field).f_description[2] = "Busch";
		a_fields("main program", v_act_field).f_description[3] = "Arbusto";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 97;
		a_fields("main program", v_act_field).f_description[1] = "Chest";
		a_fields("main program", v_act_field).f_description[2] = "Truhe";
		a_fields("main program", v_act_field).f_description[3] = "Caja";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 98;
		a_fields("main program", v_act_field).f_description[1] = "Tombstone";
		a_fields("main program", v_act_field).f_description[2] = "Grabstein";
		a_fields("main program", v_act_field).f_description[3] = "L\341pida";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 100;
		a_fields("main program", v_act_field).f_description[1] = "Skeleton";
		a_fields("main program", v_act_field).f_description[2] = "Skelett";
		a_fields("main program", v_act_field).f_description[3] = "Esqueleto";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 101;
		a_fields("main program", v_act_field).f_description[1] = "Wall";
		a_fields("main program", v_act_field).f_description[2] = "Wand";
		a_fields("main program", v_act_field).f_description[3] = "Pared";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 102;
		a_fields("main program", v_act_field).f_description[1] = "Wall";
		a_fields("main program", v_act_field).f_description[2] = "Wand";
		a_fields("main program", v_act_field).f_description[3] = "Pared";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 103;
		a_fields("main program", v_act_field).f_description[1] = "Wall";
		a_fields("main program", v_act_field).f_description[2] = "Wand";
		a_fields("main program", v_act_field).f_description[3] = "Pared";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 104;
		a_fields("main program", v_act_field).f_description[1] = "Wall";
		a_fields("main program", v_act_field).f_description[2] = "Wand";
		a_fields("main program", v_act_field).f_description[3] = "Pared";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 110;
		a_fields("main program", v_act_field).f_description[1] = "Lava";
		a_fields("main program", v_act_field).f_description[2] = "Lava";
		a_fields("main program", v_act_field).f_description[3] = "Lava";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 111;
		a_fields("main program", v_act_field).f_description[1] = "Bricks";
		a_fields("main program", v_act_field).f_description[2] = "Steine";
		a_fields("main program", v_act_field).f_description[3] = "Piedras";
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 112;
		a_fields("main program", v_act_field).f_description[1] = "Boulder";
		a_fields("main program", v_act_field).f_description[2] = "Stein";
		a_fields("main program", v_act_field).f_description[3] = "Piedra";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 113;
		a_fields("main program", v_act_field).f_description[1] = "Tiles floor";
		a_fields("main program", v_act_field).f_description[2] = "Kachelboden";
		a_fields("main program", v_act_field).f_description[3] = "Azulejo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 114;
		a_fields("main program", v_act_field).f_description[1] = "Tiles floor";
		a_fields("main program", v_act_field).f_description[2] = "Kachelboden";
		a_fields("main program", v_act_field).f_description[3] = "Azulejo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 115;
		a_fields("main program", v_act_field).f_description[1] = "Tiles floor";
		a_fields("main program", v_act_field).f_description[2] = "Kachelboden";
		a_fields("main program", v_act_field).f_description[3] = "Azulejo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 116;
		a_fields("main program", v_act_field).f_description[1] = "Tiles floor";
		a_fields("main program", v_act_field).f_description[2] = "Kachelboden";
		a_fields("main program", v_act_field).f_description[3] = "Azulejo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 118;
		a_fields("main program", v_act_field).f_description[1] = "Staffpiece";
		a_fields("main program", v_act_field).f_description[2] = "Stabteil";
		a_fields("main program", v_act_field).f_description[3] = "Trozo del Bast\363n";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 119;
		a_fields("main program", v_act_field).f_description[1] = "Anvil";
		a_fields("main program", v_act_field).f_description[2] = "Amboss";
		a_fields("main program", v_act_field).f_description[3] = "Bigornia";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 120;
		a_fields("main program", v_act_field).f_description[1] = "Trader";
		a_fields("main program", v_act_field).f_description[2] = "H\344ndler";
		a_fields("main program", v_act_field).f_description[3] = "Commerciante";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 121;
		a_fields("main program", v_act_field).f_description[1] = "Trader";
		a_fields("main program", v_act_field).f_description[2] = "H\344ndler";
		a_fields("main program", v_act_field).f_description[3] = "Commerciante";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 122;
		a_fields("main program", v_act_field).f_description[1] = "Teacher";
		a_fields("main program", v_act_field).f_description[2] = "Lehrer";
		a_fields("main program", v_act_field).f_description[3] = "Profesor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 123;
		a_fields("main program", v_act_field).f_description[1] = "Teacher";
		a_fields("main program", v_act_field).f_description[2] = "Lehrer";
		a_fields("main program", v_act_field).f_description[3] = "Profesor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 124;
		a_fields("main program", v_act_field).f_description[1] = "Teacher";
		a_fields("main program", v_act_field).f_description[2] = "Lehrer";
		a_fields("main program", v_act_field).f_description[3] = "Profesor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 125;
		a_fields("main program", v_act_field).f_description[1] = "Teacher";
		a_fields("main program", v_act_field).f_description[2] = "Lehrer";
		a_fields("main program", v_act_field).f_description[3] = "Profesor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 126;
		a_fields("main program", v_act_field).f_description[1] = "Teacher";
		a_fields("main program", v_act_field).f_description[2] = "Lehrer";
		a_fields("main program", v_act_field).f_description[3] = "Profesor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 127;
		a_fields("main program", v_act_field).f_description[1] = "Teacher";
		a_fields("main program", v_act_field).f_description[2] = "Lehrer";
		a_fields("main program", v_act_field).f_description[3] = "Profesor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 128;
		a_fields("main program", v_act_field).f_description[1] = "Teacher";
		a_fields("main program", v_act_field).f_description[2] = "Lehrer";
		a_fields("main program", v_act_field).f_description[3] = "Profesor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 129;
		a_fields("main program", v_act_field).f_description[1] = "Teacher";
		a_fields("main program", v_act_field).f_description[2] = "Lehrer";
		a_fields("main program", v_act_field).f_description[3] = "Profesor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 130;
		a_fields("main program", v_act_field).f_description[1] = "Teacher";
		a_fields("main program", v_act_field).f_description[2] = "Lehrer";
		a_fields("main program", v_act_field).f_description[3] = "Profesor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 131;
		a_fields("main program", v_act_field).f_description[1] = "Teacher";
		a_fields("main program", v_act_field).f_description[2] = "Lehrer";
		a_fields("main program", v_act_field).f_description[3] = "Profesor";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 132;
		a_fields("main program", v_act_field).f_description[1] = "Trail";
		a_fields("main program", v_act_field).f_description[2] = "Spur";
		a_fields("main program", v_act_field).f_description[3] = "Huella";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 133;
		a_fields("main program", v_act_field).f_description[1] = "Icefloor";
		a_fields("main program", v_act_field).f_description[2] = "Eisboden";
		a_fields("main program", v_act_field).f_description[3] = "Suelo de Hielo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 134;
		a_fields("main program", v_act_field).f_description[1] = "Stars";
		a_fields("main program", v_act_field).f_description[2] = "Sterne";
		a_fields("main program", v_act_field).f_description[3] = "Estrellas";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 135;
		a_fields("main program", v_act_field).f_description[1] = "Spidernet";
		a_fields("main program", v_act_field).f_description[2] = "Spinnennetz";
		a_fields("main program", v_act_field).f_description[3] = "Telara\361a";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 136;
		a_fields("main program", v_act_field).f_description[1] = "Tree";
		a_fields("main program", v_act_field).f_description[2] = "Baum";
		a_fields("main program", v_act_field).f_description[3] = "Arbol";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 137;
		a_fields("main program", v_act_field).f_description[1] = "Hydra";
		a_fields("main program", v_act_field).f_description[2] = "Hydra";
		a_fields("main program", v_act_field).f_description[3] = "Hidra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 138;
		a_fields("main program", v_act_field).f_description[1] = "Hydra";
		a_fields("main program", v_act_field).f_description[2] = "Hydra";
		a_fields("main program", v_act_field).f_description[3] = "Hidra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 139;
		a_fields("main program", v_act_field).f_description[1] = "Hydra";
		a_fields("main program", v_act_field).f_description[2] = "Hydra";
		a_fields("main program", v_act_field).f_description[3] = "Hidra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 140;
		a_fields("main program", v_act_field).f_description[1] = "Hydra";
		a_fields("main program", v_act_field).f_description[2] = "Hydra";
		a_fields("main program", v_act_field).f_description[3] = "Hidra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 141;
		a_fields("main program", v_act_field).f_description[1] = "Hydra";
		a_fields("main program", v_act_field).f_description[2] = "Hydra";
		a_fields("main program", v_act_field).f_description[3] = "Hidra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 142;
		a_fields("main program", v_act_field).f_description[1] = "Hydra";
		a_fields("main program", v_act_field).f_description[2] = "Hydra";
		a_fields("main program", v_act_field).f_description[3] = "Hidra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 143;
		a_fields("main program", v_act_field).f_description[1] = "Hydra";
		a_fields("main program", v_act_field).f_description[2] = "Hydra";
		a_fields("main program", v_act_field).f_description[3] = "Hidra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 144;
		a_fields("main program", v_act_field).f_description[1] = "Hydra";
		a_fields("main program", v_act_field).f_description[2] = "Hydra";
		a_fields("main program", v_act_field).f_description[3] = "Hidra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 145;
		a_fields("main program", v_act_field).f_description[1] = "Hydra";
		a_fields("main program", v_act_field).f_description[2] = "Hydra";
		a_fields("main program", v_act_field).f_description[3] = "Hidra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 146;
		a_fields("main program", v_act_field).f_description[1] = "Hydra";
		a_fields("main program", v_act_field).f_description[2] = "Hydra";
		a_fields("main program", v_act_field).f_description[3] = "Hidra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 147;
		a_fields("main program", v_act_field).f_description[1] = "Hydra";
		a_fields("main program", v_act_field).f_description[2] = "Hydra";
		a_fields("main program", v_act_field).f_description[3] = "Hidra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 148;
		a_fields("main program", v_act_field).f_description[1] = "Hydra";
		a_fields("main program", v_act_field).f_description[2] = "Hydra";
		a_fields("main program", v_act_field).f_description[3] = "Hidra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 149;
		a_fields("main program", v_act_field).f_description[1] = "Rune";
		a_fields("main program", v_act_field).f_description[2] = "Rune";
		a_fields("main program", v_act_field).f_description[3] = "Runa";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 150;
		a_fields("main program", v_act_field).f_description[1] = "Bones";
		a_fields("main program", v_act_field).f_description[2] = "Knochen";
		a_fields("main program", v_act_field).f_description[3] = "Huesos";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 151;
		a_fields("main program", v_act_field).f_description[1] = "Bones";
		a_fields("main program", v_act_field).f_description[2] = "Knochen";
		a_fields("main program", v_act_field).f_description[3] = "Huesos";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 152;
		a_fields("main program", v_act_field).f_description[1] = "Bones";
		a_fields("main program", v_act_field).f_description[2] = "Knochen";
		a_fields("main program", v_act_field).f_description[3] = "Huesos";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 153;
		a_fields("main program", v_act_field).f_description[1] = "Bones";
		a_fields("main program", v_act_field).f_description[2] = "Knochen";
		a_fields("main program", v_act_field).f_description[3] = "Huesos";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 154;
		a_fields("main program", v_act_field).f_description[1] = "Bones";
		a_fields("main program", v_act_field).f_description[2] = "Knochen";
		a_fields("main program", v_act_field).f_description[3] = "Huesos";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 155;
		a_fields("main program", v_act_field).f_description[1] = "Bones";
		a_fields("main program", v_act_field).f_description[2] = "Knochen";
		a_fields("main program", v_act_field).f_description[3] = "Huesos";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 156;
		a_fields("main program", v_act_field).f_description[1] = "Bones";
		a_fields("main program", v_act_field).f_description[2] = "Knochen";
		a_fields("main program", v_act_field).f_description[3] = "Huesos";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 157;
		a_fields("main program", v_act_field).f_description[1] = "Bones";
		a_fields("main program", v_act_field).f_description[2] = "Knochen";
		a_fields("main program", v_act_field).f_description[3] = "Huesos";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 158;
		a_fields("main program", v_act_field).f_description[1] = "Rune";
		a_fields("main program", v_act_field).f_description[2] = "Rune";
		a_fields("main program", v_act_field).f_description[3] = "Runa";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 159;
		a_fields("main program", v_act_field).f_description[1] = "Rune";
		a_fields("main program", v_act_field).f_description[2] = "Rune";
		a_fields("main program", v_act_field).f_description[3] = "Runa";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 160;
		a_fields("main program", v_act_field).f_description[1] = "Gold";
		a_fields("main program", v_act_field).f_description[2] = "Gold";
		a_fields("main program", v_act_field).f_description[3] = "Oro";
		a_fields("main program", v_act_field).f_water = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 2;
		v_act_field = 161;
		a_fields("main program", v_act_field).f_description[1] = "Chest";
		a_fields("main program", v_act_field).f_description[2] = "Truhe";
		a_fields("main program", v_act_field).f_description[3] = "Caja";
		a_fields("main program", v_act_field).f_water = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 2;
		v_act_field = 162;
		a_fields("main program", v_act_field).f_description[1] = "Green Chest";
		a_fields("main program", v_act_field).f_description[2] = "Gr\374ne Truhe";
		a_fields("main program", v_act_field).f_description[3] = "Caja verde";
		a_fields("main program", v_act_field).f_water = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 2;
		v_act_field = 163;
		a_fields("main program", v_act_field).f_description[1] = "Skeleton";
		a_fields("main program", v_act_field).f_description[2] = "Skelett";
		a_fields("main program", v_act_field).f_description[3] = "Esqueleto";
		a_fields("main program", v_act_field).f_water = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 2;
		v_act_field = 164;
		a_fields("main program", v_act_field).f_description[1] = "Lampstand";
		a_fields("main program", v_act_field).f_description[2] = "Leuchte";
		a_fields("main program", v_act_field).f_description[3] = "Candelabra";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 165;
		a_fields("main program", v_act_field).f_description[1] = "Wall";
		a_fields("main program", v_act_field).f_description[2] = "Wand";
		a_fields("main program", v_act_field).f_description[3] = "Pared";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 166;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 167;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 168;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 169;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 170;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 171;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 172;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 173;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 174;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 175;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 176;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 177;
		a_fields("main program", v_act_field).f_description[1] = "Sand";
		a_fields("main program", v_act_field).f_description[2] = "Sand";
		a_fields("main program", v_act_field).f_description[3] = "Arena";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 178;
		a_fields("main program", v_act_field).f_description[1] = "Hill";
		a_fields("main program", v_act_field).f_description[2] = "H\374gel";
		a_fields("main program", v_act_field).f_description[3] = "Colina";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 179;
		a_fields("main program", v_act_field).f_description[1] = "Sand";
		a_fields("main program", v_act_field).f_description[2] = "Sand";
		a_fields("main program", v_act_field).f_description[3] = "Arena";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 180;
		a_fields("main program", v_act_field).f_description[1] = "Sand";
		a_fields("main program", v_act_field).f_description[2] = "Sand";
		a_fields("main program", v_act_field).f_description[3] = "Arena";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 181;
		a_fields("main program", v_act_field).f_description[1] = "Sand";
		a_fields("main program", v_act_field).f_description[2] = "Sand";
		a_fields("main program", v_act_field).f_description[3] = "Arena";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 182;
		a_fields("main program", v_act_field).f_description[1] = "Palmtree";
		a_fields("main program", v_act_field).f_description[2] = "Palme";
		a_fields("main program", v_act_field).f_description[3] = "Palmera";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 183;
		a_fields("main program", v_act_field).f_description[1] = "Palmtree";
		a_fields("main program", v_act_field).f_description[2] = "Palme";
		a_fields("main program", v_act_field).f_description[3] = "Palmera";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 184;
		a_fields("main program", v_act_field).f_description[1] = "Palmtree";
		a_fields("main program", v_act_field).f_description[2] = "Palme";
		a_fields("main program", v_act_field).f_description[3] = "Palmera";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 185;
		a_fields("main program", v_act_field).f_description[1] = "Palmtree";
		a_fields("main program", v_act_field).f_description[2] = "Palme";
		a_fields("main program", v_act_field).f_description[3] = "Palmera";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 186;
		a_fields("main program", v_act_field).f_description[1] = "Cactus";
		a_fields("main program", v_act_field).f_description[2] = "Kaktus";
		a_fields("main program", v_act_field).f_description[3] = "Cactus";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 187;
		a_fields("main program", v_act_field).f_description[1] = "Cactus";
		a_fields("main program", v_act_field).f_description[2] = "Kaktus";
		a_fields("main program", v_act_field).f_description[3] = "Cactus";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 188;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 189;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 190;
		a_fields("main program", v_act_field).f_description[1] = "Teleporter";
		a_fields("main program", v_act_field).f_description[2] = "Teleporter";
		a_fields("main program", v_act_field).f_description[3] = "Teleportador";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 191;
		a_fields("main program", v_act_field).f_description[1] = "Skeleton";
		a_fields("main program", v_act_field).f_description[2] = "Skelett";
		a_fields("main program", v_act_field).f_description[3] = "Esqueleto";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 192;
		a_fields("main program", v_act_field).f_description[1] = "Chest";
		a_fields("main program", v_act_field).f_description[2] = "Truhe";
		a_fields("main program", v_act_field).f_description[3] = "Caja";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 193;
		a_fields("main program", v_act_field).f_description[1] = "Green Chest";
		a_fields("main program", v_act_field).f_description[2] = "Gr\374ne Truhe";
		a_fields("main program", v_act_field).f_description[3] = "Caja verde";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 194;
		a_fields("main program", v_act_field).f_description[1] = "Green Chest";
		a_fields("main program", v_act_field).f_description[2] = "Gr\374ne Truhe";
		a_fields("main program", v_act_field).f_description[3] = "Caja verde";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 195;
		a_fields("main program", v_act_field).f_description[1] = "Carpet";
		a_fields("main program", v_act_field).f_description[2] = "Teppich";
		a_fields("main program", v_act_field).f_description[3] = "Alfombra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 196;
		a_fields("main program", v_act_field).f_description[1] = "Carpet";
		a_fields("main program", v_act_field).f_description[2] = "Teppich";
		a_fields("main program", v_act_field).f_description[3] = "Alfombra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 197;
		a_fields("main program", v_act_field).f_description[1] = "Carpet";
		a_fields("main program", v_act_field).f_description[2] = "Teppich";
		a_fields("main program", v_act_field).f_description[3] = "Alfombra";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 198;
		a_fields("main program", v_act_field).f_description[1] = "Swamp";
		a_fields("main program", v_act_field).f_description[2] = "Sumpf";
		a_fields("main program", v_act_field).f_description[3] = "Pantano";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 199;
		a_fields("main program", v_act_field).f_description[1] = "Swamp";
		a_fields("main program", v_act_field).f_description[2] = "Sumpf";
		a_fields("main program", v_act_field).f_description[3] = "Pantano";
		a_fields("main program", v_act_field).f_block_walk = 1;
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		v_act_field = 200;
		a_fields("main program", v_act_field).f_description[1] = "Plant";
		a_fields("main program", v_act_field).f_description[2] = "Pflanze";
		a_fields("main program", v_act_field).f_description[3] = "Planta";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 201;
		a_fields("main program", v_act_field).f_description[1] = "Poisenous";
		a_fields("main program", v_act_field).f_description[2] = "Giftig";
		a_fields("main program", v_act_field).f_description[3] = "Venenoso";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 202;
		a_fields("main program", v_act_field).f_description[1] = "Wounded Hero";
		a_fields("main program", v_act_field).f_description[2] = "Verletzter Held";
		a_fields("main program", v_act_field).f_description[3] = "Heroe herido";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 203;
		a_fields("main program", v_act_field).f_description[1] = "Wounded Hero";
		a_fields("main program", v_act_field).f_description[2] = "Verletzter Held";
		a_fields("main program", v_act_field).f_description[3] = "Heroe herido";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 204;
		a_fields("main program", v_act_field).f_description[1] = "Snow";
		a_fields("main program", v_act_field).f_description[2] = "Schnee";
		a_fields("main program", v_act_field).f_description[3] = "Nieve";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 205;
		a_fields("main program", v_act_field).f_description[1] = "Anchor";
		a_fields("main program", v_act_field).f_description[2] = "Anker";
		a_fields("main program", v_act_field).f_description[3] = "Ancla";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 206;
		a_fields("main program", v_act_field).f_description[1] = "Trickle";
		a_fields("main program", v_act_field).f_description[2] = "Rinnsaal";
		a_fields("main program", v_act_field).f_description[3] = "Arroyuelo";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 207;
		a_fields("main program", v_act_field).f_description[1] = "Hut";
		a_fields("main program", v_act_field).f_description[2] = "H\374tte";
		a_fields("main program", v_act_field).f_description[3] = "Caba\361a";
		a_fields("main program", v_act_field).f_block_los = 1;
		a_fields("main program", v_act_field).f_block_item = 1;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 208;
		a_fields("main program", v_act_field).f_description[1] = "Nailpit";
		a_fields("main program", v_act_field).f_description[2] = "Nagelgrube";
		a_fields("main program", v_act_field).f_description[3] = "Trampa de claves";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		a_fields("main program", v_act_field).f_attri_floor = 1;
		v_act_field = 209;
		a_fields("main program", v_act_field).f_description[1] = "Portcullis";
		a_fields("main program", v_act_field).f_description[2] = "Fallgatter";
		a_fields("main program", v_act_field).f_description[3] = "Barandilla";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 0;
		v_act_field = 210;
		a_fields("main program", v_act_field).f_description[1] = "Portcullis";
		a_fields("main program", v_act_field).f_description[2] = "Fallgatter";
		a_fields("main program", v_act_field).f_description[3] = "Barandilla";
		a_fields("main program", v_act_field).f_block_los = 0;
		a_fields("main program", v_act_field).f_block_item = 0;
		a_fields("main program", v_act_field).f_block_spawn = 1;
		for (v_i = 1; v_i <= 170; v_i += 1) {
			a_monster("main program", v_i).f_sound = 0;
			a_monster("main program", v_i).f_eigenschaft1 = 0;
			a_monster("main program", v_i).f_eigenschaft2 = 0;
			a_monster("main program", v_i).f_eigenschaft3 = 0;
			a_monster("main program", v_i).f_eigenschaft4 = 0;
			a_monster("main program", v_i).f_eigenschaft5 = 0;
			a_monster("main program", v_i).f_eigenschaft6 = 0;
			a_monster("main program", v_i).f_eigenschaft7 = 0;
			a_monster("main program", v_i).f_eigenschaft8 = 0;
			a_monster("main program", v_i).f_eigenschaft9 = 0;
			a_monster("main program", v_i).f_eigenschaft10 = 0;
		}
		a_monster("main program", 1).f_name[2] = "Fledermaus";
		a_monster("main program", 1).f_name[1] = "Bat";
		a_monster("main program", 1).f_name[3] = "Murcielago";
		a_monster("main program", 1).f_nr = 4;
		a_monster("main program", 1).f_art = 1;
		a_monster("main program", 1).f_lebenspunkte = 1;
		a_monster("main program", 1).f_angriff = 1;
		a_monster("main program", 1).f_abwehr = 3;
		a_monster("main program", 1).f_staerke = 1;
		a_monster("main program", 1).f_ruestung = 0;
		a_monster("main program", 1).f_zauberkraft = 0;
		a_monster("main program", 1).f_zauber = 0;
		a_monster("main program", 1).f_reichweite = 0;
		a_monster("main program", 1).f_minlevel = 1;
		a_monster("main program", 1).f_eigenschaft1 = 1;
		a_monster("main program", 1).f_eigenschaft2 = 8;
		a_monster("main program", 1).f_eigenschaft3 = 29;
		a_monster("main program", 1).f_eigenschaft4 = 37;
		a_monster("main program", 2).f_name[2] = "Riesenratte";
		a_monster("main program", 2).f_name[1] = "Giant Rat";
		a_monster("main program", 2).f_name[3] = "Rata Gigante";
		a_monster("main program", 2).f_nr = 1;
		a_monster("main program", 2).f_art = 1;
		a_monster("main program", 2).f_lebenspunkte = 3;
		a_monster("main program", 2).f_angriff = 1;
		a_monster("main program", 2).f_abwehr = 0;
		a_monster("main program", 2).f_staerke = 1;
		a_monster("main program", 2).f_ruestung = 0;
		a_monster("main program", 2).f_zauberkraft = 0;
		a_monster("main program", 2).f_zauber = 0;
		a_monster("main program", 2).f_reichweite = 0;
		a_monster("main program", 2).f_minlevel = 1;
		a_monster("main program", 2).f_sound = 52;
		a_monster("main program", 2).f_eigenschaft1 = 2;
		a_monster("main program", 2).f_eigenschaft2 = 6;
		a_monster("main program", 2).f_eigenschaft3 = 8;
		a_monster("main program", 2).f_eigenschaft4 = 29;
		a_monster("main program", 2).f_eigenschaft5 = 35;
		if (g_test == 1) {
			a_monster("main program", 2).f_eigenschaft6 = 44;
		}
		a_monster("main program", 3).f_name[2] = "Goblin";
		a_monster("main program", 3).f_name[1] = "Goblin";
		a_monster("main program", 3).f_name[3] = "Goblin";
		a_monster("main program", 3).f_nr = 61;
		a_monster("main program", 3).f_art = 2;
		a_monster("main program", 3).f_lebenspunkte = 2;
		a_monster("main program", 3).f_angriff = 2;
		a_monster("main program", 3).f_abwehr = 1;
		a_monster("main program", 3).f_staerke = 2;
		a_monster("main program", 3).f_ruestung = 0;
		a_monster("main program", 3).f_zauberkraft = 0;
		a_monster("main program", 3).f_zauber = 0;
		a_monster("main program", 3).f_reichweite = 3;
		a_monster("main program", 3).f_minlevel = 1;
		a_monster("main program", 3).f_eigenschaft1 = 2;
		a_monster("main program", 3).f_eigenschaft2 = 4;
		a_monster("main program", 3).f_eigenschaft3 = 5;
		a_monster("main program", 3).f_eigenschaft4 = 6;
		a_monster("main program", 3).f_eigenschaft5 = 29;
		a_monster("main program", 3).f_eigenschaft6 = 33;
		a_monster("main program", 4).f_name[2] = "Skelettkrieger";
		a_monster("main program", 4).f_name[1] = "Skeleton Warrior";
		a_monster("main program", 4).f_name[3] = "Guerrero Esqueleto";
		a_monster("main program", 4).f_nr = 23;
		a_monster("main program", 4).f_art = 3;
		a_monster("main program", 4).f_lebenspunkte = 1;
		a_monster("main program", 4).f_angriff = 3;
		a_monster("main program", 4).f_abwehr = 2;
		a_monster("main program", 4).f_staerke = 3;
		a_monster("main program", 4).f_ruestung = 1;
		a_monster("main program", 4).f_zauberkraft = 0;
		a_monster("main program", 4).f_zauber = 0;
		a_monster("main program", 4).f_reichweite = 0;
		a_monster("main program", 4).f_minlevel = 1;
		a_monster("main program", 4).f_eigenschaft1 = 7;
		a_monster("main program", 4).f_eigenschaft2 = 34;
		a_monster("main program", 4).f_eigenschaft3 = 28;
		a_monster("main program", 5).f_name[2] = "Goblinschamane";
		a_monster("main program", 5).f_name[1] = "Goblin Shaman";
		a_monster("main program", 5).f_name[3] = "Chaman Goblin";
		a_monster("main program", 5).f_nr = 50;
		a_monster("main program", 5).f_art = 2;
		a_monster("main program", 5).f_lebenspunkte = 2;
		a_monster("main program", 5).f_angriff = 0;
		a_monster("main program", 5).f_abwehr = 0;
		a_monster("main program", 5).f_staerke = 1;
		a_monster("main program", 5).f_ruestung = 0;
		a_monster("main program", 5).f_zauberkraft = 1;
		a_monster("main program", 5).f_zauber = 1;
		a_monster("main program", 5).f_reichweite = 5;
		a_monster("main program", 5).f_minlevel = 1;
		a_monster("main program", 5).f_eigenschaft1 = 4;
		a_monster("main program", 5).f_eigenschaft2 = 8;
		a_monster("main program", 5).f_eigenschaft3 = 27;
		a_monster("main program", 5).f_eigenschaft4 = 29;
		a_monster("main program", 5).f_eigenschaft5 = 33;
		a_monster("main program", 6).f_name[2] = "Geier";
		a_monster("main program", 6).f_name[1] = "Vulture";
		a_monster("main program", 6).f_name[3] = "Buitre";
		a_monster("main program", 6).f_nr = 70;
		a_monster("main program", 6).f_art = 1;
		a_monster("main program", 6).f_lebenspunkte = 2;
		a_monster("main program", 6).f_angriff = 2;
		a_monster("main program", 6).f_abwehr = 1;
		a_monster("main program", 6).f_staerke = 2;
		a_monster("main program", 6).f_ruestung = 0;
		a_monster("main program", 6).f_zauberkraft = 0;
		a_monster("main program", 6).f_zauber = 0;
		a_monster("main program", 6).f_reichweite = 0;
		a_monster("main program", 6).f_minlevel = 1;
		a_monster("main program", 6).f_eigenschaft1 = 1;
		a_monster("main program", 6).f_eigenschaft2 = 8;
		a_monster("main program", 6).f_eigenschaft3 = 29;
		a_monster("main program", 7).f_name[2] = "Dunkelwolf";
		a_monster("main program", 7).f_name[1] = "Dark Wolf";
		a_monster("main program", 7).f_name[3] = "Lobo Oscuro";
		a_monster("main program", 7).f_nr = 69;
		a_monster("main program", 7).f_art = 1;
		a_monster("main program", 7).f_lebenspunkte = 4;
		a_monster("main program", 7).f_angriff = 4;
		a_monster("main program", 7).f_abwehr = 1;
		a_monster("main program", 7).f_staerke = 2;
		a_monster("main program", 7).f_ruestung = 0;
		a_monster("main program", 7).f_zauberkraft = 0;
		a_monster("main program", 7).f_zauber = 0;
		a_monster("main program", 7).f_reichweite = 0;
		a_monster("main program", 7).f_minlevel = 1;
		a_monster("main program", 7).f_sound = 44;
		a_monster("main program", 7).f_eigenschaft1 = 2;
		a_monster("main program", 7).f_eigenschaft2 = 8;
		a_monster("main program", 7).f_eigenschaft3 = 29;
		a_monster("main program", 7).f_eigenschaft4 = 36;
		a_monster("main program", 8).f_name[2] = "Schlinggras";
		a_monster("main program", 8).f_name[1] = "Grapplevines";
		a_monster("main program", 8).f_name[3] = "Enredaderas";
		a_monster("main program", 8).f_nr = 9;
		a_monster("main program", 8).f_art = 4;
		a_monster("main program", 8).f_lebenspunkte = 8;
		a_monster("main program", 8).f_angriff = 1;
		a_monster("main program", 8).f_abwehr = 0;
		a_monster("main program", 8).f_staerke = 4;
		a_monster("main program", 8).f_ruestung = 0;
		a_monster("main program", 8).f_zauberkraft = 0;
		a_monster("main program", 8).f_zauber = 0;
		a_monster("main program", 8).f_reichweite = 0;
		a_monster("main program", 8).f_minlevel = 1;
		a_monster("main program", 8).f_eigenschaft1 = 11;
		a_monster("main program", 9).f_name[2] = "Dieb";
		a_monster("main program", 9).f_name[1] = "Thief";
		a_monster("main program", 9).f_name[3] = "Ladron";
		a_monster("main program", 9).f_nr = 65;
		a_monster("main program", 9).f_art = 2;
		a_monster("main program", 9).f_lebenspunkte = 3;
		a_monster("main program", 9).f_angriff = 6;
		a_monster("main program", 9).f_abwehr = 1;
		a_monster("main program", 9).f_staerke = 2;
		a_monster("main program", 9).f_ruestung = 0;
		a_monster("main program", 9).f_zauberkraft = 0;
		a_monster("main program", 9).f_zauber = 0;
		a_monster("main program", 9).f_reichweite = 0;
		a_monster("main program", 9).f_minlevel = 2;
		a_monster("main program", 9).f_eigenschaft1 = 8;
		a_monster("main program", 9).f_eigenschaft2 = 9;
		a_monster("main program", 9).f_eigenschaft3 = 10;
		a_monster("main program", 9).f_eigenschaft4 = 26;
		a_monster("main program", 9).f_eigenschaft5 = 29;
		a_monster("main program", 10).f_name[2] = "Riesenschlange";
		a_monster("main program", 10).f_name[1] = "Giant Snake";
		a_monster("main program", 10).f_name[3] = "Serpiente Gigante";
		a_monster("main program", 10).f_nr = 6;
		a_monster("main program", 10).f_art = 1;
		a_monster("main program", 10).f_lebenspunkte = 5;
		a_monster("main program", 10).f_angriff = 3;
		a_monster("main program", 10).f_abwehr = 1;
		a_monster("main program", 10).f_staerke = 2;
		a_monster("main program", 10).f_ruestung = 0;
		a_monster("main program", 10).f_zauberkraft = 0;
		a_monster("main program", 10).f_zauber = 0;
		a_monster("main program", 10).f_reichweite = 0;
		a_monster("main program", 10).f_minlevel = 2;
		a_monster("main program", 10).f_eigenschaft1 = 8;
		a_monster("main program", 10).f_eigenschaft2 = 3;
		a_monster("main program", 10).f_eigenschaft3 = 29;
		a_monster("main program", 11).f_name[2] = "Riesenmade";
		a_monster("main program", 11).f_name[1] = "Giant Maggot";
		a_monster("main program", 11).f_name[3] = "Oruga Gigante";
		a_monster("main program", 11).f_nr = 47;
		a_monster("main program", 11).f_art = 1;
		a_monster("main program", 11).f_lebenspunkte = 10;
		a_monster("main program", 11).f_angriff = 2;
		a_monster("main program", 11).f_abwehr = 0;
		a_monster("main program", 11).f_staerke = 3;
		a_monster("main program", 11).f_ruestung = 0;
		a_monster("main program", 11).f_zauberkraft = 0;
		a_monster("main program", 11).f_zauber = 0;
		a_monster("main program", 11).f_reichweite = 0;
		a_monster("main program", 11).f_minlevel = 2;
		a_monster("main program", 11).f_sound = 52;
		a_monster("main program", 11).f_eigenschaft1 = 29;
		a_monster("main program", 12).f_name[2] = "Zauberlehrling";
		a_monster("main program", 12).f_name[1] = "Apprentice Wizard";
		a_monster("main program", 12).f_name[3] = "Aprendiz de Mago";
		a_monster("main program", 12).f_nr = 71;
		a_monster("main program", 12).f_art = 2;
		a_monster("main program", 12).f_lebenspunkte = 3;
		a_monster("main program", 12).f_angriff = 0;
		a_monster("main program", 12).f_abwehr = 0;
		a_monster("main program", 12).f_staerke = 1;
		a_monster("main program", 12).f_ruestung = 0;
		a_monster("main program", 12).f_zauberkraft = 2;
		a_monster("main program", 12).f_zauber = 3;
		a_monster("main program", 12).f_reichweite = 5;
		a_monster("main program", 12).f_minlevel = 3;
		a_monster("main program", 12).f_eigenschaft1 = 8;
		a_monster("main program", 12).f_eigenschaft2 = 9;
		a_monster("main program", 12).f_eigenschaft3 = 4;
		a_monster("main program", 12).f_eigenschaft4 = 27;
		a_monster("main program", 12).f_eigenschaft5 = 29;
		a_monster("main program", 13).f_name[2] = "Monsterschildkr\366te";
		a_monster("main program", 13).f_name[1] = "Monstrous Turtle";
		a_monster("main program", 13).f_name[3] = "Tortuga Monstruosa";
		a_monster("main program", 13).f_nr = 13;
		a_monster("main program", 13).f_art = 1;
		a_monster("main program", 13).f_lebenspunkte = 3;
		a_monster("main program", 13).f_angriff = 0;
		a_monster("main program", 13).f_abwehr = -5;
		a_monster("main program", 13).f_staerke = 1;
		a_monster("main program", 13).f_ruestung = 10;
		a_monster("main program", 13).f_zauberkraft = 0;
		a_monster("main program", 13).f_zauber = 0;
		a_monster("main program", 13).f_reichweite = 0;
		a_monster("main program", 13).f_minlevel = 3;
		a_monster("main program", 13).f_eigenschaft1 = 8;
		a_monster("main program", 13).f_eigenschaft2 = 9;
		a_monster("main program", 13).f_eigenschaft3 = 29;
		a_monster("main program", 14).f_name[2] = "Riesenechse";
		a_monster("main program", 14).f_name[1] = "Giant Lizard";
		a_monster("main program", 14).f_name[3] = "Lagarto Gigante";
		a_monster("main program", 14).f_nr = 19;
		a_monster("main program", 14).f_art = 1;
		a_monster("main program", 14).f_lebenspunkte = 6;
		a_monster("main program", 14).f_angriff = 3;
		a_monster("main program", 14).f_abwehr = 1;
		a_monster("main program", 14).f_staerke = 3;
		a_monster("main program", 14).f_ruestung = 1;
		a_monster("main program", 14).f_zauberkraft = 0;
		a_monster("main program", 14).f_zauber = 0;
		a_monster("main program", 14).f_reichweite = 0;
		a_monster("main program", 14).f_minlevel = 4;
		a_monster("main program", 14).f_eigenschaft1 = 8;
		a_monster("main program", 14).f_eigenschaft2 = 9;
		a_monster("main program", 14).f_eigenschaft3 = 29;
		a_monster("main program", 15).f_name[2] = "Ork";
		a_monster("main program", 15).f_name[1] = "Orc";
		a_monster("main program", 15).f_name[3] = "Orco";
		a_monster("main program", 15).f_nr = 62;
		a_monster("main program", 15).f_art = 2;
		a_monster("main program", 15).f_lebenspunkte = 7;
		a_monster("main program", 15).f_angriff = 3;
		a_monster("main program", 15).f_abwehr = 2;
		a_monster("main program", 15).f_staerke = 4;
		a_monster("main program", 15).f_ruestung = 1;
		a_monster("main program", 15).f_zauberkraft = 0;
		a_monster("main program", 15).f_zauber = 0;
		a_monster("main program", 15).f_reichweite = 0;
		a_monster("main program", 15).f_minlevel = 4;
		a_monster("main program", 15).f_eigenschaft1 = 2;
		a_monster("main program", 15).f_eigenschaft2 = 4;
		a_monster("main program", 15).f_eigenschaft3 = 8;
		a_monster("main program", 15).f_eigenschaft4 = 9;
		a_monster("main program", 15).f_eigenschaft5 = 26;
		a_monster("main program", 15).f_eigenschaft6 = 29;
		a_monster("main program", 15).f_eigenschaft7 = 33;
		a_monster("main program", 16).f_name[2] = "Zombie";
		a_monster("main program", 16).f_name[1] = "Zombie";
		a_monster("main program", 16).f_name[3] = "Zombi";
		a_monster("main program", 16).f_nr = 42;
		a_monster("main program", 16).f_art = 3;
		a_monster("main program", 16).f_lebenspunkte = 12;
		a_monster("main program", 16).f_angriff = 2;
		a_monster("main program", 16).f_abwehr = 0;
		a_monster("main program", 16).f_staerke = 5;
		a_monster("main program", 16).f_ruestung = 0;
		a_monster("main program", 16).f_zauberkraft = 0;
		a_monster("main program", 16).f_zauber = 0;
		a_monster("main program", 16).f_reichweite = 0;
		a_monster("main program", 16).f_minlevel = 4;
		a_monster("main program", 16).f_sound = 51;
		a_monster("main program", 16).f_eigenschaft1 = 34;
		a_monster("main program", 16).f_eigenschaft2 = 44;
		a_monster("main program", 16).f_eigenschaft3 = 28;
		a_monster("main program", 17).f_name[2] = "Dunkelelf";
		a_monster("main program", 17).f_name[1] = "Dark Elf";
		a_monster("main program", 17).f_name[3] = "Elfo Oscuro";
		a_monster("main program", 17).f_nr = 63;
		a_monster("main program", 17).f_art = 2;
		a_monster("main program", 17).f_lebenspunkte = 5;
		a_monster("main program", 17).f_angriff = 5;
		a_monster("main program", 17).f_abwehr = 5;
		a_monster("main program", 17).f_staerke = 3;
		a_monster("main program", 17).f_ruestung = 0;
		a_monster("main program", 17).f_zauberkraft = 0;
		a_monster("main program", 17).f_zauber = 0;
		a_monster("main program", 17).f_reichweite = 7;
		a_monster("main program", 17).f_minlevel = 4;
		a_monster("main program", 17).f_eigenschaft1 = 5;
		a_monster("main program", 17).f_eigenschaft2 = 3;
		a_monster("main program", 17).f_eigenschaft3 = 2;
		a_monster("main program", 17).f_eigenschaft4 = 4;
		a_monster("main program", 17).f_eigenschaft5 = 8;
		a_monster("main program", 17).f_eigenschaft6 = 9;
		a_monster("main program", 17).f_eigenschaft7 = 26;
		a_monster("main program", 18).f_name[2] = "Riesenameise";
		a_monster("main program", 18).f_name[1] = "Giant Ant";
		a_monster("main program", 18).f_name[3] = "Hormiga Gigante";
		a_monster("main program", 18).f_nr = 38;
		a_monster("main program", 18).f_art = 1;
		a_monster("main program", 18).f_lebenspunkte = 5;
		a_monster("main program", 18).f_angriff = 5;
		a_monster("main program", 18).f_abwehr = 2;
		a_monster("main program", 18).f_staerke = 4;
		a_monster("main program", 18).f_ruestung = 2;
		a_monster("main program", 18).f_zauberkraft = 0;
		a_monster("main program", 18).f_zauber = 0;
		a_monster("main program", 18).f_reichweite = 0;
		a_monster("main program", 18).f_minlevel = 5;
		a_monster("main program", 18).f_eigenschaft1 = 2;
		a_monster("main program", 18).f_eigenschaft2 = 6;
		a_monster("main program", 18).f_eigenschaft3 = 29;
		a_monster("main program", 18).f_eigenschaft4 = 43;
		a_monster("main program", 19).f_name[2] = "Riesenspinne";
		a_monster("main program", 19).f_name[1] = "Giant Spider";
		a_monster("main program", 19).f_name[3] = "Arana Gigante";
		a_monster("main program", 19).f_nr = 3;
		a_monster("main program", 19).f_art = 1;
		a_monster("main program", 19).f_lebenspunkte = 6;
		a_monster("main program", 19).f_angriff = 6;
		a_monster("main program", 19).f_abwehr = 4;
		a_monster("main program", 19).f_staerke = 4;
		a_monster("main program", 19).f_ruestung = 0;
		a_monster("main program", 19).f_zauberkraft = 0;
		a_monster("main program", 19).f_zauber = 0;
		a_monster("main program", 19).f_reichweite = 0;
		a_monster("main program", 19).f_minlevel = 5;
		a_monster("main program", 19).f_eigenschaft1 = 29;
		a_monster("main program", 19).f_eigenschaft2 = 3;
		a_monster("main program", 19).f_eigenschaft3 = 32;
		a_monster("main program", 20).f_name[2] = "Irrlicht";
		a_monster("main program", 20).f_name[1] = "Will-o-the-Whisp";
		a_monster("main program", 20).f_name[3] = "Luciernaga";
		a_monster("main program", 20).f_nr = 72;
		a_monster("main program", 20).f_art = 10;
		a_monster("main program", 20).f_lebenspunkte = 1;
		a_monster("main program", 20).f_angriff = 1;
		a_monster("main program", 20).f_abwehr = 6;
		a_monster("main program", 20).f_staerke = 3;
		a_monster("main program", 20).f_ruestung = 0;
		a_monster("main program", 20).f_zauberkraft = 0;
		a_monster("main program", 20).f_zauber = 0;
		a_monster("main program", 20).f_reichweite = 8;
		a_monster("main program", 20).f_minlevel = 5;
		a_monster("main program", 20).f_eigenschaft1 = 1;
		a_monster("main program", 20).f_eigenschaft2 = 7;
		a_monster("main program", 20).f_eigenschaft3 = 12;
		a_monster("main program", 20).f_eigenschaft4 = 13;
		a_monster("main program", 20).f_eigenschaft5 = 10;
		a_monster("main program", 20).f_eigenschaft6 = 14;
		a_monster("main program", 20).f_eigenschaft7 = 15;
		a_monster("main program", 20).f_eigenschaft8 = 45;
		a_monster("main program", 21).f_name[2] = "Hobgoblin";
		a_monster("main program", 21).f_name[1] = "Hobgoblin";
		a_monster("main program", 21).f_name[3] = "Duende Goblin";
		a_monster("main program", 21).f_nr = 87;
		a_monster("main program", 21).f_art = 2;
		a_monster("main program", 21).f_lebenspunkte = 14;
		a_monster("main program", 21).f_angriff = 4;
		a_monster("main program", 21).f_abwehr = 1;
		a_monster("main program", 21).f_staerke = 6;
		a_monster("main program", 21).f_ruestung = 1;
		a_monster("main program", 21).f_zauberkraft = 0;
		a_monster("main program", 21).f_zauber = 0;
		a_monster("main program", 21).f_reichweite = 0;
		a_monster("main program", 21).f_minlevel = 6;
		a_monster("main program", 21).f_eigenschaft1 = 2;
		a_monster("main program", 21).f_eigenschaft2 = 4;
		a_monster("main program", 21).f_eigenschaft3 = 8;
		a_monster("main program", 21).f_eigenschaft4 = 9;
		a_monster("main program", 21).f_eigenschaft5 = 26;
		a_monster("main program", 21).f_eigenschaft6 = 29;
		a_monster("main program", 21).f_eigenschaft7 = 33;
		a_monster("main program", 22).f_name[2] = "Riesentausendf\374ssler";
		a_monster("main program", 22).f_name[1] = "Giant Centipede";
		a_monster("main program", 22).f_name[3] = "Cienpies Gigante";
		a_monster("main program", 22).f_nr = 11;
		a_monster("main program", 22).f_art = 1;
		a_monster("main program", 22).f_lebenspunkte = 12;
		a_monster("main program", 22).f_angriff = 4;
		a_monster("main program", 22).f_abwehr = 2;
		a_monster("main program", 22).f_staerke = 5;
		a_monster("main program", 22).f_ruestung = 3;
		a_monster("main program", 22).f_zauberkraft = 0;
		a_monster("main program", 22).f_zauber = 0;
		a_monster("main program", 22).f_reichweite = 0;
		a_monster("main program", 22).f_minlevel = 6;
		a_monster("main program", 22).f_eigenschaft1 = 2;
		a_monster("main program", 22).f_eigenschaft2 = 3;
		a_monster("main program", 22).f_eigenschaft3 = 8;
		a_monster("main program", 22).f_eigenschaft4 = 29;
		a_monster("main program", 23).f_name[2] = "Schleimklumpen";
		a_monster("main program", 23).f_name[1] = "Glob";
		a_monster("main program", 23).f_name[3] = "Glob";
		a_monster("main program", 23).f_nr = 18;
		a_monster("main program", 23).f_art = 6;
		a_monster("main program", 23).f_lebenspunkte = 25;
		a_monster("main program", 23).f_angriff = 2;
		a_monster("main program", 23).f_abwehr = 2;
		a_monster("main program", 23).f_staerke = 5;
		a_monster("main program", 23).f_ruestung = 0;
		a_monster("main program", 23).f_zauberkraft = 0;
		a_monster("main program", 23).f_zauber = 0;
		a_monster("main program", 23).f_reichweite = 0;
		a_monster("main program", 23).f_minlevel = 6;
		a_monster("main program", 23).f_eigenschaft1 = 6;
		a_monster("main program", 24).f_name[2] = "Stachelratte";
		a_monster("main program", 24).f_name[1] = "Horned Rat";
		a_monster("main program", 24).f_name[3] = "Rata Cornuda";
		a_monster("main program", 24).f_nr = 7;
		a_monster("main program", 24).f_art = 1;
		a_monster("main program", 24).f_lebenspunkte = 10;
		a_monster("main program", 24).f_angriff = 6;
		a_monster("main program", 24).f_abwehr = 2;
		a_monster("main program", 24).f_staerke = 5;
		a_monster("main program", 24).f_ruestung = 1;
		a_monster("main program", 24).f_zauberkraft = 0;
		a_monster("main program", 24).f_zauber = 0;
		a_monster("main program", 24).f_reichweite = 0;
		a_monster("main program", 24).f_minlevel = 7;
		a_monster("main program", 24).f_sound = 52;
		a_monster("main program", 24).f_eigenschaft1 = 2;
		a_monster("main program", 24).f_eigenschaft2 = 8;
		a_monster("main program", 24).f_eigenschaft3 = 29;
		a_monster("main program", 24).f_eigenschaft4 = 35;
		a_monster("main program", 25).f_name[2] = "Gelatinekubus";
		a_monster("main program", 25).f_name[1] = "Gelatinous Cube";
		a_monster("main program", 25).f_name[3] = "Cubo Gelatinoso";
		a_monster("main program", 25).f_nr = 2;
		a_monster("main program", 25).f_art = 6;
		a_monster("main program", 25).f_lebenspunkte = 30;
		a_monster("main program", 25).f_angriff = 0;
		a_monster("main program", 25).f_abwehr = 0;
		a_monster("main program", 25).f_staerke = 2;
		a_monster("main program", 25).f_ruestung = 0;
		a_monster("main program", 25).f_zauberkraft = 0;
		a_monster("main program", 25).f_zauber = 0;
		a_monster("main program", 25).f_reichweite = 0;
		a_monster("main program", 25).f_minlevel = 7;
		a_monster("main program", 25).f_eigenschaft1 = 16;
		a_monster("main program", 26).f_name[2] = "Gespenst";
		a_monster("main program", 26).f_name[1] = "Wraith";
		a_monster("main program", 26).f_name[3] = "Espiritu";
		a_monster("main program", 26).f_nr = 27;
		a_monster("main program", 26).f_art = 10;
		a_monster("main program", 26).f_lebenspunkte = 1;
		a_monster("main program", 26).f_angriff = 3;
		a_monster("main program", 26).f_abwehr = 3;
		a_monster("main program", 26).f_staerke = 3;
		a_monster("main program", 26).f_ruestung = 0;
		a_monster("main program", 26).f_zauberkraft = 0;
		a_monster("main program", 26).f_zauber = 0;
		a_monster("main program", 26).f_reichweite = 0;
		a_monster("main program", 26).f_minlevel = 7;
		a_monster("main program", 26).f_eigenschaft1 = 17;
		a_monster("main program", 26).f_eigenschaft2 = 18;
		a_monster("main program", 26).f_eigenschaft3 = 7;
		a_monster("main program", 27).f_name[2] = "Oger";
		a_monster("main program", 27).f_name[1] = "Ogre";
		a_monster("main program", 27).f_name[3] = "Ogro";
		a_monster("main program", 27).f_nr = 80;
		a_monster("main program", 27).f_art = 2;
		a_monster("main program", 27).f_lebenspunkte = 18;
		a_monster("main program", 27).f_angriff = 5;
		a_monster("main program", 27).f_abwehr = 1;
		a_monster("main program", 27).f_staerke = 7;
		a_monster("main program", 27).f_ruestung = 1;
		a_monster("main program", 27).f_zauberkraft = 0;
		a_monster("main program", 27).f_zauber = 0;
		a_monster("main program", 27).f_reichweite = 0;
		a_monster("main program", 27).f_minlevel = 8;
		a_monster("main program", 27).f_eigenschaft1 = 8;
		a_monster("main program", 27).f_eigenschaft2 = 9;
		a_monster("main program", 27).f_eigenschaft3 = 26;
		a_monster("main program", 27).f_eigenschaft4 = 29;
		a_monster("main program", 27).f_eigenschaft5 = 33;
		a_monster("main program", 28).f_name[2] = "Riesenmoskito";
		a_monster("main program", 28).f_name[1] = "Giant Mosquito";
		a_monster("main program", 28).f_name[3] = "Mosquito Gigante";
		a_monster("main program", 28).f_nr = 12;
		a_monster("main program", 28).f_art = 1;
		a_monster("main program", 28).f_lebenspunkte = 5;
		a_monster("main program", 28).f_angriff = 8;
		a_monster("main program", 28).f_abwehr = 4;
		a_monster("main program", 28).f_staerke = 3;
		a_monster("main program", 28).f_ruestung = 0;
		a_monster("main program", 28).f_zauberkraft = 0;
		a_monster("main program", 28).f_zauber = 0;
		a_monster("main program", 28).f_reichweite = 0;
		a_monster("main program", 28).f_minlevel = 8;
		a_monster("main program", 28).f_eigenschaft1 = 1;
		a_monster("main program", 28).f_eigenschaft2 = 8;
		a_monster("main program", 28).f_eigenschaft3 = 6;
		a_monster("main program", 28).f_eigenschaft4 = 29;
		a_monster("main program", 28).f_eigenschaft5 = 44;
		a_monster("main program", 29).f_name[2] = "Unsichtbarer Schleicher";
		a_monster("main program", 29).f_name[1] = "Invisible Stalker";
		a_monster("main program", 29).f_name[3] = "Tallador Invisible";
		a_monster("main program", 29).f_nr = 77;
		a_monster("main program", 29).f_art = 10;
		a_monster("main program", 29).f_lebenspunkte = 3;
		a_monster("main program", 29).f_angriff = 7;
		a_monster("main program", 29).f_abwehr = 1;
		a_monster("main program", 29).f_staerke = 4;
		a_monster("main program", 29).f_ruestung = 0;
		a_monster("main program", 29).f_zauberkraft = 0;
		a_monster("main program", 29).f_zauber = 0;
		a_monster("main program", 29).f_reichweite = 0;
		a_monster("main program", 29).f_minlevel = 8;
		a_monster("main program", 29).f_eigenschaft1 = 19;
		a_monster("main program", 30).f_name[2] = "Killerfrosch";
		a_monster("main program", 30).f_name[1] = "Killer Frog";
		a_monster("main program", 30).f_name[3] = "Rana Asesina";
		a_monster("main program", 30).f_nr = 17;
		a_monster("main program", 30).f_art = 1;
		a_monster("main program", 30).f_lebenspunkte = 8;
		a_monster("main program", 30).f_angriff = 5;
		a_monster("main program", 30).f_abwehr = 1;
		a_monster("main program", 30).f_staerke = 5;
		a_monster("main program", 30).f_ruestung = 0;
		a_monster("main program", 30).f_zauberkraft = 0;
		a_monster("main program", 30).f_zauber = 0;
		a_monster("main program", 30).f_reichweite = 0;
		a_monster("main program", 30).f_minlevel = 9;
		a_monster("main program", 30).f_sound = 40;
		a_monster("main program", 30).f_eigenschaft1 = 8;
		a_monster("main program", 30).f_eigenschaft2 = 29;
		a_monster("main program", 31).f_name[2] = "S\344belzahntiger";
		a_monster("main program", 31).f_name[1] = "Sabertooth Tiger";
		a_monster("main program", 31).f_name[3] = "Tigre Dientes de Sable";
		a_monster("main program", 31).f_nr = 75;
		a_monster("main program", 31).f_art = 1;
		a_monster("main program", 31).f_lebenspunkte = 17;
		a_monster("main program", 31).f_angriff = 7;
		a_monster("main program", 31).f_abwehr = 4;
		a_monster("main program", 31).f_staerke = 6;
		a_monster("main program", 31).f_ruestung = 1;
		a_monster("main program", 31).f_zauberkraft = 0;
		a_monster("main program", 31).f_zauber = 0;
		a_monster("main program", 31).f_reichweite = 0;
		a_monster("main program", 31).f_minlevel = 9;
		a_monster("main program", 31).f_sound = 43;
		a_monster("main program", 31).f_eigenschaft1 = 29;
		a_monster("main program", 31).f_eigenschaft2 = 38;
		a_monster("main program", 32).f_name[2] = "Magma Echse";
		a_monster("main program", 32).f_name[1] = "Magma Lizard";
		a_monster("main program", 32).f_name[3] = "Lagarto de Magma";
		a_monster("main program", 32).f_nr = 20;
		a_monster("main program", 32).f_art = 1;
		a_monster("main program", 32).f_lebenspunkte = 11;
		a_monster("main program", 32).f_angriff = 5;
		a_monster("main program", 32).f_abwehr = 2;
		a_monster("main program", 32).f_staerke = 5;
		a_monster("main program", 32).f_ruestung = 1;
		a_monster("main program", 32).f_zauberkraft = 0;
		a_monster("main program", 32).f_zauber = 0;
		a_monster("main program", 32).f_reichweite = 3;
		a_monster("main program", 32).f_minlevel = 9;
		a_monster("main program", 32).f_eigenschaft1 = 20;
		a_monster("main program", 32).f_eigenschaft2 = 12;
		a_monster("main program", 32).f_eigenschaft3 = 8;
		a_monster("main program", 32).f_eigenschaft4 = 29;
		a_monster("main program", 32).f_eigenschaft5 = 39;
		a_monster("main program", 32).f_eigenschaft6 = 42;
		a_monster("main program", 33).f_name[2] = "Skelettritter";
		a_monster("main program", 33).f_name[1] = "Undead Knight";
		a_monster("main program", 33).f_name[3] = "Guerrero No Muerto";
		a_monster("main program", 33).f_nr = 22;
		a_monster("main program", 33).f_art = 3;
		a_monster("main program", 33).f_lebenspunkte = 7;
		a_monster("main program", 33).f_angriff = 9;
		a_monster("main program", 33).f_abwehr = 2;
		a_monster("main program", 33).f_staerke = 5;
		a_monster("main program", 33).f_ruestung = 5;
		a_monster("main program", 33).f_zauberkraft = 0;
		a_monster("main program", 33).f_zauber = 0;
		a_monster("main program", 33).f_reichweite = 0;
		a_monster("main program", 33).f_minlevel = 10;
		a_monster("main program", 33).f_sound = 52;
		a_monster("main program", 33).f_eigenschaft1 = 7;
		a_monster("main program", 33).f_eigenschaft2 = 34;
		a_monster("main program", 34).f_name[2] = "Ninja";
		a_monster("main program", 34).f_name[1] = "Ninja";
		a_monster("main program", 34).f_name[3] = "Ninja";
		a_monster("main program", 34).f_nr = 36;
		a_monster("main program", 34).f_art = 2;
		a_monster("main program", 34).f_lebenspunkte = 3;
		a_monster("main program", 34).f_angriff = 12;
		a_monster("main program", 34).f_abwehr = 10;
		a_monster("main program", 34).f_staerke = 3;
		a_monster("main program", 34).f_ruestung = 0;
		a_monster("main program", 34).f_zauberkraft = 0;
		a_monster("main program", 34).f_zauber = 0;
		a_monster("main program", 34).f_reichweite = 0;
		a_monster("main program", 34).f_minlevel = 10;
		a_monster("main program", 34).f_eigenschaft1 = 3;
		a_monster("main program", 34).f_eigenschaft2 = 2;
		a_monster("main program", 34).f_eigenschaft3 = 8;
		a_monster("main program", 34).f_eigenschaft4 = 9;
		a_monster("main program", 34).f_eigenschaft5 = 29;
		a_monster("main program", 35).f_name[2] = "Purpurwurm";
		a_monster("main program", 35).f_name[1] = "Purple Worm";
		a_monster("main program", 35).f_name[3] = "Gusano Purpura";
		a_monster("main program", 35).f_nr = 10;
		a_monster("main program", 35).f_art = 1;
		a_monster("main program", 35).f_lebenspunkte = 22;
		a_monster("main program", 35).f_angriff = 7;
		a_monster("main program", 35).f_abwehr = 0;
		a_monster("main program", 35).f_staerke = 5;
		a_monster("main program", 35).f_ruestung = 3;
		a_monster("main program", 35).f_zauberkraft = 0;
		a_monster("main program", 35).f_zauber = 0;
		a_monster("main program", 35).f_reichweite = 0;
		a_monster("main program", 35).f_minlevel = 10;
		a_monster("main program", 35).f_eigenschaft1 = 29;
		a_monster("main program", 35).f_eigenschaft2 = 42;
		a_monster("main program", 36).f_name[2] = "Riesenskorpion";
		a_monster("main program", 36).f_name[1] = "Giant Scorpion";
		a_monster("main program", 36).f_name[3] = "Escorpion Gigante";
		a_monster("main program", 36).f_nr = 14;
		a_monster("main program", 36).f_art = 1;
		a_monster("main program", 36).f_lebenspunkte = 12;
		a_monster("main program", 36).f_angriff = 11;
		a_monster("main program", 36).f_abwehr = 4;
		a_monster("main program", 36).f_staerke = 5;
		a_monster("main program", 36).f_ruestung = 4;
		a_monster("main program", 36).f_zauberkraft = 0;
		a_monster("main program", 36).f_zauber = 0;
		a_monster("main program", 36).f_reichweite = 0;
		a_monster("main program", 36).f_minlevel = 11;
		a_monster("main program", 36).f_eigenschaft1 = 3;
		a_monster("main program", 36).f_eigenschaft2 = 8;
		a_monster("main program", 36).f_eigenschaft3 = 29;
		a_monster("main program", 37).f_name[2] = "Hexe";
		a_monster("main program", 37).f_name[1] = "Witch";
		a_monster("main program", 37).f_name[3] = "Bruja";
		a_monster("main program", 37).f_nr = 74;
		a_monster("main program", 37).f_art = 2;
		a_monster("main program", 37).f_lebenspunkte = 7;
		a_monster("main program", 37).f_angriff = 0;
		a_monster("main program", 37).f_abwehr = 0;
		a_monster("main program", 37).f_staerke = 1;
		a_monster("main program", 37).f_ruestung = 0;
		a_monster("main program", 37).f_zauberkraft = 3;
		a_monster("main program", 37).f_zauber = 2;
		a_monster("main program", 37).f_reichweite = 7;
		a_monster("main program", 37).f_minlevel = 11;
		a_monster("main program", 37).f_eigenschaft1 = 4;
		a_monster("main program", 37).f_eigenschaft2 = 8;
		a_monster("main program", 37).f_eigenschaft3 = 9;
		a_monster("main program", 37).f_eigenschaft4 = 25;
		a_monster("main program", 37).f_eigenschaft5 = 27;
		a_monster("main program", 37).f_eigenschaft6 = 29;
		a_monster("main program", 38).f_name[2] = "Riesenkrake";
		a_monster("main program", 38).f_name[1] = "Giant Octopus";
		a_monster("main program", 38).f_name[3] = "Pulpo Gigante";
		a_monster("main program", 38).f_nr = 96;
		a_monster("main program", 38).f_art = 1;
		a_monster("main program", 38).f_lebenspunkte = 20;
		a_monster("main program", 38).f_angriff = 8;
		a_monster("main program", 38).f_abwehr = 4;
		a_monster("main program", 38).f_staerke = 7;
		a_monster("main program", 38).f_ruestung = 3;
		a_monster("main program", 38).f_zauberkraft = 0;
		a_monster("main program", 38).f_zauber = 0;
		a_monster("main program", 38).f_minlevel = 9;
		a_monster("main program", 38).f_eigenschaft1 = 9;
		a_monster("main program", 38).f_eigenschaft2 = 29;
		a_monster("main program", 38).f_eigenschaft3 = 30;
		a_monster("main program", 39).f_name[2] = "Zentaur";
		a_monster("main program", 39).f_name[1] = "Centaur";
		a_monster("main program", 39).f_name[3] = "Centauro";
		a_monster("main program", 39).f_nr = 58;
		a_monster("main program", 39).f_art = 2;
		a_monster("main program", 39).f_lebenspunkte = 12;
		a_monster("main program", 39).f_angriff = 7;
		a_monster("main program", 39).f_abwehr = 7;
		a_monster("main program", 39).f_staerke = 5;
		a_monster("main program", 39).f_ruestung = 1;
		a_monster("main program", 39).f_zauberkraft = 0;
		a_monster("main program", 39).f_zauber = 0;
		a_monster("main program", 39).f_reichweite = 10;
		a_monster("main program", 39).f_minlevel = 12;
		a_monster("main program", 39).f_sound = 47;
		a_monster("main program", 39).f_eigenschaft1 = 5;
		a_monster("main program", 39).f_eigenschaft2 = 2;
		a_monster("main program", 39).f_eigenschaft3 = 4;
		a_monster("main program", 39).f_eigenschaft4 = 8;
		a_monster("main program", 39).f_eigenschaft5 = 9;
		a_monster("main program", 39).f_eigenschaft6 = 26;
		a_monster("main program", 39).f_eigenschaft7 = 29;
		a_monster("main program", 40).f_name[2] = "Schatten";
		a_monster("main program", 40).f_name[1] = "Shadow";
		a_monster("main program", 40).f_name[3] = "Sombra";
		a_monster("main program", 40).f_nr = 26;
		a_monster("main program", 40).f_art = 10;
		a_monster("main program", 40).f_lebenspunkte = 5;
		a_monster("main program", 40).f_angriff = 3;
		a_monster("main program", 40).f_abwehr = 8;
		a_monster("main program", 40).f_staerke = 4;
		a_monster("main program", 40).f_ruestung = 0;
		a_monster("main program", 40).f_zauberkraft = 0;
		a_monster("main program", 40).f_zauber = 0;
		a_monster("main program", 40).f_minlevel = 12;
		a_monster("main program", 40).f_eigenschaft1 = 17;
		a_monster("main program", 40).f_eigenschaft2 = 18;
		a_monster("main program", 40).f_eigenschaft3 = 7;
		a_monster("main program", 40).f_eigenschaft4 = 15;
		a_monster("main program", 41).f_name[2] = "Nekromant";
		a_monster("main program", 41).f_name[1] = "Necromancer";
		a_monster("main program", 41).f_name[3] = "Nigromante";
		a_monster("main program", 41).f_nr = 51;
		a_monster("main program", 41).f_art = 2;
		a_monster("main program", 41).f_lebenspunkte = 15;
		a_monster("main program", 41).f_angriff = 2;
		a_monster("main program", 41).f_abwehr = 2;
		a_monster("main program", 41).f_staerke = 3;
		a_monster("main program", 41).f_ruestung = 2;
		a_monster("main program", 41).f_zauberkraft = 5;
		a_monster("main program", 41).f_zauber = 4;
		a_monster("main program", 41).f_reichweite = 7;
		a_monster("main program", 41).f_minlevel = 12;
		a_monster("main program", 41).f_eigenschaft1 = 4;
		a_monster("main program", 41).f_eigenschaft2 = 15;
		a_monster("main program", 41).f_eigenschaft3 = 27;
		a_monster("main program", 41).f_eigenschaft4 = 29;
		a_monster("main program", 42).f_name[2] = "Mumie";
		a_monster("main program", 42).f_name[1] = "Mummy";
		a_monster("main program", 42).f_name[3] = "Momia";
		a_monster("main program", 42).f_nr = 66;
		a_monster("main program", 42).f_art = 3;
		a_monster("main program", 42).f_lebenspunkte = 28;
		a_monster("main program", 42).f_angriff = 4;
		a_monster("main program", 42).f_abwehr = 2;
		a_monster("main program", 42).f_staerke = 7;
		a_monster("main program", 42).f_ruestung = 1;
		a_monster("main program", 42).f_zauberkraft = 0;
		a_monster("main program", 42).f_zauber = 0;
		a_monster("main program", 42).f_reichweite = 0;
		a_monster("main program", 42).f_minlevel = 13;
		a_monster("main program", 42).f_sound = 52;
		a_monster("main program", 42).f_eigenschaft1 = 7;
		a_monster("main program", 42).f_eigenschaft2 = 11;
		a_monster("main program", 42).f_eigenschaft3 = 28;
		a_monster("main program", 42).f_eigenschaft4 = 34;
		a_monster("main program", 42).f_eigenschaft5 = 44;
		a_monster("main program", 43).f_name[2] = "Succubus";
		a_monster("main program", 43).f_name[1] = "Succubus";
		a_monster("main program", 43).f_name[3] = "Scubo";
		a_monster("main program", 43).f_nr = 96;
		a_monster("main program", 43).f_art = 7;
		a_monster("main program", 43).f_lebenspunkte = 12;
		a_monster("main program", 43).f_angriff = 5;
		a_monster("main program", 43).f_abwehr = 8;
		a_monster("main program", 43).f_staerke = 4;
		a_monster("main program", 43).f_ruestung = 1;
		a_monster("main program", 43).f_zauberkraft = 0;
		a_monster("main program", 43).f_zauber = 0;
		a_monster("main program", 43).f_reichweite = 0;
		a_monster("main program", 43).f_minlevel = 13;
		a_monster("main program", 43).f_eigenschaft1 = 1;
		a_monster("main program", 43).f_eigenschaft2 = 3;
		a_monster("main program", 43).f_eigenschaft3 = 2;
		a_monster("main program", 43).f_eigenschaft4 = 8;
		a_monster("main program", 43).f_eigenschaft5 = 10;
		a_monster("main program", 43).f_eigenschaft6 = 14;
		a_monster("main program", 43).f_eigenschaft7 = 28;
		a_monster("main program", 43).f_eigenschaft8 = 30;
		a_monster("main program", 44).f_name[2] = "Skelettmagier";
		a_monster("main program", 44).f_name[1] = "Lich";
		a_monster("main program", 44).f_name[3] = "Mago Esqueleto";
		a_monster("main program", 44).f_nr = 24;
		a_monster("main program", 44).f_art = 3;
		a_monster("main program", 44).f_lebenspunkte = 25;
		a_monster("main program", 44).f_angriff = 5;
		a_monster("main program", 44).f_abwehr = 2;
		a_monster("main program", 44).f_staerke = 7;
		a_monster("main program", 44).f_ruestung = 4;
		a_monster("main program", 44).f_zauberkraft = 7;
		a_monster("main program", 44).f_zauber = 1;
		a_monster("main program", 44).f_reichweite = 8;
		a_monster("main program", 44).f_minlevel = 13;
		a_monster("main program", 44).f_eigenschaft1 = 7;
		a_monster("main program", 44).f_eigenschaft2 = 34;
		a_monster("main program", 45).f_name[2] = "Betrachter";
		a_monster("main program", 45).f_name[1] = "Beholder";
		a_monster("main program", 45).f_name[3] = "Observador";
		a_monster("main program", 45).f_nr = 5;
		a_monster("main program", 45).f_art = 6;
		a_monster("main program", 45).f_lebenspunkte = 21;
		a_monster("main program", 45).f_angriff = 4;
		a_monster("main program", 45).f_abwehr = 7;
		a_monster("main program", 45).f_staerke = 4;
		a_monster("main program", 45).f_ruestung = 1;
		a_monster("main program", 45).f_zauberkraft = 0;
		a_monster("main program", 45).f_zauber = 0;
		a_monster("main program", 45).f_reichweite = 5;
		a_monster("main program", 45).f_minlevel = 14;
		a_monster("main program", 45).f_eigenschaft1 = 3;
		a_monster("main program", 45).f_eigenschaft2 = 21;
		a_monster("main program", 45).f_eigenschaft3 = 2;
		a_monster("main program", 45).f_eigenschaft4 = 1;
		a_monster("main program", 45).f_eigenschaft5 = 8;
		a_monster("main program", 45).f_eigenschaft6 = 29;
		a_monster("main program", 46).f_name[2] = "Tarantel";
		a_monster("main program", 46).f_name[1] = "Tarantula";
		a_monster("main program", 46).f_name[3] = "Tarantula";
		a_monster("main program", 46).f_nr = 100;
		a_monster("main program", 46).f_art = 1;
		a_monster("main program", 46).f_lebenspunkte = 15;
		a_monster("main program", 46).f_angriff = 8;
		a_monster("main program", 46).f_abwehr = 4;
		a_monster("main program", 46).f_staerke = 5;
		a_monster("main program", 46).f_ruestung = 1;
		a_monster("main program", 46).f_zauberkraft = 0;
		a_monster("main program", 46).f_zauber = 0;
		a_monster("main program", 46).f_reichweite = 0;
		a_monster("main program", 46).f_minlevel = 14;
		a_monster("main program", 46).f_eigenschaft1 = 3;
		a_monster("main program", 46).f_eigenschaft2 = 2;
		a_monster("main program", 46).f_eigenschaft3 = 11;
		a_monster("main program", 46).f_eigenschaft4 = 29;
		a_monster("main program", 47).f_name[2] = "Phantom";
		a_monster("main program", 47).f_name[1] = "Phantom";
		a_monster("main program", 47).f_name[3] = "Fantasma";
		a_monster("main program", 47).f_nr = 39;
		a_monster("main program", 47).f_art = 10;
		a_monster("main program", 47).f_lebenspunkte = 20;
		a_monster("main program", 47).f_angriff = 7;
		a_monster("main program", 47).f_abwehr = 3;
		a_monster("main program", 47).f_staerke = 5;
		a_monster("main program", 47).f_ruestung = 2;
		a_monster("main program", 47).f_zauberkraft = 0;
		a_monster("main program", 47).f_zauber = 0;
		a_monster("main program", 47).f_reichweite = 0;
		a_monster("main program", 47).f_minlevel = 14;
		a_monster("main program", 47).f_sound = 52;
		a_monster("main program", 47).f_eigenschaft1 = 17;
		a_monster("main program", 47).f_eigenschaft2 = 3;
		a_monster("main program", 47).f_eigenschaft3 = 18;
		a_monster("main program", 47).f_eigenschaft4 = 7;
		a_monster("main program", 47).f_eigenschaft5 = 13;
		a_monster("main program", 47).f_eigenschaft6 = 15;
		a_monster("main program", 48).f_name[2] = "Wasserdrache";
		a_monster("main program", 48).f_name[1] = "Water Dragon";
		a_monster("main program", 48).f_name[3] = "Dragon de Agua";
		a_monster("main program", 48).f_nr = 15;
		a_monster("main program", 48).f_art = 8;
		a_monster("main program", 48).f_lebenspunkte = 50;
		a_monster("main program", 48).f_angriff = 9;
		a_monster("main program", 48).f_abwehr = 9;
		a_monster("main program", 48).f_staerke = 9;
		a_monster("main program", 48).f_ruestung = 9;
		a_monster("main program", 48).f_zauberkraft = 0;
		a_monster("main program", 48).f_zauber = 0;
		a_monster("main program", 48).f_reichweite = 5;
		a_monster("main program", 48).f_minlevel = 15;
		a_monster("main program", 48).f_sound = 51;
		a_monster("main program", 48).f_eigenschaft1 = 20;
		a_monster("main program", 48).f_eigenschaft2 = 1;
		a_monster("main program", 48).f_eigenschaft3 = 25;
		a_monster("main program", 48).f_eigenschaft4 = 30;
		a_monster("main program", 49).f_name[2] = "Gorgone";
		a_monster("main program", 49).f_name[1] = "Gorgon";
		a_monster("main program", 49).f_name[3] = "Gorgona";
		a_monster("main program", 49).f_nr = 30;
		a_monster("main program", 49).f_art = 2;
		a_monster("main program", 49).f_lebenspunkte = 15;
		a_monster("main program", 49).f_angriff = 3;
		a_monster("main program", 49).f_abwehr = 5;
		a_monster("main program", 49).f_staerke = 4;
		a_monster("main program", 49).f_ruestung = 1;
		a_monster("main program", 49).f_zauberkraft = 0;
		a_monster("main program", 49).f_zauber = 0;
		a_monster("main program", 49).f_reichweite = 6;
		a_monster("main program", 49).f_minlevel = 15;
		a_monster("main program", 49).f_eigenschaft1 = 3;
		a_monster("main program", 49).f_eigenschaft2 = 8;
		a_monster("main program", 49).f_eigenschaft3 = 22;
		a_monster("main program", 49).f_eigenschaft4 = 29;
		a_monster("main program", 50).f_name[2] = "Schwarzer Magier";
		a_monster("main program", 50).f_name[1] = "Black Magician";
		a_monster("main program", 50).f_name[3] = "Mago Negro";
		a_monster("main program", 50).f_nr = 52;
		a_monster("main program", 50).f_art = 2;
		a_monster("main program", 50).f_lebenspunkte = 8;
		a_monster("main program", 50).f_angriff = 3;
		a_monster("main program", 50).f_abwehr = 2;
		a_monster("main program", 50).f_staerke = 1;
		a_monster("main program", 50).f_ruestung = 1;
		a_monster("main program", 50).f_zauberkraft = 12;
		a_monster("main program", 50).f_zauber = 5;
		a_monster("main program", 50).f_reichweite = 9;
		a_monster("main program", 50).f_minlevel = 15;
		a_monster("main program", 50).f_eigenschaft1 = 4;
		a_monster("main program", 50).f_eigenschaft2 = 15;
		a_monster("main program", 50).f_eigenschaft3 = 27;
		a_monster("main program", 50).f_eigenschaft4 = 29;
		a_monster("main program", 51).f_name[2] = "Steingolem";
		a_monster("main program", 51).f_name[1] = "Stone Golem";
		a_monster("main program", 51).f_name[3] = "Golem de Piedra";
		a_monster("main program", 51).f_nr = 28;
		a_monster("main program", 51).f_art = 9;
		a_monster("main program", 51).f_lebenspunkte = 60;
		a_monster("main program", 51).f_angriff = 4;
		a_monster("main program", 51).f_abwehr = 2;
		a_monster("main program", 51).f_staerke = 8;
		a_monster("main program", 51).f_ruestung = 10;
		a_monster("main program", 51).f_zauberkraft = 0;
		a_monster("main program", 51).f_zauber = 0;
		a_monster("main program", 51).f_reichweite = 0;
		a_monster("main program", 51).f_minlevel = 16;
		a_monster("main program", 51).f_sound = 46;
		a_monster("main program", 51).f_eigenschaft1 = 7;
		a_monster("main program", 51).f_eigenschaft2 = 13;
		a_monster("main program", 51).f_eigenschaft3 = 25;
		a_monster("main program", 51).f_eigenschaft4 = 28;
		a_monster("main program", 51).f_eigenschaft5 = 40;
		a_monster("main program", 52).f_name[2] = "Greif";
		a_monster("main program", 52).f_name[1] = "Gryphon";
		a_monster("main program", 52).f_name[3] = "Grifo";
		a_monster("main program", 52).f_nr = 8;
		a_monster("main program", 52).f_art = 1;
		a_monster("main program", 52).f_lebenspunkte = 30;
		a_monster("main program", 52).f_angriff = 15;
		a_monster("main program", 52).f_abwehr = 5;
		a_monster("main program", 52).f_staerke = 7;
		a_monster("main program", 52).f_ruestung = 1;
		a_monster("main program", 52).f_zauberkraft = 0;
		a_monster("main program", 52).f_zauber = 0;
		a_monster("main program", 52).f_reichweite = 0;
		a_monster("main program", 52).f_minlevel = 16;
		a_monster("main program", 52).f_eigenschaft1 = 1;
		a_monster("main program", 52).f_eigenschaft2 = 29;
		a_monster("main program", 53).f_name[2] = "Ph\366nix";
		a_monster("main program", 53).f_name[1] = "Phoenix";
		a_monster("main program", 53).f_name[3] = "Fenix";
		a_monster("main program", 53).f_nr = 64;
		a_monster("main program", 53).f_art = 1;
		a_monster("main program", 53).f_lebenspunkte = 8;
		a_monster("main program", 53).f_angriff = 24;
		a_monster("main program", 53).f_abwehr = 18;
		a_monster("main program", 53).f_staerke = 21;
		a_monster("main program", 53).f_ruestung = 0;
		a_monster("main program", 53).f_zauberkraft = 0;
		a_monster("main program", 53).f_zauber = 0;
		a_monster("main program", 53).f_reichweite = 0;
		a_monster("main program", 53).f_minlevel = 16;
		a_monster("main program", 53).f_eigenschaft1 = 12;
		a_monster("main program", 53).f_eigenschaft2 = 1;
		a_monster("main program", 53).f_eigenschaft3 = 7;
		a_monster("main program", 53).f_eigenschaft4 = 13;
		a_monster("main program", 53).f_eigenschaft5 = 29;
		a_monster("main program", 53).f_eigenschaft6 = 39;
		a_monster("main program", 53).f_eigenschaft7 = 42;
		a_monster("main program", 54).f_name[2] = "Grabesschatten";
		a_monster("main program", 54).f_name[1] = "Tomb Shadow";
		a_monster("main program", 54).f_name[3] = "Sombra de Tumba";
		a_monster("main program", 54).f_nr = 43;
		a_monster("main program", 54).f_art = 10;
		a_monster("main program", 54).f_lebenspunkte = 16;
		a_monster("main program", 54).f_angriff = 8;
		a_monster("main program", 54).f_abwehr = 2;
		a_monster("main program", 54).f_staerke = 5;
		a_monster("main program", 54).f_ruestung = 5;
		a_monster("main program", 54).f_zauberkraft = 0;
		a_monster("main program", 54).f_zauber = 0;
		a_monster("main program", 54).f_reichweite = 0;
		a_monster("main program", 54).f_minlevel = 17;
		a_monster("main program", 54).f_eigenschaft1 = 17;
		a_monster("main program", 54).f_eigenschaft2 = 3;
		a_monster("main program", 54).f_eigenschaft3 = 18;
		a_monster("main program", 54).f_eigenschaft4 = 7;
		a_monster("main program", 54).f_eigenschaft5 = 19;
		a_monster("main program", 54).f_eigenschaft6 = 15;
		a_monster("main program", 55).f_name[2] = "Lamia";
		a_monster("main program", 55).f_name[1] = "Lamia";
		a_monster("main program", 55).f_name[3] = "Lamia";
		a_monster("main program", 55).f_nr = 178;
		a_monster("main program", 55).f_art = 2;
		a_monster("main program", 55).f_lebenspunkte = 18;
		a_monster("main program", 55).f_angriff = 9;
		a_monster("main program", 55).f_abwehr = 6;
		a_monster("main program", 55).f_staerke = 5;
		a_monster("main program", 55).f_ruestung = 2;
		a_monster("main program", 55).f_zauberkraft = 0;
		a_monster("main program", 55).f_zauber = 0;
		a_monster("main program", 55).f_reichweite = 7;
		a_monster("main program", 55).f_minlevel = 17;
		a_monster("main program", 55).f_sound = 50;
		a_monster("main program", 55).f_eigenschaft1 = 3;
		a_monster("main program", 55).f_eigenschaft2 = 4;
		a_monster("main program", 55).f_eigenschaft3 = 8;
		a_monster("main program", 55).f_eigenschaft4 = 9;
		a_monster("main program", 55).f_eigenschaft5 = 16;
		a_monster("main program", 55).f_eigenschaft6 = 13;
		a_monster("main program", 55).f_eigenschaft7 = 22;
		a_monster("main program", 56).f_name[2] = "Feuerd\344mon";
		a_monster("main program", 56).f_name[1] = "Fire Demon";
		a_monster("main program", 56).f_name[3] = "Demonio de Fuego";
		a_monster("main program", 56).f_nr = 29;
		a_monster("main program", 56).f_art = 7;
		a_monster("main program", 56).f_lebenspunkte = 30;
		a_monster("main program", 56).f_angriff = 12;
		a_monster("main program", 56).f_abwehr = 2;
		a_monster("main program", 56).f_staerke = 12;
		a_monster("main program", 56).f_ruestung = 2;
		a_monster("main program", 56).f_zauberkraft = 0;
		a_monster("main program", 56).f_zauber = 0;
		a_monster("main program", 56).f_reichweite = 0;
		a_monster("main program", 56).f_minlevel = 17;
		a_monster("main program", 56).f_eigenschaft1 = 12;
		a_monster("main program", 56).f_eigenschaft2 = 7;
		a_monster("main program", 56).f_eigenschaft3 = 13;
		a_monster("main program", 56).f_eigenschaft4 = 40;
		a_monster("main program", 56).f_eigenschaft5 = 42;
		a_monster("main program", 57).f_name[2] = "Eisd\344mon";
		a_monster("main program", 57).f_name[1] = "Frost Demon";
		a_monster("main program", 57).f_name[3] = "Demonio de Hielo";
		a_monster("main program", 57).f_nr = 16;
		a_monster("main program", 57).f_art = 7;
		a_monster("main program", 57).f_lebenspunkte = 40;
		a_monster("main program", 57).f_angriff = 10;
		a_monster("main program", 57).f_abwehr = 6;
		a_monster("main program", 57).f_staerke = 10;
		a_monster("main program", 57).f_ruestung = 6;
		a_monster("main program", 57).f_zauberkraft = 0;
		a_monster("main program", 57).f_zauber = 0;
		a_monster("main program", 57).f_reichweite = 4;
		a_monster("main program", 57).f_minlevel = 18;
		a_monster("main program", 57).f_eigenschaft1 = 11;
		a_monster("main program", 57).f_eigenschaft2 = 23;
		a_monster("main program", 57).f_eigenschaft3 = 18;
		a_monster("main program", 57).f_eigenschaft4 = 13;
		a_monster("main program", 58).f_name[2] = "Sturmd\344mon";
		a_monster("main program", 58).f_name[1] = "Storm Demon";
		a_monster("main program", 58).f_name[3] = "Demonio de Tormenta";
		a_monster("main program", 58).f_nr = 91;
		a_monster("main program", 58).f_art = 7;
		a_monster("main program", 58).f_lebenspunkte = 25;
		a_monster("main program", 58).f_angriff = 11;
		a_monster("main program", 58).f_abwehr = 12;
		a_monster("main program", 58).f_staerke = 9;
		a_monster("main program", 58).f_ruestung = 0;
		a_monster("main program", 58).f_zauberkraft = 0;
		a_monster("main program", 58).f_zauber = 0;
		a_monster("main program", 58).f_reichweite = 0;
		a_monster("main program", 58).f_minlevel = 18;
		a_monster("main program", 58).f_eigenschaft1 = 17;
		a_monster("main program", 58).f_eigenschaft2 = 7;
		a_monster("main program", 58).f_eigenschaft3 = 14;
		a_monster("main program", 58).f_eigenschaft4 = 25;
		a_monster("main program", 58).f_eigenschaft5 = 42;
		a_monster("main program", 59).f_name[2] = "Wyvern";
		a_monster("main program", 59).f_name[1] = "Wyvern";
		a_monster("main program", 59).f_name[3] = "Wyvern";
		a_monster("main program", 59).f_nr = 95;
		a_monster("main program", 59).f_art = 8;
		a_monster("main program", 59).f_lebenspunkte = 45;
		a_monster("main program", 59).f_angriff = 13;
		a_monster("main program", 59).f_abwehr = 7;
		a_monster("main program", 59).f_staerke = 11;
		a_monster("main program", 59).f_ruestung = 5;
		a_monster("main program", 59).f_zauberkraft = 0;
		a_monster("main program", 59).f_zauber = 0;
		a_monster("main program", 59).f_reichweite = 0;
		a_monster("main program", 59).f_minlevel = 18;
		a_monster("main program", 59).f_eigenschaft1 = 3;
		a_monster("main program", 59).f_eigenschaft2 = 29;
		a_monster("main program", 60).f_name[2] = "Hydra";
		a_monster("main program", 60).f_name[1] = "Hydra";
		a_monster("main program", 60).f_name[3] = "Hidra";
		a_monster("main program", 60).f_nr = 78;
		a_monster("main program", 60).f_art = 1;
		a_monster("main program", 60).f_lebenspunkte = 60;
		a_monster("main program", 60).f_angriff = 12;
		a_monster("main program", 60).f_abwehr = 9;
		a_monster("main program", 60).f_staerke = 10;
		a_monster("main program", 60).f_ruestung = 6;
		a_monster("main program", 60).f_zauberkraft = 0;
		a_monster("main program", 60).f_zauber = 0;
		a_monster("main program", 60).f_reichweite = 0;
		a_monster("main program", 60).f_minlevel = 19;
		a_monster("main program", 60).f_sound = 51;
		a_monster("main program", 60).f_eigenschaft1 = 3;
		a_monster("main program", 60).f_eigenschaft2 = 16;
		a_monster("main program", 60).f_eigenschaft3 = 28;
		a_monster("main program", 60).f_eigenschaft4 = 39;
		a_monster("main program", 60).f_eigenschaft5 = 40;
		a_monster("main program", 61).f_name[2] = "Banshee";
		a_monster("main program", 61).f_name[1] = "Banshee";
		a_monster("main program", 61).f_name[3] = "Banshee";
		a_monster("main program", 61).f_nr = 83;
		a_monster("main program", 61).f_art = 10;
		a_monster("main program", 61).f_lebenspunkte = 50;
		a_monster("main program", 61).f_angriff = 9;
		a_monster("main program", 61).f_abwehr = 21;
		a_monster("main program", 61).f_staerke = 13;
		a_monster("main program", 61).f_ruestung = 6;
		a_monster("main program", 61).f_zauberkraft = 0;
		a_monster("main program", 61).f_zauber = 0;
		a_monster("main program", 61).f_reichweite = 5;
		a_monster("main program", 61).f_minlevel = 50;
		a_monster("main program", 61).f_sound = 50;
		a_monster("main program", 61).f_eigenschaft1 = 1;
		a_monster("main program", 61).f_eigenschaft2 = 3;
		a_monster("main program", 61).f_eigenschaft3 = 17;
		a_monster("main program", 61).f_eigenschaft4 = 7;
		a_monster("main program", 61).f_eigenschaft5 = 13;
		a_monster("main program", 61).f_eigenschaft6 = 24;
		a_monster("main program", 61).f_eigenschaft7 = 40;
		a_monster("main program", 61).f_eigenschaft8 = 45;
		a_monster("main program", 62).f_name[2] = "Gr\374ner Drache";
		a_monster("main program", 62).f_name[1] = "Green Dragon";
		a_monster("main program", 62).f_name[3] = "Dragon Verde";
		a_monster("main program", 62).f_nr = 33;
		a_monster("main program", 62).f_art = 8;
		a_monster("main program", 62).f_lebenspunkte = 75;
		a_monster("main program", 62).f_angriff = 12;
		a_monster("main program", 62).f_abwehr = 12;
		a_monster("main program", 62).f_staerke = 15;
		a_monster("main program", 62).f_ruestung = 10;
		a_monster("main program", 62).f_zauberkraft = 0;
		a_monster("main program", 62).f_zauber = 0;
		a_monster("main program", 62).f_reichweite = 6;
		a_monster("main program", 62).f_minlevel = 19;
		a_monster("main program", 62).f_sound = 51;
		a_monster("main program", 62).f_eigenschaft1 = 3;
		a_monster("main program", 62).f_eigenschaft2 = 21;
		a_monster("main program", 62).f_eigenschaft3 = 1;
		a_monster("main program", 62).f_eigenschaft4 = 27;
		a_monster("main program", 63).f_name[2] = "Roc";
		a_monster("main program", 63).f_name[1] = "Roc";
		a_monster("main program", 63).f_name[3] = "Rocho";
		a_monster("main program", 63).f_nr = 94;
		a_monster("main program", 63).f_art = 1;
		a_monster("main program", 63).f_lebenspunkte = 90;
		a_monster("main program", 63).f_angriff = 13;
		a_monster("main program", 63).f_abwehr = 11;
		a_monster("main program", 63).f_staerke = 16;
		a_monster("main program", 63).f_ruestung = 4;
		a_monster("main program", 63).f_zauberkraft = 0;
		a_monster("main program", 63).f_zauber = 0;
		a_monster("main program", 63).f_reichweite = 0;
		a_monster("main program", 63).f_minlevel = 20;
		a_monster("main program", 63).f_eigenschaft1 = 1;
		a_monster("main program", 63).f_eigenschaft2 = 29;
		a_monster("main program", 64).f_name[2] = "Blauer Drache";
		a_monster("main program", 64).f_name[1] = "Blue Dragon";
		a_monster("main program", 64).f_name[3] = "Dragon Azul";
		a_monster("main program", 64).f_nr = 34;
		a_monster("main program", 64).f_art = 8;
		a_monster("main program", 64).f_lebenspunkte = 120;
		a_monster("main program", 64).f_angriff = 13;
		a_monster("main program", 64).f_abwehr = 13;
		a_monster("main program", 64).f_staerke = 12;
		a_monster("main program", 64).f_ruestung = 11;
		a_monster("main program", 64).f_zauberkraft = 0;
		a_monster("main program", 64).f_zauber = 0;
		a_monster("main program", 64).f_reichweite = 6;
		a_monster("main program", 64).f_minlevel = 19;
		a_monster("main program", 64).f_sound = 51;
		a_monster("main program", 64).f_eigenschaft1 = 23;
		a_monster("main program", 64).f_eigenschaft2 = 1;
		a_monster("main program", 64).f_eigenschaft3 = 18;
		a_monster("main program", 64).f_eigenschaft4 = 27;
		a_monster("main program", 64).f_eigenschaft5 = 29;
		a_monster("main program", 65).f_name[2] = "Skelettdrache";
		a_monster("main program", 65).f_name[1] = "Skeleton Dragon";
		a_monster("main program", 65).f_name[3] = "Dragon Esceleto";
		a_monster("main program", 65).f_nr = 35;
		a_monster("main program", 65).f_art = 3;
		a_monster("main program", 65).f_lebenspunkte = 155;
		a_monster("main program", 65).f_angriff = 15;
		a_monster("main program", 65).f_abwehr = 7;
		a_monster("main program", 65).f_staerke = 18;
		a_monster("main program", 65).f_ruestung = 13;
		a_monster("main program", 65).f_zauberkraft = 0;
		a_monster("main program", 65).f_zauber = 0;
		a_monster("main program", 65).f_reichweite = 5;
		a_monster("main program", 65).f_minlevel = 20;
		a_monster("main program", 65).f_sound = 51;
		a_monster("main program", 65).f_eigenschaft1 = 7;
		a_monster("main program", 65).f_eigenschaft2 = 20;
		a_monster("main program", 65).f_eigenschaft3 = 34;
		a_monster("main program", 66).f_name[2] = "Riese";
		a_monster("main program", 66).f_name[1] = "Giant";
		a_monster("main program", 66).f_name[3] = "Gigante";
		a_monster("main program", 66).f_nr = 59;
		a_monster("main program", 66).f_art = 2;
		a_monster("main program", 66).f_lebenspunkte = 200;
		a_monster("main program", 66).f_angriff = 13;
		a_monster("main program", 66).f_abwehr = 4;
		a_monster("main program", 66).f_staerke = 35;
		a_monster("main program", 66).f_ruestung = 4;
		a_monster("main program", 66).f_zauberkraft = 0;
		a_monster("main program", 66).f_zauber = 0;
		a_monster("main program", 66).f_reichweite = 0;
		a_monster("main program", 66).f_minlevel = 21;
		a_monster("main program", 66).f_eigenschaft1 = 4;
		a_monster("main program", 66).f_eigenschaft2 = 9;
		a_monster("main program", 66).f_eigenschaft3 = 13;
		a_monster("main program", 66).f_eigenschaft4 = 26;
		a_monster("main program", 66).f_eigenschaft5 = 29;
		a_monster("main program", 66).f_eigenschaft6 = 40;
		a_monster("main program", 67).f_name[2] = "Roter Drache";
		a_monster("main program", 67).f_name[1] = "Red Dragon";
		a_monster("main program", 67).f_name[3] = "Dragon Rojo";
		a_monster("main program", 67).f_nr = 88;
		a_monster("main program", 67).f_art = 8;
		a_monster("main program", 67).f_lebenspunkte = 210;
		a_monster("main program", 67).f_angriff = 20;
		a_monster("main program", 67).f_abwehr = 8;
		a_monster("main program", 67).f_staerke = 21;
		a_monster("main program", 67).f_ruestung = 11;
		a_monster("main program", 67).f_zauberkraft = 0;
		a_monster("main program", 67).f_zauber = 0;
		a_monster("main program", 67).f_reichweite = 6;
		a_monster("main program", 67).f_minlevel = 21;
		a_monster("main program", 67).f_sound = 51;
		a_monster("main program", 67).f_eigenschaft1 = 20;
		a_monster("main program", 67).f_eigenschaft2 = 1;
		a_monster("main program", 67).f_eigenschaft3 = 12;
		a_monster("main program", 67).f_eigenschaft4 = 27;
		a_monster("main program", 67).f_eigenschaft5 = 28;
		a_monster("main program", 68).f_name[2] = "Goldener Drache";
		a_monster("main program", 68).f_name[1] = "Golden Dragon";
		a_monster("main program", 68).f_name[3] = "Dragon de Oro";
		a_monster("main program", 68).f_nr = 89;
		a_monster("main program", 68).f_art = 8;
		a_monster("main program", 68).f_lebenspunkte = 270;
		a_monster("main program", 68).f_angriff = 18;
		a_monster("main program", 68).f_abwehr = 15;
		a_monster("main program", 68).f_staerke = 20;
		a_monster("main program", 68).f_ruestung = 10;
		a_monster("main program", 68).f_zauberkraft = 0;
		a_monster("main program", 68).f_zauber = 0;
		a_monster("main program", 68).f_reichweite = 7;
		a_monster("main program", 68).f_minlevel = 21;
		a_monster("main program", 68).f_sound = 51;
		a_monster("main program", 68).f_eigenschaft1 = 23;
		a_monster("main program", 68).f_eigenschaft2 = 1;
		a_monster("main program", 68).f_eigenschaft3 = 12;
		a_monster("main program", 68).f_eigenschaft4 = 27;
		a_monster("main program", 68).f_eigenschaft5 = 28;
		a_monster("main program", 69).f_name[2] = "Todesengel";
		a_monster("main program", 69).f_name[1] = "Angel of Death";
		a_monster("main program", 69).f_name[3] = "Angel de la Muerte";
		a_monster("main program", 69).f_nr = 97;
		a_monster("main program", 69).f_art = 5;
		a_monster("main program", 69).f_lebenspunkte = 1000;
		a_monster("main program", 69).f_angriff = 25;
		a_monster("main program", 69).f_abwehr = 25;
		a_monster("main program", 69).f_staerke = 25;
		a_monster("main program", 69).f_ruestung = 25;
		a_monster("main program", 69).f_zauberkraft = 0;
		a_monster("main program", 69).f_zauber = 0;
		a_monster("main program", 69).f_reichweite = 10;
		a_monster("main program", 69).f_minlevel = 100;
		a_monster("main program", 69).f_sound = 50;
		a_monster("main program", 69).f_eigenschaft1 = 1;
		a_monster("main program", 69).f_eigenschaft2 = 12;
		a_monster("main program", 69).f_eigenschaft3 = 17;
		a_monster("main program", 69).f_eigenschaft4 = 18;
		a_monster("main program", 69).f_eigenschaft5 = 7;
		a_monster("main program", 69).f_eigenschaft6 = 24;
		a_monster("main program", 69).f_eigenschaft7 = 15;
		a_monster("main program", 69).f_eigenschaft8 = 28;
		a_monster("main program", 70).f_name[2] = "Mimic";
		a_monster("main program", 70).f_name[1] = "Mimic";
		a_monster("main program", 70).f_name[3] = "Mimic";
		a_monster("main program", 70).f_nr = 101;
		a_monster("main program", 70).f_art = 6;
		a_monster("main program", 70).f_lebenspunkte = 270;
		a_monster("main program", 70).f_angriff = 18;
		a_monster("main program", 70).f_abwehr = 15;
		a_monster("main program", 70).f_staerke = 20;
		a_monster("main program", 70).f_ruestung = 10;
		a_monster("main program", 70).f_zauberkraft = 0;
		a_monster("main program", 70).f_zauber = 0;
		a_monster("main program", 70).f_reichweite = 5;
		a_monster("main program", 70).f_minlevel = 25;
		a_monster("main program", 70).f_sound = 46;
		a_monster("main program", 70).f_eigenschaft1 = 23;
		a_monster("main program", 70).f_eigenschaft2 = 1;
		a_monster("main program", 70).f_eigenschaft3 = 12;
		a_monster("main program", 71).f_name[2] = "Vogelscheuche";
		a_monster("main program", 71).f_name[1] = "Scarecrow";
		a_monster("main program", 71).f_name[3] = "Espanta Pajaros";
		a_monster("main program", 71).f_nr = 132;
		a_monster("main program", 71).f_art = 10;
		a_monster("main program", 71).f_lebenspunkte = 4;
		a_monster("main program", 71).f_angriff = 2;
		a_monster("main program", 71).f_abwehr = 0;
		a_monster("main program", 71).f_staerke = 2;
		a_monster("main program", 71).f_ruestung = 0;
		a_monster("main program", 71).f_zauberkraft = 0;
		a_monster("main program", 71).f_zauber = 0;
		a_monster("main program", 71).f_reichweite = 0;
		a_monster("main program", 71).f_minlevel = 2;
		a_monster("main program", 71).f_eigenschaft1 = 18;
		a_monster("main program", 71).f_eigenschaft2 = 7;
		a_monster("main program", 71).f_eigenschaft3 = 11;
		a_monster("main program", 72).f_name[2] = "Riesenkrabbe";
		a_monster("main program", 72).f_name[1] = "Giant Crab";
		a_monster("main program", 72).f_name[3] = "Cangrejo gigante";
		a_monster("main program", 72).f_nr = 40;
		a_monster("main program", 72).f_art = 1;
		a_monster("main program", 72).f_lebenspunkte = 5;
		a_monster("main program", 72).f_angriff = 1;
		a_monster("main program", 72).f_abwehr = 0;
		a_monster("main program", 72).f_staerke = 3;
		a_monster("main program", 72).f_ruestung = 4;
		a_monster("main program", 72).f_zauberkraft = 0;
		a_monster("main program", 72).f_zauber = 0;
		a_monster("main program", 72).f_reichweite = 0;
		a_monster("main program", 72).f_minlevel = 3;
		a_monster("main program", 72).f_eigenschaft1 = 8;
		a_monster("main program", 72).f_eigenschaft2 = 9;
		a_monster("main program", 72).f_eigenschaft3 = 29;
		a_monster("main program", 73).f_name[2] = "Wahnsinniger Magier";
		a_monster("main program", 73).f_name[1] = "Mad Magician";
		a_monster("main program", 73).f_name[3] = "Mago Loco";
		a_monster("main program", 73).f_nr = 25;
		a_monster("main program", 73).f_art = 2;
		a_monster("main program", 73).f_lebenspunkte = 5;
		a_monster("main program", 73).f_angriff = 1;
		a_monster("main program", 73).f_abwehr = 0;
		a_monster("main program", 73).f_staerke = 3;
		a_monster("main program", 73).f_ruestung = 0;
		a_monster("main program", 73).f_zauberkraft = 3;
		a_monster("main program", 73).f_zauber = 5;
		a_monster("main program", 73).f_reichweite = 5;
		a_monster("main program", 73).f_minlevel = 5;
		a_monster("main program", 73).f_sound = 39;
		a_monster("main program", 73).f_eigenschaft1 = 9;
		a_monster("main program", 73).f_eigenschaft2 = 27;
		a_monster("main program", 73).f_eigenschaft3 = 29;
		a_monster("main program", 74).f_name[2] = "K\366nigstausendf\374ssler";
		a_monster("main program", 74).f_name[1] = "King Centipede";
		a_monster("main program", 74).f_name[3] = "Cienpies Rey";
		a_monster("main program", 74).f_nr = 130;
		a_monster("main program", 74).f_art = 1;
		a_monster("main program", 74).f_lebenspunkte = 122;
		a_monster("main program", 74).f_angriff = 4;
		a_monster("main program", 74).f_abwehr = 2;
		a_monster("main program", 74).f_staerke = 5;
		a_monster("main program", 74).f_ruestung = 3;
		a_monster("main program", 74).f_zauberkraft = 0;
		a_monster("main program", 74).f_zauber = 0;
		a_monster("main program", 74).f_reichweite = 0;
		a_monster("main program", 74).f_minlevel = 6;
		a_monster("main program", 74).f_eigenschaft1 = 29;
		a_monster("main program", 75).f_name[2] = "Nixe";
		a_monster("main program", 75).f_name[1] = "Mermaid";
		a_monster("main program", 75).f_name[3] = "Sirena";
		a_monster("main program", 75).f_nr = 98;
		a_monster("main program", 75).f_art = 2;
		a_monster("main program", 75).f_lebenspunkte = 3;
		a_monster("main program", 75).f_angriff = 5;
		a_monster("main program", 75).f_abwehr = 5;
		a_monster("main program", 75).f_staerke = 2;
		a_monster("main program", 75).f_ruestung = 0;
		a_monster("main program", 75).f_zauberkraft = 0;
		a_monster("main program", 75).f_zauber = 0;
		a_monster("main program", 75).f_reichweite = 0;
		a_monster("main program", 75).f_minlevel = 6;
		a_monster("main program", 75).f_sound = 50;
		a_monster("main program", 75).f_eigenschaft1 = 11;
		a_monster("main program", 75).f_eigenschaft2 = 4;
		a_monster("main program", 75).f_eigenschaft3 = 8;
		a_monster("main program", 75).f_eigenschaft4 = 9;
		a_monster("main program", 75).f_eigenschaft5 = 6;
		a_monster("main program", 75).f_eigenschaft6 = 10;
		a_monster("main program", 75).f_eigenschaft7 = 29;
		a_monster("main program", 75).f_eigenschaft8 = 30;
		a_monster("main program", 76).f_name[2] = "Wasserneck";
		a_monster("main program", 76).f_name[1] = "Deep One";
		a_monster("main program", 76).f_name[3] = "Hombre de la Profundidad";
		a_monster("main program", 76).f_nr = 120;
		a_monster("main program", 76).f_art = 2;
		a_monster("main program", 76).f_lebenspunkte = 6;
		a_monster("main program", 76).f_angriff = 5;
		a_monster("main program", 76).f_abwehr = 2;
		a_monster("main program", 76).f_staerke = 3;
		a_monster("main program", 76).f_ruestung = 1;
		a_monster("main program", 76).f_zauberkraft = 0;
		a_monster("main program", 76).f_zauber = 0;
		a_monster("main program", 76).f_reichweite = 0;
		a_monster("main program", 76).f_minlevel = 8;
		a_monster("main program", 76).f_eigenschaft1 = 11;
		a_monster("main program", 76).f_eigenschaft2 = 4;
		a_monster("main program", 76).f_eigenschaft3 = 8;
		a_monster("main program", 76).f_eigenschaft4 = 9;
		a_monster("main program", 76).f_eigenschaft5 = 6;
		a_monster("main program", 76).f_eigenschaft6 = 29;
		a_monster("main program", 76).f_eigenschaft7 = 30;
		a_monster("main program", 77).f_name[2] = "Kelpie";
		a_monster("main program", 77).f_name[1] = "Kelpie";
		a_monster("main program", 77).f_name[3] = "Kelpie";
		a_monster("main program", 77).f_nr = 113;
		a_monster("main program", 77).f_art = 7;
		a_monster("main program", 77).f_lebenspunkte = 27;
		a_monster("main program", 77).f_angriff = 8;
		a_monster("main program", 77).f_abwehr = 4;
		a_monster("main program", 77).f_staerke = 8;
		a_monster("main program", 77).f_ruestung = 1;
		a_monster("main program", 77).f_zauberkraft = 0;
		a_monster("main program", 77).f_zauber = 0;
		a_monster("main program", 77).f_reichweite = 0;
		a_monster("main program", 77).f_minlevel = 13;
		a_monster("main program", 77).f_sound = 47;
		a_monster("main program", 77).f_eigenschaft1 = 26;
		a_monster("main program", 77).f_eigenschaft2 = 39;
		a_monster("main program", 78).f_name[2] = "Junger Roter Drache";
		a_monster("main program", 78).f_name[1] = "Young Red Dragon";
		a_monster("main program", 78).f_name[3] = "Dragon Rojo Joven";
		a_monster("main program", 78).f_nr = 32;
		a_monster("main program", 78).f_art = 8;
		a_monster("main program", 78).f_lebenspunkte = 105;
		a_monster("main program", 78).f_angriff = 20;
		a_monster("main program", 78).f_abwehr = 8;
		a_monster("main program", 78).f_staerke = 21;
		a_monster("main program", 78).f_ruestung = 11;
		a_monster("main program", 78).f_zauberkraft = 0;
		a_monster("main program", 78).f_zauber = 0;
		a_monster("main program", 78).f_reichweite = 5;
		a_monster("main program", 78).f_minlevel = 21;
		a_monster("main program", 78).f_sound = 51;
		a_monster("main program", 78).f_eigenschaft1 = 20;
		a_monster("main program", 78).f_eigenschaft2 = 1;
		a_monster("main program", 78).f_eigenschaft3 = 12;
		a_monster("main program", 78).f_eigenschaft4 = 26;
		a_monster("main program", 79).f_name[2] = "Nosferatu";
		a_monster("main program", 79).f_name[1] = "Nosferatu";
		a_monster("main program", 79).f_name[3] = "Nosferatu";
		a_monster("main program", 79).f_nr = 104;
		a_monster("main program", 79).f_art = 3;
		a_monster("main program", 79).f_lebenspunkte = 250;
		a_monster("main program", 79).f_angriff = 20;
		a_monster("main program", 79).f_abwehr = 15;
		a_monster("main program", 79).f_staerke = 30;
		a_monster("main program", 79).f_ruestung = 5;
		a_monster("main program", 79).f_zauberkraft = 0;
		a_monster("main program", 79).f_zauber = 0;
		a_monster("main program", 79).f_reichweite = 5;
		a_monster("main program", 79).f_minlevel = 35;
		a_monster("main program", 79).f_eigenschaft1 = 17;
		a_monster("main program", 79).f_eigenschaft2 = 4;
		a_monster("main program", 79).f_eigenschaft3 = 16;
		a_monster("main program", 79).f_eigenschaft4 = 27;
		a_monster("main program", 79).f_eigenschaft5 = 34;
		a_monster("main program", 80).f_name[2] = "Meisterillusionist";
		a_monster("main program", 80).f_name[1] = "Master Illusionist";
		a_monster("main program", 80).f_name[3] = "Maestro Ilusionista";
		a_monster("main program", 80).f_nr = 115;
		a_monster("main program", 80).f_art = 2;
		a_monster("main program", 80).f_lebenspunkte = 25;
		a_monster("main program", 80).f_angriff = 16;
		a_monster("main program", 80).f_abwehr = 24;
		a_monster("main program", 80).f_staerke = 3;
		a_monster("main program", 80).f_ruestung = 0;
		a_monster("main program", 80).f_zauberkraft = 15;
		a_monster("main program", 80).f_zauber = 3;
		a_monster("main program", 80).f_reichweite = 5;
		a_monster("main program", 80).f_minlevel = 45;
		a_monster("main program", 80).f_sound = 39;
		a_monster("main program", 80).f_eigenschaft1 = 2;
		a_monster("main program", 80).f_eigenschaft2 = 4;
		a_monster("main program", 80).f_eigenschaft3 = 8;
		a_monster("main program", 80).f_eigenschaft4 = 9;
		a_monster("main program", 80).f_eigenschaft5 = 10;
		a_monster("main program", 80).f_eigenschaft6 = 19;
		a_monster("main program", 80).f_eigenschaft7 = 27;
		a_monster("main program", 81).f_name[2] = "Schwebende Augen";
		a_monster("main program", 81).f_name[1] = "Floating Eyes";
		a_monster("main program", 81).f_name[3] = "Ojos Volandos";
		a_monster("main program", 81).f_nr = 131;
		a_monster("main program", 81).f_art = 6;
		a_monster("main program", 81).f_lebenspunkte = 111;
		a_monster("main program", 81).f_angriff = 10;
		a_monster("main program", 81).f_abwehr = 15;
		a_monster("main program", 81).f_staerke = 12;
		a_monster("main program", 81).f_ruestung = 5;
		a_monster("main program", 81).f_zauberkraft = 20;
		a_monster("main program", 81).f_zauber = 2;
		a_monster("main program", 81).f_reichweite = 8;
		a_monster("main program", 81).f_minlevel = 55;
		a_monster("main program", 81).f_eigenschaft1 = 1;
		a_monster("main program", 81).f_eigenschaft2 = 40;
		a_monster("main program", 82).f_name[2] = "Blutschatten";
		a_monster("main program", 82).f_name[1] = "Blood Shadow";
		a_monster("main program", 82).f_name[3] = "Sombra del Sangre";
		a_monster("main program", 82).f_nr = 106;
		a_monster("main program", 82).f_art = 10;
		a_monster("main program", 82).f_lebenspunkte = 300;
		a_monster("main program", 82).f_angriff = 20;
		a_monster("main program", 82).f_abwehr = 25;
		a_monster("main program", 82).f_staerke = 40;
		a_monster("main program", 82).f_ruestung = 8;
		a_monster("main program", 82).f_zauberkraft = 10;
		a_monster("main program", 82).f_zauber = 5;
		a_monster("main program", 82).f_reichweite = 5;
		a_monster("main program", 82).f_minlevel = 65;
		a_monster("main program", 82).f_eigenschaft1 = 17;
		a_monster("main program", 82).f_eigenschaft2 = 4;
		a_monster("main program", 82).f_eigenschaft3 = 16;
		a_monster("main program", 82).f_eigenschaft4 = 40;
		a_monster("main program", 83).f_name[2] = "Gefr\344ssiger D\344mon";
		a_monster("main program", 83).f_name[1] = "Gluttonous Demon";
		a_monster("main program", 83).f_name[3] = "Demonio Hambroso";
		a_monster("main program", 83).f_nr = 114;
		a_monster("main program", 83).f_art = 7;
		a_monster("main program", 83).f_lebenspunkte = 1000;
		a_monster("main program", 83).f_angriff = 25;
		a_monster("main program", 83).f_abwehr = 10;
		a_monster("main program", 83).f_staerke = 55;
		a_monster("main program", 83).f_ruestung = 16;
		a_monster("main program", 83).f_zauberkraft = 0;
		a_monster("main program", 83).f_zauber = 0;
		a_monster("main program", 83).f_reichweite = 0;
		a_monster("main program", 83).f_minlevel = 75;
		a_monster("main program", 83).f_eigenschaft1 = 40;
		a_monster("main program", 83).f_eigenschaft2 = 44;
		a_monster("main program", 84).f_name[2] = "Bernsteingolem";
		a_monster("main program", 84).f_name[1] = "Amber Golem";
		a_monster("main program", 84).f_name[3] = "Golem de Amber";
		a_monster("main program", 84).f_nr = 103;
		a_monster("main program", 84).f_art = 9;
		a_monster("main program", 84).f_lebenspunkte = 25;
		a_monster("main program", 84).f_angriff = 10;
		a_monster("main program", 84).f_abwehr = 0;
		a_monster("main program", 84).f_staerke = 15;
		a_monster("main program", 84).f_ruestung = 50;
		a_monster("main program", 84).f_zauberkraft = 0;
		a_monster("main program", 84).f_zauber = 0;
		a_monster("main program", 84).f_reichweite = 0;
		a_monster("main program", 84).f_minlevel = 25;
		a_monster("main program", 84).f_sound = 46;
		a_monster("main program", 84).f_eigenschaft1 = 12;
		a_monster("main program", 84).f_eigenschaft2 = 18;
		a_monster("main program", 84).f_eigenschaft3 = 7;
		a_monster("main program", 84).f_eigenschaft4 = 13;
		a_monster("main program", 84).f_eigenschaft5 = 39;
		a_monster("main program", 84).f_eigenschaft6 = 28;
		a_monster("main program", 85).f_name[2] = "Kristallgolem";
		a_monster("main program", 85).f_name[1] = "Crystal Golem";
		a_monster("main program", 85).f_name[3] = "Golem de Cristal";
		a_monster("main program", 85).f_nr = 110;
		a_monster("main program", 85).f_art = 9;
		a_monster("main program", 85).f_lebenspunkte = 50;
		a_monster("main program", 85).f_angriff = 15;
		a_monster("main program", 85).f_abwehr = 5;
		a_monster("main program", 85).f_staerke = 120;
		a_monster("main program", 85).f_ruestung = 100;
		a_monster("main program", 85).f_zauberkraft = 0;
		a_monster("main program", 85).f_zauber = 0;
		a_monster("main program", 85).f_reichweite = 0;
		a_monster("main program", 85).f_minlevel = 85;
		a_monster("main program", 85).f_sound = 46;
		a_monster("main program", 85).f_eigenschaft1 = 12;
		a_monster("main program", 85).f_eigenschaft2 = 18;
		a_monster("main program", 85).f_eigenschaft3 = 7;
		a_monster("main program", 85).f_eigenschaft4 = 13;
		a_monster("main program", 85).f_eigenschaft5 = 39;
		a_monster("main program", 85).f_eigenschaft6 = 28;
		a_monster("main program", 86).f_name[2] = "Blitzelementar";
		a_monster("main program", 86).f_name[1] = "Lightning Elemental";
		a_monster("main program", 86).f_name[3] = "Bola de Rayos";
		a_monster("main program", 86).f_nr = 102;
		a_monster("main program", 86).f_art = 6;
		a_monster("main program", 86).f_lebenspunkte = 100;
		a_monster("main program", 86).f_angriff = 40;
		a_monster("main program", 86).f_abwehr = 40;
		a_monster("main program", 86).f_staerke = 25;
		a_monster("main program", 86).f_ruestung = 0;
		a_monster("main program", 86).f_zauberkraft = 0;
		a_monster("main program", 86).f_zauber = 0;
		a_monster("main program", 86).f_reichweite = 12;
		a_monster("main program", 86).f_minlevel = 95;
		a_monster("main program", 86).f_eigenschaft1 = 1;
		a_monster("main program", 86).f_eigenschaft2 = 12;
		a_monster("main program", 86).f_eigenschaft3 = 17;
		a_monster("main program", 86).f_eigenschaft4 = 7;
		a_monster("main program", 86).f_eigenschaft5 = 13;
		a_monster("main program", 86).f_eigenschaft6 = 14;
		a_monster("main program", 86).f_eigenschaft7 = 25;
		a_monster("main program", 86).f_eigenschaft8 = 42;
		a_monster("main program", 87).f_name[2] = "Gefl\374gelter D\344mon";
		a_monster("main program", 87).f_name[1] = "Winged Demon";
		a_monster("main program", 87).f_name[3] = "Demonio de Alas";
		a_monster("main program", 87).f_nr = 105;
		a_monster("main program", 87).f_art = 7;
		a_monster("main program", 87).f_lebenspunkte = 500;
		a_monster("main program", 87).f_angriff = 25;
		a_monster("main program", 87).f_abwehr = 25;
		a_monster("main program", 87).f_staerke = 70;
		a_monster("main program", 87).f_ruestung = 10;
		a_monster("main program", 87).f_zauberkraft = 0;
		a_monster("main program", 87).f_zauber = 0;
		a_monster("main program", 87).f_reichweite = 0;
		a_monster("main program", 87).f_minlevel = 110;
		a_monster("main program", 87).f_eigenschaft1 = 1;
		a_monster("main program", 87).f_eigenschaft2 = 12;
		a_monster("main program", 87).f_eigenschaft3 = 2;
		a_monster("main program", 87).f_eigenschaft4 = 6;
		a_monster("main program", 87).f_eigenschaft5 = 26;
		a_monster("main program", 87).f_eigenschaft6 = 28;
		a_monster("main program", 88).f_name[2] = "Schattend\344mon";
		a_monster("main program", 88).f_name[1] = "Shadow Demon";
		a_monster("main program", 88).f_name[3] = "Demonio de las Sombras";
		a_monster("main program", 88).f_nr = 123;
		a_monster("main program", 88).f_art = 7;
		a_monster("main program", 88).f_lebenspunkte = 900;
		a_monster("main program", 88).f_angriff = 40;
		a_monster("main program", 88).f_abwehr = 60;
		a_monster("main program", 88).f_staerke = 80;
		a_monster("main program", 88).f_ruestung = 25;
		a_monster("main program", 88).f_zauberkraft = 0;
		a_monster("main program", 88).f_zauber = 0;
		a_monster("main program", 88).f_reichweite = 5;
		a_monster("main program", 88).f_minlevel = 130;
		a_monster("main program", 88).f_eigenschaft1 = 1;
		a_monster("main program", 88).f_eigenschaft2 = 17;
		a_monster("main program", 88).f_eigenschaft3 = 7;
		a_monster("main program", 88).f_eigenschaft4 = 19;
		a_monster("main program", 88).f_eigenschaft5 = 24;
		a_monster("main program", 89).f_name[2] = "Alter Skelettmagier";
		a_monster("main program", 89).f_name[1] = "Elder Lich";
		a_monster("main program", 89).f_name[3] = "Magus Esqueleto Viejo";
		a_monster("main program", 89).f_nr = 111;
		a_monster("main program", 89).f_art = 3;
		a_monster("main program", 89).f_lebenspunkte = 250;
		a_monster("main program", 89).f_angriff = 15;
		a_monster("main program", 89).f_abwehr = 10;
		a_monster("main program", 89).f_staerke = 12;
		a_monster("main program", 89).f_ruestung = 20;
		a_monster("main program", 89).f_zauberkraft = 30;
		a_monster("main program", 89).f_zauber = 24;
		a_monster("main program", 89).f_reichweite = 13;
		a_monster("main program", 89).f_minlevel = 140;
		a_monster("main program", 89).f_eigenschaft1 = 7;
		a_monster("main program", 89).f_eigenschaft2 = 4;
		a_monster("main program", 89).f_eigenschaft3 = 15;
		a_monster("main program", 89).f_eigenschaft4 = 34;
		a_monster("main program", 90).f_name[2] = "Ifrit";
		a_monster("main program", 90).f_name[1] = "Efreet";
		a_monster("main program", 90).f_name[3] = "Genio Magico";
		a_monster("main program", 90).f_nr = 122;
		a_monster("main program", 90).f_art = 10;
		a_monster("main program", 90).f_lebenspunkte = 2000;
		a_monster("main program", 90).f_angriff = 65;
		a_monster("main program", 90).f_abwehr = 50;
		a_monster("main program", 90).f_staerke = 250;
		a_monster("main program", 90).f_ruestung = 20;
		a_monster("main program", 90).f_zauberkraft = 0;
		a_monster("main program", 90).f_zauber = 0;
		a_monster("main program", 90).f_reichweite = 6;
		a_monster("main program", 90).f_minlevel = 145;
		a_monster("main program", 90).f_eigenschaft1 = 1;
		a_monster("main program", 90).f_eigenschaft2 = 12;
		a_monster("main program", 90).f_eigenschaft3 = 17;
		a_monster("main program", 90).f_eigenschaft4 = 20;
		a_monster("main program", 90).f_eigenschaft5 = 15;
		a_monster("main program", 90).f_eigenschaft6 = 27;
		a_monster("main program", 91).f_name[2] = "Geh\366rnter D\344mon";
		a_monster("main program", 91).f_name[1] = "Horned Demon";
		a_monster("main program", 91).f_name[3] = "Demonio Cornudo";
		a_monster("main program", 91).f_nr = 118;
		a_monster("main program", 91).f_art = 7;
		a_monster("main program", 91).f_lebenspunkte = 1000;
		a_monster("main program", 91).f_angriff = 40;
		a_monster("main program", 91).f_abwehr = 30;
		a_monster("main program", 91).f_staerke = 90;
		a_monster("main program", 91).f_ruestung = 20;
		a_monster("main program", 91).f_zauberkraft = 0;
		a_monster("main program", 91).f_zauber = 0;
		a_monster("main program", 91).f_reichweite = 0;
		a_monster("main program", 91).f_minlevel = 148;
		a_monster("main program", 91).f_eigenschaft1 = 1;
		a_monster("main program", 91).f_eigenschaft2 = 12;
		a_monster("main program", 91).f_eigenschaft3 = 2;
		a_monster("main program", 91).f_eigenschaft4 = 6;
		a_monster("main program", 91).f_eigenschaft5 = 28;
		a_monster("main program", 92).f_name[2] = "D\344monenprinz";
		a_monster("main program", 92).f_name[1] = "Demon Prince";
		a_monster("main program", 92).f_name[3] = "Demonio Rey";
		a_monster("main program", 92).f_nr = 119;
		a_monster("main program", 92).f_art = 7;
		a_monster("main program", 92).f_lebenspunkte = 5000;
		a_monster("main program", 92).f_angriff = 90;
		a_monster("main program", 92).f_abwehr = 70;
		a_monster("main program", 92).f_staerke = 250;
		a_monster("main program", 92).f_ruestung = 90;
		a_monster("main program", 92).f_zauberkraft = 25;
		a_monster("main program", 92).f_zauber = 1;
		a_monster("main program", 92).f_reichweite = 8;
		a_monster("main program", 92).f_minlevel = 148;
		a_monster("main program", 92).f_eigenschaft1 = 1;
		a_monster("main program", 92).f_eigenschaft2 = 12;
		a_monster("main program", 92).f_eigenschaft3 = 17;
		a_monster("main program", 92).f_eigenschaft4 = 27;
		a_monster("main program", 92).f_eigenschaft5 = 28;
		a_monster("main program", 92).f_eigenschaft6 = 45;
		a_monster("main program", 93).f_name[2] = "Lichlord";
		a_monster("main program", 93).f_name[1] = "Lich Lord";
		a_monster("main program", 93).f_name[3] = "Rey Nomuerto";
		a_monster("main program", 93).f_nr = 125;
		a_monster("main program", 93).f_art = 3;
		a_monster("main program", 93).f_lebenspunkte = 1000;
		a_monster("main program", 93).f_angriff = 25;
		a_monster("main program", 93).f_abwehr = 20;
		a_monster("main program", 93).f_staerke = 30;
		a_monster("main program", 93).f_ruestung = 20;
		a_monster("main program", 93).f_zauberkraft = 50;
		a_monster("main program", 93).f_zauber = 5;
		a_monster("main program", 93).f_reichweite = 12;
		a_monster("main program", 93).f_minlevel = 148;
		a_monster("main program", 93).f_eigenschaft1 = 7;
		a_monster("main program", 93).f_eigenschaft2 = 4;
		a_monster("main program", 93).f_eigenschaft3 = 15;
		a_monster("main program", 93).f_eigenschaft4 = 27;
		a_monster("main program", 93).f_eigenschaft5 = 28;
		a_monster("main program", 93).f_eigenschaft6 = 44;
		a_monster("main program", 94).f_eigenschaft6 = 34;
		a_monster("main program", 94).f_name[2] = "K\344fer";
		a_monster("main program", 94).f_name[1] = "Beetle";
		a_monster("main program", 94).f_name[3] = "Scarabajo";
		a_monster("main program", 94).f_nr = 21;
		a_monster("main program", 94).f_art = 1;
		a_monster("main program", 94).f_lebenspunkte = 3;
		a_monster("main program", 94).f_angriff = 2;
		a_monster("main program", 94).f_abwehr = 0;
		a_monster("main program", 94).f_staerke = 2;
		a_monster("main program", 94).f_ruestung = 1;
		a_monster("main program", 94).f_zauberkraft = 0;
		a_monster("main program", 94).f_zauber = 0;
		a_monster("main program", 94).f_reichweite = 0;
		a_monster("main program", 94).f_minlevel = 3;
		a_monster("main program", 94).f_eigenschaft1 = 8;
		a_monster("main program", 94).f_eigenschaft2 = 6;
		a_monster("main program", 94).f_eigenschaft3 = 29;
		a_monster("main program", 95).f_name[2] = "Giftiger K\344fer";
		a_monster("main program", 95).f_name[1] = "Poisonous Beetle";
		a_monster("main program", 95).f_name[3] = "Scarabajo Venenose";
		a_monster("main program", 95).f_nr = 31;
		a_monster("main program", 95).f_art = 1;
		a_monster("main program", 95).f_lebenspunkte = 3;
		a_monster("main program", 95).f_angriff = 2;
		a_monster("main program", 95).f_abwehr = 0;
		a_monster("main program", 95).f_staerke = 2;
		a_monster("main program", 95).f_ruestung = 1;
		a_monster("main program", 95).f_zauberkraft = 0;
		a_monster("main program", 95).f_zauber = 0;
		a_monster("main program", 95).f_reichweite = 0;
		a_monster("main program", 95).f_minlevel = 5;
		a_monster("main program", 95).f_eigenschaft1 = 8;
		a_monster("main program", 95).f_eigenschaft2 = 6;
		a_monster("main program", 95).f_eigenschaft3 = 3;
		a_monster("main program", 95).f_eigenschaft4 = 2;
		a_monster("main program", 95).f_eigenschaft5 = 29;
		a_monster("main program", 96).f_name[2] = "K\366nigsratte";
		a_monster("main program", 96).f_name[1] = "King Rat";
		a_monster("main program", 96).f_name[3] = "Rata Rey";
		a_monster("main program", 96).f_nr = 37;
		a_monster("main program", 96).f_art = 1;
		a_monster("main program", 96).f_lebenspunkte = 6;
		a_monster("main program", 96).f_angriff = 3;
		a_monster("main program", 96).f_abwehr = 1;
		a_monster("main program", 96).f_staerke = 3;
		a_monster("main program", 96).f_ruestung = 1;
		a_monster("main program", 96).f_zauberkraft = 0;
		a_monster("main program", 96).f_zauber = 0;
		a_monster("main program", 96).f_reichweite = 0;
		a_monster("main program", 96).f_minlevel = 5;
		a_monster("main program", 96).f_sound = 52;
		a_monster("main program", 96).f_eigenschaft1 = 2;
		a_monster("main program", 96).f_eigenschaft2 = 6;
		a_monster("main program", 96).f_eigenschaft3 = 8;
		a_monster("main program", 96).f_eigenschaft4 = 29;
		a_monster("main program", 96).f_eigenschaft5 = 35;
		a_monster("main program", 96).f_eigenschaft6 = 43;
		a_monster("main program", 96).f_eigenschaft7 = 44;
		a_monster("main program", 97).f_name[2] = "Riesenkr\344he";
		a_monster("main program", 97).f_name[1] = "Giant Crow";
		a_monster("main program", 97).f_name[3] = "Corneja Gigante";
		a_monster("main program", 97).f_nr = 41;
		a_monster("main program", 97).f_art = 1;
		a_monster("main program", 97).f_lebenspunkte = 3;
		a_monster("main program", 97).f_angriff = 2;
		a_monster("main program", 97).f_abwehr = 1;
		a_monster("main program", 97).f_staerke = 2;
		a_monster("main program", 97).f_ruestung = 0;
		a_monster("main program", 97).f_zauberkraft = 0;
		a_monster("main program", 97).f_zauber = 0;
		a_monster("main program", 97).f_reichweite = 0;
		a_monster("main program", 97).f_minlevel = 3;
		a_monster("main program", 97).f_eigenschaft1 = 1;
		a_monster("main program", 97).f_eigenschaft2 = 8;
		a_monster("main program", 97).f_eigenschaft3 = 10;
		a_monster("main program", 97).f_eigenschaft4 = 29;
		a_monster("main program", 98).f_name[2] = "Sandmann";
		a_monster("main program", 98).f_name[1] = "Sandman";
		a_monster("main program", 98).f_name[3] = "Hombre de la Bolsa";
		a_monster("main program", 98).f_nr = 45;
		a_monster("main program", 98).f_art = 10;
		a_monster("main program", 98).f_lebenspunkte = 4;
		a_monster("main program", 98).f_angriff = 6;
		a_monster("main program", 98).f_abwehr = 2;
		a_monster("main program", 98).f_staerke = 3;
		a_monster("main program", 98).f_ruestung = 1;
		a_monster("main program", 98).f_zauberkraft = 0;
		a_monster("main program", 98).f_zauber = 0;
		a_monster("main program", 98).f_reichweite = 0;
		a_monster("main program", 98).f_minlevel = 5;
		a_monster("main program", 98).f_eigenschaft1 = 8;
		a_monster("main program", 98).f_eigenschaft2 = 9;
		a_monster("main program", 98).f_eigenschaft3 = 6;
		a_monster("main program", 99).f_name[2] = "Zombiegeneral";
		a_monster("main program", 99).f_name[1] = "Zombie General";
		a_monster("main program", 99).f_name[3] = "Zombi General";
		a_monster("main program", 99).f_nr = 67;
		a_monster("main program", 99).f_art = 3;
		a_monster("main program", 99).f_lebenspunkte = 25;
		a_monster("main program", 99).f_angriff = 4;
		a_monster("main program", 99).f_abwehr = 1;
		a_monster("main program", 99).f_staerke = 7;
		a_monster("main program", 99).f_ruestung = 1;
		a_monster("main program", 99).f_zauberkraft = 0;
		a_monster("main program", 99).f_zauber = 0;
		a_monster("main program", 99).f_reichweite = 0;
		a_monster("main program", 99).f_minlevel = 7;
		a_monster("main program", 99).f_sound = 52;
		a_monster("main program", 99).f_eigenschaft1 = 44;
		a_monster("main program", 99).f_eigenschaft2 = 28;
		a_monster("main program", 99).f_eigenschaft3 = 34;
		a_monster("main program", 100).f_name[2] = "Antiheld";
		a_monster("main program", 100).f_name[1] = "Evil Hero";
		a_monster("main program", 100).f_name[3] = "AntiHeroe";
		a_monster("main program", 100).f_nr = 85;
		a_monster("main program", 100).f_art = 2;
		a_monster("main program", 100).f_lebenspunkte = 15;
		a_monster("main program", 100).f_angriff = 6;
		a_monster("main program", 100).f_abwehr = 2;
		a_monster("main program", 100).f_staerke = 5;
		a_monster("main program", 100).f_ruestung = 3;
		a_monster("main program", 100).f_zauberkraft = 0;
		a_monster("main program", 100).f_zauber = 0;
		a_monster("main program", 100).f_reichweite = 0;
		a_monster("main program", 100).f_minlevel = 8;
		a_monster("main program", 100).f_eigenschaft1 = 4;
		a_monster("main program", 100).f_eigenschaft2 = 9;
		a_monster("main program", 100).f_eigenschaft3 = 26;
		a_monster("main program", 100).f_eigenschaft4 = 29;
		a_monster("main program", 101).f_name[2] = "Springspinne";
		a_monster("main program", 101).f_name[1] = "Jumping Spider";
		a_monster("main program", 101).f_name[3] = "Arana Saltando";
		a_monster("main program", 101).f_nr = 86;
		a_monster("main program", 101).f_art = 1;
		a_monster("main program", 101).f_lebenspunkte = 12;
		a_monster("main program", 101).f_angriff = 6;
		a_monster("main program", 101).f_abwehr = 3;
		a_monster("main program", 101).f_staerke = 4;
		a_monster("main program", 101).f_ruestung = 1;
		a_monster("main program", 101).f_zauberkraft = 0;
		a_monster("main program", 101).f_zauber = 0;
		a_monster("main program", 101).f_reichweite = 0;
		a_monster("main program", 101).f_minlevel = 10;
		a_monster("main program", 101).f_eigenschaft1 = 3;
		a_monster("main program", 101).f_eigenschaft2 = 2;
		a_monster("main program", 101).f_eigenschaft3 = 11;
		a_monster("main program", 101).f_eigenschaft4 = 29;
		a_monster("main program", 101).f_eigenschaft5 = 32;
		a_monster("main program", 102).f_name[2] = "Einhorn";
		a_monster("main program", 102).f_name[1] = "Unicorn";
		a_monster("main program", 102).f_name[3] = "Unicornio";
		a_monster("main program", 102).f_nr = 92;
		a_monster("main program", 102).f_art = 1;
		a_monster("main program", 102).f_lebenspunkte = 12;
		a_monster("main program", 102).f_angriff = 7;
		a_monster("main program", 102).f_abwehr = 7;
		a_monster("main program", 102).f_staerke = 5;
		a_monster("main program", 102).f_ruestung = 1;
		a_monster("main program", 102).f_zauberkraft = 0;
		a_monster("main program", 102).f_zauber = 0;
		a_monster("main program", 102).f_reichweite = 0;
		a_monster("main program", 102).f_minlevel = 10;
		a_monster("main program", 102).f_sound = 47;
		a_monster("main program", 102).f_eigenschaft1 = 8;
		a_monster("main program", 102).f_eigenschaft2 = 9;
		a_monster("main program", 102).f_eigenschaft3 = 16;
		a_monster("main program", 102).f_eigenschaft4 = 29;
		a_monster("main program", 103).f_name[2] = "Riesenschnecke";
		a_monster("main program", 103).f_name[1] = "Giant Snail";
		a_monster("main program", 103).f_name[3] = "Caracol Gigante";
		a_monster("main program", 103).f_nr = 93;
		a_monster("main program", 103).f_art = 1;
		a_monster("main program", 103).f_lebenspunkte = 3;
		a_monster("main program", 103).f_angriff = 1;
		a_monster("main program", 103).f_abwehr = 0;
		a_monster("main program", 103).f_staerke = 1;
		a_monster("main program", 103).f_ruestung = 5;
		a_monster("main program", 103).f_zauberkraft = 0;
		a_monster("main program", 103).f_zauber = 0;
		a_monster("main program", 103).f_reichweite = 0;
		a_monster("main program", 103).f_minlevel = 3;
		a_monster("main program", 103).f_eigenschaft1 = 8;
		a_monster("main program", 103).f_eigenschaft2 = 9;
		a_monster("main program", 103).f_eigenschaft3 = 29;
		a_monster("main program", 104).f_name[2] = "Poltergeist";
		a_monster("main program", 104).f_name[1] = "Poltergeist";
		a_monster("main program", 104).f_name[3] = "Poltergeist";
		a_monster("main program", 104).f_nr = 84;
		a_monster("main program", 104).f_art = 10;
		a_monster("main program", 104).f_lebenspunkte = 25;
		a_monster("main program", 104).f_angriff = 8;
		a_monster("main program", 104).f_abwehr = 3;
		a_monster("main program", 104).f_staerke = 7;
		a_monster("main program", 104).f_ruestung = 2;
		a_monster("main program", 104).f_zauberkraft = 5;
		a_monster("main program", 104).f_zauber = 3;
		a_monster("main program", 104).f_reichweite = 4;
		a_monster("main program", 104).f_minlevel = 15;
		a_monster("main program", 104).f_sound = 45;
		a_monster("main program", 104).f_eigenschaft1 = 17;
		a_monster("main program", 104).f_eigenschaft2 = 18;
		a_monster("main program", 104).f_eigenschaft3 = 7;
		a_monster("main program", 104).f_eigenschaft4 = 13;
		a_monster("main program", 104).f_eigenschaft5 = 15;
		a_monster("main program", 105).f_name[2] = "Chim\344re";
		a_monster("main program", 105).f_name[1] = "Chimera";
		a_monster("main program", 105).f_name[3] = "Chimera";
		a_monster("main program", 105).f_nr = 99;
		a_monster("main program", 105).f_art = 6;
		a_monster("main program", 105).f_lebenspunkte = 40;
		a_monster("main program", 105).f_angriff = 10;
		a_monster("main program", 105).f_abwehr = 3;
		a_monster("main program", 105).f_staerke = 8;
		a_monster("main program", 105).f_ruestung = 2;
		a_monster("main program", 105).f_zauberkraft = 0;
		a_monster("main program", 105).f_zauber = 0;
		a_monster("main program", 105).f_reichweite = 0;
		a_monster("main program", 105).f_minlevel = 12;
		a_monster("main program", 105).f_sound = 51;
		a_monster("main program", 105).f_eigenschaft1 = 1;
		a_monster("main program", 105).f_eigenschaft2 = 3;
		a_monster("main program", 105).f_eigenschaft3 = 16;
		a_monster("main program", 106).f_name[2] = "Djinn";
		a_monster("main program", 106).f_name[1] = "Djinn";
		a_monster("main program", 106).f_name[3] = "Djini";
		a_monster("main program", 106).f_nr = 108;
		a_monster("main program", 106).f_art = 10;
		a_monster("main program", 106).f_lebenspunkte = 30;
		a_monster("main program", 106).f_angriff = 9;
		a_monster("main program", 106).f_abwehr = 3;
		a_monster("main program", 106).f_staerke = 7;
		a_monster("main program", 106).f_ruestung = 2;
		a_monster("main program", 106).f_zauberkraft = 5;
		a_monster("main program", 106).f_zauber = 1;
		a_monster("main program", 106).f_reichweite = 5;
		a_monster("main program", 106).f_minlevel = 15;
		a_monster("main program", 106).f_eigenschaft1 = 1;
		a_monster("main program", 106).f_eigenschaft2 = 13;
		a_monster("main program", 106).f_eigenschaft3 = 12;
		a_monster("main program", 106).f_eigenschaft4 = 18;
		a_monster("main program", 106).f_eigenschaft5 = 45;
		a_monster("main program", 107).f_name[2] = "Riesenkobra";
		a_monster("main program", 107).f_name[1] = "Giant Cobra";
		a_monster("main program", 107).f_name[3] = "Cobra Gigante";
		a_monster("main program", 107).f_nr = 107;
		a_monster("main program", 107).f_art = 1;
		a_monster("main program", 107).f_lebenspunkte = 10;
		a_monster("main program", 107).f_angriff = 5;
		a_monster("main program", 107).f_abwehr = 1;
		a_monster("main program", 107).f_staerke = 4;
		a_monster("main program", 107).f_ruestung = 1;
		a_monster("main program", 107).f_zauberkraft = 0;
		a_monster("main program", 107).f_zauber = 0;
		a_monster("main program", 107).f_reichweite = 0;
		a_monster("main program", 107).f_minlevel = 6;
		a_monster("main program", 107).f_eigenschaft1 = 8;
		a_monster("main program", 107).f_eigenschaft2 = 3;
		a_monster("main program", 107).f_eigenschaft3 = 29;
		a_monster("main program", 108).f_name[2] = "B\366se Fee";
		a_monster("main program", 108).f_name[1] = "Evil Faerie";
		a_monster("main program", 108).f_name[3] = "Hada Enfadado";
		a_monster("main program", 108).f_nr = 109;
		a_monster("main program", 108).f_art = 10;
		a_monster("main program", 108).f_lebenspunkte = 12;
		a_monster("main program", 108).f_angriff = 2;
		a_monster("main program", 108).f_abwehr = 0;
		a_monster("main program", 108).f_staerke = 2;
		a_monster("main program", 108).f_ruestung = 0;
		a_monster("main program", 108).f_zauberkraft = 8;
		a_monster("main program", 108).f_zauber = 3;
		a_monster("main program", 108).f_reichweite = 5;
		a_monster("main program", 108).f_minlevel = 10;
		a_monster("main program", 108).f_sound = 45;
		a_monster("main program", 108).f_eigenschaft1 = 9;
		a_monster("main program", 108).f_eigenschaft2 = 8;
		a_monster("main program", 108).f_eigenschaft3 = 4;
		a_monster("main program", 108).f_eigenschaft4 = 27;
		a_monster("main program", 109).f_name[2] = "Alptraum";
		a_monster("main program", 109).f_name[1] = "Nightmare";
		a_monster("main program", 109).f_name[3] = "Pesadilla";
		a_monster("main program", 109).f_nr = 117;
		a_monster("main program", 109).f_art = 10;
		a_monster("main program", 109).f_lebenspunkte = 90;
		a_monster("main program", 109).f_angriff = 12;
		a_monster("main program", 109).f_abwehr = 5;
		a_monster("main program", 109).f_staerke = 9;
		a_monster("main program", 109).f_ruestung = 3;
		a_monster("main program", 109).f_zauberkraft = 8;
		a_monster("main program", 109).f_zauber = 4;
		a_monster("main program", 109).f_reichweite = 5;
		a_monster("main program", 109).f_minlevel = 21;
		a_monster("main program", 109).f_sound = 51;
		a_monster("main program", 109).f_eigenschaft1 = 1;
		a_monster("main program", 109).f_eigenschaft2 = 7;
		a_monster("main program", 109).f_eigenschaft3 = 13;
		a_monster("main program", 109).f_eigenschaft4 = 15;
		a_monster("main program", 109).f_eigenschaft5 = 28;
		a_monster("main program", 110).f_name[2] = "B\366ses Auge";
		a_monster("main program", 110).f_name[1] = "Evil Eye";
		a_monster("main program", 110).f_name[3] = "Ojo Malo";
		a_monster("main program", 110).f_nr = 112;
		a_monster("main program", 110).f_art = 10;
		a_monster("main program", 110).f_lebenspunkte = 25;
		a_monster("main program", 110).f_angriff = 10;
		a_monster("main program", 110).f_abwehr = 6;
		a_monster("main program", 110).f_staerke = 7;
		a_monster("main program", 110).f_ruestung = 3;
		a_monster("main program", 110).f_zauberkraft = 7;
		a_monster("main program", 110).f_zauber = 2;
		a_monster("main program", 110).f_reichweite = 4;
		a_monster("main program", 110).f_minlevel = 21;
		a_monster("main program", 110).f_eigenschaft1 = 1;
		a_monster("main program", 110).f_eigenschaft2 = 7;
		a_monster("main program", 110).f_eigenschaft3 = 13;
		a_monster("main program", 110).f_eigenschaft4 = 15;
		a_monster("main program", 110).f_eigenschaft5 = 19;
		a_monster("main program", 111).f_name[2] = "Riesenwespe";
		a_monster("main program", 111).f_name[1] = "Giant Wasp";
		a_monster("main program", 111).f_name[3] = "Avispa Gigante";
		a_monster("main program", 111).f_nr = 133;
		a_monster("main program", 111).f_art = 1;
		a_monster("main program", 111).f_lebenspunkte = 10;
		a_monster("main program", 111).f_angriff = 6;
		a_monster("main program", 111).f_abwehr = 3;
		a_monster("main program", 111).f_staerke = 5;
		a_monster("main program", 111).f_ruestung = 3;
		a_monster("main program", 111).f_zauberkraft = 0;
		a_monster("main program", 111).f_zauber = 0;
		a_monster("main program", 111).f_reichweite = 0;
		a_monster("main program", 111).f_minlevel = 6;
		a_monster("main program", 111).f_sound = 54;
		a_monster("main program", 111).f_eigenschaft1 = 2;
		a_monster("main program", 111).f_eigenschaft2 = 6;
		a_monster("main program", 111).f_eigenschaft3 = 29;
		a_monster("main program", 111).f_eigenschaft4 = 43;
		a_monster("main program", 111).f_eigenschaft5 = 1;
		a_monster("main program", 112).f_name[2] = "Riesenhornisse";
		a_monster("main program", 112).f_name[1] = "Giant Hornet";
		a_monster("main program", 112).f_name[3] = "Abejoro Gigante";
		a_monster("main program", 112).f_nr = 134;
		a_monster("main program", 112).f_art = 1;
		a_monster("main program", 112).f_lebenspunkte = 15;
		a_monster("main program", 112).f_angriff = 7;
		a_monster("main program", 112).f_abwehr = 4;
		a_monster("main program", 112).f_staerke = 6;
		a_monster("main program", 112).f_ruestung = 4;
		a_monster("main program", 112).f_zauberkraft = 0;
		a_monster("main program", 112).f_zauber = 0;
		a_monster("main program", 112).f_reichweite = 0;
		a_monster("main program", 112).f_minlevel = 7;
		a_monster("main program", 112).f_sound = 54;
		a_monster("main program", 112).f_eigenschaft1 = 2;
		a_monster("main program", 112).f_eigenschaft2 = 6;
		a_monster("main program", 112).f_eigenschaft3 = 29;
		a_monster("main program", 112).f_eigenschaft4 = 1;
		a_monster("main program", 113).f_name[2] = "Geh\366rnte Kr\366te";
		a_monster("main program", 113).f_name[1] = "Horned Toad";
		a_monster("main program", 113).f_name[3] = "Sapo con Picados";
		a_monster("main program", 113).f_nr = 128;
		a_monster("main program", 113).f_art = 1;
		a_monster("main program", 113).f_lebenspunkte = 20;
		a_monster("main program", 113).f_angriff = 7;
		a_monster("main program", 113).f_abwehr = 4;
		a_monster("main program", 113).f_staerke = 7;
		a_monster("main program", 113).f_ruestung = 4;
		a_monster("main program", 113).f_zauberkraft = 0;
		a_monster("main program", 113).f_zauber = 0;
		a_monster("main program", 113).f_reichweite = 0;
		a_monster("main program", 113).f_minlevel = 11;
		a_monster("main program", 113).f_eigenschaft1 = 3;
		a_monster("main program", 113).f_eigenschaft2 = 29;
		a_monster("main program", 114).f_name[2] = "Uralter Vampir";
		a_monster("main program", 114).f_name[1] = "Ancient Vampire";
		a_monster("main program", 114).f_name[3] = "Vampiro Viejo";
		a_monster("main program", 114).f_nr = 129;
		a_monster("main program", 114).f_art = 3;
		a_monster("main program", 114).f_lebenspunkte = 145;
		a_monster("main program", 114).f_angriff = 15;
		a_monster("main program", 114).f_abwehr = 10;
		a_monster("main program", 114).f_staerke = 20;
		a_monster("main program", 114).f_ruestung = 5;
		a_monster("main program", 114).f_zauberkraft = 0;
		a_monster("main program", 114).f_zauber = 0;
		a_monster("main program", 114).f_reichweite = 5;
		a_monster("main program", 114).f_minlevel = 25;
		a_monster("main program", 114).f_eigenschaft1 = 17;
		a_monster("main program", 114).f_eigenschaft2 = 4;
		a_monster("main program", 114).f_eigenschaft3 = 16;
		a_monster("main program", 114).f_eigenschaft4 = 27;
		a_monster("main program", 114).f_eigenschaft5 = 44;
		a_monster("main program", 114).f_eigenschaft6 = 28;
		a_monster("main program", 114).f_eigenschaft7 = 34;
		a_monster("main program", 115).f_name[2] = "Sturmd\344mon";
		a_monster("main program", 115).f_name[1] = "Storm Demon";
		a_monster("main program", 115).f_name[3] = "Demonio de las Tormentas";
		a_monster("main program", 115).f_nr = 124;
		a_monster("main program", 115).f_art = 7;
		a_monster("main program", 115).f_lebenspunkte = 1000;
		a_monster("main program", 115).f_angriff = 45;
		a_monster("main program", 115).f_abwehr = 65;
		a_monster("main program", 115).f_staerke = 85;
		a_monster("main program", 115).f_ruestung = 26;
		a_monster("main program", 115).f_zauberkraft = 12;
		a_monster("main program", 115).f_zauber = 25;
		a_monster("main program", 115).f_reichweite = 5;
		a_monster("main program", 115).f_minlevel = 145;
		a_monster("main program", 115).f_eigenschaft1 = 13;
		a_monster("main program", 115).f_eigenschaft2 = 17;
		a_monster("main program", 115).f_eigenschaft3 = 7;
		a_monster("main program", 115).f_eigenschaft4 = 28;
		a_monster("main program", 115).f_eigenschaft5 = 42;
		a_monster("main program", 115).f_eigenschaft6 = 45;
		a_monster("main program", 116).f_name[2] = "Riesenzitteraal";
		a_monster("main program", 116).f_name[1] = "Giant Electric Eel";
		a_monster("main program", 116).f_name[3] = "Anguila Electrica";
		a_monster("main program", 116).f_nr = 135;
		a_monster("main program", 116).f_art = 1;
		a_monster("main program", 116).f_lebenspunkte = 22;
		a_monster("main program", 116).f_angriff = 10;
		a_monster("main program", 116).f_abwehr = 10;
		a_monster("main program", 116).f_staerke = 8;
		a_monster("main program", 116).f_ruestung = 0;
		a_monster("main program", 116).f_zauberkraft = 0;
		a_monster("main program", 116).f_zauber = 0;
		a_monster("main program", 116).f_reichweite = 0;
		a_monster("main program", 116).f_minlevel = 15;
		a_monster("main program", 116).f_eigenschaft1 = 30;
		a_monster("main program", 116).f_eigenschaft2 = 14;
		a_monster("main program", 116).f_eigenschaft3 = 25;
		a_monster("main program", 116).f_eigenschaft4 = 29;
		a_monster("main program", 117).f_name[2] = "Riesen Goldfisch";
		a_monster("main program", 117).f_name[1] = "Giant Goldfish";
		a_monster("main program", 117).f_name[3] = "Pescado de Oro";
		a_monster("main program", 117).f_nr = 136;
		a_monster("main program", 117).f_art = 1;
		a_monster("main program", 117).f_lebenspunkte = 6;
		a_monster("main program", 117).f_angriff = 3;
		a_monster("main program", 117).f_abwehr = 2;
		a_monster("main program", 117).f_staerke = 3;
		a_monster("main program", 117).f_ruestung = 0;
		a_monster("main program", 117).f_zauberkraft = 0;
		a_monster("main program", 117).f_zauber = 0;
		a_monster("main program", 117).f_reichweite = 0;
		a_monster("main program", 117).f_minlevel = 5;
		a_monster("main program", 117).f_eigenschaft1 = 30;
		a_monster("main program", 117).f_eigenschaft2 = 29;
		a_monster("main program", 117).f_eigenschaft3 = 6;
		a_monster("main program", 118).f_name[2] = "Riesen Kugelfisch";
		a_monster("main program", 118).f_name[1] = "Giant Blowfish";
		a_monster("main program", 118).f_name[3] = "Pez Globo Gigante";
		a_monster("main program", 118).f_nr = 137;
		a_monster("main program", 118).f_art = 1;
		a_monster("main program", 118).f_lebenspunkte = 8;
		a_monster("main program", 118).f_angriff = 5;
		a_monster("main program", 118).f_abwehr = 4;
		a_monster("main program", 118).f_staerke = 5;
		a_monster("main program", 118).f_ruestung = 1;
		a_monster("main program", 118).f_zauberkraft = 0;
		a_monster("main program", 118).f_zauber = 0;
		a_monster("main program", 118).f_reichweite = 0;
		a_monster("main program", 118).f_minlevel = 6;
		a_monster("main program", 118).f_eigenschaft1 = 30;
		a_monster("main program", 118).f_eigenschaft2 = 29;
		a_monster("main program", 118).f_eigenschaft3 = 2;
		a_monster("main program", 118).f_eigenschaft4 = 6;
		a_monster("main program", 119).f_name[2] = "Riesenqualle";
		a_monster("main program", 119).f_name[1] = "Giant Jellyfish";
		a_monster("main program", 119).f_name[3] = "Medusa Gigante";
		a_monster("main program", 119).f_nr = 138;
		a_monster("main program", 119).f_art = 1;
		a_monster("main program", 119).f_lebenspunkte = 8;
		a_monster("main program", 119).f_angriff = 5;
		a_monster("main program", 119).f_abwehr = 4;
		a_monster("main program", 119).f_staerke = 5;
		a_monster("main program", 119).f_ruestung = 1;
		a_monster("main program", 119).f_zauberkraft = 0;
		a_monster("main program", 119).f_zauber = 0;
		a_monster("main program", 119).f_reichweite = 0;
		a_monster("main program", 119).f_minlevel = 6;
		a_monster("main program", 119).f_eigenschaft1 = 30;
		a_monster("main program", 120).f_name[2] = "Riesenseepferd";
		a_monster("main program", 120).f_name[1] = "Giant Seahorse";
		a_monster("main program", 120).f_name[3] = "Caballo del Mar Gigante";
		a_monster("main program", 120).f_nr = 142;
		a_monster("main program", 120).f_art = 1;
		a_monster("main program", 120).f_lebenspunkte = 25;
		a_monster("main program", 120).f_angriff = 7;
		a_monster("main program", 120).f_abwehr = 7;
		a_monster("main program", 120).f_staerke = 5;
		a_monster("main program", 120).f_ruestung = 1;
		a_monster("main program", 120).f_zauberkraft = 0;
		a_monster("main program", 120).f_zauber = 0;
		a_monster("main program", 120).f_reichweite = 9;
		a_monster("main program", 120).f_minlevel = 12;
		a_monster("main program", 120).f_sound = 47;
		a_monster("main program", 120).f_eigenschaft1 = 23;
		a_monster("main program", 120).f_eigenschaft2 = 30;
		a_monster("main program", 120).f_eigenschaft3 = 29;
		a_monster("main program", 121).f_name[2] = "Spinnenk\366nigin";
		a_monster("main program", 121).f_name[1] = "Spider Queen";
		a_monster("main program", 121).f_name[3] = "Arana Reina";
		a_monster("main program", 121).f_nr = 143;
		a_monster("main program", 121).f_art = 6;
		a_monster("main program", 121).f_lebenspunkte = 130;
		a_monster("main program", 121).f_angriff = 14;
		a_monster("main program", 121).f_abwehr = 9;
		a_monster("main program", 121).f_staerke = 14;
		a_monster("main program", 121).f_ruestung = 5;
		a_monster("main program", 121).f_zauberkraft = 0;
		a_monster("main program", 121).f_zauber = 0;
		a_monster("main program", 121).f_reichweite = 0;
		a_monster("main program", 121).f_minlevel = 15;
		a_monster("main program", 121).f_eigenschaft1 = 3;
		a_monster("main program", 121).f_eigenschaft2 = 31;
		a_monster("main program", 121).f_eigenschaft3 = 11;
		a_monster("main program", 121).f_eigenschaft4 = 28;
		a_monster("main program", 122).f_name[2] = "Goblink\366nig";
		a_monster("main program", 122).f_name[1] = "Goblin King";
		a_monster("main program", 122).f_name[3] = "Rey Goblin";
		a_monster("main program", 122).f_nr = 144;
		a_monster("main program", 122).f_art = 6;
		a_monster("main program", 122).f_lebenspunkte = 95;
		a_monster("main program", 122).f_angriff = 12;
		a_monster("main program", 122).f_abwehr = 7;
		a_monster("main program", 122).f_staerke = 10;
		a_monster("main program", 122).f_ruestung = 4;
		a_monster("main program", 122).f_zauberkraft = 7;
		a_monster("main program", 122).f_zauber = 1;
		a_monster("main program", 122).f_reichweite = 6;
		a_monster("main program", 122).f_minlevel = 12;
		a_monster("main program", 122).f_eigenschaft1 = 4;
		a_monster("main program", 122).f_eigenschaft2 = 31;
		a_monster("main program", 122).f_eigenschaft3 = 27;
		a_monster("main program", 122).f_eigenschaft4 = 28;
		a_monster("main program", 123).f_name[2] = "Herr der Untoten";
		a_monster("main program", 123).f_name[1] = "Lord of the Undead";
		a_monster("main program", 123).f_name[3] = "Comandante de los No-Muertos";
		a_monster("main program", 123).f_nr = 145;
		a_monster("main program", 123).f_art = 6;
		a_monster("main program", 123).f_lebenspunkte = 80;
		a_monster("main program", 123).f_angriff = 12;
		a_monster("main program", 123).f_abwehr = 6;
		a_monster("main program", 123).f_staerke = 10;
		a_monster("main program", 123).f_ruestung = 3;
		a_monster("main program", 123).f_zauberkraft = 6;
		a_monster("main program", 123).f_zauber = 1;
		a_monster("main program", 123).f_reichweite = 5;
		a_monster("main program", 123).f_minlevel = 11;
		a_monster("main program", 123).f_sound = 51;
		a_monster("main program", 123).f_eigenschaft1 = 31;
		a_monster("main program", 123).f_eigenschaft2 = 28;
		a_monster("main program", 123).f_eigenschaft3 = 42;
		a_monster("main program", 124).f_name[2] = "Riesenvogelspinne";
		a_monster("main program", 124).f_name[1] = "Giant Bird Spider";
		a_monster("main program", 124).f_name[3] = "Arana Que Caza Aves";
		a_monster("main program", 124).f_nr = 146;
		a_monster("main program", 124).f_art = 1;
		a_monster("main program", 124).f_lebenspunkte = 18;
		a_monster("main program", 124).f_angriff = 7;
		a_monster("main program", 124).f_abwehr = 4;
		a_monster("main program", 124).f_staerke = 5;
		a_monster("main program", 124).f_ruestung = 2;
		a_monster("main program", 124).f_zauberkraft = 0;
		a_monster("main program", 124).f_zauber = 0;
		a_monster("main program", 124).f_reichweite = 0;
		a_monster("main program", 124).f_minlevel = 11;
		a_monster("main program", 124).f_eigenschaft1 = 3;
		a_monster("main program", 124).f_eigenschaft2 = 2;
		a_monster("main program", 124).f_eigenschaft3 = 11;
		a_monster("main program", 124).f_eigenschaft4 = 29;
		a_monster("main program", 124).f_eigenschaft5 = 32;
		a_monster("main program", 125).f_name[2] = "Riesenkreuzspinne";
		a_monster("main program", 125).f_name[1] = "Giant Cross Spider";
		a_monster("main program", 125).f_name[3] = "Arana Cruz Gigante";
		a_monster("main program", 125).f_nr = 147;
		a_monster("main program", 125).f_art = 1;
		a_monster("main program", 125).f_lebenspunkte = 22;
		a_monster("main program", 125).f_angriff = 8;
		a_monster("main program", 125).f_abwehr = 5;
		a_monster("main program", 125).f_staerke = 6;
		a_monster("main program", 125).f_ruestung = 3;
		a_monster("main program", 125).f_zauberkraft = 0;
		a_monster("main program", 125).f_zauber = 0;
		a_monster("main program", 125).f_reichweite = 0;
		a_monster("main program", 125).f_minlevel = 12;
		a_monster("main program", 125).f_eigenschaft1 = 3;
		a_monster("main program", 125).f_eigenschaft2 = 29;
		a_monster("main program", 125).f_eigenschaft3 = 32;
		a_monster("main program", 126).f_name[2] = "Stachelechse";
		a_monster("main program", 126).f_name[1] = "Horned Lizard";
		a_monster("main program", 126).f_name[3] = "Lagarto Cornuda";
		a_monster("main program", 126).f_nr = 68;
		a_monster("main program", 126).f_art = 1;
		a_monster("main program", 126).f_lebenspunkte = 12;
		a_monster("main program", 126).f_angriff = 5;
		a_monster("main program", 126).f_abwehr = 2;
		a_monster("main program", 126).f_staerke = 5;
		a_monster("main program", 126).f_ruestung = 1;
		a_monster("main program", 126).f_zauberkraft = 0;
		a_monster("main program", 126).f_zauber = 0;
		a_monster("main program", 126).f_reichweite = 0;
		a_monster("main program", 126).f_minlevel = 7;
		a_monster("main program", 126).f_eigenschaft1 = 8;
		a_monster("main program", 126).f_eigenschaft2 = 29;
		a_monster("main program", 126).f_eigenschaft3 = 3;
		a_monster("main program", 127).f_name[2] = "Zweik\366pfiger Oger";
		a_monster("main program", 127).f_name[1] = "Two-Headed Ogre";
		a_monster("main program", 127).f_name[3] = "Ogro con Dos Cabezas";
		a_monster("main program", 127).f_nr = 79;
		a_monster("main program", 127).f_art = 2;
		a_monster("main program", 127).f_lebenspunkte = 25;
		a_monster("main program", 127).f_angriff = 7;
		a_monster("main program", 127).f_abwehr = 4;
		a_monster("main program", 127).f_staerke = 8;
		a_monster("main program", 127).f_ruestung = 2;
		a_monster("main program", 127).f_zauberkraft = 0;
		a_monster("main program", 127).f_zauber = 0;
		a_monster("main program", 127).f_reichweite = 4;
		a_monster("main program", 127).f_minlevel = 10;
		a_monster("main program", 127).f_eigenschaft1 = 9;
		a_monster("main program", 127).f_eigenschaft2 = 26;
		a_monster("main program", 127).f_eigenschaft3 = 29;
		a_monster("main program", 127).f_eigenschaft4 = 33;
		a_monster("main program", 127).f_eigenschaft5 = 40;
		a_monster("main program", 127).f_eigenschaft6 = 41;
		a_monster("main program", 128).f_name[2] = "Mammut";
		a_monster("main program", 128).f_name[1] = "Mammoth";
		a_monster("main program", 128).f_name[3] = "Mamut";
		a_monster("main program", 128).f_nr = 76;
		a_monster("main program", 128).f_art = 1;
		a_monster("main program", 128).f_lebenspunkte = 90;
		a_monster("main program", 128).f_angriff = 12;
		a_monster("main program", 128).f_abwehr = 8;
		a_monster("main program", 128).f_staerke = 12;
		a_monster("main program", 128).f_ruestung = 6;
		a_monster("main program", 128).f_zauberkraft = 0;
		a_monster("main program", 128).f_zauber = 0;
		a_monster("main program", 128).f_reichweite = 0;
		a_monster("main program", 128).f_minlevel = 18;
		a_monster("main program", 128).f_eigenschaft1 = 11;
		a_monster("main program", 128).f_eigenschaft2 = 29;
		a_monster("main program", 128).f_eigenschaft3 = 18;
		a_monster("main program", 129).f_name[2] = "Minotaurus";
		a_monster("main program", 129).f_name[1] = "Minotaur";
		a_monster("main program", 129).f_name[3] = "Minotauro";
		a_monster("main program", 129).f_nr = 126;
		a_monster("main program", 129).f_art = 2;
		a_monster("main program", 129).f_lebenspunkte = 150;
		a_monster("main program", 129).f_angriff = 11;
		a_monster("main program", 129).f_abwehr = 4;
		a_monster("main program", 129).f_staerke = 21;
		a_monster("main program", 129).f_ruestung = 4;
		a_monster("main program", 129).f_zauberkraft = 0;
		a_monster("main program", 129).f_zauber = 0;
		a_monster("main program", 129).f_reichweite = 4;
		a_monster("main program", 129).f_minlevel = 18;
		a_monster("main program", 129).f_eigenschaft1 = 4;
		a_monster("main program", 129).f_eigenschaft2 = 9;
		a_monster("main program", 129).f_eigenschaft3 = 26;
		a_monster("main program", 129).f_eigenschaft4 = 29;
		a_monster("main program", 129).f_eigenschaft5 = 41;
		a_monster("main program", 130).f_name[2] = "Gefl\374gelter Teufel";
		a_monster("main program", 130).f_name[1] = "Winged Devil";
		a_monster("main program", 130).f_name[3] = "Devil de Alas";
		a_monster("main program", 130).f_nr = 149;
		a_monster("main program", 130).f_art = 7;
		a_monster("main program", 130).f_lebenspunkte = 80;
		a_monster("main program", 130).f_angriff = 12;
		a_monster("main program", 130).f_abwehr = 8;
		a_monster("main program", 130).f_staerke = 15;
		a_monster("main program", 130).f_ruestung = 6;
		a_monster("main program", 130).f_zauberkraft = 0;
		a_monster("main program", 130).f_zauber = 0;
		a_monster("main program", 130).f_reichweite = 0;
		a_monster("main program", 130).f_minlevel = 26;
		a_monster("main program", 130).f_eigenschaft1 = 1;
		a_monster("main program", 130).f_eigenschaft2 = 2;
		a_monster("main program", 130).f_eigenschaft3 = 6;
		a_monster("main program", 130).f_eigenschaft4 = 16;
		a_monster("main program", 130).f_eigenschaft5 = 44;
		a_monster("main program", 131).f_name[2] = "Kobold";
		a_monster("main program", 131).f_name[1] = "Kobold";
		a_monster("main program", 131).f_name[3] = "Kobold";
		a_monster("main program", 131).f_nr = 150;
		a_monster("main program", 131).f_art = 2;
		a_monster("main program", 131).f_lebenspunkte = 10;
		a_monster("main program", 131).f_angriff = 3;
		a_monster("main program", 131).f_abwehr = 1;
		a_monster("main program", 131).f_staerke = 3;
		a_monster("main program", 131).f_ruestung = 1;
		a_monster("main program", 131).f_zauberkraft = 3;
		a_monster("main program", 131).f_zauber = 3;
		a_monster("main program", 131).f_reichweite = 5;
		a_monster("main program", 131).f_minlevel = 5;
		a_monster("main program", 131).f_sound = 45;
		a_monster("main program", 131).f_eigenschaft1 = 9;
		a_monster("main program", 131).f_eigenschaft2 = 27;
		a_monster("main program", 131).f_eigenschaft3 = 29;
		a_monster("main program", 131).f_eigenschaft4 = 10;
		a_monster("main program", 132).f_name[2] = "Ork mit Kampfstab";
		a_monster("main program", 132).f_name[1] = "Orc with Staff";
		a_monster("main program", 132).f_name[3] = "Orco con Baston";
		a_monster("main program", 132).f_nr = 151;
		a_monster("main program", 132).f_art = 2;
		a_monster("main program", 132).f_lebenspunkte = 7;
		a_monster("main program", 132).f_angriff = 2;
		a_monster("main program", 132).f_abwehr = 2;
		a_monster("main program", 132).f_staerke = 3;
		a_monster("main program", 132).f_ruestung = 1;
		a_monster("main program", 132).f_zauberkraft = 0;
		a_monster("main program", 132).f_zauber = 0;
		a_monster("main program", 132).f_reichweite = 0;
		a_monster("main program", 132).f_minlevel = 4;
		a_monster("main program", 132).f_eigenschaft1 = 2;
		a_monster("main program", 132).f_eigenschaft2 = 4;
		a_monster("main program", 132).f_eigenschaft3 = 8;
		a_monster("main program", 132).f_eigenschaft4 = 9;
		a_monster("main program", 132).f_eigenschaft5 = 26;
		a_monster("main program", 132).f_eigenschaft6 = 29;
		a_monster("main program", 132).f_eigenschaft7 = 33;
		a_monster("main program", 133).f_name[2] = "Orkpriester";
		a_monster("main program", 133).f_name[1] = "Orc Priest";
		a_monster("main program", 133).f_name[3] = "Orco Monje";
		a_monster("main program", 133).f_nr = 152;
		a_monster("main program", 133).f_art = 2;
		a_monster("main program", 133).f_lebenspunkte = 7;
		a_monster("main program", 133).f_angriff = 3;
		a_monster("main program", 133).f_abwehr = 2;
		a_monster("main program", 133).f_staerke = 3;
		a_monster("main program", 133).f_ruestung = 1;
		a_monster("main program", 133).f_zauberkraft = 5;
		a_monster("main program", 133).f_zauber = 7;
		a_monster("main program", 133).f_reichweite = 4;
		a_monster("main program", 133).f_minlevel = 6;
		a_monster("main program", 133).f_eigenschaft1 = 2;
		a_monster("main program", 133).f_eigenschaft2 = 4;
		a_monster("main program", 133).f_eigenschaft3 = 8;
		a_monster("main program", 133).f_eigenschaft4 = 9;
		a_monster("main program", 133).f_eigenschaft5 = 26;
		a_monster("main program", 133).f_eigenschaft6 = 29;
		a_monster("main program", 133).f_eigenschaft7 = 33;
		a_monster("main program", 134).f_name[2] = "Orkmagier";
		a_monster("main program", 134).f_name[1] = "Orc Mage";
		a_monster("main program", 134).f_name[3] = "Orco Mago";
		a_monster("main program", 134).f_nr = 153;
		a_monster("main program", 134).f_art = 2;
		a_monster("main program", 134).f_lebenspunkte = 7;
		a_monster("main program", 134).f_angriff = 3;
		a_monster("main program", 134).f_abwehr = 2;
		a_monster("main program", 134).f_staerke = 3;
		a_monster("main program", 134).f_ruestung = 1;
		a_monster("main program", 134).f_zauberkraft = 5;
		a_monster("main program", 134).f_zauber = 1;
		a_monster("main program", 134).f_reichweite = 4;
		a_monster("main program", 134).f_minlevel = 6;
		a_monster("main program", 134).f_eigenschaft1 = 2;
		a_monster("main program", 134).f_eigenschaft2 = 4;
		a_monster("main program", 134).f_eigenschaft3 = 8;
		a_monster("main program", 134).f_eigenschaft4 = 9;
		a_monster("main program", 134).f_eigenschaft5 = 26;
		a_monster("main program", 134).f_eigenschaft6 = 29;
		a_monster("main program", 134).f_eigenschaft7 = 33;
		a_monster("main program", 135).f_name[2] = "Orkveteran";
		a_monster("main program", 135).f_name[1] = "Orc Veteran";
		a_monster("main program", 135).f_name[3] = "Orco Veterano";
		a_monster("main program", 135).f_nr = 154;
		a_monster("main program", 135).f_art = 2;
		a_monster("main program", 135).f_lebenspunkte = 19;
		a_monster("main program", 135).f_angriff = 5;
		a_monster("main program", 135).f_abwehr = 4;
		a_monster("main program", 135).f_staerke = 5;
		a_monster("main program", 135).f_ruestung = 5;
		a_monster("main program", 135).f_zauberkraft = 0;
		a_monster("main program", 135).f_zauber = 0;
		a_monster("main program", 135).f_reichweite = 0;
		a_monster("main program", 135).f_minlevel = 7;
		a_monster("main program", 135).f_eigenschaft1 = 2;
		a_monster("main program", 135).f_eigenschaft2 = 4;
		a_monster("main program", 135).f_eigenschaft3 = 8;
		a_monster("main program", 135).f_eigenschaft4 = 9;
		a_monster("main program", 135).f_eigenschaft5 = 26;
		a_monster("main program", 135).f_eigenschaft6 = 29;
		a_monster("main program", 135).f_eigenschaft7 = 33;
		a_monster("main program", 136).f_name[2] = "Alter Orkpriester";
		a_monster("main program", 136).f_name[1] = "Elder Orc Priest";
		a_monster("main program", 136).f_name[3] = "Orco Monje Viejo";
		a_monster("main program", 136).f_nr = 155;
		a_monster("main program", 136).f_art = 2;
		a_monster("main program", 136).f_lebenspunkte = 10;
		a_monster("main program", 136).f_angriff = 5;
		a_monster("main program", 136).f_abwehr = 4;
		a_monster("main program", 136).f_staerke = 4;
		a_monster("main program", 136).f_ruestung = 1;
		a_monster("main program", 136).f_zauberkraft = 8;
		a_monster("main program", 136).f_zauber = 4;
		a_monster("main program", 136).f_reichweite = 5;
		a_monster("main program", 136).f_minlevel = 7;
		a_monster("main program", 136).f_eigenschaft1 = 2;
		a_monster("main program", 136).f_eigenschaft2 = 4;
		a_monster("main program", 136).f_eigenschaft3 = 8;
		a_monster("main program", 136).f_eigenschaft4 = 9;
		a_monster("main program", 136).f_eigenschaft5 = 26;
		a_monster("main program", 136).f_eigenschaft6 = 29;
		a_monster("main program", 136).f_eigenschaft7 = 33;
		a_monster("main program", 137).f_name[2] = "Orkdieb";
		a_monster("main program", 137).f_name[1] = "Orc Thief";
		a_monster("main program", 137).f_name[3] = "Orco Ladron";
		a_monster("main program", 137).f_nr = 156;
		a_monster("main program", 137).f_art = 2;
		a_monster("main program", 137).f_lebenspunkte = 7;
		a_monster("main program", 137).f_angriff = 2;
		a_monster("main program", 137).f_abwehr = 2;
		a_monster("main program", 137).f_staerke = 3;
		a_monster("main program", 137).f_ruestung = 1;
		a_monster("main program", 137).f_zauberkraft = 0;
		a_monster("main program", 137).f_zauber = 0;
		a_monster("main program", 137).f_reichweite = 0;
		a_monster("main program", 137).f_minlevel = 5;
		a_monster("main program", 137).f_eigenschaft1 = 2;
		a_monster("main program", 137).f_eigenschaft2 = 8;
		a_monster("main program", 137).f_eigenschaft3 = 9;
		a_monster("main program", 137).f_eigenschaft4 = 10;
		a_monster("main program", 137).f_eigenschaft5 = 29;
		a_monster("main program", 137).f_eigenschaft6 = 33;
		a_monster("main program", 138).f_name[2] = "Alter Orkdieb";
		a_monster("main program", 138).f_name[1] = "Elder Orc Thief";
		a_monster("main program", 138).f_name[3] = "Orco Ladron Viejo";
		a_monster("main program", 138).f_nr = 157;
		a_monster("main program", 138).f_art = 2;
		a_monster("main program", 138).f_lebenspunkte = 10;
		a_monster("main program", 138).f_angriff = 5;
		a_monster("main program", 138).f_abwehr = 3;
		a_monster("main program", 138).f_staerke = 4;
		a_monster("main program", 138).f_ruestung = 2;
		a_monster("main program", 138).f_zauberkraft = 0;
		a_monster("main program", 138).f_zauber = 0;
		a_monster("main program", 138).f_reichweite = 0;
		a_monster("main program", 138).f_minlevel = 7;
		a_monster("main program", 138).f_eigenschaft1 = 2;
		a_monster("main program", 138).f_eigenschaft2 = 8;
		a_monster("main program", 138).f_eigenschaft3 = 9;
		a_monster("main program", 138).f_eigenschaft4 = 10;
		a_monster("main program", 138).f_eigenschaft5 = 29;
		a_monster("main program", 138).f_eigenschaft6 = 33;
		a_monster("main program", 139).f_name[2] = "Alter Orkveteran";
		a_monster("main program", 139).f_name[1] = "Elder Orc Veteran";
		a_monster("main program", 139).f_name[3] = "Orco Veterano Veijo";
		a_monster("main program", 139).f_nr = 158;
		a_monster("main program", 139).f_art = 2;
		a_monster("main program", 139).f_lebenspunkte = 25;
		a_monster("main program", 139).f_angriff = 6;
		a_monster("main program", 139).f_abwehr = 4;
		a_monster("main program", 139).f_staerke = 5;
		a_monster("main program", 139).f_ruestung = 6;
		a_monster("main program", 139).f_zauberkraft = 0;
		a_monster("main program", 139).f_zauber = 0;
		a_monster("main program", 139).f_reichweite = 0;
		a_monster("main program", 139).f_minlevel = 8;
		a_monster("main program", 139).f_eigenschaft1 = 2;
		a_monster("main program", 139).f_eigenschaft2 = 4;
		a_monster("main program", 139).f_eigenschaft3 = 8;
		a_monster("main program", 139).f_eigenschaft4 = 9;
		a_monster("main program", 139).f_eigenschaft5 = 26;
		a_monster("main program", 139).f_eigenschaft6 = 29;
		a_monster("main program", 139).f_eigenschaft7 = 33;
		a_monster("main program", 140).f_name[2] = "Waffenloser Ork";
		a_monster("main program", 140).f_name[1] = "Weaponless Orc";
		a_monster("main program", 140).f_name[3] = "Orco sin Arma";
		a_monster("main program", 140).f_nr = 159;
		a_monster("main program", 140).f_art = 2;
		a_monster("main program", 140).f_lebenspunkte = 7;
		a_monster("main program", 140).f_angriff = 1;
		a_monster("main program", 140).f_abwehr = 1;
		a_monster("main program", 140).f_staerke = 3;
		a_monster("main program", 140).f_ruestung = 1;
		a_monster("main program", 140).f_zauberkraft = 0;
		a_monster("main program", 140).f_zauber = 0;
		a_monster("main program", 140).f_reichweite = 0;
		a_monster("main program", 140).f_minlevel = 4;
		a_monster("main program", 140).f_eigenschaft1 = 2;
		a_monster("main program", 140).f_eigenschaft2 = 4;
		a_monster("main program", 140).f_eigenschaft3 = 8;
		a_monster("main program", 140).f_eigenschaft4 = 9;
		a_monster("main program", 140).f_eigenschaft5 = 26;
		a_monster("main program", 140).f_eigenschaft6 = 29;
		a_monster("main program", 140).f_eigenschaft7 = 33;
		a_monster("main program", 141).f_name[2] = "Alter Ork mit Kampfstab";
		a_monster("main program", 141).f_name[1] = "Elder Orc with Staff";
		a_monster("main program", 141).f_name[3] = "Orco con Baston Viejo";
		a_monster("main program", 141).f_nr = 160;
		a_monster("main program", 141).f_art = 2;
		a_monster("main program", 141).f_lebenspunkte = 10;
		a_monster("main program", 141).f_angriff = 5;
		a_monster("main program", 141).f_abwehr = 3;
		a_monster("main program", 141).f_staerke = 4;
		a_monster("main program", 141).f_ruestung = 1;
		a_monster("main program", 141).f_zauberkraft = 0;
		a_monster("main program", 141).f_zauber = 0;
		a_monster("main program", 141).f_reichweite = 0;
		a_monster("main program", 141).f_minlevel = 5;
		a_monster("main program", 141).f_eigenschaft1 = 2;
		a_monster("main program", 141).f_eigenschaft2 = 4;
		a_monster("main program", 141).f_eigenschaft3 = 8;
		a_monster("main program", 141).f_eigenschaft4 = 9;
		a_monster("main program", 141).f_eigenschaft5 = 26;
		a_monster("main program", 141).f_eigenschaft6 = 29;
		a_monster("main program", 141).f_eigenschaft7 = 33;
		a_monster("main program", 142).f_name[2] = "Eis Schlinggras";
		a_monster("main program", 142).f_name[1] = "Ice Grapplevines";
		a_monster("main program", 142).f_name[3] = "Enredaderas de Hielo";
		a_monster("main program", 142).f_nr = 161;
		a_monster("main program", 142).f_art = 4;
		a_monster("main program", 142).f_lebenspunkte = 8;
		a_monster("main program", 142).f_angriff = 1;
		a_monster("main program", 142).f_abwehr = 0;
		a_monster("main program", 142).f_staerke = 4;
		a_monster("main program", 142).f_ruestung = 0;
		a_monster("main program", 142).f_zauberkraft = 0;
		a_monster("main program", 142).f_zauber = 0;
		a_monster("main program", 142).f_reichweite = 0;
		a_monster("main program", 142).f_minlevel = 1;
		a_monster("main program", 142).f_eigenschaft1 = 11;
		a_monster("main program", 142).f_eigenschaft2 = 18;
		a_monster("main program", 143).f_name[2] = "Giftiges Schlinggras";
		a_monster("main program", 143).f_name[1] = "Poisonous Grapplevines";
		a_monster("main program", 143).f_name[3] = "Enredaderas de Veneno";
		a_monster("main program", 143).f_nr = 162;
		a_monster("main program", 143).f_art = 4;
		a_monster("main program", 143).f_lebenspunkte = 10;
		a_monster("main program", 143).f_angriff = 4;
		a_monster("main program", 143).f_abwehr = 2;
		a_monster("main program", 143).f_staerke = 6;
		a_monster("main program", 143).f_ruestung = 1;
		a_monster("main program", 143).f_zauberkraft = 0;
		a_monster("main program", 143).f_zauber = 0;
		a_monster("main program", 143).f_reichweite = 0;
		a_monster("main program", 143).f_minlevel = 4;
		a_monster("main program", 143).f_eigenschaft1 = 11;
		a_monster("main program", 143).f_eigenschaft2 = 3;
		a_monster("main program", 144).f_name[2] = "Steinernes Schlinggras";
		a_monster("main program", 144).f_name[1] = "Stone Grapplevines";
		a_monster("main program", 144).f_name[3] = "Enredaderas de Piedra";
		a_monster("main program", 144).f_nr = 163;
		a_monster("main program", 144).f_art = 4;
		a_monster("main program", 144).f_lebenspunkte = 12;
		a_monster("main program", 144).f_angriff = 5;
		a_monster("main program", 144).f_abwehr = 5;
		a_monster("main program", 144).f_staerke = 6;
		a_monster("main program", 144).f_ruestung = 8;
		a_monster("main program", 144).f_zauberkraft = 0;
		a_monster("main program", 144).f_zauber = 0;
		a_monster("main program", 144).f_reichweite = 0;
		a_monster("main program", 144).f_minlevel = 4;
		a_monster("main program", 144).f_eigenschaft1 = 12;
		a_monster("main program", 144).f_eigenschaft3 = 7;
		a_monster("main program", 145).f_name[2] = "Wasser Schlinggras";
		a_monster("main program", 145).f_name[1] = "Water Grapplevines";
		a_monster("main program", 145).f_name[3] = "Enredaderas del Aqua";
		a_monster("main program", 145).f_nr = 164;
		a_monster("main program", 145).f_art = 4;
		a_monster("main program", 145).f_lebenspunkte = 12;
		a_monster("main program", 145).f_angriff = 5;
		a_monster("main program", 145).f_abwehr = 5;
		a_monster("main program", 145).f_staerke = 6;
		a_monster("main program", 145).f_ruestung = 8;
		a_monster("main program", 145).f_zauberkraft = 0;
		a_monster("main program", 145).f_zauber = 0;
		a_monster("main program", 145).f_reichweite = 0;
		a_monster("main program", 145).f_minlevel = 4;
		a_monster("main program", 145).f_eigenschaft1 = 12;
		a_monster("main program", 145).f_eigenschaft2 = 30;
		a_monster("main program", 146).f_name[2] = "Feuer Schlinggras";
		a_monster("main program", 146).f_name[1] = "Fire Grapplevines";
		a_monster("main program", 146).f_name[3] = "Enredaderas del Fuego";
		a_monster("main program", 146).f_nr = 165;
		a_monster("main program", 146).f_art = 4;
		a_monster("main program", 146).f_lebenspunkte = 15;
		a_monster("main program", 146).f_angriff = 10;
		a_monster("main program", 146).f_abwehr = 7;
		a_monster("main program", 146).f_staerke = 8;
		a_monster("main program", 146).f_ruestung = 9;
		a_monster("main program", 146).f_zauberkraft = 0;
		a_monster("main program", 146).f_zauber = 0;
		a_monster("main program", 146).f_reichweite = 4;
		a_monster("main program", 146).f_minlevel = 10;
		a_monster("main program", 146).f_eigenschaft1 = 12;
		a_monster("main program", 146).f_eigenschaft2 = 20;
		a_monster("main program", 147).f_name[2] = "Unsichtbares Schlinggras";
		a_monster("main program", 147).f_name[1] = "Invisible Grapplevines";
		a_monster("main program", 147).f_name[3] = "Enredaderas de la Invisibilidad";
		a_monster("main program", 147).f_nr = 166;
		a_monster("main program", 147).f_art = 4;
		a_monster("main program", 147).f_lebenspunkte = 15;
		a_monster("main program", 147).f_angriff = 10;
		a_monster("main program", 147).f_abwehr = 7;
		a_monster("main program", 147).f_staerke = 8;
		a_monster("main program", 147).f_ruestung = 9;
		a_monster("main program", 147).f_zauberkraft = 0;
		a_monster("main program", 147).f_zauber = 0;
		a_monster("main program", 147).f_reichweite = 4;
		a_monster("main program", 147).f_minlevel = 9;
		a_monster("main program", 147).f_eigenschaft1 = 11;
		a_monster("main program", 147).f_eigenschaft2 = 19;
		a_monster("main program", 148).f_name[2] = "Feuer W\374rgerich";
		a_monster("main program", 148).f_name[1] = "Fire Suffocator";
		a_monster("main program", 148).f_name[3] = "Destrangulador del Fuego";
		a_monster("main program", 148).f_nr = 167;
		a_monster("main program", 148).f_art = 4;
		a_monster("main program", 148).f_lebenspunkte = 25;
		a_monster("main program", 148).f_angriff = 12;
		a_monster("main program", 148).f_abwehr = 9;
		a_monster("main program", 148).f_staerke = 10;
		a_monster("main program", 148).f_ruestung = 10;
		a_monster("main program", 148).f_zauberkraft = 0;
		a_monster("main program", 148).f_zauber = 1;
		a_monster("main program", 148).f_reichweite = 4;
		a_monster("main program", 148).f_minlevel = 13;
		a_monster("main program", 148).f_eigenschaft1 = 12;
		a_monster("main program", 148).f_eigenschaft2 = 20;
		a_monster("main program", 148).f_eigenschaft3 = 16;
		a_monster("main program", 148).f_eigenschaft4 = 39;
		a_monster("main program", 148).f_eigenschaft5 = 42;
		a_monster("main program", 149).f_name[2] = "Steinerner W\374rgerich";
		a_monster("main program", 149).f_name[1] = "Stone Suffocator";
		a_monster("main program", 149).f_name[3] = "Destrangulador de Piedra";
		a_monster("main program", 149).f_nr = 168;
		a_monster("main program", 149).f_art = 4;
		a_monster("main program", 149).f_lebenspunkte = 15;
		a_monster("main program", 149).f_angriff = 7;
		a_monster("main program", 149).f_abwehr = 6;
		a_monster("main program", 149).f_staerke = 7;
		a_monster("main program", 149).f_ruestung = 8;
		a_monster("main program", 149).f_zauberkraft = 0;
		a_monster("main program", 149).f_zauber = 0;
		a_monster("main program", 149).f_reichweite = 0;
		a_monster("main program", 149).f_minlevel = 7;
		a_monster("main program", 149).f_eigenschaft1 = 12;
		a_monster("main program", 149).f_eigenschaft2 = 7;
		a_monster("main program", 149).f_eigenschaft3 = 16;
		a_monster("main program", 150).f_name[2] = "Giftiger W\374rgerich";
		a_monster("main program", 150).f_name[1] = "Poisonous Suffocator";
		a_monster("main program", 150).f_name[3] = "Destrangulador de Veneno";
		a_monster("main program", 150).f_nr = 169;
		a_monster("main program", 150).f_art = 4;
		a_monster("main program", 150).f_lebenspunkte = 15;
		a_monster("main program", 150).f_angriff = 5;
		a_monster("main program", 150).f_abwehr = 3;
		a_monster("main program", 150).f_staerke = 7;
		a_monster("main program", 150).f_ruestung = 1;
		a_monster("main program", 150).f_zauberkraft = 0;
		a_monster("main program", 150).f_zauber = 0;
		a_monster("main program", 150).f_reichweite = 0;
		a_monster("main program", 150).f_minlevel = 8;
		a_monster("main program", 150).f_eigenschaft1 = 11;
		a_monster("main program", 150).f_eigenschaft2 = 3;
		a_monster("main program", 150).f_eigenschaft3 = 16;
		a_monster("main program", 151).f_name[2] = "Unsichtbarer W\374rgerich";
		a_monster("main program", 151).f_name[1] = "Invisible Suffocator";
		a_monster("main program", 151).f_name[3] = "Destrangulador de la Invisibilidad";
		a_monster("main program", 151).f_nr = 170;
		a_monster("main program", 151).f_art = 4;
		a_monster("main program", 151).f_lebenspunkte = 20;
		a_monster("main program", 151).f_angriff = 12;
		a_monster("main program", 151).f_abwehr = 9;
		a_monster("main program", 151).f_staerke = 9;
		a_monster("main program", 151).f_ruestung = 9;
		a_monster("main program", 151).f_zauberkraft = 0;
		a_monster("main program", 151).f_zauber = 4;
		a_monster("main program", 151).f_reichweite = 4;
		a_monster("main program", 151).f_minlevel = 10;
		a_monster("main program", 151).f_eigenschaft1 = 11;
		a_monster("main program", 151).f_eigenschaft2 = 19;
		a_monster("main program", 151).f_eigenschaft3 = 16;
		a_monster("main program", 152).f_name[2] = "Greif";
		a_monster("main program", 152).f_name[1] = "Griffin";
		a_monster("main program", 152).f_name[3] = "Grifon";
		a_monster("main program", 152).f_nr = 116;
		a_monster("main program", 152).f_art = 1;
		a_monster("main program", 152).f_lebenspunkte = 70;
		a_monster("main program", 152).f_angriff = 10;
		a_monster("main program", 152).f_abwehr = 10;
		a_monster("main program", 152).f_staerke = 9;
		a_monster("main program", 152).f_ruestung = 3;
		a_monster("main program", 152).f_zauberkraft = 0;
		a_monster("main program", 152).f_zauber = 0;
		a_monster("main program", 152).f_reichweite = 0;
		a_monster("main program", 152).f_minlevel = 15;
		a_monster("main program", 152).f_eigenschaft1 = 1;
		a_monster("main program", 152).f_eigenschaft2 = 29;
		a_monster("main program", 152).f_eigenschaft3 = 27;
		a_monster("main program", 152).f_eigenschaft4 = 11;
		a_monster("main program", 153).f_name[2] = "Schlangenmensch";
		a_monster("main program", 153).f_name[1] = "Human Snake";
		a_monster("main program", 153).f_name[3] = "Hombre Serpiente";
		a_monster("main program", 153).f_nr = 121;
		a_monster("main program", 153).f_art = 2;
		a_monster("main program", 153).f_lebenspunkte = 11;
		a_monster("main program", 153).f_angriff = 6;
		a_monster("main program", 153).f_abwehr = 5;
		a_monster("main program", 153).f_staerke = 6;
		a_monster("main program", 153).f_ruestung = 2;
		a_monster("main program", 153).f_zauberkraft = 0;
		a_monster("main program", 153).f_zauber = 0;
		a_monster("main program", 153).f_reichweite = 0;
		a_monster("main program", 153).f_minlevel = 7;
		a_monster("main program", 153).f_eigenschaft1 = 2;
		a_monster("main program", 153).f_eigenschaft2 = 4;
		a_monster("main program", 153).f_eigenschaft3 = 9;
		a_monster("main program", 153).f_eigenschaft4 = 26;
		a_monster("main program", 153).f_eigenschaft5 = 29;
		a_monster("main program", 154).f_name[2] = "Unhold";
		a_monster("main program", 154).f_name[1] = "Unhold";
		a_monster("main program", 154).f_name[3] = "Unhold";
		a_monster("main program", 154).f_nr = 127;
		a_monster("main program", 154).f_art = 10;
		a_monster("main program", 154).f_lebenspunkte = 25;
		a_monster("main program", 154).f_angriff = 8;
		a_monster("main program", 154).f_abwehr = 4;
		a_monster("main program", 154).f_staerke = 8;
		a_monster("main program", 154).f_ruestung = 1;
		a_monster("main program", 154).f_zauberkraft = 10;
		a_monster("main program", 154).f_zauber = 5;
		a_monster("main program", 154).f_reichweite = 5;
		a_monster("main program", 154).f_minlevel = 13;
		a_monster("main program", 154).f_eigenschaft1 = 12;
		a_monster("main program", 154).f_eigenschaft2 = 17;
		a_monster("main program", 154).f_eigenschaft3 = 18;
		a_monster("main program", 154).f_eigenschaft4 = 44;
		a_monster("main program", 155).f_name[2] = "Vierarmiger Oger";
		a_monster("main program", 155).f_name[1] = "Four-Handed Ogre";
		a_monster("main program", 155).f_name[3] = "Ogro con Cuatro Brazos";
		a_monster("main program", 155).f_nr = 44;
		a_monster("main program", 155).f_art = 2;
		a_monster("main program", 155).f_lebenspunkte = 30;
		a_monster("main program", 155).f_angriff = 9;
		a_monster("main program", 155).f_abwehr = 6;
		a_monster("main program", 155).f_staerke = 12;
		a_monster("main program", 155).f_ruestung = 3;
		a_monster("main program", 155).f_zauberkraft = 0;
		a_monster("main program", 155).f_zauber = 0;
		a_monster("main program", 155).f_reichweite = 4;
		a_monster("main program", 155).f_minlevel = 13;
		a_monster("main program", 155).f_eigenschaft1 = 9;
		a_monster("main program", 155).f_eigenschaft2 = 26;
		a_monster("main program", 155).f_eigenschaft3 = 29;
		a_monster("main program", 155).f_eigenschaft4 = 33;
		a_monster("main program", 155).f_eigenschaft5 = 16;
		a_monster("main program", 155).f_eigenschaft6 = 40;
		a_monster("main program", 155).f_eigenschaft7 = 41;
		a_monster("main program", 156).f_name[2] = "Troll";
		a_monster("main program", 156).f_name[1] = "Troll";
		a_monster("main program", 156).f_name[3] = "Troll";
		a_monster("main program", 156).f_nr = 49;
		a_monster("main program", 156).f_art = 2;
		a_monster("main program", 156).f_lebenspunkte = 50;
		a_monster("main program", 156).f_angriff = 8;
		a_monster("main program", 156).f_abwehr = 5;
		a_monster("main program", 156).f_staerke = 11;
		a_monster("main program", 156).f_ruestung = 4;
		a_monster("main program", 156).f_zauberkraft = 0;
		a_monster("main program", 156).f_zauber = 0;
		a_monster("main program", 156).f_reichweite = 4;
		a_monster("main program", 156).f_minlevel = 15;
		a_monster("main program", 156).f_eigenschaft1 = 9;
		a_monster("main program", 156).f_eigenschaft2 = 26;
		a_monster("main program", 156).f_eigenschaft3 = 29;
		a_monster("main program", 156).f_eigenschaft4 = 33;
		a_monster("main program", 156).f_eigenschaft5 = 16;
		a_monster("main program", 156).f_eigenschaft6 = 18;
		a_monster("main program", 156).f_eigenschaft7 = 41;
		a_monster("main program", 157).f_name[2] = "Blob";
		a_monster("main program", 157).f_name[1] = "Blob";
		a_monster("main program", 157).f_name[3] = "Blob";
		a_monster("main program", 157).f_nr = 46;
		a_monster("main program", 157).f_art = 6;
		a_monster("main program", 157).f_lebenspunkte = 20;
		a_monster("main program", 157).f_angriff = 1;
		a_monster("main program", 157).f_abwehr = 0;
		a_monster("main program", 157).f_staerke = 2;
		a_monster("main program", 157).f_ruestung = 0;
		a_monster("main program", 157).f_zauberkraft = 0;
		a_monster("main program", 157).f_zauber = 0;
		a_monster("main program", 157).f_reichweite = 0;
		a_monster("main program", 157).f_minlevel = 8;
		a_monster("main program", 157).f_eigenschaft1 = 16;
		a_monster("main program", 157).f_eigenschaft2 = 6;
		a_monster("main program", 157).f_eigenschaft3 = 43;
		a_monster("main program", 158).f_name[2] = "Meisterdieb";
		a_monster("main program", 158).f_name[1] = "Master Thief";
		a_monster("main program", 158).f_name[3] = "Ladron Maestro";
		a_monster("main program", 158).f_nr = 53;
		a_monster("main program", 158).f_art = 2;
		a_monster("main program", 158).f_lebenspunkte = 12;
		a_monster("main program", 158).f_angriff = 7;
		a_monster("main program", 158).f_abwehr = 5;
		a_monster("main program", 158).f_staerke = 5;
		a_monster("main program", 158).f_ruestung = 1;
		a_monster("main program", 158).f_zauberkraft = 0;
		a_monster("main program", 158).f_zauber = 0;
		a_monster("main program", 158).f_reichweite = 0;
		a_monster("main program", 158).f_minlevel = 9;
		a_monster("main program", 158).f_eigenschaft1 = 8;
		a_monster("main program", 158).f_eigenschaft2 = 9;
		a_monster("main program", 158).f_eigenschaft3 = 10;
		a_monster("main program", 158).f_eigenschaft4 = 27;
		a_monster("main program", 158).f_eigenschaft5 = 29;
		a_monster("main program", 159).f_name[2] = "Kolossus";
		a_monster("main program", 159).f_name[1] = "Colossus";
		a_monster("main program", 159).f_name[3] = "Colossus";
		a_monster("main program", 159).f_nr = 54;
		a_monster("main program", 159).f_art = 6;
		a_monster("main program", 159).f_lebenspunkte = 120;
		a_monster("main program", 159).f_angriff = 35;
		a_monster("main program", 159).f_abwehr = 35;
		a_monster("main program", 159).f_staerke = 35;
		a_monster("main program", 159).f_ruestung = 10;
		a_monster("main program", 159).f_zauberkraft = 0;
		a_monster("main program", 159).f_zauber = 0;
		a_monster("main program", 159).f_reichweite = 12;
		a_monster("main program", 159).f_minlevel = 100;
		a_monster("main program", 159).f_eigenschaft1 = 1;
		a_monster("main program", 159).f_eigenschaft2 = 12;
		a_monster("main program", 159).f_eigenschaft3 = 17;
		a_monster("main program", 159).f_eigenschaft4 = 7;
		a_monster("main program", 159).f_eigenschaft5 = 13;
		a_monster("main program", 159).f_eigenschaft6 = 14;
		a_monster("main program", 159).f_eigenschaft7 = 25;
		a_monster("main program", 159).f_eigenschaft8 = 15;
		a_monster("main program", 160).f_name[2] = "Feuer Magier";
		a_monster("main program", 160).f_name[1] = "Fire Magician";
		a_monster("main program", 160).f_name[3] = "Mago Fuego";
		a_monster("main program", 160).f_nr = 55;
		a_monster("main program", 160).f_art = 2;
		a_monster("main program", 160).f_lebenspunkte = 10;
		a_monster("main program", 160).f_angriff = 4;
		a_monster("main program", 160).f_abwehr = 1;
		a_monster("main program", 160).f_staerke = 2;
		a_monster("main program", 160).f_ruestung = 1;
		a_monster("main program", 160).f_zauberkraft = 12;
		a_monster("main program", 160).f_zauber = 24;
		a_monster("main program", 160).f_reichweite = 9;
		a_monster("main program", 160).f_minlevel = 15;
		a_monster("main program", 160).f_eigenschaft1 = 4;
		a_monster("main program", 160).f_eigenschaft2 = 15;
		a_monster("main program", 160).f_eigenschaft3 = 27;
		a_monster("main program", 160).f_eigenschaft4 = 29;
		a_monster("main program", 160).f_eigenschaft5 = 12;
		a_monster("main program", 160).f_eigenschaft6 = 42;
		a_monster("main program", 161).f_name[2] = "Wasserd\344mon";
		a_monster("main program", 161).f_name[1] = "Water Demon";
		a_monster("main program", 161).f_name[3] = "Demonio de Aqua";
		a_monster("main program", 161).f_nr = 56;
		a_monster("main program", 161).f_art = 7;
		a_monster("main program", 161).f_lebenspunkte = 42;
		a_monster("main program", 161).f_angriff = 9;
		a_monster("main program", 161).f_abwehr = 7;
		a_monster("main program", 161).f_staerke = 11;
		a_monster("main program", 161).f_ruestung = 5;
		a_monster("main program", 161).f_zauberkraft = 0;
		a_monster("main program", 161).f_zauber = 0;
		a_monster("main program", 161).f_reichweite = 4;
		a_monster("main program", 161).f_minlevel = 18;
		a_monster("main program", 161).f_eigenschaft1 = 30;
		a_monster("main program", 161).f_eigenschaft2 = 23;
		a_monster("main program", 161).f_eigenschaft3 = 18;
		a_monster("main program", 161).f_eigenschaft4 = 13;
		a_monster("main program", 162).f_name[2] = "Riesen Frettchen";
		a_monster("main program", 162).f_name[1] = "Giant Ferret";
		a_monster("main program", 162).f_name[3] = "Hur\363n Gigante";
		a_monster("main program", 162).f_nr = 48;
		a_monster("main program", 162).f_art = 1;
		a_monster("main program", 162).f_lebenspunkte = 10;
		a_monster("main program", 162).f_angriff = 6;
		a_monster("main program", 162).f_abwehr = 2;
		a_monster("main program", 162).f_staerke = 4;
		a_monster("main program", 162).f_ruestung = 1;
		a_monster("main program", 162).f_zauberkraft = 0;
		a_monster("main program", 162).f_zauber = 0;
		a_monster("main program", 162).f_reichweite = 0;
		a_monster("main program", 162).f_minlevel = 7;
		a_monster("main program", 162).f_sound = 52;
		a_monster("main program", 162).f_eigenschaft1 = 2;
		a_monster("main program", 162).f_eigenschaft2 = 6;
		a_monster("main program", 162).f_eigenschaft3 = 8;
		a_monster("main program", 162).f_eigenschaft4 = 29;
		a_monster("main program", 162).f_eigenschaft5 = 35;
		a_monster("main program", 162).f_eigenschaft6 = 44;
		a_monster("main program", 163).f_name[2] = "Werwolf";
		a_monster("main program", 163).f_name[1] = "Werewolf";
		a_monster("main program", 163).f_name[3] = "Hombrelobo";
		a_monster("main program", 163).f_nr = 81;
		a_monster("main program", 163).f_art = 1;
		a_monster("main program", 163).f_lebenspunkte = 15;
		a_monster("main program", 163).f_angriff = 7;
		a_monster("main program", 163).f_abwehr = 3;
		a_monster("main program", 163).f_staerke = 7;
		a_monster("main program", 163).f_ruestung = 1;
		a_monster("main program", 163).f_zauberkraft = 0;
		a_monster("main program", 163).f_zauber = 0;
		a_monster("main program", 163).f_reichweite = 0;
		a_monster("main program", 163).f_minlevel = 8;
		a_monster("main program", 163).f_sound = 44;
		a_monster("main program", 163).f_eigenschaft1 = 16;
		a_monster("main program", 163).f_eigenschaft2 = 44;
		a_monster("main program", 163).f_eigenschaft3 = 29;
		a_monster("main program", 163).f_eigenschaft4 = 36;
		a_monster("main program", 164).f_name[2] = "Riesenschnecke";
		a_monster("main program", 164).f_name[1] = "Giant Slug";
		a_monster("main program", 164).f_name[3] = "Caracol Gigante";
		a_monster("main program", 164).f_nr = 172;
		a_monster("main program", 164).f_art = 1;
		a_monster("main program", 164).f_lebenspunkte = 6;
		a_monster("main program", 164).f_angriff = 3;
		a_monster("main program", 164).f_abwehr = 0;
		a_monster("main program", 164).f_staerke = 2;
		a_monster("main program", 164).f_ruestung = 0;
		a_monster("main program", 164).f_zauberkraft = 0;
		a_monster("main program", 164).f_zauber = 0;
		a_monster("main program", 164).f_reichweite = 0;
		a_monster("main program", 164).f_minlevel = 1;
		a_monster("main program", 164).f_eigenschaft1 = 39;
		a_monster("main program", 164).f_eigenschaft2 = 29;
		a_monster("main program", 165).f_name[2] = "Riesenbremse";
		a_monster("main program", 165).f_name[1] = "Giant Horsefly";
		a_monster("main program", 165).f_name[3] = "Mosquito Gigante";
		a_monster("main program", 165).f_nr = 173;
		a_monster("main program", 165).f_art = 1;
		a_monster("main program", 165).f_lebenspunkte = 4;
		a_monster("main program", 165).f_angriff = 3;
		a_monster("main program", 165).f_abwehr = 2;
		a_monster("main program", 165).f_staerke = 3;
		a_monster("main program", 165).f_ruestung = 0;
		a_monster("main program", 165).f_zauberkraft = 0;
		a_monster("main program", 165).f_zauber = 0;
		a_monster("main program", 165).f_reichweite = 0;
		a_monster("main program", 165).f_minlevel = 2;
		a_monster("main program", 165).f_eigenschaft1 = 1;
		a_monster("main program", 165).f_eigenschaft2 = 8;
		a_monster("main program", 165).f_eigenschaft3 = 6;
		a_monster("main program", 165).f_eigenschaft4 = 29;
		a_monster("main program", 165).f_eigenschaft5 = 44;
		a_monster("main program", 166).f_name[2] = "Schuppenechse";
		a_monster("main program", 166).f_name[1] = "Scaled Lizard";
		a_monster("main program", 166).f_name[3] = "Lagarto Fortificado";
		a_monster("main program", 166).f_nr = 174;
		a_monster("main program", 166).f_art = 1;
		a_monster("main program", 166).f_lebenspunkte = 8;
		a_monster("main program", 166).f_angriff = 4;
		a_monster("main program", 166).f_abwehr = 1;
		a_monster("main program", 166).f_staerke = 3;
		a_monster("main program", 166).f_ruestung = 3;
		a_monster("main program", 166).f_zauberkraft = 0;
		a_monster("main program", 166).f_zauber = 0;
		a_monster("main program", 166).f_reichweite = 0;
		a_monster("main program", 166).f_minlevel = 5;
		a_monster("main program", 166).f_eigenschaft1 = 8;
		a_monster("main program", 166).f_eigenschaft2 = 9;
		a_monster("main program", 166).f_eigenschaft3 = 29;
		a_monster("main program", 167).f_name[2] = "Mykonid";
		a_monster("main program", 167).f_name[1] = "Mykonid";
		a_monster("main program", 167).f_name[3] = "Mykonid";
		a_monster("main program", 167).f_nr = 175;
		a_monster("main program", 167).f_art = 4;
		a_monster("main program", 167).f_lebenspunkte = 3;
		a_monster("main program", 167).f_angriff = 1;
		a_monster("main program", 167).f_abwehr = 0;
		a_monster("main program", 167).f_staerke = 1;
		a_monster("main program", 167).f_ruestung = 0;
		a_monster("main program", 167).f_zauberkraft = 0;
		a_monster("main program", 167).f_zauber = 0;
		a_monster("main program", 167).f_reichweite = 0;
		a_monster("main program", 167).f_minlevel = 6;
		a_monster("main program", 167).f_eigenschaft1 = 16;
		a_monster("main program", 167).f_eigenschaft2 = 43;
		a_monster("main program", 168).f_name[2] = "\304lterer Mykonid";
		a_monster("main program", 168).f_name[1] = "Elder Mykonid";
		a_monster("main program", 168).f_name[3] = "Mykonid Viejo";
		a_monster("main program", 168).f_nr = 176;
		a_monster("main program", 168).f_art = 4;
		a_monster("main program", 168).f_lebenspunkte = 6;
		a_monster("main program", 168).f_angriff = 3;
		a_monster("main program", 168).f_abwehr = 1;
		a_monster("main program", 168).f_staerke = 2;
		a_monster("main program", 168).f_ruestung = 0;
		a_monster("main program", 168).f_zauberkraft = 0;
		a_monster("main program", 168).f_zauber = 0;
		a_monster("main program", 168).f_reichweite = 0;
		a_monster("main program", 168).f_minlevel = 8;
		a_monster("main program", 168).f_eigenschaft1 = 16;
		a_monster("main program", 168).f_eigenschaft2 = 43;
		a_monster("main program", 169).f_name[2] = "Riesiger Hirschk\344fer";
		a_monster("main program", 169).f_name[1] = "Giant Stag Beetle";
		a_monster("main program", 169).f_name[3] = "Scarabajo Enorme";
		a_monster("main program", 169).f_nr = 171;
		a_monster("main program", 169).f_art = 1;
		a_monster("main program", 169).f_lebenspunkte = 5;
		a_monster("main program", 169).f_angriff = 3;
		a_monster("main program", 169).f_abwehr = 1;
		a_monster("main program", 169).f_staerke = 3;
		a_monster("main program", 169).f_ruestung = 2;
		a_monster("main program", 169).f_zauberkraft = 0;
		a_monster("main program", 169).f_zauber = 0;
		a_monster("main program", 169).f_reichweite = 0;
		a_monster("main program", 169).f_minlevel = 4;
		a_monster("main program", 169).f_eigenschaft1 = 8;
		a_monster("main program", 169).f_eigenschaft2 = 6;
		a_monster("main program", 169).f_eigenschaft3 = 29;
		a_monster("main program", 170).f_name[2] = "Gargoyl";
		a_monster("main program", 170).f_name[1] = "Gargoyle";
		a_monster("main program", 170).f_name[3] = "Gargyle";
		a_monster("main program", 170).f_nr = 177;
		a_monster("main program", 170).f_art = 2;
		a_monster("main program", 170).f_lebenspunkte = 30;
		a_monster("main program", 170).f_angriff = 3;
		a_monster("main program", 170).f_abwehr = 2;
		a_monster("main program", 170).f_staerke = 6;
		a_monster("main program", 170).f_ruestung = 5;
		a_monster("main program", 170).f_zauberkraft = 0;
		a_monster("main program", 170).f_zauber = 0;
		a_monster("main program", 170).f_reichweite = 0;
		a_monster("main program", 170).f_minlevel = 11;
		a_monster("main program", 170).f_eigenschaft1 = 7;
		a_monster("main program", 170).f_eigenschaft2 = 13;
		a_monster("main program", 170).f_eigenschaft3 = 25;
		a_monster("main program", 170).f_eigenschaft4 = 1;
		g_environment = p_getenvironmentvariable("HOME") + "/.lostlaby";
		p_createdirectory(g_environment);
		g_yplus = 12;
		g_yplus2 = 10;
		g_akt_zauber_offset = 14;
		g_akt_zauber_offset2 = 13;
		g_anzz = 26;
		if (!p_initsprite()) {
		}
		p_load_settings();
		if (g_win_mode == 2) {
			g_windowsfenster = 1;
		}
		if (g_win_mode == 1) {
			if (!p_openscreen(640, 480, 16, "Lost Labyrinth")) {
			}
			v_screenopen = 1;
		} else {
			if (!p_openwindowedscreen(0, 0, 0, 640, 480, 1, 0, 0)) {
			}
			v_screenopen = 1;
			p_sdl_wm_setcaption_("Lost Labyrinth", "");
		}
		if (g_sound == 1 || g_music == 1) {
			if (!p_initsound()) {
			}
			p_load_sounds();
		}
		p_load_graphics();
		p_clipsprite(0, (((a_spieler("main program", g_akt_spieler).f_face * 32) * 2) + (g_frame * 32)), 0, 32, 32);
		p_displaytransparentsprite(0, 160, 160);
		p_setframerate(60);
		if (!p_initkeyboard()) {
		}
		if (!g_no_mouse) {
			v_result = p_initmouse();
		}
		p_init_highscores();
		p_read_highscores();
		for (g_akt_spieler = 0; g_akt_spieler <= 4; g_akt_spieler += 1) {
			p_init_skills();
			a_spieler("main program", g_akt_spieler).f_skill_points = 14;
		}
		g_akt_spieler = 1;
		if (g_test == 2 || g_test == 4) {
			if (g_test == 2) {
				p_print("CSV:--------------------------------");
				p_highscore_upload(1, "");
			}
		}
L_again: ;
		g_zw_bild = 0;
		g_nr_of_saves = 0;
		for (v_i = 1; v_i <= 150; v_i += 1) {
			a_ausgangx("main program", v_i) = 0;
			a_ausgangy("main program", v_i) = 0;
			a_sonderlevel("main program", v_i) = 0;
			a_levelmod("main program", v_i) = 0;
			a_groesse("main program", v_i) = 0;
			a_inhalt("main program", v_i) = 0;
			a_mit_was("main program", v_i) = 0;
		}
		g_mit_was_normal = 1;
		g_inhalt_normal = 4;
		for (v_i = 1; v_i <= 4; v_i += 1) {
			a_spieler("main program", v_i).f_status = 1;
			a_spieler("main program", v_i).f_level = 1;
			a_spieler("main program", v_i).f_maxlevel = 1;
			a_spieler("main program", v_i).f_maennchen = 2;
			a_spieler("main program", v_i).f_mousepointer = v_i;
			a_spieler("main program", v_i).f_lifepoints = 12;
			a_spieler("main program", v_i).f_maxlifepoints = 12;
			a_spieler("main program", v_i).f_lifegain = 3;
			a_spieler("main program", v_i).f_mana = 3;
			a_spieler("main program", v_i).f_maxmana = 3;
			a_spieler("main program", v_i).f_managain = 3;
			a_spieler("main program", v_i).f_attack = 1;
			a_spieler("main program", v_i).f_dexterity = 1;
			a_spieler("main program", v_i).f_strength = 1;
			a_spieler("main program", v_i).f_maxspeed = 7;
			a_spieler("main program", v_i).f_speed = 7;
			a_spieler("main program", v_i).f_perception = 1;
			a_spieler("main program", v_i).f_luck_score = 1;
			a_spieler("main program", v_i).f_power_score = 1;
			a_spieler("main program", v_i).f_circle = 0;
			a_spieler("main program", v_i).f_magieresistenz = 0;
			a_spieler("main program", v_i).f_spellweaving = 1;
			a_spieler("main program", v_i).f_style = 0;
			a_spieler("main program", v_i).f_light = 1;
			a_spieler("main program", v_i).f_hunger = 0;
			a_spieler("main program", v_i).f_durst = 0;
			a_spieler("main program", v_i).f_betrunken = 0;
			a_spieler("main program", v_i).f_mks = 0;
			a_spieler("main program", v_i).f_schleichen = 0;
			a_spieler("main program", v_i).f_fluch = 0;
			a_spieler("main program", v_i).f_fluchdauer = 0;
			a_spieler("main program", v_i).f_krankheit = 0;
			a_spieler("main program", v_i).f_krankheitdauer = 0;
			a_spieler("main program", v_i).f_poison = 0;
			a_spieler("main program", v_i).f_verhungern = 0;
			a_spieler("main program", v_i).f_verdursten = 0;
			a_spieler("main program", v_i).f_weisheit = 0;
			a_spieler("main program", v_i).f_lifepointgegenstand = 0;
			a_spieler("main program", v_i).f_managegenstand = 0;
			a_spieler("main program", v_i).f_staerkegegenstand = 0;
			a_spieler("main program", v_i).f_zugweitegegenstand = 0;
			a_spieler("main program", v_i).f_dexteritygegenstand = 0;
			a_spieler("main program", v_i).f_gluecksgegenstand = 0;
			a_spieler("main program", v_i).f_bogentreffergegenstand = 0;
			a_spieler("main program", v_i).f_bogenschadengegenstand = 0;
			a_spieler("main program", v_i).f_powergegenstand = 0;
			a_spieler("main program", v_i).f_perceptiongegenstand = 0;
			a_spieler("main program", v_i).f_attackgegenstand = 0;
			a_spieler("main program", v_i).f_stealthgegenstand = 0;
			a_spieler("main program", v_i).f_damagegegenstand = 0;
			a_spieler("main program", v_i).f_lichtgegenstand = 0;
			a_spieler("main program", v_i).f_diebstahlgegenstand = 0;
			a_spieler("main program", v_i).f_goblinlehre = 0;
			a_spieler("main program", v_i).f_spinnenlehre = 0;
			a_spieler("main program", v_i).f_untotenlehre = 0;
			a_spieler("main program", v_i).f_pflanzenlehre = 0;
			a_spieler("main program", v_i).f_tierkunde = 0;
			a_spieler("main program", v_i).f_fallenlehre = 0;
			a_spieler("main program", v_i).f_giftlehre = 0;
			a_spieler("main program", v_i).f_pos_zaubermenue = 0;
			a_spieler("main program", v_i).f_dumm = 0;
			a_spieler("main program", v_i).f_face = 2;
			a_spieler("main program", v_i).f_hinterhalt = 0;
			a_spieler("main program", v_i).f_portal = 1;
			a_spieler("main program", v_i).f_teleport = 1;
			a_spieler("main program", v_i).f_nexus = 1;
			a_spieler("main program", v_i).f_stehlen = 2;
			a_spieler("main program", v_i).f_armageddon = 1;
			a_spieler("main program", v_i).f_pestilence = 1;
			a_spieler("main program", v_i).f_drachenform = 1;
			a_spieler("main program", v_i).f_macht = 1;
			a_spieler("main program", v_i).f_magic_apple = 2;
			a_spieler("main program", v_i).f_refresh = 2;
			a_spieler("main program", v_i).f_heal = 3;
			a_spieler("main program", v_i).f_ease_pain = 3;
			a_spieler("main program", v_i).f_heal_others = 3;
			a_spieler("main program", v_i).f_full_healing = 3;
			a_spieler("main program", v_i).f_schriftrolle = 0;
			a_spieler("main program", v_i).f_zauberbuch = 0;
			a_spieler("main program", v_i).f_kessel = 0;
			a_spieler("main program", v_i).f_udjat_ben = 1;
			a_spieler("main program", v_i).f_akt_zauber = 1;
			a_spieler("main program", v_i).f_schule = 0;
			a_spieler("main program", v_i).f_sorting_style = 0;
			a_spieler("main program", v_i).f_udjat_ben = 1;
			for (v_act_piece = 1; v_act_piece <= 9; v_act_piece += 1) {
				a_spieler("main program", v_i).f_staff_pieces[v_act_piece] = 0;
			}
			a_spieler("main program", v_i).f_character_x = 1;
			a_spieler("main program", v_i).f_character_y = 1;
			a_spieler("main program", v_i).f_moves = 0;
			a_spieler("main program", v_i).f_anker_x = 0;
			a_spieler("main program", v_i).f_anker_y = 0;
			a_spieler("main program", v_i).f_anker_level = 0;
			a_spieler("main program", v_i).f_old_pos_x = a_spieler("main program", v_i).f_character_x;
			a_spieler("main program", v_i).f_old_pos_y = a_spieler("main program", v_i).f_character_y;
			a_spieler("main program", v_i).f_old_level = a_spieler("main program", v_i).f_level;
			a_spieler("main program", v_i).f_old_lp = a_spieler("main program", v_i).f_lifepoints;
			a_spieler("main program", v_i).f_old_max_lp = a_spieler("main program", v_i).f_maxlifepoints;
			a_spieler("main program", v_i).f_old_mp = a_spieler("main program", v_i).f_mana;
			a_spieler("main program", v_i).f_old_max_mp = a_spieler("main program", v_i).f_maxmana;
			a_spieler("main program", v_i).f_cause_of_death = 0;
			a_spieler("main program", v_i).f_cause_of_death_monster = 0;
			a_spieler("main program", v_i).f_creature_typ = 0;
			a_spieler("main program", v_i).f_creature_attack = 0;
			a_spieler("main program", v_i).f_creature_lifepoints = 0;
			a_spieler("main program", v_i).f_creature_maxlifepoints = 0;
			a_spieler("main program", v_i).f_creature_speed = 0;
			a_spieler("main program", v_i).f_creature_maxspeed = 0;
			a_spieler("main program", v_i).f_creature_x = 0;
			a_spieler("main program", v_i).f_creature_y = 0;
			a_spieler("main program", v_i).f_creature_heading = 0;
			a_spieler("main program", v_i).f_in_water = 0;
		}
		for (v_j = 1; v_j <= 4; v_j += 1) {
			for (v_i = 1; v_i <= 30; v_i += 1) {
				a_aktive("main program", v_i, v_j).f_nr = 0;
				a_aktive("main program", v_i, v_j).f_dauer = 0;
			}
		}
		for (v_j = 1; v_j <= 10; v_j += 1) {
			for (v_i = 1; v_i <= 4; v_i += 1) {
				a_quickspells("main program", v_j, v_i) = 0;
			}
		}
		for (v_j = 1; v_j <= 8; v_j += 1) {
			for (v_i = 1; v_i <= 4; v_i += 1) {
				a_quickspells2("main program", v_j, v_i) = 0;
			}
		}
		for (v_j = 1; v_j <= 4; v_j += 1) {
			for (v_i = 1; v_i <= 50; v_i += 1) {
				a_inventory("main program", v_i, v_j).f_name = 0;
				a_inventory("main program", v_i, v_j).f_status = 0;
				a_inventory("main program", v_i, v_j).f_benutzt = 0;
				a_inventory("main program", v_i, v_j).f_anzahl = 0;
				a_inventory("main program", v_i, v_j).f_attri5 = 0;
			}
		}
		p_clearlist(ll_unique_items);
		p_clearlist(ll_monster_list);
		p_addelement(ll_monster_list);
		LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z = -1;
		p_addelement(ll_monster_list);
		LIST_CURRENT(ll_monster_list,struct st_monster_type).f_z = 9999;
		for (v_i = 1; v_i <= 150; v_i += 1) {
			a_first_monster("main program", v_i).f_p = (char *) (ll_monster_list.current ? ll_monster_list.current + 1 : 0);
		}
		p_clearlist(ll_merchants);
		for (v_i = 1; v_i <= 150; v_i += 1) {
			a_spinnenkoenigin("main program", v_i) = 0;
		}
		for (v_i = 1; v_i <= 150; v_i += 1) {
			a_goblinkoenig("main program", v_i) = 0;
		}
		for (v_i = 1; v_i <= 150; v_i += 1) {
			a_untotenherr("main program", v_i) = 0;
		}
		p_init_creatures();
		g_anfangszeit = p_formatdate("%yyyy%mm%dd%hh%ii%ss", p_date());
		p_init_spells();
		p_init_traenke();
		p_init_pilze();
		if (g_music == 1) {
			p_stopmodule(-1);
			p_playmodule(0);
		}
		p_title();
		p_select_spieler();
		v_skill_traders_req = 0;
		for (g_akt_spieler = 1; g_akt_spieler <= g_nr_of_players; g_akt_spieler += 1) {
			p_maennchen_auswaehlen();
			p_clearlist(ll_template_list);
			p_load_templates();
			p_selectelement(ll_template_list, (g_akt_spieler - 1));
			p_template_to_player();
			p_clearlist(ll_template_list);
			p_select_skills();
			for (v_i = 1; v_i <= 184; v_i += 1) {
				if (a_skills("main program", 47, g_akt_spieler).f_gewaehlt == 1 || a_skills("main program", 64, g_akt_spieler).f_gewaehlt == 1) {
					v_scroll_known = 512;
				} else {
					v_scroll_known = 0;
				}
				if (a_spells("main program", v_i).f_school == 60) {
					a_learned("main program", g_akt_spieler, v_i) = (100 | v_scroll_known);
				} else {
					a_learned("main program", g_akt_spieler, v_i) = (50 | v_scroll_known);
				}
			}
			p_get_player_name();
			p_advancements();
			a_spieler("main program", g_akt_spieler).f_verifikation = "";
			for (v_i = 1; v_i <= 30; v_i += 1) {
				a_spieler("main program", g_akt_spieler).f_verifikation = a_spieler("main program", g_akt_spieler).f_verifikation + p_str(p_random(9));
			}
			p_delay(v_my_delay);
			if (a_skills("main program", 96, g_akt_spieler).f_gewaehlt == 1) {
				v_skill_traders_req = 1;
			}
		}
		p_clearlist(ll_template_list);
		p_load_templates();
		for (g_akt_spieler = 1; g_akt_spieler <= g_nr_of_players; g_akt_spieler += 1) {
			p_selectelement(ll_template_list, (g_akt_spieler - 1));
			p_player_to_template();
		}
		p_save_templates();
		if (g_music == 1) {
			p_stopmodule(-1);
		}
		for (g_akt_spieler = 1; g_akt_spieler <= g_nr_of_players; g_akt_spieler += 1) {
			a_spieler("main program", g_akt_spieler).f_speed = p_maxspeed();
			a_spieler("main program", g_akt_spieler).f_lifepoints = p_maxlife();
		}
		g_akt_spieler = 1;
		for (v_akt_level = 1; v_akt_level <= 150; v_akt_level += 1) {
			for (v_i = 1; v_i <= 200; v_i += 1) {
				for (v_j = 1; v_j <= 200; v_j += 1) {
					a_automap("main program", v_i, v_j).f_feld[v_akt_level] = 0;
				}
			}
			a_levelmod("main program", v_akt_level) = 0;
			if (v_akt_level > 25 && p_random(100) > 90) {
				a_levelmod("main program", v_akt_level) = (p_random(14) + 1);
			}
			a_sonderlevel("main program", v_akt_level) = 0;
			if (v_akt_level > 10 && p_random(100) > 80 && !a_levelmod("main program", v_akt_level)) {
				a_sonderlevel("main program", v_akt_level) = (p_random(10) + 1);
			}
			a_fluss("main program", v_akt_level) = 0;
			if (v_akt_level >= 10 && !p_random(3) && !a_sonderlevel("main program", v_akt_level)) {
				a_fluss("main program", v_akt_level) = 1;
			}
			if (v_akt_level < 50) {
				v_nr_of_rooms = 1;
			} else {
				v_nr_of_rooms = 2;
			}
			if (g_test == 1) {
				v_nr_of_rooms = 2;
			}
			for (v_nr_in_level = 1; v_nr_in_level <= v_nr_of_rooms; v_nr_in_level += 1) {
				if ((v_akt_level > 3 || g_test == 1) && !a_fluss("main program", v_akt_level) && !a_sonderlevel("main program", v_akt_level)) {
					do {
						v_setzen = 1;
						v_act_room = (p_random(33) + 1);
						if (v_act_room == 19) {
							v_setzen = 0;
						}
						if (v_act_room == 21 && v_akt_level < 10) {
							v_setzen = 0;
						}
						if (v_act_room == 8 && v_akt_level < 6) {
							v_setzen = 0;
						}
						if (v_act_room == 14 && v_akt_level < 7) {
							v_setzen = 0;
						}
						if (g_test == 1) {
							v_setzen = 1;
						}
						if (v_setzen == 1) {
							p_addelement(ll_room_list);
							LIST_CURRENT(ll_room_list,struct st_room_type).f_level = v_akt_level;
							LIST_CURRENT(ll_room_list,struct st_room_type).f_nr_in_level = v_nr_in_level;
							LIST_CURRENT(ll_room_list,struct st_room_type).f_type = v_act_room;
							LIST_CURRENT(ll_room_list,struct st_room_type).f_visions = 1;
							if (v_act_room == 16) {
								for (v_i = 1; v_i <= 4; v_i += 1) {
									LIST_CURRENT(ll_room_list,struct st_room_type).f_only_once[v_i] = 1;
								}
							}
						}
					} while (!(v_setzen == 1));
					if (v_act_room == 1) {
						p_addelement(ll_merchants);
						p_init_merchant(1);
						LIST_CURRENT(ll_merchants,struct st_merch_items).f_face = 64;
						LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 = (p_countlist(ll_merchants) - 1);
					}
					if (v_act_room == 15) {
						p_addelement(ll_merchants);
						p_init_merchant(2);
						LIST_CURRENT(ll_merchants,struct st_merch_items).f_face = 82;
						LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 = (p_countlist(ll_merchants) - 1);
					}
					if (v_act_room == 27) {
						p_addelement(ll_merchants);
						p_init_merchant(3);
						LIST_CURRENT(ll_merchants,struct st_merch_items).f_face = 84;
						LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 = (p_countlist(ll_merchants) - 1);
					}
					if (v_act_room == 28) {
						p_addelement(ll_merchants);
						p_init_merchant(4);
						LIST_CURRENT(ll_merchants,struct st_merch_items).f_face = 86;
						LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 = (p_countlist(ll_merchants) - 1);
					}
					if (v_act_room == 30) {
						p_addelement(ll_merchants);
						p_init_merchant(5);
						LIST_CURRENT(ll_merchants,struct st_merch_items).f_face = 87;
						LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 = (p_countlist(ll_merchants) - 1);
					}
				}
			}
			a_small_trader("main program", v_akt_level) = -1;
		}
		for (v_i = 0; v_i <= 2; v_i += 1) {
			p_addelement(ll_merchants);
			p_init_merchant((p_random(8) + 6));
			if (p_random(1)) {
				LIST_CURRENT(ll_merchants,struct st_merch_items).f_face = 120;
			} else {
				LIST_CURRENT(ll_merchants,struct st_merch_items).f_face = 121;
			}
			a_small_trader("main program", (((v_i * 3) + 1) + p_random(2))) = (p_countlist(ll_merchants) - 1);
		}
		for (v_akt_level = 10; v_akt_level <= 150; v_akt_level += 1) {
			if (p_random(100) > (68 + v_akt_level) && a_sonderlevel("main program", v_akt_level) != 2) {
				p_addelement(ll_merchants);
				p_init_merchant((p_random(9) + 5));
				if (p_random(1)) {
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_face = 120;
				} else {
					LIST_CURRENT(ll_merchants,struct st_merch_items).f_face = 121;
				}
				a_small_trader("main program", v_akt_level) = (p_countlist(ll_merchants) - 1);
			}
		}
		for (v_i = 1; v_i <= 9; v_i += 1) {
			v_rel_pos = p_random(9);
			v_final = v_rel_pos;
			while (a_fluss("main program", ((10 * v_i) + v_rel_pos)) == 1 || a_sonderlevel("main program", ((10 * v_i) + v_rel_pos)) > 0) {
				v_rel_pos = ((v_rel_pos + 1) % 10);
				if (v_rel_pos == v_final) {
					a_fluss("main program", ((10 * v_i) + v_rel_pos)) = 0;
					a_sonderlevel("main program", ((10 * v_i) + v_rel_pos)) = 0;
					break;
				}
			}
			p_resetlist(ll_room_list);
			do {
				p_nextelement(ll_room_list);
			} while (!(LIST_CURRENT(ll_room_list,struct st_room_type).f_level == ((10 * v_i) + v_rel_pos)));
			LIST_CURRENT(ll_room_list,struct st_room_type).f_type = 19;
			LIST_CURRENT(ll_room_list,struct st_room_type).f_stat1 = v_i;
		}
		for (v_akt_level = 1; v_akt_level <= 150; v_akt_level += 1) {
			a_skill_trader("main program", v_akt_level) = p_random(24);
			if (a_skill_trader("main program", v_akt_level) >= 1 && a_skill_trader("main program", v_akt_level) <= 5 && v_skill_traders_req == 1) {
				p_addelement(ll_merchants);
				p_init_merchant(a_skill_trader("main program", v_akt_level));
				a_skill_trader("main program", v_akt_level) = (p_countlist(ll_merchants) - 1);
			} else {
				a_skill_trader("main program", v_akt_level) = -1;
			}
			if (p_random(99) < p_min((20 + v_akt_level), 90)) {
				a_level_curse("main program", v_akt_level) = (p_random(25) + 1);
			} else {
				a_level_curse("main program", v_akt_level) = 0;
			}
		}
		g_level = 1;
		p_gen_laby(g_level);
		for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
			a_spieler("main program", v_i).f_character_x = a_eingangx("main program", g_level);
			a_spieler("main program", v_i).f_character_y = a_eingangy("main program", g_level);
		}
		g_akt_spieler = 1;
L_geladen: ;
		for (v_j = 1; v_j <= 4; v_j += 1) {
			for (v_i = 1; v_i <= 25; v_i += 1) {
				a_old_messages("main program", v_i, v_j).f_farbe = 0;
				a_old_messages("main program", v_i, v_j).f_nachricht = " ";
			}
		}
		p_flipbuffers(1);
		p_laby_screen();
		if (g_music == 1) {
			p_playmodule(1);
		}
		v_release1 = 1;
		v_force = 0;
		do {
			v_starttime = p_elapsedmilliseconds();
			p_fenster(0);
			if (a_spieler("main program", g_akt_spieler).f_creature_speed > 0) {
				v_release1 = p_creature_bewegen(v_release1);
			} else {
				g_xmod = 0;
				g_ymod = 0;
				p_examinekeyboard();
				p_read_joystick();
				if (!g_no_mouse) {
					v_result = p_examinemouse();
					g_mmouse_x = p_mousex();
					g_mmouse_y = p_mousey();
					g_mmouse_links = p_mousebutton(1);
				}
				if (v_release1 == 1 && !(g_mmouse_links || p_keyboardpushed(275) || p_keyboardpushed(276) || p_keyboardpushed(273) || p_keyboardpushed(274) || g_jax || g_jay)) {
					v_release1 = 0;
				}
				v_okay = 0;
				if (!v_release1 && (p_keyboardpushed(275) || g_jax == 1)) {
					v_okay = 1;
					a_spieler("main program", g_akt_spieler).f_face = 1;
					g_xmod = 1;
					g_ymod = 0;
					v_force = 1;
				}
				if (!v_release1 && (p_keyboardpushed(276) || g_jax == -1)) {
					v_okay = 1;
					a_spieler("main program", g_akt_spieler).f_face = 3;
					g_xmod = -1;
					g_ymod = 0;
					v_force = 1;
				}
				if (!v_release1 && (p_keyboardpushed(273) || g_jay == -1)) {
					v_okay = 1;
					a_spieler("main program", g_akt_spieler).f_face = 0;
					g_xmod = 0;
					g_ymod = -1;
					v_force = 1;
				}
				if (!v_release1 && (p_keyboardpushed(274) || g_jay == 1)) {
					v_okay = 1;
					a_spieler("main program", g_akt_spieler).f_face = 2;
					g_xmod = 0;
					g_ymod = 1;
					v_force = 1;
				}
				g_aktion = 0;
				if (!g_no_mouse) {
					if (g_mmouse_links == 1 && !v_release1) {
						if (g_mmouse_x > 160 && g_mmouse_x < 192 && g_mmouse_y >= 160 && g_mmouse_y <= 192) {
							p_autopickup();
						} else {
							if (g_mmouse_x > 192 && g_mmouse_x < 224 && g_mmouse_y >= 160 && g_mmouse_y <= 192) {
								v_okay = 1;
								a_spieler("main program", g_akt_spieler).f_face = 1;
								g_xmod = 1;
								g_ymod = 0;
							} else {
								if (g_mmouse_x > 128 && g_mmouse_x < 160 && g_mmouse_y >= 160 && g_mmouse_y <= 192) {
									v_okay = 1;
									a_spieler("main program", g_akt_spieler).f_face = 3;
									g_xmod = -1;
									g_ymod = 0;
								} else {
									if (g_mmouse_x > 160 && g_mmouse_x < 192 && g_mmouse_y >= 192 && g_mmouse_y <= 224) {
										v_okay = 1;
										a_spieler("main program", g_akt_spieler).f_face = 2;
										g_xmod = 0;
										g_ymod = 1;
									} else {
										if (g_mmouse_x > 160 && g_mmouse_x < 192 && g_mmouse_y >= 128 && g_mmouse_y <= 160) {
											v_okay = 1;
											a_spieler("main program", g_akt_spieler).f_face = 0;
											g_xmod = 0;
											g_ymod = -1;
										}
									}
								}
							}
						}
						v_moved = 0;
						v_nr_of_steps = p_countlist(ll_movementlist);
						if (g_mmouse_x < 370 && g_mmouse_y <= 370 && v_nr_of_steps > 0) {
							p_lastelement(ll_movementlist);
							v_akt_xmod = 7;
							v_akt_ymod = 7;
							v_akt_step = 1;
							do {
								g_xmod = 0;
								g_ymod = 0;
								if (LIST_CURRENT(ll_movementlist,struct st_knot2).f_x > v_akt_xmod) {
									a_spieler("main program", g_akt_spieler).f_face = 1;
									g_xmod = 1;
									g_ymod = 0;
								} else {
									if (LIST_CURRENT(ll_movementlist,struct st_knot2).f_x < v_akt_xmod) {
										a_spieler("main program", g_akt_spieler).f_face = 3;
										g_xmod = -1;
										g_ymod = 0;
									} else {
										if (LIST_CURRENT(ll_movementlist,struct st_knot2).f_y > v_akt_ymod) {
											a_spieler("main program", g_akt_spieler).f_face = 2;
											g_xmod = 0;
											g_ymod = 1;
										} else {
											if (LIST_CURRENT(ll_movementlist,struct st_knot2).f_y < v_akt_ymod) {
												a_spieler("main program", g_akt_spieler).f_face = 0;
												g_xmod = 0;
												g_ymod = -1;
											}
										}
									}
								}
								v_moved = 1;
								p_move();
								if (p_countlist(ll_movementlist) > 0) {
									v_akt_xmod = LIST_CURRENT(ll_movementlist,struct st_knot2).f_x;
									v_akt_ymod = LIST_CURRENT(ll_movementlist,struct st_knot2).f_y;
								}
								v_akt_step += 1;
							} while (!(!p_previouselement(ll_movementlist) || a_spieler("main program", g_akt_spieler).f_speed < 1 || v_akt_step > v_nr_of_steps || (!g_xmod && !g_ymod) || g_aktion == 1));
							p_show_movement(g_mmouse_x, g_mmouse_y, 1, 0);
							g_schongemalt = 0;
						}
					}
				}
				if (!v_moved) {
					p_move();
				}
				p_schnelltasten();
				if (g_aktion == 1) {
					goto L_nach_zauber;
				}
				p_zwischenbild();
				p_ftasten();
				if ((p_keyboardpushed(32) || a_jb("main program", 1)) && !g_autopickup) {
					p_autopickup();
				}
				if (!g_schongemalt) {
					p_screen2();
					if (!g_no_mouse) {
						v_result = p_examinemouse();
						g_mmouse_x = p_mousex();
						g_mmouse_y = p_mousey();
						g_mmouse_links = p_mousebutton(1);
						g_mmouse_rechts = p_mousebutton(2);
						if (!v_moved) {
							p_show_movement(g_mmouse_x, g_mmouse_y, v_force, 0);
							v_force = 0;
						}
						g_over_item = 0;
						if (g_mmouse_x > 160 && g_mmouse_x < 192 && g_mmouse_y >= 160 && g_mmouse_y <= 192) {
							if (a_laby_item("main program", a_spieler("main program", g_akt_spieler).f_character_x, a_spieler("main program", g_akt_spieler).f_character_y).f_name[a_spieler("main program", g_akt_spieler).f_level] > 0) {
								g_over_item = 1;
							}
							v_testfeld = a_labyrinth("main program", a_spieler("main program", g_akt_spieler).f_level, a_spieler("main program", g_akt_spieler).f_character_x, a_spieler("main program", g_akt_spieler).f_character_y).f_feld;
							if ((v_testfeld >= 58 && v_testfeld <= 61) || v_testfeld == 68 || v_testfeld == 194 || v_testfeld == 63 || v_testfeld == 161 || v_testfeld == 162 || v_testfeld == 9 || v_testfeld == 118 || v_testfeld == 7 || v_testfeld == 64 || v_testfeld == 82 || v_testfeld == 84 || v_testfeld == 87 || v_testfeld == 120 || v_testfeld == 121 || v_testfeld == 122 || v_testfeld == 123 || v_testfeld == 124 || v_testfeld == 125 || v_testfeld == 126 || v_testfeld == 127 || v_testfeld == 128 || v_testfeld == 129 || v_testfeld == 130 || v_testfeld == 131 || v_testfeld == 202 || v_testfeld == 203 || v_testfeld == 6 || v_testfeld == 192 || v_testfeld == 8 || v_testfeld == 54 || v_testfeld == 119 || v_testfeld == 19 || v_testfeld == 3 || v_testfeld == 2 || v_testfeld == 206) {
								g_over_item = 1;
							}
						}
						if (g_over_item == 1) {
							if (!g_no_mouse) {
								p_clipsprite(8, 32, 800, 32, 32);
								p_displaytransparentsprite(8, g_mmouse_x, g_mmouse_y);
							}
						} else {
							p_draw_mousepointer(g_mmouse_x, g_mmouse_y);
						}
					}
					p_flipbuffers(1);
				}
				p_laby_screen2();
				if (!v_moved && !v_okay) {
					p_sonderfeld();
				} else {
					v_moved = 0;
					v_okay = 0;
				}
				if (a_spieler("main program", g_akt_spieler).f_speed < 1 || g_aktion == 1) {
					g_spielerwechsel = 1;
L_nach_zauber: ;
					p_laby_screen2();
					p_nach_zug();
					if (a_spieler("main program", g_akt_spieler).f_creature_speed > 0) {
						p_clearlist(ll_movementlist);
						p_laby_screen3();
						v_release1 = 1;
					} else {
						p_laby_screen();
					}
				}
				if (g_nr_of_players > 1) {
					v_weitere = 0;
					for (v_i = 1; v_i <= g_nr_of_players; v_i += 1) {
						if (a_spieler("main program", v_i).f_status == 1) {
							v_weitere = (v_weitere + 1);
						}
					}
					if ((g_spielerwechsel == 1 || g_aktion == 1) && v_weitere > 1) {
						p_naechster();
						v_release1 = 1;
					}
				}
			}
			v_elapsedtime = (p_elapsedmilliseconds() - v_starttime);
			if (v_elapsedtime < 15) {
				p_delay((15 - v_elapsedtime));
			}
		} while (!(v_eventid == 1));
		p_runprogram("http://www.lostlabyrinth.com");
		exit(0);
	} catch (enum label l) {
		gotolabel = l;
		goto DISPATCH;
	};
	return 0;
}

